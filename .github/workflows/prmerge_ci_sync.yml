name: PR Merge CI SYNC

on:

  # To be called manual if needed
  workflow_dispatch:
    # branches:
    #   - main    
      
  # To be called by the main CI
  workflow_call:
    secrets:
      DOCKER_REGISTRY_USER:
        required: true
      DOCKER_REGISTRY_PASSWD:
        required: true
      SERVBOT_USER:
        required: true
      SERVBOT_PAT:
        required: true
      P4PORT:
        required: true
      P4USER:
        required: true
      P4PASSWD:
        required: true
      RUN_FIRST_TIME:
        required: true
      TEAM_RESTRICTIVE_CLOSED_BRANCH:
        required: true
      FROM_EMAIL:
        required: true
      TO_EMAIL:
        required: true
      DATE_MIN_CHECK_COMMITS:
        required: true
        
# When pushing in main or merging pull request in main
#  ${{github.base_ref}} : <empty>
#  ${{github.ref_name}} : main 
# When creating pull request in dev* 
#  ${{github.base_ref}} : main  
#  ${{github.ref_name}} : 1/merge

jobs:

  syncGitPperforce:
    if: ${{ github.repository_owner == 'OpenRadioss' }}
    runs-on: [sync,linux64]
    container: 
      image: fr-qafactorydev.europe.altair.com/common-linux64
      credentials: 
        username: ${{secrets.DOCKER_REGISTRY_USER}}
        password: ${{secrets.DOCKER_REGISTRY_PASSWD}}
      volumes: 
         - /etc/localtime:/etc/localtime:ro
    env: 
      SERVBOT_USER: ${{ secrets.SERVBOT_USER }}
      SERVBOT_PAT: ${{ secrets.SERVBOT_PAT }}
      P4PORT: ${{secrets.P4PORT}}
      P4USER: ${{secrets.P4USER}}
      P4PASSWD: ${{secrets.P4PASSWD}}
      RUN_FIRST_TIME: ${{secrets.RUN_FIRST_TIME}}
      P4REPOSYNCPERFORCE: "//depot/perforce_sync/git_perforce_mainline_buffer"
      P4REPOPERFORCE: "//depot/Radioss/mainline"
      # P4REPOSYNCPERFORCE: "//depot/Radioss/pfake_oss_mainline4"
      # P4REPOPERFORCE: "//depot/Radioss/pfake_oss_mainline_final2"
      DATE_MIN_CHECK_COMMITS: "${{ secrets.DATE_MIN_CHECK_COMMITS }}"
      COMMIT_LIST_FILE: /tmp/commits_list
      VERIF_PENDING_FILES: /tmp/verify_opened_changelists.txt
      INTEGRATE_WS: integrate_perforce

      STATUS_STEP_PERFORCE_LAST_KNOWN_GIT_COMMIT: 0
      MSG_STEP_PERFORCE_LAST_KNOWN_GIT_COMMIT: "Could not find any commit reference in perforce temporary sync repository, if the remote perforce WS is empty (creation), you may set the RUN_FIRST_TIME secret variable to run_1"

      STATUS_STEP_SUBMIT_TMP_SYNC_REPO: 0
      INFO_STEP_SUBMIT_TMP_SYNC_REPO: ""
      MSG_STEP_SUBMIT_TMP_SYNC_REPO: "Could not submit on perforce temporary sync repository"

      STATUS_STEP_PERFORCE_LAST_KNOWN_INTEGRATED_COMMIT: 0
      MSG_STEP_PERFORCE_LAST_KNOWN_INTEGRATED_COMMIT: "Could not find any commit reference in perforce integrate sync repository, if the remote perforce WS is empty (creation), you may set the RUN_FIRST_TIME secret variable to run_1"

      STATUS_STEP_SUBMIT_INTEGRATE_REPO: 0
      INFO_STEP_SUBMIT_INTEGRATE_REPO: ""
      MSG_STEP_SUBMIT_INTEGRATE_REPO: "Could not submit on perforce integrate sync repository"

      FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
      TO_EMAIL: ${{ secrets.TO_EMAIL }}

      CLOSE_BRANCH: 0
      TEAM_RESTRICTIVE_CLOSED_BRANCH: ${{ secrets.TEAM_RESTRICTIVE_CLOSED_BRANCH }}

    steps:

      # Set the working dir suffixed with branch name
      - uses: haya14busa/action-cond@v1
        id: set_workdir
        with:
          cond: ${{ github.base_ref == '' }}
          if_true: ${{github.ref_name}}
          if_false: ${{github.base_ref}}

      - name: Create branch oriented WS directory & integration WS
        run: |
          mkdir -p ${{ steps.set_workdir.outputs.value }} $INTEGRATE_WS

      # Create a WS to sync git changes on a temporary repo (sync_git_perforce)
      - name: Create/Update sync_git_perforce workspace
        working-directory: ${{ steps.set_workdir.outputs.value }}
        run: |
          echo $P4PASSWD | p4 login
          export P4CLIENT=$(echo "${P4USER}_${{ github.repository }}_sync_git_perforce" | tr '/' '_')
          echo "P4CLIENT=$P4CLIENT" >> $GITHUB_ENV
          if ! p4 client -o -t $P4CLIENT > /dev/null 2>&1; then 
            echo "Creating workspace $P4CLIENT (1st time run)"
            echo "
          Client: $P4CLIENT
          Owner:  servbot
          Root:   $PWD
          Options:        noallwrite noclobber nocompress unlocked nomodtime normdir
          SubmitOptions:  submitunchanged
          LineEnd:        local
          View:
            $P4REPOSYNCPERFORCE/... //$P4CLIENT/...
            -$P4REPOSYNCPERFORCE/.git/... //$P4CLIENT/.git/...
            -$P4REPOSYNCPERFORCE/.github/... //$P4CLIENT/.github/...
            -$P4REPOSYNCPERFORCE/.gitattributes //$P4CLIENT/.gitattributes
            -$P4REPOSYNCPERFORCE/.p4config //$P4CLIENT/.p4config
            -$P4REPOSYNCPERFORCE/extlib/... //$P4CLIENT/extlib/...
            " | p4 client -i;
          fi

          # Clean possible previous pending changelists 
          p4 revert ./...
          for cl in `p4 changes -c $P4CLIENT -s pending | grep "\[ GIT INTEG \]" | awk -F' ' '{print $2}' | sort -n`
          do 
            echo "Removing old pending CL $cl"
            p4 change -d $cl
          done

          p4 sync

          export SCRIPT_OPT=''

          # In case of first run we won't find last known commit so we force script 
          # Variable RUN_FIRST_TIME must be set to run_1 at this precise moment
          if [ "$RUN_FIRST_TIME" = "run_1" ]
          then 
            SCRIPT_OPT='--force_sync'
          else
            CL=`p4 changes -c $P4CLIENT -s submitted | grep "\[ GIT INTEG \]" | head -1 |awk -F' ' '{print $2}'`
            RET=`p4 describe $CL | head -3 | tail -1 | sed -e "s/^.*\[ GIT INTEG \] //;s/ .*$//"`

            if [ -z $RET ] || [ "$RET" = "" ]
            then 
              exit 1
            else 
              SCRIPT_OPT="--perforce_last_commit $RET"; fi
          fi

          echo "sync_option=$SCRIPT_OPT" >> $GITHUB_ENV
          echo -e "P4USER=$P4USER\nP4PORT=$P4PORT\nP4CLIENT=$P4CLIENT" > .p4config

          # Set correct end of step status (if not an email will be sent)
          echo "STATUS_STEP_PERFORCE_LAST_KNOWN_GIT_COMMIT=1" >> $GITHUB_ENV

      # Get all unsynced commit since last good one
      # If we never meet the last known commit on perforce we abort, that could mean there are more commits to into account
      # At WS creation we use the dedicated --force_sync option to accept submiting event if perforce_last_commit has not been found
      # so if this specific case fails, think to delete perforce client before re-running
      - name: Get all unsynced commit since last good one
        run: |
          sync_git_2_perforce.py \
            --git_api_url ${{ github.api_url }} \
            --git_repo ${{ github.repository }} \
            --git_user $SERVBOT_USER \
            --git_token $SERVBOT_PAT \
            --interval_check "${{ env.DATE_MIN_CHECK_COMMITS }}" \
            --output_file ${{ env.COMMIT_LIST_FILE }} \
            $sync_option \
            --current_commit ${{github.sha}} 

      # Create/Upgrade local git repo
      - uses: actions/checkout@v3
        with:
          path: ${{ steps.set_workdir.outputs.value }}
          clean: 'false'
          lfs: 'true'
      - name: Unshallow the git log, else we won't be able to checkout commits 
        working-directory: ${{ steps.set_workdir.outputs.value }}
        run: git fetch --unshallow

      ## For each commit found: get git files, p4 reconcile and submit
      # If some file are still opened after submit, abort
      - name: Upgrade perforce for each git commit found
        working-directory: ${{ steps.set_workdir.outputs.value }}
        run: |
          git config --global advice.detachedHead false

          # We don't want extlib to be synced
          rm -rf extlib
          ls -ls

          while read LINE
          do
            IFS='||'; arrIN=($LINE); unset IFS;
            message="[ GIT INTEG ] ${arrIN[0]} - ${arrIN[2]} - ${arrIN[4]}"
            echo "---------------------------------"
            echo "-- ${arrIN[0]} --"
            echo "---------------------------------"
            echo "INFO_STEP_SUBMIT_TMP_SYNC_REPO=${arrIN[0]}" >> $GITHUB_ENV
            git checkout ${arrIN[0]}
            #p4 status
            p4 reconcile
            opened_files_nb=$(p4 opened -c default | wc -l)
            #echo "OPENED : ${opened_files_nb}"
            if [ ${opened_files_nb} -gt 0 ]
            then 
              p4 submit -d "${message}"
            fi

          done < ${{ env.COMMIT_LIST_FILE }}

          # Set correct end of step status (if not an email will be sent)
          echo "STATUS_STEP_SUBMIT_TMP_SYNC_REPO=1" >> $GITHUB_ENV


      # Create a WS to integration (and merge on the fly) the temporary repo (sync_git_perforce) to the final destination
      # Both views are declared
      - name: Create/Update integrate workspace
        working-directory: ${{ env.INTEGRATE_WS }}
        run: |
          echo $P4PASSWD | p4 login
          export P4CLIENT=$(echo "${P4USER}_${{ github.repository }}_integrate_perforce" | tr '/' '_')
          # echo "P4CLIENT=$P4CLIENT" >> $GITHUB_ENV
          echo "P4CLIENT=$P4CLIENT"
          pwd
          if ! p4 client -o -t $P4CLIENT > /dev/null 2>&1; then 
            echo "Creating workspace $P4CLIENT (1st time run)"
            echo "
          Client: $P4CLIENT
          Owner:  servbot
          Root:   $PWD
          Options:        noallwrite noclobber nocompress unlocked nomodtime normdir
          SubmitOptions:  submitunchanged
          LineEnd:        local
          View:
            $P4REPOSYNCPERFORCE/... //$P4CLIENT/sync_perforce/...
            $P4REPOPERFORCE/... //$P4CLIENT/dest_perforce/...
            -$P4REPOPERFORCE/.p4config //$P4CLIENT/.p4config
            " | p4 client -i;
          fi

          # Clean possible previous pending changelists 
          p4 revert ./...
          for CL in `p4 changes -c $P4CLIENT -s pending | grep "\[ GIT INTEG \]" | awk -F' ' '{print $2}' | sort -n`
          do 
            echo "Removing old pending CL $CL"
            p4 change -d $CL
          done

          echo -e "P4USER=$P4USER\nP4PORT=$P4PORT\nP4CLIENT=$P4CLIENT" > .p4config

          # In case of first run we won't find last known integrated commit integrate everything
          # Variable RUN_FIRST_TIME must be set to run_1 at this precise moment
          if [ "$RUN_FIRST_TIME" = "run_1" ]
          then
            echo "/!\\ Warning integrate all /!\\"
            p4 integrate $P4REPOSYNCPERFORCE/... $P4REPOPERFORCE/...
            export LINE=$(tail -n 1 ${{ env.COMMIT_LIST_FILE }})
            IFS='||'; arrIN=($LINE); unset IFS;
            message="[ GIT INTEG ] ${arrIN[0]} - ${arrIN[2]} - ${arrIN[4]}"

            opened_files_nb=$(p4 opened -c default | wc -l)
            if [ ${opened_files_nb} -gt 0 ]
            then 
              # Try to resolve can be useful if destination repository already exist
              p4 resolve -am
              p4 submit -d "${message}"
            fi

            # Set correct end of step status (if not an email will be sent)
            echo "STATUS_STEP_PERFORCE_LAST_KNOWN_INTEGRATED_COMMIT=1" >> $GITHUB_ENV
            echo "STATUS_STEP_SUBMIT_INTEGRATE_REPO=1" >> $GITHUB_ENV

          else

            # Getting the last known integrated commit
            export LAST_KNOW_INTEG_COMMIT=`p4 changes -l -s submitted -m 1000 $P4REPOPERFORCE/... | grep "^\s*\[ GIT INTEG \]" | head -n 1 | sed -e "s/^.*\[ GIT INTEG \] //;s/ .*$//"`
            export LAST_KNOW_INTEG_COMMIT_TRUNCATED=$(echo $LAST_KNOW_INTEG_COMMIT | cut -c -16)

            # Getting all not integrated changelist (=all until last know commit)
            if [ ! -z "$LAST_KNOW_INTEG_COMMIT_TRUNCATED" ]
            then 

              # Set correct end of step status (if not an email will be sent)
              echo "STATUS_STEP_PERFORCE_LAST_KNOWN_INTEGRATED_COMMIT=1" >> $GITHUB_ENV

              for changelist in `p4 changes -s submitted -m 1000 $P4REPOSYNCPERFORCE/... | grep -B 10000 "GIT INTEG.*\s*$LAST_KNOW_INTEG_COMMIT_TRUNCATED" | head -n-1 | awk -F' ' '{print $2}' | sort -n`
              do 
                echo "---------------------------------"
                echo "-- $changelist --"
                echo "---------------------------------"

                echo "INFO_STEP_SUBMIT_INTEGRATE_REPO=$changelist" >> $GITHUB_ENV

                p4 integrate $P4REPOSYNCPERFORCE/...@$changelist,@$changelist $P4REPOPERFORCE/...
                p4 resolve -am
                p4_description=`p4 -Ztag -F %Description% change -o $changelist`
                p4 submit -d "$p4_description"

              done

              # Set correct end of step status (if not an email will be sent)
              echo "STATUS_STEP_SUBMIT_INTEGRATE_REPO=1" >> $GITHUB_ENV

            else 
              # Exit 1 not found LAST_KNOW_INTEG_COMMIT
              # echo "Error cannot find a last known integrate commit in $P4REPOPERFORCE repository"
              exit 1
            fi



          fi

      - name: Managing step execution
        if: ${{ always() }}
        run: |

          MAILMSG="Some error(s) has(ve) been raised during workflow execution:\n\n"
          CONTINUE=1
          echo -e "\n#### STATUS_STEP_PERFORCE_LAST_KNOWN_GIT_COMMIT ###"
          if [ "$STATUS_STEP_PERFORCE_LAST_KNOWN_GIT_COMMIT" = 0 ]
          then
            echo -e "Status\t[ \033[31;2;1mFAILED\033[0m ]" 
            MAILMSG+="$MSG_STEP_PERFORCE_LAST_KNOWN_GIT_COMMIT\n"
            CONTINUE=0
          else
            echo -e "Status\t[ \033[32;2;1mOK\033[0m ]"
          fi

          if [ "$CONTINUE" = 1 ]
          then
            echo -e "\n#### STATUS_STEP_SUBMIT_TMP_SYNC_REPO ###"
            if [ "$STATUS_STEP_SUBMIT_TMP_SYNC_REPO" = 0 ]
            then 
              echo -e "Status\t[ \033[31;2;1mFAILED\033[0m ]" 
              echo "  MSG : $MSG_STEP_SUBMIT_TMP_SYNC_REPO ($INFO_STEP_SUBMIT_TMP_SYNC_REPO)"
              MAILMSG+="$MSG_STEP_SUBMIT_TMP_SYNC_REPO ($INFO_STEP_SUBMIT_TMP_SYNC_REPO)\n"
            CONTINUE=0
            else
              echo -e "Status\t[ \033[32;2;1mOK\033[0m ]"
            fi
          fi

          if [ "$CONTINUE" = 1 ]
          then
            echo -e "\n#### STATUS_STEP_PERFORCE_LAST_KNOWN_INTEGRATED_COMMIT ###"
            if [ "$STATUS_STEP_PERFORCE_LAST_KNOWN_INTEGRATED_COMMIT" = 0 ]
            then 
              echo -e "Status\t[ \033[31;2;1mFAILED\033[0m ]" 
              MAILMSG+="$MSG_STEP_PERFORCE_LAST_KNOWN_INTEGRATED_COMMIT\n"
              CONTINUE=0
            else
              echo -e "Status\t[ \033[32;2;1mOK\033[0m ]"
            fi
          fi

          if [ "$CONTINUE" = 1 ] 
          then
            echo -e "\n"#### STATUS_STEP_SUBMIT_INTEGRATE_REPO ###"
            if [ "$STATUS_STEP_SUBMIT_INTEGRATE_REPO" = 0 ]
            then 
              echo -e "Status\t[ \033[31;2;1mFAILED\033[0m ]" 
              echo "  MSG : $MSG_STEP_SUBMIT_INTEGRATE_REPO ($INFO_STEP_SUBMIT_INTEGRATE_REPO)"

              export P4CLIENT=$(echo "${P4USER}_${{ github.repository }}_integrate_perforce" | tr '/' '_')
              echo "---------"
              p4 opened
              p4 changes -s pending -c $P4CLIENT
              echo "---------"
              MAILMSG+="$MSG_STEP_SUBMIT_INTEGRATE_REPO ($INFO_STEP_SUBMIT_INTEGRATE_REPO)\n"
              CONTINUE=0
            else
              echo -e "Status\t[ \033[32;2;1mOK\033[0m ]"
            fi
          fi

          # Send email 
          if [ "$CONTINUE" = 0 ] 
          then
            # Close the branch 
            echo "CLOSE_BRANCH=1" >> $GITHUB_ENV

            # Setting SMTP server (docker host)
            DOCKER_HOST=`/sbin/ip route|awk '/default/ { print $3 }'`
            echo "set smtp=smtp://${DOCKER_HOST}:25" >> /etc/mail.rc 

            # Print message in log 
            echo -e $MAILMSG

            # Send email
            echo -e "$MAILMSG\nThe branch is closed" | Mail -r $FROM_EMAIL -s "Error in Github CI repo ${{ github.repository }} (${{github.sha}})" $TO_EMAIL

            # Exit fail to see it as a failure
            exit 1

          fi

      # Close the branch (= restrict push to team devopsadmins) if needed
      # Owner is not mandatory here ... PAT is sufficient ??? seems that as servbot has permissions on this repo so his PAT is sufficient ...
      - uses: octokit/request-action@v2.x
        id: close_branch
        env:
          GITHUB_TOKEN: ${{ env.SERVBOT_PAT }}
          REQUEST_BODY: "['${{ env.TEAM_RESTRICTIVE_CLOSED_BRANCH}} ']"
        with:
          route: PUT /repos/${{ github.repository }}/branches/main/protection/restrictions/teams
          data: ${{ env.REQUEST_BODY }}
        if: ${{ always() && env.CLOSE_BRANCH == 1 }} 

      # It the closing went wrong we send an email
      - name: "Check result of closing branch and warn if it fails"
        run: |
          # No need to configure SMTP server, already done in previous steps

          MAILMSG="Some error(s) has(ve) been raised during workflow execution:\n\n"
          MAILMSG+="A branch closing is needed but has failed\n\n"
          MAILMSG+="Return status API is : ${{ steps.close_branch.outputs.status }}\n\n"
          MAILMSG+="Check more detailed datas in CI logs\n"

          # Print message in log 
          echo -e $MAILMSG
          echo -e "\nClose return data API is : ${{ steps.close_branch.outputs.data }}"

          # Send email
          echo -e "$MAILMSG" | Mail -r $FROM_EMAIL -s "Error in Github CI repo ${{ github.repository }} (${{github.sha}}) on closing branch" $TO_EMAIL

          # Exit fail to see it as a failure
          exit 1

        if: ${{ always() && env.CLOSE_BRANCH == 1 && steps.close_branch.outputs.status != 200 }} 