//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//  contact_airbag_single_surface.cfg  
//
// CONTACT_AIRBAG_SINGLE_SURFACE
//

ATTRIBUTES(COMMON)
{
  //Card for MPP option
  CARD_MPP_EXISTS = VALUE(INT,"MPP option");
  IGNORE          = VALUE(INT,"Ignore initial penetrations");
  BUCKET          = VALUE(INT,"Bucketsort frequency");
  LCBUCKET        = VALUE(FUNCT,"Loadcurve for bucketsort frequency");
  NS2TRACK        = VALUE(INT,"Number of potential contacts");
  INITITER        = VALUE(INT,"Number of iterations");
  PARMAX          = VALUE(FLOAT,"Parametric extension distance");
  CPARM8          = VALUE(INT,"Exclude beam to beam contact");


  // Card2 for MPP option (this is not a real array, NB_MPP_CARD2 will be 0 or 1)
  NB_MPP_CARD2    = SIZE("Write MPP card 2");
  MPP_CARD2       = ARRAY[NB_MPP_CARD2](SUBOBJECT, "");

  //Support (will not be read directly, because it might get another id)
  //SLAVE           = VALUE(SURF, "[SSID]Secondary surface");
  SLAVE           = VALUE(SETS, "[SSID]Secondary surface");
  //SLAVE_DEFINE_BOX_RESTRICTING      = VALUE(DEFINE_BOX, "Secondary box");
  SLAVE_DEFINE_BOX_RESTRICTING      = VALUE(BLOCK, "Secondary box");

  //Card1 of LS-Dyna manual
  //SLAVE_ID        = VALUE(INT,  "Secondary Surface ID") ;
  slaveentityids  = VALUE(MULTIOBJECT,"Slave segment set ID, node set ID, part set ID, part ID, or shell element set ID, see *SET_SEGMENT, *SET_NODE_OPTION, *PART, *SET_PART or *SET_SHELL_OPTION") { SUBTYPES = ( /COMPONENT , /SETS , /ELEMS ) ; }
  //SLAVE_TYPE      = VALUE(INT,  "Secondary Surface Type") ;
  SSTYP             = VALUE(INT, "ID type of SSID");
  SPR             = VALUE(INT,  "Secondary side for interface force: 0 not included/ 1 Included");

  MPR             = VALUE(INT,  "Save main side during calculation");

  //SLAVE support
  //SLAVE_SURF      =  VALUE(SURF, "Secondary set segment");   
  SLAVE_SURF      =  VALUE(SETS, "Secondary set segment");
  //SLAVE_GRSHEL    =  VALUE(GRSHEL, "Secondary set shell"); 
  SLAVE_GRSHEL    =  VALUE(SETS, "Secondary set shell");
  //SLAVE_GRPART  =  VALUE(GRPART, "Secondary set part");   
  SLAVE_GRPART  =  VALUE(SETS, "Secondary set part");
  //SLAVE_PART      =  VALUE(PART, "Secondary part ID ");   
  SLAVE_PART      =  VALUE(SETS, "Secondary part ID ");
  //SLAVE_GRNOD     =  VALUE(GRNOD, "Secondary set node");   






  //Card2 of LS-Dyna manual
  FS              = VALUE(FLOAT,  "Static coeff. of friction");
  FD              = VALUE(FLOAT,  "Dynamic coeff. of friction");
  DC              = VALUE(FLOAT,   "Exponential decay coefficient");
  VC              = VALUE(FLOAT,  "Coefficient for viscous friction");
  VDC             = VALUE(FLOAT,  "Viscous Damping coeff. (\% of critical)");
  PENCHK          = VALUE(INT,    "Small penetration search");
  BT              = VALUE(FLOAT,  "Birth Time");
  DT              = VALUE(FLOAT,  "Death Time");

  //Card3 of LS-Dyna manual
  SFS             = VALUE(FLOAT,  "Scale Factor Secondary Stiffness");
  SST             = VALUE(FLOAT,  "Optional Secondary Thickness");
  SFST            = VALUE(FLOAT,  "Secondary Scale Factor Thickness");
  FSF             = VALUE(FLOAT,  "Coulomb Friction Scale Factor");
  VSF             = VALUE(FLOAT,  "Viscous friction scale factor");

  CARD_A_EXISTS   = VALUE(INT,"Write optional card A");
  //OPTION A
  SOFT            = VALUE(INT,"Soft constraint option");
  SOFSCL          = VALUE(FLOAT,"Scale factor for constraint forces");
  LCIDAB          = VALUE(FUNCT,"Curve for airbag thickness as function of time");
  MAXPAR          = VALUE(FLOAT,"Maximum parametric coordinate");
  SBOPT           = VALUE(INT,"Segment-based contact options");

  DEPTH_IS_FUNC   = VALUE(INT,"Use DEPTH function");
  DEPTH_FUNC      = VALUE(FUNCT,"Curve for searching depth vs time");
  DEPTH           = VALUE(INT,"Search depth in automatic contact");

  BSORT_IS_FUNC   = VALUE(INT,"Use BSORT function");
  BSORT_FUNC      = VALUE(FUNCT,"Curve for bucket sorting frequency vs time (BSORT fun)");
  BSORT           = VALUE(INT,"Number of cycles between bucket sorts BSORT");
  FRCFRQ          = VALUE(INT,"Number of cycles for penalty contacts");

  CARD_B_EXISTS   = VALUE(INT,"Write optional card B");
  //OPTION B
  PENMAX          = VALUE(FLOAT,"Maximum penetration distance");
  THKOPT          = VALUE(INT,"Thickness option");
  SHLTHK          = VALUE(INT,"Shell thickness option");
  SNLOG           = VALUE(INT,"Disable shooting node logic in thickness offset contact");
  ISYM            = VALUE(INT,"Symmetry plane option");
  I2D3D           = VALUE(INT,"Segment searching option");
  SLDTHK          = VALUE(FLOAT,"Solid element thickness");
  SLDSTF          = VALUE(FLOAT,"Solid element stiffness");

  CARD_C_EXISTS   = VALUE(INT,"Write optional card C");
  //OPTION C
  IGAP            = VALUE(INT,"Flag to improve implicit convergence behavior");
  IGAP_0          = VALUE(INT, "IGAP: Less than 0");  
  IGAP_2          = VALUE(INT, "IGAP: Grater than 2");  
  IGNORE_C        = VALUE(INT,"Ignore initial penetrations in *CONTACT");
  DPRFAC          = VALUE(FLOAT,"Depth of penetration reduction factor");
  DPRFAC_IS_FUNC  = VALUE(INT, "Use DPRFAC function");
  DPRFAC_FUNC     = VALUE(FUNCT, "Curve defining DPRFAC vs time");
  DTSTIF          = VALUE(FLOAT,"Time step used in stiffness calculation");
  DTSTIF_IS_FUNC  = VALUE(INT, "Use DTSTIF function");
  DTSTIF_FUNC     = VALUE(FUNCT, "Curve defining DTSTIF vs time");
  FLANGL          = VALUE(FLOAT,"Angle tolerance in radians");
  //CID_RCF         = VALUE(SKEW,"Coordinate system in which to output RCFORC force resultants");
  CID_RCF         = VALUE(SYSTEM,"Coordinate system in which to output RCFORC force resultants");

  CARD_D_EXISTS = VALUE(INT,"Write optional card D") ;
  Q2TRI = VALUE(INT,"Option to split quadrilateral contacts segments into two triangles") ;
  DTPCHK = VALUE(FLOAT,"Time interval between shell penetration reports") ; 
  SFNBR = VALUE(FLOAT,"Scale factor for neighbor segment contact") ;
  FNLSCL = VALUE(FLOAT,"Scale factor for nonlinear scaling");
  DNLSCL = VALUE(FLOAT,"Distance for nonlinear force scaling");
  TCSO   = VALUE(INT,"Option to consider only contact segments (not all attached elements) when computing the contact thickness for a node or a segment");
  TIEDID = VALUE(INT,"Incremental displacement update for tied contacts") ;
  SHLEDG = VALUE(INT,"Flag for assuming edge shape for shells when measuring penetration. (available for segmentbased on contact)") ;

  CARD_E_EXISTS = VALUE(INT,"Write optional card E") ;
  SHAREC    = VALUE(INT,"Shared constraint flag") ;
  CPARM8_E  = VALUE(INT,"This is similar to CPARM8 in *CONTACT_..._MPP which is applicable only to MPP");
  //IPBACK    = VALUE(INT,"This option applies to constrained tied contacts only");
  SRNDE     = VALUE(INT,"Segment Rounded Edges");
  IFLAG     = VALUE(INT,"Contact type interface");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES
    IFLAG = -1;
}

DEFINITIONS(COMMON)
{
     SELECTION_ROOT=(SLAVE_SURF);
}

//DEFAULTS(COMMON)
//{
//	SLAVE_TYPE=0;
//}
CHECK(COMMON)
{
   IGAP_0 < 0;
   IGAP_2 > 0;
}

GUI(COMMON)
{
  //MPP card
optional:
  FLAG(CARD_MPP_EXISTS);
  if(CARD_MPP_EXISTS!=FALSE)
  {
    SEPARATOR("MPP option");
    RADIO(IGNORE) {
      ADD(0, "0: Move nodes to eliminate initial penetrations in the model definition");
      ADD(1, "1: Allow initial penetrations to exist by tracking initial penetrations");
      ADD(2, "2: Allow initial penetrations and print penetrations warning messages");
    }
    SCALAR(BUCKET) {DIMENSION="DIMENSIONLESS";}
    graphical FUNCTION(LCBUCKET)
    {
      X_TITLE="PRESSURE";      X_DIMENSION="pressure";
      Y_TITLE="FREQUENCY";     Y_DIMENSION="f";
    }
    SCALAR(NS2TRACK) {DIMENSION="DIMENSIONLESS";}
    SCALAR(INITITER) {DIMENSION="DIMENSIONLESS";}
    SCALAR(PARMAX)  {DIMENSION="DIMENSIONLESS";}
    RADIO(CPARM8)
    {
      ADD(0,"0: Disable");
      ADD(1,"1: Enable");
    }
    FLAG(NB_MPP_CARD2);
  }
  if ((CARD_MPP_EXISTS!=FALSE) && (NB_MPP_CARD2 > 0))
  {
    ARRAY_TO_SINGLE(0, "")
    {
      SUBOBJECT(MPP_CARD2) {SUBTYPES = (/SUBOBJECT/CONTACT_MPP_CARD2);} 
    }
  }


 SEPARATOR("Secondary selection",OPEN);
 
 //RADIO(SLAVE_TYPE)
 RADIO(SSTYP)
 {
   ADD(0,"Automatic / By segment set");
   ADD(1,"By shell element set");
   ADD(2,"By part set");
   ADD(3,"By part");
   //ADD(4,"By node set");
   ADD(5,"Include all");
   //ADD(6,"By part set for exempted parts");
 }
/*
 if(SLAVE_TYPE==0) {
   optional:
   graphical SUPPORT("Secondary segments") {
     OBJECTS=(SEGMENT,SHELL,PART);
     ADD(SLAVE_SURF);
   }
 } else if(SLAVE_TYPE==1) {
   optional:
   graphical SUPPORT("Secondary shell elements") {
     OBJECTS=(SHELL,PART);
     ADD(SLAVE_GRSHEL);
   }
 } else if(SLAVE_TYPE==2) {
   mandatory:
   graphical SUPPORT("Secondary parts") {
     OBJECTS=(PART);
     ADD(SLAVE_GRPART);
   }
 } else if(SLAVE_TYPE==3) {
   mandatory:
   graphical DATA(SLAVE_PART);
 } 

 optional:
 if((SLAVE_TYPE==2)||(SLAVE_TYPE==3)||(SLAVE_TYPE==5)||
    ((SLAVE_TYPE==0)&&(SLAVE_SURF==NONE))||
    ((SLAVE_TYPE==1)&&(SLAVE_GRSHEL==NONE)))
 {
   graphical    DATA(SLAVE_DEFINE_BOX_RESTRICTING);
 }
*/
    DATA(SLAVE_DEFINE_BOX_RESTRICTING);

 SEPARATOR();

//
  FLAG(SPR, "Secondary side for interface force: 0 not included/ 1 Included");

  SCALAR(FS) { DIMENSION="pressure"; }
  SCALAR(FD) { DIMENSION="pressure"; }
  SCALAR(DC) { DIMENSION="pressure"; }
  SCALAR(VC) { DIMENSION="pressure"; }
  SCALAR(VDC) { DIMENSION="DIMENSIONLESS"; }
  RADIO(PENCHK)
  {
    TITLE       = "Penetration Check";
    ADD(0,"0: OFF");
    ADD(1,"1: ON");
    ADD(2,"2: ON Shortest diag.") ;
  }
  SCALAR(BT, "Start Time", "t") ;
  SCALAR(DT, "End Time", "t") ;

  SCALAR(SFS) { DIMENSION="DIMENSIONLESS"; }
  SCALAR(SST) { DIMENSION="l"; }
  SCALAR(SFST) { DIMENSION="DIMENSIONLESS"; }
  SCALAR(FSF) { DIMENSION="DIMENSIONLESS"; }
  SCALAR(VSF) { DIMENSION="DIMENSIONLESS"; }

  FLAG(CARD_A_EXISTS);
  if (CARD_A_EXISTS != FALSE) {

    SEPARATOR("Optional card A");

    RADIO(SOFT) {
      ADD(0, "0: Penalty formulation");
      ADD(1, "1: Soft constraint formulation");
      ADD(2, "2: Segment-based contact");
      ADD(4, "4: Constraint approach for FORMING contact option");
      ADD(6, "6: Special contact algorithm to handle sheet blank edge (deformable) to gage pin (rigid shell) contact during implicit gravity loading, applies to *CONTACT_FORMING_- NODES_TO_SURFACE only.");
    }
    SCALAR(SOFSCL)      { DIMENSION="DIMENSIONLESS";}
    FUNCTION(LCIDAB){ X_TITLE="Time";Y_TITLE="Airbag Thickness";}
    SCALAR(MAXPAR)      { DIMENSION="DIMENSIONLESS";}
  }
  if((CARD_A_EXISTS != FALSE) && (SOFT==2)) {
    RADIO(SBOPT)
    {
      ADD(0,"0: Defaults to 2");
      ADD(1,"1: Pinball edge-edge contact");
      ADD(2,"2: Assume planer segments");
      ADD(3,"3: Warped segment checking");
      ADD(4,"4: Sliding option");
      ADD(5,"5: Do options 3 and 4");
    }
  }
  if(CARD_A_EXISTS != FALSE) {
    FLAG(DEPTH_IS_FUNC);
  }
  if((CARD_A_EXISTS != FALSE) && (DEPTH_IS_FUNC != FALSE))
  {
    FUNCTION(DEPTH_FUNC) {X_TITLE="Time";Y_TITLE="Searching depth";}
  }
  else if(CARD_A_EXISTS != FALSE)
  {
    SCALAR(DEPTH)   { DIMENSION="l";}
  }
  if(CARD_A_EXISTS != FALSE) {
    FLAG(BSORT_IS_FUNC);
  }
  if((CARD_A_EXISTS != FALSE) && (BSORT_IS_FUNC!=FALSE))
  {
    FUNCTION(BSORT_FUNC){X_TITLE="Time";Y_TITLE="Bucket sorting frequency";}
  }
  else if(CARD_A_EXISTS != FALSE)
  {
    SCALAR(BSORT)   { DIMENSION="DIMENSIONLESS";}
  }
  if (CARD_A_EXISTS != FALSE) {
    SCALAR(FRCFRQ)      { DIMENSION="DIMENSIONLESS";}
  }
 if (CARD_A_EXISTS != FALSE) {
    SEPARATOR();
    FLAG(CARD_B_EXISTS);
  }

  if((CARD_A_EXISTS != FALSE) && (CARD_B_EXISTS != FALSE)) {

    SEPARATOR("Optional card B");
    SCALAR(PENMAX)    { DIMENSION="l";}
    RADIO(THKOPT) {
      ADD(0, "0: Default is taken from control card");
      ADD(1, "1: Thickness offsets are included");
      ADD(2, "2: Thickness offsets are not included(old way)");
    }
  }

  if((CARD_A_EXISTS != FALSE) && (CARD_B_EXISTS != FALSE) && (THKOPT==1)) {
    RADIO(SHLTHK) {
      ADD(0, "0: Thickness is not considered");
      ADD(1, "1: Thickness is considered but rigid bodies are excluded");
      ADD(2, "2: Thickness is considered including rigid bodies");
    }
  }
  if((CARD_A_EXISTS != FALSE) && (CARD_B_EXISTS != FALSE)) {
    RADIO(SNLOG)
    {
      ADD(0,"0: Logic is enabled");
      ADD(1,"1: Logic is skipped");
    }
    RADIO(ISYM)
    {
      ADD(0,"0: Off");
      ADD(1,"1: Do not include faces");
    }
    RADIO(I2D3D)
    {
      ADD(0,"0: Search 2D elements");
      ADD(1,"1: Search 3D elements");
    }

    SCALAR(SLDTHK)    { DIMENSION="l";}
    SCALAR(SLDSTF)    { DIMENSION="translation_stiffness";}
}
  if((CARD_A_EXISTS != FALSE) && (CARD_B_EXISTS != FALSE)) {
    SEPARATOR();
    FLAG(CARD_C_EXISTS);
  }

  if((CARD_A_EXISTS != FALSE) && (CARD_B_EXISTS != FALSE) && (CARD_C_EXISTS != FALSE)) {

    SEPARATOR("Optional card C");
    RADIO(IGAP)
    {
      DO_PREFIX_VALUE = FALSE;
      ADD(0, "LT.0: Set IGAP=1 and set the distance for turning on the stiffness to (IGAP/10) times the original distance");
      ADD(1, "1: Apply method to improve convergence");
      ADD(2, "2: Do not apply method");
      ADD(3, "GT.2: Set IGAP=1 for first IGAP-2 cycles, then set IGAP=2");
    }
 }
 if((CARD_A_EXISTS != FALSE) && (CARD_B_EXISTS != FALSE) && (CARD_C_EXISTS != FALSE) && (IGAP == 0)) {
    SCALAR(IGAP_0);
 }
 else if((CARD_A_EXISTS != FALSE) && (CARD_B_EXISTS != FALSE) && (CARD_C_EXISTS != FALSE) && (IGAP == 3)) {
    SCALAR(IGAP_2);
 }
    if ((CARD_A_EXISTS != FALSE) && (CARD_B_EXISTS != FALSE) && (CARD_C_EXISTS != FALSE)) {
    RADIO(IGNORE_C)
    {
      ADD(0,"0: Default value from CONTROL_CONTACT input");
      ADD(1,"1: Allow initial penetrations");
      ADD(2,"2: Allow and print  initial penetrations");
    }
  }
  if((CARD_A_EXISTS != FALSE) && (CARD_B_EXISTS != FALSE) && (CARD_C_EXISTS != FALSE) && (SOFT==2)) {
    FLAG(DPRFAC_IS_FUNC);
  }
  if((DPRFAC_IS_FUNC != FALSE) && (CARD_A_EXISTS != FALSE) && (CARD_B_EXISTS != FALSE) && (CARD_C_EXISTS != FALSE) && (SOFT==2))
  {
    FUNCTION(DPRFAC_FUNC) {X_TITLE="Time";Y_TITLE="DPRFAC";}
  }
  else if((CARD_A_EXISTS != FALSE) && (CARD_B_EXISTS != FALSE) && (CARD_C_EXISTS != FALSE) && (SOFT==2))
  {
    SCALAR(DPRFAC)  {DIMENSION="DIMENSIONLESS";}
  }
  if((CARD_A_EXISTS != FALSE) && (CARD_B_EXISTS != FALSE) && (CARD_C_EXISTS != FALSE) && ((SOFT==1) || (SOFT==2))) {
    FLAG(DTSTIF_IS_FUNC);
  }
  if((DTSTIF_IS_FUNC != FALSE) && (CARD_A_EXISTS != FALSE) && (CARD_B_EXISTS != FALSE) && (CARD_C_EXISTS != FALSE) && ((SOFT==1) || (SOFT==2)))
  {
    FUNCTION(DTSTIF_FUNC) {X_TITLE="Time";Y_TITLE="DTSTIF";}
  }
  else if((CARD_A_EXISTS != FALSE) && (CARD_B_EXISTS != FALSE) && (CARD_C_EXISTS != FALSE) && ((SOFT==1) || (SOFT==2)))
  {
    SCALAR(DTSTIF)  {DIMENSION="DIMENSIONLESS";}
  }
  if((CARD_A_EXISTS != FALSE) && (CARD_B_EXISTS != FALSE) && (CARD_C_EXISTS != FALSE)) {
    SCALAR(FLANGL){DIMENSION="DIMENSIONLESS";}
    TOOL(CID_RCF) ;
  }
  if((CARD_A_EXISTS != FALSE) && (CARD_B_EXISTS != FALSE) && (CARD_C_EXISTS != FALSE)) 
  {
    SEPARATOR();
    FLAG(CARD_D_EXISTS);
  }
  if((CARD_A_EXISTS != FALSE) && (CARD_B_EXISTS != FALSE) && (CARD_C_EXISTS != FALSE) && (CARD_D_EXISTS != FALSE)) 
  {
    SEPARATOR("Optional card D");
  }
  if((CARD_A_EXISTS != FALSE) && (CARD_B_EXISTS != FALSE) && (CARD_C_EXISTS != FALSE) && (CARD_D_EXISTS != FALSE) && (SOFT == 2)) 
  {
     RADIO(Q2TRI)
     {
       ADD(0,"Off") ;
       ADD(1,"On for all secondary shell segments") ;
       ADD(2,"On for all main shell segments") ;
       ADD(3,"On for all shell segments") ;
       ADD(4,"On for all shell segments of material type 34") ;
     }
  }
  if((CARD_A_EXISTS != FALSE) && (CARD_B_EXISTS != FALSE) && (CARD_C_EXISTS != FALSE) && (CARD_D_EXISTS != FALSE)) 
  {
     SCALAR(DTPCHK) ;
     SCALAR(SFNBR) ;
     SCALAR(FNLSCL);
     SCALAR(DNLSCL) {DIMENSION="l";}
     RADIO(TCSO)
     {
         ADD(0,"Off (default)");
         ADD(1,"Only consider segments in the contact definition");
     }
     RADIO(TIEDID)
     {
       ADD(0,"Off") ;
       ADD(1,"On") ;
     }
     RADIO(SHLEDG)
     {
        ADD(0,"default to SHLEDG on *CONTROL_CONTACT");
        ADD(1,"Shell edges are assumed square and are flush with the nodes");
        ADD(2,"Shell edges are assumed round with radius equal to 1/2 shell thickness");
     }
   }
  if((CARD_A_EXISTS != FALSE) && (CARD_B_EXISTS != FALSE) && (CARD_C_EXISTS != FALSE) && (CARD_D_EXISTS!=FALSE)) 
  {
    SEPARATOR();
    FLAG(CARD_E_EXISTS);
  }
  if((CARD_A_EXISTS != FALSE) && (CARD_B_EXISTS != FALSE) && (CARD_C_EXISTS != FALSE) && (CARD_D_EXISTS != FALSE) && (CARD_E_EXISTS != FALSE)) 
  {
    SEPARATOR("Optional card E");
     RADIO(SHAREC)
     {
       ADD(0,"Segments that share constraints not checked for contact") ;
       ADD(1,"Segments that share constraints are checked for contact") ;
     }
     
     RADIO(CPARM8_E)
     {
        ADD(0, "Spot weld beams are not considered");
        ADD(1, "Permit contact treatment of spot weld (type 9) beams in AUTOMATIC_GENERAL contacts; spot weld beams are otherwise disregarded entirely by AUTOMATIC_GENERAL contacts");
     }
     
     //SCALAR(IPBACK);
     
     RADIO(SRNDE)
     {
       ADD(0, "Free edges have their usual treatement");
       ADD(1, "Free edges are rounded, but without extending them");
     }
  }
}

//File format

FORMAT(Keyword971_R7.1)
{
  //CARD id and title
  if(CARD_MPP_EXISTS!=FALSE)
  {
    COMMENT("$   IGNORE    BUCKET  LCBUCKET  NS2TRACK  INITITER    PARMAX              CPARM8");
    CARD("%10d%10d%10d%10d%10d%10lg          %10d",IGNORE,BUCKET,LCBUCKET,NS2TRACK,INITITER,PARMAX,CPARM8);
  }
  //
  // 2nd MPP card (optional)
  if((CARD_MPP_EXISTS!=FALSE) && (NB_MPP_CARD2 > 0))
  {
    COMMENT("$            CHKSEGS     PENSF   GRPABLE");
  }
  if(CARD_MPP_EXISTS!=FALSE)
  {
    SUBOBJECTS(MPP_CARD2,/SUBOBJECT/CONTACT_MPP_CARD2);
  }
  //
  COMMENT("$     SSID               SSTYP                SBOX                 SPR     IFLAG");
  CARD("%10d          %10d          %10d          %10d%10d",slaveentityids,SSTYP,SLAVE_DEFINE_BOX_RESTRICTING,SPR,IFLAG);
  //
  COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
  CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",FS, FD,DC,VC,VDC,PENCHK,BT,DT);
  //
  COMMENT("$      SFS                 SST                SFST                 FSF       VSF");
  CARD("%10lg          %10lg          %10lg          %10lg%10lg",SFS,SST,SFST,FSF,VSF);
  //
  if (CARD_A_EXISTS !=FALSE)
  {
    COMMENT("$     SOFT    SOFSCL    LCIDAB    MAXPAR     SBOPT     DEPTH     BSORT    FRCFRQ");
  }
  FREE_CARD(CARD_A_EXISTS,"%10d%10lg%10d%10lg%10lg%10d%10d%10d",SOFT,SOFSCL,LCIDAB,MAXPAR,SBOPT,SCALAR_OR_FUNCTION(DEPTH_IS_FUNC,DEPTH,DEPTH_FUNC),SCALAR_OR_FUNCTION(BSORT_IS_FUNC,BSORT,BSORT_FUNC),FRCFRQ);
  if (CARD_B_EXISTS != FALSE)
  {
    COMMENT("$   PENMAX    THKOPT    SHLTHK     SNLOG      ISYM     I2D3D    SLDTHK    SLDSTF");
  }
  FREE_CARD(CARD_B_EXISTS,"%10lg%10d%10d%10d%10d%10d%10lg%10lg",PENMAX,THKOPT,SHLTHK,SNLOG,ISYM,I2D3D,SLDTHK,SLDSTF);
  //
  if (CARD_C_EXISTS !=FALSE)
  {
    COMMENT("$     IGAP    IGNORE    DPRFAC    DTSTIF                        FLANGL   CID_RCF");
  }
  if(CARD_C_EXISTS == TRUE && (IGAP_0 < 0))
  {
    ASSIGN(IGAP, IGAP_0, EXPORT);
  }
  else if(CARD_C_EXISTS == TRUE && (IGAP_2 > 2))
  {
    ASSIGN(IGAP, IGAP_2, EXPORT);
  } 
  
  FREE_CARD(CARD_C_EXISTS,  "%10d%10d%10lg%10lg                    %10lg%10d",IGAP,IGNORE_C,SCALAR_OR_FUNCTION(DPRFAC_IS_FUNC,DPRFAC,DPRFAC_FUNC),SCALAR_OR_FUNCTION(DTSTIF_IS_FUNC,DTSTIF,DTSTIF_FUNC),FLANGL,CID_RCF);
  
  if(CARD_C_EXISTS == TRUE && IGAP < 0)
  {
    ASSIGN(IGAP_0, IGAP, IMPORT);
    ASSIGN(IGAP, 0, IMPORT);
    ASSIGN(IGAP, 0, EXPORT);    
  }
  else if (CARD_C_EXISTS == TRUE && IGAP > 2)
  {
    ASSIGN(IGAP_2, IGAP, IMPORT);  
    ASSIGN(IGAP, 3, IMPORT);
    ASSIGN(IGAP, 3, EXPORT);    
  }
  //
  if (CARD_D_EXISTS !=FALSE)
  {
    COMMENT("$    Q2TRI    DTPCHK     SFNBR    FNLSCL    DNLSCL      TCSO    TIEDID    SHLEDG");
  }
  FREE_CARD(CARD_D_EXISTS,"%10d%10lg%10lg%10lg%10lg%10d%10d%10d",Q2TRI,DTPCHK,SFNBR,FNLSCL,DNLSCL,TCSO,TIEDID,SHLEDG);
  if (CARD_E_EXISTS !=FALSE)
  {
    COMMENT("$   SHAREC    CPARM8               SRNDE");
  }
  FREE_CARD(CARD_E_EXISTS,"%10d%10d          %10d",SHAREC,CPARM8_E,SRNDE);
}


FORMAT(Keyword971_R6.1)
{
  //CARD id and title
  if(CARD_MPP_EXISTS!=FALSE)
  {
    COMMENT("$   IGNORE    BUCKET  LCBUCKET  NS2TRACK  INITITER    PARMAX              CPARM8");
    CARD("%10d%10d%10d%10d%10d%10lg          %10d",IGNORE,BUCKET,LCBUCKET,NS2TRACK,INITITER,PARMAX,CPARM8);
  }
  //
  // 2nd MPP card (optional)
  if((CARD_MPP_EXISTS!=FALSE) && (NB_MPP_CARD2 > 0))
  {
    COMMENT("$            CHKSEGS     PENSF   GRPABLE");
  }
  if(CARD_MPP_EXISTS!=FALSE)
  {
    SUBOBJECTS(MPP_CARD2,/SUBOBJECT/CONTACT_MPP_CARD2);
  }
  //
  COMMENT("$     SSID               SSTYP                SBOX                 SPR");
  CARD("%10d          %10d          %10d          %10d",slaveentityids,SSTYP,SLAVE_DEFINE_BOX_RESTRICTING,SPR);
  //
  COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
  CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",FS, FD,DC,VC,VDC,PENCHK,BT,DT);
  //
  COMMENT("$      SFS                 SST                SFST                 FSF       VSF");
  CARD("%10lg          %10lg          %10lg          %10lg%10lg",SFS,SST,SFST,FSF,VSF);
  //
  if (CARD_A_EXISTS !=FALSE)
  {
    COMMENT("$     SOFT    SOFSCL    LCIDAB    MAXPAR     SBOPT     DEPTH     BSORT    FRCFRQ");
  }
  FREE_CARD(CARD_A_EXISTS,"%10d%10lg%10d%10lg%10lg%10d%10d%10d",SOFT,SOFSCL,LCIDAB,MAXPAR,SBOPT,SCALAR_OR_FUNCTION(DEPTH_IS_FUNC,DEPTH,DEPTH_FUNC),SCALAR_OR_FUNCTION(BSORT_IS_FUNC,BSORT,BSORT_FUNC),FRCFRQ);
  if (CARD_B_EXISTS != FALSE)
  {
    COMMENT("$   PENMAX    THKOPT    SHLTHK     SNLOG      ISYM     I2D3D    SLDTHK    SLDSTF");
  }
  FREE_CARD(CARD_B_EXISTS,"%10lg%10d%10d%10d%10d%10d%10lg%10lg",PENMAX,THKOPT,SHLTHK,SNLOG,ISYM,I2D3D,SLDTHK,SLDSTF);
  //
  if (CARD_C_EXISTS !=FALSE)
  {
    COMMENT("$     IGAP    IGNORE    DPRFAC    DTSTIF                        FLANGL   CID_RCF");
  }
  if(CARD_C_EXISTS == TRUE && (IGAP_0 < 0))
  {
    ASSIGN(IGAP, IGAP_0, EXPORT);
  }
  else if(CARD_C_EXISTS == TRUE && (IGAP_2 > 2))
  {
    ASSIGN(IGAP, IGAP_2, EXPORT);
  } 
  
  FREE_CARD(CARD_C_EXISTS,  "%10d%10d%10lg%10lg                    %10lg%10d",IGAP,IGNORE_C,SCALAR_OR_FUNCTION(DPRFAC_IS_FUNC,DPRFAC,DPRFAC_FUNC),SCALAR_OR_FUNCTION(DTSTIF_IS_FUNC,DTSTIF,DTSTIF_FUNC),FLANGL,CID_RCF);
  
  if(CARD_C_EXISTS == TRUE && IGAP < 0)
  {
    ASSIGN(IGAP_0, IGAP, IMPORT);
    ASSIGN(IGAP, 0, IMPORT);
    ASSIGN(IGAP, 0, EXPORT);    
  }
  else if (CARD_C_EXISTS == TRUE && IGAP > 2)
  {
    ASSIGN(IGAP_2, IGAP, IMPORT);  
    ASSIGN(IGAP, 3, IMPORT);
    ASSIGN(IGAP, 3, EXPORT);    
  }
  //
  if (CARD_D_EXISTS !=FALSE)
  {
    COMMENT("$    Q2TRI    DTPCHK     SFNBR    FNLSCL    DNLSCL      TCSO    TIEDID    SHLEDG");
  }
  FREE_CARD(CARD_D_EXISTS,"%10d%10lg%10lg%10lg%10lg%10d%10d%10d",Q2TRI,DTPCHK,SFNBR,FNLSCL,DNLSCL,TCSO,TIEDID,SHLEDG);
  if (CARD_E_EXISTS !=FALSE)
  {
    COMMENT("$   SHAREC");
  }
  FREE_CARD(CARD_E_EXISTS,"%10d",SHAREC);
}