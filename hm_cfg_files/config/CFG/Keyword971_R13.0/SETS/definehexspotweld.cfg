//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// *DEFINE_HEX_SPOTWELD_ASSEMBLY
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    idOptValue                              = VALUE(INT,  "NumID");
    _opt                                    = VALUE(STRING,  "_opt");
    itemp                                   = VALUE(INT,  "NumID");
    idsmax                                  = SIZE("Number of hexahedral solid elements");
    ids                                     = ARRAY[idsmax](ELEMS, "Solid elements");
    IO_FLAG                                 = VALUE(INT, "IO Flag");
    KEY                                     = VALUE(STRING, "Solver Keyword");
    LSD_TitleOpt                            = VALUE(INT, "Title");
    TITLE                                   = VALUE(STRING, "TITLE");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    idOptValue                              = 4438;
    LSD_TitleOpt                            = 90;
    _opt                                    = -1;
    idsmax                                  = -1;
    ids                                     = -1;
    IO_FLAG                                 = -1;
    KEY                                     = -1;
    TITLE                                   = -1;
}
DEFAULTS(COMMON)
{
    _opt         = "";
    LSD_TitleOpt = 0;
    itemp        = 0;
    IO_FLAG      = 1;
}
CHECK(COMMON)
{
    idsmax    >0;
    idsmax    <17;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*DEFINE_HEX_SPOTWELD_ASSEMBLY");
optional:   
     FLAG(LSD_TitleOpt);
mandatory:
     SIZE(idsmax);
     ARRAY(idsmax,"")
     {
        DATA(ids){ SUBTYPES = (/ELEMS/ELEMENT_SOLID_IDPOOL);}
     }
     
}

// !! Please refer manual and correct, if any, missing or wrongly generated format !!

// File format
FORMAT(Keyword971_R13.0) 
{
  ASSIGN(IO_FLAG, 1, IMPORT);
  ASSIGN(IO_FLAG, 0, EXPORT);

  if(IO_FLAG==1)
  {
     HEADER("*DEFINE_HEX_SPOTWELD_ASSEMBLY%s", APPEND_OPTIONS( [idsmax({2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,1}), 
                                              {"_2","_3","_4","_5","_6","_7","_8","_9","_10","_11","_12","_13","_14","_15","_16","_1"}],
                                               [ LSD_TitleOpt(1),  "_TITLE" ] ));
  }
  else
  {
        if(idsmax > 8) 
        {
            HEADER("*DEFINE_HEX_SPOTWELD_ASSEMBLY_%d%s",idsmax,APPEND_OPTIONS( [ LSD_TitleOpt(1),  "_TITLE" ] ));
        }
        else
        {
            HEADER("*DEFINE_HEX_SPOTWELD_ASSEMBLY%s",APPEND_OPTIONS( [ LSD_TitleOpt(1),  "_TITLE" ] ));
        }
  }
  if(LSD_TitleOpt == 1)
  {
      CARD("%-80s", TITLE);
  }

  //
  COMMENT("$    ID_SW");
  CARD("%10d",_ID_);
  //

  if(idsmax > 0) {
    COMMENT("$     EID1      EID2      EID3      EID4      EID5      EID6      EID7      EID8");
    CELL_LIST(idsmax,"%10d",ids,80);
  }
  else if(IO_FLAG==1) //Import
  {
    FREE_CELL_LIST(idsmax,"%10d",ids,80);
  }

}
