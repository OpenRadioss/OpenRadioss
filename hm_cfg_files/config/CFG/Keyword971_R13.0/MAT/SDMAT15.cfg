//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law SDMAT15
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    TLoption                                = VALUE(INT,  "TLoption");
    TVoption                                = VALUE(INT,  "TVoption");
    SVoption                                = VALUE(INT,  "SVoption");
    Aoption                                 = VALUE(INT,  "Aoption");
    FPEoption                               = VALUE(INT,  "FPEoption");
    LSD_TLID                                = VALUE(CURVE,  "Active tension as a function of length function");
    LSD_TVID                                = VALUE(CURVE,  "Active tension as a function of velocity function,");
    LSD_MAT_L0                              = VALUE(FLOAT,  "Initial muscle length");
    LSD_MAT_VMAX                            = VALUE(FLOAT,  "Maximum CE shortening velocity");
    LSD_SVID                                = VALUE(CURVE,  "Scale factor for VMAX, as a function of active state");
    LSD_AID                                 = VALUE(CURVE,  "Activation level as a function of time function");
    LSD_FPEID                               = VALUE(CURVE,  "Normalized force, as a function of length for parallel elastic element");
    LSD_MAT_FMAX                            = VALUE(FLOAT,  "Peak isometric force");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    LSD_MAT_LMAX                            = VALUE(FLOAT,  "Relative length");
    LSD_MAT_KSH                             = VALUE(FLOAT,  "Constant");

    SV                                      = VALUE(FLOAT,  "Scale factor for VMAX");
    A                                       = VALUE(FLOAT,  "Activation level");
    TL                                      = VALUE(FLOAT,  "TL option");
    TV                                      = VALUE(FLOAT,  "TV option");
    FPE                                     = VALUE(FLOAT,  "FPE option");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    LSD_TitleOpt                            = 90;
    Num_Comments                            = 3101;

    LSD_TLID                               = -1;
    LSD_TVID                               = -1;
    LSD_SVID                               = -1;
    LSD_AID                                = -1;
    LSD_FPEID                              = -1;

    LSD_MAT_FMAX                           = -1;
    LSD_MAT_L0                             = -1;
    LSD_MAT_VMAX                           = -1;

    TLoption                               = -1;
    TVoption                               = -1;
    Aoption                                = -1;
    SVoption                               = -1;
    FPEoption                              = -1;

    SV                                     = -1;
    A                                      = -1;
    TL                                     = -1;
    TV                                     = -1;
    FPE                                    = -1;
}

DEFAULTS(COMMON)
{

     LSD_MAT_L0    = 1.0;

}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_SPRING_MUSCLE");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 

 mandatory:

        FLAG(Aoption);
        if(Aoption == FALSE)
        {
            SCALAR(A)                        { DIMENSION = "DIMENSIONLESS" ; }
        }
        else
        {
            DATA(LSD_AID);
        }

        FLAG(SVoption);
        if(SVoption == FALSE)
        {
            SCALAR(SV)                       { DIMENSION = "DIMENSIONLESS" ; }
        }
        else
        {
            DATA(LSD_SVID);
        }

        FLAG(TLoption);
        if(TLoption == FALSE)
        {
            SCALAR(TL)                       { DIMENSION = "DIMENSIONLESS" ; }
        }
        else
        {
            DATA(LSD_TLID);
        }

        FLAG(TVoption);
        if(TVoption == FALSE)
        {
            SCALAR(TV)                       { DIMENSION = "DIMENSIONLESS" ; }
        }
        else
        {
            DATA(LSD_TVID);
        }

        FLAG(FPEoption);
        if(FPEoption == FALSE)
        {
            SCALAR(FPE)                       { DIMENSION = "DIMENSIONLESS" ; }
        }
        else
        {
            DATA(LSD_FPEID);
        }

 optional:
     SCALAR(LSD_MAT_L0)             {DIMENSION="l";}
     SCALAR(LSD_MAT_VMAX)           {DIMENSION="velocity";}
     SCALAR(LSD_MAT_FMAX)           {DIMENSION="force";}
     SCALAR(LSD_MAT_LMAX)           {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_KSH)            {DIMENSION="DIMENSIONLESS";}
}

// File format
FORMAT(Keyword971_R13.0) 
{
    //

    COMMENT("$      MID        L0      VMAX        SV         A      FMAX        TL        TV");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,LSD_MAT_L0,LSD_MAT_VMAX,SCALAR_OR_OBJECT(SVoption, SV, LSD_SVID),SCALAR_OR_OBJECT(Aoption,A, LSD_AID),LSD_MAT_FMAX,SCALAR_OR_OBJECT(TLoption, TL, LSD_TLID),SCALAR_OR_OBJECT(TVoption, TV, LSD_TVID));


    COMMENT("$      FPE      LMAX       KSH");
    CARD("%10lg%10lg%10lg",SCALAR_OR_OBJECT(FPEoption, FPE, LSD_FPEID),LSD_MAT_LMAX,LSD_MAT_KSH);


    //
}
