//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- mat_add_edamage_diem.cfg ---
//
// *MAT_ADD_DAMAGE_DIEM
//

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES

    //Card 1
    MID                 = VALUE(MAT,               "Material identification for which this erosion definition applies");
    NDIEMC              = SIZE(                    "DAMAGE_DIEM"); // "Number of damage initiation and evolution model (DIEM) criteria to be applied"
    DINIT               = VALUE(FLOAT,             "Damage initialization option");
    DEPS                = VALUE(FLOAT,             "Plastic strain increment between evaluation of damage instability and evolution criteria");
    NUMFIP              = VALUE(FLOAT,             "Number or percentage of failed integration points prior to element deletion (default value is 1)");

    //Card 2: If NDIEMC GT 0
    DITYP               = ARRAY[NDIEMC](FLOAT,     "Damage initiation type");
    P1                  = ARRAY[NDIEMC](CURVE,     "Damage initiation parameter", "P1");
    P2                  = ARRAY[NDIEMC](FLOAT,     "Damage initiation parameter");
    P3                  = ARRAY[NDIEMC](FLOAT,     "Damage initiation parameter");
    P4                  = ARRAY[NDIEMC](FLOAT,     "Plane stress option for shell elements");
    P5                  = ARRAY[NDIEMC](CURVE,     "Load curve or table ID representing regularization factor as a function of the characteristic element size (curve) or regularization factor as a function of the characteristic element size and abscissa value of the criterion used (table).");

    //Card 3: If NDIEMC GT 0
    DETYP               = ARRAY[NDIEMC](FLOAT,     "Damage evolution type");
    DCTYP               = ARRAY[NDIEMC](FLOAT,     "Damage composition option for multiple criteria");
    flagforQ1           = ARRAY[NDIEMC](INT,       "flagforQ1", "flagforQ1");
    Q1                  = ARRAY[NDIEMC](FLOAT,     "Damage evolution parameter");
    Q1_CURVE            = ARRAY[NDIEMC](CURVE,     "Damage evolution parameter");
    Q1_DAMAGE           = ARRAY[NDIEMC](FLOAT,     "Damage evolution parameter", "Q1");
    Q2                  = ARRAY[NDIEMC](FLOAT,     "Set to 1.0 to output information to log files (messag and d3hsp) when an integration point fails");
    Q3                  = ARRAY[NDIEMC](FLOAT,     "Damage evolution parameter");
    //HM INTERNAL
    Type                                    = VALUE(INT,       "Type Option");
    Title                                   = VALUE(BOOL,      "Title Flag");
    TITLE                                   = VALUE(STRING,    "Title");
    solverkeyword                           = VALUE(STRING,    "Solver Keyword");
    IOFLAG                                  = VALUE(INT,       "I/O Flag");
    _opt                                    = VALUE(STRING,    "Opt");
}

       

DEFAULTS(COMMON)
{
    //Card 1
    NDIEMC              = 0;
    DINIT               = 0.0;
    DEPS                = 0.0;
    NUMFIP              = 1.0;

    //Card 2
    DITYP               = 0.0;
    P2                  = 0.0;
    P3                  = 0.0;
    P4                  = 0.0;

    //Card 3
    DETYP               = 0.0;
    DCTYP               = 0.0;
    Q1                  = 0.0;
    Q2                  = 0.0;
    Q3                  = 0.0;
}

CHECK(COMMON)
{
}

GUI(COMMON)
{
    // Card 1
    DATA(MID);
    RADIO(DINIT)
    {
        ADD(0.0, "0: No action is taken");
        ADD(1.0, "1: Damage history is initiated based on values of initial plastic strains and initial strain tensor. This is to be used in multistage analyses");
    }
    SCALAR(DEPS)                                 { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(NUMFIP)                               { DIMENSION = "DIMENSIONLESS" ; }

    SIZE(NDIEMC);
    ARRAY(NDIEMC, "")
    {
        // Card 2
        RADIO(DITYP)
        {
            ADD(0.0, "0.0: Ductile based on stress triaxiality");
            ADD(1.0, "1.0: Shear");
            ADD(2.0, "2.0: MSFLD");
            ADD(3.0, "3.0: FLD");
            ADD(4.0, "4.0: Ductile based on normalized principal stress");
        }
        DATA(P1);
        if(DITYP == 1.0 || DITYP == 4.0)
        {
            SCALAR(P2)                           { DIMENSION = "DIMENSIONLESS" ; }
        }
        if(DITYP == 2.0 || DITYP == 3.0)
        {
            RADIO(P2, "P2")
            {
                ADD(0, "0: Mid layer");
                ADD(1, "1: Outer layer");
            }
            RADIO(P3)
            {
                ADD(0, "0: Direct");
                ADD(1, "1: Incremental");
            }
        }
        RADIO(P4)
        {
            ADD(0.0, "Transverse shear stresses, sigma_yz and sigma_zx, are included in the computation of stress invariants, such as the triaxiality");
            ADD(1.0, "Transverse shear stresses, sigma_yz and sigma_zx, are not included in the computation of stress invariants, such as the triaxiality");
        }
        DATA(P5);

        // Card 3
        RADIO(DETYP)
        {
            ADD(0.0, "0.0: Linear softening, evolution of damage is a function of the plastic displacement after the initiation of damage");
            ADD(1.0, "1.0: Linear softening, evolution of damage is a function of the fracture energy after the initiation of damage");
        }
        RADIO(DCTYP)
        {
            ADD(-1.0, "-1.0: Damage not coupled to stress");
            ADD(0.0, "0.0: Maximum");
            ADD(1.0, "1.0: Multiplicative");
        }
        if(DETYP == 0.0)
        {
            RADIO(flagforQ1)
            {
                ADD(0, "0: Real");
                ADD(1, "1: Curve");
            }
        }
        if(DETYP == 0.0 && flagforQ1 != 1)
        {
            SCALAR(Q1)                           { DIMENSION = "DIMENSIONLESS" ; }
        }
        else if(DETYP == 0.0 && flagforQ1 == 1)
        {
            DATA(Q1_CURVE);
        }
        if(DETYP == 1.0)
        {
            SCALAR(Q1_DAMAGE)                    { DIMENSION = "DIMENSIONLESS" ; }
        }
        SCALAR(Q2)                               { DIMENSION = "DIMENSIONLESS" ; }
        if(DETYP == 0.0)
        {        
            SCALAR(Q3)                           { DIMENSION = "DIMENSIONLESS" ; }
        }
    }
}

// File format
FORMAT(Keyword971_R11.2)
{

    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(Title == 0)
        {
            HEADER("*MAT_ADD_DAMAGE_DIEM_DAMAGE_DIEM");
        }
        else
        {
            HEADER("*MAT_ADD_DAMAGE_DIEM_TITLE");
        }
    }
    else //IMPORT
    {
        HEADER("*MAT_ADD_DAMAGE_DIEM%-s", _opt);

        if(_opt == "")
        {
            ASSIGN(Title, 0, IMPORT);
        }
        else
        {
            ASSIGN(Title, 1, IMPORT);
        }
    }

    if(IOFLAG == 0 && Title == 1)
    {
        COMMENT("$NAME");
        CARD("%-80s", TITLE);
    }
    // Card 1
    COMMENT("$      MID    NDIEMC     DINIT      DEPS    NUMFIP");
    CARD("%10d%10d%10lg%10lg%10lg", MID, NDIEMC, DINIT, DEPS, NUMFIP);

    CARD_LIST(NDIEMC)
    {
        // Card 2
        CARD_PREREAD("%10lg", DITYP);

        if(DITYP == 0.0)
        {
            COMMENT("$    DITYP        P1");
            CARD("%10lg%10d", DITYP, P1);
        }
        else if(DITYP == 1.0 || DITYP == 4.0)
        {
            COMMENT("$    DITYP        P1        P2");
            CARD("%10lg%10d%10lg", DITYP, P1, P2);
        }
        else if(DITYP == 2.0 || DITYP == 3.0)
        {
            COMMENT("$    DITYP        P1        P2        P3");
            CARD("%10lg%10d%10lg%10lg", DITYP, P1, P2, P3);
        }

        // Card 3
        CARD_PREREAD("%10lg", DETYP);

        COMMENT("$    DETYP     DCTYP        Q1        Q2");
        if(DETYP == 0.0)
        {
            CARD("%10lg%10lg%10lg%10lg", DETYP, DCTYP, SCALAR_OR_OBJECT(flagforQ1, Q1, Q1_CURVE), Q2);
        }
        else if(DETYP == 1.0)
        {
            CARD("%10lg%10lg%10lg%10lg", DETYP, DCTYP, Q1_DAMAGE, Q2);
        }
    }
}

FORMAT(Keyword971_R12.0)
{

    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(Title == 0)
        {
            HEADER("*MAT_ADD_DAMAGE_DIEM_DAMAGE_DIEM");
        }
        else
        {
            HEADER("*MAT_ADD_DAMAGE_DIEM_TITLE");
        }
    }
    else //IMPORT
    {
        HEADER("*MAT_ADD_DAMAGE_DIEM%-s", _opt);

        if(_opt == "")
        {
            ASSIGN(Title, 0, IMPORT);
        }
        else
        {
            ASSIGN(Title, 1, IMPORT);
        }
    }

    if(IOFLAG == 0 && Title == 1)
    {
        COMMENT("$NAME");
        CARD("%-80s", TITLE);
    }
    // Card 1
    COMMENT("$      MID    NDIEMC     DINIT      DEPS    NUMFIP");
    CARD("%10d%10d%10lg%10lg%10lg", MID, NDIEMC, DINIT, DEPS, NUMFIP);

    CARD_LIST(NDIEMC)
    {
        // Card 2
        CARD_PREREAD("%10lg", DITYP);

        if(DITYP == 0.0)
        {
            COMMENT("$    DITYP        P1                            P4");
            CARD("%10lg%10d%10s%10s%10lg", DITYP, P1, _BLANK_,  _BLANK_, P4);
        }
        else if(DITYP == 1.0 || DITYP == 4.0)
        {
            COMMENT("$    DITYP        P1        P2                  P4");
            CARD("%10lg%10d%10lg%10s%10lg", DITYP, P1, P2, _BLANK_, P4);
        }
        else if(DITYP == 2.0 || DITYP == 3.0)
        {
            COMMENT("$    DITYP        P1        P2        P3        P4");
            CARD("%10lg%10d%10lg%10lg%10lg", DITYP, P1, P2, P3, P4);
        }

        // Card 3
        CARD_PREREAD("%10lg", DETYP);

        COMMENT("$    DETYP     DCTYP        Q1        Q2");
        if(DETYP == 0.0)
        {
            CARD("%10lg%10lg%10lg%10lg", DETYP, DCTYP, SCALAR_OR_OBJECT(flagforQ1, Q1, Q1_CURVE), Q2);
        }
        else if(DETYP == 1.0)
        {
            CARD("%10lg%10lg%10lg%10lg", DETYP, DCTYP, Q1_DAMAGE, Q2);
        }
    }
}

FORMAT(Keyword971_R13.0)
{

    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(Title == 0)
        {
            HEADER("*MAT_ADD_DAMAGE_DIEM_DAMAGE_DIEM");
        }
        else
        {
            HEADER("*MAT_ADD_DAMAGE_DIEM_TITLE");
        }
    }
    else //IMPORT
    {
        HEADER("*MAT_ADD_DAMAGE_DIEM%-s", _opt);

        if(_opt == "")
        {
            ASSIGN(Title, 0, IMPORT);
        }
        else
        {
            ASSIGN(Title, 1, IMPORT);
        }
    }

    if(IOFLAG == 0 && Title == 1)
    {
        COMMENT("$NAME");
        CARD("%-80s", TITLE);
    }
    // Card 1
    COMMENT("$      MID    NDIEMC     DINIT      DEPS    NUMFIP");
    CARD("%10d%10d%10lg%10lg%10lg", MID, NDIEMC, DINIT, DEPS, NUMFIP);

    CARD_LIST(NDIEMC)
    {
        // Card 2
        CARD_PREREAD("%10lg", DITYP);

        if(DITYP == 0.0)
        {
            COMMENT("$    DITYP        P1                            P4        P5");
            CARD("%10lg%10d%10s%10s%10lg%10d", DITYP, P1, _BLANK_,  _BLANK_, P4, P5);
        }
        else if(DITYP == 1.0 || DITYP == 4.0)
        {
            COMMENT("$    DITYP        P1        P2                  P4        P5");
            CARD("%10lg%10d%10lg%10s%10lg%10d", DITYP, P1, P2, _BLANK_, P4, P5);
        }
        else if(DITYP == 2.0 || DITYP == 3.0)
        {
            COMMENT("$    DITYP        P1        P2        P3        P4        P5");
            CARD("%10lg%10d%10lg%10lg%10lg%10d", DITYP, P1, P2, P3, P4, P5);
        }

        // Card 3
        CARD_PREREAD("%10lg", DETYP);

        if(DETYP == 0.0)
        {
            COMMENT("$    DETYP     DCTYP        Q1        Q2        Q3");
            CARD("%10lg%10lg%10lg%10lg%10lg", DETYP, DCTYP, SCALAR_OR_OBJECT(flagforQ1, Q1, Q1_CURVE), Q2, Q3);
        }
        else if(DETYP == 1.0)
        {
            COMMENT("$    DETYP     DCTYP        Q1        Q2");
            CARD("%10lg%10lg%10lg%10lg", DETYP, DCTYP, Q1_DAMAGE, Q2);
        }
    }
}
