//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// *MAT_ADD_DAMAGE_GISSMO
//

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES

    //Card 1
    MID                 = VALUE(MAT,       "Material identification for which this erosion definition applies");
    DTYP                = VALUE(INT,       "DTYP is interpreted digit-wise as follows: DTYP= [N M] = M + 10 x N]"); // DTYP is used in *MAT_ADD_GENERALIZED_DAMAGE also (defined INT)
    REFSZ               = VALUE(FLOAT,     "Reference element size, for which an additional output of damage (and potentially plastic strain) will be generated. GT. 0: Reference size related damage values are written to history variables ND + 9 and ND + 10. LT. 0: The reference element size is |REFSZ|");
    NUMFIP              = VALUE(FLOAT,     "Number of failed integration points prior to element deletion. GT.0.0: Number of integration points which must fail before element is deleted. LT.0.0: Applies only to shells. |NUMFIP| is the percentage of layers which must fail before an element is deleted");

    //Card 2
    LCSDG               = VALUE(CURVE,     "Failure strain curve/table or function. Load curve ID or table ID. As a load curve, it defines equivalent plastic strain to failure as a function of triaxiality. As a table, it defines for each Lode parameter value (between -1 and 1) a load curve ID giving the equivalent plastic strain to failure as a function of triaxiality for that Lode parameter value");
    LCSDG_FUNCT         = VALUE(FUNCT,     "Failure strain curve/table or function. |LCSDG| is the ID of a function (*DEFINE_FUNCTION) with the arguments triaxiality and Lode parameter: f(eta, L)", "LCSDG");
    ECRIT               = VALUE(FLOAT,     "Critical plastic strain (material instability). EQ.0.0: Fixed value DCRIT defining critical damage is read, GT.0.0: Fixed value for stress-state independent critical equivalent plastic strain");
    ECRIT_CURVE         = VALUE(CURVE,     "Critical plastic strain (material instability). |ECRIT| is either a load curve ID defining critical equivalent plastic strain versus triaxiality or a table ID defining critical equivalent plastic strain as a function of triaxiality and Lode parameter (as in LCSDG)", "ECRIT");
    DMGEXP              = VALUE(FLOAT,     "Exponent for nonlinear damage accumulation");
    DCRIT               = VALUE(FLOAT,     "Damage threshold value (critical damage)");
    FADEXP              = VALUE(FLOAT,     "Exponent for damage-related stress fadeout. Constant fading exponent");
    FADEXP_CURVE        = VALUE(CURVE,     "Exponent for damage-related stress fadeout. |FADEXP| is load curve ID defining element-size dependent fading exponent", "FADEXP");
    LCREGD              = VALUE(CURVE,     "Load curve ID or Table ID defining element size dependent regularization factors for equivalent plastic strain to failure. Load curve ID (regularization factor factor as a function of element size) or table ID (regularization factor vs. element size curves vs. effective rate)");
    LCREGD_TABLE        = VALUE(CURVE,     "Load curve ID or Table ID defining element size dependent regularization factors for equivalent plastic strain to failure. |LCREGD| is Table ID (reg. factor vs. element size curves vs. triaxiality)", "LCREGD");
    INSTF               = VALUE(INT,       "Flag for governing the behavior of instability measure, F, and fading exponent, FADEXP");

    //Card 3
    LCSRS               = VALUE(CURVE,     "Load curve ID or table ID. Load curve ID defining failure strain scaling factor for LCSDG as a function of strain rate. Table ID defining failure strain scaling factor as a function of strain rate (TABLE) and triaxility (CURVE). GT.0: Scale ECRIT. LT.0: Do not scale ECRIT");
    SHRF                = VALUE(FLOAT,     "Reduction factor for regularization for shear stress states");
    BIAXF               = VALUE(FLOAT,     "Reduction factor for regularization for biaxial stress states");
    LCDLIM              = VALUE(CURVE,     "Load curve ID defining damage limit values as a function of triaxiality");
    MIDFAIL             = VALUE(FLOAT,     "Mid-plane failure option for shell elements");
    HISVN               = VALUE(FLOAT,     "History variable used to evaluate the 3-D table LCSDG. GT.0.0: Constant value. LT.0.0: The constant value found at position |HISVN| where |HISVN| is the location in the history array of *INITIAL_STRESS_ SHELL/SOLID");
    SOFT                = VALUE(FLOAT,     "Softening reduction factor for failure strain in crashfront elements. EQ.0.0: Inactive. GT.0.0: Plastic failure strain, epsilon_f (LCSDG), and critical plastic strain, epsilon_p_loc (ECRIT), will be scaled by SOFT. LT.0.0: Only plastic failure strain, epsilon_f (LCSDG), will be scaled by |SOFT|");
    LP2BI               = VALUE(FLOAT,     "Option to use a bending indicator instead of the Lode parameter");

    //HM INTERNAL
    //Card 2
    OPT_LCSDG_funct     = VALUE(BOOL,      "LCSDG flag: curve Vs function", "LCSDG_NEGFLAG");
    OPT_ECRIT_curve     = VALUE(BOOL,      "ECRIT flag", "ECRIT_NEGFLAG");
    OPT_FADEXP_curve    = VALUE(BOOL,      "FADEXP flag", "FADEXP_NEGFLAG");
    OPT_LCREGD_table    = VALUE(BOOL,      "LCREGD flag: curve Vs function", "LCREGD_NEGFLAG");
    //Card 3
    OPT_LCSRS_scale     = VALUE(BOOL,      "LCREGD flag: scale Vs not scale ECRIT", "LCSRS_Scale");

    IOFLAG              = VALUE(INT,       "I/O Flag");
    LCSDG_TEMP          = VALUE(INT,       "LCSDG temp");
    LCREGD_TEMP         = VALUE(INT,       "LCREGD temp");
    LCSRS_TEMP          = VALUE(INT,       "LCSRS temp");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //HM INTERNAL
    IOFLAG              = -1;

    LCSDG_TEMP          = -1;
    LCREGD_TEMP         = -1;
    LCSRS_TEMP          = -1;
}

CHECK(COMMON)
{
    SHRF >= -1;
    SHRF <= 1;
    BIAXF >= -1;
    BIAXF <= 1;
}

DEFAULTS(COMMON)
{
    // Card 1
    DTYP                = 0;
    REFSZ               = 0.0;
    NUMFIP              = 1.0;

    // Card 2
    ECRIT               = 0.0;
    DMGEXP              = 1.0;
    DCRIT               = 0.0;
    FADEXP              = 1.0;
    INSTF               = 0;

    // Card 3
    SHRF                = 0.0;
    BIAXF               = 0.0;
    MIDFAIL             = 0.0;
    HISVN               = 0.0;
    SOFT                = 0.0;
    LP2BI               = 0.0;
}

GUI(COMMON)
{
    // Card 1
    DATA(MID);
    SCALAR(DTYP)                           { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(REFSZ);
    SCALAR(NUMFIP)                         { DIMENSION = "DIMENSIONLESS" ; }

    // Card 2
    FLAG(OPT_LCSDG_funct);
    if(OPT_LCSDG_funct == 0)
    {
        DATA(LCSDG);
    }
    else
    {
        DATA(LCSDG_FUNCT);
    }
    FLAG(OPT_ECRIT_curve);
    if(OPT_ECRIT_curve == 0)
    {
        SCALAR(ECRIT)                      { DIMENSION = "DIMENSIONLESS" ; }
    }
    else
    {
        DATA(ECRIT_CURVE);
    }
    SCALAR(DMGEXP)                         { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(DCRIT)                          { DIMENSION = "DIMENSIONLESS" ; }
    FLAG(OPT_FADEXP_curve);
    if(OPT_FADEXP_curve == 0)
    {
        SCALAR(FADEXP)                     { DIMENSION = "DIMENSIONLESS" ; }
    }
    else
    {
        DATA(FADEXP_CURVE);
    }
    FLAG(OPT_LCREGD_table);
    if(OPT_LCREGD_table == 0)
    {
        DATA(LCREGD);
    }
    else
    {
        DATA(LCREGD_TABLE);
    }
    RADIO(INSTF)
    {
        ADD(0, "0: F is incrementally updated, and FADEXP, if form a table, is allowed to vary. F is only 0 or 1 (after ECRIT is reached), and FADEXP, if form a table, is allowed to vary");
        ADD(1, "1: F is incrementally updated, and FADEXP is kept constant after F = 1. F is only 0 or 1 (after ECRIT is reached), and FADEXP is kept constant after F = 1");
    }

    // Card 3
    FLAG(OPT_LCSRS_scale);
    if(OPT_LCSRS_scale == 0)
    {
        DATA(LCSRS); // Scale ECRIT
    }
    else
    {
        DATA(LCSRS); // Do not scale ECRIT
    }
    SCALAR(SHRF)                           { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(BIAXF)                          { DIMENSION = "DIMENSIONLESS" ; }
    DATA(LCDLIM);

    RADIO(MIDFAIL)
    {
        ADD(0.0, "0.0: Inactive");
        ADD(1.0, "1.0: Active. Those of the non-mid-plane IP's that are already above their critical value immediately start to reduce the stresses. Those who are still below critical still do not couple, only if they reach their criterion");
        ADD(2.0, "2.0: Active. All of the non-mid-plane IP's immediately start to reduce the stresses. NUMFIP is active");
        ADD(3.0, "3.0: Active. Same as 2 but when D = 1 is reached in the middle integration point, the element is eroded instantaneously. NUMFIP is disregarded");
        ADD(4.0, "4.0: Active. Damage and failure are applied only to the midpoint. When D = 1 at the midpoint, the element is eroded. NUMFIP is disregarded. Integration points away from the midplane see no stress reduction and no failure");
    }

    SCALAR(HISVN)                          { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(SOFT)                           { DIMENSION = "DIMENSIONLESS" ; }
    RADIO(LP2BI)
    {
        ADD(0, "0.0: Inactive");
        ADD(1, "1.0: Active. Constant regularization (LCREGD) applied");
        ADD(2, "2.0: Active. Regularization (LCRGED) fully applied under pure membrane loading (OMEGA = 0) but not at all under pure bending (OMEGA = 1). Linear interpolation in between");
    }
}

// File format
FORMAT(Keyword971_R11.2)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    // Card 1
    COMMENT("$      MID                DTYP     REFSZ    NUMFIP");
    CARD("%10d%10s%10d%10lg%10lg", MID, _BLANK_, DTYP, REFSZ, NUMFIP);

    // Card 2
    COMMENT("$    LCSDG     ECRIT    DMGEXP     DCRIT    FADEXP    LCREGD");
    if(IOFLAG == 0)
    {
        CARD("%10d%10lg%10lg%10lg%10lg%10d", SCALAR_OR_OBJECT(OPT_LCSDG_funct, LCSDG, LCSDG_FUNCT), SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), SCALAR_OR_OBJECT(OPT_LCREGD_table, LCREGD, LCREGD_TABLE));
    }
    else // IMPORT... SCALAR_OR_OBJECT doesn't work in IMPORT with 2 curves... hack
    {
        CARD_PREREAD("%10d%10s%10s%10s%10s%10d", LCSDG_TEMP, _BLANK_, _BLANK_, _BLANK_, _BLANK_, LCREGD_TEMP);
        CARD("%10d%10lg%10lg%10lg%10lg%10d", CELL_COND( if(LCSDG_TEMP >=0) LCSDG; else LCSDG_TEMP; ), SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), CELL_COND( if(LCREGD_TEMP >=0) LCREGD; else LCREGD_TEMP; ));

        if(LCSDG_TEMP >= 0)
        {
            ASSIGN(OPT_LCSDG_funct, 0, IMPORT);
        }
        else
        {
            ASSIGN(OPT_LCSDG_funct, 1, IMPORT);
            ASSIGN(LCSDG_FUNCT, -1 * LCSDG_TEMP, IMPORT);
        }

        if(LCREGD_TEMP >= 0)
        {
            ASSIGN(OPT_LCREGD_table, 0, IMPORT);
        }
        else
        {
            ASSIGN(OPT_LCREGD_table, 1, IMPORT);
            ASSIGN(LCREGD_TABLE, -1 * LCREGD_TEMP, IMPORT);
        }

    }
    
    //Card 3
    COMMENT("$    LCSRS      SHRF     BIAXF    LCDLIM   MIDFAIL     HISVN");
    if(IOFLAG == 0)
    {
        CARD("%10d%10lg%10lg%10d%10lg%10lg", SCALAR_OR_OBJECT(OPT_LCSRS_scale, LCSRS, LCSRS), SHRF, BIAXF, LCDLIM, MIDFAIL, HISVN);
    }
    else // IMPORT... SCALAR_OR_OBJECT doesn't work in IMPORT with 2 curves... hack
    {
        CARD("%10d%10lg%10lg%10d%10lg%10lg", CELL_COND( if(LCSRS_TEMP >=0) LCSRS; else LCSRS_TEMP; ), SHRF, BIAXF, LCDLIM, MIDFAIL, HISVN);

        if(LCSRS_TEMP >= 0)
        {
            ASSIGN(OPT_LCSRS_scale, 0, IMPORT);
        }
        else
        {
            ASSIGN(OPT_LCSRS_scale, 1, IMPORT);
            ASSIGN(LCSRS, -1 * LCSRS_TEMP, IMPORT);
        }
    }
}

FORMAT(Keyword971_R12.0)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    // Card 1
    COMMENT("$      MID                DTYP     REFSZ    NUMFIP");
    CARD("%10d%10s%10d%10lg%10lg", MID, _BLANK_, DTYP, REFSZ, NUMFIP);

    // Card 2
    COMMENT("$    LCSDG     ECRIT    DMGEXP     DCRIT    FADEXP    LCREGD");
    if(IOFLAG == 0)
    {
        CARD("%10d%10lg%10lg%10lg%10lg%10d", SCALAR_OR_OBJECT(OPT_LCSDG_funct, LCSDG, LCSDG_FUNCT), SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), SCALAR_OR_OBJECT(OPT_LCREGD_table, LCREGD, LCREGD_TABLE));
    }
    else // IMPORT... SCALAR_OR_OBJECT doesn't work in IMPORT with 2 curves... hack
    {
        CARD_PREREAD("%10d%10s%10s%10s%10s%10d", LCSDG_TEMP, _BLANK_, _BLANK_, _BLANK_, _BLANK_, LCREGD_TEMP);
        CARD("%10d%10lg%10lg%10lg%10lg%10d", CELL_COND( if(LCSDG_TEMP >=0) LCSDG; else LCSDG_TEMP; ), SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), CELL_COND( if(LCREGD_TEMP >=0) LCREGD; else LCREGD_TEMP; ));

        if(LCSDG_TEMP >= 0)
        {
            ASSIGN(OPT_LCSDG_funct, 0, IMPORT);
        }
        else
        {
            ASSIGN(OPT_LCSDG_funct, 1, IMPORT);
            ASSIGN(LCSDG_FUNCT, -1 * LCSDG_TEMP, IMPORT);
        }

        if(LCREGD_TEMP >= 0)
        {
            ASSIGN(OPT_LCREGD_table, 0, IMPORT);
        }
        else
        {
            ASSIGN(OPT_LCREGD_table, 1, IMPORT);
            ASSIGN(LCREGD_TABLE, -1 * LCREGD_TEMP, IMPORT);
        }

    }
    
    //Card 3
    COMMENT("$    LCSRS      SHRF     BIAXF    LCDLIM   MIDFAIL     HISVN      SOFT     LP2BI");
    if(IOFLAG == 0)
    {
        CARD("%10d%10lg%10lg%10d%10lg%10lg%10lg%10lg", SCALAR_OR_OBJECT(OPT_LCSRS_scale, LCSRS, LCSRS), SHRF, BIAXF, LCDLIM, MIDFAIL, HISVN, SOFT, LP2BI);
    }
    else // IMPORT... SCALAR_OR_OBJECT doesn't work in IMPORT with 2 curves... hack
    {
        CARD("%10d%10lg%10lg%10d%10lg%10lg%10lg%10lg", LCSRS_TEMP , SHRF, BIAXF, LCDLIM, MIDFAIL, HISVN, SOFT, LP2BI);

        if(LCSRS_TEMP >= 0)
        {
            ASSIGN(OPT_LCSRS_scale, 0, IMPORT);
            ASSIGN(LCSRS, LCSRS_TEMP, IMPORT);
        }
        else
        {
            ASSIGN(OPT_LCSRS_scale, 1, IMPORT);
            ASSIGN(LCSRS, -1 * LCSRS_TEMP, IMPORT);
        }
    }
}

FORMAT(Keyword971_R13.0)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT); 

    // Card 1
    COMMENT("$      MID                DTYP     REFSZ    NUMFIP");
    CARD("%10d%10s%10d%10lg%10lg", MID, _BLANK_, DTYP, REFSZ, NUMFIP);

    // Card 2
    COMMENT("$    LCSDG     ECRIT    DMGEXP     DCRIT    FADEXP    LCREGD     INSTF");
    if(IOFLAG == 0)
    {
        CARD("%10d%10lg%10lg%10lg%10lg%10d%10d", SCALAR_OR_OBJECT(OPT_LCSDG_funct, LCSDG, LCSDG_FUNCT), SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), SCALAR_OR_OBJECT(OPT_LCREGD_table, LCREGD, LCREGD_TABLE), INSTF);
    }
    else // IMPORT... SCALAR_OR_OBJECT doesn't work in IMPORT with 2 curves... hack
    {
        CARD_PREREAD("%10d%10s%10s%10s%10s%10d", LCSDG_TEMP, _BLANK_, _BLANK_, _BLANK_, _BLANK_, LCREGD_TEMP);
        CARD("%10d%10lg%10lg%10lg%10lg%10d%10d", CELL_COND( if(LCSDG_TEMP >=0) LCSDG; else LCSDG_TEMP; ), SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), CELL_COND( if(LCREGD_TEMP >=0) LCREGD; else LCREGD_TEMP; ), INSTF);

        if(LCSDG_TEMP >= 0)
        {
            ASSIGN(OPT_LCSDG_funct, 0, IMPORT);
        }
        else
        {
            ASSIGN(OPT_LCSDG_funct, 1, IMPORT);
            ASSIGN(LCSDG_FUNCT, -1 * LCSDG_TEMP, IMPORT);
        }

        if(LCREGD_TEMP >= 0)
        {
            ASSIGN(OPT_LCREGD_table, 0, IMPORT);
        }
        else
        {
            ASSIGN(OPT_LCREGD_table, 1, IMPORT);
            ASSIGN(LCREGD_TABLE, -1 * LCREGD_TEMP, IMPORT);
        }

    }
    
    //Card 3
    COMMENT("$    LCSRS      SHRF     BIAXF    LCDLIM   MIDFAIL     HISVN      SOFT     LP2BI");
    if(IOFLAG == 0)
    {
        CARD("%10d%10lg%10lg%10d%10lg%10lg%10lg%10lg", SCALAR_OR_OBJECT(OPT_LCSRS_scale, LCSRS, LCSRS), SHRF, BIAXF, LCDLIM, MIDFAIL, HISVN, SOFT, LP2BI);
    }
    else // IMPORT... SCALAR_OR_OBJECT doesn't work in IMPORT with 2 curves... hack
    {
        CARD("%10d%10lg%10lg%10d%10lg%10lg%10lg%10lg", LCSRS_TEMP , SHRF, BIAXF, LCDLIM, MIDFAIL, HISVN, SOFT, LP2BI);

        if(LCSRS_TEMP >= 0)
        {
            ASSIGN(OPT_LCSRS_scale, 0, IMPORT);
            ASSIGN(LCSRS, LCSRS_TEMP, IMPORT);
        }
        else
        {
            ASSIGN(OPT_LCSRS_scale, 1, IMPORT);
            ASSIGN(LCSRS, -1 * LCSRS_TEMP, IMPORT);
        }
    }
}
