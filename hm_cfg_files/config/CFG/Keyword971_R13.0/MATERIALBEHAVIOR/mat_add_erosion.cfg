//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to 
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided 
//Copyright>    that any modification to CFG by a third party must be provided back to 
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software. 
//Copyright>  
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR 
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY, 
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- mat_add_erosion.cfg ---
//
// *MAT_ADD_EROSION
//

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES

    //Card 1
    MID                 = VALUE(MAT,       "Material identification for which this erosion definition applies");
    EXCL                = VALUE(FLOAT,     "The exclusion number");
    MXPRES              = VALUE(FLOAT,     "Maximum pressure at failure, Pmax");
    MNEPS               = VALUE(FLOAT,     "Minimum principal strain at failure, epsilon_min");
    EFFEPS              = VALUE(FLOAT,     "Maximum effective strain at failure, epsilon_eff");
    VOLEPS              = VALUE(FLOAT,     "Volumetric strain at failure");
    NUMFIP              = VALUE(FLOAT,     "Number or percentage of failed integration points prior to element deletion. GT.0.0: Number of integration points which must fail before element is deleted. LT.0.0: Applies only to shells. |NUMFIP| is the percentage of integration points which must exceed the failure criterion before the element fails");
    NCS                 = VALUE(FLOAT,     "Number of failure conditions to satisfy before failure occurs");

    //Card 2
    MNPRES              = VALUE(FLOAT,     "Minimum pressure at failure, Pmin");
    SIGP1               = VALUE(FLOAT,     "Maximum principal stress at failure, sigma_max");
    SIGVM               = VALUE(FLOAT,     "Equivalent stress at failure, sigma_signed_max");
    SIGVM_CURVE         = VALUE(CURVE,     "Equivalent stress at failure, sigma_signed_max. -SIGMVM is a load curve ID giving the equivalent stress at failure as a function of the effective strain rate", "SIGVM");
    MXEPS               = VALUE(FLOAT,     "Variable to invoke a failure criterion based on maximum principal strain. Maximum principal strain at failure, epsilon_max");
    MXEPS_CURVE         = VALUE(CURVE,     "Variable to invoke a failure criterion based on maximum principal strain. -MXEPS is the ID of a curve giving maximum principal strain at failure as a function of effective strain rate", "MXEPS");
    EPSSH               = VALUE(FLOAT,     "Tensorial shear strain at failure, gamma_max / 2");
    SIGTH               = VALUE(FLOAT,     "Threshold stress, sigma0");
    IMPULSE             = VALUE(FLOAT,     "Stress impulse for failure, Kf");
    FAILTM              = VALUE(FLOAT,     "Failure time. GT.0: Failure time is active during any phase of the analysis. LT.0: Failure time is set to |FAILTM|. This criterion in inactive during the dynamic relaxation phase");


    //Optional Card 3
    IDAM                = VALUE(INT,       "Flag for damage model. EQ.0: no damage model is used. EQ.1: Damage models GISSMO");
    IDAM_DIEM           = VALUE(INT,       "Flag for damage model. LT.0: Damage models DIEM", "IDAM");
    //
    DMGTYP              = VALUE(FLOAT,     "DMGTYP");
    LCSDG               = VALUE(CURVE,     "Load curve ID or Table ID");
    ECRIT               = VALUE(FLOAT,     "Critical plastic strain (material instability)");
    ECRIT_CURVE         = VALUE(CURVE,     "|ECRIT| is load curve ID defining critical equivalent plastic strain vs. triaxiality", "ECRIT");
    DMGEXP              = VALUE(FLOAT,     "Exponent for nonlinear damage accumulation");
    DCRIT               = VALUE(FLOAT,     "Damage threshold value (critical damage)");
    FADEXP              = VALUE(FLOAT,     "Exponent for damage-related stress fadeout");
    FADEXP_CURVE        = VALUE(CURVE,     "|FADEXP| is load curve ID defining element-size dependent fading exponent", "FADEXP");
    //
    LCREGD              = VALUE(CURVE,     "Load curve ID defining element size dependent regularization factors");

    //
    //Additional card for IDAM > 0.
    SIZFLG              = VALUE(FLOAT,     "Flag for method of element size determination");
    REFSZ               = VALUE(FLOAT,     "Reference element size, for which an additional output of damage will be generated");
    NAHSV               = VALUE(FLOAT,     "Number of history variables from damage model which should be stored in standard material history array for Postprocessing");
    LCSRS               = VALUE(CURVE,     "Load curve ID defining failure strain scaling factor vs. strain rate. GT.0: scale ECRIT, too. LT.0: do not scale ECRIT");
    SHRF                = VALUE(FLOAT,     "Reduction factor for regularization at triaxiality=0 (shear)");
    BIAXF               = VALUE(FLOAT,     "Reduction factor for regularization at triaxiality=2/3 (biaxial)");

    //For IDAM < 0 include |IDAM| pairs of Cards
    IDAM_size           = SIZE(            "ADD_EROSION");

    DITYP               = ARRAY[IDAM_size](FLOAT,     "Damage initiation type", "DITYP");
    P1                  = ARRAY[IDAM_size](CURVE,     "Damage initiation parameter", "P1");
    P2                  = ARRAY[IDAM_size](FLOAT,     "Damage initiation parameter", "P2");
    P3                  = ARRAY[IDAM_size](FLOAT,     "Damage initiation parameter", "P3");

    DETYP               = ARRAY[IDAM_size](FLOAT,     "Damage evolution type", "DETYP");
    DCTYP               = ARRAY[IDAM_size](FLOAT,     "Damage composition option for multiple criteria", "DCTYP");
    flagforQ1           = ARRAY[IDAM_size](INT,       "flagforQ1", "flagforQ1");
    Q1                  = ARRAY[IDAM_size](FLOAT,     "Damage evolution parameter", "Q1");
    Q1_CURVE            = ARRAY[IDAM_size](CURVE,     "Damage evolution parameter", "Q1_CURVE");
    Q2                  = ARRAY[IDAM_size](FLOAT,     "Set to 1.0 to output information to log files (messag and d3hsp) when an integration point fails", "Q2");
    //

    //Optional Card 4
    LCFLD               = VALUE(CURVE,     "Load curve ID or Table ID. Load curve defines the Forming Limit Diagram. Table defines for each strain rate (LCFLD > 0) or for each shell thickness (LCFLD < 0) an associated FLD curve");
    NSFF                = VALUE(FLOAT,     "Number of explicit time step cycles for stress fade-out used in the LCFLD criterion");
    EPSTHIN             = VALUE(FLOAT,     "Thinning strain at failure for thin and thick shells. GT.0.0: Individual thinning for each integration point from z-strain. LT.0.0: Averaged thinning strain from element thickness change");
    ENGCRT              = VALUE(FLOAT,     "Critical energy for nonlocal failure criterion");
    RADCRT              = VALUE(FLOAT,     "Critical radius for nonlocal failure criterion");
    LCEPS12             = VALUE(CURVE,     "Load curve ID defining in-plane shear strain limit gamma12^c as a function of element size");
    LCEPS13             = VALUE(CURVE,     "Load curve ID defining through-thickness shear strain limit gamma13^c as a function of element size");
    LCEPSMX             = VALUE(CURVE,     "Load curve ID defining in-plane major strain limit epsilon1^c as a function of element size");

    //Optional Card 5
    DTEFLT              = VALUE(FLOAT,     "The time period (or inverse of the cutoff frequency) for the lowpass filter applied to the effective strain rate when MXEPS is negative");
    VOLFRAC             = VALUE(FLOAT,     "The volume fraction required to fail before the element is deleted. The default is 0.5. It is used for higher order solid element types 24, 25, 26, 27, 28, and 29, and all isogeometric solids and shell elements");
    MXTMP               = VALUE(FLOAT,     "Maximum temperature at failure");
    DTMIN               = VALUE(FLOAT,     "Minimum time step size at failure");

    //HM INTERNAL
    OPT_SIGVM_curve     = VALUE(BOOL,      "SIGVM flag", "SIGVM_Curve");
    OPT_MXEPS_curve     = VALUE(BOOL,      "MXEPS flag", "MXEPS_Curve");

    OPT_CARD3           = VALUE(BOOL,      "Damage Model Card", "OptionalCard3");
    flagforIDAM_DIEM    = VALUE(BOOL,      "IDAM flag for DIEM", "flagforIDAM");

    //
    OPT_ECRIT_curve     = VALUE(BOOL,      "ECRIT flag", "ECRIT_Curve");
    OPT_FADEXP_curve    = VALUE(BOOL,      "FADEXP flag", "FADEXP_Curve");
    OPT_LCSRS_scale     = VALUE(BOOL,      "LCSRS flag", "LCSRS_Scale");
    //

    OPT_CARD4           = VALUE(BOOL,      "Additional Failure Criteria Card", "OptionalFailureCriteria");
    OPT_CARD5           = VALUE(BOOL,      "Additional Failure Criteria Card", "OptionalFailureCriteria2");

    //
    LCSRS_TEMP          = VALUE(INT,       "LCSRS temp");
    //

    _dummy_IDAM         = VALUE(INT,       "");
    IOFLAG              = VALUE(INT,       "I/O Flag");
//

    KEYWORD_STR                             = VALUE(STRING,            "Solver Keyword");
    LSD_TitleOpt                            = VALUE(INT,               "Title flag");
    _TITLE                                  = VALUE(STRING,            "Title");
    _opt                                    = VALUE(STRING,            "Keyword option");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //
    LCSRS_TEMP          = -1;
    //

    _dummy_IDAM         = -1;
    IOFLAG              = -1;

    //HM INTERNAL
    KEYWORD_STR                             = 9000;
    LSD_TitleOpt                            = 90;
    _TITLE                                  = -1;
    _opt                                    = -1;
}

DEFAULTS(COMMON)
{
    EXCL                = 0.0;
    MXPRES              = 0.0;
    MNEPS               = 0.0;
    EFFEPS              = 0.0;
    VOLEPS              = 0.0;
    NUMFIP              = 1.0;
    NCS                 = 1.0;

    //
    DMGTYP              = 0.0;
    ECRIT               = 0.0;
    DMGEXP              = 1.0;
    DCRIT               = 0.0;
    FADEXP              = 1.0;

    SIZFLG              = 0.0;
    REFSZ               = 0.0;
    NAHSV               = 0.0;
    SHRF                = 0.0;
    BIAXF               = 0.0;

    DITYP               = 0.0;
    P2                  = 0.0;
    P3                  = 0.0;
    DETYP               = 0.0;
    DCTYP               = 0.0;
    Q2                  = 0.0;
    //

    NSFF                = 10.0;
    EPSTHIN             = 0.0;
    ENGCRT              = 0.0;
    RADCRT              = 0.0;

    VOLFRAC             = 0.5;
}

CHECK(COMMON)
{
    //IDAM_DIEM           <  0; // managed by IDAM_size
    IDAM_size           > 0;
}

GUI(COMMON)
{
    FLAG(LSD_TitleOpt, "LSD_TitleOpt");

    if(LSD_TitleOpt == 0)
    {
        ASSIGN(KEYWORD_STR, "*MAT_ADD_EROSION");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "*MAT_ADD_EROSION_TITLE");
    }

    // Card 1
    DATA(MID);
    SCALAR(EXCL)                            { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(MXPRES)                          { DIMENSION = "pressure"; }
    SCALAR(MNEPS)                           { DIMENSION = "strain_rate" ; }
    SCALAR(EFFEPS)                          { DIMENSION = "strain_rate" ; }
    SCALAR(VOLEPS)                          { DIMENSION = "strain_rate" ; }
    SCALAR(NUMFIP)                          { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(NCS)                             { DIMENSION = "DIMENSIONLESS" ; }

    // Card 2
    SCALAR(MNPRES)                          { DIMENSION = "pressure"; }
    SCALAR(SIGP1)                           { DIMENSION = "pressure"; }
 optional:
    FLAG(OPT_SIGVM_curve);
    if(OPT_SIGVM_curve == FALSE)
    {
        SCALAR(SIGVM)                       { DIMENSION = "pressure" ; }
    }
    else
    {
        DATA(SIGVM_CURVE);
    }
 optional:
    FLAG(OPT_MXEPS_curve);
    if(OPT_MXEPS_curve == FALSE)
    {
        SCALAR(MXEPS)                       { DIMENSION = "DIMENSIONLESS" ; }
    }
    else
    {
        DATA(MXEPS_CURVE);
    }
    SCALAR(EPSSH)                           { DIMENSION = "strain_rate" ; }
    SCALAR(SIGTH)                           { DIMENSION = "pressure" ; }
    SCALAR(IMPULSE)                         { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(FAILTM)                          { DIMENSION = "t" ; }

 optional:
    FLAG(OPT_CARD3);

    // Damage Model Card. The following card is optional.
    if(OPT_CARD3 == TRUE)
    {
        FLAG(flagforIDAM_DIEM);
        if(flagforIDAM_DIEM == 0)
        {
            RADIO(IDAM)
            {
                ADD(0, "0: No damage model is used");
                ADD(1, "1: Damage models GISSMO or DIEM");
            }

            if(IDAM > 0)
            {
                SCALAR(DMGTYP)                      { DIMENSION = "DIMENSIONLESS" ; }
            }
        }

        if( flagforIDAM_DIEM == 1) // For IDAM LT 0
        {
            //SCALAR(IDAM_DIEM, "IDAM"); // managed by IDAM_size

            RADIO(DMGTYP)
            {
                ADD(0, "0: No action is taken");
                ADD(1, "1: Damage history is initiated based on values of initial plastic strains and initial strain tensor");
            }
        }

        DATA(LCSDG);
        FLAG(OPT_ECRIT_curve);
        if(OPT_ECRIT_curve == FALSE)
        {
            SCALAR(ECRIT)                       { DIMENSION = "DIMENSIONLESS" ; }
        }
        if(OPT_ECRIT_curve == TRUE)
        {
            DATA(ECRIT_CURVE);
        }

        SCALAR(DMGEXP)                          { DIMENSION = "DIMENSIONLESS" ; }
        SCALAR(DCRIT)                           { DIMENSION = "DIMENSIONLESS" ; }
        FLAG(OPT_FADEXP_curve);
        if(OPT_FADEXP_curve == FALSE)
        {
            SCALAR(FADEXP)                      { DIMENSION = "DIMENSIONLESS" ; }
        }
        if(OPT_FADEXP_curve == TRUE)
        {
            DATA(FADEXP_CURVE);
        }
        DATA(LCREGD);

        if(flagforIDAM_DIEM == 0 && IDAM > 0)
        {
            //Additional card for IDAM > 0
            RADIO(SIZFLG)
            {
                ADD(0.0, "0.0: (default) Element size is determined in undeformed configuration as square root of element area (shells), or cubic root of element volume (solids), respectively");
                ADD(1.0, "1.0: Element size is updated every time step, and determined as mean edge length");
            }
            SCALAR(REFSZ)                       { DIMENSION = "l"; }
            SCALAR(NAHSV)                       { DIMENSION = "DIMENSIONLESS"; }
            FLAG(OPT_LCSRS_scale);
            if(OPT_LCSRS_scale == FALSE)
            {
                DATA(LCSRS); //scale ECRIT, too
            }
            if(OPT_LCSRS_scale == TRUE)
            {
                DATA(LCSRS); //do not scale ECRIT
            }
            SCALAR(SHRF)                        { DIMENSION = "DIMENSIONLESS"; }
            SCALAR(BIAXF)                       { DIMENSION = "DIMENSIONLESS"; }
        }

        if(flagforIDAM_DIEM == 1) // For IDAM LT 0
        {
            //Damage Initiation and Evolution Card Pairs. For IDAM < 0 include |IDAM| pairs of Cards
            SIZE(IDAM_size);
            ARRAY(IDAM_size, "")
            {
                RADIO(DITYP)
                {
                    ADD(0.0, "0.0: Ductile based on stress triaxiality");
                    ADD(1.0, "1.0: Shear");
                    ADD(2.0, "2.0: MSFLD");
                    ADD(3.0, "3.0: FLD");
                    ADD(4.0, "4.0: Ductile based on normalized principal stress");
                }
                DATA(P1);
                if(DITYP == 1.0 || DITYP == 4.0)
                {
                    SCALAR(P2)             { DIMENSION = "DIMENSIONLESS" ; }
                }
                if(DITYP == 2.0 || DITYP == 3.0)
                {
                    RADIO(P2, "P2")
                    {
                        ADD(0, "0: Mid layer");
                        ADD(1, "1: Outer layer");
                    }
                    RADIO(P3)
                    {
                        ADD(0, "0: Direct");
                        ADD(1, "1: Incremental");
                    }
                }
                RADIO(DETYP)
                {
                    ADD(0.0, "0.0: Linear softening, evolution of damage is a function of the plastic displacement after the initiation of damage");
                    ADD(1.0, "1.0: Linear softening, evolution of damage is a function of the fracture energy after the initiation of damage");
                }
                RADIO(DCTYP)
                {
                    ADD(-1.0, "-1.0: Damage not coupled to stress");
                    ADD(0.0, "0.0: Maximum");
                    ADD(1.0, "1.0: Multiplicative");
                }
                if(DETYP == 0.0)
                {
                    RADIO(flagforQ1)
                    {
                        ADD(0, "0: Real");
                        ADD(1, "1: Curve");
                    }
                }

                if((DETYP == 0.0 && flagforQ1 == 0) || DETYP == 1.0)
                {
                    SCALAR(Q1)             { DIMENSION = "DIMENSIONLESS" ; }
                }
                if(DETYP == 0.0 && flagforQ1 == 1)
                {
                    DATA(Q1_CURVE);
                }
                SCALAR(Q2)                 { DIMENSION = "DIMENSIONLESS" ; }
            }
        }

 optional:
        FLAG(OPT_CARD4);

        // Additional Failure Criteria Card. This card is optional
        if(OPT_CARD4 == TRUE)
        {
            DATA(LCFLD);
            SCALAR(NSFF)                        { DIMENSION = "DIMENSIONLESS" ; }
            SCALAR(EPSTHIN)                     { DIMENSION = "strain_rate" ; }
            SCALAR(ENGCRT)                      { DIMENSION = "energy" ; }
            SCALAR(RADCRT)                      { DIMENSION = "energy" ; }
            DATA(LCEPS12);
            DATA(LCEPS13);
            DATA(LCEPSMX);
        }

optional:
        FLAG(OPT_CARD5);

        // Additional Failure Criteria Card. This card is optional
        if(OPT_CARD5 == TRUE)
        {

            SCALAR(DTEFLT)                      { DIMENSION = "t" ; }
            SCALAR(VOLFRAC)                     { DIMENSION = "DIMENSIONLESS"; }
            SCALAR(MXTMP)                       { DIMENSION = "k" ; }
            SCALAR(DTMIN)                       { DIMENSION = "t" ; }
        }
    }
}

// File format
FORMAT(Keyword971)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(LSD_TitleOpt == 0)
        {
            HEADER("*MAT_ADD_EROSION");
        }
        else
        {
            HEADER("*MAT_ADD_EROSION_TITLE");
        }
    }
    else //IMPORT
    {
        HEADER("*MAT_ADD_EROSION%-s", _opt);

        if(_opt == "")
        {
            ASSIGN(LSD_TitleOpt, 0, IMPORT);
        }
        else
        {
            ASSIGN(LSD_TitleOpt, 1, IMPORT);
        }
    }

    if(IOFLAG == 0)
    {
        COMMENT("$NAME");
        CARD("%-70s", _TITLE);
    }

    // Card 1
    COMMENT("$      MID      EXCL    MXPRES     MNEPS    EFFEPS    VOLEPS    NUMFIP       NCS");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg", MID, EXCL, MXPRES, MNEPS, EFFEPS, VOLEPS, NUMFIP, NCS);

    // Card 2
    COMMENT("$   MNPRES     SIGP1     SIGVM     MXEPS     EPSSH     SIGTH   IMPULSE    FAILTM");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg", MNPRES, SIGP1, SIGVM, SCALAR_OR_OBJECT(OPT_MXEPS_curve, MXEPS, MXEPS_CURVE), EPSSH, SIGTH, IMPULSE, FAILTM);

    // Optional Card 3
    if(IOFLAG == 0)
    {
        if (OPT_CARD3 == TRUE)
        {
            COMMENT("$     IDAM    DMGTYP     LCSDG     ECRIT    DMGEXP     DCRIT    FADEXP    LCREGD");
        }

        if(flagforIDAM_DIEM == 0)
        {
            FREE_CARD(OPT_CARD3, "%10d%10lg%10d%10lg%10lg%10lg%10lg%10d", IDAM, DMGTYP, LCSDG, SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), LCREGD);
        }
        else // flagforIDAM_DIEM == 1
        {
            ASSIGN(IDAM_DIEM, -1 * IDAM_size, EXPORT);
            FREE_CARD(OPT_CARD3, "%10d%10lg%10d%10lg%10lg%10lg%10lg%10d", IDAM_DIEM, DMGTYP, LCSDG, SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), LCREGD);
        }
    }
    else // if(IOFLAG == 1)
    {
        FREE_CARD(OPT_CARD3, "%10d%10lg%10d%10lg%10lg%10lg%10lg%10d", _dummy_IDAM, DMGTYP, LCSDG, SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), LCREGD);
        if(OPT_CARD3 == TRUE && _dummy_IDAM >= 0)
        {
            ASSIGN(flagforIDAM_DIEM, 0, IMPORT);
            ASSIGN(IDAM, _dummy_IDAM, IMPORT);
        }
        else if(OPT_CARD3 == TRUE && _dummy_IDAM < 0)
        {
            ASSIGN(flagforIDAM_DIEM, 1, IMPORT);
            ASSIGN(IDAM_DIEM, _dummy_IDAM, IMPORT);

            ASSIGN(IDAM_size, -1 * IDAM_DIEM, IMPORT);
        }
    }

    if(OPT_CARD3 == TRUE)
    {
        if(flagforIDAM_DIEM == 0 && IDAM > 0)
        {
            // Additional card for IDAM > 0
            COMMENT("$   SIZFLG     REFSZ     NAHSV");
            CARD("%10lg%10lg%10lg", SIZFLG, REFSZ, NAHSV);
        }
        else if(flagforIDAM_DIEM == 1)
        {
            // Additional cards for IDAM < 0
            CARD_LIST(IDAM_size)
            {
                COMMENT("$    DITYP        P1        P2");
                CARD("%10lg%10d%10lg", DITYP, P1, P2);

                COMMENT("$    DETYP     DCTYP        Q1");
                CARD("%10lg%10lg%10lg", DETYP, DCTYP, Q1);
            }
        }
    }
}

FORMAT(Keyword971_R6.1)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(LSD_TitleOpt == 0)
        {
            HEADER("*MAT_ADD_EROSION");
        }
        else
        {
            HEADER("*MAT_ADD_EROSION_TITLE");
        }
    }
    else //IMPORT
    {
        HEADER("*MAT_ADD_EROSION%-s", _opt);

        if(_opt == "")
        {
            ASSIGN(LSD_TitleOpt, 0, IMPORT);
        }
        else
        {
            ASSIGN(LSD_TitleOpt, 1, IMPORT);
        }
    }

    if(IOFLAG == 0)
    {
        COMMENT("$NAME");
        CARD("%-70s", _TITLE);
    }

    // Card 1
    COMMENT("$      MID      EXCL    MXPRES     MNEPS    EFFEPS    VOLEPS    NUMFIP       NCS");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg", MID, EXCL, MXPRES, MNEPS, EFFEPS, VOLEPS, NUMFIP, NCS);

    // Card 2
    COMMENT("$   MNPRES     SIGP1     SIGVM     MXEPS     EPSSH     SIGTH   IMPULSE    FAILTM");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg", MNPRES, SIGP1, SIGVM, SCALAR_OR_OBJECT(OPT_MXEPS_curve, MXEPS, MXEPS_CURVE), EPSSH, SIGTH, IMPULSE, FAILTM);

    // Optional Card 3
    if(IOFLAG == 0)
    {
        if (OPT_CARD3 == TRUE)
        {
            COMMENT("$     IDAM    DMGTYP     LCSDG     ECRIT    DMGEXP     DCRIT    FADEXP    LCREGD");
        }

        if(flagforIDAM_DIEM == 0)
        {
            FREE_CARD(OPT_CARD3, "%10d%10lg%10d%10lg%10lg%10lg%10lg%10d", IDAM, DMGTYP, LCSDG, SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), LCREGD);
        }
        else // flagforIDAM_DIEM == 1
        {
            ASSIGN(IDAM_DIEM, -1 * IDAM_size, EXPORT);
            FREE_CARD(OPT_CARD3, "%10d%10lg%10d%10lg%10lg%10lg%10lg%10d", IDAM_DIEM, DMGTYP, LCSDG, SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), LCREGD);
        }
    }
    else // if (IOFLAG == 1)
    {
        FREE_CARD(OPT_CARD3, "%10d%10lg%10d%10lg%10lg%10lg%10lg%10d", _dummy_IDAM, DMGTYP, LCSDG, SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), LCREGD);
        if(OPT_CARD3 == TRUE && _dummy_IDAM >= 0)
        {
            ASSIGN(flagforIDAM_DIEM, 0, IMPORT);
            ASSIGN(IDAM, _dummy_IDAM, IMPORT);
        }
        else if (OPT_CARD3 == TRUE && _dummy_IDAM < 0)
        {
            ASSIGN(flagforIDAM_DIEM, 1, IMPORT);
            ASSIGN(IDAM_DIEM, _dummy_IDAM, IMPORT);

            ASSIGN(IDAM_size, -1 * IDAM_DIEM, IMPORT);
        }
    }

    if(OPT_CARD3 == TRUE)
    {
        if(flagforIDAM_DIEM == 0 && IDAM > 0)
        {
            // Additional card for IDAM > 0
            COMMENT("$   SIZFLG     REFSZ     NAHSV     LCSRS      SHRF     BIAXF");

            if(IOFLAG == 0)
            {
                CARD("%10lg%10lg%10lg%10d%10lg%10lg", SIZFLG, REFSZ, NAHSV, SCALAR_OR_OBJECT(OPT_LCSRS_scale, LCSRS, LCSRS), SHRF, BIAXF);
            }
            else // IMPORT... SCALAR_OR_OBJECT doesn't work in IMPORT with 2 curves... hack
            {
                CARD("%10lg%10lg%10lg%10d%10lg%10lg", SIZFLG, REFSZ, NAHSV, LCSRS_TEMP, SHRF, BIAXF);
        
                if(LCSRS_TEMP >= 0)
                {
                    ASSIGN(OPT_LCSRS_scale, 0, IMPORT);
                    ASSIGN(LCSRS, LCSRS_TEMP, IMPORT);
                }
                else
                {
                    ASSIGN(OPT_LCSRS_scale, 1, IMPORT);
                    ASSIGN(LCSRS, -1 * LCSRS_TEMP, IMPORT);
                }
            }
        }
        else if(flagforIDAM_DIEM == 1)
        {
            // Additional card for IDAM < 0
            CARD_LIST(IDAM_size)
            {
                COMMENT("$    DITYP        P1        P2");
                CARD("%10lg%10d%10lg", DITYP, P1, P2);

                COMMENT("$    DETYP     DCTYP        Q1");
                CARD("%10lg%10lg%10lg", DETYP, DCTYP, Q1);
            }
        }

        // Optional Card with additional failure criteria
        if(IOFLAG == 0 && OPT_CARD4 == TRUE)
        {
            COMMENT("$    LCFLD             EPSTHIN");
        }
        FREE_CARD(OPT_CARD4, "%10d%10s%10lg", LCFLD, _BLANK_, EPSTHIN);
    }
}

FORMAT(Keyword971_R9.3)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(LSD_TitleOpt == 0)
        {
            HEADER("*MAT_ADD_EROSION");
        }
        else
        {
            HEADER("*MAT_ADD_EROSION_TITLE");
        }
    }
    else //IMPORT
    {
        HEADER("*MAT_ADD_EROSION%-s", _opt);

        if(_opt == "")
        {
            ASSIGN(LSD_TitleOpt, 0, IMPORT);
        }
        else
        {
            ASSIGN(LSD_TitleOpt, 1, IMPORT);
        }
    }

    if(IOFLAG == 0)
    {
        COMMENT("$NAME");
        CARD("%-70s", _TITLE);
    }

    // Card 1
    COMMENT("$      MID      EXCL    MXPRES     MNEPS    EFFEPS    VOLEPS    NUMFIP       NCS");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg", MID, EXCL, MXPRES, MNEPS, EFFEPS, VOLEPS, NUMFIP, NCS);

    // Card 2
    COMMENT("$   MNPRES     SIGP1     SIGVM     MXEPS     EPSSH     SIGTH   IMPULSE    FAILTM");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg", MNPRES, SIGP1, SCALAR_OR_OBJECT(OPT_SIGVM_curve, SIGVM, SIGVM_CURVE), SCALAR_OR_OBJECT(OPT_MXEPS_curve, MXEPS, MXEPS_CURVE), EPSSH, SIGTH, IMPULSE, FAILTM);

    // Optional Card 3
    if(IOFLAG == 0)
    {
        if (OPT_CARD3 == TRUE)
        {
            COMMENT("$     IDAM    DMGTYP     LCSDG     ECRIT    DMGEXP     DCRIT    FADEXP    LCREGD");
        }

        if(flagforIDAM_DIEM == 0)
        {
            FREE_CARD(OPT_CARD3, "%10d%10lg%10d%10lg%10lg%10lg%10lg%10d", IDAM, DMGTYP, LCSDG, SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), LCREGD);
        }
        else // flagforIDAM_DIEM == 1
        {
            ASSIGN(IDAM_DIEM, -1 * IDAM_size, EXPORT);
            FREE_CARD(OPT_CARD3, "%10d%10lg%10d%10lg%10lg%10lg%10lg%10d", IDAM_DIEM, DMGTYP, LCSDG, SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), LCREGD);
        }
    }
    else // if (IOFLAG == 1)
    {
        FREE_CARD(OPT_CARD3, "%10d%10lg%10d%10lg%10lg%10lg%10lg%10d", _dummy_IDAM, DMGTYP, LCSDG, SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), LCREGD);

        if(OPT_CARD3 == TRUE && _dummy_IDAM >= 0)
        {
            ASSIGN(flagforIDAM_DIEM, 0, IMPORT);
            ASSIGN(IDAM, _dummy_IDAM, IMPORT);
        }
        else if (OPT_CARD3 == TRUE && _dummy_IDAM < 0)
        {
            ASSIGN(flagforIDAM_DIEM, 1, IMPORT);
            ASSIGN(IDAM_DIEM, _dummy_IDAM, IMPORT);

            ASSIGN(IDAM_size, -1 * IDAM_DIEM, IMPORT);
        }
    }

    if(OPT_CARD3 == TRUE)
    {
        if(flagforIDAM_DIEM == 0 && IDAM > 0)
        {
            // Additional card for IDAM > 0
            COMMENT("$   SIZFLG     REFSZ     NAHSV     LCSRS      SHRF     BIAXF");

            if(IOFLAG == 0)
            {
                CARD("%10lg%10lg%10lg%10d%10lg%10lg", SIZFLG, REFSZ, NAHSV, SCALAR_OR_OBJECT(OPT_LCSRS_scale, LCSRS, LCSRS), SHRF, BIAXF);
            }
            else // IMPORT... SCALAR_OR_OBJECT doesn't work in IMPORT with 2 curves... hack
            {
                CARD("%10lg%10lg%10lg%10d%10lg%10lg", SIZFLG, REFSZ, NAHSV, LCSRS_TEMP, SHRF, BIAXF);
        
                if(LCSRS_TEMP >= 0)
                {
                    ASSIGN(OPT_LCSRS_scale, 0, IMPORT);
                    ASSIGN(LCSRS, LCSRS_TEMP, IMPORT);
                }
                else
                {
                    ASSIGN(OPT_LCSRS_scale, 1, IMPORT);
                    ASSIGN(LCSRS, -1 * LCSRS_TEMP, IMPORT);
                }
            }
        }
        else if(flagforIDAM_DIEM == 1)
        {
            // Additional cards for IDAM < 0
            CARD_LIST(IDAM_size)
            {
                COMMENT("$    DITYP        P1        P2        P3");
                CARD("%10lg%10d%10lg%10lg", DITYP, P1, P2, P3);

                COMMENT("$    DETYP     DCTYP        Q1        Q2");
                CARD("%10lg%10lg%10lg%10lg", DETYP, DCTYP, SCALAR_OR_OBJECT(flagforQ1, Q1, Q1_CURVE), Q2);
            }
        }

        // Optional Card with additional failure criteria
        if(IOFLAG == 0 && OPT_CARD4 == TRUE)
        {
            COMMENT("$    LCFLD             EPSTHIN    ENGCRT    RADCRT");
        }
        FREE_CARD(OPT_CARD4, "%10d%10s%10lg%10lg%10lg", LCFLD, _BLANK_, EPSTHIN, ENGCRT, RADCRT);
    }
}

FORMAT(Keyword971_R11.2)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(LSD_TitleOpt == 0)
        {
            HEADER("*MAT_ADD_EROSION");
        }
        else
        {
            HEADER("*MAT_ADD_EROSION_TITLE");
        }
    }
    else //IMPORT
    {
        HEADER("*MAT_ADD_EROSION%-s", _opt);

        if(_opt == "")
        {
            ASSIGN(LSD_TitleOpt, 0, IMPORT);
        }
        else
        {
            ASSIGN(LSD_TitleOpt, 1, IMPORT);
        }
    }

    if(IOFLAG == 0)
    {
        COMMENT("$NAME");
        CARD("%-70s", _TITLE);
    }

    // Card 1
    COMMENT("$      MID      EXCL    MXPRES     MNEPS    EFFEPS    VOLEPS    NUMFIP       NCS");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg", MID, EXCL, MXPRES, MNEPS, EFFEPS, VOLEPS, NUMFIP, NCS);

    // Card 2
    COMMENT("$   MNPRES     SIGP1     SIGVM     MXEPS     EPSSH     SIGTH   IMPULSE    FAILTM");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg", MNPRES, SIGP1, SCALAR_OR_OBJECT(OPT_SIGVM_curve, SIGVM, SIGVM_CURVE), SCALAR_OR_OBJECT(OPT_MXEPS_curve, MXEPS, MXEPS_CURVE), EPSSH, SIGTH, IMPULSE, FAILTM);

    // Optional Card 3
    if(IOFLAG == 0)
    {
        if (OPT_CARD3 == TRUE)
        {
            COMMENT("$     IDAM    DMGTYP     LCSDG     ECRIT    DMGEXP     DCRIT    FADEXP    LCREGD");
        }

        if(flagforIDAM_DIEM == 0)
        {
            FREE_CARD(OPT_CARD3, "%10d%10lg%10d%10lg%10lg%10lg%10lg%10d", IDAM, DMGTYP, LCSDG, SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), LCREGD);
        }
        else // flagforIDAM_DIEM == 1
        {
            ASSIGN(IDAM_DIEM, -1 * IDAM_size, EXPORT);
            FREE_CARD(OPT_CARD3, "%10d%10lg%10d%10lg%10lg%10lg%10lg%10d", IDAM_DIEM, DMGTYP, LCSDG, SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), LCREGD);
        }
    }
    else // if (IOFLAG == 1)
    {
        FREE_CARD(OPT_CARD3, "%10d%10lg%10d%10lg%10lg%10lg%10lg%10d", _dummy_IDAM, DMGTYP, LCSDG, SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), LCREGD);

        if(OPT_CARD3 == TRUE && _dummy_IDAM >= 0)
        {
            ASSIGN(flagforIDAM_DIEM, 0, IMPORT);
            ASSIGN(IDAM, _dummy_IDAM, IMPORT);
        }
        else if (OPT_CARD3 == TRUE && _dummy_IDAM < 0)
        {
            ASSIGN(flagforIDAM_DIEM, 1, IMPORT);
            ASSIGN(IDAM_DIEM, _dummy_IDAM, IMPORT);

            ASSIGN(IDAM_size, -1 * IDAM_DIEM, IMPORT);
        }
    }

    if(OPT_CARD3 == TRUE)
    {
        if(flagforIDAM_DIEM == 0 && IDAM > 0)
        {
            // Additional card for IDAM > 0
            COMMENT("$   SIZFLG     REFSZ     NAHSV     LCSRS      SHRF     BIAXF");

            if(IOFLAG == 0)
            {
                CARD("%10lg%10lg%10lg%10d%10lg%10lg", SIZFLG, REFSZ, NAHSV, SCALAR_OR_OBJECT(OPT_LCSRS_scale, LCSRS, LCSRS), SHRF, BIAXF);
            }
            else // IMPORT... SCALAR_OR_OBJECT doesn't work in IMPORT with 2 curves... hack
            {
                CARD("%10lg%10lg%10lg%10d%10lg%10lg", SIZFLG, REFSZ, NAHSV, LCSRS_TEMP, SHRF, BIAXF);
        
                if(LCSRS_TEMP >= 0)
                {
                    ASSIGN(OPT_LCSRS_scale, 0, IMPORT);
                    ASSIGN(LCSRS, LCSRS_TEMP, IMPORT);
                }
                else
                {
                    ASSIGN(OPT_LCSRS_scale, 1, IMPORT);
                    ASSIGN(LCSRS, -1 * LCSRS_TEMP, IMPORT);
                }
            }
        }
        else if(flagforIDAM_DIEM == 1)
        {
            // Additional cards for IDAM < 0
            CARD_LIST(IDAM_size)
            {
                COMMENT("$    DITYP        P1        P2        P3");
                CARD("%10lg%10d%10lg%10lg", DITYP, P1, P2, P3);

                COMMENT("$    DETYP     DCTYP        Q1        Q2");
                CARD("%10lg%10lg%10lg%10lg", DETYP, DCTYP, SCALAR_OR_OBJECT(flagforQ1, Q1, Q1_CURVE), Q2);
            }
        }

        // Optional Card 4
        if(IOFLAG == 0 && OPT_CARD4 == TRUE)
        {
            COMMENT("$    LCFLD      NSFF   EPSTHIN    ENGCRT    RADCRT   LCEPS12   LCEPS13   LCEPSMX");
        }
        FREE_CARD(OPT_CARD4, "%10d%10lg%10lg%10lg%10lg%10d%10d%10d", LCFLD, NSFF, EPSTHIN, ENGCRT, RADCRT, LCEPS12, LCEPS13, LCEPSMX);

        // Optional Card 5
        if(IOFLAG == 0 && OPT_CARD5 == TRUE)
        {
            if(OPT_CARD4 == FALSE) // Card 5 exists, but Card 4 --> insert an empty line
            {
                COMMENT("$    LCFLD      NSFF   EPSTHIN    ENGCRT    RADCRT   LCEPS12   LCEPS13   LCEPSMX");
                CARD("%10s%10s%10s%10s%10s%10s%10s%10s", _BLANK_, _BLANK_, _BLANK_, _BLANK_, _BLANK_, _BLANK_, _BLANK_, _BLANK_);
            }
        }

        if(IOFLAG == 0 && OPT_CARD5 == TRUE)
        {
            COMMENT("$   DTEFLT               MXTMP     DTMIN");
        }
        FREE_CARD(OPT_CARD5, "%10lg%10s%10lg%10lg", DTEFLT, _BLANK_, MXTMP, DTMIN);
    }
}

FORMAT(Keyword971_R12.0)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(LSD_TitleOpt == 0)
        {
            HEADER("*MAT_ADD_EROSION");
        }
        else
        {
            HEADER("*MAT_ADD_EROSION_TITLE");
        }
    }
    else //IMPORT
    {
        HEADER("*MAT_ADD_EROSION%-s", _opt);

        if(_opt == "")
        {
            ASSIGN(LSD_TitleOpt, 0, IMPORT);
        }
        else
        {
            ASSIGN(LSD_TitleOpt, 1, IMPORT);
        }
    }

    if(IOFLAG == 0)
    {
        COMMENT("$NAME");
        CARD("%-70s", _TITLE);
    }

    // Card 1
    COMMENT("$      MID      EXCL    MXPRES     MNEPS    EFFEPS    VOLEPS    NUMFIP       NCS");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg", MID, EXCL, MXPRES, MNEPS, EFFEPS, VOLEPS, NUMFIP, NCS);

    // Card 2
    COMMENT("$   MNPRES     SIGP1     SIGVM     MXEPS     EPSSH     SIGTH   IMPULSE    FAILTM");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg", MNPRES, SIGP1, SCALAR_OR_OBJECT(OPT_SIGVM_curve, SIGVM, SIGVM_CURVE), SCALAR_OR_OBJECT(OPT_MXEPS_curve, MXEPS, MXEPS_CURVE), EPSSH, SIGTH, IMPULSE, FAILTM);

    // Optional Card 3
    if(IOFLAG == 0)
    {
        if (OPT_CARD3 == TRUE)
        {
            COMMENT("$     IDAM    DMGTYP     LCSDG     ECRIT    DMGEXP     DCRIT    FADEXP    LCREGD");
        }

        if(flagforIDAM_DIEM == 0)
        {
            FREE_CARD(OPT_CARD3, "%10d%10lg%10d%10lg%10lg%10lg%10lg%10d", IDAM, DMGTYP, LCSDG, SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), LCREGD);
        }
        else // flagforIDAM_DIEM == 1
        {
            ASSIGN(IDAM_DIEM, -1 * IDAM_size, EXPORT);
            FREE_CARD(OPT_CARD3, "%10d%10lg%10d%10lg%10lg%10lg%10lg%10d", IDAM_DIEM, DMGTYP, LCSDG, SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), LCREGD);
        }
    }
    else // if (IOFLAG == 1)
    {
        FREE_CARD(OPT_CARD3, "%10d%10lg%10d%10lg%10lg%10lg%10lg%10d", _dummy_IDAM, DMGTYP, LCSDG, SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), LCREGD);

        if(OPT_CARD3 == TRUE && _dummy_IDAM >= 0)
        {
            ASSIGN(flagforIDAM_DIEM, 0, IMPORT);
            ASSIGN(IDAM, _dummy_IDAM, IMPORT);
        }
        else if (OPT_CARD3 == TRUE && _dummy_IDAM < 0)
        {
            ASSIGN(flagforIDAM_DIEM, 1, IMPORT);
            ASSIGN(IDAM_DIEM, _dummy_IDAM, IMPORT);

            ASSIGN(IDAM_size, -1 * IDAM_DIEM, IMPORT);
        }
    }

    if(OPT_CARD3 == TRUE)
    {
        if(flagforIDAM_DIEM == 0 && IDAM > 0)
        {
            // Additional card for IDAM > 0
            COMMENT("$   SIZFLG     REFSZ     NAHSV     LCSRS      SHRF     BIAXF");

            if(IOFLAG == 0)
            {
                CARD("%10lg%10lg%10lg%10d%10lg%10lg", SIZFLG, REFSZ, NAHSV, SCALAR_OR_OBJECT(OPT_LCSRS_scale, LCSRS, LCSRS), SHRF, BIAXF);
            }
            else // IMPORT... SCALAR_OR_OBJECT doesn't work in IMPORT with 2 curves... hack
            {
                CARD("%10lg%10lg%10lg%10d%10lg%10lg", SIZFLG, REFSZ, NAHSV, LCSRS_TEMP, SHRF, BIAXF);
        
                if(LCSRS_TEMP >= 0)
                {
                    ASSIGN(OPT_LCSRS_scale, 0, IMPORT);
                    ASSIGN(LCSRS, LCSRS_TEMP, IMPORT);
                }
                else
                {
                    ASSIGN(OPT_LCSRS_scale, 1, IMPORT);
                    ASSIGN(LCSRS, -1 * LCSRS_TEMP, IMPORT);
                }
            }
        }
        else if(flagforIDAM_DIEM == 1)
        {
            // Additional cards for IDAM < 0
            CARD_LIST(IDAM_size)
            {
                COMMENT("$    DITYP        P1        P2        P3");
                CARD("%10lg%10d%10lg%10lg", DITYP, P1, P2, P3);

                COMMENT("$    DETYP     DCTYP        Q1        Q2");
                CARD("%10lg%10lg%10lg%10lg", DETYP, DCTYP, SCALAR_OR_OBJECT(flagforQ1, Q1, Q1_CURVE), Q2);
            }
        }

        // Optional Card 4
        if(IOFLAG == 0 && OPT_CARD4 == TRUE)
        {
            COMMENT("$    LCFLD      NSFF   EPSTHIN    ENGCRT    RADCRT   LCEPS12   LCEPS13   LCEPSMX");
        }
        FREE_CARD(OPT_CARD4, "%10d%10lg%10lg%10lg%10lg%10d%10d%10d", LCFLD, NSFF, EPSTHIN, ENGCRT, RADCRT, LCEPS12, LCEPS13, LCEPSMX);

        // Optional Card 5
        if(IOFLAG == 0 && OPT_CARD5 == TRUE)
        {
            if(OPT_CARD4 == FALSE) // Card 5 exists, but Card 4 --> insert an empty line
            {
                COMMENT("$    LCFLD      NSFF   EPSTHIN    ENGCRT    RADCRT   LCEPS12   LCEPS13   LCEPSMX");
                CARD("%10s%10s%10s%10s%10s%10s%10s%10s", _BLANK_, _BLANK_, _BLANK_, _BLANK_, _BLANK_, _BLANK_, _BLANK_, _BLANK_);
            }
        }

        if(IOFLAG == 0 && OPT_CARD5 == TRUE)
        {
            COMMENT("$   DTEFLT   VOLFRAC     MXTMP     DTMIN");
        }
        FREE_CARD(OPT_CARD5, "%10lg%10lg%10lg%10lg", DTEFLT, VOLFRAC, MXTMP, DTMIN);
    }
}

FORMAT(Keyword971_R13.0)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(LSD_TitleOpt == 0)
        {
            HEADER("*MAT_ADD_EROSION");
        }
        else
        {
            HEADER("*MAT_ADD_EROSION_TITLE");
        }
    }
    else //IMPORT
    {
        HEADER("*MAT_ADD_EROSION%-s", _opt);

        if(_opt == "")
        {
            ASSIGN(LSD_TitleOpt, 0, IMPORT);
        }
        else
        {
            ASSIGN(LSD_TitleOpt, 1, IMPORT);
        }
    }

    if(IOFLAG == 0)
    {
        COMMENT("$NAME");
        CARD("%-70s", _TITLE);
    }

    // Card 1
    COMMENT("$      MID      EXCL    MXPRES     MNEPS    EFFEPS    VOLEPS    NUMFIP       NCS");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg", MID, EXCL, MXPRES, MNEPS, EFFEPS, VOLEPS, NUMFIP, NCS);

    // Card 2
    COMMENT("$   MNPRES     SIGP1     SIGVM     MXEPS     EPSSH     SIGTH   IMPULSE    FAILTM");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg", MNPRES, SIGP1, SCALAR_OR_OBJECT(OPT_SIGVM_curve, SIGVM, SIGVM_CURVE), SCALAR_OR_OBJECT(OPT_MXEPS_curve, MXEPS, MXEPS_CURVE), EPSSH, SIGTH, IMPULSE, FAILTM);

    // Optional Card 3
    if(IOFLAG == 0)
    {
        if (OPT_CARD3 == TRUE)
        {
            COMMENT("$     IDAM    DMGTYP     LCSDG     ECRIT    DMGEXP     DCRIT    FADEXP    LCREGD");
        }

        if(flagforIDAM_DIEM == 0)
        {
            FREE_CARD(OPT_CARD3, "%10d%10lg%10d%10lg%10lg%10lg%10lg%10d", IDAM, DMGTYP, LCSDG, SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), LCREGD);
        }
        else // flagforIDAM_DIEM == 1
        {
            ASSIGN(IDAM_DIEM, -1 * IDAM_size, EXPORT);
            FREE_CARD(OPT_CARD3, "%10d%10lg%10d%10lg%10lg%10lg%10lg%10d", IDAM_DIEM, DMGTYP, LCSDG, SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), LCREGD);
        }
    }
    else // if (IOFLAG == 1)
    {
        FREE_CARD(OPT_CARD3, "%10d%10lg%10d%10lg%10lg%10lg%10lg%10d", _dummy_IDAM, DMGTYP, LCSDG, SCALAR_OR_OBJECT(OPT_ECRIT_curve, ECRIT, ECRIT_CURVE), DMGEXP, DCRIT, SCALAR_OR_OBJECT(OPT_FADEXP_curve, FADEXP, FADEXP_CURVE), LCREGD);

        if(OPT_CARD3 == TRUE && _dummy_IDAM >= 0)
        {
            ASSIGN(flagforIDAM_DIEM, 0, IMPORT);
            ASSIGN(IDAM, _dummy_IDAM, IMPORT);
        }
        else if (OPT_CARD3 == TRUE && _dummy_IDAM < 0)
        {
            ASSIGN(flagforIDAM_DIEM, 1, IMPORT);
            ASSIGN(IDAM_DIEM, _dummy_IDAM, IMPORT);

            ASSIGN(IDAM_size, -1 * IDAM_DIEM, IMPORT);
        }
    }

    if(OPT_CARD3 == TRUE)
    {
        if(flagforIDAM_DIEM == 0 && IDAM > 0)
        {
            // Additional card for IDAM > 0
            COMMENT("$   SIZFLG     REFSZ     NAHSV     LCSRS      SHRF     BIAXF");

            if(IOFLAG == 0)
            {
                CARD("%10lg%10lg%10lg%10d%10lg%10lg", SIZFLG, REFSZ, NAHSV, SCALAR_OR_OBJECT(OPT_LCSRS_scale, LCSRS, LCSRS), SHRF, BIAXF);
            }
            else // IMPORT... SCALAR_OR_OBJECT doesn't work in IMPORT with 2 curves... hack
            {
                CARD("%10lg%10lg%10lg%10d%10lg%10lg", SIZFLG, REFSZ, NAHSV, LCSRS_TEMP, SHRF, BIAXF);
        
                if(LCSRS_TEMP >= 0)
                {
                    ASSIGN(OPT_LCSRS_scale, 0, IMPORT);
                    ASSIGN(LCSRS, LCSRS_TEMP, IMPORT);
                }
                else
                {
                    ASSIGN(OPT_LCSRS_scale, 1, IMPORT);
                    ASSIGN(LCSRS, -1 * LCSRS_TEMP, IMPORT);
                }
            }
        }
        else if(flagforIDAM_DIEM == 1)
        {
            // Additional cards for IDAM < 0
            CARD_LIST(IDAM_size)
            {
                COMMENT("$    DITYP        P1        P2        P3");
                CARD("%10lg%10d%10lg%10lg", DITYP, P1, P2, P3);

                COMMENT("$    DETYP     DCTYP        Q1        Q2");
                CARD("%10lg%10lg%10lg%10lg", DETYP, DCTYP, SCALAR_OR_OBJECT(flagforQ1, Q1, Q1_CURVE), Q2);
            }
        }

        // Optional Card 4
        if(IOFLAG == 0 && OPT_CARD4 == TRUE)
        {
            COMMENT("$    LCFLD      NSFF   EPSTHIN    ENGCRT    RADCRT   LCEPS12   LCEPS13   LCEPSMX");
        }
        FREE_CARD(OPT_CARD4, "%10d%10lg%10lg%10lg%10lg%10d%10d%10d", LCFLD, NSFF, EPSTHIN, ENGCRT, RADCRT, LCEPS12, LCEPS13, LCEPSMX);

        // Optional Card 5
        if(IOFLAG == 0 && OPT_CARD5 == TRUE)
        {
            if(OPT_CARD4 == FALSE) // Card 5 exists, but Card 4 --> insert an empty line
            {
                COMMENT("$    LCFLD      NSFF   EPSTHIN    ENGCRT    RADCRT   LCEPS12   LCEPS13   LCEPSMX");
                CARD("%10s%10s%10s%10s%10s%10s%10s%10s", _BLANK_, _BLANK_, _BLANK_, _BLANK_, _BLANK_, _BLANK_, _BLANK_, _BLANK_);
            }
        }

        if(IOFLAG == 0 && OPT_CARD5 == TRUE)
        {
            COMMENT("$   DTEFLT   VOLFRAC     MXTMP     DTMIN");
        }
        FREE_CARD(OPT_CARD5, "%10lg%10lg%10lg%10lg", DTEFLT, VOLFRAC, MXTMP, DTMIN);
    }
}
