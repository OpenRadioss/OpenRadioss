//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
ATTRIBUTES(COMMON)
{
    KEYWORD_STR               = VALUE(STRING,"Solver Keyword");
    NUM_COMMENTS              = SIZE("NUM_COMMENTS");
    COMMENTS                  = ARRAY[NUM_COMMENTS](STRING,"Entity_Comments");
    CommentEnumField          = VALUE(INT,"User Comments");
    Mat_Name_OR_LawNo         = VALUE(INT,"");
    DUMMY                     = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    TITLE                     = VALUE(STRING,"");
    IO_FLAG                   = VALUE(INT, "");
    LAW_NO                    = VALUE(STRING, ""); 
    MAT_REFRHO_Option         = VALUE(INT,"RefRho_Option");
    Refer_Rho                 = VALUE(FLOAT,"Reference density (used in equation of state)"); 
    MAT_RHO                   = VALUE(FLOAT,"Initial Density");
    MAT_E                     = VALUE(FLOAT,"Young's Modulus");
    MAT_NU                    = VALUE(FLOAT,"Poisson Coeff.");
    MLAW106_FCT_ID1           = VALUE(FUNCT,"Function identifier defining Young's modulus vs. temperature when heating");
    MLAW106_FCT_ID2           = VALUE(FUNCT,"Function identifier defining Young's modulus vs. temperature when cooling");
    MLAW106_FCT_ID3           = VALUE(FUNCT,"Function identifier defining Poisson's ratio vs. temperature");
    MAT_SIGY                  = VALUE(FLOAT,"Yield stress");    
    MAT_BETA                  = VALUE(FLOAT,"Plastic hardening parameter");
    MAT_HARD                  = VALUE(FLOAT,"Plastic hardening exponent");
    MLAW106_EP_MAX            = VALUE(FLOAT,"Failure plastic strain");
    MLAW106_SIGMA_MAX         = VALUE(FLOAT,"Maximum stress");
    MAT_PC                    = VALUE(FLOAT,"Pressure cutoff");
    MLAW106_NMAX              = VALUE(INT,"Maximum number of iterations to compute plastic strains");
    MLAW106_TOL               = VALUE(FLOAT,"Tolerance");
    MAT_M                     = VALUE(FLOAT,"Temperature exponent");
    MAT_TMELT                 = VALUE(FLOAT,"Melting Temperature");
    MAT_TMAX                  = VALUE(FLOAT,  "For T>T_MAX, M=1 is Used");
    MAT_SPHEAT                = VALUE(FLOAT,"Specific heat per unit of volume");
    MLAW106_COEF              = VALUE(FLOAT,"Stress ratio in phase transformation");
    MLAW106_TC                = VALUE(FLOAT,"Transformation temperature");
    MLAW106_TR                = VALUE(FLOAT,"Room temperature");
    Heat_Inp_opt              = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT           = VALUE(SUBOBJECT, "");
    THERM_STRESS              = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS       = VALUE(SUBOBJECT, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR               = 9000;
    NUM_COMMENTS              = 5110;
    COMMENTS                  = 5109;
    CommentEnumField          = 7951;
    Mat_Name_OR_LawNo         = 4538;
    DUMMY                     = -1;
    LAW_NO                    = -1;
    IO_FLAG                   = -1;
    TITLE                     = -1;
    Heat_Inp_opt              = 4346;
    SUBGRP_HEAT_MAT           = -1;
    THERM_STRESS              = 4555;
    SUBGRP_THERM_STRESS       = -1;
    MAT_REFRHO_Option         =4285;
    Refer_Rho                 =4229;
    MAT_RHO                   =118;
    MAT_E                     =119;
    MAT_NU                    =120;
    MLAW106_FCT_ID1           =2780;
    MLAW106_FCT_ID2           =2781;
    MLAW106_FCT_ID3           =2782;
    MAT_SIGY                  =152;
    MAT_BETA                  =148;
    MAT_HARD                  =71;
    MLAW106_EP_MAX            =2783;
    MLAW106_SIGMA_MAX         =2784;
    MAT_PC                    =282;
    MLAW106_NMAX              =2785;
    MLAW106_TOL               =2786;
    MAT_M                     =314;
    MAT_TMELT                 =315;
    MAT_TMAX                  =316;
    MAT_SPHEAT                =318;
    MLAW106_COEF              =2787;
    MLAW106_TC                =2788;
    MLAW106_TR                =2789;
}
DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY                 = SCALAR(MAT_RHO);
    YOUNG_MODULUS                   = SCALAR(MAT_E);
    POISSON_RATIO                   = SCALAR(MAT_NU);
public:
    SOUND_SPEED                     = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                               = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                              = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID               = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}

CHECK
{
    MAT_NU                    >=0.0;
    MAT_NU                    <0.5;
    MAT_HARD                  <=1.0;
    MAT_PC                    <0.0;
}

DEFAULTS(COMMON)
{
    Mat_Name_OR_LawNo         = 0;
    MAT_HARD                  =1;
    MLAW106_EP_MAX            =10e30;
    MLAW106_SIGMA_MAX         =10e30;
    MAT_PC                    =-10e30;
    MLAW106_NMAX              =1;
    MLAW106_TOL               =10e-7;
    MAT_M                     =1;
    MAT_TMELT                 =10e30;
    MAT_TMAX                  =10e30;
    MLAW106_COEF              =1;
    MLAW106_TC                =10e30;
    MLAW106_TR                = 300;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }
    if( Mat_Name_OR_LawNo == 1)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/JCOOK_ALM/");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW106/");
    }
    FLAG(MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho);
    }
    SCALAR(MAT_RHO)     { DIMENSION="density";  }  
    SCALAR(MAT_E)       { DIMENSION="pressure";      }
    SCALAR(MAT_NU)      { DIMENSION="DIMENSIONLESS"; }
    DATA(MLAW106_FCT_ID1); 
    DATA(MLAW106_FCT_ID2); 
    DATA(MLAW106_FCT_ID3); 
    SCALAR(MAT_SIGY)    { DIMENSION="pressure";      }
    SCALAR(MAT_BETA)    { DIMENSION="pressure";      }
    SCALAR(MAT_HARD)    { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MLAW106_EP_MAX) { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MLAW106_SIGMA_MAX) { DIMENSION="pressure";      }
    SCALAR(MAT_PC)            { DIMENSION="pressure";      }
    SCALAR(MLAW106_NMAX)    { DIMENSION="pressure";      }   
    SCALAR(MLAW106_TOL)    { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_M)         { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_TMELT)      { DIMENSION="k"; }
    SCALAR(MAT_TMAX)       { DIMENSION="k"; }
    SCALAR(MAT_SPHEAT)     { DIMENSION="specific_heat_per_unit_volume";       }   
    SCALAR(MLAW106_COEF);
    SCALAR(MLAW106_TC);  
    SCALAR(MLAW106_TR)  { DIMENSION="k"; }
    
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0)
    {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}
    }

    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) 
    {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
}

FORMAT(radioss2019)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/4%s",LAW_NO);
        if(LAW_NO == "JCOOK" )
        {
            ASSIGN(Mat_Name_OR_LawNo,1);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 1)
    {
        HEADER("/MAT/JCOOK_ALM/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/LAW106/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                  E                  nu   fct_ID1   fct_ID2   fct_ID2");
    CARD("%20lg%20lg%10d%10d%10d",MAT_E,MAT_NU,MLAW106_FCT_ID1,MLAW106_FCT_ID2,MLAW106_FCT_ID3);
    COMMENT("#                  A                   B                   n              epsmax              sigmax");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_SIGY,MAT_BETA,MAT_HARD,MLAW106_EP_MAX,MLAW106_SIGMA_MAX);
    COMMENT("#               Pmin                Nmax                 Tol");
    CARD("%20lg          %10d%20lg",MAT_PC,MLAW106_NMAX,MLAW106_TOL);
    COMMENT("#                                                          m               Tmelt                Tmax");
    CARD("                                        %20lg%20lg%20lg",MAT_M,MAT_TMELT,MAT_TMAX);
    COMMENT("#             RHo_Cp                Coef                  Tc                  Tr");
    CARD("%20lg%20lg%20lg%20lg",MAT_SPHEAT,MLAW106_COEF,MLAW106_TC,MLAW106_TR); 
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
