//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// MATERIAL LAW102(DPRAG2)
ATTRIBUTES(COMMON) {

    KEYWORD_STR             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS            = SIZE("No. of Comment Lines");
    COMMENTS                = ARRAY[NUM_COMMENTS](STRING, "Entity_Comments");
    CommentEnumField        = VALUE(INT,"User Comments");
    MAT_RHO                 = VALUE(FLOAT,"Initial density");
    IFORM                   = VALUE(INT,"Choice of formulation flag");
    MAT_E                   = VALUE(FLOAT,"Young's modulus");
    MAT_NU                  = VALUE(FLOAT,"Poisson's ratio");
    MAT102_C                = VALUE(FLOAT,"Cohesion (Mohr-Coulomb parameter)");
    MAT102_PHI              = VALUE(FLOAT,"Internal friction angle (Mohr-Coulomb parameter) ");
    MAT102_AMAX             = VALUE(FLOAT,"Yield criteria limit");
    MAT102_PMIN             = VALUE(FLOAT,"Minimum pressure(usually negative or zero, positive value for tension)");
    Heat_Inp_opt            = VALUE(INT,"Heat");
    SUBGRP_HEAT_MAT         = VALUE(SUBOBJECT, "");
    THERM_STRESS            = VALUE(INT,"To add thermal expansion property for RADIOSS material");
    SUBGRP_THERM_STRESS     = VALUE(SUBOBJECT, "");
    EOS_Options             = VALUE(INT,"Eos Options");
    SUBGRP_EOS              = VALUE(SUBOBJECT, "");
    Mat_Name_OR_LawNo       = VALUE(INT,"");
    TITLE                   = VALUE(STRING,"");
    IO_FLAG                 = VALUE(INT, "");
    LAW_NO                  = VALUE(STRING, "");
}   

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR             = 9000;
    NUM_COMMENTS            = 5110;
    COMMENTS                = 5109;
    CommentEnumField        = 7951;
    MAT_RHO                 = 118;    
    IFORM                   = 4028;
    MAT_E                   = 119;
    MAT_NU                  = 120;
    MAT102_C                = 2765;
    MAT102_PHI              = 2766;
    MAT102_AMAX             = 2767;
    MAT102_PMIN             = 2768;    
    Heat_Inp_opt            = 4346;
    SUBGRP_HEAT_MAT         = -1;
    THERM_STRESS            = 4555;
    SUBGRP_THERM_STRESS     = -1;   
    EOS_Options             = 2901;
    SUBGRP_EOS              = -1;        
    Mat_Name_OR_LawNo       = 4538;
    TITLE                   = -1;
    IO_FLAG                 = -1;
    LAW_NO                  = -1;  
}
DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY = SCALAR(MAT_RHO);
    YOUNG_MODULUS   = SCALAR(MAT_E);
    POISSON_RATIO   = SCALAR(MAT_NU);
    SOUND_SPEED     = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
    private:
    G                       = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                      = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
    public:
    SOUND_SPEED_SOLID       = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}

CHECK(COMMON) {
    MAT_E            >= 0.0;
    MAT_RHO          >  0.0;
    MAT102_PMIN      <= 0.0;   
}
DEFAULTS(COMMON) {
    IFORM                       = 1;
    MAT102_AMAX                 = 1.0e30;
    MAT102_PMIN                 =-1.0e30;
    Mat_Name_OR_LawNo           = 0;
}
GUI(COMMON)    
{
    RADIO(CommentEnumField)   
    {

        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if( CommentEnumField == 2 )
    {
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }
    if( Mat_Name_OR_LawNo == 1)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/DPRAG2/");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW102/");
    }
    SCALAR(MAT_RHO)        { DIMENSION="density";}    
    RADIO(IFORM)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "1.Circumscribed criterion");
        ADD(2, "2.Middle criterion");
        ADD(3, "3.Inscribed criterion");
    }    
    SCALAR(MAT_E)           { DIMENSION="pressure";}
    SCALAR(MAT_NU)          { DIMENSION="DIMENSIONLESS";}
    SCALAR(MAT102_C)        { DIMENSION="pressure";}
    SCALAR(MAT102_PHI)      { DIMENSION="DIMENSIONLESS";}
    SCALAR(MAT102_AMAX)     { DIMENSION="square_of_pressure";}
    SCALAR(MAT102_PMIN)     { DIMENSION="pressure";}
    graphical FLAG(Heat_Inp_opt);
    if( Heat_Inp_opt!= 0 ) 
    {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }

    graphical FLAG(THERM_STRESS);
    if( THERM_STRESS!= 0 )
    {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }  
    RADIO(EOS_Options)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1,"NONE");
        ADD(2,"GRUNEISEN");
        ADD(3,"POLYNOMIAL");
        ADD(4,"PUFF");
        ADD(5,"SESAME");
        ADD(6,"TILLOTSON");
        ADD(7,"MURNAGHAN");
        ADD(8,"OSBORNE");
        ADD(9,"LSZK");
        ADD(10,"NOBLE-ABEL");
        ADD(11,"STIFF-GAS");
        ADD(12,"IDEAL-GAS");
        ADD(13,"LINEAR");
        ADD(14,"COMPACTION");
        ADD(15,"NASG");
    } 
    if( EOS_Options > 1 )
    {
        SUBOBJECT(SUBGRP_EOS) {SUBTYPES = (/SUBOBJECT/EOS);}
    }
}
//file format   
FORMAT(radioss2019) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "DPR" )
        {
            ASSIGN(Mat_Name_OR_LawNo,1);
        }
        else
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 1)
    {
        HEADER("/MAT/DPRAG2/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/LAW102/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    COMMENT("#              RHO_I");
    CARD("%20lg",MAT_RHO);
    COMMENT("#    IFORM");
    CARD("%10d",IFORM);
    COMMENT("#                  E                  nu");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    COMMENT("#                  C                 PHI               A_MAX");
    CARD("%20lg%20lg%20lg",MAT102_C,MAT102_PHI,MAT102_AMAX);
    COMMENT("#              P_MIN");        
    CARD("%20lg",MAT102_PMIN);    
    if( Heat_Inp_opt!=0 )
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }    
    if( Heat_Inp_opt!=0 && THERM_STRESS !=0 )
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }      
    if (EOS_Options > 1 )
    {
        SUBOBJECTS(SUBGRP_EOS,/SUBOBJECT/EOS);
    }       
}
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
