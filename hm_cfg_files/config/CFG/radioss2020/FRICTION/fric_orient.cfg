//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// /FRIC_ORIENT
//
ATTRIBUTES(COMMON) {

    // Datanames / Attributes for HM Usage
    IO_FLAG             = VALUE(INT, "Import/Export flag");
    _HMCOMMENTSFLAG     = VALUE(INT, "Write HM Comments");
    _HWCOLOR            = VALUE(INT, "Entity Color");
    n_orient            = SIZE("Number of Friction Orientations");
    Grpart_Part_Type    = ARRAY[n_orient](INT,"Grpart/Part type selector");

    // Datanames for Solver Fields
    TITLE               = VALUE(STRING, "TITLE");
    grpart_ID1          = ARRAY[n_orient](SETS, "Part group identifier /GRPART ") { SUBTYPES = (/SETS/GRPART) ; }
    part_ID1            = ARRAY[n_orient](COMPONENT, "Part identifier");
    skew_id             = ARRAY[n_orient](SYSTEM, "Skew identifier for reference vector");
    vx                  = ARRAY[n_orient](FLOAT,"X component for reference vector");
    vy                  = ARRAY[n_orient](FLOAT,"Y component for reference vector");
    vz                  = ARRAY[n_orient](FLOAT,"Z component for reference vector");
    phi                 = ARRAY[n_orient](FLOAT,"Angle");
    iorth               = ARRAY[n_orient](INT,"Orthotropic system formulation flag for reference vector");
    DUMMY               = VALUE(INT,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    IO_FLAG             = -1;
    _HMCOMMENTSFLAG     = -1;
    _HWCOLOR            = -1;
    DUMMY               = -1;
}

DEFAULTS(COMMON)
{
    vx                  = 1.0;
    vy                  = 1.0;
    vz                  = 1.0;
    iorth               = 0;
    Grpart_Part_Type    = 0;
    DUMMY               = 0;
}

GUI(COMMON) {

   // This card uses category implementation , ARRAY() implementation needs to be corrected
   SIZE(n_orient);
   ARRAY(n_orient,"")
   { 
        // Card 1
        RADIO(Grpart_Part_Type)
        {
            ADD(0,"0:GRPART_ID");
            ADD(1,"1:PART_ID");
        }

        // Following check mechanism would be handled after category support implementation
        /*if(Grpart_Part_Type == 0)
        {
            DATA(grpart_ID1); 
        }
        else
        {
            DATA(part_ID1);
        }*/

        // Card 2
        SCALAR(vx);
        SCALAR(vy);
        SCALAR(vz);
        DATA(skew_id);
        SCALAR(phi) { DIMENSION = "a"; }
        RADIO(iorth)
        {
            ADD(0,"0:The first axis of orthotropy is maintained at constant angle with respect to the X-axis of an orthonormal co-rotational element coordinate system");
            ADD(1,"1:The first orthotropy direction is constant with respect to a nonorthonormal system of deformed element");
        }
   }
}

//File format
FORMAT(radioss2020) { 
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    HEADER("/FRIC_ORIENT/%d", _ID_);
    CARD("%-100s", TITLE);
    ASSIGN(DUMMY, 0, EXPORT);
    if (IO_FLAG == 0)
    {
        CARD_LIST(n_orient)
        {
            COMMENT("#GRPART_ID   PART_ID");
            if(Grpart_Part_Type == 1)
            {
                CARD("%10d%10d",DUMMY,part_ID1);
            }
            else
            {
                CARD("%10d%10d",grpart_ID1,DUMMY);
            }
            COMMENT("#                 VX                  VY                  VZ   SKEW_ID                 PHI     IORTH");
            CARD("%20lg%20lg%20lg%10d%20lg%10d",vx,vy,vz,skew_id,phi,iorth);
        }
    }
    else
    {
        FREE_CARD_LIST(n_orient)
        { 
            CARD("%10d%10d",grpart_ID1,part_ID1);
            if(part_ID1 != NONE)
            {
                ASSIGN(Grpart_Part_Type, 1, IMPORT);
            }
            else
            {
                ASSIGN(Grpart_Part_Type, 0, IMPORT);
            }
            CARD("%20lg%20lg%20lg%10d%20lg%10d",vx,vy,vz,skew_id,phi,iorth);
        }
    }
} 