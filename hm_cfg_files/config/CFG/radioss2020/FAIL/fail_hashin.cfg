//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//FAIL : Hashin HC 9.0-SP1
//


ATTRIBUTES(COMMON){ 

    _HMCOMMENTSFLAG                     = VALUE(INT, "Write HM Comments");
    mat_id                              = VALUE(MAT,  "Material");

    Iform                               = VALUE(INT,"Formulation flag") ;
    Ifail_sh                            = VALUE( INT,"Shell failure flag") ;
    Ifail_so                            = VALUE( INT,"Flag for solid failure model") ;
    ratio                               = VALUE( FLOAT, "Ratio control parameter") ;
    I_Dam                               = VALUE(INT, "Damage calculation flag") ;
    Imod                                = VALUE(INT, "Relaxation time calculation") ;
    I_frwave                            = VALUE(INT, "Failure propagation flag between neighbor elements") ;    
    
    Sigma_1t                            = VALUE( FLOAT, "Longitudinal tensile strength") ;
    Sigma_2t                            = VALUE( FLOAT, "Transverse tensile strength") ;
    Sigma_3t                            = VALUE( FLOAT, "Through thickness tensile strength") ;
    Sigma_1c                            = VALUE( FLOAT, "Longitudinal compressive strength") ;
    Sigma_2c                            = VALUE( FLOAT, "Transverse compressive strength") ;
    
    Sigma_c                             = VALUE( FLOAT, "Crush strength") ;
    Sigma_12f                           = VALUE( FLOAT, "Fiber shear strength") ;
    Sigma_12m                           = VALUE( FLOAT, "Matrix shear strength 12") ;
    Sigma_23m                           = VALUE( FLOAT, "Matrix shear strength 23") ;
    Sigma_13m                           = VALUE( FLOAT, "Matrix shear strength 13") ;
    
    Phi                                 = VALUE( FLOAT, "Coulomb friction angle for matrix and delamination (<90°)") ;
    Sdel                                = VALUE( FLOAT, "Scale factor for delamination criteria") ;
    Tau_max                             = VALUE( FLOAT, "Dynamic time relaxation") ;
    epsp_min                            = VALUE( FLOAT, "Lowest Strain rate limit","Epsp_min") ;
    Epsilon_Dot_ref                     = VALUE( FLOAT, "Reference Strain rate") ;
    Tcut                                = VALUE( FLOAT, "Strain rate cutoff period") ;   
    Soft                                = VALUE( FLOAT, "Reduction factor applied to failure criteria when one of neighbor elements has already failed") ; 
    ID_CARD_EXIST                       = VALUE(BOOL, "Give an Id");
}


SKEYWORDS_IDENTIFIER(COMMON)
{
    _HMCOMMENTSFLAG=-1;
}

DEFINITIONS(COMMON) {
  SUPPORTING=(mat_id);
}

DEFAULTS(COMMON) {
    Iform            = 1;
    Ifail_sh         = 1;
    Ifail_so         = 1;
    ratio            = 1.0;
    I_Dam            = 1;
    Imod             = 0;
    I_frwave         = 1;
    Sigma_1t         = 10e30;
    Sigma_2t         = 10e30;
    Sigma_3t         = 10e30;
    Sigma_1c         = 10e30;
    Sigma_2c         = 10e30;
    Sigma_c          = 10e30;
    Sigma_12f        = 10e30;
    Sigma_12m        = 10e30;
    Sigma_23m        = 10e30;
    Sigma_13m        = 10e30;
    Phi              = 0.0;
    Sdel             = 1.0;
    Tau_max          = 10e30;
    Epsilon_Dot_ref  = 10e-30;
    Tcut             = 0.0;
    Soft             = 0.0;
}

GUI(COMMON){ 
    DATA(mat_id) {SUBTYPES=(/MAT/3D_COMP,/MAT/COMPSH,/MAT/COMPSO);}
    
    RADIO(Iform)
    {
    ADD(1,"1: Unidirection lamina model") ;
    ADD(2,"2: Fabric lamina model") ;
    }
    RADIO(Ifail_sh)
    {
    ADD(1,"1: Shell is deleted, if damage is reached for one layer") ;
    ADD(2,"2: Shell is deleted, if damage is reached for a number of failed > total number of layers*RATIO") ;
    ADD(3,"3: Shell is deleted, if all layers, except 1 have failed") ;
    }
    RADIO(Ifail_so)
    {
    ADD(1,"1: Solid is deleted, if damage is reached for one integration point of solid") ;
    ADD(2,"2: Solid is deleted, if damage is reached for a number of failed IP > total number of IP*RATIO") ;
    ADD(3,"3: Solid is deleted, if all integration points, except 1 have failed") ;
    }
    SCALAR(ratio)         { DIMENSION="DIMENSIONLESS"; }
    RADIO(I_Dam) {
      ADD(1,"1:Default, New method to calculate post-failure damage");
      ADD(2,"2:Old method (compatibility option)");
    }
    RADIO(Imod) {
    ADD(0,"0: Constant relaxation time") ;
    ADD(1,"1: Relaxation time is based on the timestep") ;
    }
    RADIO(I_frwave) {
    ADD(1,"1: Off, option is not used") ;
    ADD(2,"2: Element’s rupture criteria is reduced by factor Soft when any neighbor element fails") ;
    }
    SCALAR (epsp_min)         {DIMENSION="f";             }
    SCALAR (Sigma_1t)         {DIMENSION="pressure";      }
    SCALAR (Sigma_2t)         {DIMENSION="pressure";      }
    SCALAR (Sigma_3t)         {DIMENSION="pressure";      }
    SCALAR (Sigma_1c)         {DIMENSION="pressure";      }
    SCALAR (Sigma_2c)         {DIMENSION="pressure";      }
    
    SCALAR (Sigma_c)          {DIMENSION="pressure";      }
    SCALAR (Sigma_12f)        {DIMENSION="pressure";      }
    SCALAR (Sigma_12m)        {DIMENSION="pressure";      }
    SCALAR (Sigma_23m)        {DIMENSION="pressure";      }
    SCALAR (Sigma_13m)        {DIMENSION="pressure";      }
    
    SCALAR (Phi)              {DIMENSION="a";   }
    SCALAR (Sdel)             {DIMENSION="DIMENSIONLESS"; }
    SCALAR (Tau_max )         {DIMENSION="t";          }
    SCALAR (Epsilon_Dot_ref)  {DIMENSION="f";           }
    SCALAR (Tcut)             {DIMENSION="t";           }  
    if (I_frwave == 2)
    {
        SCALAR (Soft)             {DIMENSION="DIMENSIONLESS"; }
    }

    optional:
    FLAG(ID_CARD_EXIST);

}
FORMAT(radioss2020) {
    HEADER("/FAIL/HASHIN/%d",mat_id);
    
    
    COMMENT("#    IFORM  IFAIL_SH  IFAIL_SO               RATIO     I_DAM      IMOD  I_FRWAVE            EPSP_MIN");
    CARD("%10d%10d%10d%20lg%10d%10d%10d%20lg",Iform, Ifail_sh, Ifail_so, ratio,I_Dam,Imod,I_frwave,epsp_min);
    //
    COMMENT("#           SIGMA_1T            SIGMA_2T            SIGMA_3T            SIGMA_1C            SIGMA_2C");
    CARD("%20lg%20lg%20lg%20lg%20lg",Sigma_1t, Sigma_2t, Sigma_3t, Sigma_1c, Sigma_2c);
    COMMENT("#            SIGMA_C           SIGMA_12F           SIGMA_12M           SIGMA_23M           SIGMA_13M");
    CARD("%20lg%20lg%20lg%20lg%20lg",Sigma_c, Sigma_12f, Sigma_12m, Sigma_23m, Sigma_13m);

    COMMENT("#                PHI                SDEL                TMAX            EPSP_REF                TCUT");
    CARD("%20lg%20lg%20lg%20lg%20lg",Phi, Sdel, Tau_max,Epsilon_Dot_ref,Tcut);
    
    if (I_frwave == 2)
    {
        COMMENT("#               SOFT");
        CARD("%20lg",Soft);
    }

    
    if (ID_CARD_EXIST==TRUE)
    {
        COMMENT("#  FAIL_ID") ;
    }
    FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);
} 
/* As per Vicnent's comments removing the changes done in radioss2019 for HM-107636 and moving it to radioss2020.
FORMAT(radioss2019) {
    HEADER("/FAIL/HASHIN/%d",mat_id);
    COMMENT("#    IFORM  IFAIL_SH  IFAIL_SO               RATIO     I_DAM      IMOD  I_FRWAVE");
    CARD("%10d%10d%10d%20lg%10d%10d%10d",Iform, Ifail_sh, Ifail_so, ratio,I_Dam,Imod,I_frwave);
    COMMENT("#           SIGMA_1T            SIGMA_2T            SIGMA_3T            SIGMA_1C            SIGMA_2C");
    CARD("%20lg%20lg%20lg%20lg%20lg",Sigma_1t, Sigma_2t, Sigma_3t, Sigma_1c, Sigma_2c);
    COMMENT("#            SIGMA_C           SIGMA_12F           SIGMA_12M           SIGMA_23M           SIGMA_13M");
    CARD("%20lg%20lg%20lg%20lg%20lg",Sigma_c, Sigma_12f, Sigma_12m, Sigma_23m, Sigma_13m);
    COMMENT("#                PHI                SDEL                TMAX                                    TCUT");
    CARD("%20lg%20lg%20lg                    %20lg",Phi, Sdel, Tau_max,Tcut);
    if (I_frwave == 2)
    {
        COMMENT("#               SOFT");
        CARD("%20lg",Soft);
    }

    
    if (ID_CARD_EXIST==TRUE)
    {
        COMMENT("#  FAIL_ID") ;
    }
    FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);
} 
*/
FORMAT(radioss2017) {
    HEADER("/FAIL/HASHIN/%d",mat_id);
    
    COMMENT("#    IFORM  IFAIL_SH  IFAIL_SO               RATIO     I_DAM");
    CARD("%10d%10d%10d%20lg%10d",Iform, Ifail_sh, Ifail_so, ratio,I_Dam);
    COMMENT("#           SIGMA_1T            SIGMA_2T            SIGMA_3T            SIGMA_1C            SIGMA_2C");
    CARD("%20lg%20lg%20lg%20lg%20lg",Sigma_1t, Sigma_2t, Sigma_3t, Sigma_1c, Sigma_2c);
    COMMENT("#            SIGMA_C           SIGMA_12F           SIGMA_12M           SIGMA_23M           SIGMA_13M");
    CARD("%20lg%20lg%20lg%20lg%20lg",Sigma_c, Sigma_12f, Sigma_12m, Sigma_23m, Sigma_13m);
    COMMENT("#                PHI                SDEL             TAU_MAX");
    CARD("%20lg%20lg%20lg",Phi, Sdel, Tau_max);

    
    if (ID_CARD_EXIST==TRUE)
    {
        COMMENT("#  FAIL_ID") ;
    }
    FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);
} 


FORMAT(radioss130) {
    HEADER("/FAIL/HASHIN/%d",mat_id);
    
    COMMENT("#    IFORM  IFAIL_SH  IFAIL_SO               RATIO");
    CARD("%10d%10d%10d%20lg",Iform, Ifail_sh, Ifail_so, ratio);
    COMMENT("#           SIGMA_1T            SIGMA_2T            SIGMA_3T            SIGMA_1C            SIGMA_2C");
    CARD("%20lg%20lg%20lg%20lg%20lg",Sigma_1t, Sigma_2t, Sigma_3t, Sigma_1c, Sigma_2c);
    COMMENT("#            SIGMA_C           SIGMA_12F           SIGMA_12M           SIGMA_23M           SIGMA_13M");
    CARD("%20lg%20lg%20lg%20lg%20lg",Sigma_c, Sigma_12f, Sigma_12m, Sigma_23m, Sigma_13m);
    COMMENT("#                PHI                SDEL             TAU_MAX");
    CARD("%20lg%20lg%20lg",Phi, Sdel, Tau_max);

    if (ID_CARD_EXIST==TRUE)
    {
        COMMENT("#  FAIL_ID") ;
    }
    FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);
} 

FORMAT(radioss120) {
    HEADER("/FAIL/HASHIN/%d",mat_id);
    
    COMMENT("#    IFORM  IFAIL_SH  IFAIL_SO               RATIO");
    CARD("%10d%10d%10d%20lg",Iform, Ifail_sh, Ifail_so, ratio);
    COMMENT("#           SIGMA_1T            SIGMA_2T            SIGMA_3T            SIGMA_1C            SIGMA_2C");
    CARD("%20lg%20lg%20lg%20lg%20lg",Sigma_1t, Sigma_2t, Sigma_3t, Sigma_1c, Sigma_2c);
    COMMENT("#            SIGMA_C           SIGMA_12F           SIGMA_12M           SIGMA_23M           SIGMA_13M");
    CARD("%20lg%20lg%20lg%20lg%20lg",Sigma_c, Sigma_12f, Sigma_12m, Sigma_23m, Sigma_13m);
    COMMENT("#                PHI                SDEL             TAU_MAX");
    CARD("%20lg%20lg%20lg",Phi, Sdel, Tau_max);

} 

FORMAT(radioss90) {
    HEADER("/FAIL/HASHIN/%d",mat_id);
    
    COMMENT("#    IFORM  IFAIL_SH  IFAIL_SO");
    CARD("%10d%10d%10d",Iform, Ifail_sh, Ifail_so);
    COMMENT("#           SIGMA_1T            SIGMA_2T            SIGMA_3T            SIGMA_1C            SIGMA_2C");
    CARD("%20lg%20lg%20lg%20lg%20lg",Sigma_1t, Sigma_2t, Sigma_3t, Sigma_1c, Sigma_2c);
    COMMENT("#            SIGMA_C           SIGMA_12F           SIGMA_12M           SIGMA_23M           SIGMA_13M");
    CARD("%20lg%20lg%20lg%20lg%20lg",Sigma_c, Sigma_12f, Sigma_12m, Sigma_23m, Sigma_13m);
    COMMENT("#                PHI                SDEL             TAU_MAX");
    CARD("%20lg%20lg%20lg",Phi, Sdel, Tau_max);

}