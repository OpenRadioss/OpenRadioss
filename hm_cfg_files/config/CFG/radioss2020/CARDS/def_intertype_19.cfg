//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// CARDS - DefaultInterType19 - 8050 Radioss2019
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR     = VALUE(STRING, "Solver Keyword");
    IFORM           = VALUE(INT, "Friction penalty formulation type");
    INACTIV         = VALUE(INT, "Deactivation flag of stiffness in case of initial penetrations");
    Ibag            = VALUE(INT, "Airbag vent holes closure flag in case of contact");   
    Idel7           = VALUE(INT, "Node and segment deletion flag ");
    Igap            = VALUE(INT, "Gap/element option flag");
    Istf            = VALUE(INT, "Stiffness definition flag");
    Iedge_Type19    = VALUE(INT, "Edge to edge contact flag");
    IKREM           = VALUE(INT,"Flag for deactivating slave nodes if element size < gap value in case of self-impact contact.");
    ICOG            = VALUE(INT,"Flag for deactivating the secondary node, if the same contact pair (nodes) has been defined in /INTER/TYPE2.");
    Icurv           = VALUE(INT, "Slave gap with curvature");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR     = 9000;
    IFORM           = 4028;
    INACTIV         = 94;
    Ibag            = 6300;
    Idel7           = 6301;
    Igap            = 8045;
    Istf            = 8044;
    Iedge_Type19    = 2605;
    IKREM           = 8047;
    ICOG            = 8048;
    Icurv           = 4020;
}

DEFAULTS(COMMON)
{

    IFORM           = 1;
    INACTIV         = 1000;
    Ibag            = 2;
    Idel7           = 1000;
    Igap            = 1000;
    Istf            = 1000;
    Iedge_Type19    = 2;
    IKREM           = 1;
}

GUI(COMMON)
{

    ASSIGN(KEYWORD_STR, "/DEFAULT/INTER/TYPE19");
mandatory:
    RADIO(Istf)
    {
        ADD(1, "1: Interface stiffness is entered as Stfac.");
        ADD(2, "2: Interface stiffness is the average of the main and secondary stiffness.");
        ADD(3, "3: Interface stiffness is the maximum of the main and secondary stiffness.");
        ADD(4, "4: Interface stiffness is the minimum of the main and secondary stiffness.");
        ADD(5, "5: Interface stiffness is the main and secondary stiffness in series.");
        ADD(1000, "1000: For node to surface contact, interface stiffness is only based on master stiffnes.");
    }

    RADIO(Igap)
    {   
        ADD(1, "1: Gap varies accordingly to the characteristics of the impacted main surface and the impacting secondary node.");
        ADD(3, "3: Variable gap + gap scale correction of the computed gap + size of the mesh is taken into account to avoid initial penetrations.");
        ADD(4, "4: Node to surface contact uses variable gap + gap scale correction of the computed gap + deactivation of neighbor secondary nodes, if element size < gap.");
        ADD(1000, "1000: Gap is constant and equal to the minimum gap.");
    }

    RADIO(Iedge_Type19)
    {
        ADD(1, "1: Only external edges of defined surfaces are generated");
        ADD(2, "2: All segment edges of defined surfaces are generated");
    }

    RADIO(Ibag)
    {
        ADD(1, "1: closure");
        ADD(2, "no closure (default)");
    }   

    RADIO(Idel7)
    {
        ADD(1, "1: when all the elements (4-node shells, 3-node shells, solids) associated to one segment are deleted, the segment is removed from the master side of the interface. It is also removed in case of explicit deletion using RADIOSS Engine keyword /DEL in the Engine file.");
        ADD(2, "2: when a 4-node shell, a 3-node shell or a solid element is deleted, the corresponding segment is removed from the master side of the interface. It is also removed in case of explicit deletion using RADIOSS Engine keyword /DEL in the Engine file. Additionally, non-connected nodes are removed from the slave side of the interface.");
        ADD(1000, "1000: no deletion (default)");
        ADD(-1, "-1: same as =1, except non-connected nodes are not removed from the slave side of the interface.");
        ADD(-2, "-2: same as =2, except non-connected nodes are not removed from the slave side of the interface.");
    }

    RADIO(IKREM)
    {
        ADD(1, "1: no deactivation of slave nodes (default)");
        ADD(2, "2: deactivation of slave nodes");
    }
    RADIO(ICOG)
    {
        ADD(1, "1: (default for implicit solution) slave nodes in /INTER/TYPE2 tied contacts are removed from this contact");
        ADD(2, "2: (default for explicit solution) No change to slave nodes");
    }

    RADIO(INACTIV)
    {
        ADD(1, "1: deactivation of stiffness on nodes");
        ADD(2, "2: deactivation of stiffness on elements");
        ADD(3, "3: change node coordinates to avoid initial penetrations");
        ADD(5, "5: gap is variable with time and initial gap is computed as follows: gap0 = gap -P0, with P0 the initial penetration");
        ADD(6, "6: gap is variable with time but initial penetration is computed as follows (the node is slightly depenetrated): gap0 = gap - P0 - 5%(Gap - P0)");
        ADD(1000, "1000: no action (default)");
    }

    RADIO(IFORM)
    {
        ADD(1, "1: viscous (total) formulation (default)");
        ADD(2, "2: stiffness (incremental) formulation");        
    }
}

// File format
FORMAT(radioss2020)
{
    HEADER("/DEFAULT/INTER/TYPE19");
    BLANK;
    COMMENT("#                         Istf                Igap     Iedge      Ibag      Idel");
    CARD("                    %10d          %10d%10d%10d%10d", Istf, Igap, Iedge_Type19, Ibag, Idel7);
    BLANK;
    COMMENT("#                                                                                 Irem_gap   Irem_i2");
    CARD("                                                                                %10d%10d", IKREM, ICOG);
    BLANK;
    COMMENT("#                                 Inacti");
    CARD("                              %10d", INACTIV);
    COMMENT("#                                            Iform");
    CARD("                                        %10d", IFORM);
}

FORMAT(radioss2018)
{
    HEADER("/DEFAULT/INTER/TYPE19");
    BLANK;
    COMMENT("#                         Istf                Igap     Iedge      Ibag      Idel     Icurv");
    CARD("                    %10d          %10d%10d%10d%10d%10d", Istf, Igap, Iedge_Type19, Ibag, Idel7, Icurv);
    BLANK;
    BLANK;
    BLANK;
    COMMENT("#                                 Inacti");
    CARD("                              %10d", INACTIV);
    COMMENT("#                                            Iform");
    CARD("                                        %10d", IFORM);
    if(Idel7 == 3)
    {
        ASSIGN(Idel7,1000,IMPORT);
    }
}

FORMAT(radioss140)
{
    HEADER("/DEFAULT/INTER/TYPE19");
    BLANK;
    COMMENT("#                         Istf                Igap                Ibag      Idel     Icurv");
    CARD("                    %10d          %10d          %10d%10d%10d", Istf, Igap, Ibag, Idel7, Icurv);
    BLANK;
    BLANK;
    BLANK;
    COMMENT("#                                 Inacti");
    CARD("                              %10d", INACTIV);
    COMMENT("#                                            Iform");
    CARD("                                        %10d", IFORM);
    if(Idel7 == 3)
    {
        ASSIGN(Idel7,1000,IMPORT);
    }
}