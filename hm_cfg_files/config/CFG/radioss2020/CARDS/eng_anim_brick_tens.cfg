//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// ENG_ANIM_BRICK_TENS
//

ATTRIBUTES(COMMON)
{

    //INPUT ATTRIBUTES
    ENG_ANIM_BRICK_TENS_Type_STRESS         = VALUE(INT, "Stress tensor", "STRESS");
    ENG_ANIM_BRICK_TENS_Type_STRAIN         = VALUE(INT, "Strain tensor", "STRAIN");
    ENG_ANIM_BRICK_TENS_Type_DAMA           = VALUE(INT, "Cracks", "DAMA");
    ENG_ANIM_BRICK_TENS_Type_EPSDO          = VALUE(INT, "Strain rates", "EPSDO");
    ENG_ANIM_BRICK_TENS_Type_EPSP           = VALUE(INT, "Plastic strain tensor at integration points", "EPSP");
    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    IO_FLAG                                 = VALUE(INT, "IO_FLAG");
    _opt                                    = VALUE(STRING, "_opt");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES
    ENG_ANIM_BRICK_TENS_Type_STRESS         = 4922;
    ENG_ANIM_BRICK_TENS_Type_STRAIN         = 4923;
    ENG_ANIM_BRICK_TENS_Type_DAMA           = 4901;
    ENG_ANIM_BRICK_TENS_Type_EPSDO          = -1;
    ENG_ANIM_BRICK_TENS_Type_EPSP           = -1;
    //HM INTERNAL
    KEYWORD_STR                             = 9000;
    IO_FLAG                                 = -1;
    _opt                                    = -1;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "/ANIM/BRICK/TENS/");

    FLAG(ENG_ANIM_BRICK_TENS_Type_STRESS);
    if(ENG_ANIM_BRICK_TENS_Type_STRESS == 1)
    {
        ASSIGN(KEYWORD_STR, "/STRESS");
    }

    FLAG(ENG_ANIM_BRICK_TENS_Type_STRAIN);
    if(ENG_ANIM_BRICK_TENS_Type_STRAIN == 1)
    {
        ASSIGN(KEYWORD_STR, "/STRAIN");
    }

    FLAG(ENG_ANIM_BRICK_TENS_Type_DAMA);
    if(ENG_ANIM_BRICK_TENS_Type_DAMA == 1)
    {
        ASSIGN(KEYWORD_STR, "/DAMA");
    }

    FLAG(ENG_ANIM_BRICK_TENS_Type_EPSP);
    if(ENG_ANIM_BRICK_TENS_Type_EPSP == 1)
    {
        ASSIGN(KEYWORD_STR, "/EPSP");
    }
}
// File format
FORMAT(radioss41)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if(IO_FLAG == 0)
    {
        if(ENG_ANIM_BRICK_TENS_Type_STRESS == 1)
        {
            HEADER("/ANIM/BRICK/TENS/STRESS");
        }

        if(ENG_ANIM_BRICK_TENS_Type_STRAIN == 1)
        {
            HEADER("/ANIM/BRICK/TENS/STRAI");
        }

        if(ENG_ANIM_BRICK_TENS_Type_DAMA == 1)
        {
            HEADER("/ANIM/BRICK/TENS/DAMA");
        }

        if(ENG_ANIM_BRICK_TENS_Type_EPSDO == 1)
        {
            HEADER("/ANIM/BRICK/TENS/EPSDO");
        }
    }
    else //IMPORT
    {
        HEADER("/ANIM/BRICK/TENS%-s", _opt);

        ASSIGN(ENG_ANIM_BRICK_TENS_Type_STRESS,_FIND(_opt,"/STRESS"),IMPORT);
        ASSIGN(ENG_ANIM_BRICK_TENS_Type_STRAIN,_FIND(_opt,"/STRAI"),IMPORT);
        ASSIGN(ENG_ANIM_BRICK_TENS_Type_DAMA,  _FIND(_opt,"/DAMA"),  IMPORT);
        ASSIGN(ENG_ANIM_BRICK_TENS_Type_EPSDO, _FIND(_opt,"/EPSDO"), IMPORT);
    }
}

FORMAT(radioss44)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if(IO_FLAG == 0)
    {
        if(ENG_ANIM_BRICK_TENS_Type_STRESS == 1)
        {
            HEADER("/ANIM/BRICK/TENS/STRESS");
        }

        if(ENG_ANIM_BRICK_TENS_Type_STRAIN == 1)
        {
            HEADER("/ANIM/BRICK/TENS/STRAIN");
        }

        if(ENG_ANIM_BRICK_TENS_Type_DAMA == 1)
        {
            HEADER("/ANIM/BRICK/TENS/DAMA");
        }
    }
    else //IMPORT
    {
        HEADER("/ANIM/BRICK/TENS%-s", _opt);

        ASSIGN(ENG_ANIM_BRICK_TENS_Type_STRESS,_FIND(_opt,"/STRESS"),IMPORT);
        ASSIGN(ENG_ANIM_BRICK_TENS_Type_STRAIN,_FIND(_opt,"/STRAIN"),IMPORT);
        ASSIGN(ENG_ANIM_BRICK_TENS_Type_DAMA,  _FIND(_opt,"/DAMA"),  IMPORT);
    }
}

FORMAT(radioss2020)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if(IO_FLAG == 0)
    {
        if(ENG_ANIM_BRICK_TENS_Type_STRESS == 1)
        {
            HEADER("/ANIM/BRICK/TENS/STRESS");
        }

        if(ENG_ANIM_BRICK_TENS_Type_STRAIN == 1)
        {
            HEADER("/ANIM/BRICK/TENS/STRAIN");
        }

        if(ENG_ANIM_BRICK_TENS_Type_DAMA == 1)
        {
            HEADER("/ANIM/BRICK/TENS/DAMA");
        }

        if(ENG_ANIM_BRICK_TENS_Type_EPSP == 1)
        {
            HEADER("/ANIM/BRICK/TENS/EPSP");
        }
    }
    else //IMPORT
    {
        HEADER("/ANIM/BRICK/TENS%-s", _opt);

        ASSIGN(ENG_ANIM_BRICK_TENS_Type_STRESS,_FIND(_opt,"/STRESS"),IMPORT);
        ASSIGN(ENG_ANIM_BRICK_TENS_Type_STRAIN,_FIND(_opt,"/STRAIN"),IMPORT);
        ASSIGN(ENG_ANIM_BRICK_TENS_Type_DAMA,  _FIND(_opt,"/DAMA"),  IMPORT);
        ASSIGN(ENG_ANIM_BRICK_TENS_Type_EPSP,  _FIND(_opt,"/EPSP"),  IMPORT);
    }
}