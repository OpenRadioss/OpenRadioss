//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
ATTRIBUTES(COMMON)
{
    ALE_MUSCL_BETA          = VALUE(FLOAT,  "Compression coefficient for gradient reconstruction");
    MAT_Iflag               = VALUE(INT,  "Formulation flag for LAW151 second order");
    /* ================================ HM =================================*/
    IO_FLAG                 = VALUE(INT, "");
    KEYWORD_STR             = VALUE(STRING, "Solver Keyword");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR             = 9000;
    ALE_MUSCL_BETA          = 2627;
    MAT_Iflag               = 6002;
    IO_FLAG                 = -1;
}

DEFAULTS(COMMON)
{
    ALE_MUSCL_BETA          = 2.0;
    MAT_Iflag               = 0;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "/ALE/MUSCL");
    SEPARATOR("ALE_MUSCL");
    RADIO(ALE_MUSCL_BETA,"Compression coefficient for gradient reconstruction") 
    {
        ADD(0.0,"0.0: Classical Upwind Scheme(No Gradient Reconstruction)");
        ADD(1.0,"1.0: Exact Second Order Gradient Reconstruction");
        ADD(2.0,"2.0: Over Compressive Gradient Limiter");
    }
    RADIO(MAT_Iflag,"") 
    {
        ADD(0,"0: Full second order in time and space for all variables");
        ADD(1,"1: Exact Second Order Gradient Reconstruction");
    }
    SEPARATOR("");
}

FORMAT(radioss2020)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if(IO_FLAG == 0)
    {
        HEADER ("/ALE/MUSCL");
        COMMENT("#               BETA     IFLAG");
        CARD ("%20lg%10d",ALE_MUSCL_BETA,MAT_Iflag);
    }
    else
    {
        CARD ("%20lg%10d",ALE_MUSCL_BETA,MAT_Iflag);
    }
}

FORMAT(radioss2018)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);
    
    if(IO_FLAG == 0)
    {
        HEADER ("/ALE/MUSCL");
        COMMENT("#               BETA");
        CARD ("%20lg",ALE_MUSCL_BETA);
    }
    else
    {
        CARD ("%20lg",ALE_MUSCL_BETA);
    }
}