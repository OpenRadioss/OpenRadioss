//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
ATTRIBUTES(COMMON)
{
    /* ================================ HM =================================*/
    IO_FLAG                                 = VALUE(INT, "");
    Keyword                                 = VALUE(STRING,"");
    ALE_SPHGLO_CARD                         = VALUE(INT, "", "ALE_SPHGLO");
    ALE_Spring_CARD                         = VALUE(INT, "", "ALE_Grid_Spring");
    ALE_Standard_CARD                       = VALUE(INT, "", "ALE_Grid_Standard");
    ALE_UPWIND_CARD                         = VALUE(INT, "", "ALE_UPWIND");
    ALE_Zero_CARD                           = VALUE(INT, "", "ALE_Grid_Zero");
    ALE_Grid_Velocity_CARD                  = VALUE(INT, "", "ALE_Grid_Velocity");
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    ALE_CAA_CARD                            = VALUE(INT, "", "ALE_CAA");
    ALE_Displacement_Card                   = VALUE(INT, "", "ALE_Grid_Displacement");
    ALE_MUSCL_CARD                          = VALUE(INT, "", "ALE_MUSCL");
    ALE_SOLVER_CARD                         = VALUE(INT, "", "ALE_SOLVER");

    _HAS_HEADER                             = VALUE(BOOL,"");
    SUBGRP_ALE_GRID_DISP                    = VALUE(SUBOBJECT, "");
    SUBGRP_ALE_GRID_DONEA                   = VALUE(SUBOBJECT, "");
    SUBGRP_ALE_GRID_SPRING                  = VALUE(SUBOBJECT, "");
    SUBGRP_ALE_GRID_STANDARD                = VALUE(SUBOBJECT, "");
    SUBGRP_ALE_SPHGLO                       = VALUE(SUBOBJECT, "");
    SUBGRP_ALE_UPWIND                       = VALUE(SUBOBJECT, "");
    SUBGRP_ALE_MUSCL                        = VALUE(SUBOBJECT, "");
    SUBGRP_ALE_SOLVER                       = VALUE(SUBOBJECT, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    ALE_CAA_CARD                            = 4322;
    ALE_Displacement_Card                   = 4317;
    ALE_Grid_Velocity_CARD                  = 4318;
    ALE_SPHGLO_CARD                         = 4323;
    ALE_Spring_CARD                         = 4319;
    ALE_Standard_CARD                       = 4320;
    ALE_UPWIND_CARD                         = 4326;
    ALE_Zero_CARD                           = 4321;
    ALE_MUSCL_CARD                          = 2626;
    ALE_SOLVER_CARD                         = 2623;
    IO_FLAG                                 = -1;
    Keyword                                 = -1;
    SUBGRP_ALE_GRID_DISP                    = -1;
    SUBGRP_ALE_GRID_DONEA                   = -1;
    SUBGRP_ALE_GRID_SPRING                  = -1;
    SUBGRP_ALE_GRID_STANDARD                = -1;
    SUBGRP_ALE_SPHGLO                       = -1;
    SUBGRP_ALE_UPWIND                       = -1;
    SUBGRP_ALE_MUSCL                        = -1;
    SUBGRP_ALE_SOLVER                       = -1;
    _HAS_HEADER                             = -1;
}

DEFAULTS(COMMON)
{
    _HAS_HEADER                             = TRUE;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "ALE_CFD_SPH_CARD");
    FLAG(ALE_Displacement_Card);
    if( ALE_Displacement_Card != FALSE)
    {
        SUBOBJECT(SUBGRP_ALE_GRID_DISP){SUBTYPES = (/SUBOBJECT/ALE_GRID_DISP);}
    }
    FLAG(ALE_Grid_Velocity_CARD);
    if(ALE_Grid_Velocity_CARD != FALSE)
    {
        SUBOBJECT(SUBGRP_ALE_GRID_DONEA){SUBTYPES = (/SUBOBJECT/ALE_GRID_DONEA);}
    }
    FLAG(ALE_Spring_CARD);
    if(ALE_Spring_CARD != FALSE)
    {
        SUBOBJECT(SUBGRP_ALE_GRID_SPRING){SUBTYPES = (/SUBOBJECT/ALE_GRID_SPRING);}
    }
    FLAG(ALE_Standard_CARD);
    if(ALE_Standard_CARD != FALSE)
    {
        SUBOBJECT(SUBGRP_ALE_GRID_STANDARD){SUBTYPES = (/SUBOBJECT/ALE_GRID_STANDARD);}
    }
    FLAG(ALE_Zero_CARD);
    if(ALE_Zero_CARD != FALSE)
    {
        ASSIGN(KEYWORD_STR, "/ALE/GRID/ZERO");
    }
    FLAG(ALE_CAA_CARD);
    if(ALE_CAA_CARD != FALSE)
    {
        ASSIGN(KEYWORD_STR, "/CAA");
    }
    FLAG(ALE_SPHGLO_CARD);
    if(ALE_SPHGLO_CARD != FALSE)
    {
        SUBOBJECT(SUBGRP_ALE_SPHGLO){SUBTYPES = (/SUBOBJECT/ALE_SPHGLO);}
    }
    FLAG(ALE_UPWIND_CARD);
    if(ALE_UPWIND_CARD != FALSE)
    {
        SUBOBJECT(SUBGRP_ALE_UPWIND){SUBTYPES = (/SUBOBJECT/ALE_UPWIND);}
    }
    FLAG(ALE_SOLVER_CARD);
    if(ALE_SOLVER_CARD != FALSE)
    {
        SUBOBJECT(SUBGRP_ALE_SOLVER){SUBTYPES = (/SUBOBJECT/ALE_SOLVER);}
    }
    FLAG(ALE_MUSCL_CARD);
    if(ALE_MUSCL_CARD != FALSE)
    {
        SUBOBJECT(SUBGRP_ALE_MUSCL){SUBTYPES = (/SUBOBJECT/ALE_MUSCL);}
    }
}

FORMAT(radioss2020)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if(IO_FLAG == 1)
    {
        HEADER("%100s",Keyword);
        if(Keyword == "/ALE/GRID/DISP")
        {
            ASSIGN(ALE_Displacement_Card,1,IMPORT);
        }
        else if(Keyword == "/ALE/GRID/DONEA")
        {
            ASSIGN(ALE_Grid_Velocity_CARD,1,IMPORT);
        }
        else if(Keyword == "/ALE/GRID/SPRING")
        {
            ASSIGN(ALE_Spring_CARD,1,IMPORT);
        }
        else if(Keyword == "/ALE/GRID/STANDARD")
        {
            ASSIGN(ALE_Standard_CARD,1,IMPORT);
        }
        else if(Keyword == "/ALE/GRID/ZERO")
        {
            ASSIGN(ALE_Zero_CARD,1,IMPORT);
        }
        else if(Keyword == "/CAA")
        {
            ASSIGN(ALE_CAA_CARD,1,IMPORT);
        }
        else if(Keyword == "/SPHGLO")
        {
            ASSIGN(ALE_SPHGLO_CARD,1,IMPORT);
        }
        else if(Keyword == "/UPWIND")
        {
            ASSIGN(ALE_UPWIND_CARD,1,IMPORT);
        }
        else if(Keyword == "/ALE/SOLVER")
        {
            ASSIGN(ALE_SOLVER_CARD,1,IMPORT);
        }
        else if(Keyword == "/ALE/SOLVER/FINT")
        {
            ASSIGN(ALE_SOLVER_CARD,1,IMPORT);
        }
        else if(Keyword == "/ALE/MUSCL")
        {
            ASSIGN(ALE_MUSCL_CARD,1,IMPORT);
        }
    }

    if(ALE_Displacement_Card != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_GRID_DISP, /SUBOBJECT/ALE_GRID_DISP);
    }
    if(ALE_Grid_Velocity_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_GRID_DONEA, /SUBOBJECT/ALE_GRID_DONEA);
    }
    if(ALE_Spring_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_GRID_SPRING, /SUBOBJECT/ALE_GRID_SPRING);
    }
    if(ALE_Standard_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_GRID_STANDARD, /SUBOBJECT/ALE_GRID_STANDARD);
    }
    if(ALE_Zero_CARD != FALSE)
    {
        HEADER ("/ALE/GRID/ZERO");
    }
    if(ALE_CAA_CARD != FALSE)
    {
        HEADER ("/CAA");
    }
    if(ALE_SPHGLO_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_SPHGLO, /SUBOBJECT/ALE_SPHGLO);
    }
    if(ALE_UPWIND_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_UPWIND, /SUBOBJECT/ALE_UPWIND);
    }
    if(ALE_SOLVER_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_SOLVER, /SUBOBJECT/ALE_SOLVER);
    }
    if(ALE_MUSCL_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_MUSCL, /SUBOBJECT/ALE_MUSCL);
    }
}



FORMAT(radioss2018)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if(IO_FLAG == 1)
    {
        HEADER("%100s",Keyword);
        if(Keyword == "/ALE/GRID/DISP")
        {
            ASSIGN(ALE_Displacement_Card,1,IMPORT);
        }
        else if(Keyword == "/ALE/GRID/DONEA")
        {
            ASSIGN(ALE_Grid_Velocity_CARD,1,IMPORT);
        }
        else if(Keyword == "/ALE/GRID/SPRING")
        {
            ASSIGN(ALE_Spring_CARD,1,IMPORT);
        }
        else if(Keyword == "/ALE/GRID/STANDARD")
        {
            ASSIGN(ALE_Standard_CARD,1,IMPORT);
        }
        else if(Keyword == "/ALE/GRID/ZERO")
        {
            ASSIGN(ALE_Zero_CARD,1,IMPORT);
        }
        else if(Keyword == "/CAA")
        {
            ASSIGN(ALE_CAA_CARD,1,IMPORT);
        }
        else if(Keyword == "/SPHGLO")
        {
            ASSIGN(ALE_SPHGLO_CARD,1,IMPORT);
        }
        else if(Keyword == "/UPWIND")
        {
            ASSIGN(ALE_UPWIND_CARD,1,IMPORT);
        }
        else if(Keyword == "/ALE/SOLVER")
        {
            ASSIGN(ALE_SOLVER_CARD,1,IMPORT);
        }
        else if(Keyword == "/ALE/MUSCL")
        {
            ASSIGN(ALE_MUSCL_CARD,1,IMPORT);
        }
    }

    if(ALE_Displacement_Card != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_GRID_DISP, /SUBOBJECT/ALE_GRID_DISP);
    }
    if(ALE_Grid_Velocity_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_GRID_DONEA, /SUBOBJECT/ALE_GRID_DONEA);
    }
    if(ALE_Spring_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_GRID_SPRING, /SUBOBJECT/ALE_GRID_SPRING);
    }
    if(ALE_Standard_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_GRID_STANDARD, /SUBOBJECT/ALE_GRID_STANDARD);
    }
    if(ALE_Zero_CARD != FALSE)
    {
        HEADER ("/ALE/GRID/ZERO");
    }
    if(ALE_CAA_CARD != FALSE)
    {
        HEADER ("/CAA");
    }
    if(ALE_SPHGLO_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_SPHGLO, /SUBOBJECT/ALE_SPHGLO);
    }
    if(ALE_UPWIND_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_UPWIND, /SUBOBJECT/ALE_UPWIND);
    }
    if(ALE_SOLVER_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_SOLVER, /SUBOBJECT/ALE_SOLVER);
    }
    if(ALE_MUSCL_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_MUSCL, /SUBOBJECT/ALE_MUSCL);
    }
}


FORMAT(radioss140)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if(IO_FLAG == 1)
    {
        HEADER("%100s",Keyword);
        if(Keyword == "/ALE/GRID/DISP")
        {
            ASSIGN(ALE_Displacement_Card,1,IMPORT);
        }
        else if(Keyword == "/ALE/GRID/DONEA")
        {
            ASSIGN(ALE_Grid_Velocity_CARD,1,IMPORT);
        }
        else if(Keyword == "/ALE/GRID/SPRING")
        {
            ASSIGN(ALE_Spring_CARD,1,IMPORT);
        }
        else if(Keyword == "/ALE/GRID/STANDARD")
        {
            ASSIGN(ALE_Standard_CARD,1,IMPORT);
        }
        else if(Keyword == "/ALE/GRID/ZERO")
        {
            ASSIGN(ALE_Zero_CARD,1,IMPORT);
        }
        else if(Keyword == "/CAA")
        {
            ASSIGN(ALE_CAA_CARD,1,IMPORT);
        }
        else if(Keyword == "/SPHGLO")
        {
            ASSIGN(ALE_SPHGLO_CARD,1,IMPORT);
        }
        else if(Keyword == "/UPWIND")
        {
            ASSIGN(ALE_UPWIND_CARD,1,IMPORT);
        }
    }
    
    if(ALE_Displacement_Card != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_GRID_DISP, /SUBOBJECT/ALE_GRID_DISP);
    }
    if(ALE_Grid_Velocity_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_GRID_DONEA, /SUBOBJECT/ALE_GRID_DONEA);
    }
    if(ALE_Spring_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_GRID_SPRING, /SUBOBJECT/ALE_GRID_SPRING);
    }
    if(ALE_Standard_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_GRID_STANDARD, /SUBOBJECT/ALE_GRID_STANDARD);
    }
    if(ALE_Zero_CARD != FALSE)
    {
        HEADER ("/ALE/GRID/ZERO");
    }
    if(ALE_CAA_CARD != FALSE)
    {
        HEADER ("/CAA");
    }
    if(ALE_SPHGLO_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_SPHGLO, /SUBOBJECT/ALE_SPHGLO);
    }
    if(ALE_UPWIND_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_UPWIND, /SUBOBJECT/ALE_UPWIND);
    }
}

FORMAT(radioss110)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);
    
    /* Added separately for HEADER workaround*/
    if(IO_FLAG == 1)
    {
        HEADER("%100s",Keyword);
        if(Keyword == "/ALE/DISP")
        {
            ASSIGN(ALE_Displacement_Card,1,IMPORT);
        }
        else if(Keyword == "/ALE/DONEA")
        {
            ASSIGN(ALE_Grid_Velocity_CARD,1,IMPORT);
        }
        else if(Keyword == "/ALE/SPRING")
        {
            ASSIGN(ALE_Spring_CARD,1,IMPORT);
        }
        else if(Keyword == "/ALE/STANDARD")
        {
            ASSIGN(ALE_Standard_CARD,1,IMPORT);
        }
        else if(Keyword == "/ALE/ZERO")
        {
            ASSIGN(ALE_Zero_CARD,1,IMPORT);
        }
        else if(Keyword == "/CAA")
        {
            ASSIGN(ALE_CAA_CARD,1,IMPORT);
        }
        else if(Keyword == "/SPHGLO")
        {
            ASSIGN(ALE_SPHGLO_CARD,1,IMPORT);
        }
        else if(Keyword == "/UPWIND")
        {
            ASSIGN(ALE_UPWIND_CARD,1,IMPORT);
        }
    }

    if(ALE_Displacement_Card != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_GRID_DISP, /SUBOBJECT/ALE_GRID_DISP);
    }
    if(ALE_Grid_Velocity_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_GRID_DONEA, /SUBOBJECT/ALE_GRID_DONEA);
    }
    if(ALE_Spring_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_GRID_SPRING, /SUBOBJECT/ALE_GRID_SPRING);
    }
    if(ALE_Standard_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_GRID_STANDARD, /SUBOBJECT/ALE_GRID_STANDARD);
    }
    if(ALE_Zero_CARD != FALSE)
    {
        HEADER ("/ALE/ZERO");
    }
    if(ALE_CAA_CARD != FALSE)
    {
        HEADER ("/CAA");
    }
    if(ALE_SPHGLO_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_SPHGLO, /SUBOBJECT/ALE_SPHGLO);
    }
    if(ALE_UPWIND_CARD != FALSE)
    {
        SUBOBJECTS(SUBGRP_ALE_UPWIND, /SUBOBJECT/ALE_UPWIND);
    }
}
