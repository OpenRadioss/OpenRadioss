//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Property SPR_MAT Type23

ATTRIBUTES(COMMON)
{
    Imass                                   = VALUE(INT,    "Input type for the spring mass calculation");
    AREA                                    = VALUE(FLOAT,  " Cross section area of the spring element");
    Volume                                  = VALUE(FLOAT,  " Volume of the spring element");
    INERTIA                                 = VALUE(FLOAT,  " Spring Inertia");
    SKEW_CSID                               = VALUE(SYSTEM, " Skew System Identifier");
    ISENSOR                                 = VALUE(SENSOR, " Sensor Identifier") {SUBTYPES=(/SENSOR/SENSOR_DEFINE);}
    ISFLAG                                  = VALUE(INT,    " Sensor Flag");
   
    //Attributes for HM usage
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Prop_Name_OR_Type                       = VALUE(INT, "");
    IO_FLAG                                 = VALUE(INT, "");
    TYPE_NO                                 = VALUE(STRING, "");
    TITLE                                   = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    NUM_COMMENTS                            = 5110;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;
    Imass                                   = 7057;
    AREA                                    = 718;
    Volume                                  = 7059;
    INERTIA                                 = 5156;
    SKEW_CSID                               = 412;
    ISENSOR                                 = 5157;
    ISFLAG                                  = 5158;
    Prop_Name_OR_Type                       = 4537;
    TITLE                                   =   -1;
    TYPE_NO                                 =   -1;
    IO_FLAG                                 =   -1;
}

CHECK(COMMON)
{
}

DEFAULTS(COMMON)
{
    Imass                                  = 2;
    Prop_Name_OR_Type                        = 0;

}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
       ENUM_VALUE_FLAG=TRUE;
       ADD(1, "1:Hide in Menu/Export");
       ADD(2, "2:Show in Menu/Export");
       ADD(3, "3:Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Prop_Name_OR_Type == 2)
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TYPE23/");

    }
    else
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/SPR_MAT/");
    }
    RADIO(Imass)
    {
        ADD(0, "0:set to 2");
        ADD(1, "1:The mass is calculated using the Area, length of the spring element, and density");
        ADD(2, "2:(DEFAULT) The mass is calculated using the Volume and density");
    }
    if( Imass ==1 )
    {
        SCALAR(AREA)      { DIMENSION="area"; } 
    }
    else if( Imass ==2 )
    {
        SCALAR(Volume)    { DIMENSION="volume"; } 
    }
    SCALAR(INERTIA)       { DIMENSION="massmi"; }
    DATA(SKEW_CSID);
    DATA(ISENSOR) {SUBTYPES=(/SENSOR/SENSOR_DEFINE);}
    RADIO(ISFLAG)
    {
        ADD(0, "0:spring element activated when sens_ID activates and cannot be deactivated");
        ADD(1, "1:spring element deactivated when sens_ID activates and cannot be activated");
        ADD(2, "2:spring elements are activated, or deactivated state matches the sensor state and can switch back and forth");
    }    
}

// File format for Radioss 2020
FORMAT(radioss2020) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE23/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SPR_MAT/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#    Imass                   Volume/Area             Inertia   skew_ID   sens_ID    Isflag");
    CARD("%10d          %20lg%20lg%10d%10d%10d",Imass,CELL_COND( if(Imass == 1) AREA; else Volume; ),INERTIA,SKEW_CSID,ISENSOR,ISFLAG);
}

