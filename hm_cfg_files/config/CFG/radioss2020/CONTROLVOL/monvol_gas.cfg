//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- monvol_gas.cfg ---

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES
    entityiddisplayed                       = VALUE(SETS,             "External surface identifier")  { SUBTYPES = (/SETS/SURF_IDPOOL) ; }
    Iequil                                  = VALUE(INT,              "Initial thermodynamic equilibrium flag.");

    Scal_T                                  = VALUE(FLOAT,            "Abscissa scale factor for time based functions");
    Scal_P                                  = VALUE(FLOAT,            "Abscissa scale factor for pressure based functions");
    Scal_S                                  = VALUE(FLOAT,            "Abscissa scale factor for area based functions");
    Scal_A                                  = VALUE(FLOAT,            "Abscissa scale factor for angle based functions");
    Scal_D                                  = VALUE(FLOAT,            "Abscissa scale factor for distance based functions");

    GAMMA                                   = VALUE(FLOAT,            "Ratio of specific heat");
    MU                                      = VALUE(FLOAT,            "Volumetric viscosity");
    Trelax                                  = VALUE(FLOAT,            "Relaxation time");
    TINI                                    = VALUE(FLOAT,            "Initial temperature");
    Rho_Gas                                 = VALUE(FLOAT,            "Initial mass density inside the monitored volume");

    PEXT                                    = VALUE(FLOAT,            "External pressure");
    PINI                                    = VALUE(FLOAT,            "Initial pressure");
    PMAX                                    = VALUE(FLOAT,            "Maximum pressure");
    VINC                                    = VALUE(FLOAT,            "Incompressible volume");
    MINI                                    = VALUE(FLOAT,            "Initial (gas) mass");

    //Number of vent holes membranes
    ABG_Nvent                               = SIZE(                   "Number of vent holes");

    //Vent holes membranes
    SVENT_SETSURFID                         = ARRAY[ABG_Nvent](SETS,  "Vent holes area surface identifier")  { SUBTYPES = (/SETS/SURF_IDPOOL) ; }
    ABG_Avent                               = ARRAY[ABG_Nvent](FLOAT, "Scale factor on vent hole area or vent hole area");
    PGAS_Idel                               = ARRAY[ABG_Nvent](INT,   "Area of surface surf_IDv is considered for venting or area of deleted elements inside surface surf_IDv is considered for venting");

    ABG_Tvent                               = ARRAY[ABG_Nvent](FLOAT, "Start time for venting");
    ABG_dPdef                               = ARRAY[ABG_Nvent](FLOAT, "Pressure difference to open vent hole membrane");
    ABG_dtPdef                              = ARRAY[ABG_Nvent](FLOAT, "Minimum duration pressure exceeds Pdef to open vent hole membrane");

    ABG_Iport                               = ARRAY[ABG_Nvent](FUNCT, "Porosity vs time function identifier");
    ABG_Iporp                               = ARRAY[ABG_Nvent](FUNCT, "Porosity vs pressure function identifier");
    ABG_IporA                               = ARRAY[ABG_Nvent](FUNCT, "Porosity vs area function identifier");
    Fport                                   = ARRAY[ABG_Nvent](FLOAT, "Scale factor for fct_IDt");
    Fporp                                   = ARRAY[ABG_Nvent](FLOAT, "Scale factor for fct_IDP");
    FporA                                   = ARRAY[ABG_Nvent](FLOAT, "Scale factor for fct_IDA");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING,           "Solver Keyword");

    TITLE                                   = VALUE(STRING,           "Monitored volume title");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES
    Iequil                                  = 5398;

    Scal_T                                  = 4103;
    Scal_P                                  = 4104;
    Scal_S                                  = 4105;
    Scal_A                                  = 4106;
    Scal_D                                  = 4107;

    GAMMA                                   = 5172;
    MU                                      = 8143;
    Trelax                                  = 1707;
    TINI                                    = 1463;
    Rho_Gas                                 = 736;

    PEXT                                    = 8144;
    PINI                                    = 8145;
    PMAX                                    = 8146;
    VINC                                    = 8147;
    MINI                                    = 4109;

    //Number of vent holes membranes
    ABG_Nvent                               = 928;

    //Vent holes membranes
    SVENT_SETSURFID                         = 4682;
    ABG_Avent                               = 930;
    PGAS_Idel                               = 2134;

    ABG_Tvent                               = 932;
    ABG_dPdef                               = 933;
    ABG_dtPdef                              = 934;

    ABG_Iport                               = 935;
    ABG_Iporp                               = 936;
    ABG_IporA                               = 937;
    Fport                                   = 4110;
    Fporp                                   = 4111;
    FporA                                   = 4112;

    //HM INTERNAL
    KEYWORD_STR                             = 9000;

    TITLE                                   = -1;
}

CHECK(COMMON)
{
    GAMMA                                   > 0;
}

DEFAULTS(COMMON)
{
    Scal_T                                  = 1.0;
    Scal_P                                  = 1.0;
    Scal_S                                  = 1.0;
    Scal_A                                  = 1.0;
    Scal_D                                  = 1.0;
    MU                                      = 0.01;
    TINI                                    = 295000;
    PMAX                                    = 1.0e30;
    ABG_Nvent                               = 0;
    ABG_Avent                               = 1.0;
    ABG_Tvent                               = 0.0;
    Fport                                   = 1.0;
    Fporp                                   = 1.0;
    FporA                                   = 1.0;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "/MONVOL/GAS/");

    DATA(entityiddisplayed, "surf_IDex");
    RADIO(Iequil, "I_equi")
    {
        ADD(0, "0: (Default) Constant volume is used to calculate the mass needed to fill the volume");
        ADD(1, "1: Increasing volume assumes a constant temperature when calculating the mass needed to fill the volume");
        ADD(2, "2: Increasing volume uses an adiabatic process (gas temperature can increase) when calculating the mass needed to fill the volume");
    }
    SCALAR(Scal_T,  "Ascalet")              { DIMENSION = "t" ; }
    SCALAR(Scal_P,  "AscaleP")              { DIMENSION = "pressure" ; }
    SCALAR(Scal_S,  "AscaleS")              { DIMENSION = "area" ; }
    SCALAR(Scal_A,  "AscaleA")              { DIMENSION = "a" ; }
    SCALAR(Scal_D,  "AscaleD")              { DIMENSION = "l" ; }
    SCALAR(GAMMA,   "Gamma")                { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(MU,      "MU")                   { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(Trelax,  "Trelax")               { DIMENSION = "t" ; }
    SCALAR(TINI,    "Tini")                 { DIMENSION = "k" ; }
    SCALAR(Rho_Gas, "Rho_ini")              { DIMENSION = "density" ; }
    SCALAR(PEXT,    "Pext")                 { DIMENSION = "pressure" ; }
    SCALAR(PINI,    "Pini")                 { DIMENSION = "pressure" ; }
    SCALAR(PMAX,    "Pmax")                 { DIMENSION = "pressure" ; }
    SCALAR(VINC,    "Vinc")                 { DIMENSION = "volume" ; }
    SCALAR(MINI,    "Mini")                 { DIMENSION = "m" ; }
    SIZE(ABG_Nvent, "Nvent");
    SEPARATOR("Vent Hole");
        ARRAY(ABG_Nvent,"Nvent")
        {
            DATA(SVENT_SETSURFID, "surf_IDv");
            SCALAR(ABG_Avent,     "Avent")      { if(SVENT_SETSURFID == NONE) { TITLE = "Vent hole area" ; DIMENSION = "area" ; } else if(SVENT_SETSURFID != NONE) { TITLE = "Scale factor on vent hole area" ; DIMENSION = "DIMENSIONLESS" ; }}
            RADIO(PGAS_Idel,      "Ideleted")
            {
                ADD(0, "0: Area of surface surf_IDv is considered for venting");
                ADD(1, "1: Area of deleted elements inside surface surf_IDv is considered for venting");
            }
            SCALAR(ABG_Tvent, "Tvent")      { DIMENSION = "t" ; }
            SCALAR(ABG_dPdef, "DeltaPdef")  { DIMENSION = "pressure" ; }
            SCALAR(ABG_dtPdef,"DeltatPdef") { DIMENSION = "t" ; }
            DATA(ABG_Iport,   "fct_IDt");
            DATA(ABG_Iporp,   "fct_IDP");
            DATA(ABG_IporA,   "fct_IDA");
            SCALAR(Fport,     "Fscalet")    { DIMENSION = "DIMENSIONLESS" ; }
            SCALAR(Fporp,     "FscaleP")    { DIMENSION = "DIMENSIONLESS" ; }
            SCALAR(FporA,     "FscaleA")    { DIMENSION = "DIMENSIONLESS" ; }
        }
    SEPARATOR();
}

// File format
FORMAT(radioss44)
{
    HEADER("/MONVOL/GAS/%-d", _ID_);
    CARD("%-80s", TITLE);

    COMMENT("#   Isur");
    CARD("%8d", entityiddisplayed);

    COMMENT("#          Gamma              Mu");
    CARD("%16lg%16lg", GAMMA, MU);

    COMMENT("#           Pext            Pini            Pmax            Vinc            Mini");
    CARD("%16lg%16lg%16lg%16lg%16lg", PEXT, PINI, PMAX, VINC, MINI);

    COMMENT("#  Nvent");
    CARD("%8d", ABG_Nvent);

    if(ABG_Nvent > 0)
    {
        CARD_LIST(ABG_Nvent)
        {
            COMMENT("#  Svent           Avent                Ideleted");
            CARD("%8d%16lg%16s%8d", SVENT_SETSURFID, ABG_Avent, _BLANK_, PGAS_Idel);

            COMMENT("#          Tvent       DeltaPdef      DeltatPdef");
            CARD("%16lg%16lg%16lg", ABG_Tvent, ABG_dPdef, ABG_dtPdef);

            COMMENT("#  Iport   IporP   IporA");
            CARD("%8d%8d%8d", ABG_Iport, ABG_Iporp, ABG_IporA);
        }
    }
}

FORMAT(radioss51)
{
    HEADER("/MONVOL/GAS/%-d", _ID_);
    CARD("%-100s", TITLE);

    COMMENT("#     Isur");
    CARD("%10d", entityiddisplayed);

    COMMENT("#             Scal_T              Scal_P              Scal_S              Scal_A              Scal_D");
    CARD("%20lg%20lg%20lg%20lg%20lg", Scal_T, Scal_P, Scal_S, Scal_A, Scal_D);

    COMMENT("#              Gamma                  Mu");
    CARD("%20lg%20lg", GAMMA, MU);

    COMMENT("#               Pext                Pini                Pmax                Vinc                Mini");
    CARD("%20lg%20lg%20lg%20lg%20lg", PEXT, PINI, PMAX, VINC, MINI);

    COMMENT("#      Nvent");
    CARD("%10d", ABG_Nvent);

    if(ABG_Nvent > 0)
    {
        CARD_LIST(ABG_Nvent)
        {
            COMMENT("#    Svent               Avent                      Ideleted");
            CARD("%10d%20lg%20s%10d", SVENT_SETSURFID, ABG_Avent, _BLANK_, PGAS_Idel);

            COMMENT("#              Tvent           DeltaPdef          DeltatPdef");
            CARD("%20lg%20lg%20lg", ABG_Tvent, ABG_dPdef, ABG_dtPdef);

            COMMENT("#    Iport     IporP     IporA                         Fport               Fporp               Fpora");
            CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport, ABG_Iporp, ABG_IporA, _BLANK_, Fport, Fporp, FporA);
        }
    }
}

FORMAT(radioss90)
{
    HEADER("/MONVOL/GAS/%-d", _ID_);
    CARD("%-100s", TITLE);

    COMMENT("#surf_IDex");
    CARD("%10d", entityiddisplayed);

    COMMENT("#            Ascalet             AscaleP             AscaleS             AscaleA             AscaleD");
    CARD("%20lg%20lg%20lg%20lg%20lg", Scal_T, Scal_P, Scal_S, Scal_A, Scal_D);

    COMMENT("#              Gamma                  Mu");
    CARD("%20lg%20lg", GAMMA, MU);

    COMMENT("#               Pext                Pini                Pmax                Vinc                Mini");
    CARD("%20lg%20lg%20lg%20lg%20lg", PEXT, PINI, PMAX, VINC, MINI);

    COMMENT("#    Nvent");
    CARD("%10d", ABG_Nvent);

    if(ABG_Nvent > 0)
    {
        CARD_LIST(ABG_Nvent)
        {
            COMMENT("# surf_IDv               Avent                      Ideleted");
            CARD("%10d%20lg%20s%10d", SVENT_SETSURFID, ABG_Avent, _BLANK_, PGAS_Idel);

            COMMENT("#              Tvent           DeltaPdef          DeltatPdef");
            CARD("%20lg%20lg%20lg", ABG_Tvent, ABG_dPdef, ABG_dtPdef);

            COMMENT("#  fct_IDt   fct_IDP   fct_IDA                    Fscaleport          FscaleporP          FscaleporA");
            CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport, ABG_Iporp, ABG_IporA, _BLANK_, Fport, Fporp, FporA);
        }
    }
}

FORMAT(radioss110)
{
    HEADER("/MONVOL/GAS/%-d", _ID_);
    CARD("%-100s", TITLE);

    COMMENT("#surf_IDex");
    CARD("%10d", entityiddisplayed);

    COMMENT("#            Ascalet             AscaleP             AscaleS             AscaleA             AscaleD");
    CARD("%20lg%20lg%20lg%20lg%20lg", Scal_T, Scal_P, Scal_S, Scal_A, Scal_D);

    COMMENT("#              Gamma                  Mu");
    CARD("%20lg%20lg", GAMMA, MU);

    COMMENT("#               Pext                Pini                Pmax                Vinc                Mini");
    CARD("%20lg%20lg%20lg%20lg%20lg", PEXT, PINI, PMAX, VINC, MINI);

    COMMENT("#    Nvent");
    CARD("%10d", ABG_Nvent);

    if(ABG_Nvent > 0)
    {
        CARD_LIST(ABG_Nvent)
        {
            COMMENT("# surf_IDv               Avent                      Ideleted");
            CARD("%10d%20lg%20s%10d", SVENT_SETSURFID, ABG_Avent, _BLANK_, PGAS_Idel);

            COMMENT("#              Tvent           DeltaPdef          DeltatPdef");
            CARD("%20lg%20lg%20lg", ABG_Tvent, ABG_dPdef, ABG_dtPdef);

            COMMENT("#  fct_IDt   fct_IDP   fct_IDA                       Fscalet             FscaleP             FscaleA");
            CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport, ABG_Iporp, ABG_IporA, _BLANK_, Fport, Fporp, FporA);
        }
    }
}

FORMAT(radioss2017)
{
    HEADER("/MONVOL/GAS/%-d", _ID_);
    CARD("%-100s", TITLE);

    COMMENT("#surf_IDex");
    CARD("%10d", entityiddisplayed);

    COMMENT("#            Ascalet             AscaleP             AscaleS             AscaleA             AscaleD");
    CARD("%20lg%20lg%20lg%20lg%20lg", Scal_T, Scal_P, Scal_S, Scal_A, Scal_D);

    COMMENT("#              Gamma                  Mu              Trelax");
    CARD("%20lg%20lg%20lg", GAMMA, MU, Trelax);

    COMMENT("#               Pext                Pini                Pmax                Vinc                Mini");
    CARD("%20lg%20lg%20lg%20lg%20lg", PEXT, PINI, PMAX, VINC, MINI);

    COMMENT("#    Nvent");
    CARD("%10d", ABG_Nvent);

    if(ABG_Nvent > 0)
    {
        CARD_LIST(ABG_Nvent)
        {
            COMMENT("# surf_IDv               Avent                      Ideleted");
            CARD("%10d%20lg%20s%10d", SVENT_SETSURFID, ABG_Avent, _BLANK_, PGAS_Idel);

            COMMENT("#              Tvent           DeltaPdef          DeltatPdef");
            CARD("%20lg%20lg%20lg", ABG_Tvent, ABG_dPdef, ABG_dtPdef);

            COMMENT("#  fct_IDt   fct_IDP   fct_IDA                       Fscalet             FscaleP             FscaleA");
            CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport, ABG_Iporp, ABG_IporA, _BLANK_, Fport, Fporp, FporA);
        }
    }
}

FORMAT(radioss2020)
{
    HEADER("/MONVOL/GAS/%-d", _ID_);
    CARD("%-100s", TITLE);

    COMMENT("#surf_IDex    I_equi");
    CARD("%10d%10d", entityiddisplayed, Iequil);

    COMMENT("#            Ascalet             AscaleP             AscaleS             AscaleA             AscaleD");
    CARD("%20lg%20lg%20lg%20lg%20lg", Scal_T, Scal_P, Scal_S, Scal_A, Scal_D);

    COMMENT("#              Gamma                  Mu              Trelax                Tini                Rhoi");
    CARD("%20lg%20lg%20lg%20lg%20lg", GAMMA, MU, Trelax, TINI, Rho_Gas);

    COMMENT("#               Pext                Pini                Pmax                Vinc                Mini");
    CARD("%20lg%20lg%20lg%20lg%20lg", PEXT, PINI, PMAX, VINC, MINI);

    COMMENT("#    Nvent");
    CARD("%10d", ABG_Nvent);

    if(ABG_Nvent > 0)
    {
        CARD_LIST(ABG_Nvent)
        {
            COMMENT("# surf_IDv               Avent                      Ideleted");
            CARD("%10d%20lg%20s%10d", SVENT_SETSURFID, ABG_Avent, _BLANK_, PGAS_Idel);

            COMMENT("#              Tvent           DeltaPdef          DeltatPdef");
            CARD("%20lg%20lg%20lg", ABG_Tvent, ABG_dPdef, ABG_dtPdef);

            COMMENT("#  fct_IDt   fct_IDP   fct_IDA                       Fscalet             FscaleP             FscaleA");
            CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport, ABG_Iporp, ABG_IporA, _BLANK_, Fport, Fporp, FporA);
        }
    }
}