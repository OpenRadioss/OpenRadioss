//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//  TABLE_1.cfg
ATTRIBUTES(COMMON)
{
  //INPUT ATTRIBUTES
  TITLE                                             = VALUE(STRING, "Table title");
  ORDER                                             = VALUE(INT,"Total number of entries");
  curverows                                         = SIZE("No of rows");
  tableentityarray                                  = ARRAY[curverows](CURVE, "", "fct_ID");
  Fscale_array                                      = ARRAY[curverows](FLOAT, "Value of entry in all dimension", "Scale_y");
  entry_size                                        = SIZE( "Total Number of entries in all dimension");
  table2darray                                      = ARRAY[entry_size](FLOAT, "Value of entry in all dimension");
  
  //HM INTERNAL
  KEYWORD_STR                                       = VALUE(STRING, "Solver Keyword");
  IO_FLAG                                           = VALUE(INT, "io flag");
  A                                                 = ARRAY[curverows](FLOAT,"");
  B                                                 = ARRAY[curverows](FLOAT,"");
  C                                                 = ARRAY[curverows](FLOAT,"");
  tempVal                                           = VALUE(FLOAT,"");
  tmpPos                                            = VALUE(INT,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
  //INPUT ATTRIBUTES
  ORDER                                             = 4335;
  curverows                                         = 4747;
  tableentityarray                                  = 4745;
  Fscale_array                                      = 3051;
  table2darray                                      = 4744;
  entry_size                                        = -1;

  //HM INTERNAL
  KEYWORD_STR                                       = 9000;
  IO_FLAG                                           = -1;
  A                                                 =-1;
  B                                                 =-1;
  C                                                 =-1;
  tempVal                                           =-1;
  tmpPos                                            = 1;
}

CHECK(COMMON)
{
  ORDER                                               <= 4;
}

GUI(COMMON)
{
  ASSIGN(KEYWORD_STR,"/TABLE/1");

}

///  TODO:
///  perform CELL_LIST as params (line 72)
///  format FLOAT padded to left with 20 char
//   check all size value for existence DONE
FORMAT(radioss110)
{
    ASSIGN(IO_FLAG,1,IMPORT);
    ASSIGN(IO_FLAG,2,EXPORT);

    //---------------------- Processing for HM -----------------------------------
    //----------------------------------------------------------------------------

    HEADER("/TABLE/1/%d",_ID_);
    CARD("%-100s",TITLE);
    COMMENT("#dimension");
    CARD("%10d",ORDER);
    if(ORDER == 1)
    {
        FREE_CARD_LIST(curverows)
        {
            COMMENT("#                  X                   Y");
            CARD("%20lg", CELL_PAIR(table2darray));
        }
        ASSIGN(entry_size, curverows*2,IMPORT);
    }
    if(ORDER == 2 )
    {
        FREE_CARD_LIST(curverows)
        {
            COMMENT("#  fct_ID1                             A                                                    Scale_y1");
            CARD("%10d%10s%20lg%40s%20lg",tableentityarray,_BLANK_,A,_BLANK_,Fscale_array);
        }
    }
    else if(ORDER == 3)
    {
        ASSIGN(tmpPos, 0, EXPORT);
        FREE_CARD_LIST(curverows)
        {
            COMMENT("#  fct_ID1                             A                   B                                Scale_y1");
            CARD("%10d%10s%20lg%20lg%20s%20lg",tableentityarray,_BLANK_,A,B,_BLANK_,Fscale_array);
        }
    }
    else if(ORDER == 4)
    {
        FREE_CARD_LIST(curverows)
        {
            COMMENT("#  fct_ID1                             A                   B                   C            Scale_y1");
            CARD("%10d%10s%20lg%20lg%20lg%20lg",tableentityarray,_BLANK_,A,B,C,Fscale_array);
        }
    }


    /*---------------------- Processing for HM IMPORT-----------------------------------*/
    /*if(IO_FLAG == 1 && ORDER == 2)
    {
        ASSIGN(tmpPos, 0, IMPORT);
        ASSIGN(table2darray,_ATTRIB(A,tmpPos,curverows),IMPORT);
    }
    else if(IO_FLAG == 1 && ORDER == 3)
    {
        ASSIGN(tmpPos, 0, IMPORT);
        CARD_LIST(curverows)
        {
            ASSIGN(tempVal, _ATTRIB(A,tmpPos),IMPORT);
            ASSIGN(table2darray,_PUSH(tempVal),IMPORT);
            ASSIGN(tempVal, _ATTRIB(B,tmpPos),IMPORT);
            ASSIGN(table2darray,_PUSH(tempVal),IMPORT);
            ASSIGN(tmpPos, tmpPos+1, IMPORT);
        }
    }
    else if(IO_FLAG == 1 && ORDER == 4)
    {
        ASSIGN(tmpPos, 0, IMPORT);
        CARD_LIST(curverows)
        {
            ASSIGN(tempVal, _ATTRIB(A,tmpPos),IMPORT);
            ASSIGN(table2darray,_PUSH(tempVal),IMPORT);
            ASSIGN(tempVal, _ATTRIB(B,tmpPos),IMPORT);
            ASSIGN(table2darray,_PUSH(tempVal),IMPORT);
            ASSIGN(tempVal, _ATTRIB(C,tmpPos),IMPORT);
            ASSIGN(table2darray,_PUSH(tempVal),IMPORT);
            ASSIGN(tmpPos, tmpPos+1, IMPORT);
        }
    }*/
    /*----------------------------------------------------------------------------*/
}
