//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//  TABLE_0.cfg
ATTRIBUTES(COMMON)
{
  //INPUT ATTRIBUTES
  TITLE                                               = VALUE(STRING, "Table title");
  ORDER                                               = SIZE(" 	Total number of entries");
  Ifirst                                              = ARRAY[ORDER]( INT, "Number of values for entry");
  entry_size                                          = SIZE( "Total Number of entries in all dimension");
  table2darray                                        = ARRAY[entry_size](FLOAT, "Value of entry in all dimension");
  table_size                                          = SIZE( "table size");
  ENG_FUNCT_yValues                                   = ARRAY[table_size](FLOAT, "table");

  //HM INTERNAL
  KEYWORD_STR                                         = VALUE(STRING, "Solver Keyword");
  IO_FLAG                                             = VALUE(STRING, "io flag");
  N1                                                  = SIZE( "");
  N2                                                  = SIZE( "");
  N3                                                  = SIZE( "");
  N4                                                  = SIZE( "");
  tmpPos                                              = VALUE(INT,"");
  temparray2d_N1                                      = ARRAY[N1](FLOAT, "");
  temparray2d_N2                                      = ARRAY[N2](FLOAT, "");
  temparray2d_N3                                      = ARRAY[N3](FLOAT, "");
  temparray2d_N4                                      = ARRAY[N4](FLOAT, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
  //INPUT ATTRIBUTES
  ORDER                                             = 4335;
  Ifirst                                            = 812;
  table2darray                                      = 4744;
  entry_size                                        = -1;
  ENG_FUNCT_yValues                                 = 7124;
  table_size                                        =-1;

  //HM INTERNAL
  KEYWORD_STR                                       = 9000;
  IO_FLAG                                           = -1;
  N4                                                =-1;
  N1                                                =-1;
  N2                                                =-1;
  N3                                                =-1;
  tmpPos                                            = 1;
  temparray2d_N1                                    =-1;
  temparray2d_N2                                    =-1;
  temparray2d_N3                                    =-1;
  temparray2d_N4                                    =-1;


}

CHECK(COMMON)
{
  ORDER                                               <= 4;
}

GUI(COMMON)
{
  ASSIGN(KEYWORD_STR,"/TABLE/0");
}

///  TODO:
///  perform CELL_LIST as params (line 72)
///  format FLOAT padded to left with 20 char
//   check all size value for existence DONE
FORMAT(radioss110)
{
    HEADER("/TABLE/0/%d",_ID_);
    CARD("%-100s",TITLE);
    if(ORDER > 0)
    {
        ASSIGN(tmpPos,0,EXPORT);
        ASSIGN(N1, _ATTRIB(Ifirst, tmpPos), EXPORT);
    }
    if(ORDER > 1)
    {
        ASSIGN(tmpPos,1,EXPORT);
        ASSIGN(N2, _ATTRIB(Ifirst, tmpPos), EXPORT);
    }
    if(ORDER > 2)
    {
        ASSIGN(tmpPos,2,EXPORT);
        ASSIGN(N3, _ATTRIB(Ifirst, tmpPos), EXPORT);
    }
    if(ORDER > 3)
    {
        ASSIGN(tmpPos,3,EXPORT);
        ASSIGN(N4, _ATTRIB(Ifirst, tmpPos), EXPORT);
    }

    //CARD("%10d%10d",ORDER,CELL_LIST(ORDER,Ifirst));
    COMMENT("#dimension        n1        n2        n3        n4");
    CARD("%10d%10d%10d%10d%10d",ORDER,N1,N2,N3,N4);

    if(ORDER > 0)
    {
        ASSIGN(Ifirst, _PUSH(N1), IMPORT);
    }
    if(ORDER > 1)
    {
        ASSIGN(Ifirst, _PUSH(N2), IMPORT);      
    }
    if(ORDER > 2)
    {
        ASSIGN(Ifirst, _PUSH(N3), IMPORT);      
    }
    if(ORDER > 3)
    {
        ASSIGN(Ifirst, _PUSH(N4), IMPORT);      
    }

    if(ORDER >0 && N1 > 0)
    {
      ASSIGN(tmpPos,0,EXPORT);
      ASSIGN(temparray2d_N1,_ATTRIB(table2darray,tmpPos,N1),EXPORT);

      COMMENT("#                 X1                  X2                  X3                  X4                  X5");
      CELL_LIST(N1,"%20lg",temparray2d_N1,100);

      ASSIGN(table2darray,_PUSH(temparray2d_N1),IMPORT);
      ASSIGN(table_size,N1,IMPORT);
    }
    if(ORDER >1 && N2 > 0)
    {
      ASSIGN(tmpPos,N1,EXPORT);
      ASSIGN(temparray2d_N2,_ATTRIB(table2darray,tmpPos,N2),EXPORT);

      COMMENT("#                 Y1                  Y2                  Y3                  Y4                  Y5");
      CELL_LIST(N2,"%20lg",temparray2d_N2,100);

      ASSIGN(table2darray,_PUSH(temparray2d_N2),IMPORT);
      ASSIGN(table_size,N1*N2,IMPORT);   
    }
    if(ORDER > 2&& N3 > 0)
    {
      ASSIGN(tmpPos,N1+N2,EXPORT);
      ASSIGN(temparray2d_N3,_ATTRIB(table2darray,tmpPos,N3),EXPORT);

      COMMENT("#                 Z1                  Z2                  Z3                  Z4                  Z5");
      CELL_LIST(N3,"%20lg",temparray2d_N3,100);

      ASSIGN(table2darray,_PUSH(temparray2d_N3),IMPORT);
      ASSIGN(table_size,N1*N2*N3,IMPORT);   
    }
    if(ORDER > 3 && N4 > 0)
    {
      ASSIGN(tmpPos,N1+N2+N3,EXPORT);
      ASSIGN(temparray2d_N4,_ATTRIB(table2darray,tmpPos,N4),EXPORT);

      COMMENT("#                 W1                  W2                  W3                  W4                  W5");
      CELL_LIST(N4,"%20lg",temparray2d_N4,100);

      ASSIGN(table2darray,_PUSH(temparray2d_N4),IMPORT);
      ASSIGN(table_size,N1*N2*N3*N4,IMPORT);   
    }
    COMMENT("#                 T1                  T2                  T3                  T4                  T5");
    CELL_LIST(table_size,"%20lg",ENG_FUNCT_yValues,100); 

}

