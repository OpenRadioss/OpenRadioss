//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// INTERFACE_SPRINGBACK
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    Number_of_cards                         = SIZE("Number_of_cards");
    Number_of_excluded_features             = SIZE("Number_of_excluded_features");
    LSD_ARRAY_RC                            = ARRAY[Number_of_cards](FLOAT,  "Rotational constraint", "RC");
    LSD_ARRAY_TC                            = ARRAY[Number_of_cards](FLOAT,  "Translational Constraint", "TC");
    LSD_CFLAG                               = VALUE(INT,  "Output contact state", "CFLAG");
    LSD_FEATURES                            = ARRAY[Number_of_excluded_features](STRING,  "Features");
    LSD_FSPLIT                              = VALUE(INT,  "Flag for splitting of the dynain file", "FSPLIT");
    LSD_FTENSR                              = VALUE(INT,  "Flag for dumping tensor data from the element history variables into the dynain file", "FTENSR");
    LSD_FTYPE                               = VALUE(INT,  "File type", "FTYPE");
    LSD_HFLAG                               = VALUE(INT,  "Output hourglass state", "HFLAG");
    LSD_INTSTRN                             = VALUE(INT,  "Output of strains for shells", "INTSTRN");
    LSD_NCYC                                = VALUE(INT,  "The wear on this card will be processed NCYC times to modify the worn geometry", "NCYC");
    LSD_NDFLAG                              = VALUE(INT,  "Flag to dump nodes into dynain file", "NDFLAG");
    LSD_NSHV                                = VALUE(INT,  "Number of shell or solid history variables", "NSHV");
    LSD_NTHHSV                              = VALUE(INT,  "Number of thermal history variables", "NTHHSV");
    LSD_PSID                                = VALUE(SETS,  "Part set ID", "PSID"){ SUBTYPES = (/SETS/SET_PART_IDPOOL) ; }
    LSD_RFLAGINT                            = VALUE(INT,  "Flag to carry over reference quantities, such as the reference geometry for hyperelastic materials", "RFLAG");
    LSD_SLD0                                = VALUE(INT,  "Output of solid element data", "SLD0");
    NID_array                               = ARRAY[Number_of_cards](MULTIOBJECT,  "Node ID", "NID");
    Option2                                 = VALUE(INT,  "Option2");
    SpringOption1                           = VALUE(INT,  "Option1", "Option1");
    optionalCards                           = VALUE(INT,  "OptionalCard");
// 
    IO_FLAG                                 = VALUE(INT,  "Import/Export flag");
    option                                  = VALUE(STRING, "Key and Option (temp)");
    opt_                                    = VALUE(INT, "If option");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    LSD_ARRAY_RC                            = 12497;
    LSD_ARRAY_TC                            = 12496;
    LSD_CFLAG                               = 12493;
    LSD_FEATURES                            = 12499;
    LSD_FSPLIT                              = 12491;
    LSD_FTENSR                              = 12486;
    LSD_FTYPE                               = 806;
    LSD_HFLAG                               = 12494;
    LSD_INTSTRN                             = 12488;
    LSD_NCYC                                = 8880;
    LSD_NDFLAG                              = 12492;
    LSD_NSHV                                = 5109;
    LSD_NTHHSV                              = 6288;
    LSD_PSID                                = 768;
    LSD_RFLAGINT                            = 12495;
    LSD_SLD0                                = 12490;
    NID_array                               = 4410;
    Number_of_cards                         = 6264;
    Number_of_excluded_features             = 12498;
    Option2                                 = 687;
    SpringOption1                           = 4978;
    optionalCards                           = 4772;
    IO_FLAG                                 =-1;
    option                                  = -1;
    opt_                                    = -1;
}

CHECK(COMMON)
{

    LSD_ARRAY_RC                              <100;
}

GUI(COMMON)
{

    ASSIGN(KEYWORD_STR, "*INTERFACE_SPRINGBACK");
    RADIO(SpringOption1)
    {
        ADD(1, "None");
        ADD(2, "LSDYNA");
        ADD(3, "NASTRAN");
        ADD(4, "SEAMLESS");
        ADD(5, "EXCLUDE");
    }
    if(SpringOption1 == 2)
    {
        ASSIGN(KEYWORD_STR, "_LSDYNA");
    }
    else if(SpringOption1 == 3)
    {
        ASSIGN(KEYWORD_STR, "_NASTRAN");
    }
    else if(SpringOption1 == 4)
    {
        ASSIGN(KEYWORD_STR, "_SEAMLESS");
    }
    else if(SpringOption1 == 5)
    {
        ASSIGN(KEYWORD_STR, "_EXCLUDE");
    }
    if(SpringOption1!=5)
    {
        RADIO(Option2)
        {
            ADD(1, "None");
            ADD(2, "THICKNESS");
            ADD(3, "NOTHICKNESS");
        }
        if(Option2 == 2)
        {
            ASSIGN(KEYWORD_STR, "_THICKNESS");
        }
        else if(Option2 == 3)
        {
            ASSIGN(KEYWORD_STR, "_NOTHICKNESS");
        }
    }
    if(SpringOption1!=5)
    {
        DATA(LSD_PSID) { SUBTYPES = (/SETS/SET_PART_IDPOOL) ; }
        SCALAR(LSD_NSHV);
        RADIO(LSD_FTYPE, "File type")
        {
            ADD(0, "ASCII");
            ADD(1, "binary");
            ADD(2, "both ASCII and binary");
            ADD(3, "LSDA format (for LSDYNA option only)");
            ADD(10,"ASCII large format (see *INITIAL_STRESS_SHELL)");
            ADD(11,"binary large format");
            ADD(12,"both ASCII and binary large format");  
        }

        RADIO(LSD_FTENSR)
        {
            ADD(0, "0:Donâ€™t dump tensor data from element history variables");
            ADD(1, "1:Dump any tensor data from element history variables into the dynain file in GLOBAL coordinate system");

        }
        SCALAR(LSD_NTHHSV);
        RADIO(LSD_RFLAGINT)
        {
            ADD(0, "0:Default, do not output.");
            ADD(1, "1:Output reference coordinates and nodal masses");
        }
        RADIO(LSD_INTSTRN)
        {
            ADD(0, "0:Only at the innermost and outermost integration points");
            ADD(1, "1:At all through-thickness integration points");
        }
        FLAG(optionalCards);
        if(optionalCards == 1)
        {
            RADIO(LSD_SLD0)
            {
                ADD(0, "0:*ELEMENT_SOLID");
                ADD(1, "1:*ELEMENT_SOLID_ORTHO (only for anisotropic material)");
            }
            SCALAR(LSD_NCYC);
            RADIO(LSD_FSPLIT)
            {
                ADD(0, "0: dynain file written in one piece");
                ADD(1, "1: Output is divided into two files: dynain_geo including the geometry data and dynain_ini including initial stresses and strains.");
            }
            RADIO(LSD_NDFLAG)
            {
                ADD(0, "0: Default, dump only SPH and element nodes");
                ADD(1, "1: Dump all nodes");
            }
            RADIO(LSD_CFLAG)
            {
                ADD(0, "0: Default, do not output");
                ADD(1, "1: Output contact state, currently only Mortar segment pair information and selected tied contacts with restrictions");
            }
            RADIO(LSD_HFLAG)
            {
                ADD(0, "0: Default, do not output.");
                ADD(1, "1: Output hourglass stresses for carrying over to the next simulation");
            }
        }
    }
    
    if(SpringOption1!=5)
    {
        SIZE(Number_of_cards);
        ARRAY(Number_of_cards,"")
        {
            DATA(NID_array);
            SCALAR(LSD_ARRAY_TC);
            SCALAR(LSD_ARRAY_RC);
        }
    }
    if(SpringOption1==5)
    {
        SIZE(Number_of_excluded_features);
        ARRAY(Number_of_excluded_features,"")
        {
            SCALAR(LSD_FEATURES);
        }
    }

}

// !! Please refer manual and correct, if any, missing or wrongly generated format !!

// File format
FORMAT(Keyword971_R14.1) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
	ASSIGN(IO_FLAG, 0, EXPORT);
    if(IO_FLAG == 0)
    {
        if(SpringOption1 == 2)
        {
            ASSIGN(option, LSDYNA,EXPORT);
        }
        else if(SpringOption1 == 3)
        {
            ASSIGN(option, NASTRAN,EXPORT);
        }
        else if(SpringOption1 == 4)
        {
            ASSIGN(option, SEAMLESS,EXPORT);
        }
        else if(SpringOption1 == 5)
        {
            ASSIGN(option, EXCLUDE,EXPORT);
        }
        if(Option2 == 3)
        {
            ASSIGN(option, NOTHICKNESS,EXPORT);
        }
        else if(Option2 == 2)
        {
            ASSIGN(option, THICKNESS,EXPORT);
        }
    }
    
    HEADER("*INTERFACE_SPRINGBACK%-25s", option); 
    
    if(IO_FLAG == 1)
    {
        ASSIGN(opt_, _FIND(option, "_LSDYNA"),IMPORT);
        if(opt_ == 1)
        {
            ASSIGN(SpringOption1, 2,IMPORT);
        }
        ASSIGN(opt_, _FIND(option, "_NASTRAN"),IMPORT);
        if(opt_ == 1)
        {
            ASSIGN(SpringOption1, 3,IMPORT);
        }
        ASSIGN(opt_, _FIND(option, "_SEAMLESS"),IMPORT);
        if(opt_ == 1)
        {
            ASSIGN(SpringOption1, 4,IMPORT);
        }
        ASSIGN(opt_, _FIND(option, "_EXCLUDE"),IMPORT);
        if(opt_ == 1)
        {
            ASSIGN(SpringOption1, 5,IMPORT);
        }
        if(SpringOption1 == 0)
        {
            ASSIGN(SpringOption1, 1,IMPORT);
        }
        ASSIGN(opt_, _FIND(option, "_NOTHICKNESS"),IMPORT);
        if(opt_ == 1)
        {
            ASSIGN(Option2, 3,IMPORT);
        }
        else 
        {
            ASSIGN(opt_, _FIND(option, "_THICKNESS"),IMPORT);
            if(opt_ == 1)
            {
                ASSIGN(Option2, 2,IMPORT);
            }
            else{
                ASSIGN(Option2, 1,IMPORT);
            }
        }
    }

 

    if( (SpringOption1!=5) )
    {
        COMMENT("$     PSID      NSHV     FTYPE              FTENSR    NTHHSV     RFLAG   INTSTRN");
        CARD("%10d%10d%10d%10s%10d%10d%10d%10d",LSD_PSID,LSD_NSHV,LSD_FTYPE,_BLANK_,LSD_FTENSR,LSD_NTHHSV,LSD_RFLAGINT,LSD_INTSTRN);
    }

    CARD_PREREAD("%-10s", option);  
    ASSIGN(opt_, _FIND(option, "OPTCARD"),IMPORT);
    if(opt_ == 1)
    {
        ASSIGN(optionalCards, 1,IMPORT);
    }
        
    if( (SpringOption1!=5) && (optionalCards == 1) )
    {
        COMMENT("$     OPTC      SLD0      NCYC    FSPLIT    NDFLAG     CFLAG     HFLAG");
        CARD("%10s%10d%10d%10d%10d%10d%10d",option,LSD_SLD0,LSD_NCYC,LSD_FSPLIT,LSD_NDFLAG,LSD_CFLAG,LSD_HFLAG);
    }

    if( (SpringOption1!=5) )
    {
            // !! Note: Use correct tabular card ex: CARD_LIST, FREE_CELL_LIST, CELL_LIST etc. !!
        COMMENT("$      NID        TC        RC");
        FREE_CARD_LIST(  Number_of_cards )
        {
            CARD("%10d%10lf%10lf",NID_array,LSD_ARRAY_TC,LSD_ARRAY_RC);
        }
    }

    if( (SpringOption1==5) )
    {
            // !! Note: Use correct tabular card ex: CARD_LIST, FREE_CELL_LIST, CELL_LIST etc. !!
        COMMENT("$Features");
        FREE_CARD_LIST(  Number_of_excluded_features )
        {
            CARD("%-80s",LSD_FEATURES);
        }
    }


}
