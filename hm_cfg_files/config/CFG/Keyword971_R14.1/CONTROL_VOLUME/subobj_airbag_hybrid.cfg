//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- subobj_airbag_hybrid.cfg ---

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    LSD_ATMOST                              = VALUE(FLOAT,  "Atmospheric ambient temperature", "ATMOST");
    LSD_ATMOSP                              = VALUE(FLOAT,  "Atmospheric ambient pressure", "ATMOSP");
    LSD_ATMOSD                              = VALUE(FLOAT,  "Atmospheric density", "ATMOSD");
    LSD_GC                                  = VALUE(FLOAT,  "Universal molar gas constant", "GC");
    LSD_CC                                  = VALUE(FLOAT,  "Conversion constant", "CC");
    LSD_HCONVOpt                            = VALUE(INT,  "Convective heat transfer coefficient Options flag", "HCONV_Option");
    LSD_HCONV_H                             = VALUE(FLOAT,  "Effective heat transfer coefficient between the gas in the air bag and the environment at temperature at ATMOST", "HCONV");
    LSD_LCID                                = VALUE(CURVE,  "Optional load curve ID defining pressure versus relative volume", "HCONV");
    LSD_C23                                 = VALUE(FLOAT,  "Vent orifice coefficient which applies to exit hole", "C23");
    LSD_LCIDOpt                             = VALUE(INT,  "LCC23_Relative_Pressure", "LCC23_Relative_Pressure");
    LSD_LCID3                               = VALUE(CURVE,  "Load curve ID defining mass flow rate versus pressure difference", "LCC23");
    LSD_LCMINOpt                            = VALUE(INT,  "A23_Option", "A23_Option");
    LSD_A23                                 = VALUE(FLOAT,  "Vent orifice area", "A23");
    LSD_HYBRID_PART_OPT                     = VALUE(INT,  "PartSetOpt", "PartSetOpt");
    LSD_PID                                 = VALUE(COMPONENT,  "Part ID - The area of this part becomes the vent orifice area", "A23");
    LSD_HYBRID_PSID                         = VALUE(SETS,  "With LCA23 = -1, a negative A23 represents venting holes by a part set |A23|", "A23"){ SUBTYPES = (/SETS/SET_PART_IDPOOL) ; }
    LSD_LCID4                               = VALUE(CURVE,  "Load curve number defining the vent orifice area which applies to exit hole as a function of absolute pressure", "LCA23");
    LSD_CP23                                = VALUE(FLOAT,  "Orifice coefficient for leakage (fabric porosity)", "CP23");
    LSD_LCID5                               = VALUE(CURVE,  "Load curve number defining the orifice coefficient for leakage (fabric porosity) as a function of time", "LCP23");
    LSD_AP23                                = VALUE(FLOAT,  "Area for leakage", "AP23");
    LSD_LCID6                               = VALUE(CURVE,  "Load curve number defining the area for leakage (fabric porosity) as a function of (absolute) pressure", "LCAP23");
    LSD_OPTHybrid                           = VALUE(INT,  "Fabric venting option, if nonzero CP23, LCCP23, AP23, and LCAP23 are set to zero", "OPT");
    LSD_PVENT                               = VALUE(FLOAT,  "Gauge pressure when venting begins", "PVENT");
    LSD_NGAS                                = SIZE("Number of inflator gas components", "NGAS");
    LSD_LCEFR                               = VALUE(CURVE,  "Optional curve for exit flow rate (mass/time) versus (gauge) pressure", "LCEFR");
    LSD_LCIDM0                              = VALUE(CURVE,  "Optional curve representing inflator's total mass inflow rate", "LCIDM0");
    LSD_VNTOPT                              = VALUE(INT,  "Additional options for venting area definition", "VNTOPT");
    LSD_LCIDM                               = ARRAY[LSD_NGAS](CURVE,  "Inflator mass flow rate", "LCIDM");
    LSD_LCIDT                               = ARRAY[LSD_NGAS](CURVE,  "Inflator gas temperature", "LCIDT");
    LSD_MWHYB                               = ARRAY[LSD_NGAS](FLOAT,  "MW");
    LSD_INITM                               = ARRAY[LSD_NGAS](FLOAT,  "Initial Mass Fraction of this air component", "INITM");
    LSD_HA                                  = ARRAY[LSD_NGAS](FLOAT,  "A");
    LSD_HB                                  = ARRAY[LSD_NGAS](FLOAT,  "B");
    LSD_HC                                  = ARRAY[LSD_NGAS](FLOAT,  "Coefficient of molar heat capacity of inflator gas at constant pressure", "C");
    LSD_FMASS                               = ARRAY[LSD_NGAS](FLOAT,  "Fraction of additional aspirated mass", "FMASS");
    jettingoption                           = VALUE(INT,  "Jetting", "Jetting");
    LSD_XJFP                                = VALUE(FLOAT,  "X co-ordinate of jet focal point", "XJFP");
    LSD_YJFP                                = VALUE(FLOAT,  "Y co-ordinate of jet focal point", "YJFP");
    LSD_ZJFP                                = VALUE(FLOAT,  "Z co-ordinate of jet focal point", "ZJFP");
    LSD_XJVH                                = VALUE(FLOAT,  "x-coordinate of jet vector head to defined code centerline", "XJVH");
    LSD_YJVH                                = VALUE(FLOAT,  "y-coordinate of jet vector head to defined code centerline", "YJVH");
    LSD_ZJVH                                = VALUE(FLOAT,  "z-coordinate of jet vector head to defined code centerline", "ZJVH");
    coneAngleCurveFlag                      = VALUE(INT,  "LCID_coneAngleCurve");
    LSD_CA                                  = VALUE(FLOAT,  "Cone angle (defined in radians)", "CA");
    AIR_CA                                  = VALUE(CURVE,  "load curve ID defining cone angle as a function of time", "LCID");
    effiFactorCurveFlag                     = VALUE(INT,  "LCID_effiFactorCurve");
    LSD_BETA                                = VALUE(FLOAT,  "Efficiency factor which scales the final value of pressure", "BETA");
    LSD_LCID2                               = VALUE(CURVE,  "Load curve ID defining mass flow rate versus pressure difference", "BETA");
    LSD_XSJFP                               = VALUE(FLOAT,  "X coordinate of secondary jet focal point", "XSJFP");
    LSD_YSJFP                               = VALUE(FLOAT,  "Y coordinate of secondary jet focal point", "YSJFP");
    LSD_ZSJFP                               = VALUE(FLOAT,  "Z coordinate of secondary jet focal point", "ZSJFP");
    LSD_PSID                                = VALUE(SETS,  "Optional Parts on which the pressure is applied", "PSID"){ SUBTYPES = (/SETS/SET_PART_IDPOOL) ; }
    LSD_NODE1                               = VALUE(NODE,  "Node ID located at the jet focal point", "NODE1");
    LSD_NODE2                               = VALUE(NODE,  "Node ID for node along the axis of the jet", "NODE2");
    LSD_NODE3                               = VALUE(NODE,  "Optional node ID located at secondary jet focal point", "NODE3");
    CMoption                                = VALUE(INT,   "CM", "CM");
    LSD_NREACT                              = VALUE(NODE,  "Node for reacting jet force", "NREACT");
    LSD_LCIDMOpt                            = VALUE(INT,  "LCIDM_Cubic_Interp", "LCIDM_Cubic_Interp");
	LSD_LCIDTOpt							= VALUE(INT,  "LCIDT_Cubic_Interp", "LCIDT_Cubic_Interp");
	LSD_GO									= VALUE(INT,  "Load curve ID defining mass flow rate versus pressure difference", "LCC23");
	empty_string							= VALUE(STRING, "");
	dummy1									= VALUE(FLOAT, "");
	dummy2									= VALUE(FLOAT, "");
    IOFLAG                                  = VALUE(INT,         "IOFLAG");
	LSD_SO = VALUE(INT,         "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    LSD_ATMOST                              = 3185;
    LSD_ATMOSP                              = 3186;
    LSD_ATMOSD                              = 3187;
    LSD_GC                                  = 3063;
    LSD_CC                                  = 3189;
    LSD_HCONVOpt                            = 7736;
    LSD_HCONV_H                             = 7735;
    LSD_LCID                                = 45;
    LSD_C23                                 = 1208;
    LSD_LCIDOpt                             = 5091;
    LSD_LCID3                               = 170;
    LSD_LCMINOpt                            = 5090;
    LSD_A23                                 = 1553;
    LSD_HYBRID_PART_OPT                     = 11141;
    LSD_PID                                 = 149;
    LSD_HYBRID_PSID                         = 11142;
    LSD_LCID4                               = 171;
    LSD_CP23                                = 3061;
    LSD_LCID5                               = 172;
    LSD_AP23                                = 3062;
    LSD_LCID6                               = 199;
    LSD_OPTHybrid                           = 4192;
    LSD_PVENT                               = 3177;
    LSD_NGAS                                = 3178;
    LSD_LCEFR                               = 7732;
    LSD_LCIDM0                              = 7733;
    LSD_VNTOPT                              = 7734;
    LSD_LCIDM                               = 3179;
    LSD_LCIDT                               = 3180;
    LSD_MWHYB                               = 3190;
    LSD_INITM                               = 3188;
    LSD_HA                                  = 3181;
    LSD_HB                                  = 3182;
    LSD_HC                                  = 3183;
    LSD_FMASS                               = 3184;
    jettingoption                           = 3067;
    LSD_XJFP                                = 3068;
    LSD_YJFP                                = 3069;
    LSD_ZJFP                                = 3070;
    LSD_XJVH                                = 3071;
    LSD_YJVH                                = 3072;
    LSD_ZJVH                                = 3073;
    coneAngleCurveFlag                      = 4675;
    AIR_CA                                  = 11810;
    effiFactorCurveFlag                     = 4676;
    LSD_BETA                                = 1662;
    LSD_LCID2                               = 168;
    LSD_LCIDMOpt                            = 5315;
    LSD_LCIDTOpt                            = 5316;
    LSD_SO									= 77;
	LSD_GO									= 78;
	CMoption								= 5313;
	empty_string							= -1;
	dummy1									= -1;
	dummy2									= -1;
	IOFLAG									= -1;
}

DEFINITIONS(COMMON)
{
  _COPY_PARENT = (jettingoption, CMoption);
}

CHECK(COMMON)
{
    LSD_LCID                                  >=0;
    LSD_A23                                   >=0;
    LSD_LCIDM                                 >=0;
    LSD_LCIDT                                 >=0;
    LSD_CA                                    >=0;


}

DEFAULTS(COMMON)
{
    LSD_CC    = 1.0;

}






GUI(COMMON)
{

	
  
	
	
	
    SCALAR(LSD_ATMOST);
    SCALAR(LSD_ATMOSP);
    SCALAR(LSD_ATMOSD);
    SCALAR(LSD_GC);
    SCALAR(LSD_CC);
    FLAG(LSD_HCONVOpt);
    if(LSD_HCONVOpt == FALSE)
    {
        SCALAR(LSD_HCONV_H);
    }
    else if(LSD_HCONVOpt == TRUE)
    {
        DATA(LSD_LCID);
    }
    SCALAR(LSD_C23);
    FLAG(LSD_LCIDOpt);
    if(LSD_LCIDOpt == FALSE)
    {
        SCALAR(LSD_GO);
    }
    else if(LSD_LCIDOpt == TRUE)
    {
        DATA(LSD_LCID3);
    }
    FLAG(LSD_LCMINOpt);
    if(LSD_LCMINOpt == FALSE)
    {
        SCALAR(LSD_A23);
    }
    else if(LSD_LCMINOpt == TRUE)
    {
        FLAG(LSD_HYBRID_PART_OPT);
        if(LSD_HYBRID_PART_OPT == FALSE)
        {
            DATA(LSD_PID);
        }
        else if(LSD_HYBRID_PART_OPT == TRUE)
        {
            DATA(LSD_HYBRID_PSID);
        }
    }
	
    if(LSD_HYBRID_PART_OPT == 0 || LSD_LCMINOpt == 1)
    {
        DATA(LSD_LCID4);
    }
	if(LSD_LCMINOpt == 1 && LSD_HYBRID_PART_OPT == 1)
	{	 
		//ASSIGN(LSD_LCID4, -1);
		//ASSIGN(LSD_SO, -1);
         SCALAR(LSD_SO);
	}


    SCALAR(LSD_CP23);
    DATA(LSD_LCID5);
    SCALAR(LSD_AP23);
    DATA(LSD_LCID6);
    RADIO(LSD_OPTHybrid)
    {
        ADD(0, "0");
        ADD(1, "1");
        ADD(2, "2");
        ADD(3, "3");
        ADD(4, "4");
        ADD(5, "5");
        ADD(6, "6");
        ADD(7, "7");
        ADD(8, "8");
    }
    SCALAR(LSD_PVENT);
	
	// NGAS :
    SIZE_RADIO(LSD_NGAS)
    {
        ADD(0, "0");
        ADD(1, "1");
        ADD(2, "2");
        ADD(3, "3");
        ADD(4, "4");
        ADD(5, "5");
        ADD(6, "6");
        ADD(7, "7");
        ADD(8, "8");
        ADD(9, "9");
        ADD(10, "10");
        ADD(11, "11");
        ADD(12, "12");
        ADD(13, "13");
        ADD(14, "14");
        ADD(15, "15");
        ADD(16, "16");
        ADD(17, "17");
        ADD(18, "18");
        ADD(19, "19");
        ADD(20, "20");
    }
	
    ARRAY(LSD_NGAS,"")
    {
        DATA(LSD_LCIDM);          
        DATA(LSD_LCIDT);
        SCALAR(LSD_MWHYB);
        SCALAR(LSD_INITM);
        SCALAR(LSD_HA);
        SCALAR(LSD_HB);
        SCALAR(LSD_HC);
        SCALAR(LSD_FMASS);
    }
    
    DATA(LSD_LCEFR);
    DATA(LSD_LCIDM0);
    RADIO(LSD_VNTOPT)
    {
        ADD(1, "1");
        ADD(2, "2");
        ADD(10, "10");
    }

	
    FLAG(jettingoption);
    if(jettingoption == 1)
    {
        SCALAR(LSD_XJFP);
        SCALAR(LSD_YJFP);
        SCALAR(LSD_ZJFP);
        SCALAR(LSD_XJVH);
        SCALAR(LSD_YJVH);
        SCALAR(LSD_ZJVH);
        FLAG(coneAngleCurveFlag);
        if(coneAngleCurveFlag == FALSE)
        {
            SCALAR(LSD_CA);
        }
        if(coneAngleCurveFlag == TRUE)
        {
            DATA(AIR_CA);
        }
        FLAG(effiFactorCurveFlag);
        if(effiFactorCurveFlag == FALSE)
        {
            SCALAR(LSD_BETA);
        }
        if(effiFactorCurveFlag == TRUE)
        {
            DATA(LSD_LCID2);
        }
        SCALAR(LSD_XSJFP);
        SCALAR(LSD_YSJFP);
        SCALAR(LSD_ZSJFP);
        DATA(LSD_PSID);
        DATA(LSD_NODE1);
        DATA(LSD_NODE2);
        DATA(LSD_NODE3);
        FLAG(CMoption);
        if(CMoption == TRUE)
        {
            DATA(LSD_NREACT);
        }
    }		
}		


FORMAT(Keyword971_R14.1)
{
	ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);
									

    COMMENT("$   ATMOST    ATMOSP    ATMOSD        GC        CC     HCONV");
    CARD("%10lf%10lf%10lf%10lf%10lf%10lf",LSD_ATMOST,LSD_ATMOSP,LSD_ATMOSD,LSD_GC,LSD_CC,SCALAR_OR_OBJECT(LSD_HCONVOpt,LSD_HCONV_H,LSD_LCID));
    
	
    COMMENT("$      C23     LCC23       A23     LCA23      CP23     LCP23      AP23    LCAP23");
	if (IOFLAG == 1)
	{
		CARD_PREREAD("%10s%10s%10lf%10lf",empty_string,empty_string,dummy1,dummy2);
		if(dummy1 < 0 && dummy2 == -1)
		{
            // SID
			ASSIGN(LSD_LCMINOpt,1,IMPORT);
			ASSIGN(LSD_HYBRID_PART_OPT,1,IMPORT);
			ASSIGN(LSD_SO, -1, IMPORT);
		}
		else if(dummy1 < 0 && dummy2 != -1)
		{
            // PID
			ASSIGN(LSD_LCMINOpt,1,IMPORT);
			ASSIGN(LSD_HYBRID_PART_OPT,0,IMPORT);
		}
		else
		{
			ASSIGN(LSD_LCMINOpt,0,IMPORT);
			ASSIGN(LSD_HYBRID_PART_OPT,0,IMPORT);
		}
		CARD("%10lf%10d%10lf%10d%10lf%10d%10lf%10d",LSD_C23,SCALAR_OR_OBJECT(LSD_LCIDOpt,LSD_GO,LSD_LCID3),
        CELL_COND(
            if(dummy1 < 0 && dummy2 == -1) 
                FLAGGED_OBJECT(LSD_HYBRID_PSID,LSD_LCMINOpt); 
            else if(dummy1 < 0 && dummy2 != -1) 
                FLAGGED_OBJECT(LSD_PID,LSD_LCMINOpt); 
            else
                LSD_A23;),
        CELL_COND(
                if( dummy2 == -1) 
                   LSD_SO;
                else
                   LSD_LCID4;),
        LSD_CP23,LSD_LCID5,LSD_AP23,LSD_LCID6);	
	}
	else
	{
		CARD("%10lf%10d%10lf%10d%10lf%10d%10lf%10d",LSD_C23,SCALAR_OR_OBJECT(LSD_LCIDOpt,LSD_GO,LSD_LCID3),
        CELL_COND(
            if(LSD_LCMINOpt == 1 && LSD_HYBRID_PART_OPT == 1) 
                FLAGGED_OBJECT(LSD_HYBRID_PSID,LSD_LCMINOpt); 
            else if(LSD_LCMINOpt == 1 && LSD_HYBRID_PART_OPT == 0) 
                FLAGGED_OBJECT(LSD_PID,LSD_LCMINOpt); 
            else 
                LSD_A23;),
        CELL_COND(
                if(LSD_LCMINOpt == 1 && LSD_HYBRID_PART_OPT == 1) 
                   LSD_SO;
                else
                   LSD_LCID4;),
        LSD_CP23,LSD_LCID5,LSD_AP23,LSD_LCID6);		
	}
       
	COMMENT("$      OPT     PVENT      NGAS     LCEFR    LCIDM0    VNTOPT");
	CARD("%10d%10lf%10d%10d%10d%10d",LSD_OPTHybrid,LSD_PVENT,LSD_NGAS,LSD_LCEFR,LSD_LCIDM0,LSD_VNTOPT);
    
    if(LSD_NGAS > 0)
    {
           
		//COMMENT("$    LCIDM     LCIDT                  MW     INITM         A         B         C");
		FREE_CARD_LIST(  LSD_NGAS )
        {
            COMMENT("$    LCIDM     LCIDT                  MW     INITM         A         B         C");
			CARD("%10d%10d%10s%10lf%10lf%10lf%10lf%10lf",LSD_LCIDM,LSD_LCIDT,_BLANK_,LSD_MWHYB,LSD_INITM,LSD_HA,LSD_HB,LSD_HC);

            COMMENT("$    FMASS");
            CARD("%10lf",LSD_FMASS);
        }
    }
    
    /*if(LSD_NGAS > 0) 
    {
          
        //COMMENT("$    FMASS");
        FREE_CARD_LIST(  LSD_NGAS )
        {
            COMMENT("$    FMASS");
            CARD("%10lf",LSD_FMASS);
        }
    }*/

    if(jettingoption == 1)
    {
        COMMENT("$     XJFP      YJFP      ZJFP      XJVH      YJVH      ZJVH        CA      BETA");
        CARD("%10lf%10lf%10lf%10lf%10lf%10lf%10lf%10lf",LSD_XJFP,LSD_YJFP,LSD_ZJFP,LSD_XJVH,LSD_YJVH,LSD_ZJVH,SCALAR_OR_OBJECT(coneAngleCurveFlag,LSD_CA,AIR_CA),SCALAR_OR_OBJECT(effiFactorCurveFlag,LSD_BETA,LSD_LCID2));
        
        COMMENT("$    XSJFP     YSJFP     ZSJFP      PSID     NODE1     NODE2     NODE3");
        CARD("%10lf%10lf%10lf%10d%10d%10d%10d",LSD_XSJFP,LSD_YSJFP,LSD_ZSJFP,LSD_PSID,LSD_NODE1,LSD_NODE2,LSD_NODE3);
    }

    if( (jettingoption == 1)  &&  (CMoption == 1) )
    {
        COMMENT("$   NREACT");
        CARD("%10d",LSD_NREACT);
    }
}