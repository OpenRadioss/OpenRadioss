//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//  boundary_prescribed_final_geometry.cfg
//
// BOUNDARY_PRESCRIBED_FINAL_GEOMETRY
//

ATTRIBUTES(COMMON)
{
    entityid                                = VALUE(SETS, "Node ID") { SUBTYPES = ( /SETS ) ; }
    dyna_lcidf                              = VALUE(CURVE, "Default load curve ID");
    dyna_deathd                             = VALUE(FLOAT, "Default death time");
    
    distribution                            = VALUE(UINT,"Distribution");
    distribution_table_count                = SIZE("Number of additional nodes");
    dyna_final_geometry_coords_X            = VALUE(FLOAT, "X coordinate of final geometry");
    dyna_final_geometry_coords_Y            = VALUE(FLOAT, "Y coordinate of final geometry");
    dyna_final_geometry_coords_Z            = VALUE(FLOAT, "Z coordinate of final geometry");
    location_unit_node                      = VALUE(NODE, "Additional nodes");
    dyna_lcid                               = VALUE(CURVE, "Load curve ID for NID");
    dyna_death                              = VALUE(FLOAT, "Death time for NID");
    dummy                                   = VALUE(INT,"dummy");
    BPFG_SET_EXPAND_SUBGRP                  = VALUE(SUBOBJECT, "BPFG_SET_EXPAND_SUBGRP");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING,       "Solver Keyword");
    IOFLAG                                  = VALUE(INT,       "IO Flag");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //HM INTERNAL
    KEYWORD_STR                             = 9000;
    dummy                                   = -1;
    BPFG_SET_EXPAND_SUBGRP                  = -1;
    
    
    dyna_final_geometry_coords_X    = -1;
    dyna_final_geometry_coords_Y    = -1;
    dyna_final_geometry_coords_Z    = -1;
    IOFLAG                          = -1;
    
    
}

DEFAULTS(COMMON)
{
    //entityid = -1;
    distribution_table_count = 0;
    distribution = 0;
    dummy = 0S;
}

DEFINITIONS(COMMON) {
    _TRIPLE     = (dyna_final_geometry_coords_X);
}

GUI(COMMON)
{

    DATA(dyna_lcidf);
    SCALAR(dyna_deathd) { DIMENSION = "t"; }

    SCALAR(dyna_final_geometry_coords_X) { DIMENSION = "l"; }
    SCALAR(dyna_final_geometry_coords_Y) { DIMENSION = "l"; }
    SCALAR(dyna_final_geometry_coords_Z) { DIMENSION = "l"; }
    SCALAR(dyna_death) { DIMENSION = "t"; }
    DATA(dyna_lcid);
    RADIO(distribution, "Distribution Type")
    {
        ADD(0,"Node SET");
        ADD(1,"nodes");
    }

    if(distribution == 0)
    {
      DATA(entityid, "node NSID");
    }
}   


FORMAT(Keyword971_R14.1)
{
    //ASSIGN(KEYWORD_STR, *BOUNDARY_PRESCRIBED_FINAL_GEOMETRY, EXPORT);
    
    HEADER("*BOUNDARY_PRESCRIBED_FINAL_GEOMETRY");

    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    COMMENT("$   BPFGID     LCIDF    DEATHD");
    CARD("%10d%10d%10lg", _ID_,dyna_lcidf,dyna_deathd);

    if(IOFLAG == 1)
    {
      CARD_PREREAD("%8d",dummy);
      if(dummy < 0)
      {
        ASSIGN(distribution,0,IMPORT);
      }
      else
      {
        ASSIGN(distribution,1,IMPORT);
      }
    }

    if(distribution == 0) // "Node SET"
    {   
        ASSIGN(dummy, -1*entityid, EXPORT);  
        COMMENT("$   NSID               X               Y               Z    LCID           DEATH");
        CARD("%8d%16lg%16lg%16lg%8d%16lg",dummy,dyna_final_geometry_coords_X,dyna_final_geometry_coords_Y,dyna_final_geometry_coords_Z,dyna_lcid,dyna_death);
        ASSIGN(entityid, -1*dummy, IMPORT);
    }
    else // "nodes"
    {
        SUBOBJECTS(BPFG_SET_EXPAND_SUBGRP,/SUBOBJECT/BPFG_SET_EXPAND_SUBGRP);
    }
}
