//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// BPFG_set_expepand_subgrp.cfg
//
ATTRIBUTES(COMMON)
{
    //distribution                            = VALUE(UINT,"Distribution");
    distribution_table_count                = SIZE("Number of additional nodes");
    dyna_final_geometry_coords_X            = ARRAY[distribution_table_count](FLOAT, "X coordinate of final geometry");
    dyna_final_geometry_coords_Y            = ARRAY[distribution_table_count](FLOAT, "Y coordinate of final geometry");
    dyna_final_geometry_coords_Z            = ARRAY[distribution_table_count](FLOAT, "Z coordinate of final geometry");
    location_unit_node                      = ARRAY[distribution_table_count](NODE, "Additional nodes");
    dyna_lcid                               = ARRAY[distribution_table_count](CURVE, "Load curve ID for NID");
    dyna_death                              = ARRAY[distribution_table_count](FLOAT, "Death time for NID");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    dyna_final_geometry_coords_X = -1;
    dyna_final_geometry_coords_Y = -1;
    dyna_final_geometry_coords_Z = -1;
}

DEFINITIONS(COMMON) {
    _TRIPLE     = (dyna_final_geometry_coords_X);
}

GUI(COMMON)
{
      SIZE(distribution_table_count);
      ARRAY(distribution_table_count, "No.of nodes")
      {
        DATA(location_unit_node, "node NID");
        SCALAR(dyna_final_geometry_coords_X) { DIMENSION = "l"; }
        SCALAR(dyna_final_geometry_coords_Y) { DIMENSION = "l"; }
        SCALAR(dyna_final_geometry_coords_Z) { DIMENSION = "l"; }
        SCALAR(dyna_lcid);
        SCALAR(dyna_death) { DIMENSION = "t"; }
      }
}

FORMAT(Keyword971_R14.1) {

  COMMENT("$    NID               X               Y               Z    LCID           DEATH");
  FREE_CARD_LIST(distribution_table_count)
  {
      CARD("%8d%16lg%16lg%16lg%8d%16lg",location_unit_node,dyna_final_geometry_coords_X,dyna_final_geometry_coords_Y,dyna_final_geometry_coords_Z,dyna_lcid,dyna_death);
  }
}