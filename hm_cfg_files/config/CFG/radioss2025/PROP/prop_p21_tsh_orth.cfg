//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Property TSH_ORTH Type21

ATTRIBUTES(COMMON)
{
    ISOLID                                  = VALUE(INT,  " Solid Elements Formulation Flag");
    Ismstr                                  = VALUE(INT,  " Small Strain Formulation Flag");
    Icpre                                   = VALUE(INT,  " Constant Pressure Formulation Flag");
    Icstr                                   = VALUE(INT,  " Constant Stress Formulation Flag");
    Inpts_R                                 = VALUE(INT,  " Number of Integration Points in R Direction");
    Inpts_S                                 = VALUE(INT,  " Number of Integration Points in S Direction");
    Inpts_T                                 = VALUE(INT,  " Number of Integration Points in T Direction");
    Iint                                    = VALUE(INT,  " Thickness Integration Formulation");
    dn                                      = VALUE(FLOAT,  " Numerical Damping for Stabilization");
    qa                                      = VALUE(FLOAT,  " Quadratic Bulk Viscosity");
    qb                                      = VALUE(FLOAT,  " Linear Bulk Viscosity");
    VECTOR_X                                = VALUE(FLOAT,  " X Component for Reference Vector");
    VECTOR_Y                                = VALUE(FLOAT,  " Y Component for Reference Vector");
    VECTOR_Z                                = VALUE(FLOAT,  " Z Component for Reference Vector");
    SKEW_CSID                               = VALUE(SYSTEM,  " Skew Identifier");
    Iorth                                   = VALUE(INT,  " Orthotropic System Formulation Flag for Reference Vector");
    MAT_BETA                                = VALUE(FLOAT,  " Angle of the First Direction of Orthotropy");
    deltaT_min                              = VALUE(FLOAT,  " Minimum Time Step");
    vdef_min                                = VALUE(FLOAT,  " Minimum volumetric strain");
    vdef_max                                = VALUE(FLOAT,  " Maximum volumetric strain");
    ASP_max                                 = VALUE(FLOAT,  " Maximum aspect ratio");
    COL_min                                 = VALUE(FLOAT,  " Minimum collapse ratio");
    Icontrol                                = VALUE(INT, "Flag for distortion control");
    
    //Attributes for HM usage
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    NODE1                                   = VALUE(NODE,  " Vector Base Node");
    NODE2                                   = VALUE(NODE,  " Vector End Node");
    n1                                      = VALUE(FLOAT, "");
    n2                                      = VALUE(FLOAT, "");
    Prop_Name_OR_Type                       = VALUE(INT, "");
    IO_FLAG                                 = VALUE(INT, "");
    TYPE_NO                                 = VALUE(STRING, "");
    TITLE                                   = VALUE(STRING, "");
    NBP                                     = VALUE(INT,   "Number of integration points");
    Inpts_R_status                          = VALUE(BOOL, "");
    Inpts_S_status                          = VALUE(BOOL, "");
    Inpts_T_status                          = VALUE(BOOL, "");
    Inpts_NBP_status                        = VALUE(BOOL, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    NUM_COMMENTS                            = 5110;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;
    ISOLID                                  = 8003;
    Icpre                                   = 5396;
    Icstr                                   = 5397;
    Iint                                    = 3985;
    Inpts_R                                 = 4151;
    Inpts_S                                 = 4152;
    Inpts_T                                 = 4153;
    Iorth                                   = 5364;
    Ismstr                                  = 5152;
    MAT_BETA                                =  148;
    NODE1                                   = 5115;
    NODE2                                   = 4481;
    SKEW_CSID                               =  412;
    VECTOR_X                                = 4482;
    VECTOR_Y                                = 4483;
    VECTOR_Z                                = 4484;
    deltaT_min                              = 4154;
    dn                                      = 5363;
    qa                                      = 8029;
    qb                                      = 8030;
    n1                                      =   -1;
    n2                                      =   -1;
    Prop_Name_OR_Type                       = 4537;
    TITLE                                   =   -1;
    TYPE_NO                                 =   -1;
    IO_FLAG                                 =   -1;
    NBP                                     =   -1;
    Inpts_R_status                          =   -1;
    Inpts_S_status                          =   -1;
    Inpts_T_status                          =   -1;
    Inpts_NBP_status                        =   -1;
}

DEFAULTS(COMMON)
{
    ISOLID                                  =    15;
    Iint                                    =     1;
    Inpts_R                                 =     2;
    Inpts_S                                 =     2;
    Inpts_T                                 =     2;
    VECTOR_X                                =   1.0;
    deltaT_min                              = 1.0e6;
    dn                                      =   0.1;
    qa                                      =  1.10;
    qb                                      =  0.05;
    Prop_Name_OR_Type                       =     0;
    vdef_min                                = 0.00;
    vdef_max                                = 0.00;
    ASP_max                                 = 0.00;
    COL_min                                 = 0.00;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
       ENUM_VALUE_FLAG=TRUE;
       ADD(1, "1:Hide in Menu/Export");
       ADD(2, "2:Show in Menu/Export");
       ADD(3, "3:Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Prop_Name_OR_Type == 2)
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TYPE21/");

    }
    else
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TSH_ORTH/");
    }
    RADIO(ISOLID)
    {
        ADD(14, "14:HA8 Locking-Free 8-Node Thick Shell, Co-Rotational, Full Integration, Variable Number of Gauss Points in All Directions.");
        ADD(15, "15:HSEPH/PA6 Thick Shell (8- and 6-Node Respectively), Co-Rotational, Under Integrated (1-Point In-Plan Quadrature) with Physical Stabilization, Variable Number of Integration Points in Thickness Direction.");
    }
    RADIO(Ismstr)
    {
        ADD(0, "0:Default, Set to Value Defined in /DEF_SOLID.");
        ADD(1, "1:Small Strain from Time=0.");
        ADD(2, "2:Full Geometric Nonlinearities with Possible Small Strain Formulation in RADIOSS Engine.");
        ADD(3, "3:Simplified Small Strain Formulation from Time=0.");
        ADD(4, "4:Full Geometric Nonlinearities.");
    }
    RADIO(Icstr)
    {
        ADD(001, "001:Reduced Stress Integration in T Direction.");
        ADD(010, "010:Reduced Stress Integration in S Direction.");
        ADD(100, "100:Reduced Stress Integration in R Direction.");
    }
    if(ISOLID==15 )
    {
        RADIO(Inpts_S)
        {
            ADD(0, "0");
            ADD(1, "1");
            ADD(2, "2");
            ADD(3, "3");
            ADD(4, "4");
            ADD(5, "5");
            ADD(6, "6");
            ADD(7, "7");
            ADD(8, "8");
            ADD(9, "9");
        }
        SCALAR(dn);
    }
    else if(ISOLID==14 )
    {
        RADIO(Inpts_R)
        {
            ADD(0, "0");
            ADD(2, "2");
            ADD(3, "3");
            ADD(4, "4");
            ADD(5, "5");
            ADD(6, "6");
            ADD(7, "7");
            ADD(8, "8");
            ADD(9, "9");
        }
        RADIO(Inpts_S)
        {
            ADD(0, "0");
            ADD(2, "2");
            ADD(3, "3");
            ADD(4, "4");
            ADD(5, "5");
            ADD(6, "6");
            ADD(7, "7");
            ADD(8, "8");
            ADD(9, "9");
        }
        RADIO(Inpts_T)
        {
            ADD(0, "0");
            ADD(2, "2");
            ADD(3, "3");
            ADD(4, "4");
            ADD(5, "5");
            ADD(6, "6");
            ADD(7, "7");
            ADD(8, "8");
            ADD(9, "9");
        }
    }
    ASSIGN(NBP, [$Inpts_R*100+$Inpts_S*10+$Inpts_T]);
    SCALAR(qa);
    SCALAR(qb);
    DATA(NODE1);
    DATA(NODE2);
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(VECTOR_X, [@getentityvalue(nodes,$NODE2,x)] - [@getentityvalue(nodes,$NODE1,x)] );
        ASSIGN(VECTOR_Y, [@getentityvalue(nodes,$NODE2,y)] - [@getentityvalue(nodes,$NODE1,y)]);
        ASSIGN(VECTOR_Z, [@getentityvalue(nodes,$NODE2,z)] - [@getentityvalue(nodes,$NODE1,z)]);
    }
    else
    {
    SCALAR(VECTOR_X);
    SCALAR(VECTOR_Y);
    SCALAR(VECTOR_Z);
    }
    DATA(SKEW_CSID) {/FILTER/Framefix/0/EQ;}
    RADIO(Iorth)
    {
        ADD(0, "0:The First Axis of Orthotropy is Maintained at Constant Angle w.r.t. the Orthonormal Co-Rotational Element Coordinate System.");
        ADD(1, "1:The First Orthotropy Direction is Constant w.r.t. a Non-Orthonormal Isoparametric Coordinates.");
    }
    SCALAR(MAT_BETA)  { DIMENSION="a";   }
    SCALAR(deltaT_min){ DIMENSION="t";          }
    RADIO(Icontrol)
    {
        ADD( 0,"0: Use value in /DEF_SOLID");
        ADD( 1,"1: distortion control set-on");
        ADD( 2,"2: distortion control set-off");
    }
}

//File format for Radioss 2025
FORMAT(radioss2025)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE21/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/TSH_ORTH/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    ASSIGN(Inpts_R_status,_GET_DISPLAY_STATUS(Inpts_R),EXPORT);
    ASSIGN(Inpts_S_status,_GET_DISPLAY_STATUS(Inpts_S),EXPORT);
    ASSIGN(Inpts_T_status,_GET_DISPLAY_STATUS(Inpts_T),EXPORT);
    if(IO_FLAG == 0)
    {
        if(Inpts_T_status == 1 && Inpts_S_status == 1 && Inpts_R_status == 1) 
        {
            ASSIGN(NBP,Inpts_R*100,EXPORT);
            ASSIGN(NBP,NBP +(Inpts_S*10),EXPORT);
            ASSIGN(NBP,NBP + Inpts_T,EXPORT);
        }
        else
        {
            ASSIGN(NBP,Inpts_S,EXPORT);
        }
    }
    COMMENT("#   Isolid    Ismstr                         Icstr     Inpts                                      Dn");
    CARD("%10d%10d                    %10d%10d                    %20lg",ISOLID,Ismstr,Icstr,NBP,dn);
    //
    ASSIGN(Inpts_NBP_status,_GET_DISPLAY_STATUS(NBP),IMPORT);
    if(IO_FLAG == 1  && Inpts_NBP_status != 0) 
    {
        if(NBP > 200)
        {
            ASSIGN(Inpts_R,NBP / 100, IMPORT);
            ASSIGN(Inpts_T,NBP - (Inpts_R*100), IMPORT);
            ASSIGN(Inpts_S,Inpts_T / 10, IMPORT);
            ASSIGN(Inpts_T,Inpts_T - (Inpts_S*10), IMPORT);
        }
        else
        {
            ASSIGN(Inpts_S,NBP, IMPORT);
        }
    }
    COMMENT("#                 qa                  qb");
    CARD("%20lg%20lg",qa,qb);
    //
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,x)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,x)], EXPORT);
        ASSIGN(VECTOR_X, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,y)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,y)], EXPORT);
        ASSIGN(VECTOR_Y, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,z)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,z)], EXPORT);
        ASSIGN(VECTOR_Z, n2-n1, EXPORT);
    }
    COMMENT("#                 Vx                  Vy                  Vz   skew_ID     Iorth");
    CARD("%20lg%20lg%20lg%10d%10d",VECTOR_X,VECTOR_Y,VECTOR_Z,SKEW_CSID,Iorth);
    COMMENT("#                Phi");
    CARD("%20lg",MAT_BETA);
    COMMENT("#         deltaT_min            vdef_min            vdef_max             ASP_max             COL_min");
    CARD("%20lg%20lg%20lg%20lg%20lg",deltaT_min,vdef_min,vdef_max,ASP_max,COL_min);
// blanc reserved for sph
        COMMENT("#                     Icontrol");
        CARD("%20s%10d",_BLANK_,Icontrol);
}
//File format for Radioss 2023
FORMAT(radioss2023)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE21/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/TSH_ORTH/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    ASSIGN(Inpts_R_status,_GET_DISPLAY_STATUS(Inpts_R),EXPORT);
    ASSIGN(Inpts_S_status,_GET_DISPLAY_STATUS(Inpts_S),EXPORT);
    ASSIGN(Inpts_T_status,_GET_DISPLAY_STATUS(Inpts_T),EXPORT);
    if(IO_FLAG == 0)
    {
        if(Inpts_T_status == 1 && Inpts_S_status == 1 && Inpts_R_status == 1) 
        {
            ASSIGN(NBP,Inpts_R*100,EXPORT);
            ASSIGN(NBP,NBP +(Inpts_S*10),EXPORT);
            ASSIGN(NBP,NBP + Inpts_T,EXPORT);
        }
        else
        {
            ASSIGN(NBP,Inpts_S,EXPORT);
        }
    }
    COMMENT("#   Isolid    Ismstr                         Icstr     Inpts                                      Dn");
    CARD("%10d%10d                    %10d%10d                    %20lg",ISOLID,Ismstr,Icstr,NBP,dn);
    //
    ASSIGN(Inpts_NBP_status,_GET_DISPLAY_STATUS(NBP),IMPORT);
    if(IO_FLAG == 1  && Inpts_NBP_status != 0) 
    {
        if(NBP > 200)
        {
            ASSIGN(Inpts_R,NBP / 100, IMPORT);
            ASSIGN(Inpts_T,NBP - (Inpts_R*100), IMPORT);
            ASSIGN(Inpts_S,Inpts_T / 10, IMPORT);
            ASSIGN(Inpts_T,Inpts_T - (Inpts_S*10), IMPORT);
        }
        else
        {
            ASSIGN(Inpts_S,NBP, IMPORT);
        }
    }
    COMMENT("#                 qa                  qb");
    CARD("%20lg%20lg",qa,qb);
    //
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,x)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,x)], EXPORT);
        ASSIGN(VECTOR_X, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,y)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,y)], EXPORT);
        ASSIGN(VECTOR_Y, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,z)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,z)], EXPORT);
        ASSIGN(VECTOR_Z, n2-n1, EXPORT);
    }
    COMMENT("#                 Vx                  Vy                  Vz   skew_ID     Iorth");
    CARD("%20lg%20lg%20lg%10d%10d",VECTOR_X,VECTOR_Y,VECTOR_Z,SKEW_CSID,Iorth);
    COMMENT("#                Phi");
    CARD("%20lg",MAT_BETA);
    COMMENT("#         deltaT_min            vdef_min            vdef_max             ASP_max             COL_min");
    CARD("%20lg%20lg%20lg%20lg%20lg",deltaT_min,vdef_min,vdef_max,ASP_max,COL_min);
}
//File format for Radioss 2018
FORMAT(radioss2018)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE21/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/TSH_ORTH/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    ASSIGN(Inpts_R_status,_GET_DISPLAY_STATUS(Inpts_R),EXPORT);
    ASSIGN(Inpts_S_status,_GET_DISPLAY_STATUS(Inpts_S),EXPORT);
    ASSIGN(Inpts_T_status,_GET_DISPLAY_STATUS(Inpts_T),EXPORT);
    if(IO_FLAG == 0)
    {
        if(Inpts_T_status == 1 && Inpts_S_status == 1 && Inpts_R_status == 1) 
        {
            ASSIGN(NBP,Inpts_R*100,EXPORT);
            ASSIGN(NBP,NBP +(Inpts_S*10),EXPORT);
            ASSIGN(NBP,NBP + Inpts_T,EXPORT);
        }
        else
        {
            ASSIGN(NBP,Inpts_S,EXPORT);
        }
    }
    COMMENT("#   Isolid    Ismstr                         Icstr     Inpts                                      Dn");
    CARD("%10d%10d                    %10d%10d                    %20lg",ISOLID,Ismstr,Icstr,NBP,dn);
    //
    ASSIGN(Inpts_NBP_status,_GET_DISPLAY_STATUS(NBP),IMPORT);
    if(IO_FLAG == 1  && Inpts_NBP_status != 0) 
    {
        if(NBP > 200)
        {
            ASSIGN(Inpts_R,NBP / 100, IMPORT);
            ASSIGN(Inpts_T,NBP - (Inpts_R*100), IMPORT);
            ASSIGN(Inpts_S,Inpts_T / 10, IMPORT);
            ASSIGN(Inpts_T,Inpts_T - (Inpts_S*10), IMPORT);
        }
        else
        {
            ASSIGN(Inpts_S,NBP, IMPORT);
        }
    }
    COMMENT("#                 qa                  qb");
    CARD("%20lg%20lg",qa,qb);
    //
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,x)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,x)], EXPORT);
        ASSIGN(VECTOR_X, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,y)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,y)], EXPORT);
        ASSIGN(VECTOR_Y, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,z)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,z)], EXPORT);
        ASSIGN(VECTOR_Z, n2-n1, EXPORT);
    }
    COMMENT("#                 Vx                  Vy                  Vz   skew_ID     Iorth");
    CARD("%20lg%20lg%20lg%10d%10d",VECTOR_X,VECTOR_Y,VECTOR_Z,SKEW_CSID,Iorth);
    COMMENT("#                Phi");
    CARD("%20lg",MAT_BETA);
    COMMENT("#         deltaT_min");
    CARD("%20lg",deltaT_min);
}

//File format for Radioss 140
FORMAT(radioss140)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE21/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/TSH_ORTH/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    ASSIGN(Inpts_R_status,_GET_DISPLAY_STATUS(Inpts_R),EXPORT);
    ASSIGN(Inpts_S_status,_GET_DISPLAY_STATUS(Inpts_S),EXPORT);
    ASSIGN(Inpts_T_status,_GET_DISPLAY_STATUS(Inpts_T),EXPORT);
    if(IO_FLAG == 0)
    {
        if(Inpts_T_status == 1 && Inpts_S_status == 1 && Inpts_R_status == 1) 
        {
            ASSIGN(NBP,Inpts_R*100,EXPORT);
            ASSIGN(NBP,NBP +(Inpts_S*10),EXPORT);
            ASSIGN(NBP,NBP + Inpts_T,EXPORT);
        }
        else
        {
            ASSIGN(NBP,Inpts_S,EXPORT);
        }
    }
    COMMENT("#   Isolid    Ismstr               Icpre     Icstr     Inpts                                      Dn");
    CARD("%10d%10d          %10d%10d%10d                    %20lg",ISOLID,Ismstr,Icpre,Icstr,NBP,dn);
    //
    ASSIGN(Inpts_NBP_status,_GET_DISPLAY_STATUS(NBP),IMPORT);
    if(IO_FLAG == 1  && Inpts_NBP_status != 0) 
    {
        if(NBP > 200)
        {
            ASSIGN(Inpts_R,NBP / 100, IMPORT);
            ASSIGN(Inpts_T,NBP - (Inpts_R*100), IMPORT);
            ASSIGN(Inpts_S,Inpts_T / 10, IMPORT);
            ASSIGN(Inpts_T,Inpts_T - (Inpts_S*10), IMPORT);
        }
        else
        {
            ASSIGN(Inpts_S,NBP, IMPORT);
        }
    }
    COMMENT("#                 qa                  qb");
    CARD("%20lg%20lg",qa,qb);
    //
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,x)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,x)], EXPORT);
        ASSIGN(VECTOR_X, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,y)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,y)], EXPORT);
        ASSIGN(VECTOR_Y, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,z)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,z)], EXPORT);
        ASSIGN(VECTOR_Z, n2-n1, EXPORT);
    }
    COMMENT("#                 Vx                  Vy                  Vz   skew_ID     Iorth");
    CARD("%20lg%20lg%20lg%10d%10d",VECTOR_X,VECTOR_Y,VECTOR_Z,SKEW_CSID,Iorth);
    COMMENT("#                Phi");
    CARD("%20lg",MAT_BETA);
    COMMENT("#         deltaT_min");
    CARD("%20lg",deltaT_min);
}

//File format for Radioss 90
FORMAT(radioss90)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE21/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/TSH_ORTH/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    ASSIGN(Inpts_R_status,_GET_DISPLAY_STATUS(Inpts_R),EXPORT);
    ASSIGN(Inpts_S_status,_GET_DISPLAY_STATUS(Inpts_S),EXPORT);
    ASSIGN(Inpts_T_status,_GET_DISPLAY_STATUS(Inpts_T),EXPORT);
    if(IO_FLAG == 0)
    {
        if(Inpts_T_status == 1 && Inpts_S_status == 1 && Inpts_R_status == 1) 
        {
            ASSIGN(NBP,Inpts_R*100,EXPORT);
            ASSIGN(NBP,NBP +(Inpts_S*10),EXPORT);
            ASSIGN(NBP,NBP + Inpts_T,EXPORT);
        }
        else
        {
            ASSIGN(NBP,Inpts_S,EXPORT);
        }
    }
    COMMENT("#   Isolid    Ismstr               Icpre     Icstr     Inpts      Iint                            Dn");
    CARD("%10d%10d          %10d%10d%10d%10d          %20lg",ISOLID,Ismstr,Icpre,Icstr,NBP,Iint,dn);
    //
    ASSIGN(Inpts_NBP_status,_GET_DISPLAY_STATUS(NBP),IMPORT);
    if(IO_FLAG == 1  && Inpts_NBP_status != 0) 
    {
        if(NBP > 200)
        {
            ASSIGN(Inpts_R,NBP / 100, IMPORT);
            ASSIGN(Inpts_T,NBP - (Inpts_R*100), IMPORT);
            ASSIGN(Inpts_S,Inpts_T / 10, IMPORT);
            ASSIGN(Inpts_T,Inpts_T - (Inpts_S*10), IMPORT);
        }
        else
        {
            ASSIGN(Inpts_S,NBP, IMPORT);
        }
    }
    COMMENT("#                 qa                  qb");
    CARD("%20lg%20lg",qa,qb);
    //
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,x)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,x)], EXPORT);
        ASSIGN(VECTOR_X, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,y)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,y)], EXPORT);
        ASSIGN(VECTOR_Y, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,z)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,z)], EXPORT);
        ASSIGN(VECTOR_Z, n2-n1, EXPORT);
    }
    COMMENT("#                 Vx                  Vy                  Vz   skew_ID     Iorth");
    CARD("%20lg%20lg%20lg%10d%10d",VECTOR_X,VECTOR_Y,VECTOR_Z,SKEW_CSID,Iorth);
    COMMENT("#                Phi");
    CARD("%20lg",MAT_BETA);
    COMMENT("#         deltaT_min");
    CARD("%20lg",deltaT_min);
}

// File format for Radioss 51
FORMAT(radioss51) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE21/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/TSH_ORTH/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    ASSIGN(Inpts_R_status,_GET_DISPLAY_STATUS(Inpts_R),EXPORT);
    ASSIGN(Inpts_S_status,_GET_DISPLAY_STATUS(Inpts_S),EXPORT);
    ASSIGN(Inpts_T_status,_GET_DISPLAY_STATUS(Inpts_T),EXPORT);
    if(IO_FLAG == 0)
    {
        if(Inpts_T_status == 1 && Inpts_S_status == 1 && Inpts_R_status == 1) 
        {
            ASSIGN(NBP,Inpts_R*100,EXPORT);
            ASSIGN(NBP,NBP +(Inpts_S*10),EXPORT);
            ASSIGN(NBP,NBP + Inpts_T,EXPORT);
        }
        else
        {
            ASSIGN(NBP,Inpts_S,EXPORT);
        }
    }
    COMMENT("#   Isolid    Ismstr                         Icstr     Inpts      Iint                            Dn");
    CARD("%10d%10d                    %10d%10d%10d          %20lg",ISOLID,Ismstr,Icstr,NBP,Iint,dn);
    //
    ASSIGN(Inpts_NBP_status,_GET_DISPLAY_STATUS(NBP),IMPORT);
    if(IO_FLAG == 1  && Inpts_NBP_status != 0) 
    {
        if(NBP > 200)
        {
            ASSIGN(Inpts_R,NBP / 100, IMPORT);
            ASSIGN(Inpts_T,NBP - (Inpts_R*100), IMPORT);
            ASSIGN(Inpts_S,Inpts_T / 10, IMPORT);
            ASSIGN(Inpts_T,Inpts_T - (Inpts_S*10), IMPORT);
        }
        else
        {
            ASSIGN(Inpts_S,NBP, IMPORT);
        }
    }
    COMMENT("#                 qa                  qb");
    CARD("%20lg%20lg",qa,qb);
    //
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,x)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,x)], EXPORT);
        ASSIGN(VECTOR_X, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,y)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,y)], EXPORT);
        ASSIGN(VECTOR_Y, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,z)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,z)], EXPORT);
        ASSIGN(VECTOR_Z, n2-n1, EXPORT);
    }
    COMMENT("#                 Vx                  Vy                  Vz   skew_ID     Iorth");
    CARD("%20lg%20lg%20lg%10d%10d",VECTOR_X,VECTOR_Y,VECTOR_Z,SKEW_CSID,Iorth);
    COMMENT("#                Phi");
    CARD("%20lg",MAT_BETA);
    COMMENT("#         deltaT_min");
    CARD("%20lg",deltaT_min);
}
