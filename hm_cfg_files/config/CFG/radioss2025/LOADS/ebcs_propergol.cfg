//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// /EBCS/PROPERGOL 
//

ATTRIBUTES(COMMON)
{
    // INPUT ATTRIBUTES

    //  Card
    entityid                    = VALUE(SETS, "Surface identifier","surf_ID")  { SUBTYPES = (/SETS/SURF_IDPOOL); }
    sensor_id                   = VALUE(SENSOR, "Sensor identifier") {SUBTYPES=(/SENSOR/SENSOR_DEFINE);}
    submat_id                   = VALUE(INT, "Submaterial identifier");

    param_t                     = VALUE(FLOAT, "burnt gas temperature");
    rho0s                       = VALUE(FLOAT, "propergol density");
    param_n                     = VALUE(FLOAT, "Combustion parameter n");
    param_a                     = VALUE(FLOAT, "Combustion parameter a");
    ffunc_id                    = VALUE(FUNCT, "Function f(t)");
    fscaleX                     = VALUE(FLOAT, "X-scale factor for function f");
    fscaleY                     = VALUE(FLOAT, "Y-scale factor for function f");
    gfunc_id                    = VALUE(FUNCT, "Function g(T)");
    gscaleX                     = VALUE(FLOAT, "X-scale factor for function g");
    gscaleY                     = VALUE(FLOAT, "Y-scale factor for function g");
    hfunc_id                    = VALUE(FUNCT, "Function h(P)");
    hscaleX                     = VALUE(FLOAT, "X-scale factor for function h");
    hscaleY                     = VALUE(FLOAT, "Y-scale factor for function h");
    
    //HM INTERNAL 
    KEYWORD_STR                 = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                = SIZE("NUM_COMMENTS");
    CommentEnumField            = VALUE(INT, "User Comments");
    COMMENTS                    = ARRAY[NUM_COMMENTS](STRING, "Entity Comments");

    _DummyKeyword               = VALUE(INT, "");
    _dummy                      = VALUE(STRING, "");
    IO_FLAG                     = VALUE(INT, "IOFLAG");

    displayname                 = VALUE(STRING, "Elementary boundary condition:Non Reflecting Frontier","TITLE");
}

CHECK(COMMON)
{

}

DEFAULTS(COMMON)
{
    //  Card
    param_n                        = 0.0;
    param_a                        = 0.0;
    param_t                        = 300.0;
    rho0s                          = 0.0;
    submat_id                      = 1;
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //  Card

    //HM INTERNAL
    KEYWORD_STR                               = 9000;
    COMMENTS                                  = 5109;
    CommentEnumField                          = 7951;
    NUM_COMMENTS                              = 5110;

    _DummyKeyword                             = -1;
    _dummy                                    = -1;
    IO_FLAG                                   = -1;
}

GUI(COMMON)
{
    if(CommentEnumField == 2)
    {
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }

    ASSIGN(KEYWORD_STR, "/EBCS/PROPERGOL");

    //Title Card
    SCALAR(displayname, "ebcs_title")         { DIMENSION = "DIMENSIONLESS"; }

    //  Card
    DATA(entityid);
    SCALAR(param_n)                { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(param_a)                { DIMENSION = "pressure"; }
    //SCALAR(param_q)                { DIMENSION = "energy_per_unit_mass"; }
    SCALAR(param_t)                { DIMENSION = "k"; }
    SCALAR(rho0s)                  { DIMENSION = "density"; }

    optional :
      graphical FUNCTION(ffunc_id) {
      X_TITLE     = "Time"; Y_TITLE     = "Scale";
      X_DIMENSION="t"; Y_DIMENSION="DIMENSIONLESS";
      X_SCALING(fscaleX);    Y_SCALING(fscaleY);
      X_CAN_BE_NEGATIVE = FALSE;
      }

      graphical FUNCTION(gfunc_id) {
      X_TITLE     = "Temperature"; Y_TITLE     = "Scale";
      X_DIMENSION = "k"; Y_DIMENSION="DIMENSIONLESS";
      X_SCALING(gscaleX);    Y_SCALING(gscaleY);
      X_CAN_BE_NEGATIVE = FALSE;
      }

      graphical FUNCTION(hfunc_id) {
      X_TITLE     = "Pressure"; Y_TITLE     = "Scale";
      X_DIMENSION="pressure"; Y_DIMENSION="DIMENSIONLESS";
      X_SCALING(hscaleX);    Y_SCALING(hscaleY);
      X_CAN_BE_NEGATIVE = FALSE;
      }
}

// File format
FORMAT(radioss2025)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if(IO_FLAG == 0)
    {
       HEADER("/EBCS/PROPERGOL/%-d", _ID_);
    }
    else  // IMPORT
    {
       HEADER("/EBCS/PROPERGOL/%-s/%d",_dummy, _ID_);
    }

    //  Title
    CARD("%-100s", displayname);

    //  Card 
    COMMENT("#  surf_ID sensor_id submat_id");
    CARD("%10d%10d%10d", entityid, sensor_id, submat_id);
    //PROPERGOL PROPERTIES
    COMMENT("#              rho0s             param_t");
    CARD("%20lg%20lg",rho0s, param_t);
    //COMBUSTION MODEL
    COMMENT("#            param_a             param_n");
    CARD("%20lg%20lg", param_a, param_n);
    COMMENT("# ffunc_id             fscaleX             fscaleY");
    CARD("%10d%10s%20lg%20lg", ffunc_id, _BLANK_, fscaleX, fscaleY);
    COMMENT("# gfunc_id             gscaleX             gscaleY");
    CARD("%10d%10s%20lg%20lg", gfunc_id, _BLANK_, gscaleX, gscaleY);
    COMMENT("# hfunc_id             hscaleX             hscaleY");
    CARD("%10d%10s%20lg%20lg", hfunc_id, _BLANK_, hscaleX, hscaleY);
}
