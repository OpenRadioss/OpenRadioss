//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// SPH slide boundary condition Setup File
// 

// MCDS attributes description
ATTRIBUTES(COMMON) {
  // Data
  rad_inivel_type    = VALUE(STRING, "type");
  vector_X           = VALUE(FLOAT,  "Direction"); 
  vector_Y           = VALUE(FLOAT,  "Direction"); 
  vector_Z           = VALUE(FLOAT,  "Direction"); 
  inputsystem        = VALUE(SYSTEM, "Skew");
  // Support
  entityid           = VALUE(SETS,"Node group") { SUBTYPES = (/SETS/GRNOD); }
  displayname        = VALUE(STRING, "Title");
  sensor_id          = VALUE(SENSOR, "Sensor identifier") {SUBTYPES=(/SENSOR/SENSOR_DEFINE);}
  tstart             = VALUE(FLOAT, "Start time");
}

DEFINITIONS(COMMON) {
  _TRIPLE = (vector_X);
}

// GUI description (Common domain)
GUI(COMMON) {

  SCALAR(vector_X) 
  {
    if (rad_inivel_type == "TRA" ) { DIMENSION="velocity"; }
    else if (rad_inivel_type == "ROT" ) { DIMENSION="ang_velocity"; }
    else { DIMENSION="velocity"; }
  }
  SCALAR(vector_Y) 
  {
    if (rad_inivel_type == "TRA" ) { DIMENSION="velocity"; }
    else if (rad_inivel_type == "ROT" ) { DIMENSION="ang_velocity"; }
    else { DIMENSION="velocity"; }
  }
  SCALAR(vector_Z)
  {
    if (rad_inivel_type == "TRA" ) { DIMENSION="velocity"; }
    else if (rad_inivel_type == "ROT" ) { DIMENSION="ang_velocity"; }
    else { DIMENSION="velocity"; }
  }
 /* 
 mandatory:
  //FLAG(ILEVEL,"Rebound");
  graphical RADIO(rad_dir) {
    ADD("X","X");
    ADD("Y","Y");
    ADD("Z","Z");
  }
  //
 mandatory:
  graphical TOOL(inputsystem) { ORIGIN=MANDATORY; }
  //
  
 mandatory:
  graphical SUPPORT("Support") {
    OBJECTS=(SPHCEL,/COMPONENT/SPHCEL);
    ADD(entityid,"Node Group");
  }
  */
  /*
  optional:
  graphical RADIO(rad_sphbcs_ilev) {
     ADD(0,"0: (Real) particles crossing symmetry plane will progressively not be taken into account anymore in the computation");
     ADD(1,"1: (Real) particles will rebound on the symmetry plane");
  } 
*/  
}

// File format

FORMAT(radioss41) {
  HEADER("/INIVEL/%s/%d/%-40s",rad_inivel_type,_ID_, displayname);
  COMMENT("#             Vx              Vy              Vz Gnod_id");
  CARD("%16lg%16lg%16lg%8d",vector_X,vector_Y,vector_Z,entityid);
  //
 /* COMMENT("#  Node1   Node2   Node3   Node4   Node5   Node6   Node7   Node8   Node9  Node10");
  FREE_CELL_LIST(NB_NODES,"%8d",NODE,80) ;*/
}
FORMAT(radioss44) {
  HEADER("/INIVEL/%s/%d/%-40s",rad_inivel_type,_ID_, displayname);
  COMMENT("#             Vx              Vy              Vz Gnod_id Skew_id");
  CARD("%16lg%16lg%16lg%8d%8d",vector_X,vector_Y,vector_Z,entityid,inputsystem);
  //
  /*COMMENT("#  Node1   Node2   Node3   Node4   Node5   Node6   Node7   Node8   Node9  Node10");
  FREE_CELL_LIST(NB_NODES,"%8d",NODE,80) ;*/
}

FORMAT(radioss51) {
  HEADER("/INIVEL/%s/%d",rad_inivel_type,_ID_);
  CARD("%-100s", displayname);
  COMMENT("#                 Vx                  Vy                  Vz   Gnod_id   Skew_id");
  CARD("%20lg%20lg%20lg%10d%10d",vector_X,vector_Y,vector_Z,entityid,inputsystem);
}

// File format
FORMAT(radioss120) {
  HEADER("/INIVEL/%s/%d",rad_inivel_type,_ID_);
  CARD("%-100s", displayname);
  COMMENT("#                 Vx                  Vy                  Vz   Gnod_id   Skew_id");
  CARD("%20lg%20lg%20lg%10d%10d",vector_X,vector_Y,vector_Z,entityid,inputsystem);
}

FORMAT(radioss2025) {
  HEADER("/INIVEL/%s/%d",rad_inivel_type,_ID_);
  CARD("%-100s", displayname);
  COMMENT("#                 Vx                  Vy                  Vz   Gnod_id   Skew_id");
  CARD("%20lg%20lg%20lg%10d%10d",vector_X,vector_Y,vector_Z,entityid,inputsystem);
  COMMENT("#             tstart   sens_ID");
  CARD("%20lg%10d",tstart,sensor_id);
}
