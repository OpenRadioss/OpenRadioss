//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 129 setup file
//

ATTRIBUTES(COMMON)
{
    IO_FLAG                              = VALUE(INT, "");
    LAW_NO                               = VALUE(STRING, "");
    Mat_Name_OR_LawNo                    = VALUE(INT,  "RADIOSS_COMMENT_FLAG");
    TITLE                                = VALUE(STRING,"");
    KEYWORD_STR                          = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                         = SIZE("NUM_COMMENTS");
    COMMENTS                             = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField					                = VALUE(INT,    "User Comments");
    MAT_RHO                              = VALUE(FLOAT,  "Initial Density");
    MAT_E                                = VALUE(FLOAT,  "Young's Modulus");
    MAT_NU                               = VALUE(FLOAT,  "Poisson's Ratio");
    MAT_SIGY                             = VALUE(FLOAT,  "Initial yield stress");
    MAT_ALPHA                            = VALUE(FLOAT,  "Thermal expansion coefficient");
    MAT_TREF                             = VALUE(FLOAT,  "Reference temparature");
    MAT_ITAB                             = VALUE(FUNCT,  "Yield stress function table");
    MAT_FACY                             = VALUE(FLOAT,  "Scale factor for hardening table values");
    MAT_QR1                              = VALUE(FLOAT,  "Isotropic hardening parameter Qr1");
    MAT_CR1                              = VALUE(FLOAT,  "Isotropic hardening parameter Cr1");
    MAT_QR2                              = VALUE(FLOAT,  "Isotropic hardening parameter Qr2");
    MAT_CR2                              = VALUE(FLOAT,  "Isotropic hardening parameter Cr2");
    MAT_QX1                              = VALUE(FLOAT,  "Kinematic hardening exponent Qx1");
    MAT_CX1                              = VALUE(FLOAT,  "Kinematic hardening exponent Cx1");
    MAT_QX2                              = VALUE(FLOAT,  "Kinematic hardening exponent Qx2");
    MAT_CX2                              = VALUE(FLOAT,  "Kinematic hardening exponent Cx2");
    MAT_EPSP0                            = VALUE(FLOAT,  "Cowper-Symonds reference strain rate");
    MAT_CP                               = VALUE(FLOAT,  "Cowper-Symonds strain rate exponent");
    MAT_CRPA                             = VALUE(FLOAT,  "Creep rate A");
    MAT_CRPQ                             = VALUE(FLOAT,  "Creep activation energy");
    MAT_CRPN                             = VALUE(FLOAT,  "Creep exponent N");
    MAT_CRPM                             = VALUE(FLOAT,  "Creep exponent M");
    MAT_CRSIG                            = VALUE(FLOAT,  "Creep reference stress");
    MAT_CRT                              = VALUE(FLOAT,  "Creep reference time");
    MAT_CRPL         				                = VALUE(INT,    "Creep law selection flag");

    MAT_f_young                          = VALUE(FUNCT,  "Young module function vs temperature");
    MAT_f_nu                             = VALUE(FUNCT,  "Poisson coefficient function vs temperature");     
    MAT_f_yld                            = VALUE(FUNCT,  "Yield stress function vs temperature");     
    MAT_f_alpha                          = VALUE(FUNCT,  "Thermal expansion function vs temperature");   
    MAT_f_qr                             = VALUE(FUNCT,  "Hardening parameter QR function vs temperature");  
    MAT_f_qx                             = VALUE(FUNCT,  "Hardening parameter QX function vs temperature");  
    MAT_f_cc                             = VALUE(FUNCT,  "Reference strain rate function vs temperature");  
    MAT_f_cp                             = VALUE(FUNCT,  "Strain rate exponent function vs temperature");  
    MAT_fa                               = VALUE(FUNCT,  "Creep parameter A function vs temperature");  
    MAT_fn                               = VALUE(FUNCT,  "Creep parameter B function vs temperature");  
    MAT_fq                               = VALUE(FUNCT,  "Creep parameter Q function vs temperature");  
    MAT_fm                               = VALUE(FUNCT,  "Creep parameter M function vs temperature");  

    //RADIOSS_COMMENT                    = VALUE(STRING,  "Radioss_Comment");
    //RADIOSS_COMMENT_FLAG               = VALUE(INT,     "RADIOSS_COMMENT_FLAG");

        // HEAT
    Heat_Inp_opt                         = VALUE(INT,      "Heat");  
    SUBGRP_HEAT_MAT                      = VALUE(SUBOBJECT, "");
    // THERM_STRESS
    THERM_STRESS							                  = VALUE(INT,      "Therm Stress");
    SUBGRP_THERM_STRESS                  = VALUE(SUBOBJECT, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    COMMENTS                                = 5109;
    CommentEnumField						                  = 7951;
    MAT_RHO                                 = 118;
    MAT_E                                   = 2540;
    MAT_NU                                  = 2546;
    MAT_SIGY                                = 2557;
    MAT_CR1								                         = 2555;
    MAT_CR2                                 = 2556;
    MAT_QR1                                 = 2553;
    MAT_QR2                                 = 2554;
    NUM_COMMENTS                            = 5110;
    LAW_NO                                  = -1;
    Mat_Name_OR_LawNo                       = 4538;
    IO_FLAG                                 = -1;
    TITLE									= -1;

    // HEAT
    Heat_Inp_opt                            = 4346;
    SUBGRP_HEAT_MAT                         = -1;
    // THERM_STRESS
    THERM_STRESS                            = 4555;
    SUBGRP_THERM_STRESS                     = -1;

}

DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY                 = SCALAR(MAT_RHO);
    YOUNG_MODULUS                   = SCALAR(MAT_E);
    POISSON_RATIO                   = SCALAR(MAT_NU);
public:
    SOUND_SPEED                     = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                               = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                              = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID               = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}

CHECK(COMMON)
{
    MAT_RHO                                > 0.0;
}

DEFAULTS(COMMON)
{
    MAT_CR1                               = 0.0;
    MAT_CR2                               = 0.0;
    MAT_QR1                               = 0.0;
    MAT_QR2                               = 0.0;
    MAT_SIGY                              = 1E20;
    CommentEnumField						= 1;
    Mat_Name_OR_LawNo                       = 0;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if( CommentEnumField == 2)
    {
       SIZE(NUM_COMMENTS);
       ARRAY(NUM_COMMENTS,"")
       {
          SCALAR(COMMENTS);
       }
    }
    
    if(Mat_Name_OR_LawNo == 2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW129/");
    }
    else 
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/THERM_CREEP/");
    }
   
    mandatory:

    SCALAR(MAT_RHO)					    {DIMENSION = "density";}
    SCALAR(MAT_E)           {DIMENSION = "pressure";}
    SCALAR(MAT_NU)          {DIMENSION = "DIMENSIONLESS" ;}
    SCALAR(MAT_SIGY)        {DIMENSION = "pressure";}
    SCALAR(MAT_QR1)         {DIMENSION = "pressure";}
    SCALAR(MAT_QR2)         {DIMENSION = "pressure";}
    SCALAR(MAT_QX1)         {DIMENSION = "pressure";}
    SCALAR(MAT_QX2)         {DIMENSION = "pressure";}
    SCALAR(MAT_CR1)         {DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_CR2)         {DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_CX1)         {DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_CX2)         {DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_CP)          {DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_EPSP0)       {DIMENSION = "f";}
    SCALAR(MAT_CRPA)        {DIMENSION = "f";}
    SCALAR(MAT_CRPQ)        {DIMENSION = "energy";}
    SCALAR(MAT_CRSIG)       {DIMENSION = "pressure";}
    SCALAR(MAT_FACY)        {DIMENSION = "pressure";}
    SCALAR(MAT_TREF)        {DIMENSION = "k";     }
    SCALAR(MAT_CRT)         {DIMENSION = "t";  }

    optional:

    // HEAT data
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }
    // THERM_STRESS data
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
}



FORMAT (radioss2025)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if (IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW129/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/THERMO_ELASTO_VISCOPLASTIC_CREEP/%d",_ID_);
        CARD("%-100s", TITLE);
    }    
    
    COMMENT("#              Rho_i");
    CARD("%20lg",MAT_RHO);
    COMMENT("#                  E                  NU                SIGY               ALPHA                TREF");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_E,MAT_NU,MAT_SIGY,MAT_ALPHA,MAT_TREF);
    
    COMMENT("#  F_Young      F_Nu     F_Yld   F_Alpha");
    CARD("%10d%10d%10d%10d",MAT_f_young,MAT_f_nu,MAT_f_yld,MAT_f_alpha);
    
    COMMENT("#     Itab                          FacY");
    CARD("%10d          %20lg",MAT_ITAB,MAT_FACY);

    COMMENT("#                QR1                 CR1                 QR2                 CR2      F_QR");
    CARD("%20lg%20lg%20lg%20lg%10d",MAT_QR1,MAT_CR1,MAT_QR2,MAT_CR2,MAT_f_qr);
    COMMENT("#                QX1                 CX1                 QX2                 CX2      F_QX");
    CARD("%20lg%20lg%20lg%20lg%10d",MAT_QX1,MAT_CX1,MAT_QX2,MAT_CX2,MAT_f_qx);

    COMMENT("#             EPSP0                   CP      F_CC      F_CP");
    CARD("%20lg%20lg%10d%10d",MAT_EPSP0,MAT_CP,MAT_f_cc,MAT_f_cp);

    COMMENT("#               CRPA                CRPN                CRPM       F_A       F_N       F_M       F_M      CRPL");
    CARD("%20lg%20lg%20lg%10d%10d%10d%10d",MAT_CRPA,MAT_CRPN,MAT_CRPM,MAT_fa,MAT_fn,MAT_fm,MAT_CRPL);
    
    COMMENT("#              CRSIG                CRT       F_Q");
    CARD("%20lg%20lg%10d",MAT_CRSIG,MAT_CRT,MAT_fq);

    
    // HEAT data
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    // THERM_STRESS
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
