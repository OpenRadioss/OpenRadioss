//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//MATERIAL LAW127

ATTRIBUTES(COMMON) {
    KEYWORD_STR             = VALUE(STRING,"Solver Keyword");
    NUM_COMMENTS            = SIZE("No. of Comment Lines");
    COMMENTS                = ARRAY[NUM_COMMENTS](STRING, "Entity_Comments");
    CommentEnumField        = VALUE(INT,  "User Comments");

    // Elastic parameters
    MAT_RHO                = VALUE(FLOAT,"Initial density");
    LSDYNA_EA              = VALUE(FLOAT,"Young's modulus for tension in fiber direction 1");
    LSDYNA_EB              = VALUE(FLOAT,"Young's modulus in matrix direction 2");
    LSDYNA_EC              = VALUE(FLOAT,"Young's modulus in matrix direction 3");
    LSDYNA_GAB             = VALUE(FLOAT,"Shear modulus in plane 12");
    LSDYNA_GBC             = VALUE(FLOAT,"Shear modulus in plane 23");
    LSDYNA_GCA             = VALUE(FLOAT,"Shear modulus in plane 13");
    
    LSDYNA_PRBA            = VALUE(FLOAT,"Poisson's ratio in plane 12");
    LSDYNA_PRCA            = VALUE(FLOAT,"Poisson's ratio in plane 13");
    LSDYNA_PRCB            = VALUE(FLOAT,"Poisson's ratio in plane 23");

    LSD_SOFT               = VALUE(FLOAT, "Softening reduction factor for material strength in crashfront elements");
    LSD_FBRT               = VALUE(FLOAT, "Softening for fiber tensile strength");
    LSD_YCFAC              = VALUE(FLOAT, "Reduction factor for compressive fiber strength after matrix compressive failure");
    
    LSD_LCXC                = VALUE(FUNCT, "Load curve ID for XC vs. strain rate");
    LSD_LCXT                = VALUE(FUNCT, "Load curve ID for XT vs. strain rate");
    LSD_LCYC                = VALUE(FUNCT, "Load curve ID for YC vs. strain rate");
    LSD_LCYT                = VALUE(FUNCT, "Load curve ID for YT vs. strain rate");
    LSD_LCSC                = VALUE(FUNCT, "Load curve ID for SC vs. strain rate");

    LSD_MAT_XC              = VALUE(FLOAT, "Longitudinal compressive strength");
    LSD_MAT_XT              = VALUE(FLOAT, "Longitudinal tensile strength");
    LSD_MAT_YC              = VALUE(FLOAT, "Transverse compressive strength");
    LSD_MAT_YT              = VALUE(FLOAT, "Transverse tensile strength");
    LSD_MAT_SC              = VALUE(FLOAT, "Shear strength,");
    
    LSD_MAT_SLIMT1          = VALUE(FLOAT, "Factor to determine the minimum stress limit after stress maximum");
    LSD_MAT_SLIMC1          = VALUE(FLOAT, "Factor to determine the minimum stress limit after stress maximum");
    LSD_MAT_SLIMT2          = VALUE(FLOAT, "Factor to determine the minimum stress limit after stress maximum");  
    LSD_MAT_SLIMC2          = VALUE(FLOAT, "Factor to determine the minimum stress limit after stress maximum");
    LSD_MAT_SLIMS           = VALUE(FLOAT, "Factor to determine the minimum stress limit after stress maximum");

    FCUT                       = VALUE(FLOAT,"Equivalent strain rate cutoff frequency");
    // HEAT
    Heat_Inp_opt            = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT         = VALUE(SUBOBJECT, "");
    // THERM_STRESS
    THERM_STRESS            = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS     = VALUE(SUBOBJECT, "");

    TITLE                   = VALUE(STRING,"");
    IO_FLAG                 = VALUE(INT, "");
    Mat_Name_OR_LawNo       = VALUE(INT,  "RADIOSS_COMMENT_FLAG");
    LAW_NO                  = VALUE(STRING, "");
}   

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR             = 9000;
    NUM_COMMENTS            = 5110;
    COMMENTS                = 5109;
    CommentEnumField        = 7951;

    MAT_RHO           = -1;
    LSDYNA_EA        = -1;
    LSDYNA_EB         = -1;
    LSDYNA_EC         = -1;
    LSDYNA_GAB        = -1;
    LSDYNA_GBC        = -1;
    LSDYNA_GCA        = -1;
    LSDYNA_PRBA       = -1;
    LSDYNA_PRCA       = -1;
    LSDYNA_PRCB       = -1;
    LSD_SOFT          = -1;
    LSD_FBRT          = -1;
    LSD_YCFAC         = -1;
    LSD_LCXC          = -1;
    LSD_LCXT          = -1;
    LSD_LCYC          = -1;
    LSD_LCYT          = -1;
    LSD_LCSC          = -1;
    LSD_MAT_XC        = -1;
    LSD_MAT_XT        = -1;
    LSD_MAT_YC        = -1;
    LSD_MAT_YT        = -1;
    LSD_MAT_SC        = -1;
    LSD_MAT_SLIMT1    = -1;
    LSD_MAT_SLIMC1    = -1;
    LSD_MAT_SLIMT2    = -1;  
    LSD_MAT_SLIMC2    = -1;
    LSD_MAT_SLIMS     = -1;
    FCUT              = -1;
    //HEAT
    Heat_Inp_opt            = 4346;
    SUBGRP_HEAT_MAT         = -1;
    // THERM_STRESS
    THERM_STRESS            = 4555;
    SUBGRP_THERM_STRESS     = -1;

    TITLE                   = -1;
    IO_FLAG                 = -1;
    Mat_Name_OR_LawNo       = -1;
    LAW_NO                  = -1;
}

DEFAULTS(COMMON) {
}

GUI(COMMON)    
{
    RADIO(CommentEnumField)   
    {

        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if( CommentEnumField == 2 )
    {
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }
    if(Mat_Name_OR_LawNo == 2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW125/");
    }
    else 
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAMINATED_COMPOSITE/");
    }

    SCALAR(MAT_RHO)         { DIMENSION="density";       } 
    SCALAR(LSDYNA_EA)          { DIMENSION="pressure";      }
    SCALAR(LSDYNA_EB)          { DIMENSION="pressure";      }
    SCALAR(LSDYNA_EC)          { DIMENSION="pressure";      }
    SCALAR(LSDYNA_GAB)     { DIMENSION="pressure";      }
    SCALAR(LSDYNA_GBC)     { DIMENSION="pressure";      }
    SCALAR(LSDYNA_GCA)     { DIMENSION="pressure";      }
    SCALAR(LSDYNA_PRBA)        { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_PRCA)        { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_PRCB)        { DIMENSION="DIMENSIONLESS"; }
    
    SCALAR(LSD_MAT_XT)          { DIMENSION="pressure";       } 
    SCALAR(LSD_MAT_YT)          { DIMENSION="pressure";      }
    SCALAR(LSD_MAT_XC)          { DIMENSION="pressure";      }
    SCALAR(LSD_MAT_YC)          { DIMENSION="pressure";      }
    SCALAR(LSD_MAT_SC)          { DIMENSION="pressure";      }
  
    SCALAR(LSD_MAT_SLIMT1)       { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSD_MAT_SLIMC1)       { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSD_MAT_SLIMT2)       { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSD_MAT_SLIMC2)       { DIMENSION="DIMENSIONLESS"; }  
    SCALAR(LSD_MAT_SLIMS)        { DIMENSION="DIMENSIONLESS"; }  
    SCALAR(LSD_SOFT     )        { DIMENSION="DIMENSIONLESS"; } 
    SCALAR(LSD_FBRT     )        { DIMENSION="DIMENSIONLESS"; } 
    SCALAR(LSD_YCFAC    )        { DIMENSION="DIMENSIONLESS"; } 

    SCALAR(FCUT)      { DIMENSION="f";}
    // HEAT data
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }

}
//file format
FORMAT(radioss2025) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW125/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/LAMINATED_COMPOSITE/%d",_ID_);
        CARD("%-100s", TITLE);
    }    
    COMMENT("#        Init. dens.");
    CARD("%20lg",MAT_RHO);
    COMMENT("#                 E1                  E2                  E3       ");
    CARD("%20lg%20lg%20lg",LSDYNA_EA,LSDYNA_EB,LSDYNA_EC);
    COMMENT("#                G12                G13                G23");
    CARD("%20lg%20lg%20lg",LSDYNA_GAB,LSDYNA_GCA,LSDYNA_GBC);
    COMMENT("#                Nu12                Nu31                Nu32");
    CARD("%20lg%20lg%20lg",LSDYNA_PRBA,LSDYNA_PRCA,LSDYNA_PRCB);
    
    COMMENT("#      Ifiunc_XT              XT          SLIMT1");
    CARD("%10d          %20lg%20lg",LSD_LCXT,LSD_MAT_XT,LSD_MAT_SLIMT1);  
    COMMENT("#      Ifiunc_XC              XC          SLIMC1");
    CARD("%10d          %20lg%20lg",LSD_LCXC,LSD_MAT_XC,LSD_MAT_SLIMC1);  
    COMMENT("#      Ifiunc_YT              YT          SLIMT2");
    CARD("%10d          %20lg%20lg",LSD_LCYT,LSD_MAT_YT,LSD_MAT_SLIMT2);  
    COMMENT("#      Ifiunc_YC              YC          SLIMC2");
    CARD("%10d          %20lg%20lg",LSD_LCYC,LSD_MAT_YC,LSD_MAT_SLIMC2);  
    COMMENT("#      Ifiunc_SC              SC          SLIMSC");
    CARD("%10d          %20lg%20lg",LSD_LCSC,LSD_MAT_SC,LSD_MAT_SLIMS);  
    CARD("%20lg%20lg%20lg",LSD_SOFT,LSD_FBRT,LSD_YCFAC);

    COMMENT("#               FCUT");
    CARD("%20lg",FCUT);
    //
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
