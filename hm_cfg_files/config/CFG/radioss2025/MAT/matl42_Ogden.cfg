//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Material law 00
ATTRIBUTES(COMMON)
{
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    MAT_REFRHO_Option                       = VALUE(INT,  "RefRho_Option");
    MAT_RHO                                 = VALUE(FLOAT,  "Initial Density");
    Refer_Rho                               = VALUE(FLOAT,  "Reference Density");
    MAT_NU                                  = VALUE(FLOAT,  "Poisson's Ratio");
    MAT_SIGCUT                              = VALUE(FLOAT,  "Cut-off Stress in Tension");
    Jstrain                                 = VALUE(INT,  "Strain Formulation");
    FUN_BULK                                = VALUE(FUNCT,  "Bulk Function Identifier");
    MAT_FScale                              = VALUE(FLOAT,  "Bulk Function Scale Factor");
    ORDER                                   = SIZE("Order of Prony Model");
    IFORM                                   = VALUE(INT,  "Incompressibility for Shell Elements Formulation Flag.");
    MAT_MUE1                                = VALUE(FLOAT,  "Ground Shear Modulus 1");
    MAT_MUE2                                = VALUE(FLOAT,  "Ground Shear Modulus 2");
    MAT_MUE3                                = VALUE(FLOAT,  "Ground Shear Modulus 3");
    MAT_MUE4                                = VALUE(FLOAT,  "Ground Shear Modulus 4");
    MAT_MUE5                                = VALUE(FLOAT,  "Ground Shear Modulus 5");
    MAT_MUE6                                = VALUE(FLOAT,  "Ground Shear Modulus 6");
    MAT_MUE7                                = VALUE(FLOAT,  "Ground Shear Modulus 7");
    MAT_MUE8                                = VALUE(FLOAT,  "Ground Shear Modulus 8");
    MAT_MUE9                                = VALUE(FLOAT,  "Ground Shear Modulus 9");
    MAT_MUE10                               = VALUE(FLOAT,  "Ground Shear Modulus 10");
    MAT_ALPHA11                             = VALUE(FLOAT,  "Parameter Alpha1");
    MAT_ALPHA22                             = VALUE(FLOAT,  "Parameter Alpha2");
    MAT_ALPHA33                             = VALUE(FLOAT,  "Parameter Alpha3");
    MAT_ALPHA44                             = VALUE(FLOAT,  "Parameter Alpha4");
    MAT_ALPHA55                             = VALUE(FLOAT,  "Parameter Alpha5");
    MAT_ALPHA6                              = VALUE(FLOAT,  "Parameter Alpha6");
    MAT_ALPHA7                              = VALUE(FLOAT,  "Parameter Alpha7");
    MAT_ALPHA8                              = VALUE(FLOAT,  "Parameter Alpha8");
    MAT_ALPHA9                              = VALUE(FLOAT,  "Parameter Alpha9");
    MAT_ALPHA10                             = VALUE(FLOAT,  "Parameter Alpha10");
    Gamma_arr                               = ARRAY[ORDER](FLOAT,  "Shear Modulus");
    Tau_arr                                 = ARRAY[ORDER](FLOAT,  "Time Relaxation");
    Mat_Name_OR_LawNo                       = VALUE(INT, "");
    TITLE                                   = VALUE(STRING,"");
    IO_FLAG                                 = VALUE(INT, "");
    LAW_NO                                  = VALUE(STRING, "");
    DUMMY                                   = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    // VISC_PRONY
    VISC_PRONY_option                       = VALUE(INT,"Visc Prony");
    SUBGRP_VISC_PRONY                       = VALUE(SUBOBJECT, "");
    // HEAT
    Heat_Inp_opt                            = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT                         = VALUE(SUBOBJECT, "");
    // THERM_STRESS
    THERM_STRESS                            = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS                     = VALUE(SUBOBJECT, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    NUM_COMMENTS                            = 5110;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;
    MAT_REFRHO_Option                       = 4285;
    MAT_RHO                                 = 118;
    Refer_Rho                               = 4229;
    MAT_NU                                  = 120;
    MAT_SIGCUT                              = 8011;
    Jstrain                                 = 8012;
    FUN_BULK                                = 8013;
    MAT_FScale                              = 4092;
    ORDER                                   = 4335;
    IFORM                                   = 4028;
    MAT_MUE1                                = 8014;
    MAT_MUE2                                = 8015;
    MAT_MUE3                                = 8016;
    MAT_MUE4                                = 8017;
    MAT_MUE5                                = 8018;
    MAT_ALPHA11                              = 8019;
    MAT_ALPHA22                              = 8020;
    MAT_ALPHA33                              = 8021;
    MAT_ALPHA44                              = 8022;
    MAT_ALPHA55                              = 8023;
    Gamma_arr                               = 4423;
    Tau_arr                                 = 4424;
    Mat_Name_OR_LawNo                       = 4538;
    LAW_NO                                  = -1;
    IO_FLAG                                 = -1;
    TITLE                                   = -1;
    DUMMY                                   = -1;    
    //HEAT
    Heat_Inp_opt                            = 4346;
    SUBGRP_HEAT_MAT                         = -1;
    // THERM_STRESS
    THERM_STRESS                            = 4555;
    SUBGRP_THERM_STRESS                     = -1;
    // VISC_PRONY
    VISC_PRONY_option                       = 4707;
    SUBGRP_VISC_PRONY                       = -1;
}
DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY                         = SCALAR(MAT_RHO);
    POISSON_RATIO                           = SCALAR(MAT_NU);
    MUE1 = SCALAR(MAT_MUE1);
    MUE2 = SCALAR(MAT_MUE2);
    MUE3 = SCALAR(MAT_MUE3);
    MUE4 = SCALAR(MAT_MUE4);
    MUE5 = SCALAR(MAT_MUE5);
    //SHEAR_MODULUS = SCALAR(Gamma_arr);
    SHEAR_MODULUS = MAX(MUE1,MUE2,MUE3,MUE4,MUE5);
    // FOR SHEAR_MODULUS take maximum of MAT_MUE1 to MAT_MUE5 and Gamma_arr
    YOUNG_MODULUS=EVAL(2*1.463*SHEAR_MODULUS);
    C1                      = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
    SOUND_SPEED             = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
    SOUND_SPEED_SOLID       = EVAL(((4*SHEAR_MODULUS/3+C1)/INITIAL_DENSITY)^0.5);
}
CHECK(COMMON)
{
    MAT_NU                                  >=0.0;
    MAT_NU                                  <0.5;
    MAT_RHO                                 >0.0;
    ORDER                                   <=100;
}
DEFAULTS(COMMON)
{
    MAT_FScale                              = 1.0;
    MAT_SIGCUT                              = 1.0e30;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Mat_Name_OR_LawNo ==2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW42/");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/OGDEN/");
    }
    FLAG( MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho){ DIMENSION="density"; }
    }
    mandatory:
        SCALAR(MAT_RHO){ DIMENSION="density"; }
    optional:   
        SCALAR(MAT_NU){ DIMENSION ="DIMENSIONLESS"; }
        SCALAR(MAT_SIGCUT){ DIMENSION="pressure"; }

        DATA(FUN_BULK);
        SCALAR(MAT_FScale){ DIMENSION="pressure"; }
        SIZE(ORDER);
        RADIO(IFORM)
        {
            ADD(0, "0: Normal Stretch of Shell Elements is Calculated to Provide Element Incompressibility.");
            ADD(1, "1: Same Formulation as for Solid Elements is Used.");
        }
        SCALAR(MAT_MUE1)    { DIMENSION="pressure"; }
        SCALAR(MAT_MUE2)    { DIMENSION="pressure"; }
        SCALAR(MAT_MUE3)    { DIMENSION="pressure"; }
        SCALAR(MAT_MUE4)    { DIMENSION="pressure"; }
        SCALAR(MAT_MUE5)    { DIMENSION="pressure"; }
        SCALAR(MAT_MUE6)    { DIMENSION="pressure"; }
        SCALAR(MAT_MUE7)    { DIMENSION="pressure"; }
        SCALAR(MAT_MUE8)    { DIMENSION="pressure"; }
        SCALAR(MAT_MUE9)    { DIMENSION="pressure"; }
        SCALAR(MAT_MUE10)   { DIMENSION="pressure"; }
        SCALAR(MAT_ALPHA11) { DIMENSION ="DIMENSIONLESS"; }
        SCALAR(MAT_ALPHA22) { DIMENSION ="DIMENSIONLESS"; }
        SCALAR(MAT_ALPHA33) { DIMENSION ="DIMENSIONLESS"; }
        SCALAR(MAT_ALPHA44) { DIMENSION ="DIMENSIONLESS"; }
        SCALAR(MAT_ALPHA55) { DIMENSION ="DIMENSIONLESS"; }
        SCALAR(MAT_ALPHA6)  { DIMENSION ="DIMENSIONLESS"; }
        SCALAR(MAT_ALPHA7)  { DIMENSION ="DIMENSIONLESS"; }
        SCALAR(MAT_ALPHA8)  { DIMENSION ="DIMENSIONLESS"; }
        SCALAR(MAT_ALPHA9)  { DIMENSION ="DIMENSIONLESS"; }
        SCALAR(MAT_ALPHA10) { DIMENSION ="DIMENSIONLESS"; }
        ARRAY(ORDER,"")
        {
            SCALAR(Gamma_arr){ DIMENSION="pressure"; }
            SCALAR(Tau_arr)  { DIMENSION="t"; }
        }
    optional:
        // HEAT data
        graphical FLAG(Heat_Inp_opt);
        if (Heat_Inp_opt!= 0) {
            SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
        }
        // THERM_STRESS
        graphical FLAG(THERM_STRESS);
        if (THERM_STRESS!= 0) {
            SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
        } 
        // VISC_PRONY data
        graphical FLAG(VISC_PRONY_option);
        if(VISC_PRONY_option!=0)
        {
            SUBOBJECT(SUBGRP_VISC_PRONY) {SUBTYPES = (/SUBOBJECT/VISC);}
        }
    /* mandatory:
    graphical SUPPORT("Support") {
    OBJECTS=(/PART/QUAD,/PART/BRICK,/PART/TETRA4,/PART/LINEAR_3D,/PART/PENTA6,/PART/LINEAR_THICK,
    /PART/TETRA10,/PART/SHEL16,/PART/BRIC20,/PART/SPHCEL);
    ADD(PART,"Parts");
    }
    */
}
//File format

FORMAT(radioss2025) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW42/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/OGDEN/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option != FALSE)
    {
        COMMENT("#              RHO_I          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else
    {
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                 Nu           sigma_cut           funIDbulk         Fscale_bulk         M    I_form");
    CARD("%20lg%20lg%10d%10d%20lg%10d%10d",MAT_NU,MAT_SIGCUT,Jstrain,FUN_BULK,MAT_FScale,ORDER,IFORM);
    COMMENT("#               Mu_1                Mu_2                Mu_3                Mu_4                Mu_5");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_MUE1,MAT_MUE2,MAT_MUE3,MAT_MUE4,MAT_MUE5);
    COMMENT("#               Mu_6                Mu_7                Mu_8                Mu_9               Mu_10");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_MUE6,MAT_MUE7,MAT_MUE8,MAT_MUE9,MAT_MUE10);
    COMMENT("#            alpha_1             alpha_2             alpha_3             alpha_4             alpha_5");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_ALPHA11,MAT_ALPHA22,MAT_ALPHA33,MAT_ALPHA44,MAT_ALPHA55);
    COMMENT("#            alpha_6             alpha_7             alpha_8             alpha_9            alpha_10");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_ALPHA6,MAT_ALPHA7,MAT_ALPHA8,MAT_ALPHA9,MAT_ALPHA10);
    if(ORDER>0) {
        COMMENT("# Shear modulus");
        CELL_LIST(ORDER,"%20lg",Gamma_arr,100);
        COMMENT("# Time relaxation");
        CELL_LIST(ORDER,"%20lg",Tau_arr,100);
    }
    // HEAT data
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    // THERM_STRESS 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
    // VISC_PRONY data
    if(VISC_PRONY_option!=0)
    {
        SUBOBJECTS(SUBGRP_VISC_PRONY,/SUBOBJECT/VISC);
    }
}

FORMAT(radioss140) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW42/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/OGDEN/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option != FALSE)
    {
        COMMENT("#              RHO_I          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else
    {
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                 Nu           sigma_cut           funIDbulk         Fscale_bulk         M    I_form");
    CARD("%20lg%20lg%10d%10d%20lg%10d%10d",MAT_NU,MAT_SIGCUT,Jstrain,FUN_BULK,MAT_FScale,ORDER,IFORM);
    COMMENT("#               Mu_1                Mu_2                Mu_3                Mu_4                Mu_5");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_MUE1,MAT_MUE2,MAT_MUE3,MAT_MUE4,MAT_MUE5);
    COMMENT("# blank card");
    BLANK;
    COMMENT("#            alpha_1             alpha_2             alpha_3             alpha_4             alpha_5");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_ALPHA11,MAT_ALPHA22,MAT_ALPHA33,MAT_ALPHA44,MAT_ALPHA55);
    COMMENT("# blank card");
    BLANK;  
    if(ORDER>0) {
        COMMENT("# Shear modulus");
        CELL_LIST(ORDER,"%20lg",Gamma_arr,100);
        COMMENT("# Time relaxation");
        CELL_LIST(ORDER,"%20lg",Tau_arr,100);
    }
    // HEAT data
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    // THERM_STRESS 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
    // VISC_PRONY data
    if(VISC_PRONY_option!=0)
    {
        SUBOBJECTS(SUBGRP_VISC_PRONY,/SUBOBJECT/VISC);
    }
}

FORMAT(radioss110) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW42/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/OGDEN/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option != FALSE)
    {
        COMMENT("#              RHO_I          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else
    {
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                 Nu           sigma_cut           funIDbulk         Fscale_bulk         M");
    CARD("%20lg%20lg%10d%10d%20lg%10d",MAT_NU,MAT_SIGCUT,Jstrain,FUN_BULK,MAT_FScale,ORDER);
    COMMENT("#               Mu_1                Mu_2                Mu_3                Mu_4                Mu_5");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_MUE1,MAT_MUE2,MAT_MUE3,MAT_MUE4,MAT_MUE5);
    COMMENT("# blank card");
    BLANK; 
    COMMENT("#            alpha_1             alpha_2             alpha_3             alpha_4             alpha_5");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_ALPHA11,MAT_ALPHA22,MAT_ALPHA33,MAT_ALPHA44,MAT_ALPHA55);
    COMMENT("# blank card");
    BLANK;  
    if(ORDER>0) {
        COMMENT("# Shear modulus");
        CELL_LIST(ORDER,"%20lg",Gamma_arr,100);
        COMMENT("# Time relaxation");
        CELL_LIST(ORDER,"%20lg",Tau_arr,100);
    }
    // HEAT data
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    // THERM_STRESS 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
    // VISC_PRONY data
    if(VISC_PRONY_option!=0)
    {
        SUBOBJECTS(SUBGRP_VISC_PRONY,/SUBOBJECT/VISC);
    }
}
FORMAT(radioss100) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW42/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/OGDEN/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option != FALSE)
    {
        COMMENT("#              RHO_I          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else
    {
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                 Nu           sigma_cut  J_strain funIDbulk         Fscale_bulk         M");
    CARD("%20lg%20lg%10d%10d%20lg%10d",MAT_NU,MAT_SIGCUT,Jstrain, FUN_BULK,MAT_FScale,ORDER);
    COMMENT("#               Mu_1                Mu_2                Mu_3                Mu_4                Mu_5");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_MUE1,MAT_MUE2,MAT_MUE3,MAT_MUE4,MAT_MUE5);
    COMMENT("# blank card");
    BLANK;  
    COMMENT("#            alpha_1             alpha_2             alpha_3             alpha_4             alpha_5");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_ALPHA11,MAT_ALPHA22,MAT_ALPHA33,MAT_ALPHA44,MAT_ALPHA55);
    COMMENT("# blank card");
    BLANK;  
    if(ORDER>0) {
        COMMENT("# Shear modulus");
        CELL_LIST(ORDER,"%20lg",Gamma_arr,100);
        COMMENT("# Time relaxation");
        CELL_LIST(ORDER,"%20lg",Tau_arr,100);
    }
    // HEAT data
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    // THERM_STRESS 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
FORMAT(radioss51) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW42/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/OGDEN/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option != FALSE)
    {
        COMMENT("#              RHO_I          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else
    {
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                 Nu           sigma_cut  J_strain funIDbulk         Fscale_bulk");
    CARD("%20lg%20lg%10d%10d%20lg",MAT_NU,MAT_SIGCUT,Jstrain, FUN_BULK,MAT_FScale);
    COMMENT("#               Mu_1                Mu_2                Mu_3                Mu_4                Mu_5");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_MUE1,MAT_MUE2,MAT_MUE3,MAT_MUE4,MAT_MUE5);
    COMMENT("# blank card");
    BLANK; 
    COMMENT("#            alpha_1             alpha_2             alpha_3             alpha_4             alpha_5");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_ALPHA11,MAT_ALPHA22,MAT_ALPHA33,MAT_ALPHA44,MAT_ALPHA55);
    COMMENT("# blank card");
    BLANK;  
    // HEAT data
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    // THERM_STRESS 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
FORMAT(radioss41) {
    COMMENT("#          RHO_I");
    CARD("%16lg",MAT_RHO);
    COMMENT("#             Nu       sigma_cut Jstrain   fbulk");
    CARD("%16lg%16lg%8d%8d",MAT_NU,MAT_SIGCUT,Jstrain,FUN_BULK);
    COMMENT("#           Mu_1            Mu_2            Mu_3            Mu_4            Mu_5");
    CARD("%16lg%16lg%16lg%16lg%16lg",MAT_MUE1,MAT_MUE2,MAT_MUE3,MAT_MUE4,MAT_MUE5);
    COMMENT("# blank card");
    BLANK;             
    COMMENT("#         alpha1          alpha2          alpha3          alpha4          alpha5");
    CARD("%16lg%16lg%16lg%16lg%16lg",MAT_ALPHA11,MAT_ALPHA22,MAT_ALPHA33,MAT_ALPHA44,MAT_ALPHA55);
    COMMENT("# blank card");
    BLANK;
}
