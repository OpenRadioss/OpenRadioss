//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 128 setup file
//

ATTRIBUTES(COMMON)
{
    IO_FLAG                                 = VALUE(INT, "");
    LAW_NO                                  = VALUE(STRING, "");
    Mat_Name_OR_LawNo                       = VALUE(INT,  "RADIOSS_COMMENT_FLAG");
    TITLE                                   = VALUE(STRING,"");
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField					                  	= VALUE(INT,  "User Comments");
    MAT_RHO                                 = VALUE(FLOAT,  "Initial Density");
    LAW128_E                                = VALUE(FLOAT,  "Young's Modulus");
    LAW128_NU                               = VALUE(FLOAT,  "Poisson's Ratio");
    LAW128_SIGY                             = VALUE(FLOAT,  "Initial yield stress");
    LAW128_ITAB                             = VALUE(FUNCT,  "Yield stress function table");
    LAW128_FACY                             = VALUE(FLOAT,  "Scale factor for hardening table values");
    LAW128_FACX                             = VALUE(FLOAT,  "Scale factor for hardening table abscissa");
    LAW128_QR1                              = VALUE(FLOAT,  "Isotropic hardening parameter Qr1");
    LAW128_CR1                              = VALUE(FLOAT,  "Isotropic hardening parameter Cr1");
    LAW128_QR2                              = VALUE(FLOAT,  "Isotropic hardening parameter Qr2");
    LAW128_CR2                              = VALUE(FLOAT,  "Isotropic hardening parameter Cr2");
    LAW128_QX1                              = VALUE(FLOAT,  "Kinematic hardening parameter Qx1");
    LAW128_CX1                              = VALUE(FLOAT,  "Kinematic hardening parameter Cx1");
    LAW128_QX2                              = VALUE(FLOAT,  "Kinematic hardening parameter Qx2");
    LAW128_CX2                              = VALUE(FLOAT,  "Kinematic hardening parameter Cx2");
    LAW128_EPSP0                            = VALUE(FLOAT,  "Reference strain rate");
    LAW128_CP                               = VALUE(FLOAT,  "Cowper-Symonds strain rate exponent");
    LAW128_R00                              = VALUE(FLOAT,  "Lankford parameter R00");
    LAW128_R45                              = VALUE(FLOAT,  "Lankford parameter R45");
    LAW128_R90                              = VALUE(FLOAT,  "Lankford parameter R90");
    LAW128_F                                = VALUE(FLOAT,  "Yield parameter F");
    LAW128_G                                = VALUE(FLOAT,  "Yield parameter G");
    LAW128_H                                = VALUE(FLOAT,  "Yield parameter H");
    LAW128_L                                = VALUE(FLOAT,  "Yield parameter L");
    LAW128_M                                = VALUE(FLOAT,  "Yield parameter M");
    LAW128_N                                = VALUE(FLOAT,  "Yield parameter N");

    //RADIOSS_COMMENT                       = VALUE(STRING,  "Radioss_Comment");
    //RADIOSS_COMMENT_FLAG                  = VALUE(INT,     "RADIOSS_COMMENT_FLAG");

        // HEAT
    Heat_Inp_opt                            = VALUE(INT,      "Heat");  
    SUBGRP_HEAT_MAT                         = VALUE(SUBOBJECT, "");
    // THERM_STRESS
    THERM_STRESS							                     = VALUE(INT,      "Therm Stress");
    SUBGRP_THERM_STRESS                     = VALUE(SUBOBJECT, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    COMMENTS                                = 5109;
    CommentEnumField						                  = 7951;
    LAW128_CR1								                      = 2555;
    LAW128_CR2                              = 2556;
    LAW128_E                                = 2540;
    LAW128_NU                               = 2546;
    LAW128_QR1                              = 2553;
    LAW128_QR2                              = 2554;
    LAW128_SIGY                             = 2557;
    MAT_RHO                                 = 118;
    NUM_COMMENTS                            = 5110;
    LAW_NO                                  = -1;
    Mat_Name_OR_LawNo                       = 4538;
    IO_FLAG                                 = -1;
    TITLE									= -1;

    // HEAT
    Heat_Inp_opt                            = 4346;
    SUBGRP_HEAT_MAT                         = -1;
    // THERM_STRESS
    THERM_STRESS                            = 4555;
    SUBGRP_THERM_STRESS                     = -1;

}

DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY                 = SCALAR(MAT_RHO);
    YOUNG_MODULUS                   = SCALAR(LAW128_E);
    POISSON_RATIO                   = SCALAR(LAW128_E);
public:
    SOUND_SPEED                     = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                               = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                              = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID               = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}

CHECK(COMMON)
{
    MAT_RHO                                  > 0.0;
    MAT_RHO                                  > 0.0;
}

DEFAULTS(COMMON)
{
    LAW128_CR1                               = 0.0;
    LAW128_CR2                               = 0.0;
    LAW128_QR1                               = 0.0;
    LAW128_QR2                               = 0.0;
    LAW128_R00                               = 1.0;
    LAW128_R45                               = 1.0;
    LAW128_R90                               = 1.0;
    LAW128_SIGY                              = 1E20;
    CommentEnumField						= 1;
    Mat_Name_OR_LawNo                       = 0;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if( CommentEnumField == 2)
    {
       SIZE(NUM_COMMENTS);
       ARRAY(NUM_COMMENTS,"")
       {
          SCALAR(COMMENTS);
       }
    }
    
    ASSIGN(KEYWORD_STR, "/MAT");
    ASSIGN(KEYWORD_STR, "/LAW128/");
   
    mandatory:

    SCALAR(MAT_RHO)					       {DIMENSION = "density";}
    SCALAR(LAW128_E)           {DIMENSION = "pressure";}
    SCALAR(LAW128_NU)          {DIMENSION = "DIMENSIONLESS" ;}

    SCALAR(LAW128_SIGY)        {DIMENSION = "pressure";}
    SCALAR(LAW128_QR1)         {DIMENSION = "pressure";}
    SCALAR(LAW128_QR2)         {DIMENSION = "pressure";}
    SCALAR(LAW128_QX1)         {DIMENSION = "pressure";}
    SCALAR(LAW128_QX2)         {DIMENSION = "pressure";}
    SCALAR(LAW128_CR1)         {DIMENSION = "DIMENSIONLESS";}
    SCALAR(LAW128_CR2)         {DIMENSION = "DIMENSIONLESS";}
    SCALAR(LAW128_CX1)         {DIMENSION = "DIMENSIONLESS";}
    SCALAR(LAW128_CX2)         {DIMENSION = "DIMENSIONLESS";}
    SCALAR(LAW128_R00)         {DIMENSION = "DIMENSIONLESS";}
    SCALAR(LAW128_R45)         {DIMENSION = "DIMENSIONLESS";}
    SCALAR(LAW128_R90)         {DIMENSION = "DIMENSIONLESS";}
    SCALAR(LAW128_CP)          {DIMENSION = "DIMENSIONLESS";}
    SCALAR(LAW128_EPSP0)       {DIMENSION = "f";}
    SCALAR(LAW128_FACX)        {DIMENSION = "f";}
    SCALAR(LAW128_FACY)        {DIMENSION = "pressure";}

    optional:

    // HEAT data
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }
    // THERM_STRESS data
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
}



FORMAT (radioss2025)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
    }
    
    COMMENT("#              Rho_i");
    CARD("%20lg",MAT_RHO);
    COMMENT("#                  E                  NU                SIGY");
    CARD("%20lg%20lg%20lg",LAW128_E,LAW128_NU,LAW128_SIGY);
    COMMENT("#     Itab                          FacX                FacY");
    CARD("%10d          %20lg%20lg",LAW128_ITAB,LAW128_FACX,LAW128_FACY);
    COMMENT("#                QR1                 CR1                 QR2                 CR2");
    CARD("%20lg%20lg%20lg%20lg",LAW128_QR1,LAW128_CR1,LAW128_QR2,LAW128_CR2);
    COMMENT("#                QX1                 CX1                 QX2                 CX2");
    CARD("%20lg%20lg%20lg%20lg",LAW128_QX1,LAW128_CX1,LAW128_QX2,LAW128_CX2);
    COMMENT("#             EPSP0                  CP");
    CARD("%20lg%20lg",LAW128_EPSP0,LAW128_CP);
    COMMENT("#                R00                 R45                 R90");
    CARD("%20lg%20lg%20lg",LAW128_R00,LAW128_R45,LAW128_R90);
    COMMENT("#                  F                   G                   H");
    CARD("%20lg%20lg%20lg",LAW128_F,LAW128_G,LAW128_H);
    COMMENT("#                  L                   M                   N");
    CARD("%20lg%20lg%20lg",LAW128_L,LAW128_M,LAW128_N);

    
    // HEAT data
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    // THERM_STRESS
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
