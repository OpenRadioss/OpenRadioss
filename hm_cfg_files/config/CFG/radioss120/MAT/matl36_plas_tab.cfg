//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Material law 36 (PLAS_TAB) Setup File
ATTRIBUTES(COMMON) 
{
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    MAT_REFRHO_Option                       = VALUE(INT,  "RefRho_Option");
    MAT_RHO                                 = VALUE(FLOAT,  "Initial Density");
    Refer_Rho                               = VALUE(FLOAT,  "Reference Density");
    MAT_E                                   = VALUE(FLOAT,  "Young's Modulus");
    MAT_NU                                  = VALUE(FLOAT,  "Poisson's Ratio");
    MAT_EPS                                 = VALUE(FLOAT,  "Failure Plastic Strain");
    MAT_EPST1                               = VALUE(FLOAT,  "Tensile Failure Strain");
    MAT_EPST2                               = VALUE(FLOAT,  "Maximum Tensile Failure Damage");
    NFUNC                                   = SIZE("Number of Functions");
    Fsmooth                                 = VALUE(INT,  "Smooth Strain Rate Option Flag");
    MAT_HARD                                = VALUE(FLOAT,  "Hardening Coefficient");
    Fcut                                    = VALUE(FLOAT,  "Cutoff Frequency for Strain Rate Filtering");
    MAT_Epsilon_F                           = VALUE(FLOAT,  "Tensile Strain for Element Deletion");
    Xr_fun                                  = VALUE(FUNCT,  "Yield Factor Vs. Pressure Function");
    MAT_FScale                              = VALUE(FLOAT,  "Scale Factor for Yield Factor in Fct_IDp");
    Yr_fun                                  = VALUE(FUNCT,  "Function Identifier for the Scale Factor of Young Modulus, when Young Modulus is Function of the Plastic Strain");
    MAT_EFIB                                = VALUE(FLOAT,  "Saturated Young's Modulus for Infinitive Plastic Strain");
    MAT_C                                   = VALUE(FLOAT,  "Parameter for Young's Modulus Evolution");
    FUN_LOAD                                = ARRAY[NFUNC](FUNCT,  "Yield Stress Function");
    SCALE_LOAD                              = ARRAY[NFUNC](FLOAT,  "Scale Factor Ordinate (Stress)");
    STRAINRATE_LOAD                         = ARRAY[NFUNC](FLOAT,  "Strain Rate");
    Mat_Name_OR_LawNo                       = VALUE(INT, "");
    TITLE                                   = VALUE(STRING,"");
    IO_FLAG                                 = VALUE(INT, "");
    LAW_NO                                  = VALUE(STRING, "");
    DUMMY                                   = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    // HEAT
    Heat_Inp_opt                            = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT                         = VALUE(SUBOBJECT, "");
    // THERM_STRESS
    THERM_STRESS                            = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS                     = VALUE(SUBOBJECT, "");
}
SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    NUM_COMMENTS                            = 5110;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;
    MAT_REFRHO_Option                       = 4285;
    MAT_RHO                                 = 118;
    Refer_Rho                               = 4229;
    MAT_E                                   = 119;
    MAT_NU                                  = 120;
    MAT_EPS                                 = 195;
    MAT_EPST1                               = 5069;
    MAT_EPST2                               = 5071;
    NFUNC                                   = 5093;
    Fsmooth                                 = 5355;
    MAT_HARD                                = 71;
    Fcut                                    = 5356;
    MAT_Epsilon_F                           = 4093;
    Xr_fun                                  = 869;
    MAT_FScale                              = 4092;
    Yr_fun                                  = 870;
    MAT_EFIB                                = 363;
    MAT_C                                   = 996;
    FUN_LOAD                                = 4234;
    SCALE_LOAD                              = 4236;
    STRAINRATE_LOAD                         = 4235;
    Mat_Name_OR_LawNo                       = 4538;
    LAW_NO                                  = -1;
    IO_FLAG                                 = -1;
    TITLE                                   = -1;
    DUMMY                                   = -1;
    //HEAT
    Heat_Inp_opt                            = 4346;
    SUBGRP_HEAT_MAT                         = -1;
    // THERM_STRESS
    THERM_STRESS                            = 4555;
    SUBGRP_THERM_STRESS                     = -1;
}

DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY                         = SCALAR(MAT_RHO);
    YOUNG_MODULUS                           = SCALAR(MAT_E);
    POISSON_RATIO                           = SCALAR(MAT_NU);
public:
    SOUND_SPEED                             = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                                       = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                                      = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID                       = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}


CHECK(COMMON)
{
    Fcut                                    >=0.0;
    MAT_E                                   >0.0;
    MAT_EPS                                 >=0.0;
    MAT_EPST1                               >=0.0;
    MAT_EPST2                               >=0.0;
    MAT_Epsilon_F                           >=0.0;
    MAT_HARD                                >=0.0;
    MAT_HARD                                <=1.0;
    MAT_RHO                                 >0.0;
    MAT_RHO                                 >0.0;
    NFUNC                                   >0;
    NFUNC                                   <=50;
    STRAINRATE_LOAD                         >=0.0;
}

DEFAULTS(COMMON)
{
    Fcut                                    = 1.0e30;
    Fsmooth                                 = 0;
    MAT_EPS                                 = 1.0e30;
    MAT_EPST1                               = 1.0e30;
    MAT_EPST2                               = 2.0e30;
    MAT_Epsilon_F                           = 3.0e30;
    MAT_FScale                              = 1.0;
    //NFUNC                                 = 1;
}

GUI(COMMON)
{
    if( Mat_Name_OR_LawNo ==2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW36/");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/PLAS_TAB/");
    }
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    FLAG(MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho)   { DIMENSION="density";       }
    }
    mandatory:
        SCALAR(MAT_RHO)      { DIMENSION="density";}
        SCALAR(MAT_E)        { DIMENSION="pressure";}
        SCALAR(MAT_NU)       { DIMENSION ="DIMENSIONLESS"; }
    optional:
        SCALAR(MAT_EPS);
        SCALAR(MAT_EPST1);
        SCALAR(MAT_EPST2);
        //SCALAR(NFUNC);
        SIZE(NFUNC);
        //SCALAR(Fsmooth);
        RADIO(Fsmooth)
        {
            ADD(0,"0: No Strain Rate Smoothing");
            ADD(1,"1: Strain Rate Smoothing Active");
        }
        SCALAR(MAT_HARD);
        SCALAR(Fcut)         { DIMENSION="f"; }
        SCALAR(MAT_Epsilon_F);
        DATA(Xr_fun);
        SCALAR(MAT_FScale)    { DIMENSION="pressure";}
        DATA(Yr_fun);
        SCALAR(MAT_EFIB)      { DIMENSION="pressure";}
        SCALAR(MAT_C);
        ARRAY(NFUNC,"")
        {
            DATA(FUN_LOAD);
            SCALAR(SCALE_LOAD)      { DIMENSION="pressure";}
            SCALAR(STRAINRATE_LOAD) { DIMENSION="strain_rate";}
        }
    optional:
        // HEAT data
        graphical FLAG(Heat_Inp_opt);
        if (Heat_Inp_opt!= 0) {
            SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
        }
        // THERM_STRESS
        graphical FLAG(THERM_STRESS);
        if (THERM_STRESS!= 0) {
            SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
        } 
    /*mandatory:
    graphical SUPPORT("Support") {
    OBJECTS=(/PART/QUAD,/PART/BRICK,/PART/TETRA4,/PART/LINEAR_3D,/PART/PENTA6,/PART/LINEAR_THICK,
    /PART/TETRA10,/PART/SHEL16,/PART/BRIC20,/PART/SHELL,/PART/BEAM,/PART/SPHCEL);
    ADD(PART,"Parts");
    }*/
}
// File format
FORMAT(radioss120) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW36/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/PLAS_TAB/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#        Init. dens.          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#        Init. dens.");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                  E                  Nu           Eps_p_max               Eps_t               Eps_m");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_E,MAT_NU,MAT_EPS,MAT_EPST1,MAT_EPST2);
    COMMENT("#  N_funct  F_smooth              C_hard               F_cut               Eps_f");
    CARD("%10d%10d%20lg%20lg%20lg",NFUNC,Fsmooth,MAT_HARD,Fcut,MAT_Epsilon_F);
    COMMENT("# func_IDp              Fscale FUNCT_IDE                EINF                  CE");
    CARD("%10d%20lg%10d%20lg%20lg",Xr_fun,MAT_FScale,Yr_fun,MAT_EFIB,MAT_C);
    if(NFUNC>0) {
        COMMENT("# func_ID1  func_ID2  func_ID3  func_ID4  func_ID5");
        CELL_LIST(NFUNC,"%10d",FUN_LOAD,50);
        COMMENT("#           Fscale_1            Fscale_2            Fscale_3            Fscale_4            Fscale_5");
        CELL_LIST(NFUNC,"%20lg",SCALE_LOAD);
        //        COMMENT("#          Eps_dot_1           Eps_dot_2           Eps_dot_3           Eps_dot_4           Eps_dot_5");
        CELL_LIST(NFUNC,"%20lg",STRAINRATE_LOAD);
    } /*else {
        COMMENT("# func_ID1  func_ID2  func_ID3  func_ID4  func_ID5");
        BLANK;
        COMMENT("#           Fscale_1            Fscale_2            Fscale_3            Fscale_4            Fscale_5");
        BLANK;
        COMMENT("#          Eps_dot_1           Eps_dot_2           Eps_dot_3           Eps_dot_4           Eps_dot_5");
        BLANK;
    }*/
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
FORMAT(radioss90) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW36/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/PLAS_TAB/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#        Init. dens.          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#        Init. dens.");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                  E                  Nu           Eps_p_max              Eps_t1              Eps_t2");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_E,MAT_NU,MAT_EPS,MAT_EPST1,MAT_EPST2);
    COMMENT("#  N_funct  F_smooth              C_hard               F_cut               Eps_f");
    CARD("%10d%10d%20lg%20lg%20lg",NFUNC,Fsmooth,MAT_HARD,Fcut,MAT_Epsilon_F);
    COMMENT("# func_IDp              Fscale");
    CARD("%10d%20lg",Xr_fun,MAT_FScale);
    if(NFUNC>0) {
        COMMENT("# func_ID1  func_ID2  func_ID3  func_ID4  func_ID5");
        CELL_LIST(NFUNC,"%10d",FUN_LOAD,50);
        COMMENT("#           Fscale_1            Fscale_2            Fscale_3            Fscale_4            Fscale_5");
        CELL_LIST(NFUNC,"%20lg",SCALE_LOAD);
        COMMENT("#          Eps_dot_1           Eps_dot_2           Eps_dot_3           Eps_dot_4           Eps_dot_5");
        CELL_LIST(NFUNC,"%20lg",STRAINRATE_LOAD);
    } /*else {
        COMMENT("# func_ID1  func_ID2  func_ID3  func_ID4  func_ID5");
        BLANK;
        COMMENT("#           Fscale_1            Fscale_2            Fscale_3            Fscale_4            Fscale_5");
        BLANK;
        COMMENT("#          Eps_dot_1           Eps_dot_2           Eps_dot_3           Eps_dot_4           Eps_dot_5");
        BLANK;
    }*/
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
FORMAT(radioss51) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW36/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/PLAS_TAB/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#        Init. dens.          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#        Init. dens.");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                  E                  Nu           Eps_p_max              Eps_t1              Eps_t2");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_E,MAT_NU,MAT_EPS,MAT_EPST1,MAT_EPST2);
    COMMENT("#    Nfunc   Fsmooth               Chard                Fcut               Eps_f");
    CARD("%10d%10d%20lg%20lg%20lg",NFUNC,Fsmooth,MAT_HARD,Fcut,MAT_Epsilon_F);
    COMMENT("#    Ipfun             Fpscale");
    CARD("%10d%20lg",Xr_fun,MAT_FScale);
    if(NFUNC>0) {
        COMMENT("# func_ID1  func_ID2  func_ID3  func_ID4  func_ID5");
        CELL_LIST(NFUNC,"%10d",FUN_LOAD,50);
        COMMENT("#           Fscale_1            Fscale_2            Fscale_3            Fscale_4            Fscale_5");
        CELL_LIST(NFUNC,"%20lg",SCALE_LOAD);
        COMMENT("#          Eps_dot_1           Eps_dot_2           Eps_dot_3           Eps_dot_4           Eps_dot_5");
        CELL_LIST(NFUNC,"%20lg",STRAINRATE_LOAD);
    }/* else {
        COMMENT("# func_ID1  func_ID2  func_ID3  func_ID4  func_ID5");
        BLANK;
        COMMENT("#           Fscale_1            Fscale_2            Fscale_3            Fscale_4            Fscale_5");
        BLANK;
        COMMENT("#          Eps_dot_1           Eps_dot_2           Eps_dot_3           Eps_dot_4           Eps_dot_5");
        BLANK;
    }*/
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
FORMAT(radioss44) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    COMMENT("#        Init. dens.");
    CARD("%16lg",MAT_RHO);
    COMMENT("#              E              Nu       Eps_p_max          Eps_t1          Eps_t2");
    CARD("%16lg%16lg%16lg%16lg%16lg",MAT_E,MAT_NU,MAT_EPS,MAT_EPST1,MAT_EPST2);
    COMMENT("#  Nfunc Fsmooth           Chard            Fcut   Ipfun           Eps_f");
    CARD("%8d%8d%16lg%16lg%8d%16lg",NFUNC,Fsmooth,MAT_HARD,Fcut,Xr_fun,MAT_Epsilon_F);
    if(NFUNC>0) {
        COMMENT("# Functions");
        CELL_LIST(NFUNC,"%8d",FUN_LOAD,40);
        COMMENT("# Scale factors");
        CELL_LIST(NFUNC,"%16lg",SCALE_LOAD);
        COMMENT("# Strain rates");
        CELL_LIST(NFUNC,"%16lg",STRAINRATE_LOAD);
    } /*else {
        COMMENT("# Functions");
        BLANK;
        COMMENT("# Scale factors");
        BLANK;
        COMMENT("# Strain rates");
        BLANK;
    }*/
}
FORMAT(radioss42) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    COMMENT("#        Init. dens.");
    CARD("%16lg",MAT_RHO);
    COMMENT("#              E              Nu       Eps_p_max          Eps_t1          Eps_t2");
    CARD("%16lg%16lg%16lg%16lg%16lg",MAT_E,MAT_NU,MAT_EPS,MAT_EPST1,MAT_EPST2);
    COMMENT("#  Nfunc Fsmooth           Chard            Fcut");
    CARD("%8d%8d%16lg%16lg",NFUNC,Fsmooth,MAT_HARD,Fcut);
    if(NFUNC>0) {
        COMMENT("# Functions");
        CELL_LIST(NFUNC,"%8d",FUN_LOAD,40);
        COMMENT("# Scale factors");
        CELL_LIST(NFUNC,"%16lg",SCALE_LOAD);
        COMMENT("# Strain rates");
        CELL_LIST(NFUNC,"%16lg",STRAINRATE_LOAD);
    } /*else {
        COMMENT("# Functions");
        BLANK;
        COMMENT("# Scale factors");
        BLANK;
        COMMENT("# Strain rates");
        BLANK;
    }*/
}
FORMAT(radioss41) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }    
    COMMENT("#        Init. dens.");
    CARD("%16lg",MAT_RHO);
    COMMENT("#              E              Nu       Eps_p_max          Eps_t1          Eps_t2");
    CARD("%16lg%16lg%16lg%16lg%16lg",MAT_E,MAT_NU,MAT_EPS,MAT_EPST1,MAT_EPST2);
    COMMENT("#  Nfunc                   Chard");
    CARD("%8d        %16lg",NFUNC,MAT_HARD);
    if(NFUNC>0) {
        COMMENT("# Functions");
        CELL_LIST(NFUNC,"%8d",FUN_LOAD,40);
        COMMENT("# Scale factors");
        CELL_LIST(NFUNC,"%16lg",SCALE_LOAD);
        COMMENT("# Strain rates");
        CELL_LIST(NFUNC,"%16lg",STRAINRATE_LOAD);
    } /*else {
        COMMENT("# Functions");
        BLANK;
        COMMENT("# Scale factors");
        BLANK;
        COMMENT("# Strain rates");
        BLANK;
    }*/
}