//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Material law 70 setup file(120 version)

ATTRIBUTES(COMMON)
{
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    MAT_REFRHO_Option                       = VALUE(INT,  "RefRho_Option");
    DUMMY                                   = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    Refer_Rho                               = VALUE(FLOAT,  "Reference Density");
    MAT_RHO                                 = VALUE(FLOAT,  "Initial Density");
    MAT_E0                                  = VALUE(FLOAT,  "Initial Young's Modulus");
    MAT_NU                                  = VALUE(FLOAT,  "Poisson's Ratio");
    E_Max                                   = VALUE(FLOAT,  "Maximum Young's Modulus");
    MAT_EPS                                 = VALUE(FLOAT,  "Failure Plastic Strain");
    Itens                                   = VALUE(INT,  "Flag to Activate Different Behavior Between Tensile and Compression");
    MAT_asrate                              = VALUE(FLOAT,  "Fcut,Cutoff Frequency for Strain Rate Filtering");
    ISRATE                                  = VALUE(INT,  "F_smooth,Smooth Strain Rate Flag");
    NRATEP                                  = SIZE("Number of loading Functions");
    NRATEN                                  = SIZE("Number of unloading Functions");
    MAT_Iflag                               = VALUE(INT,  "Flag to Control the Unloading Response");
    MAT_SHAPE                               = VALUE(FLOAT,  "Shape Factor");
    MAT_HYST                                = VALUE(FLOAT,  "Hysteresis Unloading Factor");
    if(NRATEP > 0)
    {
        //FUN_LOAD                          = ARRAY[NRATEP](MULTIOBJECT,  "load_fID");
        FUN_LOAD                            = ARRAY[NRATEP](FUNCT,"Load Function Identifier");
        SCALE_LOAD                          = ARRAY[NRATEP](FLOAT,  "Scale Factor for Load Function");
        STRAINRATE_LOAD                     = ARRAY[NRATEP](FLOAT,  "Strain Rate for Load Function");
    }
    if(NRATEN > 0)
    {
        //FUN_UNLOAD                        = ARRAY[NRATEN](MULTIOBJECT,  "Unload_fID");
        FUN_UNLOAD                          = ARRAY[NRATEN](FUNCT,"Unload Function Identifier");
        SCALE_UNLOAD                        = ARRAY[NRATEN](FLOAT,  "Scale Factor for Unload Function");
        STRAINRATE_UNLOAD                   = ARRAY[NRATEN](FLOAT,  "Strain Rate for Unload Function");
    }
    if( Itens == 1)
    {
        FScale11                            = VALUE(FLOAT,  "Ordinate Scale Factor");
        //FUN_A1                            = VALUE(MULTIOBJECT,  "fct_ID_Tens");
        FUN_A1                              = VALUE(FUNCT,"Scale Factor Function Between Tensile and Compression According Strain");
    }
    Heat_Inp_opt                            = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT                         = VALUE(SUBOBJECT, "");
    THERM_STRESS                            = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS                     = VALUE(SUBOBJECT, "");
    IO_FLAG                                 = VALUE(INT, "");
    LAW_NO                                  = VALUE(STRING, "");
    Mat_Name_OR_LawNo                       = VALUE(INT,  "RADIOSS_COMMENT_FLAG");
    TITLE                                   = VALUE(STRING,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    NUM_COMMENTS                            = 5110;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;
    MAT_REFRHO_Option                       = 4285;
    Refer_Rho                               = 4229;
    DUMMY                                   = -1;
    MAT_RHO                                 = 118;
    MAT_E0                                  = 1507;
    MAT_NU                                  = 120;
    E_Max                                   = 4230;
    MAT_EPS                                 = 195;
    Itens                                   = 761;
    MAT_asrate                              = 6065;
    ISRATE                                  = 4231;
    NRATEP                                  = 4232;
    NRATEN                                  = 4233;
    MAT_Iflag                               = 6002;
    MAT_SHAPE                               = 4580;
    MAT_HYST                                = 5346;
    FUN_LOAD                                = 4234;
    SCALE_LOAD                              = 4236;
    STRAINRATE_LOAD                         = 4235;
    FUN_UNLOAD                              = 4239;
    SCALE_UNLOAD                            = 4238;
    STRAINRATE_UNLOAD                       = 4237;
    FScale11                                = 4050;
    FUN_A1                                  = 45;
    Heat_Inp_opt                            = 4346;
    SUBGRP_HEAT_MAT                         = -1;
    THERM_STRESS                            = 4555;
    SUBGRP_THERM_STRESS                     = -1;
    LAW_NO                                  = -1;
    Mat_Name_OR_LawNo                       = 4538;
    IO_FLAG                                 = -1;
    TITLE                                   = -1;
}
DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY                 = SCALAR(MAT_RHO);
    YOUNG_MODULUS                   = SCALAR(MAT_E0);
    POISSON_RATIO                   = SCALAR(MAT_NU);
public:
    SOUND_SPEED                     = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                               = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                              = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID               = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}

CHECK(COMMON)
{
    MAT_RHO                                 >0.0;
    NRATEN                                  <=100;
    NRATEP                                  <=100;
}

DEFAULTS(COMMON)
{
    ISRATE                                  = 0;
    MAT_EPS                                 = 1.0;
    MAT_HYST                                = 1.0;
    MAT_SHAPE                               = 1.0;
    MAT_asrate                              = 1e30;
    Mat_Name_OR_LawNo                       = 0;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if( CommentEnumField == 2)
    {
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }
    if( Mat_Name_OR_LawNo == 1)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/FOAM_TAB/");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW70/");
    }
mandatory:
    SCALAR(MAT_RHO)         { DIMENSION="density"; }
optional:
    graphical FLAG( MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho);
    }
mandatory:
    SCALAR(MAT_E0)          { DIMENSION="pressure";      }
optional:
    SCALAR(MAT_NU)          { DIMENSION="DIMENSIONLESS"; } 
    SCALAR(E_Max)           { DIMENSION="pressure";      }
    SCALAR(MAT_EPS)         { DIMENSION="DIMENSIONLESS"; }
    RADIO(Itens)
    {
        ADD(0, "Same Behavior Between Compression and Tensile");
        ADD(1, "Different Behavior Between Compression and Tensile. The Tensile Behavior is the Compression Curve Multiplied by Scale Factor, fct_IDTens");
    }
    SCALAR(MAT_asrate)      { DIMENSION="f";     }
    RADIO(ISRATE,"Strain rate filtering") 
    {
        ADD(0,"0: No strain rate smoothing (default)");  
        ADD(1,"1: Strain rate smoothing active"); 
    }
    SIZE(NRATEP);
    SIZE(NRATEN);
    ARRAY(NRATEP,"Loading functions")
    {
        //DATA(FUN_LOAD);
        FUNCTION(FUN_LOAD)
        {
            X_TITLE="Strain";          X_DIMENSION="DIMENSIONLESS";
            Y_TITLE="Stress";          Y_DIMENSION="pressure";
        }
        SCALAR(STRAINRATE_LOAD)    { DIMENSION="f";     }
        SCALAR(SCALE_LOAD)         { DIMENSION="pressure";      }
    }
    
    ARRAY(NRATEN,"Unloading functions")
    {
        //DATA(FUN_UNLOAD);
        FUNCTION(FUN_UNLOAD)
        {
            X_TITLE="Strain";          X_DIMENSION="DIMENSIONLESS";
            Y_TITLE="Stress";          Y_DIMENSION="pressure";
        }
        SCALAR(STRAINRATE_UNLOAD)  { DIMENSION="f";     }
        SCALAR(SCALE_UNLOAD)       { DIMENSION="pressure";      }
    }
    RADIO(MAT_Iflag,"Unloading formulation")
    {
        ADD(0, "0: Material behavior follows the defined curves for loading and unloading");
        ADD(1, "1: Unloading is function of loading curves, pressure and quasi-static unloading curve");
        ADD(2, "2: Unloading is function of loading curves and quasi-static unloading curve");
        ADD(3, "3: Unloading is function of loading curves, shape factor, hysterisis and pressure");
        ADD(4, "4: Unloading is function of loading curves, shape factor, hysterisis");
    }
    SCALAR(MAT_SHAPE)       { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_HYST)        { DIMENSION="DIMENSIONLESS"; }
optional:
    if( Itens == 1)
    {
        DATA(FUN_A1);
        SCALAR(FScale11);

        /* FUNCTION(FUN_A1) {
        X_TITLE="Strain";          X_DIMENSION="DIMENSIONLESS";
        Y_TITLE="Scale factor";          Y_DIMENSION="DIMENSIONLESS";
        }
        */
    }
    /*mandatory:
    graphical SUPPORT("Support") {
    OBJECTS=(/PART/QUAD,/PART/BRICK,/PART/TETRA4,/PART/LINEAR_3D,/PART/PENTA6,/PART/LINEAR_THICK,
    /PART/TETRA10,/PART/SHEL16,/PART/BRIC20,/PART/SPHCEL);
    ADD(PART,"Parts");
    }*/
optional:
    //heat data
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
}

FORMAT(radioss120) 
{
    ASSIGN(IO_FLAG, 0,EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "FOA" )
        {
            ASSIGN(Mat_Name_OR_LawNo,1);
        }
        else
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 1)
    {
        HEADER("/MAT/FOAM_TAB/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/LAW70/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option != FALSE)
    {
        COMMENT("#              RHO_I          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else
    {
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                 EO                  NU               E_max             EPS_max     Itens");
    CARD("%20lg%20lg%20lg%20lg%10d",MAT_E0,MAT_NU,E_Max,MAT_EPS,Itens);
    COMMENT("#              F_cut   Ismooth     Nload   Nunload     Iflag               Shape                 Hys");
    CARD("%20lg%10d%10d%10d%10d%20lg%20lg",MAT_asrate,ISRATE,NRATEP,NRATEN,MAT_Iflag,MAT_SHAPE,MAT_HYST);
    if(NRATEP > 0)
    {
        COMMENT("#funcID_id          Eps_._load          Fscale_load");
        CARD_LIST(NRATEP) {

            CARD("%10d%20lg%20lg",FUN_LOAD,STRAINRATE_LOAD,SCALE_LOAD);
        }
    }
    if(NRATEN > 0)
    {
        COMMENT("#funcID_id        Eps_._unload       Fscale_unload");
        CARD_LIST(NRATEN) {

            CARD("%10d%20lg%20lg",FUN_UNLOAD,STRAINRATE_UNLOAD,SCALE_UNLOAD);
        }
    }
    if (Itens==1)
    {
        COMMENT("#fctIDTens          FscaleTens");
        CARD("%10d%20lg",FUN_A1,FScale11);
    }
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}

FORMAT(radioss90) 
{
    ASSIGN(IO_FLAG, 0,EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "FOA" )
        {
            ASSIGN(Mat_Name_OR_LawNo,1);
        }
        else
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 1)
    {
        HEADER("/MAT/FOAM_TAB/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/LAW70/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option != FALSE)
    {
        COMMENT("#              RHO_I          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else
    {
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                 EO                  NU               E_max             EPS_max");
    CARD("%20lg%20lg%20lg%20lg",MAT_E0,MAT_NU,E_Max,MAT_EPS);
    COMMENT("#              F_cut  F_smooth    Nload     Nunload    Iflag               Shape                 Hys");
    CARD("%20lg%10d%10d%10d%10d%20lg%20lg",MAT_asrate,ISRATE,NRATEP,NRATEN,MAT_Iflag,MAT_SHAPE,MAT_HYST);
    if(NRATEP > 0)
    {
        COMMENT("#funcID_id          Eps_._load          Fscale_load");
        CARD_LIST(NRATEP) {

            CARD("%10d%20lg%20lg",FUN_LOAD,STRAINRATE_LOAD,SCALE_LOAD);
        }
    }
    if(NRATEN > 0)
    {
        COMMENT("#funcID_id        Eps_._unload       Fscale_unload");
        CARD_LIST(NRATEN) {
            CARD("%10d%20lg%20lg",FUN_UNLOAD,STRAINRATE_UNLOAD,SCALE_UNLOAD);
        }
    }
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}

FORMAT(radioss51)
{
    ASSIGN(IO_FLAG, 0,EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "FOA" )
        {
            ASSIGN(Mat_Name_OR_LawNo,1);
        }
        else
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 1)
    {
        HEADER("/MAT/FOAM_TAB/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/LAW70/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option != FALSE)
    {
        COMMENT("#              RHO_I          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else
    {
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                 EO                  NU               E_max             EPS_max");
    CARD("%20lg%20lg%20lg%20lg",MAT_E0,MAT_NU,E_Max,MAT_EPS);
    COMMENT("#              F_cut  F_smooth    Nload     Nunload");
    CARD("%20lg%10d%10d%10d",MAT_asrate,ISRATE,NRATEP,NRATEN);
    if(NRATEP > 0)
    {
        COMMENT("#funcID_id          Eps_._load          Fscale_load");
        CARD_LIST(NRATEP) {

            CARD("%10d%20lg%20lg",FUN_LOAD,STRAINRATE_LOAD,SCALE_LOAD);
        }
    }
    if(NRATEN > 0)
    {
        COMMENT("#funcID_id        Eps_._unload       Fscale_unload");
        CARD_LIST(NRATEN) {

            CARD("%10d%20lg%20lg",FUN_UNLOAD,STRAINRATE_UNLOAD,SCALE_UNLOAD);
        }
    }
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}