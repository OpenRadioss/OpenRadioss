//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Material law 73 (Thermal Hill Orthotropic Material) Setup File

ATTRIBUTES(COMMON) 
{
    KEYWORD_STR                     = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                    = SIZE("NUM_COMMENTS");
    CommentEnumField                = VALUE(INT,"User Comments");
    COMMENTS                        = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    MAT_RHO                         = VALUE(FLOAT,"Initial Density");
    Refer_Rho                       = VALUE(FLOAT,"Reference Density (for lower than 14.0 version)");
    DUMMY                           = VALUE(STRING,"Dummy Variable for Ref_Rho Flag");
    MAT_REFRHO_Option               = VALUE(INT, "RefRho_Option");
    MAT_E                           = VALUE(FLOAT,"Young Modulus ");
    MAT_NU                          = VALUE(FLOAT,"Poisson Ratio");
    MAT_R00                         = VALUE(FLOAT,"Lankford Param. 0 Degrees");
    MAT_R45                         = VALUE(FLOAT,"Lankford Param. 45 Degrees");
    MAT_R90                         = VALUE(FLOAT,"Lankford Param. 90 Degrees");
    MAT_CHARD                       = VALUE(FLOAT,"Hardening Coefficient");
    MAT_EPS                         = VALUE(FLOAT,"Max Plastic Strain");
    MAT_EPST1                       = VALUE(FLOAT,"Tensile Rupture Strain 1");
    MAT_EPST2                       = VALUE(FLOAT,"Tensile Rupture Strain 2");
    FUN_A1                          = VALUE(FUNCT,"TABLE");
    MAT_FScale                      = VALUE(FLOAT,"Scale Factor for Yield Stress") ;
    MAT_PScale                      = VALUE(FLOAT,"Scale Factor on Strain Rate") ;
    T_Initial                       = VALUE(FLOAT,"Initial Temperature") ;
    MAT_SPHEAT                      = VALUE(FLOAT,"Specific Heat Per Mass Unit") ;
    Yr_fun                          = VALUE(FUNCT, "Function Identifier for the Scale Factor of Young's Modulus, when Young Modulus is Function of the Plastic Strain") ;
    // FSCALEE                      = VALUE(FLOAT,"Scale Factor for Young Modulus in funct_IDE") ;
    MAT_EFIB                        = VALUE(FLOAT,"Saturated Young's Modulus for Infinitive Plastic Strain") ;
    MAT_C                           = VALUE(FLOAT,"Parameter for Young's Modulus Evolution") ;
    Heat_Inp_opt                    = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT                 = VALUE(SUBOBJECT, "");
    THERM_STRESS                    = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS             = VALUE(SUBOBJECT, "");
    IO_FLAG                         = VALUE(INT, "");
    TITLE                           = VALUE(STRING,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                     = 9000;
    COMMENTS                        = 5109;
    CommentEnumField                = 7951;
    Heat_Inp_opt                    = 4346;
    SUBGRP_HEAT_MAT                 = -1;
    THERM_STRESS                    = 4555;
    SUBGRP_THERM_STRESS             = -1;
    MAT_REFRHO_Option               = 4285;
    MAT_RHO                         = 118;
    Refer_Rho                       = 4229;
    MAT_E                           = 119;
    MAT_NU                          = 120;
    FUN_A1                          = 45;
    MAT_C                           = 996;
    MAT_CHARD                       = 4049;
    MAT_E                           = 119;
    MAT_EFIB                        = 363;
    MAT_EPS                         = 195;
    MAT_EPST1                       = 5069;
    MAT_EPST2                       = 5071;
    MAT_FScale                      = 4092;
    MAT_NU                          = 120;
    MAT_PScale                      = 4095;
    MAT_R00                         = 5077;
    MAT_R45                         = 5078;
    MAT_R90                         = 5079;
    MAT_SPHEAT                      = 318;
    T_Initial                       = 4113;
    Yr_fun                          = 870;
    NUM_COMMENTS                    = 5110;
    DUMMY                           = -1;
    IO_FLAG                         = -1;
    TITLE                           = -1;
}

CHECK(COMMON)
{
    MAT_CHARD                       >=0.0;
    MAT_CHARD                       <=1.0;
    MAT_RHO                         >0.0;
}

DEFAULTS(COMMON)
{
    MAT_EPS                         = 1.0e30;
    MAT_EPST1                       = 1.0e30;
    MAT_EPST2                       = 2.0e30;
    MAT_FScale                      = 1.0;
    MAT_PScale                      = 1.0;
    MAT_R00                         = 1.0;
    MAT_R45                         = 1.0;
    MAT_R90                         = 1.0;
    MAT_SPHEAT                      = 1.0;
    T_Initial                       = 293;
}

DEFAULTS(COMMON) 
{
    Heat_Inp_opt                    = 0;
}
DRAWABLES(COMMON) 
{
public:
    INITIAL_DENSITY = SCALAR(MAT_RHO);
    YOUNG_MODULUS   = SCALAR(MAT_E);
    POISSON_RATIO   = SCALAR(MAT_NU);
    SOUND_SPEED     = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                       = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                      = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID       = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}


GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    ASSIGN(KEYWORD_STR, "/MAT");
    ASSIGN(KEYWORD_STR, "/LAW73/");
    FLAG(MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho)   { DIMENSION="density";       }
    }
mandatory:
    SCALAR(MAT_RHO)         { DIMENSION="density";            }
    SCALAR(MAT_E)           { DIMENSION="pressure";      }
optional:
    SCALAR(MAT_NU)          { DIMENSION="DIMENSIONLESS"; }
    DATA(Yr_fun);
    /*
    {
    X_TITLE     = "Plastic Strain"; Y_TITLE     = "Scale factor on Young Modulus";
    X_DIMENSION = "DIMENSIONLESS"; Y_DIMENSION = "DIMENSIONLESS";
    }
    */
    SCALAR(MAT_EFIB) {DIMENSION="pressure";}
    SCALAR(MAT_C) ;
    SCALAR(MAT_R00)         { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_R45)         { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_R90)         { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_CHARD)       { DIMENSION="DIMENSIONLESS"; } 
    SCALAR(MAT_EPS)         { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_EPST1)       { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_EPST2)       { DIMENSION="DIMENSIONLESS"; }
    DATA(FUN_A1) {SUBTYPES=(/FUNCT/0,/FUNCT/1);} 
    SCALAR(MAT_FScale)      { DIMENSION="pressure"; }
    SCALAR(MAT_PScale)      { DIMENSION="strain_rate"; }
    SCALAR(T_Initial)       { DIMENSION="k"; }
    SCALAR(MAT_SPHEAT)      { DIMENSION="thermal_massic_capacity";}
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    } 
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
    /*
    mandatory:
    graphical SUPPORT("Support") {
    OBJECTS=(/COMPONENT/SHELL);
    ADD(COMPONENT,"Parts");
    }
    */
}

FORMAT(radioss120) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 0)
    {
        HEADER("/MAT/LAW73/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    //
    COMMENT("#                  E                  NU");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    //
    COMMENT("#FUNCT_IDE                          EINF                  CE");
    CARD("%10d          %20lg%20lg",Yr_fun,MAT_EFIB,MAT_C);  
    //
    COMMENT("#                R00                 R45                 R90              C_HARD");
    CARD("%20lg%20lg%20lg%20lg",MAT_R00,MAT_R45,MAT_R90,MAT_CHARD);
    //
    COMMENT("#           EPSP_MAX              EPS_T1              EPS_T2");
    CARD("%20lg%20lg%20lg",MAT_EPS,MAT_EPST1,MAT_EPST2);
    //
    COMMENT("#    TABLE                   SIGMA_SCALE         EPSPT_SCALE");
    CARD("%10d          %20lg%20lg                                        ",FUN_A1,MAT_FScale,MAT_PScale);  
    COMMENT("#                 TI                  CP");
    CARD("%20lg%20lg",T_Initial,MAT_SPHEAT);  
    //
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
FORMAT(radioss110) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 0)
    {
        HEADER("/MAT/LAW73/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#        Init. dens.          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#        Init. dens.");
        CARD("%20lg",MAT_RHO);
    }
    //
    COMMENT("#                  E                  NU");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    //
    COMMENT("#                R00                 R45                 R90              C_HARD");
    CARD("%20lg%20lg%20lg%20lg",MAT_R00,MAT_R45,MAT_R90,MAT_CHARD);
    //
    COMMENT("#           EPSP_MAX              EPS_T1              EPS_T2");
    CARD("%20lg%20lg%20lg",MAT_EPS,MAT_EPST1,MAT_EPST2);
    //
    COMMENT("#    TABLE                   SIGMA_SCALE         EPSPT_SCALE");
    CARD("%10d          %20lg%20lg                                        ",FUN_A1,MAT_FScale,MAT_PScale);  
    COMMENT("#                 TI                  CP");
    CARD("%20lg%20lg",T_Initial,MAT_SPHEAT);  
    //
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}