//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Material law 78(Yoshida-Uemori material model) Setup File

ATTRIBUTES(COMMON) 
{
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    CommentEnumField                        = VALUE(INT,"User Comments");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    MAT_RHO                                 = VALUE(FLOAT,"Initial Density");
    Refer_Rho                               = VALUE(FLOAT,"Reference Density (for lower than 14.0 version)");
    DUMMY                                   = VALUE(STRING,"Dummy Variable for Ref_Rho Flag");
    MAT_REFRHO_Option                       = VALUE(INT, "RefRho_Option");
    MAT_E                                   = VALUE(FLOAT, "Initial Young's Modulus");
    MAT_NU                                  = VALUE(FLOAT, "Poisson's Ratio");
    MAT_EPS                                 = VALUE(FLOAT, "");
    MAT_SIG                                 = VALUE(FLOAT, "");
    MAT_SIGY                                = VALUE(FLOAT,"Yield Stress");
    MAT_BSAT                                = VALUE(FLOAT,"Center of the Bounding Surface");
    MAT_HARD                                = VALUE(FLOAT,"Parameter for Kinematic Hardening Rule of Yield Surface");
    MAT_HYST                                = VALUE(FLOAT,"Material Parameter for Controlling Work Hardening Stagnation");
    MAT_B                                   = VALUE(FLOAT,"Initial Size of the Bounding Surface");
    MAT_M                                   = VALUE(FLOAT,"Parameter for Isotropic and Kinematic Hardening of the Bounding Surface");
    MAT_RSAT                                = VALUE(FLOAT,"Saturated Value of the Isotropic Hardening Stress");
    MAT_OptR                                = VALUE(INT,"Modified Isotropic Hardening Rule Flag (Available for Shells Only)");
    C1                                      = VALUE(FLOAT,"Constant Used in the Modified Formulation of the Isotropic Hardening of Bounding Surface (Available for Shells Only)");
    C2                                      = VALUE(FLOAT,"Constant Used in the Modified Formulation of the Isotropic Hardening of Bounding Surface (Available for Shells Only)");
    MAT_R00                                 = VALUE(FLOAT,"Material Parameters Determining Anisotropy in Hill's (48) Yield Criterion (in Shell Version)") ;
    MAT_R45                                 = VALUE(FLOAT,"Material Parameters Determining Anisotropy in Hill's (48) Yield Criterion (in Shell Version)") ;
    MAT_R90                                 = VALUE(FLOAT,"Material Parameters Determining Anisotropy in Hill's (48) Yield Criterion (in Shell Version)") ;
    MAT_fct_IDE                             = VALUE(FUNCT,"Function Defining the Scale Factor of Young's Modulus Evolution Versus Effective Plastic Strain");
    MAT_EA                                  = VALUE(FLOAT,"Asymptotic Value of Young's Modulus");
    MAT_CE                                  = VALUE(FLOAT,"Parameter Controlling the Dependency of Young's Modulus on the Effective Plastic Strain");
    Heat_Inp_opt                            = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT                         = VALUE(SUBOBJECT, "");
    THERM_STRESS                            = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS                     = VALUE(SUBOBJECT, "");
    IO_FLAG                                 = VALUE(INT, "");
    TITLE                                   = VALUE(STRING,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;
    Heat_Inp_opt                            = 4346;
    MAT_REFRHO_Option                       = 4285;
    MAT_RHO                                 = 118;
    Refer_Rho                               = 4229;
    C1                                      = 6306;
    C2                                      = 6307;
    MAT_B                                   = 995;
    MAT_BSAT                                = 4750;
    MAT_CE                                  = 4752;
    MAT_E                                   = 119;
    MAT_EA                                  = 126;
    MAT_HARD                                = 71;
    MAT_HYST                                = 5346;
    MAT_M                                   = 314;
    MAT_NU                                  = 120;
    MAT_OptR                                = 311;
    MAT_R00                                 = 5077;
    MAT_R45                                 = 5078;
    MAT_R90                                 = 5079;
    MAT_RSAT                                = 4751;
    MAT_SIGY                                = 152;
    MAT_fct_IDE                             = 312;
    NUM_COMMENTS                            = 5110;
    DUMMY                                   = -1;
    SUBGRP_HEAT_MAT                         = -1;
    THERM_STRESS                            = 4555;
    SUBGRP_THERM_STRESS                     = -1;
    IO_FLAG                                 = -1;
    TITLE                                   = -1;
    MAT_EPS                                 = 195;
    MAT_SIG                                 = 5038;
}

CHECK(COMMON)
{
    MAT_RHO                                 >0.0;
}

DEFAULTS(COMMON)
{
    MAT_OptR                                = 0;
    MAT_R00                                 = 1.0;
    MAT_R45                                 = 1.0;
    MAT_R90                                 = 1.0;
}

DRAWABLES(COMMON) 
{
public:
    INITIAL_DENSITY         = SCALAR(MAT_RHO);
    POISSON_RATIO           = SCALAR(MAT_NU);
    INITIAL_YOUNG_MODULUS   = SCALAR(MAT_E);
    SOUND_SPEED             = EVAL((INITIAL_YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
    private:
    G                       = EVAL(INITIAL_YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                      = EVAL(INITIAL_YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID       = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}

GUI(COMMON) 
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    ASSIGN(KEYWORD_STR, "/MAT");
    ASSIGN(KEYWORD_STR, "/LAW78/");
    FLAG(MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho)      { DIMENSION="density";       }
    }
mandatory:
    SCALAR(MAT_RHO)     { DIMENSION="density";            }
    SCALAR(MAT_E)       {DIMENSION="pressure";}
    SCALAR(MAT_NU)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(MAT_SIGY )   {DIMENSION="pressure";}
    SCALAR(MAT_BSAT)    {DIMENSION="pressure";}
    SCALAR(MAT_HARD)    {DIMENSION="DIMENSIONLESS";}
    SCALAR(MAT_HYST)    {DIMENSION="DIMENSIONLESS";}
    SCALAR(MAT_B)       {DIMENSION="pressure";}
    SCALAR(MAT_M)       {DIMENSION="DIMENSIONLESS";}
    SCALAR(MAT_RSAT)    {DIMENSION="pressure";}
    RADIO(MAT_OptR)
    {
        ADD(0, "0: No Modified Formulation(Default)");
        ADD(1, "1: Modified Formulation");
    }
    if(MAT_OptR == 1)
    {
        SCALAR(C1);
        SCALAR(C2);
    }
    SCALAR(MAT_R00);
    SCALAR(MAT_R45);
    SCALAR(MAT_R90);
    DATA(MAT_fct_IDE);
    /*
    {
    X_TITLE="PLASTIC STRAIN"; X_DIMENSION="DIMENSIONLESS";
    Y_TITLE="SCALE FACTOR of YOUNG'S MODULUS"; Y_DIMENSION="DIMENSIONLESS";
    }
    */
    SCALAR(MAT_EA)  {DIMENSION="pressure";}
    SCALAR(MAT_CE)  {DIMENSION="DIMENSIONLESS";}
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    } 
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
    /*
    graphical SUPPORT("Support") 
    {
    OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/TETRA10);
    ADD(COMPONENT,"Parts");
    }
    */
}

FORMAT(radioss120)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 0)
    {
        HEADER("/MAT/LAW78/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                  E                  NU");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    COMMENT("#                  Y                   B                   C                   H                  B0");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_SIGY,MAT_BSAT,MAT_HARD,MAT_HYST,MAT_B);
    CARD_PREREAD("                                        %10d",MAT_OptR);
    if(MAT_OptR==0)
    {
        COMMENT("#                  M                RSAT      OPTR");
        CARD("%20lg%20lg%10d",MAT_M,MAT_RSAT,MAT_OptR);      
    }
    else
    {
        COMMENT("#                  M                RSAT      OPTR                  C1                  C2");
        CARD("%20lg%20lg%10d%20lg%20lg",MAT_M,MAT_RSAT,MAT_OptR,C1,C2);
    }
    COMMENT("#                 R0                 R45                 R90");
    CARD("%20lg%20lg%20lg",MAT_R00,MAT_R45,MAT_R90);
    COMMENT("#  FUNC_ID                          EINF                 COE");
    CARD("%10d          %20lg%20lg",MAT_fct_IDE,MAT_EA,MAT_CE);
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}

FORMAT(radioss110)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 0)
    {
        HEADER("/MAT/LAW78/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                  E                  NU             EPS_max             SIG_max");
    CARD("%20lg%20lg%20lg%20lg",MAT_E,MAT_NU,MAT_EPS,MAT_SIG);
    COMMENT("#                  Y                   B                   C                   H                  B0");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_SIGY,MAT_BSAT,MAT_HARD,MAT_HYST,MAT_B);
    COMMENT("#                  M                RSAT                  EA                  CE");
    CARD("%20lg%20lg%20lg%20lg",MAT_M,MAT_RSAT,MAT_EA,MAT_CE);      
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
