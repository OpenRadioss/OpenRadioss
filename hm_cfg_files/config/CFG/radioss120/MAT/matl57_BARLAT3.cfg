//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 57(BARLAT3) setup file
//

ATTRIBUTES(COMMON)
{
    // Support
    //NB_PARTS                              = SIZE("Number of Connected Parts"); 
    //COMPONENT                             = ARRAY[NB_PARTS](COMPONENT,"Connected Parts");
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    MAT_REFRHO_Option                       = VALUE(INT,  "RefRho_Option");
    MAT_RHO                                 = VALUE(FLOAT,  "Initial Density");
    Refer_Rho                               = VALUE(FLOAT,  "Reference Density");
    DUMMY                                   = VALUE(STRING,"Dummy Variable for Ref_Rho Flag");
    MAT_E                                   = VALUE(FLOAT,  "Young's Modulus");
    MAT_NU                                  = VALUE(FLOAT,  "Poisson's Ratio");
    MAT_R00                                 = VALUE(FLOAT,  "Lankford Parameter 0 Degrees");
    MAT_R45                                 = VALUE(FLOAT,  "Lankford Parameter 45 Degrees");
    MAT_R90                                 = VALUE(FLOAT,  "Lankford Parameter 90 Degrees");
    MAT_CHARD                               = VALUE(FLOAT,  "Hardening Coefficient");
    MAT_M                                   = VALUE(FLOAT,  "Barlat Parameter");
    MAT_EPS                                 = VALUE(FLOAT,  "Failure Plastic Strain");
    MAT_EPST1                               = VALUE(FLOAT,  "Tensile Failure Strain 1");
    MAT_EPST2                               = VALUE(FLOAT,  "Tensile Failure Strain 2");
    NUM_CURVES                              = SIZE("Number of Plasticity Curves");
    FunctionIds                             = ARRAY[NUM_CURVES](FUNCT,"Plasticity Curves ith Function");
    ABG_cpa                                 = ARRAY[NUM_CURVES](FLOAT,  "Scale Factor for ith Function");
    ABG_cpb                                 = ARRAY[NUM_CURVES](FLOAT,  "Strain Rate for ith Function");
    MAT_fct_IDE                             = VALUE(FUNCT, "Function Identifier for the Scale Factor of Young's Modulus, when Young Modulus is Function of the Plastic Strain") ;
    MAT_EA                                  = VALUE(FLOAT,  "Saturated Young's Modulus for Infinitive Plastic Strain");
    MAT_CE                                  = VALUE(FLOAT,  "Parameter for Young's Modulus Evolution");
    Mat_Name_OR_LawNo                       = VALUE(INT, "");
    TITLE                                   = VALUE(STRING,"");
    IO_FLAG                                 = VALUE(INT, "");
    LAW_NO                                  = VALUE(STRING, "");
    // HEAT
    Heat_Inp_opt                            = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT                         = VALUE(SUBOBJECT, "");
    // THERM_STRESS
    THERM_STRESS                            = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS                     = VALUE(SUBOBJECT, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    NUM_COMMENTS                            = 5110;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;
    MAT_REFRHO_Option                       = 4285;
    MAT_RHO                                 = 118;
    Refer_Rho                               = 4229;
    DUMMY                                   = -1;
    MAT_E                                   = 119;
    MAT_NU                                  = 120;
    MAT_fct_IDE                             = 312;
    MAT_EA                                  = 126;
    MAT_CE                                  = 4752;
    MAT_R00                                 = 5077;
    MAT_R45                                 = 5078;
    MAT_R90                                 = 5079;
    MAT_CHARD                               = 4049;
    MAT_M                                   = 314;
    MAT_EPS                                 = 195;
    MAT_EPST1                               = 5069;
    MAT_EPST2                               = 5071;
    NUM_CURVES                              = 8167;
    FunctionIds                             = 4270;
    ABG_cpa                                 = 912;
    ABG_cpb                                 = 913;
    Mat_Name_OR_LawNo                       = 4538;
    LAW_NO                                  = -1;
    IO_FLAG                                 = -1;
    TITLE                                   = -1;
    //HEAT
    Heat_Inp_opt                            = 4346;
    SUBGRP_HEAT_MAT                         = -1;
    // THERM_STRESS
    THERM_STRESS                            = 4555;
    SUBGRP_THERM_STRESS                     = -1;
}

DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY                 = SCALAR(MAT_RHO);
    YOUNG_MODULUS                   = SCALAR(MAT_E);
    POISSON_RATIO                   = SCALAR(MAT_NU);
public:
    SOUND_SPEED                     = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                               = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                              = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID               = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}

CHECK(COMMON)
{
    ABG_cpb                                 >=0.0;
    MAT_CHARD                               >=0.0;
    MAT_CHARD                               <=1.0;
    MAT_E                                   >0.0;
    MAT_EPS                                 >=0.0;
    MAT_EPST1                               >=0.0;
    MAT_EPST2                               >=0.0;
    MAT_NU                                  >=0.0;
    MAT_NU                                  <0.5;
    MAT_RHO                                 >0.0;
    MAT_RHO                                 >0.0;
}

DEFAULTS(COMMON)
{
    MAT_EPS                                 = 1.0e30;
    MAT_EPST1                               = 1.0e30;
    MAT_EPST2                               = 2.0e30;
    MAT_R00                                 = 1.0;
    MAT_R45                                 = 1.0;
    MAT_R90                                 = 1.0;
    //MAT_M                                 = 6.0;
}

GUI(COMMON)
{
    
    RADIO(CommentEnumField)
    {    ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if( CommentEnumField == 2)
    {
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }
    if( Mat_Name_OR_LawNo == 2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW57/");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/BARLAT3/");
    }
mandatory:
    SCALAR(MAT_RHO)             { DIMENSION="density";  }

optional:
    graphical FLAG( MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho)       { DIMENSION="density";                  }
    }
mandatory:
    SCALAR(MAT_E)               { DIMENSION="pressure";      }
    SCALAR(MAT_NU)              { DIMENSION="DIMENSIONLESS"; }

    DATA(MAT_fct_IDE);
    /*FUNCTION(MAT_fct_IDE)
    {
        X_TITLE     = "Plastic Strain"; Y_TITLE     = "Young Modulus";
        X_DIMENSION = "DIMENSIONLESS"; Y_DIMENSION = "DIMENSIONLESS";
    }*/
    //ASSIGN(KEYWORD_STR, "          ");
    SCALAR(MAT_EA)              {DIMENSION="pressure";}
    SCALAR(MAT_CE);

    SCALAR(MAT_R00)             { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_R45)             { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_R90)             { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_CHARD)           { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_M)               { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_EPS)             { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_EPST1)           { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_EPST2)           { DIMENSION="DIMENSIONLESS"; }

    //ASSIGN(KEYWORD_STR, "Enter the number of  curves");
    SIZE_RADIO(NUM_CURVES)
    {
        ADD(0, "0");
        ADD(1, "1");
        ADD(2, "2");
        ADD(3, "3");
        ADD(4, "4");
        ADD(5, "5");
        ADD(6, "6");
        ADD(7, "7");
        ADD(8, "8");
        ADD(9, "9");
        ADD(10, "10");
    }
    
    ARRAY(NUM_CURVES,"")
    {
        //DATA(FunctionIds);
        /*FunctionIdsTION(FunctionIds) {
            //SCALING(ABG_cpa);
            X_TITLE="EPSILON_P"; X_DIMENSION="DIMENSIONLESS";
            Y_TITLE="SIGMA";     Y_DIMENSION="pressure";
        }*/
        SCALAR(ABG_cpa)         { DIMENSION="pressure" ;     }
        SCALAR(ABG_cpb)         { DIMENSION="f";     }
    }

    /*mandatory:
    graphical SUPPORT("Support") {
    OBJECTS=(/PART/SHELL);
    ADD(PART,"Parts");
    }*/

optional:
    // HEAT data
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }
    // THERM_STRESS
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    } 

}

// File format
FORMAT(radioss120) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW57/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/BARLAT3/%d", _ID_);
        CARD("%-100s", TITLE);
    }

    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option != FALSE)
    {
        COMMENT("#              RHO_I          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else
    {
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    } 
    //
    COMMENT("#                  E                  NU");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    //
    COMMENT("#FUNCT_IDE                          EINF                  CE");
    CARD("%10d          %20lg%20lg",MAT_fct_IDE,MAT_EA,MAT_CE); 
    //
    COMMENT("#                r00                 r45                 r90              C_hard                   m");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_R00,MAT_R45,MAT_R90,MAT_CHARD,MAT_M);
    //
    COMMENT("#           EPSP_max               EPS_T               EPS_M");
    CARD("%20lg%20lg%20lg",MAT_EPS,MAT_EPST1,MAT_EPST2);
    //
    if(NUM_CURVES > 0)
    {
    COMMENT("# funct_ID                      Fscale_i               EPS_i");
    }    
    FREE_CELL_LIST(NUM_CURVES,"%10d          %20lg%20lg",FunctionIds,ABG_cpa,ABG_cpb,60); 
    // HEAT data
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    // THERM_STRESS 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}

FORMAT(radioss90) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW57/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/BARLAT3/%d", _ID_);
        CARD("%-100s", TITLE);
    }

    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option != FALSE)
    {
        COMMENT("#              RHO_I          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else
    {
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    } 
    //
    COMMENT("#                  E                  NU");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    //
    COMMENT("#                r00                 r45                 r90              C_hard                   m");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_R00,MAT_R45,MAT_R90,MAT_CHARD,MAT_M);
    //
    COMMENT("#           EPSP_max              EPS_t1              EPS_t2");
    CARD("%20lg%20lg%20lg",MAT_EPS,MAT_EPST1,MAT_EPST2);
    //
    if(NUM_CURVES > 0)
    {
    COMMENT("# funct_ID                      Fscale_i               EPS_i");
    }
    FREE_CELL_LIST(NUM_CURVES,"%10d          %20lg%20lg",FunctionIds,ABG_cpa,ABG_cpb,60);  
    // HEAT data
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    // THERM_STRESS 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}


FORMAT(radioss51) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW57/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option != FALSE)
    {
        COMMENT("#              RHO_I          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else
    {
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    } 
    //
    COMMENT("#                  E                  NU");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    //
    COMMENT("#                R00                 R45                 R90              C_HARD                   M");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_R00,MAT_R45,MAT_R90,MAT_CHARD,MAT_M);
    //
    COMMENT("#           EPSP_MAX              EPS_T1              EPS_T2");
    CARD("%20lg%20lg%20lg",MAT_EPS,MAT_EPST1,MAT_EPST2);
    //
    if(NUM_CURVES > 0)
    {
    COMMENT("#    IFUNC                        ALPHA                 EPS");
    }
    FREE_CELL_LIST(NUM_CURVES,"%10d          %20lg%20lg",FunctionIds,ABG_cpa,ABG_cpb,60);  
    // HEAT data
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    // THERM_STRESS 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}

FORMAT(radioss44) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
        
    COMMENT("#              RHO_I");
    CARD("%20lg",MAT_RHO);
    
    COMMENT("#              E              NU");
    CARD("%16lg%16lg",MAT_E,MAT_NU);
    //
    COMMENT("#            R00             R45             R90          C_HARD               M");
    CARD("%16lg%16lg%16lg%16lg%16lg",MAT_R00,MAT_R45,MAT_R90,MAT_CHARD,MAT_M);
    //
    COMMENT("#       EPSP_MAX          EPS_T1          EPS_T2");
    CARD("%16lg%16lg%16lg",MAT_EPS,MAT_EPST1,MAT_EPST2);
    //
    if(NUM_CURVES > 0)
    {
    COMMENT("#  IFUNC                   ALPHA             EPS");
    }
    FREE_CELL_LIST(NUM_CURVES,"%8d        %16lg%16lg",FunctionIds,ABG_cpa,ABG_cpb,48);  
    
}




