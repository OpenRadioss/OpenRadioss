//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Scaling transformation (/TRANSFORM/SCAL) Setup File
// 

ATTRIBUTES(COMMON) {
  ORDER         = VALUE(INT,   "Order");
  GR_NODE       = VALUE(SETS, "Node group identifier") { SUBTYPES = (/SETS/GRNOD); }
  scalefactor_x       = VALUE(FLOAT, "X scale factor");
  scalefactor_y       = VALUE(FLOAT, "Y scale factor");
  scalefactor_z       = VALUE(FLOAT, "Z scale factor");
  node1        = VALUE(NODE,  "Center node identifier");
  ACTIVE        = VALUE(INT,   "Status");
  SUBMODEL  = VALUE(SOLVERSUBMODEL,"Submodel to Move") ;
//
  GHOST_PARA = VALUE(INT,   "Ghost Status");
  IF_INIT_STORE  = VALUE(INT,   "Status store");
  VX_NODE_1 = VALUE(FLOAT, "X original location of Node1");
  VY_NODE_1 = VALUE(FLOAT, "Y original location of Node1");
  VZ_NODE_1 = VALUE(FLOAT, "Z original location of Node1");
  TITLE = VALUE(STRING, "");
}
DEFAULTS(COMMON) {
  ACTIVE    = 1;
  ORDER     = -1;
}
DEFINITIONS(COMMON) {
  VALIDITY_FLAGS=(ACTIVE);
}

CHECK(COMMON) {
  scalefactor_x>0;
  scalefactor_y>0;
  scalefactor_z>0;
}
 
GUI(COMMON) {
 mandatory:
  graphical SCALAR(scalefactor_x) { DIMENSION="DIMENSIONLESS"; }
  graphical SCALAR(scalefactor_y) { DIMENSION="DIMENSIONLESS"; }
  graphical SCALAR(scalefactor_z) { DIMENSION="DIMENSIONLESS"; }
  //
 optional:
  graphical DATA(node1);
  //
  if(GHOST_PARA==1)
  {
      //graphical VECTOR(VX_NODE_1,VY_NODE_1,VZ_NODE_1) { DIMENSION="l"; }
      SCALAR(VX_NODE_1) { DIMENSION="l"; }
      SCALAR(VY_NODE_1) { DIMENSION="l"; }
      SCALAR(VZ_NODE_1) { DIMENSION="l"; }
  }
  //
  graphical SUPPORT("Support") {
    //OBJECTS=(NODE,ELEMENTS,PART,SEGMENT);
    ADD(GR_NODE,"Node group");
  }
}

FORMAT(radioss100) {
  HEADER("/TRANSFORM/SCA/%d",_ID_);
  CARD("%-100s",TITLE);
  COMMENT("# grnod_ID            Fscale_X            Fscale_Y            Fscale_Z  node_IDc");
  CARD("%10d%20lg%20lg%20lg%10d          ",GR_NODE, scalefactor_x, scalefactor_y, scalefactor_z, node1);
}

FORMAT(radioss90) {
  HEADER("/TRANSFORM/SCA/%d",_ID_);
  CARD("%-100s",TITLE);
  COMMENT("# grnod_ID            Fscale_X            Fscale_Y            Fscale_Z  node_IDc");
  CARD("%10d%20lg%20lg%20lg%10d",GR_NODE, scalefactor_x, scalefactor_y, scalefactor_z, node1);
}

