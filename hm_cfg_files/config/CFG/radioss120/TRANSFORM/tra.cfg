//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Translation transformation (/TRANSFORM/TRA) Setup File
//

ATTRIBUTES(COMMON) {
  ORDER   = VALUE(INT,   "Order");
  GR_NODE = VALUE(SETS, "Node group identifier") { SUBTYPES = (/SETS/GRNOD); }
  translation_x      = VALUE(FLOAT, "Translation value along global X axis");
  translation_y      = VALUE(FLOAT, "Translation value along global Y axis");
  translation_z      = VALUE(FLOAT, "Translation value along global Z axis");
  node1  = VALUE(NODE,  "Node identifier 1");
  node2  = VALUE(NODE,  "Node identifier 2");
  ACTIVE  = VALUE(INT,   "Status");
  SUBMODEL  = VALUE(SOLVERSUBMODEL,"Submodel to Move") ;
//
  GHOST_PARA = VALUE(INT,   "Ghost Status");
  IF_INIT_STORE  = VALUE(INT,   "Status store");
  VX_NODE_1 = VALUE(FLOAT, "X original location of Node1");
  VY_NODE_1 = VALUE(FLOAT, "Y original location of Node1");
  VZ_NODE_1 = VALUE(FLOAT, "Z original location of Node1");
  VX_NODE_2 = VALUE(FLOAT, "X original location of Node2");
  VY_NODE_2 = VALUE(FLOAT, "Y original location of Node2");
  VZ_NODE_2 = VALUE(FLOAT, "Z original location of Node2");
  TITLE = VALUE(STRING, "");
}
DEFAULTS(COMMON) {
  ACTIVE    = 1;
  ORDER     = -1;
}
DEFINITIONS(COMMON) {
  VALIDITY_FLAGS=(ACTIVE);
}

GUI(COMMON) {
 optional:
  SEPARATOR("Definition using coordinates ");
  //graphical VECTOR(translation_x,translation_y,translation_z) { DIMENSION="l"; }
  SCALAR(translation_x) { DIMENSION="l"; }
  SCALAR(translation_y) { DIMENSION="l"; }
  SCALAR(translation_z) { DIMENSION="l"; }
  //
  if(GHOST_PARA==1)
  {
      //graphical VECTOR(VX_NODE_1,VY_NODE_1,VZ_NODE_1) { DIMENSION="l"; }
      //graphical VECTOR(VX_NODE_2,VY_NODE_2,VZ_NODE_2) { DIMENSION="l"; }
      SCALAR(VX_NODE_1) { DIMENSION="l"; }
      SCALAR(VY_NODE_1) { DIMENSION="l"; }
      SCALAR(VZ_NODE_1) { DIMENSION="l"; }
      SCALAR(VX_NODE_2) { DIMENSION="l"; }
      SCALAR(VY_NODE_2) { DIMENSION="l"; }
      SCALAR(VZ_NODE_2) { DIMENSION="l"; }
  }
  //
  SEPARATOR("Definition using nodes ");
  graphical DATA(node1);
  graphical DATA(node2);
  //
  SEPARATOR();	
  //
  DATA(SUBMODEL);
  //
  graphical SUPPORT("Support") {
    //OBJECTS=(NODE,ELEMENTS,PART,SEGMENT);
    ADD(GR_NODE,"Node group");
  }
}

FORMAT(radioss100) {
  HEADER("/TRANSFORM/TRA/%d",_ID_);
  CARD("%-100s",TITLE);
  COMMENT("# grnod_ID       X_translation       Y_translation       Z_translation  node_ID1  node_ID2    sub_ID");       
  CARD("%10d%20lg%20lg%20lg%10d%10d%10d",GR_NODE,translation_x,translation_y,translation_z,node1,node2,SUBMODEL);
}

FORMAT(radioss90) {
  HEADER("/TRANSFORM/TRA/%d",_ID_);
  CARD("%-100s",TITLE);
  COMMENT("# grnod_ID       X_translation       Y_translation       Z_translation  node_ID1  node_ID2");       
  CARD("%10d%20lg%20lg%20lg%10d%10d",GR_NODE,translation_x,translation_y,translation_z,node1,node2);
}
