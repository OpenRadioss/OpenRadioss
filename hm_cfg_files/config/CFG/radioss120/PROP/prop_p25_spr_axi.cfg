//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Property SPR_AXI Type25
//

ATTRIBUTES(COMMON)
{
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    
    MASS                                    = VALUE(FLOAT,  " Spring Mass");
    INERTIA                                 = VALUE(FLOAT,  " Spring Inertia");
    SKEW_CSID                               = VALUE(SYSTEM,  " Skew System Identifier");
    ISENSOR                                 = VALUE(SENSOR,  " Sensor Identifier") {SUBTYPES=(/SENSOR/SENSOR_DEFINE);}
    ISFLAG                                  = VALUE(INT,  " Sensor Flag");
    Ifail                                   = VALUE(INT,  " Failure Criteria");
    Ileng                                   = VALUE(INT,  " Input Per unit Length Flag");
    Ifail2                                  = VALUE(INT,  " Failure Model Flag");
    //Tension
    STIFF1                                  = VALUE(FLOAT,  " Stiffness for Tension");
    DAMP1                                   = VALUE(FLOAT,  " Damping for Tension");
    Acoeft1                                 = VALUE(FLOAT,  " Coefficient for strain rate effect in tension ");
    Bcoeft1                                 = VALUE(FLOAT,  " Logarithmic coefficient for strain rate effect in tension)");
    Dcoeft1                                 = VALUE(FLOAT,  " Scale coefficients for elongation velocity.");
    FUN_A1                                  = VALUE(FUNCT,  " Function Identifier defining f(Delta)");
    HFLAG1                                  = VALUE(INT,  " Hardening Flag");
    FUN_B1                                  = VALUE(FUNCT,  " Function Identifier defining g(Delta)");
    FUN_C1                                  = VALUE(FUNCT,  " Function identifier defining lower yield curve");
    Prop_Tens_F                             = VALUE(FLOAT,  " Scale factor for Delta in function g");
    MIN_RUP1                                = VALUE(FLOAT,  " Negative Failure Limit");
    MAX_RUP1                                = VALUE(FLOAT,  " Positive Failure Limit");
    scale1                                  = VALUE(FLOAT,  " Abscissa scale factor for Delta(fct_ID1 and fct_ID3)");
    Prop_Tens_E                             = VALUE(FLOAT,  " Coefficient for Delta (homogeneous to a force)");
    FUN_D1                                  = VALUE(FUNCT,  " Function Identifier defining h(Delta)");
    F_EMC_a                                 = VALUE(FLOAT,  " Coefficient for Delta (homogeneous to a force)");
    
    //Shear
    STIFF2                                  = VALUE(FLOAT,  "Stiffness for Shear");
    DAMP2                                   = VALUE(FLOAT,  "Damping for Shear");
    Acoeft2                                 = VALUE(FLOAT,  " Coefficient for strain rate effect in shear");
    Bcoeft2                                 = VALUE(FLOAT,  " Logarithmic coefficient for strain rate effect in shear");
    Dcoeft2                                 = VALUE(FLOAT,  " Scale coefficients for shear velocity.");
    FUN_A2                                  = VALUE(FUNCT,  "Function identifier defining f(Delta)");
    HFLAG2                                  = VALUE(INT,  " Hardening Flag");
    FUN_B2                                  = VALUE(FUNCT,  " Function Identifier defining g(Delta)");
    FUN_C2                                  = VALUE(FUNCT,  " Function identifier defining lower yield curve");
    Prop_Shear_F                            = VALUE(FLOAT,  " Scale factor for Delta in function g");
    MIN_RUP2                                = VALUE(FLOAT,  " Negative Failure Limit");
    MAX_RUP2                                = VALUE(FLOAT,  " Positive Failure Limit");
    scale2                                  = VALUE(FLOAT,  " Abscissa scale factor for Delta(fct_ID1 and fct_ID3)");
    Prop_Shear_E                            = VALUE(FLOAT,  " Coefficient for Delta (homogeneous to a force)");
    FUN_D2                                  = VALUE(FUNCT,  " Function Identifier defining h(Delta)");
    F_EMC_n                                 = VALUE(FLOAT,  " Coefficient for Delta (homogeneous to a force)");
    
    //Torsion
    STIFF3                                  = VALUE(FLOAT,  "Stiffness for Torsion");
    DAMP3                                   = VALUE(FLOAT,  "Damping for Torsion");
    Acoeft3                                 = VALUE(FLOAT,  " Coefficient for strain rate effect in torsion");
    Bcoeft3                                 = VALUE(FLOAT,  " Logarithmic coefficient for strain rate effect in torsion");
    Dcoeft3                                 = VALUE(FLOAT,  " Scale coefficients for torsion velocity.");
    FUN_A3                                  = VALUE(FUNCT,  " Function identifier defining f(Theta)");
    HFLAG3                                  = VALUE(INT,  " Hardening Flag");
    FUN_B3                                  = VALUE(FUNCT,  " Function identifier defining g(Theta)");
    FUN_C3                                  = VALUE(FUNCT,  " Function identifier defining lower yield curve");
    Prop_Tor_F                              = VALUE(FLOAT,  " Scale factor for Theta in function g");
    MIN_RUP3                                = VALUE(FLOAT,  " Negative Failure Limit");
    MAX_RUP3                                = VALUE(FLOAT,  " Positive Failure Limit");
    scale3                                  = VALUE(FLOAT,  " Abscissa scale factor for Theta (fct_ID1 and fct_ID3)");
    Prop_Tor_E                              = VALUE(FLOAT,  " Coefficient for Theta (homogeneous to a moment)");
    FUN_D3                                  = VALUE(FUNCT,  " Function Identifier defining h(Theta)");
    F_EMC_b0                                = VALUE(FLOAT,  " Coefficient for Delta (homogeneous to a force)");
    
    //Bending
    STIFF4                                  = VALUE(FLOAT,  "Stiffness for Bending");
    DAMP4                                   = VALUE(FLOAT,  "Damping for Bending");
    Acoeft4                                 = VALUE(FLOAT,  " Coefficient for strain rate effect in bending");
    Bcoeft4                                 = VALUE(FLOAT,  " Logarithmic coefficient for strain rate effect in bending");
    Dcoeft4                                 = VALUE(FLOAT,  " Scale coefficients for bending velocity.");
    FUN_A4                                  = VALUE(FUNCT,  " Function identifier defining f(Theta)");
    HFLAG4                                  = VALUE(INT,  " Hardening Flag");
    FUN_B4                                  = VALUE(FUNCT,  "  Function identifier defining g(Theta)");
    FUN_C4                                  = VALUE(FUNCT,  " Function identifier defining lower yield curve");
    Prop_Bend_F                             = VALUE(FLOAT,  " Scale Factor for Theta in Function for Bending");
    MIN_RUP4                                = VALUE(FLOAT,  " Negative Failure Limit");
    MAX_RUP4                                = VALUE(FLOAT,  " Positive Failure Limit");
    scale4                                  = VALUE(FLOAT,  " Abscissa scale factor for Theta (fct_ID1 and fct_ID3)");
    Prop_Bend_E                             = VALUE(FLOAT,  " Coefficient for Theta (homogeneous to a force)");
    FUN_D4                                  = VALUE(FUNCT,  " Function Identifier defining h(Theta)");
    F_EMC_c                                 = VALUE(FLOAT,  " Coefficient for Delta (homogeneous to a force)");

    //Velocity Dependent Failure Parameters
    TRANS_VEL0                              = VALUE(FLOAT,  " Reference Translational Velocity");
    ROT_VEL0                                = VALUE(FLOAT,  " Reference Rotational Velocity");
    //Tension
    C1                                      = VALUE(FLOAT,  " Relative Velocity Coefficient in Translation X");
    REL_VEL_EXP1                            = VALUE(FLOAT,  " Relative Velocity Exponent in Translation X");
    ALPHA1                                  = VALUE(FLOAT,  " Mult Factor in Translation X");
    BETA1                                   = VALUE(FLOAT,  " Exponent in Translation X");
    //Shear
    C2                                      = VALUE(FLOAT,  " Relative Velocity Coefficient in Shear");
    REL_VEL_EXP2                            = VALUE(FLOAT,  " Relative Velocity Exponent in Shear");
    ALPHA2                                  = VALUE(FLOAT,  " Mult Factor in Shear");
    BETA2                                   = VALUE(FLOAT,  " Exponent in Shear");
    //Torsion
    C3                                      = VALUE(FLOAT,  " Relative Velocity Coefficient in Torsion X");
    REL_VEL_EXP3                            = VALUE(FLOAT,  " Relative Velocity Exponent in Torsion X");
    ALPHA3                                  = VALUE(FLOAT,  " Mult Factor in Torsion X");
    BETA3                                   = VALUE(FLOAT,  " Exponent in Torsion X");
    //Bending
    C4                                      = VALUE(FLOAT,  " Relative Velocity Coefficient in Bending");
    REL_VEL_EXP4                            = VALUE(FLOAT,  " Relative velocity exponent in Bending");
    ALPHA4                                  = VALUE(FLOAT,  " Mult factor in Bending");
    BETA4                                   = VALUE(FLOAT,  " Exponent in Bending");
    
    Prop_Name_OR_Type                       = VALUE(INT, "");
    IO_FLAG                                 = VALUE(INT, "");
    TYPE_NO                                 = VALUE(STRING, "");
    TITLE                                   = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    ALPHA1                                  = 6145;
    ALPHA2                                  = 6146;
    ALPHA3                                  = 6147;
    ALPHA4                                  = 6148;
    Acoeft1                                 = 5160;
    Acoeft2                                 = 5180;
    Acoeft3                                 = 5188;
    Acoeft4                                 = 5196;
    BETA1                                   = 6151;
    BETA2                                   = 6152;
    BETA3                                   = 6153;
    BETA4                                   = 6154;
    Bcoeft1                                 = 5161;
    Bcoeft2                                 = 5181;
    Bcoeft3                                 = 5189;
    Bcoeft4                                 = 5197;
    C1                                      = 6306;
    C2                                      = 6307;
    C3                                      = 6308;
    C4                                      = 6309;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;
    DAMP1                                   =  254;
    DAMP2                                   = 5179;
    DAMP3                                   = 5187;
    DAMP4                                   = 5195;
    Dcoeft1                                 = 5162;
    Dcoeft2                                 = 5182;
    Dcoeft3                                 = 5190;
    Dcoeft4                                 = 5198;
    FUN_A1                                  =   45;
    FUN_A2                                  =  170;
    FUN_A3                                  =  172;
    FUN_A4                                  =  200;
    FUN_B1                                  =  168;
    FUN_B2                                  =  171;
    FUN_B3                                  =  199;
    FUN_B4                                  =  224;
    FUN_C1                                  = 1189;
    FUN_C2                                  = 1167;
    FUN_C3                                  = 5347;
    FUN_C4                                  = 5348;
    HFLAG1                                  = 5163;
    HFLAG2                                  = 5183;
    HFLAG3                                  = 5191;
    HFLAG4                                  = 5199;
    INERTIA                                 = 5156;
    ISENSOR                                 = 5157;
    ISFLAG                                  = 5158;
    Ifail                                   = 8032;
    Ifail2                                  = 1000;
    Ileng                                   =  999;
    MASS                                    =  167;
    MAX_RUP1                                = 5165;
    MAX_RUP2                                = 5185;
    MAX_RUP3                                = 5193;
    MAX_RUP4                                = 5201;
    MIN_RUP1                                = 5164;
    MIN_RUP2                                = 5184;
    MIN_RUP3                                = 5192;
    MIN_RUP4                                = 5200;
    NUM_COMMENTS                            = 5110;
    Prop_Bend_E                             = 4843;
    Prop_Bend_F                             = 4842;
    Prop_Shear_E                            = 4841;
    Prop_Shear_F                            = 4840;
    Prop_Tens_E                             = 4839;
    Prop_Tens_F                             = 4838;
    Prop_Tor_E                              = 4144;
    Prop_Tor_F                              = 4143;
    REL_VEL_EXP1                            = 6139;
    REL_VEL_EXP2                            = 6140;
    REL_VEL_EXP3                            = 6141;
    REL_VEL_EXP4                            = 6142;
    ROT_VEL0                                = 6138;
    SKEW_CSID                               =  412;
    STIFF1                                  = 1131;
    STIFF2                                  = 5178;
    STIFF3                                  = 5186;
    STIFF4                                  = 5194;
    TRANS_VEL0                              = 6137;
    scale1                                  = 4528;
    scale2                                  = 4529;
    scale3                                  = 4530;
    scale4                                  = 4531;
    FUN_D1                                  = 8035;
    FUN_D2                                  = 8036;
    FUN_D3                                  = 8037;
    FUN_D4                                  = 8038;
    F_EMC_a                                 = 8093;
    F_EMC_b0                                = 8095;
    F_EMC_c                                 = 8099;
    F_EMC_n                                 = 8094;
    
    Prop_Name_OR_Type                       = 4537;
    TITLE                                   =   -1;
    TYPE_NO                                 =   -1;
    IO_FLAG                                 =   -1;
}

CHECK(COMMON)
{
    INERTIA                                 >  0.0;
    MASS                                    >  0.0;
    MIN_RUP1                                <= 0.0;
    MIN_RUP2                                <= 0.0;
    MIN_RUP3                                <= 0.0;
    MIN_RUP4                                <= 0.0;
}

DEFAULTS(COMMON)
{
    ALPHA1                             =     1.0;
    ALPHA2                             =     1.0;
    ALPHA3                             =     1.0;
    ALPHA4                             =     1.0;
    Acoeft1                            =     1.0;
    Acoeft2                            =     1.0;
    Acoeft3                            =     1.0;
    Acoeft4                            =     1.0;
    BETA1                              =     2.0;
    BETA2                              =     2.0;
    BETA3                              =     2.0;
    BETA4                              =     2.0;
    Bcoeft2                            =     1.0;
    Bcoeft4                            =     1.0;
    C1                                 =     0.0;
    C2                                 =     0.0;
    C3                                 =     0.0;
    C4                                 =     0.0;
    Dcoeft1                            =     1.0;
    Dcoeft2                            =     1.0;
    Dcoeft3                            =     1.0;
    Dcoeft4                            =     1.0;
    Ifail2                             =       0;
    MAX_RUP1                           =  1.0e30;
    MAX_RUP2                           =  1.0e30;
    MAX_RUP3                           =  1.0e30;
    MAX_RUP4                           =  1.0e30;
    MIN_RUP1                           = -1.0e30;
    MIN_RUP2                           = -1.0e30;
    MIN_RUP3                           = -1.0e30;
    MIN_RUP4                           = -1.0e30;
    REL_VEL_EXP1                       =     0.0;
    REL_VEL_EXP2                       =     0.0;
    REL_VEL_EXP3                       =     0.0;
    REL_VEL_EXP4                       =     0.0;
    ROT_VEL0                           =     1.0;
    TRANS_VEL0                         =     1.0;
    scale1                             =     1.0;
    scale2                             =     1.0;
    scale3                             =     1.0;
    scale4                             =     1.0;
    F_EMC_a                            =     1.0;
    F_EMC_b0                           =     1.0;
    F_EMC_c                            =     1.0;
    F_EMC_n                            =     1.0;
    Prop_Name_OR_Type                  = 0;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
       ENUM_VALUE_FLAG=TRUE;
       ADD(1, "1:Hide in Menu/Export");
       ADD(2, "2:Show in Menu/Export");
       ADD(3, "3:Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Prop_Name_OR_Type == 2)
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TYPE25/");

    }
    else
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/SPR_AXI/");
    }
    SCALAR(MASS)    { if(Ileng==0) { DIMENSION="m";              } else { DIMENSION="lineic_mass";                       } }
    SCALAR(INERTIA) { if(Ileng==0) { DIMENSION="massmi"; } else { DIMENSION="moment_of_inertia_per_unit_length"; } }
    DATA(SKEW_CSID) {/FILTER/Framefix/0/EQ;}
    DATA(ISENSOR) {SUBTYPES=(/SENSOR/SENSOR_DEFINE);}
    RADIO(ISFLAG)
    {
        ADD(0, "0:Spring Activated by Sensor.");
        ADD(1, "1:Spring Deactivated by Sensor.");
    }
    RADIO(Ifail)
    {
        ADD(0, "0:Uni-Directional Criteria.");
        ADD(1, "1:Multi-Directional Criteria.");
    }
    RADIO(Ileng)
    {
        ADD(0, "0:Inactive.");
        ADD(1, "1:Active.");
    }
    RADIO(Ifail2)
    {
        ADD(0, "0:Old Displacement Criteria.");
        ADD(1, "1:New Displacement Criteria.");
        ADD(2, "2:Force Criteria.");
        ADD(3, "3:Internal Energy Criteria.");
    }
##
    SCALAR(STIFF1) { if(Ileng==0) { DIMENSION="translation_stiffness"; } else { DIMENSION="force";                } }
    SCALAR(DAMP1) { if(Ileng==0) { DIMENSION="massFlux";             } else { DIMENSION="QUANTITY OF MOVEMENT"; } }
    SCALAR(Acoeft1) { DIMENSION="force"; } 
    SCALAR(Bcoeft1) { DIMENSION="force"; } 
    SCALAR(Dcoeft1) { if(Ileng==0) { DIMENSION="velocity";                 } else { DIMENSION="f";            } }
    FUNCTION(FUN_A1) 
    {
    if(Ileng==FALSE) 
    { 
       X_TITLE="dl";     X_DIMENSION="l";        
    }
    else             
    { 
       X_TITLE="Strain"; X_DIMENSION="DIMENSIONLESS"; 
    }
    Y_TITLE="f"; Y_DIMENSION="force";
    /FILTER/groupEnumField/1/EQ;
    }
    RADIO(HFLAG1)
    {
        ADD(0, "0:Nonlinear Elastic Spring.");
        ADD(1, "1:Elasto-Plastic Spring.");
        ADD(2, "2:Elasto-Plastic with Decoupled Hardening in Tension and Compression.");
        ADD(4, "4:Kinematic Hardening.");
        ADD(5, "5:Elasto-Plastic with Nonlinear Unloading.");
        ADD(6, "6:Nonlinear elasto-plastic spring with isotropic hardening and nonlinear unloading");
        ADD(7, "7:Nonlinear spring with elastic hysteresis");
    }
    FUNCTION(FUN_B1) 
    {
    if(Ileng==FALSE) { X_TITLE="dl/dt";       X_DIMENSION="velocity";     }
    else             { X_TITLE="Strain rate"; X_DIMENSION="f"; }
    Y_TITLE="g";      Y_DIMENSION="DIMENSIONLESS";
    /FILTER/groupEnumField/1/EQ;
    }
    FUNCTION(FUN_C1) {
    if((HFLAG1==4) && (Ileng==FALSE)) {
      X_TITLE="dl";                    X_DIMENSION="l";
      Y_TITLE="f3";                    Y_DIMENSION="force";
    } else if((HFLAG1==4) && (Ileng!=FALSE)) {
      X_TITLE="Strain";                X_DIMENSION="DIMENSIONLESS";
      Y_TITLE="f3";                    Y_DIMENSION="force";
    } else if((HFLAG1==5) && (Ileng==FALSE)) {
      X_TITLE="Maximum displacement";  X_DIMENSION="l";
      Y_TITLE="Residual displacement"; Y_DIMENSION="l";
    } else if((HFLAG1==5) && (Ileng!=FALSE)) {
      X_TITLE="Maximum strain";        X_DIMENSION="DIMENSIONLESS";
      Y_TITLE="Residual strain";       Y_DIMENSION="DIMENSIONLESS";
    }
    /FILTER/groupEnumField/1/EQ;
    }
    SCALAR(Prop_Tens_F) { if(Ileng==0) { DIMENSION="velocity";                 } else { DIMENSION="f";            } }
    SCALAR(MIN_RUP1){
      if(Ileng==0 && Ifail2 < 2)        { TITLE="Negative failure displacement in transitional direction";  DIMENSION="l";        }
      else if (Ileng==1 && Ifail2 < 2) { TITLE="Negative rupture strain"; DIMENSION="DIMENSIONLESS"; }
      else if (Ifail2 == 2) { TITLE="Negative failure force in transitional direction"; DIMENSION="force"; }
      else if (Ifail2 == 3) { TITLE="Negative failure internal energy related to transitional direction"; DIMENSION="energy"; }
    }
    SCALAR(MAX_RUP1) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Positive failure displacement in transitional direction";  DIMENSION="l";        }
      else if (Ileng==1 && Ifail2 < 2) { TITLE="Positive rupture strain"; DIMENSION="DIMENSIONLESS";  }
      else if (Ifail2 == 2)  { TITLE="Positive failure force in transitional direction"; DIMENSION="force"; }
      else if (Ifail2 == 3)   { TITLE="Positive failure internal energy related to transitional direction"; DIMENSION="energy"; }
    }
    SCALAR(scale1) { if(Ileng==0) { DIMENSION="l";} else { DIMENSION="DIMENSIONLESS"; } }
    SCALAR(Prop_Tens_E) { DIMENSION="force"; }
    FUNCTION(FUN_D1) 
    {
      X_TITLE="Strain";                X_DIMENSION="DIMENSIONLESS";
      Y_TITLE="h";                    Y_DIMENSION="force";
      /FILTER/groupEnumField/1/EQ;
    }
    SCALAR(F_EMC_a) {DIMENSION="force";}
##
    SCALAR(STIFF2) { if(Ileng==0) { DIMENSION="translation_stiffness"; } else { DIMENSION="force";                } }
    SCALAR(DAMP2) { if(Ileng==0) { DIMENSION="massFlux";             } else { DIMENSION="QUANTITY OF MOVEMENT"; } }
    SCALAR(Acoeft2) { DIMENSION="force"; } 
    SCALAR(Bcoeft2) { DIMENSION="force"; } 
    SCALAR(Dcoeft2) { if(Ileng==0) { DIMENSION="velocity";                 } else { DIMENSION="f";            } }
    FUNCTION(FUN_A2) 
    {
    if(Ileng==FALSE) 
    { 
       X_TITLE="dl";     X_DIMENSION="l";        
    }
    else             
    { 
       X_TITLE="Strain"; X_DIMENSION="DIMENSIONLESS"; 
    }
    Y_TITLE="f"; Y_DIMENSION="force";
    /FILTER/groupEnumField/1/EQ;
    }
    RADIO(HFLAG2)
    {
        ADD(0, "0:Nonlinear Elastic Spring.");
        ADD(1, "1:Elasto-Plastic Spring.");
        ADD(2, "2:Elasto-Plastic with Decoupled Hardening in Tension and Compression.");
        ADD(4, "4:Kinematic Hardening.");
        ADD(5, "5:Elasto-Plastic with Nonlinear Unloading.");
        ADD(6, "6:Nonlinear elasto-plastic spring with isotropic hardening and nonlinear unloading");
        ADD(7, "7:Nonlinear spring with elastic hysteresis");
    }
    FUNCTION(FUN_B2) 
    {
    if(Ileng==FALSE) { X_TITLE="dl/dt";       X_DIMENSION="velocity";     }
    else             { X_TITLE="Strain rate"; X_DIMENSION="f"; }
    Y_TITLE="g";      Y_DIMENSION="DIMENSIONLESS";
    /FILTER/groupEnumField/1/EQ;
    }
    FUNCTION(FUN_C2) {
    if((HFLAG2==4) && (Ileng==FALSE)) {
      X_TITLE="dl";                    X_DIMENSION="l";
      Y_TITLE="f3";                    Y_DIMENSION="force";
    } else if((HFLAG2==4) && (Ileng!=FALSE)) {
      X_TITLE="Strain";                X_DIMENSION="DIMENSIONLESS";
      Y_TITLE="f3";                    Y_DIMENSION="force";
    } else if((HFLAG2==5) && (Ileng==FALSE)) {
      X_TITLE="Maximum displacement";  X_DIMENSION="l";
      Y_TITLE="Residual displacement"; Y_DIMENSION="l";
    } else if((HFLAG2==5) && (Ileng!=FALSE)) {
      X_TITLE="Maximum strain";        X_DIMENSION="DIMENSIONLESS";
      Y_TITLE="Residual strain";       Y_DIMENSION="DIMENSIONLESS";
    }
    /FILTER/groupEnumField/1/EQ;
    }
    SCALAR(Prop_Shear_F) { if(Ileng==0) { DIMENSION="velocity";                 } else { DIMENSION="f";            } }
    SCALAR(MIN_RUP2){
      if(Ileng==0 && Ifail2 < 2)        { TITLE="Negative failure displacement in transitional direction";  DIMENSION="l";        }
      else if (Ileng==1 && Ifail2 < 2) { TITLE="Negative rupture strain"; DIMENSION="DIMENSIONLESS"; }
      else if (Ifail2 == 2) { TITLE="Negative failure force in transitional direction"; DIMENSION="force"; }
      else if (Ifail2 == 3) { TITLE="Negative failure internal energy related to transitional direction"; DIMENSION="energy"; }
    }
    SCALAR(MAX_RUP2) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Positive failure displacement in transitional direction";  DIMENSION="l";        }
      else if (Ileng==1 && Ifail2 < 2) { TITLE="Positive rupture strain"; DIMENSION="DIMENSIONLESS";  }
      else if (Ifail2 == 2)  { TITLE="Positive failure force in transitional direction"; DIMENSION="force"; }
      else if (Ifail2 == 3)   { TITLE="Positive failure internal energy related to transitional direction"; DIMENSION="energy"; }
    }
    SCALAR(scale2) { if(Ileng==0) { DIMENSION="l";} else { DIMENSION="DIMENSIONLESS"; } }
    SCALAR(Prop_Shear_E) { DIMENSION="force"; }
    FUNCTION(FUN_D2) 
    {
      X_TITLE="Strain";                X_DIMENSION="DIMENSIONLESS";
      Y_TITLE="h";                    Y_DIMENSION="force";
      /FILTER/groupEnumField/1/EQ;
    }
    SCALAR(F_EMC_n) {DIMENSION="force";}
##
    SCALAR(STIFF3) { if(Ileng==0) { DIMENSION="ROTATION STIFFNESS"; } else { DIMENSION="ROTATION STIFFNESS PER UNIT LENGTH"; }  }
    SCALAR(DAMP3) { if(Ileng==0) { DIMENSION="torsion_damping";    } else { DIMENSION="TORSION DAMPING PER UNIT LENGTH";    }  }
    SCALAR(Acoeft3) { DIMENSION="moment";}
    SCALAR(Bcoeft3) { DIMENSION="moment";}
    SCALAR(Dcoeft3) { if(Ileng==0) { DIMENSION="ang_velocity";      } else { DIMENSION="ANGULAR SPEED PER UNIT LENGTH";      }  }
    FUNCTION(FUN_A3,"f(r)") {
      if(Ileng==FALSE) { X_TITLE="Angular disp.";          X_DIMENSION="a";                 }
      else             { X_TITLE="Angular disp. (lineic)"; X_DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      Y_TITLE="f"; Y_DIMENSION="moment";
      /FILTER/groupEnumField/1/EQ;
    }
    RADIO(HFLAG3)
    {
        ADD(0, "0:Nonlinear Elastic Spring.");
        ADD(1, "1:Elasto-Plastic Spring.");
        ADD(2, "2:Elasto-Plastic with Decoupled Hardening in Tension and Compression.");
        ADD(4, "4:Kinematic Hardening.");
        ADD(5, "5:Elasto-Plastic with Nonlinear Unloading.");
        ADD(6, "6:Nonlinear elasto-plastic spring with isotropic hardening and nonlinear unloading");
        ADD(7, "7:Nonlinear spring with elastic hysteresis");
    }
    FUNCTION(FUN_B3,"g(dr/dt)") {
      if(Ileng==FALSE) { X_TITLE="Angular speed";          X_DIMENSION="ang_velocity"; } 
      else             { X_TITLE="Angular speed (lineic)"; X_DIMENSION="ANGULAR SPEED PER UNIT LENGTH"; }
      Y_TITLE="g";      Y_DIMENSION="DIMENSIONLESS";
      /FILTER/groupEnumField/1/EQ;
    }
    FUNCTION(FUN_C3)
    {
    if((HFLAG3==4) && (Ileng==FALSE)) 
    {
      X_TITLE="Angular disp.";               X_DIMENSION="a";
      Y_TITLE="f3";                          Y_DIMENSION="moment";
    } 
    else if((HFLAG3==4) && (Ileng!=FALSE)) 
    {
      X_TITLE="Angular disp. (lineic)";      X_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
      Y_TITLE="f3";                          Y_DIMENSION="moment";
    } 
    else if((HFLAG3==5) && (Ileng==FALSE))
    {
       X_TITLE="Max. angular disp.";          X_DIMENSION="a";
       Y_TITLE="Res. angular disp.";          Y_DIMENSION="a";
    } 
    else if((HFLAG3==5) && (Ileng!=FALSE))
    {
       X_TITLE="Max. angular disp. (lineic)"; X_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
       Y_TITLE="Res. angular disp. (lineic)"; Y_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
    }
    /FILTER/groupEnumField/1/EQ;
    }
    SCALAR(Prop_Tor_F) { if(Ileng==0) { DIMENSION="ang_velocity"; } else { DIMENSION="ANGULAR SPEED PER UNIT LENGTH"; }  }
    SCALAR(MIN_RUP3) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Negative failure displacement in rotational direction";  DIMENSION="a";        }
      else if (Ileng==1 && Ifail2 < 2) { TITLE="Negative rupture strain"; DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      else if (Ifail2 == 2)  { TITLE="Negative failure force in rotational direction"; DIMENSION="moment"; }
      else if (Ifail2 == 3)   { TITLE="Negative failure internal energy related to rotational"; DIMENSION="energy"; }
    }
    SCALAR(MAX_RUP3) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Positive failure displacement in rotational direction";  DIMENSION="a";        }
      else if (Ileng==1 && Ifail2 < 2) { TITLE="Positive rupture strain"; DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      else if (Ifail2 == 2)  { TITLE="Positive failure force in rotational direction"; DIMENSION="moment"; }
      else if (Ifail2 == 3)   { TITLE="Positive failure internal energy related to rotational direction"; DIMENSION="energy"; }
    }
    SCALAR(scale3) { if(Ileng==0) { DIMENSION="a";} else { DIMENSION="PLANE ANGLE PER UNIT LENGTH"; } }
    SCALAR(Prop_Tor_E) { DIMENSION="moment"; } 
    FUNCTION(FUN_D3)
    {
      X_TITLE="Angular disp.";               X_DIMENSION="a";
      Y_TITLE="h";                          Y_DIMENSION="moment";
      /FILTER/groupEnumField/1/EQ;
    }
    SCALAR(F_EMC_b0) {DIMENSION="moment";}
##
    SCALAR(STIFF4) { if(Ileng==0) { DIMENSION="ROTATION STIFFNESS"; } else { DIMENSION="ROTATION STIFFNESS PER UNIT LENGTH"; }  }
    SCALAR(DAMP4) { if(Ileng==0) { DIMENSION="torsion_damping";    } else { DIMENSION="TORSION DAMPING PER UNIT LENGTH";    }  }
    SCALAR(Acoeft4) { DIMENSION="moment";}
    SCALAR(Bcoeft4) { DIMENSION="moment";}
    SCALAR(Dcoeft4) { if(Ileng==0) { DIMENSION="ang_velocity";      } else { DIMENSION="ANGULAR SPEED PER UNIT LENGTH";      }  }
    FUNCTION(FUN_A4,"f(r)") {
      if(Ileng==FALSE) { X_TITLE="Angular disp.";          X_DIMENSION="a";                 }
      else             { X_TITLE="Angular disp. (lineic)"; X_DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      Y_TITLE="f"; Y_DIMENSION="moment";
      /FILTER/groupEnumField/1/EQ;
    }
    RADIO(HFLAG4)
    {
        ADD(0, "0:Nonlinear Elastic Spring.");
        ADD(1, "1:Elasto-Plastic Spring.");
        ADD(2, "2:Elasto-Plastic with Decoupled Hardening in Tension and Compression.");
        ADD(4, "4:Kinematic Hardening.");
        ADD(5, "5:Elasto-Plastic with Nonlinear Unloading.");
        ADD(6, "6:Nonlinear elasto-plastic spring with isotropic hardening and nonlinear unloading");
        ADD(7, "7:Nonlinear spring with elastic hysteresis");
    }
    FUNCTION(FUN_B4,"g(dr/dt)") {
      if(Ileng==FALSE) { X_TITLE="Angular speed";          X_DIMENSION="ang_velocity"; } 
      else             { X_TITLE="Angular speed (lineic)"; X_DIMENSION="ANGULAR SPEED PER UNIT LENGTH"; }
      Y_TITLE="g";      Y_DIMENSION="DIMENSIONLESS";
      /FILTER/groupEnumField/1/EQ;
    }
    FUNCTION(FUN_C4)
    {
    if((HFLAG4==4) && (Ileng==FALSE)) 
    {
      X_TITLE="Angular disp.";               X_DIMENSION="a";
      Y_TITLE="f3";                          Y_DIMENSION="moment";
    } 
    else if((HFLAG4==4) && (Ileng!=FALSE)) 
    {
      X_TITLE="Angular disp. (lineic)";      X_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
      Y_TITLE="f3";                          Y_DIMENSION="moment";
    } 
    else if((HFLAG4==5) && (Ileng==FALSE))
    {
       X_TITLE="Max. angular disp.";          X_DIMENSION="a";
       Y_TITLE="Res. angular disp.";          Y_DIMENSION="a";
    } 
    else if((HFLAG4==5) && (Ileng!=FALSE))
    {
       X_TITLE="Max. angular disp. (lineic)"; X_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
       Y_TITLE="Res. angular disp. (lineic)"; Y_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
    }
    /FILTER/groupEnumField/1/EQ;
    }
    SCALAR(Prop_Bend_F) { if(Ileng==0) { DIMENSION="ang_velocity"; } else { DIMENSION="ANGULAR SPEED PER UNIT LENGTH"; }  }
    SCALAR(MIN_RUP4) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Negative failure displacement in rotational direction";  DIMENSION="a";        }
      else if (Ileng==1 && Ifail2 < 2) { TITLE="Negative rupture strain"; DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      else if (Ifail2 == 2)  { TITLE="Negative failure force in rotational direction"; DIMENSION="moment"; }
      else if (Ifail2 == 3)   { TITLE="Negative failure internal energy related to rotational"; DIMENSION="energy"; }
    }
    SCALAR(MAX_RUP4) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Positive failure displacement in rotational direction";  DIMENSION="a";        }
      else if (Ileng==1 && Ifail2 < 2) { TITLE="Positive rupture strain"; DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      else if (Ifail2 == 2)  { TITLE="Positive failure force in rotational direction"; DIMENSION="moment"; }
      else if (Ifail2 == 3)   { TITLE="Positive failure internal energy related to rotational direction"; DIMENSION="energy"; }
    }
    SCALAR(scale4) { if(Ileng==0) { DIMENSION="a";} else { DIMENSION="PLANE ANGLE PER UNIT LENGTH"; } }
    SCALAR(Prop_Bend_E) { DIMENSION="moment"; } 
    FUNCTION(FUN_D4)
    {
      X_TITLE="Angular disp.";               X_DIMENSION="a";
      Y_TITLE="h";                          Y_DIMENSION="moment";
      /FILTER/groupEnumField/1/EQ;
    }
    SCALAR(F_EMC_c) {DIMENSION="moment";}
#
    SCALAR(TRANS_VEL0) { DIMENSION="velocity";                 }
    SCALAR(ROT_VEL0) { DIMENSION="ang_velocity";         }
    SEPARATOR("");
    SEPARATOR("Tension");
    SCALAR(C1) {
      if(Ileng==0 && Ifail2 < 2)  { DIMENSION="l";        }
      else if(Ileng==1 && Ifail2 < 2)  { DIMENSION="DIMENSIONLESS";        }
      else if( Ifail2 == 2)  { DIMENSION="force";        }
      else if( Ifail2 == 3)  { DIMENSION="energy";        }
    }
    SCALAR(REL_VEL_EXP1);
    SCALAR(ALPHA1);
    SCALAR(BETA1);
    SCALAR(C2) {
      if(Ileng==0 && Ifail2 < 2)  { DIMENSION="l";        }
      else if(Ileng==1 && Ifail2 < 2)  { DIMENSION="DIMENSIONLESS";        }
      else if( Ifail2 == 2)  { DIMENSION="force";        }
      else if( Ifail2 == 3)  { DIMENSION="energy";        }
    }
    SCALAR(REL_VEL_EXP2);
    SCALAR(ALPHA2);
    SCALAR(BETA2);
    SCALAR(C3) {
      if(Ileng==0 && Ifail2 < 2)  { DIMENSION="a";        }
      else if(Ileng==1 && Ifail2 < 2)  { DIMENSION="PLANE ANGLE PER UNIT LENGTH";        }
      else if( Ifail2 == 2)  { DIMENSION="moment";        }
      else if( Ifail2 == 3)  { DIMENSION="energy";        }
    } 
    SCALAR(REL_VEL_EXP3);
    SCALAR(ALPHA3);
    SCALAR(BETA3);
    SCALAR(C4) {
      if(Ileng==0 && Ifail2 < 2)  { DIMENSION="a";        }
      else if(Ileng==1 && Ifail2 < 2)  { DIMENSION="PLANE ANGLE PER UNIT LENGTH";        }
      else if( Ifail2 == 2)  { DIMENSION="moment";        }
      else if( Ifail2 == 3)  { DIMENSION="energy";        }
    } 
    SCALAR(REL_VEL_EXP4);
    SCALAR(ALPHA4);
    SCALAR(BETA4);
}

//File format for Radioss 120
FORMAT(radioss120)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE25/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SPR_AXI/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#               Mass             Inertia   skew_ID   sens_ID    Isflag     Ifail     Ileng    Ifail2");
    CARD("%20lg%20lg%10d%10d%10d%10d%10d%10d",MASS,INERTIA,SKEW_CSID,ISENSOR,ISFLAG,Ifail,Ileng,Ifail2);
    /*Tension*/
    //
    COMMENT("#             K_Tens              C_Tens              A_Tens              B_Tens              D_Tens");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF1,DAMP1,Acoeft1,Bcoeft1,Dcoeft1);
    //
    COMMENT("#  fct_ID1    H_Tens   fct_ID2   fct_ID3         Fscale_Tens       DeltaMin_Tens       DeltaMax_Tens");
    CARD("%10d%10d%10d%10d%20lg%20lg%20lg",FUN_A1,HFLAG1,FUN_B1,FUN_C1,Prop_Tens_F,MIN_RUP1,MAX_RUP1);
    //
    COMMENT("#        Ascale_Tens              E_Tens   fct_ID4         Hscale_Tens");
    CARD("%20lg%20lg%10d%20lg",scale1,Prop_Tens_E,FUN_D1,F_EMC_a);
    /*Shear*/
    //
    COMMENT("#            K_Shear             C_Shear             A_Shear             B_Shear             D_Shear");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF2,DAMP2,Acoeft2,Bcoeft2,Dcoeft2);
    //
    COMMENT("# fct_ID21   H_Shear  fct_ID22  fct_ID23        Fscale_Shear      DeltaMin_Shear      DeltaMax_Shear");
    CARD("%10d%10d%10d%10d%20lg%20lg%20lg",FUN_A2,HFLAG2,FUN_B2,FUN_C2,Prop_Shear_F,MIN_RUP2,MAX_RUP2);
    //
    COMMENT("#       Ascale_Shear             E_Shear  fct_ID24        Hscale_Shear");
    CARD("%20lg%20lg%10d%20lg",scale2,Prop_Shear_E,FUN_D2,F_EMC_n);
    /*Torsion*/
    //
    COMMENT("#             K_Tors              C_Tors              A_Tors              B_Tors              D_Tors");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF3,DAMP3,Acoeft3,Bcoeft3,Dcoeft3);
    //
    COMMENT("# fct_ID11    H_Tors  fct_ID12  fct_ID13         Fscale_Tors       ThetaMin_Tors       ThetaMax_Tors");
    CARD("%10d%10d%10d%10d%20lg%20lg%20lg",FUN_A3,HFLAG3,FUN_B3,FUN_C3,Prop_Tor_F,MIN_RUP3,MAX_RUP3);
    //
    COMMENT("#        Ascale_Tors              E_Tors  fct_ID14         Hscale_Tors");
    CARD("%20lg%20lg%10d%20lg",scale3,Prop_Tor_E,FUN_D3,F_EMC_b0);
    /*Bending*/
    //
    COMMENT("#             K_Bend              C_Bend              A_Bend              B_Bend              D_Bend");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF4,DAMP4,Acoeft4,Bcoeft4,Dcoeft4);
    //
    COMMENT("# fct_ID31    H_Bend  fct_ID32  fct_ID33         Fscale_Bend       ThetaMin_Bend       ThetaMax_Bend");
    CARD("%10d%10d%10d%10d%20lg%20lg%20lg",FUN_A4,HFLAG4,FUN_B4,FUN_C4,Prop_Bend_F,MIN_RUP4,MAX_RUP4);
    //
    COMMENT("#        Ascale_Bend              E_Bend  fct_ID34         Hscale_Bend");
    CARD("%20lg%20lg%10d%20lg",scale4,Prop_Bend_E,FUN_D4,F_EMC_c);
    /*Velocity Dependent Failure Parameters*/
    //
    COMMENT("#                 vo                  wo");
    CARD("%20lg%20lg",TRANS_VEL0,ROT_VEL0);
    /*Tension*/
    //
    COMMENT("#                 c1                  n1              alpha1               beta1");
    CARD("%20lg%20lg%20lg%20lg",C1,REL_VEL_EXP1,ALPHA1,BETA1);
    /*Shear*/
    //
    COMMENT("#            c_Shear             n_Shear         alpha_Shear          beta_Shear");
    CARD("%20lg%20lg%20lg%20lg",C2,REL_VEL_EXP2,ALPHA2,BETA2);
    /*Torsion*/
    //
    COMMENT("#             c_Tors              n_Tors          alpha_Tors           beta_Tors");
    CARD("%20lg%20lg%20lg%20lg",C3,REL_VEL_EXP3,ALPHA3,BETA3);
    /*Bending*/
    //
    COMMENT("#             c_Bend              n_Bend          alpha_Bend           beta_Bend");
    CARD("%20lg%20lg%20lg%20lg",C4,REL_VEL_EXP4,ALPHA4,BETA4);
}

// File format for Radioss 51
FORMAT(radioss51) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE25/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SPR_AXI/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#               Mass             Inertia   skew_ID   sens_ID    Isflag     Ifail     Ileng    Ifail2");
    CARD("%20lg%20lg%10d%10d%10d%10d%10d%10d",MASS,INERTIA,SKEW_CSID,ISENSOR,ISFLAG,Ifail,Ileng,Ifail2);
    /*Tension*/
    //
    COMMENT("#             K_Tens              C_Tens              A_Tens              B_Tens              D_Tens");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF1,DAMP1,Acoeft1,Bcoeft1,Dcoeft1);
    //
    COMMENT("#  fct_ID1    H_Tens   fct_ID2   fct_ID3         Fscale_Tens       DeltaMin_Tens       DeltaMax_Tens");
    CARD("%10d%10d%10d%10d%20lg%20lg%20lg",FUN_A1,HFLAG1,FUN_B1,FUN_C1,Prop_Tens_F,MIN_RUP1,MAX_RUP1);
    //
    COMMENT("#        Ascale_Tens              E_Tens");
    CARD("%20lg%20lg",scale1,Prop_Tens_E);
    /*Shear*/
    //
    COMMENT("#            K_Shear             C_Shear             A_Shear             B_Shear             D_Shear");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF2,DAMP2,Acoeft2,Bcoeft2,Dcoeft2);
    //
    COMMENT("# fct_ID21   H_Shear  fct_ID22  fct_ID23        Fscale_Shear      DeltaMin_Shear      DeltaMax_Shear");
    CARD("%10d%10d%10d%10d%20lg%20lg%20lg",FUN_A2,HFLAG2,FUN_B2,FUN_C2,Prop_Shear_F,MIN_RUP2,MAX_RUP2);
    //
    COMMENT("#       Ascale_Shear        Escale_Shear");
    CARD("%20lg%20lg",scale2,Prop_Shear_E);
    /*Torsion*/
    //
    COMMENT("#             K_Tors              C_Tors              A_Tors              B_Tors              D_Tors");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF3,DAMP3,Acoeft3,Bcoeft3,Dcoeft3);
    //
    COMMENT("# fct_ID11    H_Tors  fct_ID12  fct_ID13         Fscale_Tors       ThetaMin_Tors       ThetaMax_Tors");
    CARD("%10d%10d%10d%10d%20lg%20lg%20lg",FUN_A3,HFLAG3,FUN_B3,FUN_C3,Prop_Tor_F,MIN_RUP3,MAX_RUP3);
    //
    COMMENT("#        Ascale_Tors         Escale_Tors");
    CARD("%20lg%20lg",scale3,Prop_Tor_E);
    /*Bending*/
    //
    COMMENT("#             K_Bend              C_Bend              A_Bend              B_Bend              D_Bend");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF4,DAMP4,Acoeft4,Bcoeft4,Dcoeft4);
    //
    COMMENT("# fct_ID31    H_Bend  fct_ID32  fct_ID33         Fscale_Bend       ThetaMin_Bend       ThetaMax_Bend");
    CARD("%10d%10d%10d%10d%20lg%20lg%20lg",FUN_A4,HFLAG4,FUN_B4,FUN_C4,Prop_Bend_F,MIN_RUP4,MAX_RUP4);
    //
    COMMENT("#        Ascale_Bend         Escale_Bend");
    CARD("%20lg%20lg",scale4,Prop_Bend_E);
    /*Velocity Dependent Failure Parameters*/
    //
    COMMENT("#                 vo                  wo");
    CARD("%20lg%20lg",TRANS_VEL0,ROT_VEL0);
    /*Tension*/
    //
    COMMENT("#                 c1                  n1              alpha1               beta1");
    CARD("%20lg%20lg%20lg%20lg",C1,REL_VEL_EXP1,ALPHA1,BETA1);
    /*Shear*/
    //
    COMMENT("#            c_Shear             n_Shear         alpha_Shear          beta_Shear");
    CARD("%20lg%20lg%20lg%20lg",C2,REL_VEL_EXP2,ALPHA2,BETA2);
    /*Torsion*/
    //
    COMMENT("#             c_Tors              n_Tors          alpha_Tors           beta_Tors");
    CARD("%20lg%20lg%20lg%20lg",C3,REL_VEL_EXP3,ALPHA3,BETA3);
    /*Bending*/
    //
    COMMENT("#             c_Bend              n_Bend          alpha_Bend           beta_Bend");
    CARD("%20lg%20lg%20lg%20lg",C4,REL_VEL_EXP4,ALPHA4,BETA4);
}