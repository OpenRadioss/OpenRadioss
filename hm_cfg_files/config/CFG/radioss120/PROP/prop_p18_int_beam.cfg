//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Property INT_BEAM Type18

ATTRIBUTES(COMMON)
{
    ISFLAG                                  = VALUE(INT,  " Section Type");
    Ismstr                                  = VALUE(INT,  " Small Strain Option Flag");
    Dm                                      = VALUE(FLOAT,  " Beam Membrane Damping");
    df                                      = VALUE(FLOAT,  " Beam Flexural Damping");
    NIP                                     = SIZE(" Number of Integration Points");
    Iref                                    = VALUE(INT,  " Subsection Center Reference Flag");
    Y0                                      = VALUE(FLOAT,  " Local Y Coordinate of the Section Center");
    Z0                                      = VALUE(FLOAT,  " Local Z Coordinate of the Section Center");
    Y_IP                                    = ARRAY[NIP](FLOAT,  " Local Y Coordinate of the Integration Point");
    Z_IP                                    = ARRAY[NIP](FLOAT,  " Local Z Coordinate of the Integration Point");
    AREA_IP                                 = ARRAY[NIP](FLOAT,  " Area of the Subsection");
    NITRS                                   = VALUE(INT,  " Number of Integration Points in Predefined Section");
    L1                                      = VALUE(FLOAT,  " First Size of the Predefined Section");
    L2                                      = VALUE(FLOAT,  " Second Size of the Predefined Section");
    Translation_Wx1                         = VALUE(INT,  "n", "Rotational_Wx1");
    Translation_Wy1                         = VALUE(INT,  "d", "Rotational_Wy1");
    Translation_Wz1                         = VALUE(INT,  "1", "Rotational_Wz1");
    Translation_Wx2                         = VALUE(INT,  "n", "Rotational_Wx2");
    Translation_Wy2                         = VALUE(INT,  "d", "Rotational_Wy2");
    Translation_Wz2                         = VALUE(INT,  "2", "Rotational_Wz2");
    
    //Attributes for HM usage
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Prop_Name_OR_Type                       = VALUE(INT, "");
    IO_FLAG                                 = VALUE(INT, "");
    TYPE_NO                                 = VALUE(STRING, "");
    TITLE                                   = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    NUM_COMMENTS                            = 5110;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;
    ISFLAG                                  = 5158;
    Ismstr                                  = 5152;
    Dm                                      = 8027;
    df                                      = 4183;
    NIP                                     =  427;
    Iref                                    = 4184;
    Y0                                      = 4185;
    Z0                                      = 4186;
    Y_IP                                    = 4187;
    Z_IP                                    = 4188;
    AREA_IP                                 = 4189;
    NITRS                                   = 7250;
    L1                                      = 4506;
    L2                                      = 4507;
    Translation_Wx1                         = 4159;
    Translation_Wy1                         = 4160;
    Translation_Wz1                         = 4161;
    Translation_Wx2                         = 4162;
    Translation_Wy2                         = 4163;
    Translation_Wz2                         = 4164;
    Prop_Name_OR_Type                       = 4537;
    TITLE                                   =   -1;
    TYPE_NO                                 =   -1;
    IO_FLAG                                 =   -1;
}

CHECK(COMMON)
{
    L1                                      >  0.0;
    L2                                      >  0.0;
    NIP                                     >    0;
    NIP                                     <= 100;
}

DEFAULTS(COMMON)
{
    Dm                                      =  0.0;
    Iref                                    =    0;
    Ismstr                                  =    4;
    NIP                                     =    1;
    df                                      = 0.01;
    Prop_Name_OR_Type                       = 0;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
       ENUM_VALUE_FLAG=TRUE;
       ADD(1, "1:Hide in Menu/Export");
       ADD(2, "2:Show in Menu/Export");
       ADD(3, "3:Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Prop_Name_OR_Type == 2)
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TYPE18/");

    }
    else
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/INT_BEAM/");
    }
    RADIO(ISFLAG)
    {
       ADD(0, "0:Default Integrated Beam.");
       ADD(1, "1:Predefined Rectangular Section.");
       ADD(2, "2:Predefined Circular Section.");
    }
    RADIO(Ismstr)
    {
        ADD(0, "0:Default Set to 4.");
        ADD(1, "1:Small Strain Formulation from t=0.");
        ADD(2, "2:Set to 4.");
        ADD(3, "3:Set to 4.");
        ADD(4, "4:Full Geometric Nonlinearities.");
    }
    SCALAR(Dm);
    SCALAR(df);
    if(ISFLAG==0)
    {
        SIZE(NIP);
        RADIO(Iref)
        {
            ADD(0, "0:Section Center is Calculated as a Barycenter of the Integration Points.");
            ADD(1, "1:Section Center is Defined by You Using Local Coordinates(Y0 and Z0).");
        }
        SCALAR(Y0)      { DIMENSION="l";          }
        SCALAR(Z0)      { DIMENSION="l";          }
        ARRAY(NIP, "Integration Points")
        {
            SCALAR(Y_IP){ DIMENSION="l";          }
            SCALAR(Z_IP){ DIMENSION="l";          }
            SCALAR(AREA_IP) { DIMENSION="area";        }
        }
    }
    else
    {
        SCALAR(NITRS);
        SCALAR(L1) {DIMENSION="l";}
        SCALAR(L2) {DIMENSION="l";}
    }
    FLAG(Translation_Wx1, "Rotation D.O.F about X at Node 1  is released");
    FLAG(Translation_Wy1, "Rotation D.O.F about Y at Node 1  is released");
    FLAG(Translation_Wz1, "Rotation D.O.F about Z at Node 1  is released");
    FLAG(Translation_Wx2, "Rotation D.O.F about X at Node 2  is released");
    FLAG(Translation_Wy2, "Rotation D.O.F about Y at Node 2  is released");
    FLAG(Translation_Wz2, "Rotation D.O.F about Z at Node 2  is released");
}

// File format for Radioss 120
FORMAT(radioss120) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE18/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/INT_BEAM/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#    Isect    Ismstr");
    CARD("%10d%10d",ISFLAG,Ismstr);
    //
    COMMENT("#                 Dm                  Df");
    CARD("%20lg%20lg",Dm,df);
    //
    if(ISFLAG!=0)
    {
        ASSIGN(NIP,  0, EXPORT);
        ASSIGN(Iref, 0, EXPORT);
        ASSIGN(Y0,   0, EXPORT);
        ASSIGN(Z0,   0, EXPORT);
    }
    COMMENT("#      NIP      Iref                  Y0                  Z0");
    CARD("%10d%10d%20lg%20lg",NIP,Iref,Y0,Z0);
    //
    if(NIP>0)
    {
        COMMENT("#                 Yi                  Zi                AREA");
        CARD_LIST(NIP)
        {
            CARD("%20lg%20lg%20lg",Y_IP,Z_IP,AREA_IP);
        }
    }
    //
    if(ISFLAG != 0)
    {
        COMMENT("#    NITRS                            L1                  L2");
        CARD("%10d          %20lg%20lg",NITRS,L1,L2);
        //
        COMMENT("# BLANK LINE");
        BLANK;
    }
    //
    COMMENT("#    W_DOF");
    CARD("   %1d%1d%1d %1d%1d%1d",Translation_Wx1,Translation_Wy1,Translation_Wz1,Translation_Wx2,Translation_Wy2,Translation_Wz2);
}

// File format for Radioss 51
FORMAT(radioss51) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE18/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/INT_BEAM/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#             Ismstr");
    CARD("          %10d",Ismstr);
    //
    COMMENT("#                 Dm                  Df");
    CARD("%20lg%20lg",Dm,df);
    //
    COMMENT("#      Nip      Iref                  Y0                  Z0");
    CARD("%10d%10d%20lg%20lg",NIP,Iref,Y0,Z0);
    //
    COMMENT("#                Y_i                 Z_i                AREA");
    CELL_LIST(NIP,"%20lg%20lg%20lg                                                                                ",Y_IP,Z_IP,AREA_IP);
    //
    COMMENT("#    W_DOF");
    CARD("   %1d%1d%1d %1d%1d%1d",Translation_Wx1,Translation_Wy1,Translation_Wz1,Translation_Wx2,Translation_Wy2,Translation_Wz2);
}

// File format for Radioss 44
FORMAT(radioss44) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s/%d/%s",TYPE_NO,_ID_,TITLE);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    COMMENT("#             Ismstr");
    CARD("          %10d",Ismstr);
    //
    COMMENT("#             Dm              Df");
    CARD("%16lg%16lg",Dm,df);
    //
    COMMENT("#      N    Iref              Y0              Z0");
    CARD("%8d%8d%16lg%16lg",NIP,Iref,Y0,Z0);
    //
    COMMENT("#            Y_i             Z_i            AREA");
    CELL_LIST(NIP,"%16lg%16lg%16lg                                                                ",Y_IP,Z_IP,AREA_IP);
    //
    COMMENT("#    W_DOF");
    CARD("   %1d%1d%1d %1d%1d%1d",Translation_Wx1,Translation_Wy1,Translation_Wz1,Translation_Wx2,Translation_Wy2,Translation_Wz2);
}
