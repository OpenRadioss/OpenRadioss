//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Property SPR_GENE Type8
//

ATTRIBUTES(COMMON)
{
// Solver attributes
    MASS                                    = VALUE(FLOAT,  " MASS");
    INERTIA                                 = VALUE(FLOAT,  " Inertia");
    SKEW_CSID                               = VALUE(SYSTEM,  " Skew System Identifier");
    ISENSOR                                 = VALUE(SENSOR,  " Sensor Identifier") {SUBTYPES=(/SENSOR/SENSOR_DEFINE);}
    ISFLAG                                  = VALUE(INT,  " Sensor Flag");
    Ifail                                   = VALUE(INT,  " Failure Criteria");
    Iequil                                  = VALUE(INT,  " Equilibrium Flag");
    //Transitional Tx
    STIFF1                                  = VALUE(FLOAT,  " Transitional Stiffness");
    DAMP1                                   = VALUE(FLOAT,  " Transitional Damping");
    Acoeft1                                 = VALUE(FLOAT,  " Coefficient in strain rate effect in direction X");
    Bcoeft1                                 = VALUE(FLOAT,  " Coefficient in strain rate effect in direction X");
    Dcoeft1                                 = VALUE(FLOAT,  " Scale coefficients for translational velocity");
    FUN_A1                                  = VALUE(FUNCT,  " Function identifier defining f(Delta) transitional");
    HFLAG1                                  = VALUE(INT,  " Transitional Hardening Flag");
    FUN_B1                                  = VALUE(FUNCT,  " Function identifier defining g(Delta) transitional");
    FUN_C1                                  = VALUE(FUNCT,  " Function used only for unloading");
    FUN_D1                                  = VALUE(FUNCT,  " Function identifier defining h(Delta)");
    MIN_RUP1                                = VALUE(FLOAT,  " Negative failure displacement, transitional");
    MAX_RUP1                                = VALUE(FLOAT,  " Positive failure displacement, transitional");
    Prop_X_F                                = VALUE(FLOAT,  " Scale factor for Delta, transitional ");
    Prop_X_E                                = VALUE(FLOAT,  " Coefficient for strain rate effect in direction X");
    scale1                                  = VALUE(FLOAT,  " Abscissa scale factor for Delta (fct_ID1 and fct_ID3)");
    ffac                                    = VALUE(FLOAT,  " Coefficient for h(Delta) (homogeneous to a force)");
    //Transitional Ty
    STIFF2                                  = VALUE(FLOAT,  " Transitional Stiffness");
    DAMP2                                   = VALUE(FLOAT,  " Transitional Damping");
    Acoeft2                                 = VALUE(FLOAT,  " Coefficient in strain rate effect in direction Y");
    Bcoeft2                                 = VALUE(FLOAT,  " Coefficient in strain rate effect in direction Y");
    Dcoeft2                                 = VALUE(FLOAT,  " Scale coefficients for tension velocity");
    FUN_A2                                  = VALUE(FUNCT,  " Function identifier defining f(Delta) transitional");
    HFLAG2                                  = VALUE(INT,  " Transitional Hardening Flag");
    FUN_B2                                  = VALUE(FUNCT,  " Function identifier defining g(Delta) transitional");
    FUN_C2                                  = VALUE(FUNCT,  " Function used only for unloading");
    FUN_D2                                  = VALUE(FUNCT,  " Function identifier defining h(Delta)");
    MIN_RUP2                                = VALUE(FLOAT,  "  Negative failure displacement, transitional");
    MAX_RUP2                                = VALUE(FLOAT,  " Positive failure displacement, transitional");
    Prop_Y_F                                = VALUE(FLOAT,  " Scale factor for Delta, transitional");
    Prop_Y_E                                = VALUE(FLOAT,  " Coefficient for strain rate effect in direction Y");
    scale2                                  = VALUE(FLOAT,  " Abscissa scale factor for Delta (fct_ID1 and fct_ID3)");
    df                                      = VALUE(FLOAT,  " Coefficient for h(Delta) (homogeneous to a force)");
    //Transitional Tz
    STIFF3                                  = VALUE(FLOAT,  " Transitional Stiffness");
    DAMP3                                   = VALUE(FLOAT,  " Transitional Damping");
    Acoeft3                                 = VALUE(FLOAT,  " Coefficient for strain rate effect in direction Z");
    Bcoeft3                                 = VALUE(FLOAT,  " Coefficient for strain rate effect in direction Z");
    Dcoeft3                                 = VALUE(FLOAT,  " Scale coefficient for tension velocity");
    FUN_A3                                  = VALUE(FUNCT,  " Function identifier defining f(Delta) transitional");
    HFLAG3                                  = VALUE(INT,  " Transitional Hardening Flag");
    FUN_B3                                  = VALUE(FUNCT,  " Function identifier defining g(Delta) transitional");
    FUN_C3                                  = VALUE(FUNCT,  " Function used only for unloading");
    FUN_D3                                  = VALUE(FUNCT,  " Function identifier defining h(Delta)");
    MIN_RUP3                                = VALUE(FLOAT,  "  Negative failure displacement, transitional");
    MAX_RUP3                                = VALUE(FLOAT,  " Positive failure displacement, transitional");
    Prop_Z_F                                = VALUE(FLOAT,  " Scale factor for Delta, transitional");
    Prop_Z_E                                = VALUE(FLOAT,  " Coefficient for strain rate effect in direction Z");
    scale3                                  = VALUE(FLOAT,  " Abscissa scale factor for Delta (fct_ID1 and fct_ID3)");
    D2                                      = VALUE(FLOAT,  " Coefficient for h(Delta) (homogeneous to a force)");
    //Rotational Rx
    STIFF4                                  = VALUE(FLOAT,  " Rotational Stiffness");
    DAMP4                                   = VALUE(FLOAT,  " Rotational Damping");
    Acoeft4                                 = VALUE(FLOAT,  " Coefficient for strain rate effect in torsion X");
    Bcoeft4                                 = VALUE(FLOAT,  "Coefficient for strain rate effect in torsion X");
    Dcoeft4                                 = VALUE(FLOAT,  " Scale coefficients for torsion velocity");
    FUN_A4                                  = VALUE(FUNCT,  " Function identifier defining f(Theta) rotational");
    HFLAG4                                  = VALUE(INT,  " Rotational Hardening Flag");
    FUN_B4                                  = VALUE(FUNCT,  " Function identifier defining g(Theta) rotational");
    FUN_C4                                  = VALUE(FUNCT,  "  Function used only for unloading");
    FUN_D4                                  = VALUE(FUNCT,  " Function identifier defining h(Delta)");
    MIN_RUP4                                = VALUE(FLOAT,  " Negative failure rotation, rotational");
    MAX_RUP4                                = VALUE(FLOAT,  " Positive failure rotation, rotational");
    Prop_Tor_F                              = VALUE(FLOAT,  " Scale factor for Theta, rotational");
    Prop_Tor_E                              = VALUE(FLOAT,  " Coefficient for strain rate effect in torsion X");
    scale4                                  = VALUE(FLOAT,  " Abscissa scale factor for Theta(fct_ID1 and fct_ID3)");
    Y0                                      = VALUE(FLOAT,  " Coefficient for h(Delta) (homogeneous to a force)");
    //Rotational Ry
    STIFF5                                  = VALUE(FLOAT,  " Rotational Stiffness");
    DAMP5                                   = VALUE(FLOAT,  " Rotational Damping");
    Acoeft5                                 = VALUE(FLOAT,  " Coefficient for strain rate effect in torsion Y ");
    Bcoeft5                                 = VALUE(FLOAT,  " Coefficient for strain rate effect in torsion Y ");
    Dcoeft5                                 = VALUE(FLOAT,  " Scale coefficients for torsion velocity");
    FUN_A5                                  = VALUE(FUNCT,  " Function identifier defining f(Theta) rotational");
    HFLAG5                                  = VALUE(INT,  " Rotational Hardening Flag");
    FUN_B5                                  = VALUE(FUNCT,  " Function identifier defining g(Theta) rotational");
    FUN_C5                                  = VALUE(FUNCT,  " Function used only for unloading");
    FUN_D5                                  = VALUE(FUNCT,  " Function identifier defining h(Delta)");
    MIN_RUP5                                = VALUE(FLOAT,  " Negative failure rotation, rotational");
    MAX_RUP5                                = VALUE(FLOAT,  " Positive failure rotation, rotational");
    Prop_FlxY_F                             = VALUE(FLOAT,  " Scale factor for Theta, rotational");
    Prop_FlxY_E                             = VALUE(FLOAT,  " Coefficient for strain rate effect in torsion Y");
    scale5                                  = VALUE(FLOAT,  " Abscissa scale factor for Theta(fct_ID1 and fct_ID3)");
    Z0                                      = VALUE(FLOAT,  " Coefficient for h(Delta) (homogeneous to a force)");
    //Rotational Rz
    STIFF6                                  = VALUE(FLOAT,  " Rotational Stiffness");
    DAMP6                                   = VALUE(FLOAT,  " Rotational Damping");
    Acoeft6                                 = VALUE(FLOAT,  " Coefficient for strain rate effect in torsion Z ");
    Bcoeft6                                 = VALUE(FLOAT,  " Coefficient for strain rate effect in torsion Z ");
    Dcoeft6                                 = VALUE(FLOAT,  " Scale coefficients for torsion Z");
    FUN_A6                                  = VALUE(FUNCT,  " Function identifier defining f(Theta) rotational");
    HFLAG6                                  = VALUE(INT,  " Rotational Hardening Flag");
    FUN_B6                                  = VALUE(FUNCT,  " Function identifier defining g(Theta) rotational");
    FUN_C6                                  = VALUE(FUNCT,  " Function used only for unloading");
    FUN_D6                                  = VALUE(FUNCT,  " Function identifier defining h(Delta)");
    MIN_RUP6                                = VALUE(FLOAT,  " Negative failure rotation, rotational");
    MAX_RUP6                                = VALUE(FLOAT,  " Positive failure rotation, rotational");
    Prop_FlxZ_F                             = VALUE(FLOAT,  " Scale factor for Theta, rotational");
    Prop_FlxZ_E                             = VALUE(FLOAT,  " Coefficient for strain rate effect in torsion Z");
    scale6                                  = VALUE(FLOAT,  " Abscissa scale factor for Theta(fct_ID1 and fct_ID3)"); 
    D1                                      = VALUE(FLOAT,  " Coefficient for h(Delta) (homogeneous to a force)");      
    ISRATE                                  = VALUE(INT,  " Smooth Strain Rate Flag");
    Asrate                                  = VALUE(FLOAT,  " Strain Rate Cutting Frequency");   
    
    //Attributes for HM usage 
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,  "User Comments");   
    Prop_Name_OR_Type                       = VALUE(INT, "");
    IO_FLAG                                 = VALUE(INT, "");
    TYPE_NO                                 = VALUE(STRING, "");
    TITLE                                   = VALUE(STRING, "");
    CARD_EXISTS                             = VALUE(INT,"Filter force card");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    NUM_COMMENTS                            = 5110;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;    
    MASS                                    =  167;
    INERTIA                                 = 5156;
    SKEW_CSID                               =  412;
    ISENSOR                                 = 5157;
    ISFLAG                                  = 5158;
    Ifail                                   = 8032;
    Iequil                                  = 5398;
    //Transitional Tx
    STIFF1                                  = 1131;
    DAMP1                                   =  254;
    Acoeft1                                 = 5160;
    Bcoeft1                                 = 5161;
    Dcoeft1                                 = 5162;
    FUN_A1                                  =   45;
    HFLAG1                                  = 5163;
    FUN_B1                                  =  168;
    FUN_C1                                  = 1189;
    FUN_D1                                  = 8035;
    MIN_RUP1                                = 5164;
    MAX_RUP1                                = 5165;
    Prop_X_F                                = 4137;
    Prop_X_E                                = 4138;
    scale1                                  = 4528;
    ffac                                    = 4172;
    //Transitional Ty
    STIFF2                                  = 5178;
    DAMP2                                   = 5179;
    Acoeft2                                 = 5180;
    Bcoeft2                                 = 5181;
    Dcoeft2                                 = 5182;
    FUN_A2                                  =  170;
    HFLAG2                                  = 5183;
    FUN_B2                                  =  171;
    FUN_C2                                  = 1167;
    FUN_D2                                  = 8036;
    MIN_RUP2                                = 5184;
    MAX_RUP2                                = 5185;
    Prop_Y_F                                = 4139;
    Prop_Y_E                                = 4140;
    scale2                                  = 4529;
    df                                      = 4183;
    //Transitional Tz
    STIFF3                                  = 5186;
    DAMP3                                   = 5187;
    Acoeft3                                 = 5188;
    Bcoeft3                                 = 5189;
    Dcoeft3                                 = 5190;
    FUN_A3                                  =  172;
    HFLAG3                                  = 5191;
    FUN_B3                                  =  199;
    FUN_C3                                  = 5347;
    FUN_D3                                  = 8037;
    MIN_RUP3                                = 5192;
    MAX_RUP3                                = 5193;
    Prop_Z_F                                = 4141;
    Prop_Z_E                                = 4142;
    scale3                                  = 4530;
    D2                                      = 4194;
    //Rotational Rx
    STIFF4                                  = 5194;
    DAMP4                                   = 5195;
    Acoeft4                                 = 5196;
    Bcoeft4                                 = 5197;
    Dcoeft4                                 = 5198;
    FUN_A4                                  =  200;
    HFLAG4                                  = 5199;
    FUN_B4                                  =  224;
    FUN_C4                                  = 5348;
    FUN_D4                                  = 8038;
    MIN_RUP4                                = 5200;
    MAX_RUP4                                = 5201;
    Prop_Tor_F                              = 4143;
    Prop_Tor_E                              = 4144;
    scale4                                  = 4531;
    Y0                                      = 4185;
    //Rotational Ry
    STIFF5                                  = 5202;
    DAMP5                                   = 5203;
    Acoeft5                                 = 5204;
    Bcoeft5                                 = 5205;
    Dcoeft5                                 = 5206;
    FUN_A5                                  = 1141;
    HFLAG5                                  = 5207;
    FUN_B5                                  = 1142;
    FUN_C5                                  = 5349;
    FUN_D5                                  = 8039;
    MIN_RUP5                                = 5208;
    MAX_RUP5                                = 5209;
    Prop_FlxY_F                             = 4145;
    Prop_FlxY_E                             = 4146;
    scale5                                  = 4532;
    Z0                                      = 4186;
    //Rotational Rz
    STIFF6                                  = 5210;
    DAMP6                                   = 5211;
    Acoeft6                                 = 5212;
    Bcoeft6                                 = 5213;
    Dcoeft6                                 = 5214;
    FUN_A6                                  = 1175;
    HFLAG6                                  = 5215;
    FUN_B6                                  = 1176;
    FUN_C6                                  = 5350;
    FUN_D6                                  = 8040;
    MIN_RUP6                                = 5216;
    MAX_RUP6                                = 5217;
    Prop_FlxZ_F                             = 4147;
    Prop_FlxZ_E                             = 4148;
    scale6                                  = 4533;
    D1                                      = 4193;   
    ISRATE                                  = 4231;
    Asrate                                  = 4534;      
    Prop_Name_OR_Type                       = 4537;
    TITLE                                   =   -1;
    TYPE_NO                                 =   -1;
    IO_FLAG                                 =   -1;
    CARD_EXISTS                             =   -1;
}

CHECK(COMMON)
{
    MASS                                    > 0.0;
}

DEFAULTS(COMMON)
{
    Acoeft1                              =     1.0;
    Acoeft2                              =     1.0;
    Acoeft3                              =     1.0;
    Acoeft4                              =     1.0;
    Acoeft5                              =     1.0;
    Acoeft6                              =     1.0;
    Dcoeft1                              =     1.0;
    Dcoeft2                              =     1.0;
    Dcoeft3                              =     1.0;
    Dcoeft4                              =     1.0;
    Dcoeft5                              =     1.0;
    Dcoeft6                              =     1.0;
    MAX_RUP1                             =  1.0e30;
    MAX_RUP2                             =  1.0e30;
    MAX_RUP3                             =  1.0e30;
    MAX_RUP4                             =  1.0e30;
    MAX_RUP5                             =  1.0e30;
    MAX_RUP6                             =  1.0e30;
    MIN_RUP1                             = -1.0e30;
    MIN_RUP2                             = -1.0e30;
    MIN_RUP3                             = -1.0e30;
    MIN_RUP4                             = -1.0e30;
    MIN_RUP5                             = -1.0e30;
    MIN_RUP6                             = -1.0e30;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
       ENUM_VALUE_FLAG=TRUE;
       ADD(1, "1:Hide in Menu/Export");
       ADD(2, "2:Show in Menu/Export");
       ADD(3, "3:Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Prop_Name_OR_Type == 2)
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TYPE8/");

    }
    else
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/SPR_GENE/");
    }
mandatory:
    SCALAR(MASS) { DIMENSION="m";              }
    SCALAR(INERTIA) { DIMENSION="massmi"; }
optional:
    DATA(SKEW_CSID) {/FILTER/Framefix/0/EQ;}
    DATA(ISENSOR) {SUBTYPES=(/SENSOR/SENSOR_DEFINE);}
    RADIO(ISFLAG)
    {
        ADD(0, "0:Spring Element Activated.");
        ADD(1, "1:Spring Element Deactivated.");
        ADD(2, "2:Spring Element ACtivated or Deactivated.");
    }
    RADIO(Ifail)
    {
        ADD(0, "0:Uni-Directional Criteria.");
        ADD(1, "1:Multi-Directional Criteria.");
    }
    RADIO(Iequil)
    {
        ADD(0, "0:No Equilibrium.");
        ADD(1, "1:Force and Moment Equilibrium."); 
    }
    SEPARATOR("Transitional Tx");
    SCALAR(STIFF1)  { DIMENSION="translation_stiffness"; }
    SCALAR(DAMP1)   { DIMENSION="massFlux";             }
    SCALAR(Acoeft1) { DIMENSION="force";             }
    SCALAR(Bcoeft1) { DIMENSION="force";             }
    SCALAR(Dcoeft1) { DIMENSION="velocity";                 }
    FUNCTION(FUN_A1) {
      X_TITLE="dl";    X_DIMENSION="l";
      Y_TITLE="f";     Y_DIMENSION="force";
      /FILTER/groupEnumField/1/EQ;
    }
    RADIO(HFLAG1)
    {
        ADD(0, "0:Non-Linear Elastic Spring.");
        ADD(1, "1:Elasto-Plastic with Isotropic Hardening.");
        ADD(2, "2:Elasto-Plastic with Decoupling Hardening in Tension and Compression.");
        ADD(4, "4:Kinematic Hardening.");
        ADD(5, "5:Elasto-Plastic with Non-Linear Unloading.");
        ADD(6, "6:Nonlinear Elasto-Plastic Spring with Isotropic Hardening and Nonlinear Unloading.");
        ADD(7, "7:Nonlinear Spring with Elastic Hysteresis.");
    }
    FUNCTION(FUN_B1) 
    {
      X_TITLE="dl/dt"; X_DIMENSION="velocity";        
      Y_TITLE="g";     Y_DIMENSION="DIMENSIONLESS"; 
    }
    FUNCTION(FUN_C1) 
    {
      if(HFLAG1==4) 
      {
         X_TITLE="dl";                    X_DIMENSION="l";
         Y_TITLE="f3";                    Y_DIMENSION="force";
      } 
      else if(HFLAG1==5) 
      {
        X_TITLE="Maximum displacement";  X_DIMENSION="l";
        Y_TITLE="Residual displacement"; Y_DIMENSION="l";
      }
      /FILTER/groupEnumField/1/EQ;
    }
    FUNCTION(FUN_D1)
    {
       X_DIMENSION="velocity";
       X_TITLE="dl/dt";
       Y_DIMENSION="force";
       Y_TITLE="h";
       /FILTER/groupEnumField/1/EQ;
    }
    SCALAR(MIN_RUP1)  {DIMENSION="l";}
    SCALAR(MAX_RUP1)  {DIMENSION="l";}
    SCALAR(Prop_X_F)  { DIMENSION="velocity";         }
    SCALAR(Prop_X_E)  { DIMENSION="force";         }
    SCALAR(scale1)    {DIMENSION="l";}
    SCALAR(ffac)      {DIMENSION="force";}
    SEPARATOR("");
    SEPARATOR("Transitional Ty");
    SCALAR(STIFF2) { DIMENSION="translation_stiffness"; }
    SCALAR(DAMP2)  { DIMENSION="massFlux";             }
    SCALAR(Acoeft2){ DIMENSION="force";             }
    SCALAR(Bcoeft2){ DIMENSION="force";             }
    SCALAR(Dcoeft2){ DIMENSION="velocity";                 }
    FUNCTION(FUN_A2) {
      X_TITLE="dl";    X_DIMENSION="l";
      Y_TITLE="f";     Y_DIMENSION="force";
      /FILTER/groupEnumField/1/EQ;
    }
    RADIO(HFLAG2)
    {
        ADD(0, "0:Non-Linear Elastic Spring.");
        ADD(1, "1:Elasto-Plastic with Isotropic Hardening.");
        ADD(2, "2:Elasto-Plastic with Decoupling Hardening in Tension and Compression.");
        ADD(4, "4:Kinematic Hardening.");
        ADD(5, "5:Elasto-Plastic with Non-Linear Unloading.");
        ADD(6, "6:Nonlinear Elasto-Plastic Spring with Isotropic Hardening and Nonlinear Unloading.");
        ADD(7, "7:Nonlinear Spring with Elastic Hysteresis.");
    }
    FUNCTION(FUN_B2) 
    {
      X_TITLE="dl/dt"; X_DIMENSION="velocity";        
      Y_TITLE="g";     Y_DIMENSION="DIMENSIONLESS"; 
      /FILTER/groupEnumField/1/EQ;
    }
    FUNCTION(FUN_C2) 
    {
      if(HFLAG2==4) 
      {
         X_TITLE="dl";                    X_DIMENSION="l";
         Y_TITLE="f3";                    Y_DIMENSION="force";
      } 
      else if(HFLAG2==5) 
      {
        X_TITLE="Maximum displacement";  X_DIMENSION="l";
        Y_TITLE="Residual displacement"; Y_DIMENSION="l";
      }
      /FILTER/groupEnumField/1/EQ;
    }
    FUNCTION(FUN_D2)
    {
       X_DIMENSION="velocity";
       X_TITLE="dl/dt";
       Y_DIMENSION="force";
       Y_TITLE="h";
       /FILTER/groupEnumField/1/EQ;
    }
    SCALAR(MIN_RUP2)  {DIMENSION="l";}
    SCALAR(MAX_RUP2)  {DIMENSION="l";}
    SCALAR(Prop_Y_F){ DIMENSION="velocity";         }
    SCALAR(Prop_Y_E){ DIMENSION="force";         }
    SCALAR(scale2)  {DIMENSION="l";}
    SCALAR(df)      {DIMENSION="force";}
    SEPARATOR("");
    SEPARATOR("Transitional Tz");
    SCALAR(STIFF3) { DIMENSION="translation_stiffness"; }
    SCALAR(DAMP3)  { DIMENSION="massFlux";             }
    SCALAR(Acoeft3){ DIMENSION="force";             }
    SCALAR(Bcoeft3){ DIMENSION="force";             }
    SCALAR(Dcoeft3){ DIMENSION="velocity";                 }
    FUNCTION(FUN_A3) {
      X_TITLE="dl";    X_DIMENSION="l";
      Y_TITLE="f";     Y_DIMENSION="force";
      /FILTER/groupEnumField/1/EQ;
    }
    RADIO(HFLAG3)
    {
        ADD(0, "0:Non-Linear Elastic Spring.");
        ADD(1, "1:Elasto-Plastic with Isotropic Hardening.");
        ADD(2, "2:Elasto-Plastic with Decoupling Hardening in Tension and Compression.");
        ADD(4, "4:Kinematic Hardening.");
        ADD(5, "5:Elasto-Plastic with Non-Linear Unloading.");
        ADD(6, "6:Nonlinear Elasto-Plastic Spring with Isotropic Hardening and Nonlinear Unloading.");
        ADD(7, "7:Nonlinear Spring with Elastic Hysteresis.");
    }
    FUNCTION(FUN_B3) 
    {
      X_TITLE="dl/dt"; X_DIMENSION="velocity";        
      Y_TITLE="g";     Y_DIMENSION="DIMENSIONLESS"; 
      /FILTER/groupEnumField/1/EQ;
    }
    FUNCTION(FUN_C3) 
    {
      if(HFLAG3==4) 
      {
         X_TITLE="dl";                    X_DIMENSION="l";
         Y_TITLE="f3";                    Y_DIMENSION="force";
      } 
      else if(HFLAG3==5) 
      {
        X_TITLE="Maximum displacement";  X_DIMENSION="l";
        Y_TITLE="Residual displacement"; Y_DIMENSION="l";
      }
      /FILTER/groupEnumField/1/EQ;
    }
    FUNCTION(FUN_D3)
    {
       X_DIMENSION="velocity";
       X_TITLE="dl/dt";
       Y_DIMENSION="force";
       Y_TITLE="h";
       /FILTER/groupEnumField/1/EQ;
    }
    SCALAR(MIN_RUP3)  {DIMENSION="l";}
    SCALAR(MAX_RUP3)   {DIMENSION="l";}
    SCALAR(Prop_Z_F){ DIMENSION="velocity";         }
    SCALAR(Prop_Z_E){ DIMENSION="force";         }
    SCALAR(scale3)  {DIMENSION="l";}
    SCALAR(D2)      {DIMENSION="force";}
    SEPARATOR("");
    SEPARATOR("Rotational Rx");
    SCALAR(STIFF4) { DIMENSION="ROTATION STIFFNESS";    }
    SCALAR(DAMP4)  { DIMENSION="torsion_damping";       }
    SCALAR(Acoeft4){ DIMENSION="moment";     }
    SCALAR(Bcoeft4){ DIMENSION="moment";     }
    SCALAR(Dcoeft4){ DIMENSION="ang_velocity";         } 
    FUNCTION(FUN_A4,"f(r)") 
   {
     X_TITLE="Angular disp."; X_DIMENSION="a";
     Y_TITLE="f";             Y_DIMENSION="moment";
     /FILTER/groupEnumField/1/EQ;
   }
    RADIO(HFLAG4)
    {
        ADD(0, "0:Non-Linear Elastic Spring.");
        ADD(1, "1:Elasto-Plastic with Isotropic Hardening.");
        ADD(2, "2:Elasto-Plastic with Decoupling Hardening in Tension and Compression.");
        ADD(4, "4:Kinematic Hardening.");
        ADD(5, "5:Elasto-Plastic with Non-Linear Unloading.");
        ADD(6, "6:Nonlinear Elasto-Plastic Spring with Isotropic Hardening and Nonlinear Unloading.");
        ADD(7, "7:Nonlinear Spring with Elastic Hysteresis.");
    }
    FUNCTION(FUN_B4,"g(dr/dt)") 
    {
     X_TITLE="Angular speed"; X_DIMENSION="ang_velocity";     //X_SCALING(Prop_Tor_F);
     Y_TITLE="g";             Y_DIMENSION="DIMENSIONLESS"; //Y_SCALING(Prop_Tor_E);
     /FILTER/groupEnumField/1/EQ;
    }
    FUNCTION(FUN_C4) 
    {
     if(HFLAG4==4) 
     {
       X_TITLE="Angular disp.";      X_DIMENSION="a";
       Y_TITLE="f3";                 Y_DIMENSION="moment";
     } 
    else if(HFLAG4==5) 
    {
      X_TITLE="Max. angular disp."; X_DIMENSION="a";
      Y_TITLE="Res. angular disp."; Y_DIMENSION="a";
    }
    /FILTER/groupEnumField/1/EQ;
    }
    FUNCTION(FUN_D4) {
        X_TITLE="Angular speed";          X_DIMENSION="ang_velocity"; 
        Y_TITLE="h";                          Y_DIMENSION="moment";
        /FILTER/groupEnumField/1/EQ;
    }
    SCALAR(MIN_RUP4) {DIMENSION="a";}
    SCALAR(MAX_RUP4) {DIMENSION="a";}
    SCALAR(Prop_Tor_F) { DIMENSION="ang_velocity";         } 
    SCALAR(Prop_Tor_E) { DIMENSION="moment";         } 
    SCALAR(scale4)     {DIMENSION="a";}
    SCALAR(Y0)         {DIMENSION="moment";}
    SEPARATOR("");
    SEPARATOR("Rotational Ry");
    SCALAR(STIFF5) { DIMENSION="ROTATION STIFFNESS";    }
    SCALAR(DAMP5)  { DIMENSION="torsion_damping";       }
    SCALAR(Acoeft5){ DIMENSION="moment";     }
    SCALAR(Bcoeft5){ DIMENSION="moment";     }
    SCALAR(Dcoeft5){ DIMENSION="ang_velocity";         } 
    FUNCTION(FUN_A5,"f(r)") 
   {
     X_TITLE="Angular disp."; X_DIMENSION="a";
     Y_TITLE="f";             Y_DIMENSION="moment";
     /FILTER/groupEnumField/1/EQ;
   }
    RADIO(HFLAG5)
    {
        ADD(0, "0:Non-Linear Elastic Spring.");
        ADD(1, "1:Elasto-Plastic with Isotropic Hardening.");
        ADD(2, "2:Elasto-Plastic with Decoupling Hardening in Tension and Compression.");
        ADD(4, "4:Kinematic Hardening.");
        ADD(5, "5:Elasto-Plastic with Non-Linear Unloading.");
        ADD(6, "6:Nonlinear Elasto-Plastic Spring with Isotropic Hardening and Nonlinear Unloading.");
        ADD(7, "7:Nonlinear Spring with Elastic Hysteresis.");
    }
    FUNCTION(FUN_B5,"g(dr/dt)") 
    {
     X_TITLE="Angular speed"; X_DIMENSION="ang_velocity";    // X_SCALING(Prop_FlxY_F);
     Y_TITLE="g";             Y_DIMENSION="DIMENSIONLESS"; //Y_SCALING(Prop_FlxY_E);
     /FILTER/groupEnumField/1/EQ;
    }
    FUNCTION(FUN_C5) 
    {
     if(HFLAG5==4) 
     {
       X_TITLE="Angular disp.";      X_DIMENSION="a";
       Y_TITLE="f3";                 Y_DIMENSION="moment";
     } 
    else if(HFLAG5==5) 
    {
      X_TITLE="Max. angular disp."; X_DIMENSION="a";
      Y_TITLE="Res. angular disp."; Y_DIMENSION="a";
    }
    /FILTER/groupEnumField/1/EQ;
    }
    FUNCTION(FUN_D5) {
        X_TITLE="Angular speed";          X_DIMENSION="ang_velocity"; 
        Y_TITLE="h";                          Y_DIMENSION="moment";
        /FILTER/groupEnumField/1/EQ;
    }
    SCALAR(MIN_RUP5) {DIMENSION="a";}
    SCALAR(MAX_RUP5)  {DIMENSION="a";}
    SCALAR(Prop_FlxY_F) { DIMENSION="ang_velocity";         } 
    SCALAR(Prop_FlxY_E) { DIMENSION="moment";         } 
    SCALAR(scale5)      {DIMENSION="a";}
    SCALAR(Z0)          {DIMENSION="moment";}
    SEPARATOR("");
    SEPARATOR("Rotational Rz");
    SCALAR(STIFF6) { DIMENSION="ROTATION STIFFNESS";    }
    SCALAR(DAMP6)  { DIMENSION="torsion_damping";       }
    SCALAR(Acoeft6){ DIMENSION="moment";     }
    SCALAR(Bcoeft6){ DIMENSION="moment";     }
    SCALAR(Dcoeft6){ DIMENSION="ang_velocity";         } 
    FUNCTION(FUN_A6,"f(r)") 
   {
     X_TITLE="Angular disp."; X_DIMENSION="a";
     Y_TITLE="f";             Y_DIMENSION="moment";
   }
    RADIO(HFLAG6)
    {
        ADD(0, "0:Non-Linear Elastic Spring.");
        ADD(1, "1:Elasto-Plastic with Isotropic Hardening.");
        ADD(2, "2:Elasto-Plastic with Decoupling Hardening in Tension and Compression.");
        ADD(4, "4:Kinematic Hardening.");
        ADD(5, "5:Elasto-Plastic with Non-Linear Unloading.");
        ADD(6, "6:Nonlinear Elasto-Plastic Spring with Isotropic Hardening and Nonlinear Unloading.");
        ADD(7, "7:Nonlinear Spring with Elastic Hysteresis.");
    }
    FUNCTION(FUN_B6,"g(dr/dt)") 
    {
     X_TITLE="Angular speed"; X_DIMENSION="ang_velocity";     //X_SCALING(Prop_FlxZ_F);
     Y_TITLE="g";             Y_DIMENSION="DIMENSIONLESS"; //Y_SCALING(Prop_FlxZ_E);
     /FILTER/groupEnumField/1/EQ;
    }
    FUNCTION(FUN_C6) 
    {
     if(HFLAG6==4) 
     {
       X_TITLE="Angular disp.";      X_DIMENSION="a";
       Y_TITLE="f3";                 Y_DIMENSION="moment";
     } 
    else if(HFLAG6==5) 
    {
      X_TITLE="Max. angular disp."; X_DIMENSION="a";
      Y_TITLE="Res. angular disp."; Y_DIMENSION="a";
    }
    /FILTER/groupEnumField/1/EQ;
    }
    SCALAR(MIN_RUP6) {DIMENSION="a";}
    SCALAR(MAX_RUP6) {DIMENSION="a";}
    SCALAR(Prop_FlxZ_F) { DIMENSION="ang_velocity";         } 
    SCALAR(Prop_FlxZ_E) { DIMENSION="moment";         } 
    SCALAR(scale6)      {DIMENSION="a";}
    SCALAR(D1)          {DIMENSION="moment";}

    SEPARATOR(""); 
    RADIO(ISRATE)
    {
        ADD(0, "0:Strain rate smoothing is inactive.");
        ADD(1, "1:Strain rate smoothing is active."); 
    }
    SCALAR(Asrate) { DIMENSION="f";           }
}


// File format for Radioss 120
FORMAT(radioss120) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE8/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SPR_GENE/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#               Mass                   I   skew_ID   sens_ID    Isflag     Ifail              Iequil");
    CARD("%20lg%20lg%10d%10d%10d%10d          %10d",MASS,INERTIA,SKEW_CSID,ISENSOR,ISFLAG,Ifail,Iequil);
    //Tx
    COMMENT("#             KtensX              CtensX              AtensX              BtensX              DtensX");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF1,DAMP1,Acoeft1,Bcoeft1,Dcoeft1);
    COMMENT("#  fct_ID1    HtensX   fct_ID2   fct_ID3   fct_ID4                DeltaMin_tensX      DeltaMax_tensX");
    CARD("%10d%10d%10d%10d%10d          %20lg%20lg",FUN_A1,HFLAG1,FUN_B1,FUN_C1,FUN_D1,MIN_RUP1,MAX_RUP1);
    COMMENT("#             FTensX              ETensX         AscaleTensX        Hscale_tensX");
    CARD("%20lg%20lg%20lg%20lg",Prop_X_F,Prop_X_E,scale1,ffac);
    //Ty
    COMMENT("#             KtensY              CtensY              AtensY              BtensY              DtensY");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF2,DAMP2,Acoeft2,Bcoeft2,Dcoeft2);
    COMMENT("#  fct_ID4    HtensY   fct_ID5   fct_ID6  fct_IDY4                DeltaMin_tensY      DeltaMax_tensY");
    CARD("%10d%10d%10d%10d%10d          %20lg%20lg",FUN_A2,HFLAG2,FUN_B2,FUN_C2,FUN_D2,MIN_RUP2,MAX_RUP2);
    COMMENT("#             FTensY              ETensY         AscaleTensY        Hscale_tensY");
    CARD("%20lg%20lg%20lg%20lg",Prop_Y_F,Prop_Y_E,scale2,df);
    //Tz
    COMMENT("#             KtensZ              CtensZ              AtensZ              BtensZ              DtensZ");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF3,DAMP3,Acoeft3,Bcoeft3,Dcoeft3);
    COMMENT("#  fct_ID7    HtensZ   fct_ID8   fct_ID9  fct_IDZ4                DeltaMin_tensZ      DeltaMax_tensZ");
    CARD("%10d%10d%10d%10d%10d          %20lg%20lg",FUN_A3,HFLAG3,FUN_B3,FUN_C3,FUN_D3,MIN_RUP3,MAX_RUP3);
    COMMENT("#             FTensZ              ETensZ         AscaleTensZ        Hscale_tensZ");
    CARD("%20lg%20lg%20lg%20lg",Prop_Z_F,Prop_Z_E,scale3,D2);
    //Rx
    COMMENT("#             KtorsX              CtorsX              AtorsX              BtorsX              DtorsX");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF4,DAMP4,Acoeft4,Bcoeft4,Dcoeft4);
    COMMENT("# fct_IDi1    HtorsX  fct_IDi2  fct_IDi3 fct_IDrx4                ThetaMin_torsX      ThetaMax_torsX");
    CARD("%10d%10d%10d%10d%10d          %20lg%20lg",FUN_A4,HFLAG4,FUN_B4,FUN_C4,FUN_D4,MIN_RUP4,MAX_RUP4);
    COMMENT("#             FtorsX              EtorsX         AscaletorsX        Hscale_torsX");
    CARD("%20lg%20lg%20lg%20lg",Prop_Tor_F,Prop_Tor_E,scale4,Y0);
    //Ry
    COMMENT("#             KtorsY              CtorsY              AtorsY              BtorsY              DtorsY");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF5,DAMP5,Acoeft5,Bcoeft5,Dcoeft5);
    COMMENT("# fct_IDi4    HtorsY  fct_IDi5  fct_IDi6 fct_IDry4                ThetaMin_torsY      ThetaMax_torsY");
    CARD("%10d%10d%10d%10d%10d          %20lg%20lg",FUN_A5,HFLAG5,FUN_B5,FUN_C5,FUN_D5,MIN_RUP5,MAX_RUP5);
    COMMENT("#             FtorsY              EtorsY         AscaletorsY        Hscale_torsY");
    CARD("%20lg%20lg%20lg%20lg",Prop_FlxY_F,Prop_FlxY_E,scale5,Z0);
    //Rz
    COMMENT("#             KtorsZ              CtorsZ              AtorsZ              BtorsZ              DtorsZ");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF6,DAMP6,Acoeft6,Bcoeft6,Dcoeft6);
    COMMENT("# fct_IDi7    HtorsZ  fct_IDi8  fct_IDi9 fct_IDrz4                ThetaMin_torsZ      ThetaMax_torsZ");
    CARD("%10d%10d%10d%10d%10d          %20lg%20lg",FUN_A6,HFLAG6,FUN_B6,FUN_C6,FUN_D6,MIN_RUP6,MAX_RUP6);
    COMMENT("#             FtorsZ              EtorsZ         AscaletorsZ        Hscale_torsZ");
    CARD("%20lg%20lg%20lg%20lg",Prop_FlxZ_F,Prop_FlxZ_E,scale6,D1);
    COMMENT("#   Israte              Asrate");
    CARD("%10d%20lg",ISRATE,Asrate);
}

// File format for Radioss 90
FORMAT(radioss90) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE8/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SPR_GENE/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#               Mass             Inertia   skew_ID   sens_ID    Isflag     Ifail              Iequil");
    CARD("%20lg%20lg%10d%10d%10d%10d          %10d",MASS,INERTIA,SKEW_CSID,ISENSOR,ISFLAG,Ifail,Iequil);
    //Tx
    COMMENT("#             KtensX              CtensX              AtensX              BtensX              DtensX");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF1,DAMP1,Acoeft1,Bcoeft1,Dcoeft1);
    COMMENT("#  fct_ID1    HtensX   fct_ID2   fct_ID3                          DeltaMin_tensX      DeltaMax_tensX");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A1,HFLAG1,FUN_B1,FUN_C1,MIN_RUP1,MAX_RUP1);
    COMMENT("#       Fscale_tensX        Escale_tensX        Ascale_tensX");
    CARD("%20lg%20lg%20lg",Prop_X_F,Prop_X_E,scale1);
    //Ty
    COMMENT("#             KtensY              CtensY              AtensY              BtensY              DtensY");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF2,DAMP2,Acoeft2,Bcoeft2,Dcoeft2);
    COMMENT("#  fct_ID4    HtensY   fct_ID5   fct_ID6                          DeltaMin_tensY      DeltaMax_tensY");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A2,HFLAG2,FUN_B2,FUN_C2,MIN_RUP2,MAX_RUP2);
    COMMENT("#       Fscale_tensY        Escale_tensY        Ascale_tensY");
    CARD("%20lg%20lg%20lg",Prop_Y_F,Prop_Y_E,scale2);
    //Tz
    COMMENT("#             KtensZ              CtensZ              AtensZ              BtensZ              DtensZ");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF3,DAMP3,Acoeft3,Bcoeft3,Dcoeft3);
    COMMENT("#  fct_ID7    HtensZ   fct_ID8   fct_ID9                          DeltaMin_tensZ      DeltaMax_tensZ");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A3,HFLAG3,FUN_B3,FUN_C3,MIN_RUP3,MAX_RUP3);
    COMMENT("#       Fscale_tensZ        Escale_tensZ        Ascale_tensZ");
    CARD("%20lg%20lg%20lg",Prop_Z_F,Prop_Z_E,scale3);
    //Rx
    COMMENT("#             KtorsX              CtorsX              AtorsX              BtorsX              DtorsX");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF4,DAMP4,Acoeft4,Bcoeft4,Dcoeft4);
    COMMENT("# fct_IDi1    HtorsX  fct_IDi2  fct_IDi2                          ThetaMin_torsX      ThetaMax_torsX");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A4,HFLAG4,FUN_B4,FUN_C4,MIN_RUP4,MAX_RUP4);
    COMMENT("#       Fscale_torsX        Escale_torsX        Ascale_torsX");
    CARD("%20lg%20lg%20lg",Prop_Tor_F,Prop_Tor_E,scale4);
    //Ry
    COMMENT("#             KtorsY              CtorsY              AtorsY              BtorsY              DtorsY");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF5,DAMP5,Acoeft5,Bcoeft5,Dcoeft5);
    COMMENT("# fct_IDi4    HtorsY  fct_IDi5  fct_IDi6                          ThetaMin_torsY      ThetaMax_torsY");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A5,HFLAG5,FUN_B5,FUN_C5,MIN_RUP5,MAX_RUP5);
    COMMENT("#       Fscale_torsY        Escale_torsY        Ascale_torsY");
    CARD("%20lg%20lg%20lg",Prop_FlxY_F,Prop_FlxY_E,scale5);
    //Rz
    COMMENT("#             KtorsZ              CtorsZ              AtorsZ              BtorsZ              DtorsZ");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF6,DAMP6,Acoeft6,Bcoeft6,Dcoeft6);
    COMMENT("# fct_IDi7    HtorsZ  fct_IDi8  fct_IDi9                          ThetaMin_torsZ      ThetaMax_torsZ");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A6,HFLAG6,FUN_B6,FUN_C6,MIN_RUP6,MAX_RUP6);
    COMMENT("#       Fscale_torsZ        Escale_torsZ        Ascale_torsZ");
    CARD("%20lg%20lg%20lg",Prop_FlxZ_F,Prop_FlxZ_E,scale6);
    COMMENT("#   Israte              Asrate");
    CARD("%10d%20lg",ISRATE,Asrate);
}

// File format for Radioss 51
FORMAT(radioss51) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE8/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SPR_GENE/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#               Mass             Inertia   skew_ID   sens_ID    Isflag     Ifail              Iequil");
    CARD("%20lg%20lg%10d%10d%10d%10d          %10d",MASS,INERTIA,SKEW_CSID,ISENSOR,ISFLAG,Ifail,Iequil);
    //Tx
    COMMENT("#             KtensX              CtensX              AtensX              BtensX              DtensX");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF1,DAMP1,Acoeft1,Bcoeft1,Dcoeft1);
    COMMENT("#  fct_ID1    HtensX   fct_ID2   fct_ID3                          DeltaMin_tensX      DeltaMax_tensX");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A1,HFLAG1,FUN_B1,FUN_C1,MIN_RUP1,MAX_RUP1);
    COMMENT("#       Fscale_tensX        Escale_tensX");
    CARD("%20lg%20lg",Prop_X_F,Prop_X_E);
    //Ty
    COMMENT("#             KtensY              CtensY              AtensY              BtensY              DtensY");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF2,DAMP2,Acoeft2,Bcoeft2,Dcoeft2);
    COMMENT("#  fct_ID4    HtensY   fct_ID5   fct_ID6                          DeltaMin_tensY      DeltaMax_tensY");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A2,HFLAG2,FUN_B2,FUN_C2,MIN_RUP2,MAX_RUP2);
    COMMENT("#       Fscale_tensY        Escale_tensY");
    CARD("%20lg%20lg",Prop_Y_F,Prop_Y_E);
    //Tz
    COMMENT("#             KtensZ              CtensZ              AtensZ              BtensZ              DtensZ");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF3,DAMP3,Acoeft3,Bcoeft3,Dcoeft3);
    COMMENT("#  fct_ID7    HtensZ   fct_ID8   fct_ID9                          DeltaMin_tensZ      DeltaMax_tensZ");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A3,HFLAG3,FUN_B3,FUN_C3,MIN_RUP3,MAX_RUP3);
    COMMENT("#       Fscale_tensZ        Escale_tensZ");
    CARD("%20lg%20lg",Prop_Z_F,Prop_Z_E);
    //Rx
    COMMENT("#             KtorsX              CtorsX              AtorsX              BtorsX              DtorsX");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF4,DAMP4,Acoeft4,Bcoeft4,Dcoeft4);
    COMMENT("# fct_IDi1    HtorsX  fct_IDi2  fct_IDi3                          ThetaMin_torsX      ThetaMax_torsX");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A4,HFLAG4,FUN_B4,FUN_C4,MIN_RUP4,MAX_RUP4);
    COMMENT("#       Fscale_torsX        Escale_torsX");
    CARD("%20lg%20lg",Prop_Tor_F,Prop_Tor_E);
    //Ry
    COMMENT("#             KtorsY              CtorsY              AtorsY              BtorsY              DtorsY");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF5,DAMP5,Acoeft5,Bcoeft5,Dcoeft5);
    COMMENT("# fct_IDi4    HtorsY  fct_IDi5  fct_IDi6                          ThetaMin_torsY      ThetaMax_torsY");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A5,HFLAG5,FUN_B5,FUN_C5,MIN_RUP5,MAX_RUP5);
    COMMENT("#       Fscale_torsY        Escale_torsY");
    CARD("%20lg%20lg",Prop_FlxY_F,Prop_FlxY_E);
    //Rz
    COMMENT("#             KtorsZ              CtorsZ              AtorsZ              BtorsZ              DtorsZ");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF6,DAMP6,Acoeft6,Bcoeft6,Dcoeft6);
    COMMENT("# fct_IDi7    HtorsZ  fct_IDi8  fct_IDi9                          ThetaMin_torsZ      ThetaMax_torsZ");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A6,HFLAG6,FUN_B6,FUN_C6,MIN_RUP6,MAX_RUP6);
    COMMENT("#       Fscale_torsZ        Escale_torsZ");
    CARD("%20lg%20lg",Prop_FlxZ_F,Prop_FlxZ_E);
    COMMENT("#   Israte              Asrate");
    FREE_CARD(CARD_EXISTS, "%10d%20lg",ISRATE,Asrate);
}

// File format for Radioss 44
FORMAT(radioss44) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s/%d/%s",TYPE_NO,_ID_,TITLE);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    COMMENT("#           Mass         Inertia skew_ID sens_ID  Isflag   Ifail          Iequil");
    CARD("%16lg%16lg%8d%8d%8d%8d        %8d",MASS,INERTIA,SKEW_CSID,ISENSOR,ISFLAG,Ifail,Iequil);
    //Tx
    COMMENT("#         KtensX          CtensX          AtensX          BtensX          DtensX");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF1,DAMP1,Acoeft1,Bcoeft1,Dcoeft1);
    COMMENT("#fct_ID1  HtensX fct_ID2 fct_ID3                  DeltaMin_tensX  DeltaMax_tensX");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A1,HFLAG1,FUN_B1,FUN_C1,MIN_RUP1,MAX_RUP1);
    //Ty
    COMMENT("#         KtensY          CtensY          AtensY          BtensY          DtensY");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF2,DAMP2,Acoeft2,Bcoeft2,Dcoeft2);
    COMMENT("#fct_ID4  HtensY fct_ID5 fct_ID6                  DeltaMin_tensY  DeltaMax_tensY");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A2,HFLAG2,FUN_B2,FUN_C2,MIN_RUP2,MAX_RUP2);
    //Tz
    COMMENT("#         KtensZ          CtensZ          AtensZ          BtensZ          DtensZ");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF3,DAMP3,Acoeft3,Bcoeft3,Dcoeft3);
    COMMENT("#fct_ID7  HtensZ fct_ID8 fct_ID9                  DeltaMin_tensZ  DeltaMax_tensZ");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A3,HFLAG3,FUN_B3,FUN_C3,MIN_RUP3,MAX_RUP3);
    //Rx
    COMMENT("#         KtorsX          CtorsX          AtorsX          BtorsX          DtorsX");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF4,DAMP4,Acoeft4,Bcoeft4,Dcoeft4);
    COMMENT("#fct_IDi1  HtorsX fct_IDi2 fct_IDi2                  ThetaMin_torsX  ThetaMax_torsX");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A4,HFLAG4,FUN_B4,FUN_C4,MIN_RUP4,MAX_RUP4);
    //Ry
    COMMENT("#         KtorsY          CtorsY          AtorsY          BtorsY          DtorsY");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF5,DAMP5,Acoeft5,Bcoeft5,Dcoeft5);
    COMMENT("#fct_IDi4  HtorsY fct_IDi5 fct_IDi6                  ThetaMin_torsY  ThetaMax_torsY");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A5,HFLAG5,FUN_B5,FUN_C5,MIN_RUP5,MAX_RUP5);
    //Rz
    COMMENT("#         KtorsZ          CtorsZ          AtorsZ          BtorsZ          DtorsZ");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF6,DAMP6,Acoeft6,Bcoeft6,Dcoeft6);
    COMMENT("#fct_IDi7  HtorsZ fct_IDi8 fct_IDi9                  ThetaMin_torsZ  ThetaMax_torsZ");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A6,HFLAG6,FUN_B6,FUN_C6,MIN_RUP6,MAX_RUP6);
}

// File format for Radioss 41
FORMAT(radioss41) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s/%d/%s",TYPE_NO,_ID_,TITLE);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    COMMENT("#           Mass         Inertia skew_ID sens_ID  Isflag   Ifail");
    CARD("%16lg%16lg%8d%8d%8d%8d",MASS,INERTIA,SKEW_CSID,ISENSOR,ISFLAG,Ifail);
    //Tx
    COMMENT("#         KtensX          CtensX          AtensX          BtensX          DtensX");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF1,DAMP1,Acoeft1,Bcoeft1,Dcoeft1);
    COMMENT("#fct_ID1  HtensX fct_ID2 fct_ID3                  DeltaMin_tensX  DeltaMax_tensX");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A1,HFLAG1,FUN_B1,FUN_C1,MIN_RUP1,MAX_RUP1);
    //Ty
    COMMENT("#         KtensY          CtensY          AtensY          BtensY          DtensY");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF2,DAMP2,Acoeft2,Bcoeft2,Dcoeft2);
    COMMENT("#fct_ID4  HtensY fct_ID5 fct_ID6                  DeltaMin_tensY  DeltaMax_tensY");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A2,HFLAG2,FUN_B2,FUN_C2,MIN_RUP2,MAX_RUP2);
    //Tz
    COMMENT("#         KtensZ          CtensZ          AtensZ          BtensZ          DtensZ");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF3,DAMP3,Acoeft3,Bcoeft3,Dcoeft3);
    COMMENT("#fct_ID7  HtensZ fct_ID8 fct_ID9                  DeltaMin_tensZ  DeltaMax_tensZ");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A3,HFLAG3,FUN_B3,FUN_C3,MIN_RUP3,MAX_RUP3);
    //Rx
    COMMENT("#         KtorsX          CtorsX          AtorsX          BtorsX          DtorsX");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF4,DAMP4,Acoeft4,Bcoeft4,Dcoeft4);
    COMMENT("#fct_IDi1  HtorsX fct_IDi2 fct_IDi2                  ThetaMin_torsX  ThetaMax_torsX");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A4,HFLAG4,FUN_B4,FUN_C4,MIN_RUP4,MAX_RUP4);
    //Ry
    COMMENT("#         KtorsY          CtorsY          AtorsY          BtorsY          DtorsY");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF5,DAMP5,Acoeft5,Bcoeft5,Dcoeft5);
    COMMENT("#fct_IDi4  HtorsY fct_IDi5 fct_IDi6                  ThetaMin_torsY  ThetaMax_torsY");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A5,HFLAG5,FUN_B5,FUN_C5,MIN_RUP5,MAX_RUP5);
    //Rz
    COMMENT("#         KtorsZ          CtorsZ          AtorsZ          BtorsZ          DtorsZ");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF6,DAMP6,Acoeft6,Bcoeft6,Dcoeft6);
    COMMENT("#fct_IDi7  HtorsZ fct_IDi8 fct_IDi9                  ThetaMin_torsZ  ThetaMax_torsZ");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A6,HFLAG6,FUN_B6,FUN_C6,MIN_RUP6,MAX_RUP6);
}
