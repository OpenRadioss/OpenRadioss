//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Failure model, Tuler-Butcher (TBUTCHER) Setup File
// 

ATTRIBUTES(COMMON){ 

    _HMCOMMENTSFLAG         = VALUE(INT, "Write HM Comments");
    mat_id                  = VALUE(MAT,  "Material");

    Lambda                  = VALUE(FLOAT,"Exponent");
    K                       = VALUE(FLOAT,"Critical damage integral");
    Sigma_r                 = VALUE(FLOAT,"Fracture stress");
    Ifail_sh                = VALUE(INT,  "Flag for shell failure model");
    Iduct                   = VALUE(INT,  "Ductile-brittle materials flag");
    a_TBUTCHER_XFEMTBUTC    = VALUE(FLOAT, "Brittle rupture material parameter A (exponent)");
    b_TBUTCHER_XFEMTBUTC    = VALUE(FLOAT, "Brittle rupture material parameter B (exponent)");
    
    ID_CARD_EXIST           = VALUE(INT, "Give an Id");
}
SKEYWORDS_IDENTIFIER(COMMON)
{
    _HMCOMMENTSFLAG=-1;
}
/*
DEFINITIONS(COMMON) {
  SUPPORTING=(MAT);
}

CHECK(COMMON) {
  DADV >= 0.0;
  DADV <= 1.0;
}

GUI(COMMON) {
 DATA(MAT)   {SUBTYPES=(
//         /MAT/BARLAT3, 
         /MAT/BOLTZMAN,/MAT/COMPSO,
         /MAT/CONC,
//        /MAT/COSSER,
         /MAT/COWPER,/MAT/DAMA,/MAT/DPRAG,
         /MAT/LAW10,
         /MAT/ELAST,/MAT/ELASTOMER,/MAT/FABR_A,/MAT/FOAM_PLAS,
         /MAT/LAW70,
         /MAT/FOAM_VISC,/MAT/GURSON,
         /MAT/LAW63,
         /MAT/HILL_TAB,/MAT/HONEYCOMB,
         /MAT/HYD_JCOOK,/MAT/HYDRO,/MAT/HYDPLA,/MAT/KELVINMAX,
//       /MAT/LAW41,
//         /MAT/LEE_T,
         /MAT/OGDEN,/MAT/LAW23,/MAT/PLAS_JOHNS,/MAT/PLAS_TAB,/MAT/PLAS_T3,
         /MAT/PLAS_ZERIL,/MAT/STEINB, /MAT/LAW53, /MAT/LAW64, /MAT/LAW50,
         /MAT/VISC_HYP,/MAT/VISC_TAB,  
         /MAT/ZHAO,
         /MAT/VOID,
         /MAT/CHANG,
         /MAT/FABRI,
         /MAT/COMPSH,
         /MAT/PLAS_BRIT,
         /MAT/HILL,
         /MAT/LAW80,
         /MAT/LAW82,
         /MAT/LAW92);}

  SCALAR(LAMBDA)     { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(K)          { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(SIGMA_R)    { DIMENSION = "DIMENSIONLESS"; }
  //
  RADIO(ISHELL) {
    ADD(0,"0: Default");
    ADD(1,"1: Shell is deleted if D greater-than K for 1 integ. point or layer");
    ADD(2,"2: Stress tensor is set to 0 if D greater-than K and shell is deleted if D greater-than K for all integ. points or layers");
  }
  RADIO(ISOLID) {
    ADD(0,"0: Default");
    ADD(1,"1: Solid is deleted if D greater-than K for 1 integ. point");
    ADD(2,"2: For each integ. point, deviatoric stress tension is vanished if D greater-than K");
  }
  RADIO(IDUCT) {
    ADD(0,"0: Default");
    ADD(1,"1: if a ductile material is used");
    ADD(2,"2: if a brittle material is used (shell only)");
  }
  RADIO(IXFEM) {
    ADD(0,"0: Without XFEM");
    ADD(1,"1: XFEM formulation ");
  }
  SCALAR(A)          { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(B)          { DIMENSION = "DIMENSIONLESS"; }
  if (IXFEM==1) {
  SCALAR(DADV);
  }
  FLAG(ID_CARD_EXIST);
}
*/
FORMAT(radioss110) {
    HEADER("/FAIL/XFEM_TBUTC/%d",mat_id);

    COMMENT("#             LAMBDA                   K             SIGMA_R  IFAIL_SH     IDUCT");
    CARD("%20lg%20lg%20lg%10d%10d",Lambda,K,Sigma_r,Ifail_sh,Iduct);
    COMMENT("#                  A                   B");
    CARD("%20lg%20lg",a_TBUTCHER_XFEMTBUTC,b_TBUTCHER_XFEMTBUTC);
}