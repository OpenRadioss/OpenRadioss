//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//FAIL : PUCK  HC 9.0-SP1
//


ATTRIBUTES(COMMON){ 

    _HMCOMMENTSFLAG         = VALUE(INT, "Write HM Comments");
    mat_id                  = VALUE(MAT,  "Material");

    Sigma_1t                = VALUE( FLOAT, "Longitudinal tensile strength") ;
    Sigma_2t                = VALUE( FLOAT, "Transverse tensile strength") ;
    Sigma_12                = VALUE( FLOAT, "Shear strength") ;
    Sigma_1c                = VALUE( FLOAT, "Longitudinal compressive strength") ;
    Sigma_2c                = VALUE( FLOAT, "Transverse compressive strength") ;
    
    p12_Positive            = VALUE( FLOAT, "Failure envelop factor 12 (+)") ;
    p12_Negative            = VALUE( FLOAT, "Failure envelop factor 12 (-)") ;
    p22_Negative            = VALUE( FLOAT, "Failure envelop factor 22 (-)") ;
    Tau_max                 = VALUE( FLOAT, "Dynamic time relaxation") ;
    Ifail_sh                = VALUE( INT,   "Flag for shell failure model") ;
    Ifail_so                = VALUE( INT,   "Flag for solid failure model") ;
  
    ID_CARD_EXIST           = VALUE(BOOL, "Give an Id");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    _HMCOMMENTSFLAG=-1;
}
/*


DEFINITIONS(COMMON) {
  SUPPORTING=(MAT);
}
*/
GUI(COMMON){ 
/*
 DATA(MAT) {SUBTYPES=(/MAT/3D_COMP,/MAT/COMPSH,/MAT/COMPSO);}
 */
  SCALAR (Sigma_1t){DIMENSION="pressure"; }
  SCALAR (Sigma_2t){DIMENSION="pressure"; }
  SCALAR (Sigma_12){DIMENSION="pressure"; }
  SCALAR (Sigma_1c){DIMENSION="pressure"; }
  SCALAR (Sigma_2c){DIMENSION="pressure"; }
  SCALAR (p12_Positive){DIMENSION="DIMENSIONLESS"; }
  SCALAR (p12_Negative){DIMENSION="DIMENSIONLESS"; }
  SCALAR (p22_Negative){DIMENSION="DIMENSIONLESS"; }
 mandatory:
  SCALAR (Tau_max ){DIMENSION="t"; }
 /*optional:
 RADIO(ISHELL)
 {
    ADD(1,"Shell deleted, if damage is reached for one layer") ;
    ADD(2,"Shell deleted, if damage is reached for all layers") ;
 }
 RADIO(ISOLID)
 {
    ADD(1,"Shell deleted, if damage is reached for one integration point") ;
 }
 FLAG(ID_CARD_EXIST);*/
}





FORMAT(radioss90) { 
    HEADER("/FAIL/PUCK/%d",mat_id);

    COMMENT("#           SIGMA_1T            SIGMA_2T                 TAU            SIGMA_1C            SIGMA_2C") ;
    CARD("%20lg%20lg%20lg%20lg%20lg",Sigma_1t, Sigma_2t, Sigma_12, Sigma_1c, Sigma_2c);
    COMMENT("#       P12_POSITIVE        P12_NEGATIVE        P22_NEGATIVE             TAU_MAX  IFAIL_SH  IFAIL_SO") ;
    CARD("%20lg%20lg%20lg%20lg%10d%10d",p12_Positive, p12_Negative, p22_Negative, Tau_max, Ifail_sh, Ifail_so);   
} 


