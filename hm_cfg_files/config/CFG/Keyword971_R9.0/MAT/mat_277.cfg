//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
ATTRIBUTES(COMMON)
{
    
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    EncTypeEnumField                        = VALUE(INT,  "Type");
    RegTypeEnumField                        = VALUE(INT,  "Type");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    LSD_K1                                  = VALUE(FLOAT,  "Parameter for Kamal model");
    LSD_K2                                  = VALUE(FLOAT,  "Parameter for Kamal model");
    LSD_MAT_C1                              = VALUE(FLOAT,  "Parameter for Kamal model");
    LSD_MAT_C2                              = VALUE(FLOAT,  "Parameter for Kamal model");
    LSDYNA_MAT_M                            = VALUE(FLOAT,  "Exponent for Kamal model");
    LSDYNA_MAT_N                            = VALUE(FLOAT,  "Exponent for Kamal model");
    LSD_CHEXP1                              = VALUE(FLOAT,  "Quadratic parameter");
    LSD_CHEXP2                              = VALUE(FLOAT,  "Linear parameter");
    LSD_CHEXP3                              = VALUE(FLOAT,  "Constant parameter");
    LSD_LCID                                = VALUE(FUNCT,  "coef. of chemical shrinkage vs state of cure");
    LSD_LCID2                               = VALUE(FUNCT,  "coef. of thermal expansion vs cure and temp.");
    LSD_MAT_R                               = VALUE(FLOAT,  "Gas constant");
    LSD_TREFEXP                             = VALUE(FLOAT,  "Reference temperature");
    LSD_DOCREFEXP                           = VALUE(FLOAT,  "Reference degree of cure");
    LSD_WLFTREF                             = VALUE(FLOAT,  "Reference temperature");
    LSD_WLFA                                = VALUE(FLOAT,  "Parameter shift function");
    LSD_WLFB                                = VALUE(FLOAT,  "Parameter shift function");
    LSD_LCID3                               = VALUE(FUNCT,  "shear modulus vs state of cure");
    LSD_LCID4                               = VALUE(FUNCT,  "bulk modulus vs state of cure.");
    LSD_IDOC                                = VALUE(FLOAT,  "Initial degree of cure");
    LSD_INCR                                = VALUE(INT,  "Switch between incremental and total stress");
    ArrayCount                              = SIZE("ArrayCount");
    LSD_MAT76_GI                            = ARRAY[ArrayCount](FLOAT,  "Shear relaxation modulus");
    LSD_MAT76_BETAI                         = ARRAY[ArrayCount](FLOAT,  "Shear decay constant");
    LSD_MAT76_KI                            = ARRAY[ArrayCount](FLOAT,  "Bulk relaxation modulus");
    LSD_MAT76_BETAKI                        = ARRAY[ArrayCount](FLOAT,  "Bulk decay constant");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    IO_FLAG                                 = VALUE(INT, "io flag");
    _HMCOMMENTSFLAG                         = VALUE(INT, "Write HM Comments");
    TITLE                                   = VALUE(STRING, "Title");
}

CHECK(COMMON)
{
  ArrayCount <= 16;
}

DEFAULTS(COMMON) {

}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    EncTypeEnumField                        = 5828;
    Num_Comments                            = 3101;
    RegTypeEnumField                        = 5827;
    Rho                                     = 118;
    LSD_TitleOpt                            = 90;
    LSD_K1                                  = 1593;
    LSD_K2                                  = 1594;
    LSD_MAT_C1                              = 1139;
    LSD_MAT_C2                              = 1140;
    LSDYNA_MAT_M                            = 4921;
    LSDYNA_MAT_N                            = 4922;
    LSD_CHEXP1                              = 8203;
    LSD_CHEXP2                              = 8204;
    LSD_CHEXP3                              = 8205;
    LSD_LCID                                = 45;
    LSD_LCID2                               = 168;
    LSD_MAT_R                               = 1134;
    LSD_TREFEXP                             = 8206;
    LSD_DOCREFEXP                           = 8207;
    LSD_WLFTREF                             = 8208;
    LSD_WLFA                                = 8209;
    LSD_WLFB                                = 8210;
    LSD_LCID3                               = 170;
    LSD_LCID4                               = 171;
    LSD_IDOC                                = 8211;
    LSD_INCR                                = 8212;
    ArrayCount                              = 2246;
    LSD_MAT76_GI                            = 4380;
    LSD_MAT76_BETAI                         = 4381;
    LSD_MAT76_KI                            = 4382;
    LSD_MAT76_BETAKI                        = 4383;
    IO_FLAG                                 = -1;
}

DRAWABLES(COMMON) {
MASS_DENSITY = SCALAR(Rho);
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_ADHESIVE_CURING_VISCOELASTIC");
     RADIO(CommentEnumField)
     {
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt,"Title")
     {
        TITLE = "xyz"; 
     }
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     }
mandatory:
     SCALAR(Rho)                                    {DIMENSION="density";}
optional:
     SCALAR(LSD_K1)                                 {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_K2)                                 {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_C1)                             {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_C2)                             {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_MAT_M)                           {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_MAT_N)                           {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_CHEXP1)                             {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_CHEXP2)                             {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_CHEXP3)                             {DIMENSION="DIMENSIONLESS";}
     DATA(LSD_LCID);
     DATA(LSD_LCID2);
     SCALAR(LSD_MAT_R)                              {DIMENSION="entropy";}
     SCALAR(LSD_TREFEXP)                            {DIMENSION="k";}
     SCALAR(LSD_DOCREFEXP)                          {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_WLFTREF)                            {DIMENSION="k";}
     SCALAR(LSD_WLFA)                               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_WLFB)                               {DIMENSION="DIMENSIONLESS";}
     DATA(LSD_LCID3);
     DATA(LSD_LCID4);
     SCALAR(LSD_IDOC)                               {DIMENSION="DIMENSIONLESS";}
     RADIO(LSD_INCR)
     {
        ADD(0, "0");
        ADD(1, "1");
     }
     SIZE(ArrayCount) ;
     ARRAY(ArrayCount, "")
     {
        SCALAR(LSD_MAT76_GI)                        {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT76_BETAI)                     {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT76_KI)                        {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT76_BETAKI)                    {DIMENSION="DIMENSIONLESS";}
     }
}

FORMAT(Keyword971_R9.0) 
{
    
    //
    COMMENT("$      MID       RHO        K1        K2        C1        C2         M         N");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSD_K1,LSD_K2,LSD_MAT_C1,LSD_MAT_C2,LSDYNA_MAT_M,LSDYNA_MAT_N);
    //
    COMMENT("$   CHEXP1    CHEXP2    CHEXP3   LCCHEXP   LCTHEXP         R   TREFEXP DOCREFEXP");
    CARD("%10lg%10lg%10lg%10d%10d%10lg%10lg%10lg",LSD_CHEXP1,LSD_CHEXP2,LSD_CHEXP3,LSD_LCID,LSD_LCID2,LSD_MAT_R,LSD_TREFEXP,LSD_DOCREFEXP);
    //
    COMMENT("$  WLFTREF      WLFA      WLFB      LCG0      LCK0      IDOC      INCR");
    CARD("%10lg%10lg%10lg%10d%10d%10lg%10d",LSD_WLFTREF,LSD_WLFA,LSD_WLFB,LSD_LCID3,LSD_LCID4,LSD_IDOC,LSD_INCR);
    //
    if(ArrayCount > 0)
    {
        COMMENT("$       GI    BETAGI        KI    BETAKI");
    }
    FREE_CARD_LIST(ArrayCount)
    {
        CARD("%10lg%10lg%10lg%10lg",LSD_MAT76_GI,LSD_MAT76_BETAI,LSD_MAT76_KI,LSD_MAT76_BETAKI);
    }

}