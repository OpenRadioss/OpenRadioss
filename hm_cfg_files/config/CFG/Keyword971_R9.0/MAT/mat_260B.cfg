//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 260B
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    EncTypeEnumField                        = VALUE(INT,  "Type");
    RegTypeEnumField                        = VALUE(INT,  "Type");
    OPT_TYPE_STR                            = VALUE(STRING, "OPT");
    E                                       = VALUE(FLOAT,  "Youngs Modulus");
    LSDYNA_A1                               = VALUE(FLOAT,  "Components of vector a");
    LSDYNA_A2                               = VALUE(FLOAT,  "Components of vector a");
    LSDYNA_A3                               = VALUE(FLOAT,  "Components of vector a");
    LSDYNA_MAT_M                            = VALUE(FLOAT,  "M");
    LSDYNA_V1                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V2                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V3                               = VALUE(FLOAT,  "Components of vector v");
    LSD_260A_XUE                            = VALUE(INT,  "XUEoption");
    LSD_A                                   = VALUE(FLOAT,  "Material parameters for the rate-dependent Hosford-Coulomb fracture initiation model");
    LSD_BO                                  = VALUE(FLOAT,  "Material parameters for the rate-dependent Hosford-Coulomb fracture initiation model");
    LSD_C                                   = VALUE(FLOAT,  "Material parameters for the rate-dependent Hosford-Coulomb fracture initiation model");
    LSD_DEPSAD                              = VALUE(FLOAT,  "Material parameters for strain softening effect due to temperature");
    LSD_DEPSO                               = VALUE(FLOAT,  "Material parameters for strain softening effect due to temperature");
    LSD_EFO                                 = VALUE(FLOAT,  "EFO");
    LSD_G12                                 = VALUE(FLOAT,  "Plastic flow potential parameter in rolling");
    LSD_G22                                 = VALUE(FLOAT,  "Plastic flow potential parameter in diagonal");
    LSD_G33                                 = VALUE(FLOAT,  "Plastic flow potential parameter in transverse");
    LSD_GAMMA                               = VALUE(FLOAT,  "GAMA");
    LSD_GAMMA1                              = VALUE(FLOAT,  "Material parameters for the rate-dependent Hosford-Coulomb fracture initiation model");
    LSD_LCID                                = VALUE(FUNCT,  "stress vs. strain hardening behavior from a uniaxial tension test");
    LSD_LCID2                               = VALUE(FUNCT,  "stress scale factors vs. strain rates");
    LSD_LCID3                               = VALUE(FUNCT,  "stress scale factors vs. temperature in Kelvin");
    LSD_LCID4                               = VALUE(FUNCT,  "LFLD");
    LSD_LCID5                               = VALUE(FUNCT,  "LFRAC");
    LSD_M                                   = VALUE(FLOAT,  "Material parameters for strain softening effect due to temperature");
    LSD_MAT_BETA                            = VALUE(FLOAT,  "MANGLE");
    LSD_MAT_CP                              = VALUE(FLOAT,  "Material parameters for strain softening effect due to temperature");
    LSD_MAT_ETA                             = VALUE(FLOAT,  "Material parameters for strain softening effect due to temperature");
    LSD_MAT_N                               = VALUE(FLOAT,  "Material parameters for the rate-dependent Hosford-Coulomb fracture initiation model");
    LSD_MAT_Q                               = VALUE(FLOAT,  "Q");
    LSD_NODE3                               = VALUE(NODE,  "Node1");
    LSD_NODE4                               = VALUE(NODE,  "Node2");
    LSD_NODE5                               = VALUE(NODE,  "Node1");
    LSD_NODE6                               = VALUE(NODE,  "Node2");
    LSD_PLIM                                = VALUE(FLOAT,  "PLIM");
    LSD_SCALE                               = VALUE(FLOAT,  "used to speed up the simulation while equalizing the strain rate effect");
    LSD_SIZE0                               = VALUE(FLOAT,  "SIZE0");
    LSD_SYSTEM                              = VALUE(SYSTEM,  "coordinate system ID");
    LSD_TINI                                = VALUE(FLOAT,  "Material parameters for strain softening effect due to temperature");
    LSD_TMELT                               = VALUE(FLOAT,  "Material parameters for strain softening effect due to temperature");
    LSD_TREF                                = VALUE(FLOAT,  "Material parameters for strain softening effect due to temperature");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    LSD_WO                                  = VALUE(FLOAT,  "W0");
    MAT271_P12                              = VALUE(FLOAT,  "Yield function parameter in rolling");
    MAT271_P22                              = VALUE(FLOAT,  "Yield function parameter in diagonal");
    MAT271_P33                              = VALUE(FLOAT,  "Yield function parameter in transverse");
    Nu                                      = VALUE(FLOAT,  "Poissons ratio");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    axisOptFlag                             = VALUE(INT,  "Anisotropy axis definition");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    IO_FLAG                                 = VALUE(INT, "io flag");
    _HMCOMMENTSFLAG                         = VALUE(INT, "Write HM Comments");
    TITLE                                   = VALUE(STRING, "Title");
    LOC_AOPT                                = VALUE(FLOAT, "");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
    _HAS_HEADER                             = VALUE(BOOL,"Has Header Card");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    E                                       = 119;
    LSDYNA_A1                               = 139;
    LSDYNA_A2                               = 140;
    LSDYNA_A3                               = 141;
    LSDYNA_MAT_M                            = 4921;
    LSDYNA_V1                               = 142;
    LSDYNA_V2                               = 143;
    LSDYNA_V3                               = 144;
    LSD_260A_XUE                            = 8170;
    LSD_A                                   = 718;
    LSD_BO                                  = 7612;
    LSD_C                                   = 1519;
    LSD_DEPSAD                              = 8183;
    LSD_DEPSO                               = 8182;
    LSD_EFO                                 = 8171;
    LSD_G12                                 = 8174;
    LSD_G22                                 = 8175;
    LSD_G33                                 = 8176;
    LSD_GAMMA                               = 4336;
    LSD_GAMMA1                              = 4820;
    LSD_LCID                                = 45;
    LSD_LCID2                               = 168;
    LSD_LCID3                               = 170;
    LSD_LCID4                               = 171;
    LSD_LCID5                               = 172;
    LSD_M                                   = 1570;
    LSD_MAT_BETA                            = 306;
    LSD_MAT_CP                              = 318;
    LSD_MAT_ETA                             = 8180;
    LSD_MAT_N                               = 312;
    LSD_MAT_Q                               = 6071;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_PLIM                                = 8172;
    LSD_SCALE                               = 5017;
    LSD_SIZE0                               = 8178;
    LSD_SYSTEM                              = 184;
    LSD_TINI                                = 8181;
    LSD_TMELT                               = 8179;
    LSD_TREF                                = 1643;
    LSD_TitleOpt                            = 90;
    LSD_WO                                  = 8177;
    MAT271_P12                              = 1347;
    MAT271_P22                              = 1345;
    MAT271_P33                              = 1346;
    Nu                                      = 120;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    axisOptFlag                             = 4946;
    AOPT_SKEW_FLAG                          = -1;
    IO_FLAG                                 = -1;
    OPT_TYPE_STR                            = -1;
    TITLE                                   = -1;
    LOC_AOPT                                = -1;
    //empty_string                       = -1;
    _HAS_HEADER                             = -1;
}

DEFAULTS(COMMON)
{
    _HAS_HEADER     = TRUE;
    LSD_SCALE       = 1.0;
}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY=SCALAR(Rho);
    YOUNG_MODULUS = SCALAR(E);
    POISSON_RATIO = SCALAR(Nu);
                   //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*MAT_MOHR_NON_ASSOCIATED_FLOW");   
    RADIO(CommentEnumField)
    {
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    }
    if( CommentEnumField == 2)
    {
       SIZE(Num_Comments);
       ARRAY(Num_Comments,"")
       {
          SCALAR(Comments);
       }
    }
    FLAG( LSD_260A_XUE);
    if(LSD_260A_XUE == 1)
    {
        ASSIGN(KEYWORD_STR,"_XUE");
    }
    FLAG( LSD_TitleOpt);
    if(LSD_TitleOpt == 1)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    }
mandatory:
    SCALAR(Rho)                                     {DIMENSION="density";}
    SCALAR(E)                                       {DIMENSION="pressure";}
    SCALAR(Nu)                                      {DIMENSION="DIMENSIONLESS";}
optional:
    SCALAR(MAT271_P12);
    SCALAR(MAT271_P22);
    SCALAR(MAT271_P33);
    SCALAR(LSD_G12);
    //
    SCALAR(LSD_G22);
    SCALAR(LSD_G33);
    DATA(LSD_LCID);
    DATA(LSD_LCID2);
    DATA(LSD_LCID3);
    DATA(LSD_LCID4);
    DATA(LSD_LCID5);
    SCALAR(LSD_WO);
    //
    SCALAR(LSD_A);
    SCALAR(LSD_BO);
    SCALAR(LSD_GAMMA1);
    SCALAR(LSD_C);
    SCALAR(LSD_MAT_N);
    SCALAR(LSD_SCALE);
    SCALAR(LSD_SIZE0);
    //
    SCALAR(LSD_TREF);
    SCALAR(LSD_TMELT);
    SCALAR(LSDYNA_MAT_M);
    SCALAR(LSD_MAT_ETA);
    SCALAR(LSD_MAT_CP);
    SCALAR(LSD_TINI);
    SCALAR(LSD_DEPSO);
    SCALAR(LSD_DEPSAD);
    //
    if( LSD_260A_XUE == 1)
    {
       SCALAR(LSD_EFO);
       SCALAR(LSD_PLIM);
       SCALAR(LSD_MAT_Q);
       SCALAR(LSD_GAMMA);
       SCALAR(LSD_M);
    }
    RADIO(axisOptFlag)
    {
        ADD(1, "0.0: Locally orthotropic: axis given by nodes 1,2 and 4");
        ADD(2, "2.0: Globally orthotropic: axis given by vectors");
        ADD(3, "3.0: Locally orthotropic: axis given by rotating the material axes by an angle BETA");
        ADD(4, "By System");
    }
    if(axisOptFlag == 4)
    {
        DATA(LSD_SYSTEM);
    }
    if(axisOptFlag == 2)
    {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],FALSE);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],FALSE);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],FALSE);
    }
    if(axisOptFlag == 3)
    {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],FALSE);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],FALSE);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],FALSE);
    }     
    if(axisOptFlag == 3 || axisOptFlag == 1)
    {
        SCALAR(LSD_MAT_BETA)        {DIMENSION="DIMENSIONLESS";}
    }
}

// File format
FORMAT(Keyword971_R9.0) 
{
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    //
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    //
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);
    //
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    //
    if(IO_FLAG == 1)
    {
        HEADER("*MAT_260B%10s",OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == ""  || OPT_TYPE_STR != "_TITLE" || OPT_TYPE_STR != "_XUE"  || OPT_TYPE_STR != "_XUE_TITLE"))
    {
         HEADER("*MAT_MOHR_NON_ASSOCIATED_FLOW%10s", OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "_XUE" || OPT_TYPE_STR == "_XUE_TITLE"))
    {
        ASSIGN(LSD_260A_XUE, 1);
    }
    if(IO_FLAG == 2 && LSD_260A_XUE == 0 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_MOHR_NON_ASSOCIATED_FLOW");
    }   
    else if(IO_FLAG == 2 && LSD_260A_XUE == 0 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_MOHR_NON_ASSOCIATED_FLOW_TITLE");
        CARD("%-80s", TITLE);
    }
    else if(IO_FLAG == 2 && LSD_260A_XUE == 1 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_MOHR_NON_ASSOCIATED_FLOW_XUE");
    }   
    else if(IO_FLAG == 2 && LSD_260A_XUE == 1 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_MOHR_NON_ASSOCIATED_FLOW_XUE_TITLE");
        CARD("%-80s", TITLE);
    }   


    COMMENT("$      MID       RHO         E        PR       P12       P22       P33       G12");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,MAT271_P12,MAT271_P22,MAT271_P33,LSD_G12);
    //
    COMMENT("$      G22       G33     LCIDS     LCIDV     LCIDT      LFLD     LFRAC        W0");
    CARD("%10lg%10lg%10d%10d%10d%10d%10d%10lg",LSD_G22,LSD_G33,LSD_LCID,LSD_LCID2,LSD_LCID3,LSD_LCID4,LSD_LCID5,LSD_WO);
    //
    COMMENT("$        A        B0     GAMMA         C         N     SCALE     SIZE0");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_A,LSD_BO,LSD_GAMMA1,LSD_C,LSD_MAT_N,LSD_SCALE,LSD_SIZE0);
    //
    COMMENT("$     TREF     TMELT         M       ETA        CP      TINI     DEPSO    DEPSAD");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_TREF,LSD_TMELT,LSDYNA_MAT_M,LSD_MAT_ETA,LSD_MAT_CP,LSD_TINI,LSD_DEPSO,LSD_DEPSAD);
    //
    if(LSD_260A_XUE == 1)
    {
    COMMENT("$      EFO      PLIM         Q      GAMA         M");
    CARD("%10lg%10lg%10lg%10lg%10lg",LSD_EFO,LSD_PLIM,LSD_MAT_Q,LSD_GAMMA,LSD_M);
    }
    //
    COMMENT("$     AOPT");
    if(IO_FLAG == 2)
    {
        if(axisOptFlag != 4)
        {
            CARD("%10lg%10s%10s%10s%10s%10s%10s%10s",LOC_AOPT,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_);
        }
        else
        {
            CARD("%10lg",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM));
        }
    }
    CARD_PREREAD("%10lg",LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    if(IO_FLAG == 1)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 4)
        {
            CARD("%10lg%10s%10s%10s%10s%10s%10s%10s",LOC_AOPT,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_);
        }
        else
        {
            CARD("%10lg%10s%10s%10s%10s%10s%10s%10s",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM),_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_);
            ASSIGN(axisOptFlag, 4, IMPORT);
        }
    }
    COMMENT("$       XP        YP        ZP        A1        A2        A3");
    if(axisOptFlag == 2)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg%10s%10s",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3,_BLANK_,_BLANK_);
    }
    else
    {
        BLANK;
    }
    //
    COMMENT("$       V1        V2        V3        D1        D2        D3    MANGLE");
    if(axisOptFlag == 1)
    {
        CARD("%10s%10s%10s%10s%10s%10s%10lg%10s",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_MAT_BETA,_BLANK_);
    }
    else if(axisOptFlag == 4)
    {
        BLANK;
    }
    else if(axisOptFlag == 3)
    {
        CARD("%10lg%10lg%10lg%10s%10s%10s%10lg%10s",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,LSD_MAT_BETA,_BLANK_);
    }
    else
    {
        BLANK;
    }
}
