//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 00
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    LSD_MAT_E1                              = VALUE(FLOAT,  "Youngs moduli");
    LSD_MAT_E2                              = VALUE(FLOAT,  "Youngs moduli");
    LSD_MAT_E3                              = VALUE(FLOAT,  "Youngs moduli");
    LSD_G12                                 = VALUE(FLOAT,  "Elastic shear moduli");
    LSD_G22                                 = VALUE(FLOAT,  "Elastic shear moduli");
    LSD_G33                                 = VALUE(FLOAT,  "Elastic shear moduli");
    LSD_PR1                                 = VALUE(FLOAT,  "Elastic Poissons ratios");
    LSD_PR2                                 = VALUE(FLOAT,  "Elastic Poissons ratios");
    LSD_PR3                                 = VALUE(FLOAT,  "Elastic Poissons ratios");
    LSDYNA_A1                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A2                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A3                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_BETA                             = VALUE(FLOAT,  "Material angle in degrees");
    LSDYNA_D1                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D2                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D3                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_V1                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V2                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V3                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_XP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSDYNA_YP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSDYNA_ZP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSD_MAT_A                               = VALUE(FLOAT,  "Stress coefficient");
    LSD_MAT_M                               = VALUE(FLOAT,  "Time exponent");
    LSD_MAT_N                               = VALUE(FLOAT,  "Stress exponent");
    LSD_MAT_USER_DEF_MACF                   = VALUE(INT,  "Material axes change flag for brick elements");
    LSD_NODE1                               = VALUE(NODE,  "Node");
    LSD_NODE3                               = VALUE(NODE,  "Node1");
    LSD_NODE4                               = VALUE(NODE,  "Node2");
    LSD_NODE5                               = VALUE(NODE,  "Node1");
    LSD_NODE6                               = VALUE(NODE,  "Node2");
    LSD_NODE7                               = VALUE(NODE,  "Node1");
    LSD_NODE8                               = VALUE(NODE,  "Node2");
    LSD_SYSTEM                              = VALUE(SYSTEM,  "AOPT");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    axisOptFlag                             = VALUE(INT,  "Material axes option");
    IO_FLAG                                 = VALUE(INT, "io flag");
    _HMCOMMENTSFLAG                         = VALUE(INT, "Write HM Comments");
    TITLE                                   = VALUE(STRING, "Title");
    LOC_AOPT                                = VALUE(FLOAT, "");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    LSDYNA_A1                               = 139;
    LSDYNA_A2                               = 140;
    LSDYNA_A3                               = 141;
    LSDYNA_BETA                             = 148;
    LSDYNA_D1                               = 145;
    LSDYNA_D2                               = 146;
    LSDYNA_D3                               = 147;
    LSDYNA_V1                               = 142;
    LSDYNA_V2                               = 143;
    LSDYNA_V3                               = 144;
    LSDYNA_XP                               = 136;
    LSDYNA_YP                               = 137;
    LSDYNA_ZP                               = 138;
    LSD_G12                                 = 8174;
    LSD_G22                                 = 8175;
    LSD_G33                                 = 8176;
    LSD_MAT_A                               = 310;
    LSD_MAT_E1                              = 1127;
    LSD_MAT_E2                              = 1129;
    LSD_MAT_E3                              = 4853;
    LSD_MAT_M                               = 314;
    LSD_MAT_N                               = 312;
    LSD_MAT_USER_DEF_MACF                   = 1296;
    LSD_NODE1                               = 86;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_NODE7                               = 5080;
    LSD_NODE8                               = 5081;
    LSD_PR1                                 = 4865;
    LSD_PR2                                 = 4840;
    LSD_PR3                                 = 4842;
    LSD_SYSTEM                              = 184;
    LSD_TitleOpt                            = 90;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    axisOptFlag                             = 4946;
    AOPT_SKEW_FLAG                          = -1;
    IO_FLAG                                 = -1;
    TITLE                                   = -1;
    LOC_AOPT                                = -1;
  // empty_string                            = -1;
}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY=SCALAR(Rho);
    E1 = SCALAR(LSD_MAT_E1);
    E2 = SCALAR(LSD_MAT_E2);
    E3 = SCALAR(LSD_MAT_E3);
    PR1 = SCALAR(LSD_PR1);
    PR2 = SCALAR(LSD_PR2);
    PR3 = SCALAR(LSD_PR3);
    YOUNG_MODULUS = MAX(E1,E2,E3);
    POISSON_RATIO = MAX(PR1,PR2,PR3);
       //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

DEFAULTS(COMMON)
{

    LSD_MAT_USER_DEF_MACF    = 1;

}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*MAT_UNIFIED_CREEP_ORTHO");
    RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
mandatory:
    SCALAR(Rho)                                 {DIMENSION="density";}
    SCALAR(LSD_MAT_E1)                          {DIMENSION="pressure";}
    SCALAR(LSD_MAT_E2)                          {DIMENSION="pressure";}
    SCALAR(LSD_MAT_E3)                          {DIMENSION="pressure";}
    SCALAR(LSD_PR1);
    SCALAR(LSD_PR2);
    SCALAR(LSD_PR3);
    SCALAR(LSD_G12)                             {DIMENSION="pressure";}
    SCALAR(LSD_G22)                             {DIMENSION="pressure";}
    SCALAR(LSD_G33)                             {DIMENSION="pressure";}
optional:
    SCALAR(LSD_MAT_A);
    SCALAR(LSD_MAT_N);
    SCALAR(LSD_MAT_M);
    RADIO(axisOptFlag)
    {
        ADD(1, "0.0: Locally orthotropic: axis given by nodes 1,2 and 4");
        ADD(2, "1.0: Locally orthotropic: a-dir given by a point and global location of element center");
        ADD(3, "2.0: Globally orthotropic: axis given by vectors");
        ADD(4, "3.0: Locally orthotropic: axis given by rotating the material axes by an angle BETA");
        ADD(5, "4.0: Locally orhtotropic: cylindrical coordinate given by vector v and point P");
        ADD(6, "Pick System");
    }
    if(axisOptFlag == 6)
    {
        DATA(LSD_SYSTEM);
    }
    RADIO(LSD_MAT_USER_DEF_MACF)
    {
        ADD(1, "1: No change");
        ADD(2, "2: switch material axes a and b");
        ADD(3, "3: switch material axes a and c");
        ADD(4, "4: switch material axes b and c.");
    }
    if(axisOptFlag == 2 || axisOptFlag == 5)
    {
        DATA(LSD_NODE1);
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],FALSE);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],FALSE);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],FALSE);
    }
    if(axisOptFlag == 3)
    {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],FALSE);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],FALSE);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],FALSE);
        DATA(LSD_NODE7);                
        DATA(LSD_NODE8);                
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],FALSE);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],FALSE);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],FALSE);
        SCALAR(LSDYNA_BETA);
    }
    if(axisOptFlag == 4 || axisOptFlag == 5)
    {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],FALSE);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],FALSE);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],FALSE);
    }

}

// File format
FORMAT(Keyword971_R9.0) 
{
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    if(LSD_NODE7 != NONE && LSD_NODE8 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    //
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    //
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);
    //
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 5 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,4.0,EXPORT);
    }
    //
    COMMENT("$      MID       RHO        E1        E2        E3      PR21      PR31      PR32");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSD_MAT_E1,LSD_MAT_E2,LSD_MAT_E3,LSD_PR1,LSD_PR2,LSD_PR3);
    //
    COMMENT("$      GAB       GBC       GCA         A         N         M");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_G12,LSD_G22,LSD_G33,LSD_MAT_A,LSD_MAT_N,LSD_MAT_M);
    //
    COMMENT("$     AOPT      MACF        XP        YP        ZP        A1        A2        A3");
    if(IO_FLAG == 2)
    {
        if(axisOptFlag == 2 || axisOptFlag == 5)
        {
            CARD("%10lg%10d%10lg%10lg%10lg",LOC_AOPT,LSD_MAT_USER_DEF_MACF,LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP);
        }
        else if(axisOptFlag == 3)
        {
            CARD("%10lg%10d%10s%10s%10s%10lg%10lg%10lg",LOC_AOPT,LSD_MAT_USER_DEF_MACF,_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
        }
        else if(axisOptFlag != 6)
        {
            CARD("%10lg%10d%10s%10s%10s%10s%10s%10s",LOC_AOPT,LSD_MAT_USER_DEF_MACF,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_);
        }
        else
        {
            CARD("%10lg%10d%10s%10s%10s%10s%10s%10s",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM),LSD_MAT_USER_DEF_MACF,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_);
        }
    }
    CARD_PREREAD("%10lg",LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,4,IMPORT);
    }
    else if(LOC_AOPT == 4.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,5,IMPORT);
    }
    if(IO_FLAG == 1)
    {
        if(axisOptFlag == 2 || axisOptFlag == 5)
        {
            CARD("%10lg%10d%10lg%10lg%10lg",LOC_AOPT,LSD_MAT_USER_DEF_MACF,LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP);
        }
        else if(axisOptFlag == 3)
        {
            CARD("%10lg%10d%10s%10s%10s%10lg%10lg%10lg",LOC_AOPT,LSD_MAT_USER_DEF_MACF,_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
        }
        else if(axisOptFlag > 0 && axisOptFlag < 6)
        {
            CARD("%10lg%10d%10s%10s%10s%10s%10s%10s",LOC_AOPT,LSD_MAT_USER_DEF_MACF,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_);
        }
        else
        {
            CARD("%10lg%10d%10s%10s%10s%10s%10s%10s",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM),LSD_MAT_USER_DEF_MACF,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_);
            ASSIGN(axisOptFlag, 6, IMPORT);
        }
    }
    COMMENT("$       V1        V2        V3        D1        D2        D3    MANGLE");
    if(axisOptFlag == 3  ||  axisOptFlag == 4 || axisOptFlag == 5)
    {
        if(axisOptFlag == 3)
        {
            CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
        }
        else if(axisOptFlag == 4)
        {
            CARD("%10lg%10lg%10lg%10s%10s%10s%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,LSDYNA_BETA);
        }
        else
        {
            CARD("%10lg%10lg%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3);
        }
    }
    else
    {
        BLANK;
    }
    //
}
