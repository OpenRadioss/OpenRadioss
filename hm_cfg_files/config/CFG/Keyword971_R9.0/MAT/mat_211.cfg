//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//Material law 211 
//

ATTRIBUTES(COMMON)
{
    KEYWORD_STR         = VALUE(STRING, "Solver Keyword");
    LSD_TitleOpt        = VALUE(INT, "Title");
    CommentEnumField    = VALUE(INT, "User Comments");
    Num_Comments        = SIZE("No. of comment lines");
    Comments            = ARRAY[Num_Comments](STRING, "Entity Comments");
    
    Rho                 = VALUE(FLOAT, "Mass density");
    E                   = VALUE(FLOAT,"Young's Modulus");
    Nu                  = VALUE(FLOAT,"Poisson's ratio");
    LSD_HELAS           = VALUE(FLOAT ,"SPR head end behaviour flag");
    LSD_TELAS           = VALUE(FLOAT ,"SPR tail end behaviour flag");
    
    LSD_LCID2           = VALUE(FUNCT ,"Local curve ID giving axial force versus deformation");
    LSD_LCID3           = VALUE(FUNCT ,"Local curve ID giving shear force versus deformation");
    LSD_LCID4           = VALUE(FUNCT ,"Local curve ID giving moment versus rotation");
    LSD_SFAXH           = VALUE(FLOAT,"Scale factor on axial force from curve");
    LSD_SFSHH           = VALUE(FLOAT,"Scale factor on shear force from curve");
    LSD_SFBMH           = VALUE(FLOAT,"Scale factor on bending moment from curve");
    
    LSD_DFAXH           = VALUE(FLOAT,"Optional displacement to start off softening in axial load");
    LSD_DFSHH           = VALUE(FLOAT,"Optional displacement to start off softening in shear load");
    LSD_RFBMH           = VALUE(FLOAT,"Optional rotation to start of bending moment softening");
    LSD_DMFAXH          = VALUE(FLOAT,"Scale factor");
    LSD_DMFSHH          = VALUE(FLOAT,"Scale factor");
    LSD_DMFBMH          = VALUE(FLOAT,"Scale factor");
    
    LSD_LCID5           = VALUE(FUNCT,"Local curve ID giving axial force versus deformation(tail)");
    LSD_LCID6           = VALUE(FUNCT,"Local curve ID giving shear force versus deformation(tail)");
    LSD_LCID7           = VALUE(FUNCT,"Local curve ID giving moment versus rotation(tail)");
    LSD_SFAXT           = VALUE(FLOAT,"Scale factor on axial force from curve");
    LSD_SFSHT           = VALUE(FLOAT,"Scale factor on shear force from curve");
    LSD_SFBMT           = VALUE(FLOAT,"Scale factor on bending moment from curve");
    
    LSD_DFAXT           = VALUE(FLOAT,"Optional displacement to start off softening in axial load(tail)");
    LSD_DFSHT           = VALUE(FLOAT,"Optional displacement to start off softening in shear load(tail)");
    LSD_RFBMT           = VALUE(FLOAT,"Optional rotation to start of bending moment softening(tail)");
    LSD_DFMAXT          = VALUE(FLOAT,"Scale factor");
    LSD_DMFSHT          = VALUE(FLOAT,"Scale factor");
    LSD_DMFBMT          = VALUE(FLOAT,"Scale factor");

}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR         = 9000;
    CommentEnumField    = 3220;
    Num_Comments        = 3101;
    LSD_TitleOpt        = 90;
    Comments            = 3100;

    Rho                 = 118;
    Nu                  = 120;
    E                   = 119;
    LSD_HELAS           = 11076;
    LSD_TELAS           = 11077;
    
    LSD_LCID2           = 168;
    LSD_LCID3           = 170;
    LSD_LCID4           = 171;
    LSD_SFAXH           = 11057;
    LSD_SFSHH           = 11058;
    LSD_SFBMH           = 11059;
    
    LSD_DFAXH           = 11060;
    LSD_DFSHH           = 11061;
    LSD_RFBMH           = 11062;
    LSD_DMFAXH          = 11063;
    LSD_DMFSHH          = 11064;
    LSD_DMFBMH          = 11065;
    
    LSD_LCID5           = 172;
    LSD_LCID6           = 199;
    LSD_LCID7           = 200;
    LSD_SFAXT           = 11066;
    LSD_SFSHT           = 11067;
    LSD_SFBMT           = 11068;
    
    LSD_DFAXT           = 11069;
    LSD_DFSHT           = 11070;
    LSD_RFBMT           = 11071;
    LSD_DFMAXT          = 11072;    
    LSD_DMFSHT          = 11073;
    LSD_DMFBMT          = 11074;

}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY=SCALAR(Rho);
    YOUNG_MODULUS = SCALAR(E);
    POISSON_RATIO = SCALAR(Nu);
           //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON){
    ASSIGN(KEYWORD_STR, "*MAT_SPR_JLR");
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
            SCALAR(Comments);
        }
    }     
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    }
  mandatory:
    SCALAR(Rho){DIMENSION="density";}
  optional:
    SCALAR(Nu){DIMENSION="DIMENSIONLESS";}
    SCALAR(E){DIMENSION="pressure";}
    RADIO(LSD_HELAS)
    {
        ADD(0.0,"0.0: Nonlinear");
        ADD(1.0,"1.0: Elastic");
    }
    RADIO(LSD_TELAS)
    {
        ADD(0.0,"0.0: Nonlinear");
        ADD(1.0,"1.0: Elastic");
    }
    SCALAR(LSD_SFAXH)   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_SFSHH)   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_SFBMH)   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_DFAXH)   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_DFSHH)   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_RFBMH)   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_DMFAXH)  {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_DMFSHH)  {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_DMFBMH)  {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_SFAXT)   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_SFSHT)   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_SFBMT)   {DIMENSION="DIMENSIONLESS";}    
    SCALAR(LSD_DFAXT)   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_DFSHT)   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_RFBMT)   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_DFMAXT)  {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_DMFSHT)  {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_DMFBMT)  {DIMENSION="DIMENSIONLESS";}
    
    DATA(LSD_LCID2);
    DATA(LSD_LCID3);
    DATA(LSD_LCID4);
    DATA(LSD_LCID5);
    DATA(LSD_LCID6);
    DATA(LSD_LCID7);

}

FORMAT(Keyword971_R9.3)
{
    COMMENT("$      MID        RO         E        PR     HELAS     TELAS");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,LSD_HELAS,LSD_TELAS);

    COMMENT("$    LCAXH     LCSHH     LCBMH     SFAXH     SFSHH     SFBMH");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_LCID2,LSD_LCID3,LSD_LCID4,LSD_SFAXH,LSD_SFSHH,LSD_SFBMH);

    COMMENT("$    DFAKH     DFSHH     RFBMH    DMFAXH    DMFSHH    DMFBMH");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_DFAXH,LSD_DFSHH, LSD_RFBMH, LSD_DMFAXH, LSD_DMFSHH,LSD_DMFBMH);
    
    COMMENT("$    LCAXT     LCSHT     LCBMT     SFAXT     SFSHT     SBFMT");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_LCID5,LSD_LCID6,LSD_LCID7,LSD_SFAXT,LSD_SFSHT,LSD_SFBMT);
    
    COMMENT("$    DFAXT     DFSHT     RFBMT    DFMAXT    DMFSHT    DMFBMT");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_DFAXT,LSD_DFSHT,LSD_RFBMT,LSD_DFMAXT,LSD_DMFSHT,LSD_DMFBMT);
}
