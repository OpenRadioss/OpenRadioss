//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 260A
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    EncTypeEnumField                        = VALUE(INT,  "Type");
    RegTypeEnumField                        = VALUE(INT,  "Type");
    OPT_TYPE_STR                            = VALUE(STRING, "OPT");
    E                                       = VALUE(FLOAT,  "Young's Modulus");
    LSDYNA_A1                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A2                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A3                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_D1                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D2                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D3                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_V1                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V2                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V3                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_XP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSDYNA_YP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSDYNA_ZP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSD_260A_XUE                            = VALUE(INT,  "XUEoption");
    LSD_EFO                                 = VALUE(FLOAT,  "material parameters");
    LSD_GAMMA                               = VALUE(FLOAT,  "material parameters");
    LSD_LCID                                = VALUE(FUNCT,  "stress vs. strain hardening behavior");
    LSD_LCID2                               = VALUE(FUNCT,  "stress scale factors vs. strain rates");
    LSD_M                                   = VALUE(FLOAT,  "material parameters");
    LSD_MAT_BETA                            = VALUE(FLOAT,  "material angle");
    LSD_MAT_Q                               = VALUE(FLOAT,  "material parameters");
    LSD_MAT_R00                             = VALUE(FLOAT,  "Lankford parameters in rolling");
    LSD_MAT_R45                             = VALUE(FLOAT,  "Lankford parameters in diagonal");
    LSD_MAT_R90                             = VALUE(FLOAT,  "Lankford parameters in transverse");
    LSD_MAT_SIG00                           = VALUE(FLOAT,  "yield stresses from uniaxial tension tests in rolling");
    LSD_MAT_SIG45                           = VALUE(FLOAT,  "yield stresses from uniaxial tension tests in diagonal");
    LSD_MAT_SIG90                           = VALUE(FLOAT,  "yield stresses from uniaxial tension tests in transverse");
    LSD_NODE1                               = VALUE(NODE,  "Node1");
    LSD_NODE3                               = VALUE(NODE,  "Node1");
    LSD_NODE4                               = VALUE(NODE,  "Node2");
    LSD_NODE5                               = VALUE(NODE,  "Node1");
    LSD_NODE6                               = VALUE(NODE,  "Node2");
    LSD_NODE7                               = VALUE(NODE,  "Node1");
    LSD_NODE8                               = VALUE(NODE,  "Node2");
    LSD_PLIM                                = VALUE(FLOAT,  "material parameters");
    LSD_SCALE                               = VALUE(FLOAT,  "used to speed up the simulation");
    LSD_SIG_B                               = VALUE(FLOAT,  "yield stresses from equi-biaxial stretching test");
    LSD_SYSTEM                              = VALUE(SYSTEM,  "coordinate system ID number");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    Nu                                      = VALUE(FLOAT,  "Poisson's ratio");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    axisOptFlag                             = VALUE(INT,  "Anisotropy axis definition");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    IO_FLAG                                 = VALUE(INT, "io flag");
    _HMCOMMENTSFLAG                         = VALUE(INT, "Write HM Comments");
    TITLE                                   = VALUE(STRING, "Title");
    LOC_AOPT                                = VALUE(FLOAT, "");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
    _HAS_HEADER                             = VALUE(BOOL,"Has Header Card");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    EncTypeEnumField                        = 5828;
    RegTypeEnumField                        = 5827;
    E                                       = 119;
    LSDYNA_A1                               = 139;
    LSDYNA_A2                               = 140;
    LSDYNA_A3                               = 141;
    LSDYNA_D1                               = 145;
    LSDYNA_D2                               = 146;
    LSDYNA_D3                               = 147;
    LSDYNA_V1                               = 142;
    LSDYNA_V2                               = 143;
    LSDYNA_V3                               = 144;
    LSDYNA_XP                               = 136;
    LSDYNA_YP                               = 137;
    LSDYNA_ZP                               = 138;
    LSD_260A_XUE                            = 8170;
    LSD_EFO                                 = 8171;
    LSD_GAMMA                               = 4336;
    LSD_LCID                                = 45;
    LSD_LCID2                               = 168;
    LSD_M                                   = 1570;
    LSD_MAT_BETA                            = 306;
    LSD_MAT_Q                               = 6071;
    LSD_MAT_R00                             = 4932;
    LSD_MAT_R45                             = 4933;
    LSD_MAT_R90                             = 4934;
    LSD_MAT_SIG00                           = 4929;
    LSD_MAT_SIG45                           = 4930;
    LSD_MAT_SIG90                           = 4931;
    LSD_NODE1                               = 86;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_NODE7                               = 5080;
    LSD_NODE8                               = 5081;
    LSD_PLIM                                = 8172;
    LSD_SCALE                               = 5017;
    LSD_SIG_B                               = 8169;
    LSD_SYSTEM                              = 184;
    LSD_TitleOpt                            = 90;
    Nu                                      = 120;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    axisOptFlag                             = 4946;
    AOPT_SKEW_FLAG                          = -1;
    IO_FLAG                                 = -1;
    OPT_TYPE_STR                            = -1;
    TITLE                                   = -1;
    LOC_AOPT                                = -1;
    //empty_string                       = -1;
    _HAS_HEADER                             = -1;
}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY=SCALAR(Rho);
    YOUNG_MODULUS = SCALAR(E);
    POISSON_RATIO = SCALAR(Nu);
                   //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

DEFAULTS(COMMON)
{
    _HAS_HEADER     = TRUE;
    LSD_SCALE       = 1.0;
}

CHECK(COMMON)
{
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*MAT_STOUGHTON_NON_ASSOCIATED_FLOW");
    RADIO(CommentEnumField)
    {
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    }
    if( CommentEnumField == 2)
    {
       SIZE(Num_Comments);
       ARRAY(Num_Comments,"")
       {
          SCALAR(Comments);
       }
    }

    FLAG( LSD_260A_XUE);
    if(LSD_260A_XUE == 1)
    {
        ASSIGN(KEYWORD_STR,"_XUE");
    }

    FLAG( LSD_TitleOpt);
    if(LSD_TitleOpt == 1)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    }
mandatory:
    SCALAR(Rho)                                     {DIMENSION="density";}
    SCALAR(E)                                       {DIMENSION="pressure";}
    SCALAR(Nu)                                      {DIMENSION="DIMENSIONLESS";}
optional:
    SCALAR(LSD_MAT_R00)                             {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_R45)                             {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_R90)                             {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_SIG00)                           {DIMENSION="pressure";}
    SCALAR(LSD_MAT_SIG45)                           {DIMENSION="pressure";}
    SCALAR(LSD_MAT_SIG90)                           {DIMENSION="pressure";}
    SCALAR(LSD_SIG_B)                               {DIMENSION="pressure";}
     DATA(LSD_LCID);
     DATA(LSD_LCID2);
    SCALAR(LSD_SCALE)                               {DIMENSION="DIMENSIONLESS";}
    if( LSD_260A_XUE == 1)
    {
       SCALAR(LSD_EFO)                              {DIMENSION="DIMENSIONLESS";}
       SCALAR(LSD_PLIM)                             {DIMENSION="DIMENSIONLESS";}
       SCALAR(LSD_MAT_Q)                            {DIMENSION="DIMENSIONLESS";}
       SCALAR(LSD_GAMMA)                            {DIMENSION="DIMENSIONLESS";}
       SCALAR(LSD_M)                                {DIMENSION="DIMENSIONLESS";}
    }
    
    RADIO(axisOptFlag)
    {
        ADD(1, "0.0: Locally orthotropic: axis given by nodes 1,2 and 4");
        ADD(2, "1.0: Locally orthotropic: a-dir given by a point and global location of element centre");
        ADD(3, "2.0: Globally orthotropic: axis given by vectors");
        ADD(4, "3.0: Locally orthotropic: axis given by rotating the material axes by an angle BETA");
        ADD(5, "By System");
    }
    if(axisOptFlag == 5)
    {
        DATA(LSD_SYSTEM);
    }
    if(axisOptFlag == 2)
    {
        DATA(LSD_NODE1);
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],FALSE);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],FALSE);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],FALSE);
    }
    if(axisOptFlag == 3)
    {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],FALSE);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],FALSE);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],FALSE);
        DATA(LSD_NODE7);                
        DATA(LSD_NODE8);                
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],FALSE);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],FALSE);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],FALSE);
    }
    if(axisOptFlag == 4)
    {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],FALSE);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],FALSE);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],FALSE);
    }     
    if(axisOptFlag == 4 || axisOptFlag == 1)
    {
        SCALAR(LSD_MAT_BETA)        {DIMENSION="DIMENSIONLESS";}
    }

}

// File format
FORMAT(Keyword971_R9.0) 
{
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    if(LSD_NODE7 != NONE && LSD_NODE8 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    //
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    //
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);
    //
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }

    if(IO_FLAG == 1)
    {
        HEADER("*MAT_260A%10s",OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == ""  || OPT_TYPE_STR != "_TITLE" || OPT_TYPE_STR != "_XUE"  || OPT_TYPE_STR != "_XUE_TITLE"))
    {
         HEADER("*MAT_STOUGHTON_NON_ASSOCIATED_FLOW%10s", OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "_XUE" || OPT_TYPE_STR == "_XUE_TITLE"))
    {
        ASSIGN(LSD_260A_XUE, 1);
    }
    if(IO_FLAG == 2 && LSD_260A_XUE == 0 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_STOUGHTON_NON_ASSOCIATED_FLOW");
    }   
    else if(IO_FLAG == 2 && LSD_260A_XUE == 0 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_STOUGHTON_NON_ASSOCIATED_FLOW_TITLE");
        CARD("%-80s", TITLE);
    }
    else if(IO_FLAG == 2 && LSD_260A_XUE == 1 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_STOUGHTON_NON_ASSOCIATED_FLOW_XUE");
    }   
    else if(IO_FLAG == 2 && LSD_260A_XUE == 1 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_STOUGHTON_NON_ASSOCIATED_FLOW_XUE_TITLE");
        CARD("%-80s", TITLE);
    }
    
    COMMENT("$      MID       RHO         E        PR       R00       R45       R90     SIG00");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,LSD_MAT_R00,LSD_MAT_R45,LSD_MAT_R90,LSD_MAT_SIG00);
    //
    COMMENT("$    SIG45     SIG90     SIG_B     LCIDS     LCIDV     SCALE");
    CARD("%10lg%10lg%10lg%10d%10d%10lg",LSD_MAT_SIG45,LSD_MAT_SIG90,LSD_SIG_B,LSD_LCID,LSD_LCID2,LSD_SCALE);

    if(LSD_260A_XUE == 1)
    {
    //
    COMMENT("$      EFO      PLIM         Q     GAMMA         M");
    CARD("%10lg%10lg%10lg%10lg%10lg",LSD_EFO,LSD_PLIM,LSD_MAT_Q,LSD_GAMMA,LSD_M);
    }
    //
    COMMENT("$     AOPT");
    if(IO_FLAG == 2)
    {
        if(axisOptFlag != 5)
        {
            CARD("%10lg%10s%10s%10s%10s%10s%10s%10s",LOC_AOPT,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_);
        }
        else
        {
            CARD("%10lg",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM));
        }
    }
    CARD_PREREAD("%10lg",LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,4,IMPORT);
    }
    if(IO_FLAG == 1)
    {
        
        if(axisOptFlag >= 1 && axisOptFlag < 5)
        {
            CARD("%10lg%10s%10s%10s%10s%10s%10s%10s",LOC_AOPT,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_);
        }
        else
        {
            CARD("%10lg%10s%10s%10s%10s%10s%10s%10s",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM),_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_);
            ASSIGN(axisOptFlag, 5, IMPORT);
        }
    }
    COMMENT("$       XP        YP        ZP        A1        A2        A3");
    if(axisOptFlag == 2 || axisOptFlag == 3)
    {
        if(axisOptFlag == 3)
        {
            CARD("%10s%10s%10s%10lg%10lg%10lg%10s%10s",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3,_BLANK_,_BLANK_);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10s%10s%10s%10s%10s",LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_);
        }
    }
    else
    {
        BLANK;
    }
    //
    COMMENT("$       V1        V2        V3        D1        D2        D3      BETA");
    if(axisOptFlag == 1)
    {
        CARD("%10s%10s%10s%10s%10s%10s%10lg%10s",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_MAT_BETA,_BLANK_);
    }
    else if(axisOptFlag == 3  ||  axisOptFlag == 4)
    {
        if(axisOptFlag == 3)
        {
            CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10s%10s%10s%10lg%10s",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,LSD_MAT_BETA,_BLANK_);
        }
    }
    else
    {
        BLANK;
    }

}
