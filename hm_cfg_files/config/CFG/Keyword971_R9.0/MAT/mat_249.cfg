//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 249
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    E                                       = VALUE(FLOAT,  "Youngs modulus");
    LSDYNA_A1                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A2                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A3                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_D1                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D2                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D3                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_V1                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V2                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V3                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_XP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSDYNA_YP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSDYNA_ZP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSD_ALOC12                              = VALUE(FLOAT,  "Locking angle");
    LSD_ALOC23                              = VALUE(FLOAT,  "Locking angle");
    LSD_ALPH1                               = VALUE(FLOAT,  "Orientation angle");
    LSD_ALPH2                               = VALUE(FLOAT,  "Orientation angle");
    LSD_ALPH3                               = VALUE(FLOAT,  "Orientation angle");
    LSD_EF1                                 = VALUE(FLOAT,  "Youngs modulus");
    LSD_EF2                                 = VALUE(FLOAT,  "Youngs modulus");
    LSD_EF3                                 = VALUE(FLOAT,  "Youngs modulus");
    LSD_G12                                 = VALUE(FLOAT,  "Linear shear modulus");
    LSD_G23                                 = VALUE(FLOAT,  "Linear shear modulus");
    LSD_G23_1                               = VALUE(FLOAT,  "Transversal shear modulus");
    LSD_G23_2                               = VALUE(FLOAT,  "Transversal shear modulus");
    LSD_G23_3                               = VALUE(FLOAT,  "Transversal shear modulus");
    LSD_G31_1                               = VALUE(FLOAT,  "Transversal shear modulus");
    LSD_G31_2                               = VALUE(FLOAT,  "Transversal shear modulus");
    LSD_G31_3                               = VALUE(FLOAT,  "Transversal shear modulus");
    LSD_GLOC12                              = VALUE(FLOAT,  "Linear shear modulus");
    LSD_GLOC23                              = VALUE(FLOAT,  "Linear shear modulus");
    LSD_IDF1                                = VALUE(INT,  "ID fiber family");
    LSD_IDF2                                = VALUE(INT,  "ID fiber family");
    LSD_IDF3                                = VALUE(INT,  "ID fiber family");
    LSD_LCID                                = VALUE(FUNCT,  "stress versus fiber elongation");
    LSD_LCID10                              = VALUE(FUNCT,  "shear stress versus shearing");
    LSD_LCID2                               = VALUE(FUNCT,  "stress versus fiber elongation");
    LSD_LCID3                               = VALUE(FUNCT,  "shear stress versus shearing");
    LSD_LCID4                               = VALUE(FUNCT,  "Youngs modulus vs temperature");
    LSD_LCID5                               = VALUE(FUNCT,  "Poissons ratio vs temperature");
    LSD_LCID6                               = VALUE(FUNCT,  "yield stress vs plastic strain");
    LSD_LCID7                               = VALUE(FUNCT,  "stress versus fiber elongation");
    LSD_MANGLE                              = VALUE(FLOAT,  "Material angle");
    LSD_MAT_BETA                            = VALUE(FLOAT,  "mixed hardening parameter");
    LSD_METH12                              = VALUE(INT,  "Option for shear");
    LSD_METH23                              = VALUE(INT,  "Option for shear");
    LSD_NFIB                                = VALUE(INT,  "no. of fiber families");
    LSD_NODE1                               = VALUE(NODE,  "Node");
    LSD_NODE3                               = VALUE(NODE,  "Node1");
    LSD_NODE4                               = VALUE(NODE,  "Node2");
    LSD_NODE5                               = VALUE(NODE,  "Node1");
    LSD_NODE6                               = VALUE(NODE,  "Node2");
    LSD_NODE7                               = VALUE(NODE,  "Node1");
    LSD_NODE8                               = VALUE(NODE,  "Node2");
    LSD_SYSTEM                              = VALUE(SYSTEM,  "coordinate system ID number");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    Nu                                      = VALUE(FLOAT,  "Poissons ratio");
    Rho                                     = VALUE(FLOAT,  "Density");
    axisOptFlag                             = VALUE(INT,  "Anisotropy axis definition");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    IO_FLAG                                 = VALUE(INT, "io flag");
    _HMCOMMENTSFLAG                         = VALUE(INT, "Write HM Comments");
    TITLE                                   = VALUE(STRING, "Title");
    EncTypeEnumField                        = VALUE(INT,  "Type");
    RegTypeEnumField                        = VALUE(INT,  "Type");
    LOC_AOPT                                = VALUE(FLOAT, "");
    LOC_A1                                  = VALUE(FLOAT, "");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    E                                       = 119;
    LSDYNA_A1                               = 139;
    LSDYNA_A2                               = 140;
    LSDYNA_A3                               = 141;
    LSDYNA_D1                               = 145;
    LSDYNA_D2                               = 146;
    LSDYNA_D3                               = 147;
    LSDYNA_V1                               = 142;
    LSDYNA_V2                               = 143;
    LSDYNA_V3                               = 144;
    LSDYNA_XP                               = 136;
    LSDYNA_YP                               = 137;
    LSDYNA_ZP                               = 138;
    LSD_ALOC12                              = 8566;
    LSD_ALOC23                              = 8575;
    LSD_ALPH1                               = 8569;
    LSD_ALPH2                               = 8578;
    LSD_ALPH3                               = 8565;
    LSD_EF1                                 = 8562;
    LSD_EF2                                 = 8571;
    LSD_EF3                                 = 8580;
    LSD_G12                                 = 8174;
    LSD_G23                                 = 8574;
    LSD_G23_1                               = 8563;
    LSD_G23_2                               = 8572;
    LSD_G23_3                               = 8581;
    LSD_G31_1                               = 8564;
    LSD_G31_2                               = 8573;
    LSD_G31_3                               = 8582;
    LSD_GLOC12                              = 8567;
    LSD_GLOC23                              = 8576;
    LSD_IDF1                                = 8561;
    LSD_IDF2                                = 8570;
    LSD_IDF3                                = 8579;
    LSD_LCID                                = 45;
    LSD_LCID10                              = 1142;
    LSD_LCID2                               = 168;
    LSD_LCID3                               = 170;
    LSD_LCID4                               = 171;
    LSD_LCID5                               = 172;
    LSD_LCID6                               = 199;
    LSD_LCID7                               = 200;
    LSD_MANGLE                              = 4716;
    LSD_MAT_BETA                            = 306;
    LSD_METH12                              = 8568;
    LSD_METH23                              = 8577;
    LSD_NFIB                                = 8584;
    LSD_NODE1                               = 86;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_NODE7                               = 5080;
    LSD_NODE8                               = 5081;
    LSD_SYSTEM                              = 184;
    LSD_TitleOpt                            = 90;
    Nu                                      = 120;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    axisOptFlag                             = 4946;
    AOPT_SKEW_FLAG                          = -1;
    IO_FLAG                                 = -1;
    EncTypeEnumField                        = 5828;
    RegTypeEnumField                        = 5827;
    TITLE                                   = -1;
    LOC_AOPT                                = -1;
    LOC_A1                                  = -1;
    //empty_string                          = -1;
}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY=SCALAR(Rho);
    YOUNG_MODULUS = SCALAR(E);
    POISSON_RATIO = SCALAR(Nu);
           //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

CHECK(COMMON)
{

    LSD_MAT_BETA                              >=0.0;
    LSD_MAT_BETA                              <=1.0;
}

DEFAULTS(COMMON)
{
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*MAT_REINFORCED_THERMOPLASTIC");
    RADIO(CommentEnumField)
    {
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
    {
        SCALAR(Comments);
    }
    }     
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    }
mandatory:
    SCALAR(Rho)                             {DIMENSION="density";} 
    SCALAR(E)                               {DIMENSION="pressure";}
optional:
    DATA(LSD_LCID4);
mandatory:
    SCALAR(Nu);
optional:
    DATA(LSD_LCID5);
    DATA(LSD_LCID6);
    SCALAR(LSD_MAT_BETA);
    SCALAR(LSD_NFIB);
    RADIO(axisOptFlag)
    {
       ADD(1, "0.0: locally orthotropic with material axes determined by nodes 1,2 and 4");
       ADD(2, "1.0: A-direction given by a point and global location of element centre");
       ADD(3, "2.0: Axis given by vectors");
       ADD(4, "3.0: Ais given by rotating the material axes by an angle BETA");
       ADD(5, "By system");
    }
    if( axisOptFlag == 1)
    {
       SCALAR(LSD_MANGLE);
    }
    if(axisOptFlag == 2)
     {
        DATA(LSD_NODE1);
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],FALSE);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],FALSE);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],FALSE);
        //SCALAR(LSDYNA_XP)               {DIMENSION="l";}
        //SCALAR(LSDYNA_YP)               {DIMENSION="l";}
        //SCALAR(LSDYNA_ZP)               {DIMENSION="l";}
     }
    if(axisOptFlag == 3)
     {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],FALSE);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],FALSE);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],FALSE);
        //SCALAR(LSDYNA_A1)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_A2)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_A3)               {DIMENSION="DIMENSIONLESS";}
        DATA(LSD_NODE7);                
        DATA(LSD_NODE8);                
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],FALSE);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],FALSE);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],FALSE);
        //SCALAR(LSDYNA_D1)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_D2)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_D3)               {DIMENSION="DIMENSIONLESS";}
     }
    if( axisOptFlag == 4)
    {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],FALSE);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],FALSE);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],FALSE);
        //SCALAR(LSDYNA_V1)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_V2)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_V3)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MANGLE);
    }
    if( axisOptFlag == 5)
    {
       DATA(LSD_SYSTEM);
    }
    SCALAR(LSD_IDF1);
    SCALAR(LSD_ALPH1);
    SCALAR(LSD_EF1)                     {DIMENSION="pressure";}
    DATA(LSD_LCID);
    SCALAR(LSD_G23_1)                   {DIMENSION="pressure";}
    SCALAR(LSD_G31_1)                   {DIMENSION="pressure";}
    SCALAR(LSD_G12)                     {DIMENSION="pressure";}
     DATA(LSD_LCID10);
    SCALAR(LSD_ALOC12);
    SCALAR(LSD_GLOC12)                  {DIMENSION="pressure";}
    RADIO(LSD_METH12)
    {
       ADD(0, "0: Elastic shear response, curve LCGij defines shear stress as a function of scalar product of fibers directions. ALOCij and GLOCij are ignored");
       ADD(1, "1: Elasto-plastic shear response, curve LCGij defines shear stress as a function of the scalar product of fiber directions");
       ADD(2, "2: Elastic shear response, curve LCGij defines shear stress as a function of shear angle between fiber given in radians. ALOCij and GLOCij are ignored");
       ADD(3, "3: Elasto-plastic shear response, curve LCGij defines shear stress vs. shear angle between fibers given in radians");
       ADD(4, "4: Elastic shear response, curve LCGij defines shear stress vs. shear angle between fiber given in radians.");
       ADD(5, "5: Elasto-plastic shear response, curve LCGij defines shear stress vs. shear angle between fibers given in radians");
    }
    SCALAR(LSD_IDF2);
    SCALAR(LSD_ALPH2);
    SCALAR(LSD_EF2)                     {DIMENSION="pressure";}
     DATA(LSD_LCID2);
    SCALAR(LSD_G23_2)                   {DIMENSION="pressure";}
    SCALAR(LSD_G31_2)                   {DIMENSION="pressure";}
    SCALAR(LSD_G23)                      {DIMENSION="pressure";}
     DATA(LSD_LCID3);
    SCALAR(LSD_ALOC23);
    SCALAR(LSD_GLOC23)                  {DIMENSION="pressure";}
    RADIO(LSD_METH23)
    {
       ADD(0, "0: Elastic shear response, curve LCGij defines shear stress as a function of scalar product of fibers directions. ALOCij and GLOCij are ignored");
       ADD(1, "1: Elasto-plastic shear response, curve LCGij defines shear stress as a function of the scalar product of fiber directions");
       ADD(2, "2: Elastic shear response, curve LCGij defines shear stress as a function of shear angle between fiber given in radians. ALOCij and GLOCij are ignored");
       ADD(3, "3: Elasto-plastic shear response, curve LCGij defines shear stress vs. shear angle between fibers given in radians");
       ADD(4, "4: Elastic shear response, curve LCGij defines shear stress vs. shear angle between fiber given in radians.");
       ADD(5, "5: Elasto-plastic shear response, curve LCGij defines shear stress vs. shear angle between fibers given in radians");
    }
    SCALAR(LSD_IDF3);
    SCALAR(LSD_ALPH3);
    SCALAR(LSD_EF3)                     {DIMENSION="pressure";}
     DATA(LSD_LCID7);
    SCALAR(LSD_G23_3)                   {DIMENSION="pressure";}
    SCALAR(LSD_G31_3)                   {DIMENSION="pressure";}

}

// File format
FORMAT(Keyword971_R9.0) 
{
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    if(LSD_NODE8 != NONE && LSD_NODE7 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    //
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);
    //
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    //
    COMMENT("$      MID        RO        EM      LCEM        PR      LCPR    LCSIGY      BETA");
    CARD("%10d%10lg%10lg%10d%10lg%10d%10d%10lg",_ID_,Rho,E,LSD_LCID4,Nu,LSD_LCID5,LSD_LCID6,LSD_MAT_BETA);
    //
    COMMENT("$     NFIB      AOPT        XP        YP        ZP        A1        A2        A3");
    if(IO_FLAG == 2)
    {
        if(axisOptFlag == 1 || axisOptFlag == 4)
        {
            CARD("%10d%10lg",LSD_NFIB,LOC_AOPT);
        }
        else if(axisOptFlag == 2)
        {
            CARD("%10d%10lg%10lg%10lg%10lg",LSD_NFIB,LOC_AOPT,LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP);
        }
        else if(axisOptFlag == 3)
        {
            CARD("%10d%10lg%10s%10s%10s%10lg%10lg%10lg",LSD_NFIB,LOC_AOPT,_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
        }
        else if(axisOptFlag == 5)
        {
            CARD("%10d%10lg",LSD_NFIB,SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM));
        }
    }
    CARD_PREREAD("%10s%10lg",_BLANK_,LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,4,IMPORT);
    }
    if(IO_FLAG == 1)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 5)
        {
            if(axisOptFlag == 1 || axisOptFlag == 4)
            {
                CARD("%10d%10lg",LSD_NFIB,LOC_AOPT);
            }
            else if(axisOptFlag == 2)
            {
                CARD("%10d%10lg%10lg%10lg%10lg",LSD_NFIB,LOC_AOPT,LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP);
            }
            else if(axisOptFlag == 3)
            {
                CARD("%10d%10lg%10s%10s%10s%10lg%10lg%10lg",LSD_NFIB,LOC_AOPT,_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
            }
        }
        else
        {
            CARD("%10d%10lg",LSD_NFIB,SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM));
            ASSIGN(axisOptFlag,5,IMPORT);
        }
    }
    //
    COMMENT("$       V1        V2        V3        D1        D2        D3     MANGL");
    if(axisOptFlag == 1)
    {
        CARD("%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_MANGLE);
    }
    else if(axisOptFlag == 4)
    {
        CARD("%10lg%10lg%10lg%10s%10s%10s%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,LSD_MANGLE);
    }
    else if(axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
    }
    else
    {
        BLANK;
    }
    //
    COMMENT("$     IDF1     ALPH1       EF1     LCEF1     G23_1     G31_1");
    CARD("%10d%10lg%10lg%10d%10lg%10lg",LSD_IDF1,LSD_ALPH1,LSD_EF1,LSD_LCID,LSD_G23_1,LSD_G31_1);
    //
    COMMENT("$      G12     LCG12    ALOC12    GLOC12    METH12");
    CARD("%10lg%10d%10lg%10lg%10d",LSD_G12,LSD_LCID10,LSD_ALOC12,LSD_GLOC12,LSD_METH12);
    //
    COMMENT("$     IDF2     ALPH2       EF2     LCEF2     G23_2     G31_2");
    CARD("%10d%10lg%10lg%10d%10lg%10lg",LSD_IDF2,LSD_ALPH2,LSD_EF2,LSD_LCID2,LSD_G23_2,LSD_G31_2);
    //
    COMMENT("$      G23     LCG23    ALOC23    GLOC23    METH23");
    CARD("%10lg%10d%10lg%10lg%10d",LSD_G23,LSD_LCID3,LSD_ALOC23,LSD_GLOC23,LSD_METH23);
    //
    COMMENT("$     IDF3     ALPH3       EF3     LCEF3     G23_3     G31_3");
    CARD("%10d%10lg%10lg%10d%10lg%10lg",LSD_IDF3,LSD_ALPH3,LSD_EF3,LSD_LCID7,LSD_G23_3,LSD_G31_3);
    //
    
}
