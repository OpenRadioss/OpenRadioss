//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
ATTRIBUTES(COMMON) {

    //Attributes for HM usage 
    IO_FLAG                             = VALUE(INT, "Import/Export flag");
    _HMCOMMENTSFLAG                     = VALUE(INT, "Write HM Comments");
    _HWCOLOR                            = VALUE(INT, "Entity Color");
    _HAS_HEADER                         = VALUE(BOOL,"Has Header Card");
    TITLE                               = VALUE(STRING, "TITLE");
    solverkeyword                       = VALUE(STRING, "Solver Keyword");
    
    fmin                                 = VALUE(FLOAT, "Minimum frequency for SEA output");
    fmax                                 = VALUE(FLOAT, "Maximum frequency for SEA output");
    nfreq                                = VALUE(INT, "Number of frequencies for SEA output");
    nfspace                              = VALUE(INT, "Frequency spacing option for SEA output");
    lcfreq                               = VALUE(FUNCT, "Load curve ID defining the frequencies for SEA output");
    iread                                = VALUE(INT, "Type of SEA run");
    
    subid                                = VALUE(INT, "ID of subsystem");
    subtyp                               = VALUE(INT, "Type of subsystem");
    mass_density_sub                     = VALUE(FLOAT, "Mass density of subsystem");
    e                                    = VALUE(FLOAT, "Young's modulus of subsystem");
    pr                                   = VALUE(FLOAT, "Poisson's ratio of subsystem");
    output                               = VALUE(INT, "Include this subsystem in output");
    
    plate_area                           = VALUE(FLOAT, "Plate area");
    plate_perim                          = VALUE(FLOAT, "Plate perimeter");
    plate_thick                          = VALUE(FLOAT, "Plate thickness");
    plate_width                          = VALUE(FLOAT, "Plate width");
    plate_length                         = VALUE(FLOAT, "Plate length");
    plate_dampb                          = VALUE(FLOAT, "Damping factor for bending wave");
    plate_dampl                          = VALUE(FLOAT, "Damping factor for longitudinal wave");
    plate_damps                          = VALUE(FLOAT, "Damping factor for shear wave");
    plate_lc1                            = VALUE(FUNCT, "Load curve for damping factor for bending wave");
    plate_lc2                            = VALUE(FUNCT, "Load curve for damping factor for longitudinal wave");
    plate_lc3                            = VALUE(FUNCT, "Load curve for damping factor for shear wave");
    
    cavity_area                          = VALUE(FLOAT, "Cavity area");
    cavity_perim                         = VALUE(FLOAT, "Cavity perimeter");
    cavity_volume                        = VALUE(FLOAT, "Cavity volume");
    cavity_width                         = VALUE(FLOAT, "Cavity width");
    cavity_length                        = VALUE(FLOAT, "Cavity length");
    cavity_height                        = VALUE(FLOAT, "Cavity height");
    cavity_dampb                         = VALUE(FLOAT, "Damping factor for bending wave");
    cavity_lc1                           = VALUE(FUNCT, "Load curve for damping factor for bending wave");
    
    beam_area                            = VALUE(FLOAT, "Beam area");
    iss                                  = VALUE(FLOAT, "Area moment of inertia about local s-axis");
    itt                                  = VALUE(FLOAT, "Area moment of inertia about local t-axis");
    j                                    = VALUE(FLOAT, "Torsional constant");
    beam_length                          = VALUE(FLOAT, "Beam length");
    beam_dampb                           = VALUE(FLOAT, "Damping factor for bending wave");
    beam_dampl                           = VALUE(FLOAT, "Damping factor for longitudinal wave");
    beam_damps                           = VALUE(FLOAT, "Damping factor for shear wave");
    beam_dampt                           = VALUE(FLOAT, "Damping factor for torsional wave");
    beam_lc1                             = VALUE(FUNCT, "Load curve for damping factor for bending wave");
    beam_lc2                             = VALUE(FUNCT, "Load curve for dampingx factor for longitudinal wave");
    beam_lc3                             = VALUE(FUNCT, "Load curve for damping factor for shear wave");
    beam_lc4                             = VALUE(FUNCT, "Load curve for damping factor for torsional wave");
}
    
SKEYWORDS_IDENTIFIER(COMMON)
{
     IO_FLAG                            =-1;
    _HMCOMMENTSFLAG                     =-1;
    _HWCOLOR                            =-1;
    _HAS_HEADER                         = -1;
     TITLE                              =-1;
     solverkeyword                      =-1;
}

DEFAULTS(COMMON)
{
    fmax                                = 1;
    nfreq                               = 1;
    nfspace                             = 0;
    output                              = 0;
}

GUI(COMMON)
{
    ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_SEA_SUBSYSTEM);
    
    // card 1
    SCALAR(fmin) { DIMENSION = "f"; }
    SCALAR(fmax) { DIMENSION = "f"; }
    SCALAR(nfreq);
    RADIO(nfspace)
    {
        ADD(0,"0:Linear");
        ADD(1,"1:Logarithmic");
        ADD(2,"2:Biased");
    }
    FUNCTION(lcfreq) {/FILTER/curveoption/0/EQ;}
    RADIO(iread)
    {
        ADD(0,"0:Run SEA analysis");
        ADD(1,"1:Read FEM keyword input deck and create SEA model");
    }
    
    // card 2
    SCALAR(subid);
    RADIO(subtyp)
    {
        ADD(1,"1:Plate");
        ADD(2,"2:Cavity");
        ADD(3,"3:Beam");
    }
    SCALAR(mass_density_sub) { DIMENSION = "density"; }
    SCALAR(e) { DIMENSION = "pressure"; }
    SCALAR(pr);
    RADIO(output)
    {
        ADD(0,"0:No");
        ADD(1,"1:Yes");
    }
    
    if(subtyp == 1)
    {
        // card 3a.1 and 3a.2 for SUBTYP == 1
        SCALAR(plate_area) { DIMENSION = "area"; }
        SCALAR(plate_perim) { DIMENSION = "l"; }
        SCALAR(plate_thick) { DIMENSION = "l"; }
        SCALAR(plate_width) { DIMENSION = "l"; }
        SCALAR(plate_length) { DIMENSION = "l"; }

        SCALAR(plate_dampb);
        SCALAR(plate_dampl);
        SCALAR(plate_damps);
        FUNCTION(plate_lc1) {/FILTER/curveoption/0/EQ;}
        FUNCTION(plate_lc2) {/FILTER/curveoption/0/EQ;}
        FUNCTION(plate_lc3) {/FILTER/curveoption/0/EQ;}
    }
    else if(subtyp == 2)
    {
        // card 3b.1 and 3b.2 for SUBTYP == 2
        SCALAR(cavity_area) { DIMENSION = "area"; }
        SCALAR(cavity_perim) { DIMENSION = "l"; }
        SCALAR(cavity_volume) { DIMENSION = "volume"; }
        SCALAR(cavity_width) { DIMENSION = "l"; }
        SCALAR(cavity_length) { DIMENSION = "l"; }
        SCALAR(cavity_height) { DIMENSION = "l"; }
        
        SCALAR(cavity_dampb);
        FUNCTION(cavity_lc1) {/FILTER/curveoption/0/EQ;}
    }
    else if(subtyp == 3)
    {
        // card 3c.1 and 3c.2 for SUBTYP == 3
        SCALAR(beam_area) { DIMENSION = "area"; }
        SCALAR(iss);
        SCALAR(itt);
        SCALAR(j);
        SCALAR(beam_length) { DIMENSION = "l"; }
        
        SCALAR(beam_dampb);
        SCALAR(beam_dampl);
        SCALAR(beam_damps);
        SCALAR(beam_dampt);
        FUNCTION(beam_lc1) {/FILTER/curveoption/0/EQ;}
        FUNCTION(beam_lc2) {/FILTER/curveoption/0/EQ;}
        FUNCTION(beam_lc3) {/FILTER/curveoption/0/EQ;}
        FUNCTION(beam_lc4) {/FILTER/curveoption/0/EQ;}
    }
}

// File format
FORMAT(Keyword971_R12.0) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
        
    HEADER("*FREQUENCY_DOMAIN_SEA_SUBSYSTEM");
    
    // card 1
    COMMENT("$     FMIN      FMAX     NFREQ   NFSPACE    LCFREQ     IREAD");
    CARD("%10lg%10lg%10d%10lg%10d%10d",fmin,fmax,nfreq,nfspace,lcfreq,iread);
    
    // card 2
    COMMENT("$    SUBID    SUBTYP   DENSITY         E        PR    OUTPUT");
    CARD("%10d%10d%10lg%10lg%10lg%10d",subid,subtyp,mass_density_sub,e,pr,output);
    
    if(subtyp == 1)
    {
        COMMENT("$        A     PERIM     THICK     WIDTH    LENGTH");
        CARD("%10lg%10lg%10lg%10lg%10lg",plate_area,plate_perim,plate_thick,plate_width,plate_length);
        
        COMMENT("$    DAMPB     DAMPL     DAMPS       LC1       LC2       LC3");
        CARD("%10lg%10lg%10lg%10d%10d%10d",plate_dampb,plate_dampl,plate_damps,plate_lc1,plate_lc2,plate_lc3);
    }
    else if(subtyp == 2)
    {
        COMMENT("$        A     PERIM    VOLUME     WIDTH    LENGTH    HEIGHT");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg",cavity_area,cavity_perim,cavity_volume,cavity_width,cavity_length,cavity_height);
        
        COMMENT("$    DAMPB       LC1");
        CARD("%10lg%10d",cavity_dampb,cavity_lc1);
    }
    else if(subtyp == 3)
    {
        COMMENT("$        A       ISS       ITT         J    LENGTH");
        CARD("%10lg%10lg%10lg%10lg%10lg",beam_area,iss,itt,j,beam_length);
        
        COMMENT("$    DAMPB     DAMPL     DAMPS     DAMPT       LC1       LC2       LC3       LC4");
        CARD("%10lg%10lg%10lg%10lg%10d%10d%10d%10d",beam_dampb,beam_dampl,beam_damps,beam_dampt,beam_lc1,beam_lc2,beam_lc3,beam_lc4);
    }
}
