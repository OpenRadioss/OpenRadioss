//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
ATTRIBUTES(COMMON) {

    //Attributes for HM usage 
    IO_FLAG                             = VALUE(INT, "Import/Export flag");
    _HMCOMMENTSFLAG                     = VALUE(INT, "Write HM Comments");
    _HWCOLOR                            = VALUE(INT, "Entity Color");
    _HAS_HEADER                         = VALUE(BOOL,"Has Header Card");
    TITLE                               = VALUE(STRING, "TITLE");
    solverkeyword                       = VALUE(STRING, "Solver Keyword");
    Type                                = VALUE(STRING, "");
    nboundary                           = SIZE("Number of Boundary conditions","No_Boundary_Conditions");
    eigenvalue                          = VALUE(INT,"EIGENVALUE option","OPTION");

    // Solver fields
    r0                                   = VALUE(FLOAT,"Fluid density");
    c                                    = VALUE(FLOAT,"Sound speed of the fluid");
    c_negflag                            = VALUE(BOOL,"Flag specifying C options", "C_FLAG");
    c_freq                               = VALUE(FREQUENCIES,"Sound speed of the fluid","C_FREQ") { SUBTYPES = (/FREQUENCY/FREQUENCY_DOMAIN_ACOUSTIC_SOUND_SPEED);  }
    fmin                                 = VALUE(FLOAT,"Minimum value of output frequencies");
    fmax                                 = VALUE(FLOAT,"Maximum value of output frequencies");
    nfreq                                = VALUE(INT,"Number of output frequencies");
    dtout                                = VALUE(FLOAT,"Time step for writing velocity or acceleration in the binary file");
    tstart                               = VALUE(FLOAT, "Start time for recording velocity or acceleration in transient analysis");
    pref                                 = VALUE(FLOAT,"Reference pressure, for converting the acoustic pressure to dB");
    ptyp                                 = VALUE(INT,"Set type");
    fftwin                               = VALUE(INT,"FFT windows");
    pid                                  = VALUE(MULTIOBJECT,"Part ID, or part set ID to define the acoustic domain") { SUBTYPES = ( /SETS/SET_PART_IDPOOL,  /COMPONENT ) ; }
    styp                                 = ARRAY[nboundary](INT,"Set type");
    nsids                                = ARRAY[nboundary](SETS, "Node Set ID", "NSIDS") { SUBTYPES = (/SETS/SET_NODE_IDPOOL);  }
    ssids                                = ARRAY[nboundary](SETS, "Segment Set ID", "SSIDS") { SUBTYPES = (/SETS/SET_SEGMENT_GENERAL_IDPOOL);  }
    pids                                 = ARRAY[nboundary](COMPONENT, "Part ID", "PIDS");
    psids                                = ARRAY[nboundary](SETS, "Part Set ID", "PSIDS") { SUBTYPES = (/SETS/SET_PART_IDPOOL) ;  }
    vad                                  = ARRAY[nboundary](INT,"Velocity/Acceleration/Displacement flag");
    dof                                  = ARRAY[nboundary](INT,"Applicable degrees-of-freedom");
    lcids1                               = ARRAY[nboundary](FUNCT, "Load curve ID to describe the amplitude (or real part) of velocity","LCID1");
    lcids2                               = ARRAY[nboundary](FUNCT, "Load curve ID to describe the phase (or imaginary part) of velocity");
    sf                                   = ARRAY[nboundary](FLOAT,"Load curve scale factor");
    vid                                  = ARRAY[nboundary](VECTOR, "Vector ID for DOF values of 4");
    ntyp                                 = VALUE(INT,"Set type");
    nid                                  = VALUE(MULTIOBJECT,"Node ID, or node set ID, or segment set ID for acoustic result output") { SUBTYPES = ( /SETS/SET_NODE_IDPOOL,  /NODE ) ; }
    ipfile                               = VALUE(INT,"Flag for output files");
    dba                                  = VALUE(INT,"Flag for writing out weighted SPL files with different weighting options");
    mxtdmp                               = VALUE(INT,"Acoustic stiffness and mass matrices dumping");
    restrt                               = VALUE(INT,"This flag is used to save an LS-DYNA time domain analysis if the binary output file (bin_femac) has not been changed");

    DUMMY_STYP                           = VALUE(INT, "STYP");
    DUMMY_PTYP                           = VALUE(INT, "PTYP");
    DUMMY_NTYP                           = VALUE(INT, "NTYP");
    empty_string                         = VALUE(STRING, "empty string");
    pid_type                             = VALUE(STRING, "Type of multi object");
    nid_type                             = VALUE(STRING, "Type of multi object");
    DUMMY_NBOUNDARY                      = SIZE("Dummy variable");
    Line_count                           = VALUE(INT,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    IO_FLAG                            =-1;
    _HMCOMMENTSFLAG                    =-1;
    _HWCOLOR                           =-1;
    _HAS_HEADER                        = -1;
    TITLE                              =-1;
    solverkeyword                      = -1;
    DUMMY_STYP                         = -1;
    empty_string                       = -1;
    Type                               = -1;
    pid_type                           = -1;
    nid_type                           = -1;
    DUMMY_PTYP                         = -1;
    DUMMY_NTYP                         = -1;
    DUMMY_NBOUNDARY                    = -1;
    Line_count                         = -1;
}

DEFAULTS(COMMON)
{
    nfreq                                = 0;
    dtout                                = 0.0;
    tstart                               = 0.0;
    pref                                 = 0.0;
    ptyp                                 = 0;
    fftwin                               = 0;
    styp                                 = 0;
    vad                                  = 0;
    sf                                   = 1.0;
    ipfile                               = 0;
    ntyp                                 = 0;
    pid_type                             = "/COMPONENT";
    nid_type                             = "/NODE";
    nboundary                            = 0;
    dba                                  = 0;
    mxtdmp                               = 0;
    restrt                               = 0;

}

CHECK(COMMON)
{
    nboundary                            >= 0;
}


GUI(COMMON)
{
    RADIO(eigenvalue)
    {
        ADD(0,"NONE");
        ADD(1,"EIGENVALUE");
    } { PARAMETERIZED = FALSE; DISPLAY_STATUS=ALWAYS_ON;}
    
    if(eigenvalue == 1)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_ACOUSTIC_FEM_EIGENVALUE);
    }
    else
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_ACOUSTIC_FEM);
    }
    
    // Card 1
    SCALAR(r0) { DIMENSION = "density"; }
    FLAG(c_negflag);
    if(c_negflag == TRUE)
    {
        DATA(c_freq) {/FILTER/config/106/EQ;}
    }
    else
    {
        SCALAR(c) { DIMENSION = "velocity"; }
    }
    SCALAR(fmin) { DIMENSION = "f"; }
    SCALAR(fmax) { DIMENSION = "f"; }
    SCALAR(nfreq);
    SCALAR(dtout) { DIMENSION = "t"; }
    SCALAR(tstart) { DIMENSION = "t"; }
    SCALAR(pref) { DIMENSION = "pressure"; }
    
    // Card 2
    RADIO(fftwin)
    {
        ADD(0,"0:Rectangular window");
        ADD(1,"1:Hanning window");
        ADD(2,"2:Hamming window");
        ADD(3,"3:Blackman window");
        ADD(4,"4:Raised cosine window");
    }
    RADIO(mxtdmp)
    {
        ADD(0,"0:No dumping");
        ADD(1,"1:Dumping globally assembled acoustic stiffness and mass matrices in Harwell-Boeing sparse matrix format");
    }
    RADIO(restrt)
    {
        ADD(0,"0:LS-DYNA time domain analysis is processed and generates a new binary file (bin_femac) which saves the boundary velocity history data.");
        ADD(1,"1:LS-DYNA time domain analysis is not processed. The binary file bin_femac from the last run is used");
    }
    
    // Card 3
    RADIO(ptyp)
    {
        ADD(0,"0:Part");
        ADD(1,"1:Part Set");
    }
    if(ptyp == 0)
    {
        DATA(pid) { SUBTYPES = ( /COMPONENT ) ;  }
    }
    else
    {
        DATA(pid) { SUBTYPES = ( /SETS/SET_PART_IDPOOL ) ;  }
    }
    
    SIZE(nboundary);
    
    // Card 4 is category
    ARRAY(nboundary, "")
    {
        RADIO(styp)
        {
            ADD(0, "0:Part ID");
            ADD(1, "1:Part set ID");
            ADD(2, "2:Segment set ID");
            ADD(3, "3:Node set ID");
        }
        if(styp == 0)
        {
            DATA(pids);
        }
        else if(styp == 1)
        {
            DATA(psids);
        }
        else if(styp == 2)
        {
            DATA(ssids);
        }
        else if(styp == 3)
        {
            DATA(nsids);
        }

        RADIO(vad)
        {
            ADD(0, "0:Velocity by steady state dynamics (SSD).");
            ADD(1, "1:Velocity by transient analysis.");
            ADD(2, "2:Opening (zero pressure).");
            ADD(11, "11:Velocity by LCID1 (amplitude) and LCID2 (phase).");
            ADD(12, "12:Velocity by LCID1 (real) and LCID2 (imaginary).");
            ADD(21, "21:Acceleration by LCID1 (amplitude) and LCID2 (phase).");
            ADD(22, "22:Acceleration by LCID1 (real) and LCID2 (imaginary).");
            ADD(31, "31:Displacement by LCID1 (amplitude) and LCID2 (phase).");
            ADD(32, "32:Displacement by LCID1 (real) and LCID2 (imaginary).");
            ADD(41, "41:Impedance by LCID1 (amplitude) and LCID2 (phase).");
            ADD(42, "42:Impedance by LCID1 (real) and LCID2 (imaginary).");
            ADD(51, "51:Pressure by LCID1 (amplitude) and LCID2 (phase).");
            ADD(52, "52:Pressure by LCID1 (real) and LCID2 (imaginary).");
        }
        RADIO(dof)
        {
            ADD(0, "0:Determined by steady state dynamics.");
            ADD(1, "1:X-translational degree-of-freedom.");
            ADD(2, "2:Y-translational degree-of-freedom.");
            ADD(3, "3:Z-translational degree-of-freedom,");
            ADD(4, "4:Translational motion in direction given by VID.");
            ADD(5, "5:Normal direction of the element or segment.");
        }
        FUNCTION(lcids1) {/FILTER/curveoption/0/EQ;}
        FUNCTION(lcids2) {/FILTER/curveoption/0/EQ;}
        SCALAR(sf);
        DATA(vid);
    }
    
    // Card 5 is Not available when eigenvalue is ON
    if(eigenvalue == 0)
    {
        RADIO(ntyp)
        {
            ADD(0,"0:Node");
            ADD(1,"1:Node Set");
        }
        if(ntyp == 0)
        {
            DATA(nid) { SUBTYPES = ( /NODE ) ;  }
        }
        else
        {
            DATA(nid) { SUBTYPES = ( /SETS/SET_NODE_IDPOOL ) ;  }
        }
        RADIO(ipfile)
        {
            ADD(0,"0:Press_Pa , Press_dB and bepres(ASCII database file for LS - Prepost) are provided");
            ADD(1,"1:Press_Pa_real and Press_Pa_imag are provided, in addition to Press_Pa, Press_dBand bepres");
        }
        RADIO(dba)
        {
            ADD(0,"0:No writing out weighted SPL files");
            ADD(1,"1:Write out Press_dB(A) by using A-weighting");
            ADD(2,"2:Write out Press_dB(B) by using B-weighting");
            ADD(3,"3:Write out Press_dB(C) by using C-weighting");
            ADD(4,"4:Write out Press_dB(D) by using D-weighting");
        }
    }
}

// File format
FORMAT(Keyword971_R12.0) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    if (IO_FLAG == 0)
    {
        if(eigenvalue == 1)
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_FEM_EIGENVALUE");
        }
        else
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_FEM");
        }
    }
    
    if(IO_FLAG == 1)
    {
        HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_FEM%11s",Type);
        if(Type == "_EIGENVALUE")
        {
            ASSIGN(eigenvalue,1);
        }
        else
        {
            ASSIGN(eigenvalue,0);
        }
    }

    COMMENT("$       R0         C      FMIN      FMAX     NFREQ     DTOUT    TSTART      PREF");
    CARD("%10lg%10lg%10lg%10lg%10d%10lg%10lg%10lg",r0,SCALAR_OR_OBJECT(c_negflag,c,c_freq),fmin,fmax,nfreq,dtout,tstart,pref);
    
    COMMENT("$             FFTWIN    MXTDMP    RESTRT");
    CARD("          %10d%10d%10d",fftwin,mxtdmp,restrt);
    
    if(IO_FLAG == 1)
    {
        CARD_PREREAD("%10s%10d",empty_string,DUMMY_PTYP);
    }
    
    if(IO_FLAG == 1 && DUMMY_PTYP == 0)
    {
        ASSIGN(pid_type, /COMPONENT, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_PTYP == 1)
    {
        ASSIGN(pid_type, /SETS/SET_PART_IDPOOL, IMPORT); 
    }
    
    COMMENT("$      PID      PTYP");
    CARD("%10d%10d",pid,ptyp);
    
    if(eigenvalue == 0)
    {
        if (IO_FLAG == 0)
        {
            COMMENT("$      SID      STYP       VAD       DOF     LCID1     LCID2        SF       VID");
            CARD_LIST(nboundary)
            {
                CARD("%10d%10d%10d%10d%10d%10d%10lg%10d", CELL_COND( if(styp == 0)  
                                                                pids;
                                                            else if(styp == 1)  
                                                                psids;
                                                            else if(styp == 2)  
                                                                ssids;
                                                            else if(styp == 3)
                                                                 nsids;), styp, vad, dof, lcids1, lcids2, sf, vid);
            }
        }
        else
        {
            ASSIGN(Line_count,_GET_NB_FREE_CARDS(),IMPORT);
            ASSIGN(nboundary, Line_count-1, IMPORT);
            CARD_LIST(nboundary)
            { 
                CARD_PREREAD("%10s%10d%10s%10s%10s%10s%10s%10s",empty_string,DUMMY_STYP,empty_string,empty_string,empty_string,empty_string,empty_string,empty_string);
                CARD("%10d%10d%10d%10d%10d%10d%10lg%10d", CELL_COND( if(DUMMY_STYP == 0)
                                                                            pids;
                                                                     else if(DUMMY_STYP == 1)
                                                                            psids;
                                                                     else if(DUMMY_STYP == 2)
                                                                            ssids;
                                                                     else if(DUMMY_STYP == 3)
                                                                            nsids;), styp, vad, dof, lcids1, lcids2, sf, vid); 
                                                                        
                if(DUMMY_STYP == 0)
                {
                    ASSIGN(psids, 0, IMPORT);
                    ASSIGN(ssids, 0, IMPORT);
                    ASSIGN(nsids, 0, IMPORT);
                }
                else if(DUMMY_STYP == 1)
                {
                    ASSIGN(pids, 0, IMPORT);
                    ASSIGN(ssids, 0, IMPORT);
                    ASSIGN(nsids, 0, IMPORT);
                }
                else if(DUMMY_STYP == 2)
                {
                    ASSIGN(pids, 0, IMPORT);
                    ASSIGN(psids, 0, IMPORT);
                    ASSIGN(nsids, 0, IMPORT);
                }
                else if(DUMMY_STYP == 3)
                {
                    ASSIGN(pids, 0, IMPORT);
                    ASSIGN(psids, 0, IMPORT);
                    ASSIGN(ssids, 0, IMPORT);
                }
            }
        }
        
        if(IO_FLAG == 1)
        {
            CARD_PREREAD("%10s%10d%10s",empty_string,DUMMY_NTYP,empty_string);
        }
        if(IO_FLAG == 1 && DUMMY_NTYP == 0)
        {
            ASSIGN(nid_type, /NODE, IMPORT);
        }
        else if(IO_FLAG == 1 && DUMMY_NTYP == 1)
        {
            ASSIGN(nid_type, /SETS/SET_NODE_IDPOOL, IMPORT); 
        }
        
        COMMENT("$      NID      NTYP    IPFILE       DBA");
        CARD("%10d%10d%10d%10d",nid,ntyp,ipfile,dba);
    }
    else
    {
        if (IO_FLAG == 0)
        {
            COMMENT("$      SID      STYP       VAD       DOF     LCID1     LCID2        SF       VID");
            CARD_LIST(nboundary)
            {
                CARD("%10d%10d%10d%10d%10d%10d%10lg%10d", CELL_COND( if(styp == 0)  
                                                                pids;
                                                            else if(styp == 1)  
                                                                psids;
                                                            else if(styp == 2)  
                                                                ssids;
                                                            else if(styp == 3)
                                                                 nsids;), styp, vad, dof, lcids1, lcids2, sf, vid);
            }
        }
        else
        {
            FREE_CARD_LIST(nboundary)
            { 
                CARD_PREREAD("%10s%10d%10s%10s%10s%10s%10s%10s",empty_string,DUMMY_STYP,empty_string,empty_string,empty_string,empty_string,empty_string,empty_string);
                CARD("%10d%10d%10d%10d%10d%10d%10lg%10d", CELL_COND( if(DUMMY_STYP == 0)
                                                                            pids;
                                                                     else if(DUMMY_STYP == 1)
                                                                            psids;
                                                                     else if(DUMMY_STYP == 2)
                                                                            ssids;
                                                                     else if(DUMMY_STYP == 3)
                                                                            nsids;), styp, vad, dof, lcids1, lcids2, sf, vid); 
                                                                        
                if(DUMMY_STYP == 0)
                {
                    ASSIGN(psids, 0, IMPORT);
                    ASSIGN(ssids, 0, IMPORT);
                    ASSIGN(nsids, 0, IMPORT);
                }
                else if(DUMMY_STYP == 1)
                {
                    ASSIGN(pids, 0, IMPORT);
                    ASSIGN(ssids, 0, IMPORT);
                    ASSIGN(nsids, 0, IMPORT);
                }
                else if(DUMMY_STYP == 2)
                {
                    ASSIGN(pids, 0, IMPORT);
                    ASSIGN(psids, 0, IMPORT);
                    ASSIGN(nsids, 0, IMPORT);
                }
                else if(DUMMY_STYP == 3)
                {
                    ASSIGN(pids, 0, IMPORT);
                    ASSIGN(psids, 0, IMPORT);
                    ASSIGN(ssids, 0, IMPORT);
                }
            }
        }
    }
}

// File format
FORMAT(Keyword971_R9.3) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    if (IO_FLAG == 0)
    {
        if(eigenvalue == 1)
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_FEM_EIGENVALUE");
        }
        else
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_FEM");
        }
    }
    
    if(IO_FLAG == 1)
    {
        HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_FEM%11s",Type);
        if(Type == "_EIGENVALUE")
        {
            ASSIGN(eigenvalue,1);
        }
        else
        {
            ASSIGN(eigenvalue,0);
        }
    }

    COMMENT("$       R0         C      FMIN      FMAX     NFREQ     DTOUT    TSTART      PREF");
    CARD("%10lg%10lg%10lg%10lg%10d%10lg%10lg%10lg",r0,SCALAR_OR_OBJECT(c_negflag,c,c_freq),fmin,fmax,nfreq,dtout,tstart,pref);
    
    COMMENT("$             FFTWIN");
    CARD("          %10d",fftwin);
    
    if(IO_FLAG == 1)
    {
        CARD_PREREAD("%10s%10d",empty_string,DUMMY_PTYP);
    }
    
    if(IO_FLAG == 1 && DUMMY_PTYP == 0)
    {
        ASSIGN(pid_type, /COMPONENT, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_PTYP == 1)
    {
        ASSIGN(pid_type, /SETS/SET_PART_IDPOOL, IMPORT); 
    }
    
    COMMENT("$      PID      PTYP");
    CARD("%10d%10d",pid,ptyp);
    
    if(eigenvalue == 0)
    {
        if (IO_FLAG == 0)
        {
            COMMENT("$      SID      STYP       VAD       DOF     LCID1     LCID2        SF       VID");
            CARD_LIST(nboundary)
            {
                CARD("%10d%10d%10d%10d%10d%10d%10lg%10d", CELL_COND( if(styp == 0)  
                                                                pids;
                                                            else if(styp == 1)  
                                                                psids;
                                                            else if(styp == 2)  
                                                                ssids;
                                                            else if(styp == 3)
                                                                 nsids;), styp, vad, dof, lcids1, lcids2, sf, vid);
            }
        }
        else
        {
            ASSIGN(Line_count,_GET_NB_FREE_CARDS(),IMPORT);
            ASSIGN(nboundary, Line_count-1, IMPORT);
            CARD_LIST(nboundary)
            { 
                CARD_PREREAD("%10s%10d%10s%10s%10s%10s%10s%10s",empty_string,DUMMY_STYP,empty_string,empty_string,empty_string,empty_string,empty_string,empty_string);
                CARD("%10d%10d%10d%10d%10d%10d%10lg%10d", CELL_COND( if(DUMMY_STYP == 0)
                                                                            pids;
                                                                     else if(DUMMY_STYP == 1)
                                                                            psids;
                                                                     else if(DUMMY_STYP == 2)
                                                                            ssids;
                                                                     else if(DUMMY_STYP == 3)
                                                                            nsids;), styp, vad, dof, lcids1, lcids2, sf, vid); 
                                                                        
                if(DUMMY_STYP == 0)
                {
                    ASSIGN(psids, 0, IMPORT);
                    ASSIGN(ssids, 0, IMPORT);
                    ASSIGN(nsids, 0, IMPORT);
                }
                else if(DUMMY_STYP == 1)
                {
                    ASSIGN(pids, 0, IMPORT);
                    ASSIGN(ssids, 0, IMPORT);
                    ASSIGN(nsids, 0, IMPORT);
                }
                else if(DUMMY_STYP == 2)
                {
                    ASSIGN(pids, 0, IMPORT);
                    ASSIGN(psids, 0, IMPORT);
                    ASSIGN(nsids, 0, IMPORT);
                }
                else if(DUMMY_STYP == 3)
                {
                    ASSIGN(pids, 0, IMPORT);
                    ASSIGN(psids, 0, IMPORT);
                    ASSIGN(ssids, 0, IMPORT);
                }
            }
        }
        
        if(IO_FLAG == 1)
        {
            CARD_PREREAD("%10s%10d%10s",empty_string,DUMMY_NTYP,empty_string);
        }
        if(IO_FLAG == 1 && DUMMY_NTYP == 0)
        {
            ASSIGN(nid_type, /NODE, IMPORT);
        }
        else if(IO_FLAG == 1 && DUMMY_NTYP == 1)
        {
            ASSIGN(nid_type, /SETS/SET_NODE_IDPOOL, IMPORT); 
        }
        
        COMMENT("$      NID      NTYP    IPFILE       DBA");
        CARD("%10d%10d%10d%10d",nid,ntyp,ipfile,dba);
    }
    else
    {
        if (IO_FLAG == 0)
        {
            COMMENT("$      SID      STYP       VAD       DOF     LCID1     LCID2        SF       VID");
            CARD_LIST(nboundary)
            {
                CARD("%10d%10d%10d%10d%10d%10d%10lg%10d", CELL_COND( if(styp == 0)  
                                                                pids;
                                                            else if(styp == 1)  
                                                                psids;
                                                            else if(styp == 2)  
                                                                ssids;
                                                            else if(styp == 3)
                                                                 nsids;), styp, vad, dof, lcids1, lcids2, sf, vid);
            }
        }
        else
        {
            FREE_CARD_LIST(nboundary)
            { 
                CARD_PREREAD("%10s%10d%10s%10s%10s%10s%10s%10s",empty_string,DUMMY_STYP,empty_string,empty_string,empty_string,empty_string,empty_string,empty_string);
                CARD("%10d%10d%10d%10d%10d%10d%10lg%10d", CELL_COND( if(DUMMY_STYP == 0)
                                                                            pids;
                                                                     else if(DUMMY_STYP == 1)
                                                                            psids;
                                                                     else if(DUMMY_STYP == 2)
                                                                            ssids;
                                                                     else if(DUMMY_STYP == 3)
                                                                            nsids;), styp, vad, dof, lcids1, lcids2, sf, vid); 
                                                                        
                if(DUMMY_STYP == 0)
                {
                    ASSIGN(psids, 0, IMPORT);
                    ASSIGN(ssids, 0, IMPORT);
                    ASSIGN(nsids, 0, IMPORT);
                }
                else if(DUMMY_STYP == 1)
                {
                    ASSIGN(pids, 0, IMPORT);
                    ASSIGN(ssids, 0, IMPORT);
                    ASSIGN(nsids, 0, IMPORT);
                }
                else if(DUMMY_STYP == 2)
                {
                    ASSIGN(pids, 0, IMPORT);
                    ASSIGN(psids, 0, IMPORT);
                    ASSIGN(nsids, 0, IMPORT);
                }
                else if(DUMMY_STYP == 3)
                {
                    ASSIGN(pids, 0, IMPORT);
                    ASSIGN(psids, 0, IMPORT);
                    ASSIGN(ssids, 0, IMPORT);
                }
            }
        }
    }
}

// File format
FORMAT(Keyword971_R8.0) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_FEM");

    COMMENT("$       R0         C      FMIN      FMAX     NFREQ     DTOUT    TSTART      PREF");
    CARD("%10lg%10lg%10lg%10lg%10d%10lg%10lg%10lg",r0,c,fmin,fmax,nfreq,dtout,tstart,pref);
    
    COMMENT("$             FFTWIN");
    CARD("          %10d",fftwin);
    
    if(IO_FLAG == 1)
    {
        CARD_PREREAD("%10s%10d",empty_string,DUMMY_PTYP);
    }
    
    if(IO_FLAG == 1 && DUMMY_PTYP == 0)
    {
        ASSIGN(pid_type, /COMPONENT, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_PTYP == 1)
    {
        ASSIGN(pid_type, /SETS/SET_PART_IDPOOL, IMPORT); 
    }
    
    COMMENT("$      PID      PTYP");
    CARD("%10d%10d",pid,ptyp);
    
    if (IO_FLAG == 0)
    {
        COMMENT("$      SID      STYP       VAD       DOF     LCID1     LCID2        SF       VID");
        CARD_LIST(nboundary)
        {
            CARD("%10d%10d%10d%10d%10d%10d%10lg%10d", CELL_COND( if(styp == 0)  
                                                            pids;
                                                        else if(styp == 1)  
                                                            psids;
                                                        else if(styp == 2)  
                                                            ssids;
                                                        else if(styp == 3)
                                                             nsids;), styp, vad, dof, lcids1, lcids2, sf, vid);
        }
    }
    else
    {
        ASSIGN(Line_count,_GET_NB_FREE_CARDS(),IMPORT);
        ASSIGN(nboundary, Line_count-1, IMPORT);
        CARD_LIST(nboundary)
        { 
            CARD_PREREAD("%10s%10d%10s%10s%10s%10s%10s%10s",empty_string,DUMMY_STYP,empty_string,empty_string,empty_string,empty_string,empty_string,empty_string);
            CARD("%10d%10d%10d%10d%10d%10d%10lg%10d", CELL_COND( if(DUMMY_STYP == 0)
                                                                        pids;
                                                                 else if(DUMMY_STYP == 1)
                                                                        psids;
                                                                 else if(DUMMY_STYP == 2)
                                                                        ssids;
                                                                 else if(DUMMY_STYP == 3)
                                                                        nsids;), styp, vad, dof, lcids1, lcids2, sf, vid); 
                                                                    
            if(DUMMY_STYP == 0)
            {
                ASSIGN(psids, 0, IMPORT);
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(nsids, 0, IMPORT);
            }
            else if(DUMMY_STYP == 1)
            {
                ASSIGN(pids, 0, IMPORT);
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(nsids, 0, IMPORT);
            }
            else if(DUMMY_STYP == 2)
            {
                ASSIGN(pids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
                ASSIGN(nsids, 0, IMPORT);
            }
            else if(DUMMY_STYP == 3)
            {
                ASSIGN(pids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
                ASSIGN(ssids, 0, IMPORT);
            }
        }
    }
    
    if(IO_FLAG == 1)
    {
        CARD_PREREAD("%10s%10d%10s",empty_string,DUMMY_NTYP,empty_string);
    }
    if(IO_FLAG == 1 && DUMMY_NTYP == 0)
    {
        ASSIGN(nid_type, /NODE, IMPORT);
    }
    else if(IO_FLAG == 1 && DUMMY_NTYP == 1)
    {
        ASSIGN(nid_type, /SETS/SET_NODE_IDPOOL, IMPORT); 
    }
    
    COMMENT("$      NID      NTYP    IPFILE");
    CARD("%10d%10d%10d",nid,ntyp,ipfile);
}

// File format
FORMAT(Keyword971_R6.1) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_FEM");

    COMMENT("$       R0         C      FMIN      FMAX     NFREQ     DTOUT    TSTART      PREF");
    CARD("%10lg%10lg%10lg%10lg%10d%10lg%10lg%10lg",r0,c,fmin,fmax,nfreq,dtout,tstart,pref);
    
    if(IO_FLAG == 1)
    {
        CARD_PREREAD("%10s%10d",empty_string,DUMMY_PTYP);
    }
    
    if(IO_FLAG == 1 && DUMMY_PTYP == 0)
    {
        ASSIGN(pid_type, /COMPONENT, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_PTYP == 1)
    {
        ASSIGN(pid_type, /SETS/SET_PART_IDPOOL, IMPORT); 
    }
    
    COMMENT("$      PID      PTYP");
    CARD("%10d%10d",pid,ptyp);
    
    if (IO_FLAG == 0)
    {
        COMMENT("$      SID      STYP       VAD       DOF     LCID1     LCID2        SF       VID");
        CARD_LIST(nboundary)
        {
            CARD("%10d%10d%10d%10d%10d%10d%10lg%10d", CELL_COND( if(styp == 0)  
                                                            pids;
                                                        else if(styp == 1)  
                                                            psids;
                                                        else if(styp == 2)  
                                                            ssids;
                                                        else if(styp == 3)
                                                             nsids;), styp, vad, dof, lcids1, lcids2, sf, vid);
        }
    }
    else
    {
        ASSIGN(Line_count,_GET_NB_FREE_CARDS(),IMPORT);
        ASSIGN(nboundary, Line_count-1, IMPORT);
        CARD_LIST(nboundary)
        { 
            CARD_PREREAD("%10s%10d%10s%10s%10s%10s%10s%10s",empty_string,DUMMY_STYP,empty_string,empty_string,empty_string,empty_string,empty_string,empty_string);
            CARD("%10d%10d%10d%10d%10d%10d%10lg%10d", CELL_COND( if(DUMMY_STYP == 0)
                                                                        pids;
                                                                 else if(DUMMY_STYP == 1)
                                                                        psids;
                                                                 else if(DUMMY_STYP == 2)
                                                                        ssids;
                                                                 else if(DUMMY_STYP == 3)
                                                                        nsids;), styp, vad, dof, lcids1, lcids2, sf, vid); 
                                                                    
            if(DUMMY_STYP == 0)
            {
                ASSIGN(psids, 0, IMPORT);
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(nsids, 0, IMPORT);
            }
            else if(DUMMY_STYP == 1)
            {
                ASSIGN(pids, 0, IMPORT);
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(nsids, 0, IMPORT);
            }
            else if(DUMMY_STYP == 2)
            {
                ASSIGN(pids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
                ASSIGN(nsids, 0, IMPORT);
            }
            else if(DUMMY_STYP == 3)
            {
                ASSIGN(pids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
                ASSIGN(ssids, 0, IMPORT);
            }
        }
    }
    
    if(IO_FLAG == 1)
    {
        CARD_PREREAD("%10s%10d%10s",empty_string,DUMMY_NTYP,empty_string);
    }
    if(IO_FLAG == 1 && DUMMY_NTYP == 0)
    {
        ASSIGN(nid_type, /NODE, IMPORT);
    }
    else if(IO_FLAG == 1 && DUMMY_NTYP == 1)
    {
        ASSIGN(nid_type, /SETS/SET_NODE_IDPOOL, IMPORT); 
    }
    
    COMMENT("$      NID      NTYP    IPFILE");
    CARD("%10d%10d%10d",nid,ntyp,ipfile);
}
