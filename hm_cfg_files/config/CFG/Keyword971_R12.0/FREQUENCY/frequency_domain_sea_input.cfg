//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
ATTRIBUTES(COMMON) {

    //Attributes for HM usage 
    IO_FLAG                             = VALUE(INT, "Import/Export flag");
    _HMCOMMENTSFLAG                     = VALUE(INT, "Write HM Comments");
    _HWCOLOR                            = VALUE(INT, "Entity Color");
    _HAS_HEADER                         = VALUE(BOOL,"Has Header Card");
    TITLE                               = VALUE(STRING, "TITLE");
    solverkeyword                       = VALUE(STRING, "Solver Keyword");
    
    subid                                = VALUE(INT, "ID of subsystem");
    subtyp                               = VALUE(INT, "Type of subsystem");
    loadtyp                              = VALUE(INT, "Input power type");
    bwave                                = VALUE(FLOAT, "Bending wave");
    lwave                                = VALUE(FLOAT, "Longitudinal wave");
    swave                                = VALUE(FLOAT, "Shear wave");
    twave                                = VALUE(FLOAT, "Torsional wave");

}
    
SKEYWORDS_IDENTIFIER(COMMON)
{
     IO_FLAG                            =-1;
    _HMCOMMENTSFLAG                     =-1;
    _HWCOLOR                            =-1;
    _HAS_HEADER                         = -1;
     TITLE                              =-1;
     solverkeyword                      =-1;
}

DEFAULTS(COMMON)
{
    subtyp                               = 1;
    loadtyp                              = 1;
}

GUI(COMMON)
{
    ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_SEA_INPUT);
    SCALAR(subid);
    RADIO(subtyp)
    {
        ADD(1,"1:Plate");
        ADD(2,"2:Cavity");
        ADD(3,"3:Beam");
    }
    RADIO(loadtyp)
    {
        ADD(1,"1:Power");
        ADD(2,"2:Force");
        ADD(3,"3:Velocity");
        ADD(4,"4:Bending wave power for plate");
        ADD(5,"5:Shear wave power for plate");
    }

    SCALAR(bwave);
    SCALAR(lwave);
    SCALAR(swave);
    if(subtyp == 3)
    {
        SCALAR(twave);
    }
}

// File format
FORMAT(Keyword971_R12.0) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    HEADER("*FREQUENCY_DOMAIN_SEA_INPUT");
    
    // card 1
    COMMENT("$    SUBID    SUBTYP   LOADTYP");
    CARD("%10d%10d%10d",subid,subtyp,loadtyp);
    
    // card 2
    if(subtyp == 3)
    {
        COMMENT("$    BWAVE     LWAVE     SWAVE     TWAVE");
        CARD("%10lg%10lg%10lg%10lg",bwave,lwave,swave,twave);
    }
    else
    {
        COMMENT("$    BWAVE     LWAVE     SWAVE");
        CARD("%10lg%10lg%10lg",bwave,lwave,swave);
    }
}
