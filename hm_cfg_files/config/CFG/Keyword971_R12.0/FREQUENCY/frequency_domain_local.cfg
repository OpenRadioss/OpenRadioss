//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
ATTRIBUTES(COMMON) {

    //Attributes for HM usage 
    IO_FLAG                             = VALUE(INT, "Import/Export flag");
    _HMCOMMENTSFLAG                     = VALUE(INT, "Write HM Comments");
    _HWCOLOR                            = VALUE(INT, "Entity Color");
    _HAS_HEADER                         = VALUE(BOOL,"Has Header Card");
    TITLE                               = VALUE(STRING, "TITLE");
    solverkeyword                       = VALUE(STRING, "Solver Keyword");
    Type                                = VALUE(STRING, "");
    localoptions                        = VALUE(INT, "LOCAL Options","OPTION1");
    exclude                             = VALUE(INT,"EXCLUDE Option","OPTION2");
    num_nsid                            = SIZE("No of Entities","No_ID");
    num_pid                             = SIZE("No of Entities","No_ID");
    num_psid                            = SIZE("No of Entities","No_ID");
    
    nsids                                = ARRAY[num_nsid](SETS, "Node Set ID","NSIDS") { SUBTYPES = (/SETS/SET_NODE_IDPOOL);  }
    pids                                 = ARRAY[num_pid](COMPONENT, "Part ID","PIDS");
    psids                                = ARRAY[num_psid](SETS, "Part Set ID","PSIDS") { SUBTYPES = (/SETS/SET_PART_IDPOOL) ;  }
}

SKEYWORDS_IDENTIFIER(COMMON)
{
     IO_FLAG                            =-1;
    _HMCOMMENTSFLAG                     =-1;
    _HWCOLOR                            =-1;
    _HAS_HEADER                         = -1;
     TITLE                              =-1;
     solverkeyword                      =-1;
}

DEFAULTS(COMMON)
{
    num_nsid                            = 0;
    num_pid                             = 0;
    num_psid                            = 0;
}

CHECK(COMMON)
{
    num_nsid                            >= 0;
    num_pid                             >= 0;
    num_psid                            >= 0;
}

DEFINITIONS(COMMON)
{
   MAINS=(nsids, pids, psids);
}

GUI(COMMON)
{
    RADIO(localoptions)
    {
        ADD(1,"NODE_SET");
        ADD(2,"PART");
        ADD(3,"PART_SET");
    } { PARAMETERIZED = FALSE; DISPLAY_STATUS=ALWAYS_ON;}
    RADIO(exclude)
    {
        ADD(0,"NONE");
        ADD(1,"EXCLUDE");
    } { PARAMETERIZED = FALSE; DISPLAY_STATUS=ALWAYS_ON;}
    if(localoptions == 1 && exclude == 0)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_LOCAL_NODE_SET);
    }
    else if(localoptions == 1 && exclude == 1)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_LOCAL_NODE_SET_EXCLUDE);
    }
    else if(localoptions == 2 && exclude == 0)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_LOCAL_PART);
    }
    else if(localoptions == 2 && exclude == 1)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_LOCAL_PART_EXCLUDE);
    }
    else if(localoptions == 3 && exclude == 0)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_LOCAL_PART_SET);
    }
    else if(localoptions == 3 && exclude == 1)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_LOCAL_PART_SET_EXCLUDE);
    }
    
    if(localoptions == 1)
    {
        SIZE(num_nsid);
        ARRAY(num_nsid, "")
        {
            DATA(nsids);
        }
    }
    
    if(localoptions == 2)
    {
        SIZE(num_pid);
        ARRAY(num_pid, "")
        {
            DATA(pids);
        }
    }
    
    if(localoptions == 3)
    {
        SIZE(num_psid);
        ARRAY(num_psid, "")
        {
            DATA(psids);
        }
    }
}

// File format
FORMAT(Keyword971_R12.0) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    if (IO_FLAG == 0)
    {
        if(localoptions == 1 && exclude == 0)
        {
            HEADER("*FREQUENCY_DOMAIN_LOCAL_NODE_SET");
        }
        else if(localoptions == 1 && exclude == 1)
        {
            HEADER("*FREQUENCY_DOMAIN_LOCAL_NODE_SET_EXCLUDE");
        }
        else if(localoptions == 2 && exclude == 0)
        {
            HEADER("*FREQUENCY_DOMAIN_LOCAL_PART");
        }
        else if(localoptions == 2 && exclude == 1)
        {
            HEADER("*FREQUENCY_DOMAIN_LOCAL_PART_EXCLUDE");
        }
        else if(localoptions == 3 && exclude == 0)
        {
            HEADER("*FREQUENCY_DOMAIN_LOCAL_PART_SET");
        }
        else if(localoptions == 3 && exclude == 1)
        {
            HEADER("*FREQUENCY_DOMAIN_LOCAL_PART_SET_EXCLUDE");
        }
    }
    if(IO_FLAG == 1)
    {
        HEADER("*FREQUENCY_DOMAIN_LOCAL_%6s",Type);
        if(Type == "NODE_S")
        {
            ASSIGN(localoptions,1);
            HEADER("*FREQUENCY_DOMAIN_LOCAL_NODE_SET_%7s",Type);
            if(Type == "EXCLUDE")
            {
                ASSIGN(exclude,1);
            }
            else
            {
                ASSIGN(exclude,0);
            }
        }
        else if(Type == "PART_S")
        {
            ASSIGN(localoptions,3);
            HEADER("*FREQUENCY_DOMAIN_LOCAL_PART_SET_%7s",Type);
            if(Type == "EXCLUDE")
            {
                ASSIGN(exclude,1);
            }
            else
            {
                ASSIGN(exclude,0);
            }
        }
        else
        {
            ASSIGN(localoptions,2);
            HEADER("*FREQUENCY_DOMAIN_LOCAL_PART_%7s",Type);
            if(Type == "EXCLUDE")
            {
                ASSIGN(exclude,1);
            }
            else
            {
                ASSIGN(exclude,0);
            }
        }
    }
    
    if(localoptions == 1)
    {
         COMMENT("$      ID1       ID2       ID3       ID4       ID5       ID6       ID7       ID8");
         FREE_CELL_LIST(num_nsid,"%10d",nsids,80);
    }
    if(localoptions == 2)
    {
         COMMENT("$      ID1       ID2       ID3       ID4       ID5       ID6       ID7       ID8");
         FREE_CELL_LIST(num_pid,"%10d",pids,80);
    }
    if(localoptions == 3)
    {
         COMMENT("$      ID1       ID2       ID3       ID4       ID5       ID6       ID7       ID8");
         FREE_CELL_LIST(num_psid,"%10d",psids,80);
    }
}
