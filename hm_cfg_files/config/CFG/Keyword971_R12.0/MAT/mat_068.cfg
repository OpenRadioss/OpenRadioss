//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 068
// 


 ATTRIBUTES(COMMON) 
 {
  
  // Initial and reference densities
  KEYWORD_STR                       = VALUE(STRING, "Solver Keyword");
  LSD_TitleOpt                      = VALUE(INT, "Title");
  CommentEnumField                  = VALUE(INT, "User Comments");
  Num_Comments                      = SIZE("No. of comment lines");
  Comments                          = ARRAY[Num_Comments](STRING, "Entity Comments");
  Rho                               = VALUE(FLOAT, "Mass density");  
  EncTypeEnumField                  = VALUE(INT, "Type");
  LSD_OPT_MAT68_TKR_curve           = VALUE(INT, " flag for TKR_CURVE");
  LSD_MAT68_TKR_CURVE               = VALUE(FUNCT, "TKR_CURVE");
  LSD_MAT68_TKR                     = VALUE(FLOAT, "Translational stiffness along local r-axis");
  LSD_OPT_MAT68_TKS_curve           = VALUE(INT, " flag for TKS_Curve");
  LSD_MAT68_TKS_CURVE               = VALUE(FUNCT, "TKS_CURVE");
  LSD_MAT68_TKS                     = VALUE(FLOAT, "Translational stiffness along local s-axis");
  LSD_OPT_MAT68_TKT_curve           = VALUE(INT, " flag for TKT_Curve");
  LSD_MAT68_TKT_CURVE               = VALUE(FUNCT, "TKT_CURVE");
  LSD_MAT68_TKT                     = VALUE(FLOAT, "Translational stiffness along local t-axis");
  LSD_OPT_MAT68_RKR_curve           = VALUE(INT, " flag for RKR_Curve");
  LSD_MAT68_RKR_CURVE               = VALUE(FUNCT, "RKR_CURVE");
  LSD_MAT68_RKR                     = VALUE(FLOAT, "Rotational stiffness about the local r-axis");
  LSD_OPT_MAT68_RKS_curve           = VALUE(INT, " flag for RKS_Curve");
  LSD_MAT68_RKS_CURVE               = VALUE(FUNCT, "RKS_CURVE");
  LSD_MAT68_RKS                     = VALUE(FLOAT, "Rotational stiffness about the local s-axis");
  LSD_OPT_MAT68_RKT_curve           = VALUE(INT, " flag for RKT_Curve");
  LSD_MAT68_RKT_CURVE               = VALUE(FUNCT, "RKT_CURVE");
  LSD_MAT68_RKT                     = VALUE(FLOAT, "Rotational stiffness about the local t-axis");
  LSD_MAT68_TDR                     = VALUE(FLOAT, "Translational viscous damper along local r-axis");
  LSD_MAT68_TDS                     = VALUE(FLOAT, "Translational viscous damper along local s-axis");
  LSD_MAT68_TDT                     = VALUE(FLOAT, "Translational viscous damper along local t-axis");
  LSD_MAT68_RDR                     = VALUE(FLOAT, "Rotational viscous damper about the local r-axis");
  LSD_MAT68_RDS                     = VALUE(FLOAT, "Rotational viscous damper about the local s-axis");
  LSD_MAT68_RDT                     = VALUE(FLOAT, "Rotational viscous damper about the local t-axis");
  LSD_MAT68_RYLD                    = VALUE(FLOAT, "Flag for method  of computing plastic yielding");
  LSD_LCPDR                         = VALUE(FUNCT, "yield force versus plastic displacement r-axis");
  LSD_LCPDS                         = VALUE(FUNCT, "yield force versus plastic displacement s-axis");
  LSD_LCPDT                         = VALUE(FUNCT, "yield force versus plastic displacement t-axis");
  LSD_LCPMR                         = VALUE(FUNCT, "yield moment versus plastic rotation r-axis");
  LSD_LCPMS                         = VALUE(FUNCT, "yield moment versus plastic rotation s-axis");
  LSD_LCPMT                         = VALUE(FUNCT, "yield moment versus plastic rotation t-axis");
  LSD_MAT68_FFAILR                  = VALUE(FLOAT, "Optional failure parameter");
  LSD_MAT68_FFAILS                  = VALUE(FLOAT, "Optional failure parameter");
  LSD_MAT68_FFAILT                  = VALUE(FLOAT, "Optional failure parameter");
  LSD_MAT68_MFAILR                  = VALUE(FLOAT, "Optional failure parameter");
  LSD_MAT68_MFAILS                  = VALUE(FLOAT, "Optional failure parameter");
  LSD_MAT68_MFAILT                  = VALUE(FLOAT, "Optional failure parameter");
  LSD_MAT68_UFAILR                  = VALUE(FLOAT, "Optional failure parameter");
  LSD_MAT68_UFAILS                  = VALUE(FLOAT, "Optional failure parameter");
  LSD_MAT68_UFAILT                  = VALUE(FLOAT, "Optional failure parameter");
  LSD_MAT68_TFAILR                  = VALUE(FLOAT, "Optional failure parameter");
  LSD_MAT68_TFAILS                  = VALUE(FLOAT, "Optional failure parameter");
  LSD_MAT68_TFAILT                  = VALUE(FLOAT, "Optional failure parameter");
  MATL68_FOR                        = VALUE(FLOAT, "Preload force in r-direction");
  MATL68_FOS                        = VALUE(FLOAT, "Preload force in s-direction");
  MATL68_FOT                        = VALUE(FLOAT, "Preload force in t-direction");
  MATL68_MOR                        = VALUE(FLOAT, "Preload moment about r-axis");
  MATL68_MOS                        = VALUE(FLOAT, "Preload moment about s-axis");
  MATL68_MOT                        = VALUE(FLOAT, "Preload moment about t-axis");

  // HM INTERNAL
  optionalCards                     = VALUE(INT, "Optional Card 4");
  optionalCards3                    = VALUE(INT, "Optional Card 5");
  optionalCards4                    = VALUE(INT, "Optional Card 6");

}

SKEYWORDS_IDENTIFIER(COMMON)
{

  KEYWORD_STR                   = 9000;
  CommentEnumField              = 3220;
  Num_Comments                  = 3101;
  LSD_TitleOpt                  = 90;
  Comments                      = 3100;
  Rho                           = 118;
  EncTypeEnumField              = 5828;
  LSD_OPT_MAT68_TKR_curve       = 6042;
  LSD_MAT68_TKR_CURVE           = 6043;
  LSD_MAT68_TKR                 = 2736;
  LSD_OPT_MAT68_TKS_curve       = 6044;
  LSD_MAT68_TKS_CURVE           = 6045;
  LSD_MAT68_TKS                 = 2737;
  LSD_OPT_MAT68_TKT_curve       = 6046;
  LSD_MAT68_TKT_CURVE           = 6047;
  LSD_MAT68_TKT                 = 2738;
  LSD_OPT_MAT68_RKR_curve       = 6048;
  LSD_MAT68_RKR_CURVE           = 6049;
  LSD_MAT68_RKR                 = 2739;
  LSD_OPT_MAT68_RKS_curve       = 6251;
  LSD_MAT68_RKS_CURVE           = 6252;
  LSD_MAT68_RKS                 = 2740;
  LSD_OPT_MAT68_RKT_curve       = 6312;
  LSD_MAT68_RKT_CURVE           = 6313;
  LSD_MAT68_RKT                 = 2741; 
  LSD_MAT68_TDR                 = 2742;
  LSD_MAT68_TDS                 = 2743;
  LSD_MAT68_TDT                 = 2744;
  LSD_MAT68_RDR                 = 2745;
  LSD_MAT68_RDS                 = 2746;
  LSD_MAT68_RDT                 = 2747;
  LSD_MAT68_RYLD                = 6041;
  LSD_LCPDR                     = 2748;
  LSD_LCPDS                     = 2749;
  LSD_LCPDT                     = 2750;
  LSD_LCPMR                     = 2751;
  LSD_LCPMS                     = 2752;
  LSD_LCPMT                     = 2753;
  LSD_MAT68_FFAILR              = 2754;
  LSD_MAT68_FFAILS              = 2755;
  LSD_MAT68_FFAILT              = 2756;
  LSD_MAT68_MFAILR              = 2757;
  LSD_MAT68_MFAILS              = 2758;
  LSD_MAT68_MFAILT              = 2759;
  LSD_MAT68_UFAILR              = 2760;
  LSD_MAT68_UFAILS              = 2761;
  LSD_MAT68_UFAILT              = 2762;
  LSD_MAT68_TFAILR              = 2763;
  LSD_MAT68_TFAILS              = 2764;
  LSD_MAT68_TFAILT              = 2765;
  MATL68_FOR                    = 1064;
  MATL68_FOS                    = 1065;
  MATL68_FOT                    = 1066;
  MATL68_MOR                    = 1067;
  MATL68_MOS                    = 1068;
  MATL68_MOT                    = 1069;

  // HM INTERNAL
  optionalCards                 = 4772;
  optionalCards3                = 6469;
  optionalCards4                = 6470;
}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);

}

GUI(COMMON) 
{


     ASSIGN(KEYWORD_STR, "*MAT_NONLINEAR_PLASTIC_DISCRETE_BEAM");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     RADIO(EncTypeEnumField)
     {
        ADD(0, "Regular");
     }
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
       {
             ASSIGN(KEYWORD_STR, "_TITLE");
       } 
 mandatory:
     SCALAR(Rho)                         { DIMENSION="density";}
 optional:
    FLAG(LSD_OPT_MAT68_TKR_curve);
    if(LSD_OPT_MAT68_TKR_curve == FALSE)
    {
         SCALAR(LSD_MAT68_TKR)               {DIMENSION="stiffness";}
    }
    if(LSD_OPT_MAT68_TKR_curve == TRUE)
    {
        FUNCTION(LSD_MAT68_TKR_CURVE)
        {
          X_TITLE = "Displacement"; X_DIMENSION = "l";
          Y_TITLE = "Force"; Y_DIMENSION = "force";
        }
    }
    FLAG(LSD_OPT_MAT68_TKS_curve);
    if(LSD_OPT_MAT68_TKS_curve == FALSE)
    {
        SCALAR(LSD_MAT68_TKS)                {DIMENSION="stiffness";}
    }
    if(LSD_OPT_MAT68_TKS_curve == TRUE)
    {
        FUNCTION(LSD_MAT68_TKS_CURVE)
        {
          X_TITLE = "Displacement"; X_DIMENSION = "l";
          Y_TITLE = "Force"; Y_DIMENSION = "force";
        }
    }
    FLAG(LSD_OPT_MAT68_TKT_curve);
    if(LSD_OPT_MAT68_TKT_curve == FALSE)
    {
        SCALAR(LSD_MAT68_TKT)                {DIMENSION="stiffness";}
    }
    if(LSD_OPT_MAT68_TKT_curve == TRUE)
    {
        FUNCTION(LSD_MAT68_TKT_CURVE)
        {
          X_TITLE = "Displacement"; X_DIMENSION = "l";
          Y_TITLE = "Force"; Y_DIMENSION = "force";
        }
    }   
    FLAG(LSD_OPT_MAT68_RKR_curve);
    if(LSD_OPT_MAT68_RKR_curve == FALSE)
    {
        SCALAR(LSD_MAT68_RKR)                {DIMENSION="stiffness";}
    }
    if(LSD_OPT_MAT68_RKR_curve == TRUE)
    {
        FUNCTION(LSD_MAT68_RKR_CURVE)
        {
          X_TITLE = "Displacement"; X_DIMENSION = "l";
          Y_TITLE = "Moment"; Y_DIMENSION = "moment";
        }
    }   
    FLAG(LSD_OPT_MAT68_RKS_curve);
    if(LSD_OPT_MAT68_RKS_curve == FALSE)
    {
        SCALAR(LSD_MAT68_RKS)                {DIMENSION="stiffness";}
    }
    if(LSD_OPT_MAT68_RKS_curve == TRUE)
    {
        FUNCTION(LSD_MAT68_RKS_CURVE)
        {
          X_TITLE = "Displacement"; X_DIMENSION = "l";
          Y_TITLE = "Moment"; Y_DIMENSION = "moment";
        }
    }
    FLAG(LSD_OPT_MAT68_RKT_curve);
    if(LSD_OPT_MAT68_RKT_curve == FALSE)
    {
        SCALAR(LSD_MAT68_RKT)                {DIMENSION="stiffness";}
    }
    if(LSD_OPT_MAT68_RKT_curve == TRUE)
    {
        FUNCTION(LSD_MAT68_RKT_CURVE)
        {
          X_TITLE = "Displacement"; X_DIMENSION = "l";
          Y_TITLE = "Moment"; Y_DIMENSION = "moment";
        }
    }   
     SCALAR(LSD_MAT68_TDR)               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT68_TDS)               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT68_TDT)               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT68_RDR)               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT68_RDS)               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT68_RDT)               {DIMENSION="DIMENSIONLESS";}
     RADIO(LSD_MAT68_RYLD)
        {
            ADD(0,"0:Original method of determining plastic yielding");
            ADD(1,"1:Compute yield displacement/rotation");
        }
 optional:
    FUNCTION(LSD_LCPDR)
    {
      X_TITLE = "Plastic disp r-axis"; X_DIMENSION = "l";
      Y_TITLE = "Yield force r-axis"; Y_DIMENSION = "force";
    }
    FUNCTION(LSD_LCPDS)
    {
      X_TITLE = "Plastic disp s-axis"; X_DIMENSION = "l";
      Y_TITLE = "Yield force s-axis"; Y_DIMENSION = "force";
    }
    FUNCTION(LSD_LCPDT)
    {
      X_TITLE = "Plastic disp t-axis"; X_DIMENSION = "l";
      Y_TITLE = "Yield force t-axis"; Y_DIMENSION = "force";
    }
    FUNCTION(LSD_LCPMR)
    {
      X_TITLE = "Plastic rot r-axis"; X_DIMENSION = "a";
      Y_TITLE = "Yield moment t-axis"; Y_DIMENSION = "moment";
    }
    FUNCTION(LSD_LCPMS)
    {
      X_TITLE = "Plastic rot s-axis"; X_DIMENSION = "a";
      Y_TITLE = "Yield moment s-axis"; Y_DIMENSION = "moment";
    }
    FUNCTION(LSD_LCPMT)
    {
      X_TITLE = "Plastic rot t-axis"; X_DIMENSION = "a";
      Y_TITLE = "Yield moment t-axis"; Y_DIMENSION = "moment";
    }
     if(optionalCards == 1)
     {
         SCALAR(LSD_MAT68_FFAILR)            {DIMENSION="force";}
         SCALAR(LSD_MAT68_FFAILS)            {DIMENSION="force";}
         SCALAR(LSD_MAT68_FFAILT)            {DIMENSION="force";}
         SCALAR(LSD_MAT68_MFAILR)            {DIMENSION="moment";}
         SCALAR(LSD_MAT68_MFAILS)            {DIMENSION="moment";}
         SCALAR(LSD_MAT68_MFAILT)            {DIMENSION="moment";}
         if(optionalCards3 == 1)
         {
             SCALAR(LSD_MAT68_UFAILR)            {DIMENSION="l";}
             SCALAR(LSD_MAT68_UFAILS)            {DIMENSION="l";}
             SCALAR(LSD_MAT68_UFAILT)            {DIMENSION="l";}
             SCALAR(LSD_MAT68_TFAILR)            {DIMENSION="a";}
             SCALAR(LSD_MAT68_TFAILS)            {DIMENSION="a";}
             SCALAR(LSD_MAT68_TFAILT)            {DIMENSION="a";}
             if(optionalCards4 == 1)
             {
                 SCALAR(MATL68_FOR)                  {DIMENSION="force";}
                 SCALAR(MATL68_FOS)                  {DIMENSION="force";}
                 SCALAR(MATL68_FOT)                  {DIMENSION="force";}
                 SCALAR(MATL68_MOR)                  {DIMENSION="moment";}
                 SCALAR(MATL68_MOS)                  {DIMENSION="moment";}
                 SCALAR(MATL68_MOT)                  {DIMENSION="moment";}
             }
         }
     }
/*
     graphical SUPPORT("Part(s) to which material is applied") {
     OBJECTS=(/COMPONENT/BEAM,/COMPONENT/SPRING,/COMPONENT/TRUSS,/COMPONENT/RIVET);
     ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    COMMENT("$      MID       RHO       TKR       TKS       TKT       RKR       RKS       RKT");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSD_MAT68_TKR,LSD_MAT68_TKS,LSD_MAT68_TKT,LSD_MAT68_RKR,LSD_MAT68_RKS,LSD_MAT68_RKT);

    COMMENT("$      TDR       TDS       TDT       RDR       RDS       RDT");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT68_TDR,LSD_MAT68_TDS,LSD_MAT68_TDT,LSD_MAT68_RDR,LSD_MAT68_RDS,LSD_MAT68_RDT);

    COMMENT("$    LCPDR     LCPDS     LCPDT     LCPMR     LCPMS     LCPMT");
    CARD("%10d%10d%10d%10d%10d%10d",LSD_LCPDR,LSD_LCPDS,LSD_LCPDT,LSD_LCPMR,LSD_LCPMS,LSD_LCPMT);

    if (optionalCards == 1)
    {
        COMMENT("$   FFAILR    FFAILS    FFAILT    MFAILR    MFAILS    MFAILT");
    }
    FREE_CARD(optionalCards, "%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT68_FFAILR,LSD_MAT68_FFAILS,LSD_MAT68_FFAILT,LSD_MAT68_MFAILR,LSD_MAT68_MFAILS,LSD_MAT68_MFAILT);

    if (optionalCards == 1 && optionalCards3 == 1)
    {
        COMMENT("$   UFAILR    UFAILS    UFAILT    TFAILR    TFAILS    TFAILT");
    }
    if (optionalCards == 1)
    {
        FREE_CARD(optionalCards3, "%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT68_UFAILR,LSD_MAT68_UFAILS,LSD_MAT68_UFAILT,LSD_MAT68_TFAILR,LSD_MAT68_TFAILS,LSD_MAT68_TFAILT);
    }

    if(optionalCards == 1 && optionalCards3 == 1 && optionalCards4 == 1)
    {
        COMMENT("$      FOR       FOS       FOT       MOR       MOS       MOT");
    }
    if (optionalCards == 1 && optionalCards3 == 1)
    {
        FREE_CARD(optionalCards4, "%10lg%10lg%10lg%10lg%10lg%10lg",MATL68_FOR,MATL68_FOS,MATL68_FOT,MATL68_MOR,MATL68_MOS,MATL68_MOT);
    }
}

FORMAT(Keyword971_R12.0) 
{
    COMMENT("$      MID       RHO       TKR       TKS       TKT       RKR       RKS       RKT");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,SCALAR_OR_OBJECT(LSD_OPT_MAT68_TKR_curve,LSD_MAT68_TKR,LSD_MAT68_TKR_CURVE),SCALAR_OR_OBJECT(LSD_OPT_MAT68_TKS_curve,LSD_MAT68_TKS,LSD_MAT68_TKS_CURVE),SCALAR_OR_OBJECT(LSD_OPT_MAT68_TKT_curve,LSD_MAT68_TKT,LSD_MAT68_TKT_CURVE),SCALAR_OR_OBJECT(LSD_OPT_MAT68_RKR_curve,LSD_MAT68_RKR,LSD_MAT68_RKR_CURVE),SCALAR_OR_OBJECT(LSD_OPT_MAT68_RKS_curve,LSD_MAT68_RKS,LSD_MAT68_RKS_CURVE),SCALAR_OR_OBJECT(LSD_OPT_MAT68_RKT_curve,LSD_MAT68_RKT,LSD_MAT68_RKT_CURVE));

    COMMENT("$      TDR       TDS       TDT       RDR       RDS       RDT      RYLD");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT68_TDR,LSD_MAT68_TDS,LSD_MAT68_TDT,LSD_MAT68_RDR,LSD_MAT68_RDS,LSD_MAT68_RDT,LSD_MAT68_RYLD);

    COMMENT("$    LCPDR     LCPDS     LCPDT     LCPMR     LCPMS     LCPMT");
    CARD("%10d%10d%10d%10d%10d%10d",LSD_LCPDR,LSD_LCPDS,LSD_LCPDT,LSD_LCPMR,LSD_LCPMS,LSD_LCPMT);

    if (optionalCards == 1)
    {
        COMMENT("$   FFAILR    FFAILS    FFAILT    MFAILR    MFAILS    MFAILT");
    }
    FREE_CARD(optionalCards, "%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT68_FFAILR,LSD_MAT68_FFAILS,LSD_MAT68_FFAILT,LSD_MAT68_MFAILR,LSD_MAT68_MFAILS,LSD_MAT68_MFAILT);

    if (optionalCards == 1 && optionalCards3 == 1)
    {
        COMMENT("$   UFAILR    UFAILS    UFAILT    TFAILR    TFAILS    TFAILT");
    }
    if (optionalCards == 1)
    {
        FREE_CARD(optionalCards3, "%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT68_UFAILR,LSD_MAT68_UFAILS,LSD_MAT68_UFAILT,LSD_MAT68_TFAILR,LSD_MAT68_TFAILS,LSD_MAT68_TFAILT);
    }

    if(optionalCards == 1 && optionalCards3 == 1 && optionalCards4 == 1)
    {
        COMMENT("$      FOR       FOS       FOT       MOR       MOS       MOT");
    }
    if (optionalCards == 1 && optionalCards3 == 1)
    {
        FREE_CARD(optionalCards4, "%10lg%10lg%10lg%10lg%10lg%10lg",MATL68_FOR,MATL68_FOS,MATL68_FOT,MATL68_MOR,MATL68_MOS,MATL68_MOT);
    }
}
