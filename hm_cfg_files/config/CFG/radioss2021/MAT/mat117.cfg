//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 117 Setup File
// 

// MCDS attributes description
ATTRIBUTES(COMMON) {

    KEYWORD_STR                     = VALUE(STRING,"Solver Keyword");
    MAT_RHO                         = VALUE(FLOAT, "Initial Density");
    MAT_E_ELAS_N                    = VALUE(FLOAT, "Stiffness normal to the plane of the cohesive element");
    MAT_E_ELAS_S                    = VALUE(FLOAT, "Stiffness in to the plane of the cohesive element");
//
    MAT_TMAX_N                      = VALUE(FLOAT, "Peak traction in normal direction");
    MAT_TMAX_S                      = VALUE(FLOAT, "Peak traction in tangential direction");
//
    MAT_IRUPT                       = VALUE(INT,   "Choice of propagation criteria ");
    MAT_IMASS                       = VALUE(INT,   "Density definition flag");
    MAT_IDEL                        = VALUE(INT,   "Nb integration points to fail");
//
    MAT_GIC                         = VALUE(FLOAT, "Energy release rate for mode I");
    MAT_GIIC                        = VALUE(FLOAT, "Energy release rate for mode II");
//
    MAT_EXP_G                     = VALUE(FLOAT, "Mu, Power law exponent ");
    MAT_EXP_BK                    = VALUE(FLOAT, "Mu, Benzeggagh-Kenane exponent ");
    MAT_GAMMA                     = VALUE(INT,   "Gamma exponent for Benseggagh-Kenane law");
//
    
     //
    LAW_NO                          = VALUE(STRING, "");
    Mat_Name_OR_LawNo               = VALUE(INT,  "RADIOSS_COMMENT_FLAG");
    IO_FLAG                         = VALUE(INT, "");
    TITLE                           = VALUE(STRING,"");
}
CHECK( COMMON)
{
    MAT_RHO                            >  0.0   ;
    MAT_E_ELAS_N                       >  0.0   ;
    MAT_E_ELAS_S                       >  0.0   ;
    MAT_TMAX_N                         >  0.0   ;
    MAT_TMAX_S                         >  0.0   ;
    MAT_GIC                            >  0.0   ;
    MAT_GIIC                           >  0.0   ;
    MAT_EXP_G                          >  0.0   ;
    MAT_EXP_BK                         >  0.0   ;   
}

DEFAULTS(COMMON)
{
    MAT_IMASS                        = 1    ;
    MAT_GAMMA                        = 1    ;
    MAT_IDEL                         = 1    ;
}

// GUI description (Common domain)

GUI(COMMON) {
 
 mandatory:
    SCALAR(MAT_RHO)         { DIMENSION="density"        ;}
    SCALAR(MAT_E_ELAS_N)    { DIMENSION="PRESSURE PER UNIT LENGTH";}
    SCALAR(MAT_E_ELAS_S)    { DIMENSION="PRESSURE PER UNIT LENGTH";}
    SCALAR(MAT_TMAX_N)      { DIMENSION="pressure"       ;}
    SCALAR(MAT_TMAX_S)      { DIMENSION="pressure"       ;}

    SCALAR(MAT_GIC)         { DIMENSION="lineic_force"   ;}          
    SCALAR(MAT_GIIC)        { DIMENSION="lineic_force"   ;}          
          
    SCALAR(MAT_EXP_G)     { DIMENSION="lineic_force"   ;}          
    SCALAR(MAT_EXP_BK)    { DIMENSION="lineic_force"   ;}          
 optional:
    RADIO(MAT_IMASS)
    {
        ADD(1,"1: Element Mass is Calculated Using Density and mean Area");
        ADD(2,"0: Element Mass is Calculated Using Density and Volume");
    }

 optional:
    RADIO(MAT_IRUPT)
    {
        ADD(1,"1: Power law propagation criterion");
        ADD(2,"2: Benzeggagh-Kenane propagation criterion");
    }
}


// File format

FORMAT(radioss2021) {

ASSIGN(IO_FLAG, 0, EXPORT);
ASSIGN(IO_FLAG, 1,IMPORT);
if(IO_FLAG == 0)
{    HEADER("/MAT/LAW117/%d",_ID_);
    CARD("%-100s", TITLE);
}        
    COMMENT("#        Init. dens.");
    CARD("%20lg",MAT_RHO);
    //
    COMMENT("#                 EN                  ES     Imass      Idel");
    CARD("%20lg%20lg%10d%10d",  MAT_E_ELAS_N,MAT_E_ELAS_S,MAT_IMASS,MAT_IDEL);
    //
    COMMENT("#                 TN                  TS     Irupt     GAMMA");
    CARD("%20lg%20lg%10d%10d", MAT_TMAX_N,MAT_TMAX_S,MAT_IRUPT,MAT_GAMMA);
    //
    COMMENT("#                GIC                GIIC               EXP_G              EXP_BK");
    CARD("%20lg%20lg%20lg%20lg", MAT_GIC,MAT_GIIC,MAT_EXP_G,MAT_EXP_BK);
}
