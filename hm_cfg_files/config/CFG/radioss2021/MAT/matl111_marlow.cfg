//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- mat_law111.cfg ---

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES

    //Card 1
    TITLE                       = VALUE(STRING, "Material title");

    //Card 2
    MAT_RHO                     = VALUE(FLOAT,  "Initial Density");

    //Card 3
    Itype                       = VALUE(INT,    "Type of test data (stress strain curve)");
    FUN_A1                      = VALUE(FUNCT,  "Function identifier defining engineer stress vs engineer strain ");
    MAT_FScale                  = VALUE(FLOAT,  "Scale factor for ordinate (stress) in function FUN_A1");
    MAT_NU                          = VALUE(FLOAT,"Poisson's Ratio");

    //HM INTERNAL
    KEYWORD_STR                 = VALUE(STRING, "Solver Keyword");
    DUMMY                       = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    Mat_Name_OR_LawNo           = VALUE(INT,  "RADIOSS_COMMENT_FLAG");
    LAW_NO                      = VALUE(STRING, "");
    IO_FLAG                     = VALUE(INT,    "IO_FLAG");
    NUM_COMMENTS                = SIZE("NUM_COMMENTS");
    CommentEnumField            = VALUE(INT, "User Comments");
    COMMENTS                    = ARRAY[NUM_COMMENTS](STRING, "Entity Comments");
    Heat_Inp_opt                    = VALUE(INT, "Heat");
    SUBGRP_HEAT_MAT                 = VALUE(SUBOBJECT, "");
    THERM_STRESS                    = VALUE(INT, "Therm Stress");
    SUBGRP_THERM_STRESS             = VALUE(SUBOBJECT, "");
    VISC_PRONY_option               = VALUE(INT,"Visc Prony");
    SUBGRP_VISC_PRONY               = VALUE(SUBOBJECT, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES

    //Card 1
    TITLE                       = -1;

    //Card 2
    MAT_RHO                     = 118;

    //Card 3
    Itype                       = 5107;
    FUN_A1                      = 45;
    MAT_FScale                  = 4092;
    MAT_NU                      = 120;

    //HM INTERNAL
    KEYWORD_STR                 = 9000;
    DUMMY                       = -1;
    Mat_Name_OR_LawNo           = 4538;
    LAW_NO                      = -1;
    IO_FLAG                     = -1;
    COMMENTS                    = 5109;
    CommentEnumField            = 7951;
    NUM_COMMENTS                = 5110;
    //HEAT
    Heat_Inp_opt                            = 4346;
    SUBGRP_HEAT_MAT                         = -1;
    // THERM_STRESS
    THERM_STRESS                            = 4555;
    SUBGRP_THERM_STRESS                     = -1;
    // VISC_PRONY
    VISC_PRONY_option                       = 4707;
    SUBGRP_VISC_PRONY                       = -1;
}

CHECK(COMMON)
{
    MAT_RHO                         > 0.0; 
    MAT_NU                          >= 0.0;
}

DEFAULTS(COMMON)
{
    Itype                       = 1;
    MAT_NU              = 0.495;
    MAT_FScale                  = 1.0;
}
DRAWABLES(COMMON) 
{
public:
    INITIAL_DENSITY = SCALAR(MAT_RHO);
    POISSON_RATIO   = SCALAR(MAT_NU);
}


GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }
    if(Mat_Name_OR_LawNo == 2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW111/");
    }
    else 
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/MARLOW/");
    }
    mandatory:
    SCALAR(MAT_RHO)               { DIMENSION = "density"; }
    optional:
    RADIO(Itype)
    {
        ADD(1,      "1: Uniaxial data Test");
        ADD(2,      "2: Equibiaxial data test");
        ADD(3,      "3: Planar data test");
    }
    DATA(FUN_A1);
    SCALAR(MAT_FScale)                      { DIMENSION = "pressure" ; }
    SCALAR(MAT_NU)       {DIMENSION="DIMENSIONLESS";}
        graphical FLAG(Heat_Inp_opt);
        if (Heat_Inp_opt!= 0) {
            SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
        }
        graphical FLAG(THERM_STRESS);
        if (THERM_STRESS!= 0) {
            SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
        }
        if(VISC_PRONY_option!=0)
        {
            SUBOBJECT(SUBGRP_VISC_PRONY) {SUBTYPES = (/SUBOBJECT/VISC);}
        } 
}

FORMAT(radioss2021)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW111/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/MARLOW/%d",_ID_);
        CARD("%-100s", TITLE);
    }

    //Card 2
    COMMENT("#              Rho_i");
    CARD("%20lg", MAT_RHO);

    //Card 3
    COMMENT("#    Itype   Func_ID              Fscale                  Nu");
    CARD("%10d%10d%20lg%20lg", Itype, FUN_A1, MAT_FScale, MAT_NU);
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
    if(VISC_PRONY_option!=0)
    {
        SUBOBJECTS(SUBGRP_VISC_PRONY,/SUBOBJECT/VISC);
    }
}
