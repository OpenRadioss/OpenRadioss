//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.

// Material law 115 : Deshpande-Fleck Foam

ATTRIBUTES(COMMON) {

    KEYWORD_STR                 = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                = SIZE("NUM_COMMENTS");
    CommentEnumField            = VALUE(INT,"User Comments");
    COMMENTS                    = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    MAT_RHO                     = VALUE(FLOAT,"Initial Density");
    Refer_Rho                   = VALUE(FLOAT,"Reference Density (for lower than 14.0 version)");
    DUMMY                       = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    MAT_REFRHO_Option           = VALUE(INT, "RefRho_Option");
    MAT_E                       = VALUE(FLOAT,"Young's Modulus");
    MAT_NU                      = VALUE(FLOAT,"Poisson's ratio");
    MAT_ALPHA                   = VALUE(FLOAT,"Yield function shape parameter");
    MAT_GAMMA                   = VALUE(FLOAT,"Linear hardening modulus");
    MAT_EPSD                    = VALUE(FLOAT,"Densification strain");
    MAT_ALPHA2                  = VALUE(FLOAT,"Non-linear hardening modulus");
    MAT_BETA                    = VALUE(FLOAT,"Non-linear hardening exponent"); 
    MAT_SIGP                    = VALUE(FLOAT,"Initial yield stress");   
    MAT_CFAIL                   = VALUE(FLOAT,"Tensile volumetric strain at failure");    
    MAT_PFAIL                   = VALUE(FLOAT,"Maximum principal stress at failure");    
    // Statistical parameters
    MAT_RHOF0                   = VALUE(FLOAT,"Density of the base material");  
    MAT_SIGP_C0                 = VALUE(FLOAT,"Initial yield stress statistic parameter C0");   
    MAT_SIGP_C1                 = VALUE(FLOAT,"Initial yield stress statistic parameter C1");  
    MAT_SIGP_N                  = VALUE(FLOAT,"Initial yield stress statistic exponent  N");  
    MAT_ALPHA2_C0               = VALUE(FLOAT,"Non-linear hardening modulus statistic parameter C0");
    MAT_ALPHA2_C1               = VALUE(FLOAT,"Non-linear hardening modulus statistic parameter C1");
    MAT_ALPHA2_N                = VALUE(FLOAT,"Non-linear hardening modulus statistic exponent  N");
    MAT_GAMMA_C0                = VALUE(FLOAT,"Linear hardening modulus statistic parameter C0");
    MAT_GAMMA_C1                = VALUE(FLOAT,"Linear hardening modulus statistic parameter C1");
    MAT_GAMMA_N                 = VALUE(FLOAT,"Linear hardening modulus statistic exponent  N");
    MAT_BETA_C0                 = VALUE(FLOAT,"Non-linear hardening exponent statistic parameter C0"); 
    MAT_BETA_C1                 = VALUE(FLOAT,"Non-linear hardening exponent statistic parameter C1"); 
    MAT_BETA_N                  = VALUE(FLOAT,"Non-linear hardening exponent statistic exponent  N"); 
    // Choice between Vegter and Vegter Lite
    MAT_IRES                    = VALUE(INT,  "Return mapping algorithm flag");   
    // Choice between Vegter and Vegter Lite
    MAT_ISTAT                   = VALUE(INT,  "Statistical variation flag");   
    // THERM_STRESS
    THERM_STRESS                = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS         = VALUE(SUBOBJECT, "");
    //
    IO_FLAG                     = VALUE(INT, "");
    LAW_NO                      = VALUE(STRING, "");
    Mat_Name_OR_LawNo           = VALUE(INT,  "RADIOSS_COMMENT_FLAG");
    TITLE                       = VALUE(STRING,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                 = 9000;
    COMMENTS                    = 5109;
    CommentEnumField            = 7951;
    MAT_REFRHO_Option           = 4285;
    MAT_RHO                     = 118;
    Refer_Rho                   = 4229;
    MAT_E                       = -1;
    MAT_NU                      = -1;
    MAT_ALPHA                   = -1;
    MAT_GAMMA                   = -1;
    MAT_EPSD                    = -1;
    MAT_ALPHA2                  = -1;
    MAT_BETA                    = -1;
    MAT_SIGP                    = -1;   
    MAT_CFAIL                   = -1;   
    MAT_PFAIL                   = -1; 
    MAT_RHOF0                   = -1;        
    MAT_SIGP_C0                 = -1;     
    MAT_SIGP_C1                 = -1;   
    MAT_SIGP_N                  = -1;   
    MAT_ALPHA2_C0               = -1;   
    MAT_ALPHA2_C1               = -1;   
    MAT_ALPHA2_N                = -1;   
    MAT_GAMMA_C0                = -1;   
    MAT_GAMMA_C1                = -1;   
    MAT_GAMMA_N                 = -1;   
    MAT_BETA_C0                 = -1;    
    MAT_BETA_C1                 = -1;   
    MAT_BETA_N                  = -1;   
    // Choice between Vegter and Vegter Lite
    MAT_IRES                    = -1;
    // Choice between Vegter and Vegter Lite
    MAT_ISTAT                   = -1; 
    // THERM_STRESS
    THERM_STRESS                = 4555;
    SUBGRP_THERM_STRESS         = -1;
    DUMMY                       = -1;
    //
    LAW_NO                      = -1;
    Mat_Name_OR_LawNo           = 4538;
    IO_FLAG                     = -1;
    TITLE                       = -1;
}

CHECK(COMMON)
{
    MAT_RHO                     >0.0;
    MAT_NU                    >= 0.0;
    MAT_NU                    <  0.5;
    MAT_E                      > 0.0;
}

DEFAULTS(COMMON)
{
}

DRAWABLES(COMMON) 
{
public:
    INITIAL_DENSITY   = SCALAR(MAT_RHO);
    YOUNG_MODULUS     = SCALAR(MAT_E);
    POISSON_RATIO     = SCALAR(MAT_NU);
}

GUI(COMMON) 
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if(Mat_Name_OR_LawNo == 2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW115/");
    }
    else 
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/DESHFLECK/");
    }
    FLAG(MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho)      { DIMENSION="density";       }
    }
mandatory:
    SCALAR(MAT_RHO)      { DIMENSION="density";          }
    SCALAR(MAT_E)        { DIMENSION="pressure";         }
    SCALAR(MAT_IRES)     { DIMENSION="DIMENSIONLESS";    }
    SCALAR(MAT_ISTAT)    { DIMENSION="DIMENSIONLESS";    }
optional:
    SCALAR(MAT_NU);
mandatory:
    SCALAR(MAT_ALPHA)    { DIMENSION="DIMENSIONLESS";    }
    SCALAR(MAT_GAMMA)    { DIMENSION="pressure";         }
    SCALAR(MAT_EPSD)     { DIMENSION="DIMENSIONLESS";    }
    SCALAR(MAT_ALPHA2)   { DIMENSION="pressure";         }
    SCALAR(MAT_BETA )    { DIMENSION="DIMENSIONLESS";    }
    SCALAR(MAT_SIGP)     { DIMENSION="pressure";         }
    SCALAR(MAT_CFAIL)    { DIMENSION="DIMENSIONLESS";    }
    SCALAR(MAT_PFAIL)    { DIMENSION="pressure";         }
    SCALAR(MAT_RHOF0)    { DIMENSION="density";          }
    SCALAR(MAT_SIGP_C0)  { DIMENSION="pressure";         }
    SCALAR(MAT_SIGP_C1)  { DIMENSION="pressure";         }
    SCALAR(MAT_SIGP_N)   { DIMENSION="DIMENSIONLESS";    } 
    SCALAR(MAT_ALPHA2_C0){ DIMENSION="pressure";         }
    SCALAR(MAT_ALPHA2_C1){ DIMENSION="pressure";         }
    SCALAR(MAT_ALPHA2_N) { DIMENSION="DIMENSIONLESS";    }
    SCALAR(MAT_GAMMA_C0) { DIMENSION="pressure";         }
    SCALAR(MAT_GAMMA_C1) { DIMENSION="pressure";         }
    SCALAR(MAT_GAMMA_N)  { DIMENSION="DIMENSIONLESS";    }
    SCALAR(MAT_BETA_C0)  { DIMENSION="DIMENSIONLESS";    }
    SCALAR(MAT_BETA_C1)  { DIMENSION="DIMENSIONLESS";    }
    SCALAR(MAT_BETA_N)   { DIMENSION="DIMENSIONLESS";    }    
optional:
    // HEAT data
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
}
// File format
FORMAT(radioss2021)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW115/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/DESHFLECK/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    COMMENT("#              RHO_I");
    CARD("%20lg",MAT_RHO);
    //
    COMMENT("#                  E                  nu      Ires     Istat");
    CARD("%20lg%20lg%10d%10d",MAT_E,MAT_NU,MAT_IRES,MAT_ISTAT);
    //
    if (MAT_ISTAT==0)   
    { 
      //
      COMMENT("#              ALPHA             EPSVP_F              SIGP_F");
      CARD("%20lg%20lg%20lg",MAT_ALPHA,MAT_CFAIL,MAT_PFAIL);
      //
      COMMENT("#               SIGP               GAMMA                EPSD              ALPHA2                BETA");
      CARD("%20lg%20lg%20lg%20lg%20lg",MAT_SIGP,MAT_GAMMA,MAT_EPSD,MAT_ALPHA2,MAT_BETA);  
    }
    else
    {
      //
      COMMENT("#              ALPHA             EPSVP_F              SIGP_F               RHOF0");
      CARD("%20lg%20lg%20lg%20lg",MAT_ALPHA,MAT_CFAIL,MAT_PFAIL,MAT_RHOF0);
      //
      COMMENT("#            SIGP_C0             SIGP_C1              SIGP_N");
      CARD("%20lg%20lg%20lg",MAT_SIGP_C0,MAT_SIGP_C1,MAT_SIGP_N);  
      //
      COMMENT("#          ALPHA2_C0           ALPHA2_C1            ALPHA2_N");
      CARD("%20lg%20lg%20lg",MAT_ALPHA2_C0,MAT_ALPHA2_C1,MAT_ALPHA2_N);  
      //
      COMMENT("#           GAMMA_C0            GAMMA_C1             GAMMA_N");
      CARD("%20lg%20lg%20lg",MAT_GAMMA_C0,MAT_GAMMA_C1,MAT_GAMMA_N);  
      //
      COMMENT("#        INV_BETA_C0         INV_BETA_C1          INV_BETA_N");
      CARD("%20lg%20lg%20lg",MAT_BETA_C0,MAT_BETA_C1,MAT_BETA_N);  
    }
}
