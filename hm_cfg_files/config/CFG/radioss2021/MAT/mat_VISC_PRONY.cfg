//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Material Visc_Prony
ATTRIBUTES(COMMON) 
{
    IO_FLAG         = VALUE(INT, "");
    Model_Order     = SIZE("Maxwell Model Order");
    MAT_K           = VALUE(FLOAT,"Viscous Bulk Modulus");
    Fport1          = ARRAY[Model_Order](FLOAT,"Shear Relaxation Modulus");
    Fporp1          = ARRAY[Model_Order](FLOAT,"Decay Shear Constant");
    Ki              = ARRAY[Model_Order](FLOAT,"Bulk Relaxation Modulus");
    Beta_ki         = ARRAY[Model_Order](FLOAT,"Decay Bulk Constant");
    Fct_G           = VALUE(FUNCT,"Tabulated function ID for shear modulus relaxation test data");
    Fct_Gs          = VALUE(FUNCT,"Tabulated function ID for shear storage modulus test data");
    Fct_Gl          = VALUE(FUNCT,"Tabulated function ID for shear loss modulus test data");
    Fct_K           = VALUE(FUNCT,"Tabulated function ID for bulk modulus relaxation test data");
    Fct_Ks          = VALUE(FUNCT,"Tabulated function ID for bulk storage modulus test data");
    Fct_Kl          = VALUE(FUNCT,"Tabulated function ID for bulk loss modulus test data");
    //
    XGscale         = VALUE(FLOAT,"Time scale factor for Shear modulus relaxation test data function");
    YGscale         = VALUE(FLOAT,"Scale factor for Shear modulus relaxation test data function"); 
    XKscale         = VALUE(FLOAT,"Time scale factor for Bulk modulus relaxation test data function");  
    YKscale         = VALUE(FLOAT,"Scale factor for Bulk modulus relaxation test data function");
    //
    XGs_scale       = VALUE(FLOAT,"Frequency scale factor for Shear storage modulus test data function");
    YGs_scale       = VALUE(FLOAT,"Scale factor for Shear storage modulus test data function");
    XGl_scale       = VALUE(FLOAT,"Frequency scale factor for Shear loss modulus test data function");
    YGl_scale       = VALUE(FLOAT,"Scale factor for Shear loss modulus test data function");
    //
    XKs_scale       = VALUE(FLOAT,"Frequency scale factor for Bulk storage modulus test data function");
    YKs_scale       = VALUE(FLOAT,"Scale factor for Bulk storage modulus test data function"); 
    XKl_scale       = VALUE(FLOAT,"Frequency scale factor for Bulk loss modulus test data function");
    YKl_scale       = VALUE(FLOAT,"Scale factor for Bulk loss modulus test data function");
    //
    MAT_Itab        = VALUE(INT,"Flag for tabulated inputs");
    MAT_Ishape      = VALUE(INT,"Flag for the tabulated prony series shape");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    IO_FLAG         = -1;
    Model_Order     = 2907;
    MAT_K           = 998;
    Fport1          = 4119;
    Fporp1          = 4120;
    Ki              = 2723;
    Beta_ki         = 2724;
    Fct_G           = -1;
    Fct_Gs          = -1;
    Fct_Gl          = -1;
    Fct_K           = -1;
    Fct_Ks          = -1;
    Fct_Kl          = -1;
    XGscale         = -1;
    YGscale         = -1;
    XKscale         = -1;
    YKscale         = -1;
    XGs_scale       = -1;
    YGs_scale       = -1;    
    XGl_scale       = -1;
    YGl_scale       = -1;
    XKs_scale       = -1;
    YKs_scale       = -1;    
    XKl_scale       = -1;
    YKl_scale       = -1;
    MAT_Itab        = -1; 
    MAT_Ishape      = -1; 
}

DEFAULTS(COMMON)
{
    Model_Order     = 0;
    MAT_K           = 0;
}

CHECK(COMMON)
{
    Model_Order         >  0;
    Model_Order         <= 100;
}

GUI(COMMON) 
{
mandatory:
    SIZE(Model_Order);
    SCALAR(MAT_K)     {DIMENSION = "dynamicviscosity"; }
    SCALAR(XGscale)   {DIMENSION = "t"; }
    SCALAR(YGscale)   {DIMENSION = "pressure"; }
    SCALAR(XKscale)   {DIMENSION = "t"; }
    SCALAR(YKscale)   {DIMENSION = "pressure"; }
    SCALAR(XGs_scale) {DIMENSION = "f"; }
    SCALAR(YGs_scale) {DIMENSION = "pressure"; }
    SCALAR(XGl_scale) {DIMENSION = "f"; }
    SCALAR(YGl_scale) {DIMENSION = "pressure"; }    
    SCALAR(XKs_scale) {DIMENSION = "f"; }
    SCALAR(YKs_scale) {DIMENSION = "pressure"; }
    SCALAR(XKl_scale) {DIMENSION = "f"; }
    SCALAR(YKl_scale) {DIMENSION = "pressure"; } 
    if( Model_Order > 0 && Model_Order <= 100)
    {
        ARRAY(Model_Order,"Strain rate") 
        {
            SCALAR(Fport1)  {DIMENSION = "pressure"; }
            SCALAR(Fporp1)  {DIMENSION = "strain_rate"; }
            SCALAR(Ki)      {DIMENSION = "pressure"; }
            SCALAR(Beta_ki) {DIMENSION = "strain_rate"; }
        }
    }
}

FORMAT(radioss2021) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 0)
    {
        HEADER("/VISC/PRONY/%d",_ID_);
    }
    COMMENT("#        M                           K_v      Itab    Ishape");
    CARD("%10d          %20lg%10d%10d",Model_Order,MAT_K,MAT_Itab,MAT_Ishape);
    if (MAT_Itab == 1) {
      COMMENT("#  Ifunc_G             XGscale             YGscale");
      CARD("%10d%20lg%20lg",Fct_G,XGscale,YGscale);    
      COMMENT("#  Ifunc_K             XKscale             YKscale");
      CARD("%10d%20lg%20lg",Fct_K,XKscale,YKscale);    
    }
    else if (MAT_Itab == 2) {
      COMMENT("# Ifunc_Gs           XGs_scale           YGs_scale");
      CARD("%10d%20lg%20lg",Fct_Gs,XGs_scale,YGs_scale);  
      COMMENT("# Ifunc_Gl           XGl_scale           YGl_scale");
      CARD("%10d%20lg%20lg",Fct_Gl,XGl_scale,YGl_scale);    
      COMMENT("# Ifunc_Ks           XKs_scale           YKs_scale");
      CARD("%10d%20lg%20lg",Fct_Ks,XKs_scale,YKs_scale); 
      COMMENT("# Ifunc_Kl           XKl_scale           YKl_scale");
      CARD("%10d%20lg%20lg",Fct_Kl,XKl_scale,YKl_scale);      
    }
    else {
      if( Model_Order > 0 && Model_Order <= 100)
      {
          COMMENT("#                G_i              Beta_i                  Ki             Beta_ki");
          CARD_LIST(Model_Order)
          {
              CARD("%20lg%20lg%20lg%20lg",Fport1,Fporp1,Ki,Beta_ki);
          }
      }
    }
}
FORMAT(radioss2019) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 0)
    {
        HEADER("/VISC/PRONY/%d",_ID_);
    }
    COMMENT("#        M                           K_v");
    CARD("%10d          %20lg",Model_Order,MAT_K);
    if( Model_Order > 0 && Model_Order <= 100)
    {
        COMMENT("#                G_i              Beta_i                  Ki             Beta_ki");
        CARD_LIST(Model_Order)
        {
            CARD("%20lg%20lg%20lg%20lg",Fport1,Fporp1,Ki,Beta_ki);
        }
    }
}
FORMAT(radioss110) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 0)
    {
        HEADER("/VISC/PRONY/%d",_ID_);
    }
    COMMENT("#        M                           K_v");
    CARD("%10d          %20lg",Model_Order,MAT_K);
    if( Model_Order > 0 && Model_Order <= 100)
    {
        COMMENT("#                G_i              Beta_i");
        CARD_LIST(Model_Order)
        {
            CARD("%20lg%20lg",Fport1,Fporp1);
        }
    }
}
