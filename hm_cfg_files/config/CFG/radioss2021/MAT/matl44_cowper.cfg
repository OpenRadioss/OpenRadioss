//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 44 (COWPER) Setup File
// 

// MCDS attributes description
ATTRIBUTES(COMMON) {
    // Initial and reference densities
    MAT_RHO                         = VALUE(FLOAT,"Initial Density");
    Refer_Rho                       = VALUE(FLOAT,"Reference Density (for lower than 14.0 version)");
    DUMMY                           = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    MAT_REFRHO_Option               = VALUE(INT, "RefRho_Option");
    MAT_E                           = VALUE(FLOAT, "Young's Modulus");
    MAT_NU                          = VALUE(FLOAT, "Poisson's Ratio");
    MAT_SIGY                        = VALUE(FLOAT, "Plasticity Yield Stress");
    MAT_B                           = VALUE(FLOAT, "Plasticity Hardening Parameter");
    MAT_N                           = VALUE(FLOAT, "Plasticity Hardening Exponent");
    MAT_HARD                        = VALUE(FLOAT, "Plasticity Iso-Kinematic Hardening Factor");
    MAT_SIG                         = VALUE(FLOAT, "Plasticity Maximum Stress");
    MAT_SRC                         = VALUE(FLOAT, "Strain Rate Coefficient");
    MAT_SRE                         = VALUE(FLOAT, "Strain Rate Exponent");
    STRFLAG                         = VALUE(INT,   "Strain Rate Computation Flag");
    Fsmooth                         = VALUE(INT,   "Smooth Strain Rate Option Flag");
    Fcut                            = VALUE(FLOAT, "Cutoff Frequency for Strain Rate Filtering");
    Vflag                           = VALUE(INT,   "Strain Rate Choice Flag");
    //
    MAT_EPS                         = VALUE(FLOAT, "Failure Plastic Strain");
    MAT_ETA1                        = VALUE(FLOAT, "Tensile Failure Strain 1");
    MAT_ETA2                        = VALUE(FLOAT, "Tensile Failure Strain 2");
    //
    YLD_FUNC                        = VALUE(FUNCT,   "Yield function identifier");
    YLD_SCALE                       = VALUE(FLOAT, "Yield function scale factor");    

    //Attributes for HM usage
    IO_FLAG                         = VALUE(INT, "");
    LAW_NO                          = VALUE(STRING, "");
    Mat_Name_OR_LawNo               = VALUE(INT,  "RADIOSS_COMMENT_FLAG");
    TITLE                           = VALUE(STRING,"");
    // Support
    // NB_PARTS                     = SIZE("Number of Connected Parts"); 
    //COMPONENT                     = ARRAY[NB_PARTS](COMPONENT,"Connected Parts");
    KEYWORD_STR                     = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                    = SIZE("NUM_COMMENTS");
    CommentEnumField                = VALUE(INT,"User Comments");
    COMMENTS                        = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    // HEAT
    Heat_Inp_opt                    = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT                 = VALUE(SUBOBJECT, "");
    // THERM_STRESS
    THERM_STRESS                    = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS             = VALUE(SUBOBJECT, "");
    Optional_card                   = VALUE(INT,   "Optional card");
}


SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                     = 9000;
    COMMENTS                        = 5109;
    CommentEnumField                = 7951;
    MAT_REFRHO_Option               = 4285;
    MAT_RHO                         = 118;
    Refer_Rho                       = 4229;
    MAT_E                           = 119;
    MAT_NU                          = 120;
    Fcut                            = 5356;
    Fsmooth                         = 5355;
    MAT_B                           = 995;
    MAT_EPS                         = 195;
    MAT_ETA1                        = 1130;
    MAT_ETA2                        = 343;
    MAT_HARD                        = 71;
    MAT_N                           = 5037;
    MAT_SIG                         = 5038;
    MAT_SIGY                        = 152;
    MAT_SRC                         = 155;
    MAT_SRE                         = 158;
    STRFLAG                         = 5039;
    NUM_COMMENTS                    = 5110;
    Vflag                           = 5113; 
    YLD_FUNC                        = 5116; 
    YLD_SCALE                       = 5117; 
    //HEAT
    Heat_Inp_opt                    = 4346;
    SUBGRP_HEAT_MAT                 = -1;
    // THERM_STRESS
    THERM_STRESS                    = 4555;
    SUBGRP_THERM_STRESS             = -1;
    DUMMY                           = -1;

    LAW_NO                          = -1;
    Mat_Name_OR_LawNo               = 4538;
    IO_FLAG                         = -1;
    TITLE                           = -1;
    Optional_card                   = 4826;
}

CHECK(COMMON)
{
    MAT_B                           >= 0.0;
    MAT_E                           > 0.0;
    MAT_EPS                         >= 0.0;
    MAT_ETA1                        >= 0.0;
    MAT_ETA2                        >= 0.0;
    MAT_HARD                        >= 0;
    MAT_HARD                        <= 1;
    MAT_N                           >= 0.0;
    MAT_N                           <= 1.0;
    MAT_NU                          >= 0.0;
    MAT_NU                          <  0.5;
    MAT_RHO                         >  0.0;
    MAT_SIG                         >= 0.0;
    MAT_SIGY                        >  0.0;
}

DEFAULTS(COMMON)
{
    Fcut                            = 10E30;
    MAT_EPS                         = 10E30;
    MAT_ETA1                        = 10E30;
    MAT_ETA2                        = 2.1E30;
    MAT_HARD                        = 0.0;
    MAT_N                           = 1.0;
    MAT_SIG                         = 10E30;
    YLD_SCALE                       = 1.0;
}

// Drawable values
DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY                 = SCALAR(MAT_RHO);
    YOUNG_MODULUS                   = SCALAR(MAT_E);
    POISSON_RATIO                   = SCALAR(MAT_NU);
public:
    SOUND_SPEED                     = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                               = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                              = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID               = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}

// GUI description (Common domain)
GUI(COMMON) {
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if(Mat_Name_OR_LawNo == 2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW44/");
    }
    else 
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/COWPER/");
    }
    FLAG(MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho)   { DIMENSION="density";    }
    }
mandatory:
    SCALAR(MAT_RHO)         { DIMENSION="density";    }
    //
    SCALAR(MAT_E)           { DIMENSION="pressure";      }
optional:
    SCALAR(MAT_NU);
    //
mandatory:
    SCALAR(MAT_SIGY)        { DIMENSION="pressure";      }
optional:
    SCALAR(MAT_B)           { DIMENSION="pressure";      }
    SCALAR(MAT_N)           { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(MAT_HARD)        { DIMENSION="pressure"; }
    SCALAR(MAT_SIG)         { DIMENSION="pressure";      }
    //
    SCALAR(MAT_SRC)         { DIMENSION="f";     }
    SCALAR(MAT_SRE)         { DIMENSION = "DIMENSIONLESS"; }
    RADIO(STRFLAG,"Strain rate computation") {
        ADD(0, "0: Default, Set to 1");
        ADD(1, "1: Strain Rate Effect on SIG_max0");
        ADD(2, "2: No Strain Rate Effect on SIG_max0");
    }
    RADIO(Fsmooth,"Strain rate computation") {
        ADD(0, "0: Strain Rate Smoothing is Inactive(default)");
        ADD(1, "1: Strain Rate Smoothing is Active");
    }
    SCALAR(Fcut)           { DIMENSION="f";     }
    SCALAR(Vflag)          { DIMENSION = "DIMENSIONLESS"; }
    //
    SCALAR(MAT_EPS)        { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(MAT_ETA1)       { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(MAT_ETA2)       { DIMENSION = "DIMENSIONLESS"; }
    //
    FLAG(Optional_card);
    if (Optional_card!= 0) {
        DATA(YLD_FUNC);
        SCALAR(YLD_SCALE)  { DIMENSION = "pressure";      }   
    }        
optional:
    // HEAT data
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }

    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
    /*
    mandatory:
    graphical SUPPORT("Support") {
    OBJECTS=(/PART/QUAD,/PART/BRICK,/PART/TETRA4,/PART/LINEAR_3D,/PART/PENTA6,/PART/LINEAR_THICK,
    /PART/TETRA10,/PART/SHEL16,/PART/BRIC20,/PART/SHELL);
    ADD(PART,"Parts");
    }
    */
}
// File format
FORMAT(radioss2020) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW44/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/COWPER/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#        Init. dens.          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#        Init. dens.");
        CARD("%20lg",MAT_RHO);
    }
    //
    COMMENT("#                  E                  nu");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    //
    COMMENT("#                  A                   B                   n              C_HARD              sigmax");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_SIGY,MAT_B,MAT_N,MAT_HARD,MAT_SIG);
    //
    COMMENT("#                  C                   P       ICC   ISMOOTH               F_CUT                  VP");
    CARD("%20lg%20lg%10d%10d%20lg%10s%10d",MAT_SRC,MAT_SRE,STRFLAG,Fsmooth,Fcut,_BLANK_,Vflag);
    //
    COMMENT("#            EPS_MAX               EPST1               EPST2");
    CARD("%20lg%20lg%20lg",MAT_EPS,MAT_ETA1,MAT_ETA2); 
    //
    if(IO_FLAG== 0 && Optional_card == 1)
    {
        COMMENT("#  fct_IDp                        Fscale");
    }
    FREE_CARD(Optional_card,"%10d%10s%20lg",YLD_FUNC,_BLANK_,YLD_SCALE);

    //
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}

FORMAT(radioss51) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW44/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/COWPER/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#        Init. dens.          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#        Init. dens.");
        CARD("%20lg",MAT_RHO);
    }
    //
    COMMENT("#                  E                  nu");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    //
    COMMENT("#                  A                   B                   n              C_HARD              sigmax");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_SIGY,MAT_B,MAT_N,MAT_HARD,MAT_SIG);
    //
    COMMENT("#                  C                   P       ICC   ISMOOTH               F_CUT");
    CARD("%20lg%20lg%10d%10d%20lg",MAT_SRC,MAT_SRE,STRFLAG,Fsmooth,Fcut);
    //
    COMMENT("#            EPS_MAX               EPST1               EPST2");
    CARD("%20lg%20lg%20lg",MAT_EPS,MAT_ETA1,MAT_ETA2); 
    //
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
FORMAT(radioss44) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    
    COMMENT("#    Init. dens.");
    CARD("%16lg",MAT_RHO);
    //
    COMMENT("#               E              nu");
    CARD("%16lg%16lg",MAT_E,MAT_NU);
    //
    COMMENT("#               A               B               n         C_HARD          sigmax");
    CARD("%16lg%16lg%16lg%16lg%16lg",MAT_SIGY,MAT_B,MAT_N,MAT_HARD,MAT_SIG);
    //
    COMMENT("#               C               P    ICC ISMOOTH           F_CUT");
    CARD("%16lg%16lg%8d%8d%16lg",MAT_SRC,MAT_SRE,STRFLAG,Fsmooth,Fcut);
    //
    COMMENT("#         EPS_MAX           EPST1          EPST2");
    CARD("%16lg%16lg%16lg",MAT_EPS,MAT_ETA1,MAT_ETA2); 
}