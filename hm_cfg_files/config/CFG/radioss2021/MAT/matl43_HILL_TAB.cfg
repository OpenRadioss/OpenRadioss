//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Material law 00
ATTRIBUTES(COMMON)
{
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    MAT_REFRHO_Option                       = VALUE(INT,  "RefRho_Option");
    MAT_RHO                                 = VALUE(FLOAT,  "Initial Density");
    Refer_Rho                               = VALUE(FLOAT,  "Reference Density");
    DUMMY                                   = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    MAT_E                                   = VALUE(FLOAT,  "Young's Modulus");
    MAT_NU                                  = VALUE(FLOAT,  "Poisson's Ratio");
    Yr_fun                                  = VALUE(FUNCT,  "Function Defining the Scale Factor of Young's Modulus MAT_Evolution Versus MAT_Effective Plastic Strain");
    MAT_EFIB                                = VALUE(FLOAT,  "Saturated Young's Modulus for Infinitive Plastic Strain");
    MAT_C                                   = VALUE(FLOAT,  "Parameter for Young's Modulus Evolution");
    MAT_R00                                 = VALUE(FLOAT,  "Lankford Parameter 0 Degrees");
    MAT_R45                                 = VALUE(FLOAT,  "Lankford Parameter 45 Degrees");
    MAT_R90                                 = VALUE(FLOAT,  "Lankford Parameter 90 Degrees");
    MAT_CHARD                               = VALUE(FLOAT,  "Hardening Coefficient");
    MAT_Iyield                              = VALUE(INT,  "Yield stress flag");
    MAT_EPS                                 = VALUE(FLOAT,  "Failure Plastic Strain");
    MAT_EPST1                               = VALUE(FLOAT,  "Maximum Tensile Failure Strain 1");
    MAT_EPST2                               = VALUE(FLOAT,  "Maximum Tensile Failure Strain 2");
    NUM_CURVES                              = SIZE("Number of Plasticity Curves");
    FunctionIds                             = ARRAY[NUM_CURVES](FUNCT,"Plasticity Curves ith Function");
    ABG_cpa                                 = ARRAY[NUM_CURVES](FLOAT,  "Scale Factor for ith Function");
    ABG_cpb                                 = ARRAY[NUM_CURVES](FLOAT,  "Strain Rate for ith Function");
    Fsmooth                                 = VALUE(INT,  "Flag for strain-rate filtering");
    Fcut                                    = VALUE(FLOAT,"Cutoff filtering frequency");     
    Mat_Name_OR_LawNo                       = VALUE(INT, "");
    TITLE                                   = VALUE(STRING,"");
    IO_FLAG                                 = VALUE(INT, "");
    LAW_NO                                  = VALUE(STRING, "");
    // HEAT
    Heat_Inp_opt                            = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT                         = VALUE(SUBOBJECT, "");
    // THERM_STRESS
    THERM_STRESS                            = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS                     = VALUE(SUBOBJECT, "");
}
SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 7951;
    MAT_REFRHO_Option                       = 4285;
    MAT_RHO                                 = 118;
    Refer_Rho                               = 4229;
    DUMMY                                   = -1;
    MAT_E                                   = 119;
    MAT_NU                                  = 120;
    Yr_fun                                  = 870;
    MAT_EFIB                                = 363;
    MAT_C                                   = 996;
    MAT_R00                                 = 5077;
    MAT_R45                                 = 5078;
    MAT_R90                                 = 5079;
    MAT_CHARD                               = 4049;
    MAT_Iyield                              = 5010;
    MAT_EPS                                 = 195;
    MAT_EPST1                               = 5069;
    MAT_EPST2                               = 5071;
    Fsmooth                                 = -1;
    Fcut                                    = -1;
    NUM_CURVES                              = 8167;
    FunctionIds                             = 4270;
    ABG_cpa                                 = 912;
    ABG_cpb                                 = 913;
    Mat_Name_OR_LawNo                       = 4538;
    LAW_NO                                  = -1;
    IO_FLAG                                 = -1;
    TITLE                                   = -1;
    //HEAT
    Heat_Inp_opt                            = 4346;
    SUBGRP_HEAT_MAT                         = -1;
    // THERM_STRESS
    THERM_STRESS                            = 4555;
    SUBGRP_THERM_STRESS                     = -1;
}
DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY                 = SCALAR(MAT_RHO);
    YOUNG_MODULUS                   = SCALAR(MAT_E);
    POISSON_RATIO                   = SCALAR(MAT_NU);
public:
    SOUND_SPEED                     = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                               = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                              = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID               = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}
CHECK(COMMON)
{
    MAT_CHARD                               >=0.0;
    MAT_CHARD                               <=1.0;
    MAT_E                                   >=0.0;
    MAT_EPS                                 >=0.0;
    MAT_EPST1                               >=0.0;
    MAT_EPST2                               >=0.0;
    MAT_NU                                  >=0.0;
    MAT_NU                                  < 0.5;
    MAT_RHO                                 > 0.0;
}

DEFAULTS(COMMON)
{    
    MAT_EPS                                 = 1.0e30;
    MAT_EPST1                               = 1.0e30;
    MAT_EPST2                               = 2.0e30;
    MAT_R00                                 = 1.0;
    MAT_R45                                 = 1.0;
    MAT_R90                                 = 1.0;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if( Mat_Name_OR_LawNo ==2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW43/");

    }
    else
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/HILL_TAB/");
    }
    FLAG(MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho)       { DIMENSION="density";  }
    }
    mandatory:
        SCALAR(MAT_RHO)         { DIMENSION="density";  }
        SCALAR(MAT_E)           { DIMENSION="pressure";      }
        SCALAR(MAT_NU)          { DIMENSION="DIMENSIONLESS"; }
        DATA(Yr_fun);
        SCALAR(MAT_EFIB)        {DIMENSION="pressure";}
        SCALAR(MAT_C)           {DIMENSION="DIMENSIONLESS";}
        SCALAR(MAT_R00)         { DIMENSION="DIMENSIONLESS"; }
        SCALAR(MAT_R45)         { DIMENSION="DIMENSIONLESS"; }
        SCALAR(MAT_R90)         { DIMENSION="DIMENSIONLESS"; }
        SCALAR(MAT_CHARD)       { DIMENSION="DIMENSIONLESS"; }
        RADIO(MAT_Iyield)
        {
           ADD(0, "0: Average Yield Stress Input");
           ADD(1, "1: Yield Stress in Orthotropic Direction 1");
        }
        SCALAR(MAT_EPS)         { DIMENSION="DIMENSIONLESS"; }
        SCALAR(MAT_EPST1)       { DIMENSION="DIMENSIONLESS"; }
        SCALAR(MAT_EPST2)       { DIMENSION="DIMENSIONLESS"; }
        SCALAR(Fcut)            { DIMENSION="f"; }
        SIZE(NUM_CURVES);
        ARRAY(NUM_CURVES," Number of curves")
        {
            SCALAR(FunctionIds)    { DIMENSION="DIMENSIONLESS";}
            SCALAR(ABG_cpa)        { DIMENSION="pressure";}
            SCALAR(ABG_cpb)        { DIMENSION="f";}
        }
    optional:
        // HEAT data
        graphical FLAG(Heat_Inp_opt);
        if (Heat_Inp_opt!= 0) {
            SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
        }
        // THERM_STRESS
        graphical FLAG(THERM_STRESS);
        if (THERM_STRESS!= 0) {
            SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
        } 
    /* mandatory:
    graphical SUPPORT("Support") {
    OBJECTS=(/PART/SHELL);
    ADD(PART,"Parts");
    }*/
}
// File format
FORMAT(radioss2021){
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW43/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/HILL_TAB/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option != FALSE)
    {
        COMMENT("#              RHO_I          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else
    {
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                  E                  NU");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    COMMENT("#FUNCT_IDE                          EINF                  CE");
    CARD("%10d          %20lg%20lg",Yr_fun,MAT_EFIB,MAT_C);
    COMMENT("#                r00                 r45                 r90              C_hard   Iyield0");
    CARD("%20lg%20lg%20lg%20lg%10d",MAT_R00,MAT_R45,MAT_R90,MAT_CHARD,MAT_Iyield);
    COMMENT("#           EPSP_max               EPS_t               EPS_m                Fcut   Fsmooth");
    CARD("%20lg%20lg%20lg%20lg%10d",MAT_EPS,MAT_EPST1,MAT_EPST2,Fcut,Fsmooth);
    COMMENT("# func_IDi                      Fscale_i           EPS_dot_i");
    FREE_CARD_LIST(NUM_CURVES)
    {
      CARD("%10d%10s%20lg%20lg",FunctionIds,_BLANK_,ABG_cpa,ABG_cpb);
    }
    // HEAT data
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    // THERM_STRESS 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
// File format
FORMAT(radioss140){
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW43/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/HILL_TAB/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option != FALSE)
    {
        COMMENT("#              RHO_I          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else
    {
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                  E                  NU");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    COMMENT("#FUNCT_IDE                          EINF                  CE");
    CARD("%10d          %20lg%20lg",Yr_fun,MAT_EFIB,MAT_C);
    COMMENT("#                r00                 r45                 r90              C_hard   Iyield0");
    CARD("%20lg%20lg%20lg%20lg%10d",MAT_R00,MAT_R45,MAT_R90,MAT_CHARD,MAT_Iyield);
    COMMENT("#           EPSP_max               EPS_t               EPS_m");
    CARD("%20lg%20lg%20lg",MAT_EPS,MAT_EPST1,MAT_EPST2);
    COMMENT("# func_IDi                      Fscale_i           EPS_dot_i");
    FREE_CARD_LIST(NUM_CURVES)
    {
      CARD("%10d%10s%20lg%20lg",FunctionIds,_BLANK_,ABG_cpa,ABG_cpb);
    }
    // HEAT data
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    // THERM_STRESS 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
FORMAT(radioss120){
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW43/%d",_ID_);
        CARD("%-100s", TITLE);
    }

    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option != FALSE)
    {
        COMMENT("#              RHO_I          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else
    {
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                  E                  NU");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    COMMENT("#FUNCT_IDE                          EINF                  CE");
    CARD("%10d          %20lg%20lg",Yr_fun,MAT_EFIB,MAT_C);
    COMMENT("#                r00                 r45                 r90              C_hard");
    CARD("%20lg%20lg%20lg%20lg",MAT_R00,MAT_R45,MAT_R90,MAT_CHARD);
    COMMENT("#           EPSP_max               EPS_t               EPS_m");
    CARD("%20lg%20lg%20lg",MAT_EPS,MAT_EPST1,MAT_EPST2);
    COMMENT("# func_IDi                      Fscale_i           EPS_dot_i");
    FREE_CARD_LIST(NUM_CURVES)
    {
      CARD("%10d%10s%20lg%20lg",FunctionIds,_BLANK_,ABG_cpa,ABG_cpb);
    }
    // HEAT data
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    // THERM_STRESS 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
FORMAT(radioss51){
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW43/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/HILL_TAB/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option != FALSE)
    {
        COMMENT("#              RHO_I          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else
    {
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                  E                  NU");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    COMMENT("#                r00                 r45                 r90              C_hard");
    CARD("%20lg%20lg%20lg%20lg",MAT_R00,MAT_R45,MAT_R90,MAT_CHARD);
    COMMENT("#           EPSP_max               EPS_t               EPS_m");
    CARD("%20lg%20lg%20lg",MAT_EPS,MAT_EPST1,MAT_EPST2);
    COMMENT("# func_IDi                      Fscale_i           EPS_dot_i");
    FREE_CARD_LIST(NUM_CURVES)
    {
      CARD("%10d%10s%20lg%20lg",FunctionIds,_BLANK_,ABG_cpa,ABG_cpb);
    }
    // HEAT data
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    // THERM_STRESS 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
FORMAT(radioss44) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    COMMENT("#          RHO_I");
    CARD("%16lg",MAT_RHO);
    COMMENT("#              E              NU");
    CARD("%16lg%16lg",MAT_E,MAT_NU);
    COMMENT("#            R00             R45             R90  C_HARD");
    CARD("%16lg%16lg%16lg%16lg",MAT_R00,MAT_R45,MAT_R90,MAT_CHARD);
    COMMENT("#       EPSP_MAX          EPS_T1          EPS_T2");
    CARD("%16lg%16lg%16lg",MAT_EPS,MAT_EPST1,MAT_EPST2);
    COMMENT("# func_IDi                      Fscale_i           EPS_dot_i");
    FREE_CARD_LIST(NUM_CURVES)
    {
      CARD("%10d%10s%20lg%20lg",FunctionIds,_BLANK_,ABG_cpa,ABG_cpb);
    }
}
FORMAT(radioss41) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    COMMENT("#          RHO_I");
    CARD("%16lg",MAT_RHO);
    COMMENT("#              E              NU");
    CARD("%16lg%16lg",MAT_E,MAT_NU);
    COMMENT("#            R00             R45             R90");
    CARD("%16lg%16lg%16lg",MAT_R00,MAT_R45,MAT_R90);
    COMMENT("#       EPSP_MAX           EPS_T           EPS_M");
    CARD("%16lg%16lg%16lg",MAT_EPS,MAT_EPST1,MAT_EPST2);
    COMMENT("# func_IDi                      Fscale_i           EPS_dot_i");
    FREE_CARD_LIST(NUM_CURVES)
    {
      CARD("%10d%10s%20lg%20lg",FunctionIds,_BLANK_,ABG_cpa,ABG_cpb);
    }
}
