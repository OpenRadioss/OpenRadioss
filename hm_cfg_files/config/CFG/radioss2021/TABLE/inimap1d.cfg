//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// /INIMAP1D/
//

ATTRIBUTES(COMMON)
{
    // INPUT ATTRIBUTES

    // Card
    type                                      = VALUE(INT,  "Initial mapping type");

    Axis_Origin_Node_N1                       = VALUE(NODE, "Node identifier N1");
    Axis_Node_N2                              = VALUE(NODE, "Node identifier N2");

    grbrick_id                                = VALUE(SETS, "Brick group on which initialization is performed") { SUBTYPES = (/SETS/GRBRIC) ; }
    grquad_ID                                 = VALUE(SETS, "Quad group on which initialization is performed") { SUBTYPES = (/SETS/GRQUAD) ; }
    grtria_id                                 = VALUE(SETS, "Tria group on which initialization is performed") { SUBTYPES = (/SETS/GRTRIA) ; }

    FUN_A1                                    = VALUE(FUNCT, "Function identifier for density initialization");
    FUN_B1                                    = VALUE(FUNCT, "Function identifier for specific internal energy initialization (if form=VE). Pressure initialization (if form=VP)");
    FUN_C1                                    = VALUE(FUNCT, "Function identifier for velocity initialization");
    FILENAME                                  = VALUE(STRING,"Filename") ;
    //HM INTERNAL
    KEYWORD_STR                               = VALUE(STRING, "Solver Keyword");

    IO_FLAG                                   = VALUE(INT, "IOFLAG");
    dummy_opt                                 = VALUE(STRING, "");
    state_opt                                 = VALUE(INT,  "Initial state formulation");

    TITLE                                     = VALUE(STRING, "Inimap1d block title");
    //
    FUN_IDV                                   = VALUE(FUNCT, "Function identifier for velocity initialization");
    FSCALEV                                   = VALUE(FLOAT, "Velocity scale factor");
    Nb_integr                                 = SIZE("Number of submaterials");
    FUN_IDVfi                                 = ARRAY[Nb_integr](FUNCT, "Function identifier for volume fraction");
    FUN_IDRhoI                                = ARRAY[Nb_integr](FUNCT, "Function identifier for volume density");
    FSCALERhoI                                = ARRAY[Nb_integr](FLOAT, "Density scale factor ");
    FUN_IDp_eI                                = ARRAY[Nb_integr](FUNCT, "Function identifier for volume energy or pressure");
    FSCALEp_eI                                = ARRAY[Nb_integr](FLOAT, "Energy or pressure scale factor ");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //  Card
    type                                      = -1;
    grquad_ID                                 = -1;
    FUN_A1                                    = 45;
    FUN_B1                                    = 168;
    FUN_C1                                    = 1189;
    FILENAME                                  = 8203;
    //HM INTERNAL
    KEYWORD_STR                               = 9000;

    IO_FLAG                                   = -1;
    dummy_opt                                 = -1;
    state_opt                                 = -1;

    TITLE                                     = -1;
}

CHECK(COMMON)
{

}

DEFAULTS(COMMON)
{
    state_opt = 3;
}

GUI(COMMON) 
{

    RADIO(state_opt, "form")
    {
      ADD(1, "VE: Mass density, specific internal energy and velocity are provided");
      ADD(2, "VP: Mass density, pressure and velocity are provided");
      ADD(3, "FILE: Initialization from file");
    }

    if(state_opt == 1)
    {
        ASSIGN(KEYWORD_STR, "/INIMAP1D/VE");
    }
    else if(state_opt == 2)
    {
        ASSIGN(KEYWORD_STR, "/INIMAP1D/VP");
    }
    else if(state_opt == 3)
    {
        ASSIGN(KEYWORD_STR, "/INIMAP1D/FILE");
    }

    //  Card
    RADIO(type, "type")
    {
      ADD(1, "1: Planar mapping");
      ADD(2, "2: Cylindrical mapping");
      ADD(3, "3: Spherical mapping");
    }

    if(type == 1 || type == 2)
    {
        DATA(Axis_Origin_Node_N1, "node_ID1");
        DATA(Axis_Node_N2, "node_ID2");
    }
    else if(type == 3)
    {
        DATA(Axis_Origin_Node_N1, "node_ID1");
    }
//
    DATA(grbrick_id, "grbric_ID");
    DATA(grquad_ID, "grquad_ID");
    DATA(grtria_id, "grtria_ID");
//
    if(state_opt == 3)
    {
        SCALAR(FILENAME) ;
    
    }
    else
    {
        DATA(FUN_IDV, "Function identifier for velocity initialization");
        SCALAR(FSCALEV, "Velocity scale factor")      { DIMENSION = "velocity"; }
        SIZE(Nb_integr);
        ARRAY(Nb_integr, "")
        {

          DATA(FUN_IDVfi, "Function identifier for volume fraction");
          DATA(FUN_IDRhoI, "Function identifier for volume density");
          SCALAR(FSCALERhoI, "Density scale factor")      { DIMENSION = "density"; }
          DATA(FUN_IDp_eI, "Function identifier for volume energy or pressure");
          SCALAR(FSCALEp_eI)  {
            if(state_opt == 1)   { TITLE = "Energy scale factor"; DIMENSION = "energy"; } 
            else if(state_opt == 2)   { TITLE = "Pressure scale factor"; DIMENSION = "pressure"; } 
          } 
        }
    }

}
//File format
FORMAT(radioss2021)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    
    if(IO_FLAG == 1)
    {
        HEADER("/INIMAP1D/%s/%d", dummy_opt, _ID_);

        if(dummy_opt == "VE")
        {
            ASSIGN(state_opt,1,IMPORT);
        }
        else if(dummy_opt == "VP")
        {
            ASSIGN(state_opt,2,IMPORT);
        } 
        else if(dummy_opt == "FILE")
        {
            ASSIGN(state_opt,3,IMPORT);
        } 
    }
    else if(IO_FLAG == 0)
    {
        if(state_opt == 1)
         HEADER("/INIMAP1D/VE/%-d", _ID_);
        else if(state_opt == 2)
         HEADER("/INIMAP1D/VP/%-d", _ID_);
        else if(state_opt == 3)
         HEADER("/INIMAP1D/FILE/%-d", _ID_);
    }

    // Card
    CARD("%-100s", TITLE);

    COMMENT("#     type");
    CARD("%10d", type);

    if(type == 1 || type == 2)
    {
        COMMENT("# node_ID1  node_ID2");
        CARD("%10d%10d", Axis_Origin_Node_N1, Axis_Node_N2);
    }
    else if(type == 3)
    {
        COMMENT("# node_ID1");
        CARD("%10d", Axis_Origin_Node_N1);
    }

    COMMENT("#grbric_ID grquad_ID grtria_ID");
    CARD("%10d%10d%10d", grbrick_id, grquad_ID, grtria_id);
    if(state_opt == 3)
    {
        COMMENT("#Filename");
        CARD("%-100s",FILENAME);
    }
    else
    {
        COMMENT("#  fct_IDv             Fscalev");
        CARD("%10d%20lg", FUN_IDV, FSCALEV);
        if(Nb_integr>0) {
            COMMENT("#fct_Idvfi  fct_IDri          Fscalerhoi fct_IDpei           Fscalepei"); 
        }
        
        FREE_CARD_LIST(Nb_integr)
        {
          CARD("%10d%10d%20lg%10d%20lg", FUN_IDVfi, FUN_IDRhoI, FSCALERhoI, FUN_IDp_eI,FSCALEp_eI);
        }
    }
}


//File format
FORMAT(radioss2019)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    
    if(IO_FLAG == 1)
    {
        HEADER("/INIMAP1D/%s/%d", dummy_opt, _ID_);

        if(dummy_opt == "VE")
        {
            ASSIGN(state_opt,1,IMPORT);
        }
        else if(dummy_opt == "VP")
        {
            ASSIGN(state_opt,2,IMPORT);
        } 
    }
    else if(IO_FLAG == 0)
    {
       if(state_opt == 1)
         HEADER("/INIMAP1D/VE/%-d", _ID_);
    
        if(state_opt == 2)
         HEADER("/INIMAP1D/VP/%-d", _ID_);
    }

    // Card
    CARD("%-100s", TITLE);

    COMMENT("#     type");
    CARD("%10d", type);

    if(type == 1 || type == 2)
    {
        COMMENT("# node_ID1  node_ID2");
        CARD("%10d%10d", Axis_Origin_Node_N1, Axis_Node_N2);
    }
    else if(type == 3)
    {
        COMMENT("# node_ID1");
        CARD("%10d", Axis_Origin_Node_N1);
    }

    COMMENT("#grbric_ID grquad_ID grtria_ID");
    CARD("%10d%10d%10d", grbrick_id, grquad_ID, grtria_id);

    COMMENT("#  fct_ID1   fct_ID2   fct_ID3");
    CARD("%10d%10d%10d", FUN_A1, FUN_B1, FUN_C1);
}
