//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//FAIL : Strain failure model
//

ATTRIBUTES(COMMON){ 

	IO_FLAG          					= VALUE(INT, "Import/Export flag");
	_HMCOMMENTSFLAG  					= VALUE(INT, "Write HM Comments");
	mat_id           					= VALUE(MAT,  "Material");
	
	
	Ifail_sh							= VALUE( INT,   "Shell failure flag");
	Ifail_so							= VALUE( INT,   "Solid failure flag");
	P_thickfail				= VALUE( FLOAT, "Percent of thickness failure limit");
 P_thinfail   		= VALUE( FLOAT, "Ratio of thickness reduction before failure");
 Ixfem					   		= VALUE( INT,   "XFEM flag ");
	
	Dcrit								  = VALUE( FLOAT, "Critical accumulated damage value");
	D									     = VALUE( FLOAT, "Damage accumulation parameter D");
	n									     = VALUE( FLOAT, "Damage accumulation parameter n");
 Dadv   								= VALUE( FLOAT, "Criterion for the crack advancement") ;
	fct_IDd								= VALUE( FUNCT, "Damage function identifier");
	
    table1_ID			= VALUE(FUNCT,"Failure strain table");
	Xscale1								= VALUE( FLOAT, "scale factor for the table1 value");
	Xscale2								= VALUE( FLOAT, "scale factor for the second variable of table1");
    table2_ID			= VALUE(FUNCT,"Instability strain table");
	Xscale3								= VALUE( FLOAT, "scale factor for the table2 value");
	Xscale4								= VALUE( FLOAT, "scale factor for the second variable of table2");
	
	fct_IDel							= VALUE( FUNCT, "Element size factor function identifier");
	Fscale_el						= VALUE( FLOAT, "Element size function scale factor");
	EI_ref								 = VALUE( FLOAT, "Reference element size");
 Inst_start					= VALUE( FLOAT, "Instability strain");
	Ch_i_f							 	= VALUE(INT, "Flag for choice of instability or fracture regularization");
	Is_Fading_Exponent_A_Curve			= VALUE(INT,"");
 Fad_exp								= VALUE( FLOAT, "Fading exponent");
	Fading_Exponent_Curve				= VALUE(INT,"Fading exponent");
	
	fct_IDt								= VALUE( FUNCT, "Temperature factor function identifier");
 FscaleT								= VALUE( FLOAT, "Temperature function scale factor");
 Shear_limit    = VALUE( FLOAT, "Shear triaxiality limit for element size factor on instability");
 Biax_limit     = VALUE( FLOAT, "Bi-traction triaxiality limit for element size factor on instability");
    
    ID_CARD_EXIST						= VALUE(BOOL,"Give an Id");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
	IO_FLAG=-1;
	_HMCOMMENTSFLAG=-1;
}
/*


DEFINITIONS(COMMON) {
	SUPPORTING=(MAT);
}
DEFAULTS(COMMON) {

}

*/
GUI(COMMON){
/*
	DATA(MAT)	{SUBTYPES=(/MAT/COWPER,
				   /MAT/DAMA,
				   /MAT/ELASTOMER,
				   /MAT/HANSEL,
				   /MAT/HILL,
				   /MAT/HILL_TAB,
				   /MAT/HONEYCOMB,
				   /MAT/HYD_JCOOK,
				   /MAT/HYDPLA,
				   /MAT/LAW66,
				   /MAT/PLAS_BRIT,
				   /MAT/PLAS_JOHNS,
				   /MAT/PLAS_TAB,
				   /MAT/PLAS_T3,
				   /MAT/PLAS_ZERIL,
				   /MAT/STEINB,
				   /MAT/UGINE_ALZ,
				   /MAT/ZHAO,
                       /MAT/BARLAT2000);}
	RADIO(IFAIL_SH) {
		ADD(1, "1: Shell is deleted if damage criteria is satisfied in one integration point or layer");
		ADD(2, "2: Shell is deleted if damage criteria is satisfied in all shell layers");
		ADD(3, "3: Shell is deleted if damage criteria is satisfied in all layers");
	}
    RADIO(IFAIL_SO)
    {
         ADD(1,"Solid is deleted, if the damage criterion is satisfied in one integration point");
         ADD(2,"Deviatoric stress components are set to zero for the integration points where criteria is satisfied");
    }
*/

  
        	SCALAR (P_thickfail)   {DIMENSION="DIMENSIONLESS"; }
         SCALAR (P_thinfail)    {DIMENSION="DIMENSIONLESS"; }
	        SCALAR (Dadv)          {DIMENSION="DIMENSIONLESS"; }
	        SCALAR (Dcrit)         {DIMENSION="DIMENSIONLESS"; }
	        SCALAR (D)    	        {DIMENSION="DIMENSIONLESS"; }
	        SCALAR (n)    	        {DIMENSION="DIMENSIONLESS"; }
	        SCALAR (Xscale1)    	  {DIMENSION="DIMENSIONLESS"; }
	        SCALAR (Xscale2)    	  {DIMENSION="f"; }
	        SCALAR (Xscale3)    	  {DIMENSION="DIMENSIONLESS"; }
	        SCALAR (Xscale4)    	  {DIMENSION="f"; }
	        SCALAR (Fscale_el)     {DIMENSION="DIMENSIONLESS"; }
	        SCALAR (EI_ref)        {DIMENSION="l"; }
	        SCALAR (Inst_start)    {DIMENSION="DIMENSIONLESS"; }
	        SCALAR (Fad_exp)       {DIMENSION="DIMENSIONLESS"; }
	        SCALAR (FscaleT)       {DIMENSION="DIMENSIONLESS"; }
	        SCALAR (Shear_limit)   {DIMENSION="DIMENSIONLESS"; }
	        SCALAR (Biax_limit)    {DIMENSION="DIMENSIONLESS"; }

/*
        FUNCTION(fct_IDd) {
                X_TITLE     = "Damage";
                Y_TITLE     = "scale factor";
                X_DIMENSION = "DIMENSIONLESS";
                Y_DIMENSION = "DIMENSIONLESS";
        }
        TABLE(TABLE_ID) {
                X_TITLE     = "Triaxiality";
                Y_TITLE     = "Failure strain limit";
                X_DIMENSION = "DIMENSIONLESS";
                Y_DIMENSION = "DIMENSIONLESS";
        }
        TABLE(TABLE2_ID) {
                X_TITLE     = "Triaxiality";
                Y_TITLE     = "Instability Strain limit";
                X_DIMENSION = "DIMENSIONLESS";
                Y_DIMENSION = "DIMENSIONLESS";
        }
        FUNCTION(fct_IDel) {
                X_TITLE     = "Element size";
                Y_TITLE     = "scale factor";
                X_DIMENSION="l";
                Y_DIMENSION = "DIMENSIONLESS";
        }
        FUNCTION(fct_IDt) {
                X_TITLE     = "Temperature factor";
                Y_TITLE     = "scale factor";
                X_DIMENSION="k";
                Y_DIMENSION = "DIMENSIONLESS";
        }
  FLAG(ID_CARD_EXIST);
 */
}

FORMAT(radioss2021) { 

	ASSIGN(IO_FLAG, 1, IMPORT);
	ASSIGN(IO_FLAG, 2, EXPORT);

	
	HEADER("/FAIL/TAB1/%d",mat_id);

	COMMENT("# IFAIL_SH  IFAIL_SO                             P_THICKFAIL          P_thinfail               Ixfem") ;
	CARD("%10d%10d                    %20lg%20lg          %10d",Ifail_sh,Ifail_so,P_thickfail,P_thinfail,Ixfem);

	COMMENT("#              Dcrit                   D                   N                Dadv   fct_IDD") ;
	CARD("%20lg%20lg%20lg%20lg%10d",Dcrit,D,n,Dadv,fct_IDd);

	COMMENT("#TABLE1_ID             Xscale1             Xscale2 TABLE2_ID             Xscale3             Xscale4") ;
	CARD("%10d%20lg%20lg%10d%20lg%20lg",table1_ID,Xscale1,Xscale2,table2_ID,Xscale3,Xscale4);

	
	if(IO_FLAG == 1)
	{
		COMMENT("# fct_IDEL           Fscale_EL              EI_REF          INST_START             FAD_EXP    CH_I_F") ;
		CARD("%10d%20lg%20lg%20lg%20lg%10d",fct_IDel,Fscale_el,EI_ref,Inst_start,Fad_exp,Ch_i_f);
		
		if(Fad_exp <0)
		{
			ASSIGN(Fading_Exponent_Curve, FAD_EXP, IMPORT);
			ASSIGN(Is_Fading_Exponent_A_Curve,TRUE, IMPORT);
			ASSIGN(Fad_exp,0, IMPORT);
		}
	}
	
	if(IO_FLAG == 2)
	{
		if(Is_Fading_Exponent_A_Curve== FALSE)
		{
			COMMENT("# fct_IDEL           Fscale_EL              EI_REF          INST_START             FAD_EXP    CH_I_F") ;
			CARD("%10d%20lg%20lg%20lg%20lg%10d",fct_IDel,Fscale_el,EI_ref,Inst_start,Fad_exp,Ch_i_f);
		}
		else
		{
			COMMENT("# fct_IDEL           Fscale_EL              EI_REF          INST_START             FAD_EXP    CH_I_F") ;
			CARD("%10d%20lg%20lg%20lg%20lg%10d",fct_IDel,Fscale_el,EI_ref,Inst_start,Fading_Exponent_Curve,Ch_i_f);
		}
	}
	
	COMMENT("#  fct_IDT             FscaleT                              Shear_limit             Biax_limit") ;
	CARD("%10d%20lg                              %20lg%20lg",fct_IDt,FscaleT,Shear_limit,Biax_limit);  


	if (ID_CARD_EXIST==TRUE)
	{
	 COMMENT("#  FAIL_ID") ;
	}
	FREE_CARD(ID_CARD_EXIST,"%10d",_ID_);
}



FORMAT(radioss2017) { 

	ASSIGN(IO_FLAG, 1, IMPORT);
	ASSIGN(IO_FLAG, 2, EXPORT);

	
	HEADER("/FAIL/TAB1/%d",mat_id);

	COMMENT("# IFAIL_SH  IFAIL_SO                             P_THICKFAIL          P_thinfail               Ixfem") ;
	CARD("%10d%10d                    %20lg%20lg          %10d",Ifail_sh,Ifail_so,P_thickfail,P_thinfail,Ixfem);

	COMMENT("#              Dcrit                   D                   N                Dadv   fct_IDD") ;
	CARD("%20lg%20lg%20lg%20lg%10d",Dcrit,D,n,Dadv,fct_IDd);

	COMMENT("#TABLE1_ID             Xscale1             Xscale2 TABLE2_ID             Xscale3             Xscale4") ;
	CARD("%10d%20lg%20lg%10d%20lg%20lg",table1_ID,Xscale1,Xscale2,table2_ID,Xscale3,Xscale4);

	
	if(IO_FLAG == 1)
	{
		COMMENT("# fct_IDEL           Fscale_EL              EI_REF          INST_START             FAD_EXP    CH_I_F") ;
		CARD("%10d%20lg%20lg%20lg%20lg%10d",fct_IDel,Fscale_el,EI_ref,Inst_start,Fad_exp,Ch_i_f);
		
		if(Fad_exp <0)
		{
			ASSIGN(Fading_Exponent_Curve, FAD_EXP, IMPORT);
			ASSIGN(Is_Fading_Exponent_A_Curve,TRUE, IMPORT);
			ASSIGN(Fad_exp,0, IMPORT);
		}
	}
	
	if(IO_FLAG == 2)
	{
		if(Is_Fading_Exponent_A_Curve== FALSE)
		{
			COMMENT("# fct_IDEL           Fscale_EL              EI_REF          INST_START             FAD_EXP    CH_I_F") ;
			CARD("%10d%20lg%20lg%20lg%20lg%10d",fct_IDel,Fscale_el,EI_ref,Inst_start,Fad_exp,Ch_i_f);
		}
		else
		{
			COMMENT("# fct_IDEL           Fscale_EL              EI_REF          INST_START             FAD_EXP    CH_I_F") ;
			CARD("%10d%20lg%20lg%20lg%20lg%10d",fct_IDel,Fscale_el,EI_ref,Inst_start,Fading_Exponent_Curve,Ch_i_f);
		}
	}
	
	COMMENT("#  fct_IDT             FscaleT") ;
	CARD("%10d%20lg",fct_IDt,FscaleT);  

	if (ID_CARD_EXIST==TRUE)
	{
	 COMMENT("#  FAIL_ID") ;
	}
	FREE_CARD(ID_CARD_EXIST,"%10d",_ID_);
}



FORMAT(radioss140) { 

	ASSIGN(IO_FLAG, 1, IMPORT);
	ASSIGN(IO_FLAG, 2, EXPORT);

	
	HEADER("/FAIL/TAB1/%d",mat_id);

	COMMENT("# IFAIL_SH  IFAIL_SO                             P_THICKFAIL          P_thinfail               Ixfem") ;
	CARD("%10d%10d                    %20lg%20lg          %10d",Ifail_sh,Ifail_so,P_thickfail,P_thinfail,Ixfem);

	COMMENT("#              Dcrit                   D                   N                Dadv   fct_IDD") ;
	CARD("%20lg%20lg%20lg%20lg%10d",Dcrit,D,n,Dadv,fct_IDd);

	COMMENT("#TABLE1_ID             Xscale1             Xscale2 TABLE2_ID             Xscale3             Xscale4") ;
	CARD("%10d%20lg%20lg%10d%20lg%20lg",table1_ID,Xscale1,Xscale2,table2_ID,Xscale3,Xscale4);

	
	if(IO_FLAG == 1)
	{
		COMMENT("# fct_IDEL           Fscale_EL              EI_REF          INST_START             FAD_EXP") ;
		CARD("%10d%20lg%20lg%20lg%20lg",fct_IDel,Fscale_el,EI_ref,Inst_start,Fad_exp);
		
		if(Fad_exp <0)
		{
			ASSIGN(Fading_Exponent_Curve, FAD_EXP, IMPORT);
			ASSIGN(Is_Fading_Exponent_A_Curve,TRUE, IMPORT);
			ASSIGN(Fad_exp,0, IMPORT);
		}
	}
	
	if(IO_FLAG == 2)
	{
		if(Is_Fading_Exponent_A_Curve== FALSE)
		{
			COMMENT("# fct_IDEL           Fscale_EL              EI_REF          INST_START             FAD_EXP") ;
			CARD("%10d%20lg%20lg%20lg%20lg",fct_IDel,Fscale_el,EI_ref,Inst_start,Fad_exp);
		}
		else
		{
			COMMENT("# fct_IDEL           Fscale_EL              EI_REF          INST_START             FAD_EXP") ;
			CARD("%10d%20lg%20lg%20lg%20lg",fct_IDel,Fscale_el,EI_ref,Inst_start,Fading_Exponent_Curve);
		}
	}
	
	COMMENT("#  fct_IDT             FscaleT") ;
	CARD("%10d%20lg",fct_IDt,FscaleT);  

	if (ID_CARD_EXIST==TRUE)
	{
	 COMMENT("#  FAIL_ID") ;
	}
	FREE_CARD(ID_CARD_EXIST,"%10d",_ID_);
}

FORMAT(radioss130) {
	
	ASSIGN(IO_FLAG, 1, IMPORT);
	ASSIGN(IO_FLAG, 2, EXPORT);

	
	HEADER("/FAIL/TAB1/%d",mat_id);
	
	COMMENT("# IFAIL_SH  IFAIL_SO                             P_THICKFAIL                                   Ixfem") ;
	CARD("%10d%10d                    %20lg                              %10d",Ifail_sh,Ifail_so,P_thickfail,Ixfem);

	COMMENT("#              Dcrit                   D                   N                Dadv   fct_IDD") ;
	CARD("%20lg%20lg%20lg%20lg%10d",Dcrit,D,n,Dadv,fct_IDd);

	COMMENT("#TABLE1_ID             Xscale1             Xscale2") ;
	CARD("%10d%20lg%20lg",table1_ID,Xscale1,Xscale2);

	COMMENT("# fct_IDEL           Fscale_EL              EI_REF") ;
	CARD("%10d%20lg%20lg",fct_IDel,Fscale_el,EI_ref);

	COMMENT("#  fct_IDT             FscaleT") ;
	CARD("%10d%20lg",fct_IDt,FscaleT);  

	if (ID_CARD_EXIST==TRUE)
	{
	 COMMENT("#  FAIL_ID") ;
	}
	FREE_CARD(ID_CARD_EXIST,"%10d",_ID_);
}
