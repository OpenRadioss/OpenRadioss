//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- fail_gurson.cfg ---

ATTRIBUTES(COMMON)
{
    // INPUT ATTRIBUTES
    mat_id                                      = VALUE(MAT,  "Material");
    //Card 1
    q1                                          = VALUE(FLOAT, "First Gurson damage coefficient","FAIL_q1");
    q2                                          = VALUE(FLOAT, "Second Gurson damage coefficient", "FAIL_q2");
    i_loc                                       = VALUE(INT,   "Damage variable accumulation method flag", "FAIL_Iloc");

    //Card 2
    eps_n                                       = VALUE(FLOAT, "Equivalent plastic strain at void nucleation", "FAIL_eps_strain");
    a_s                                         = VALUE(FLOAT, "Linear void nucleation slope", "FAIL_As");
    k_w                                         = VALUE(FLOAT, "Shear damage growth coefficient", "FAIL_Kw");

    //Card 3
    f_c                                         = VALUE(FLOAT, "Critical void volume fraction at void coalescence", "FAIL_Fc");
    f_r                                         = VALUE(FLOAT, "Void volume fraction at ductile failure", "FAIL_Fr");
    f_0                                         = VALUE(FLOAT, "Initial void volume fraction", "FAIL_F0");

    //Card 4
    r_len                                       = VALUE(FLOAT, "Radius of non-local variable influence", "FAIL_RLen");
    h_chi                                       = VALUE(FLOAT, "Non-local penalty parameter", "FAIL_Hchi");

    //Optional line
    fail_id                                     = VALUE(INT,   "Failure criteria identifier");

    // HM INTERNAL
    KEYWORD_STR                                 = VALUE(STRING,"Solver Keyword");
    ID_CARD_EXIST                               = VALUE(BOOL, "ID_CARD_EXIST or not");
}
DEFINITIONS(COMMON) {
  SUPPORTING=(mat_id);
}
SKEYWORDS_IDENTIFIER(COMMON)
{
    // HM INTERNAL
    KEYWORD_STR                                 = 9000;
}

CHECK(COMMON)
{
    q2                                          <= 1.02;
}

DEFAULTS(COMMON)
{
    q1                                          = 1.5;
    q2                                          = 1.0;
    i_loc                                       = 1;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "/FAIL/GURSON/");

    SCALAR(q1)                                  { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(q2)                                  { DIMENSION = "DIMENSIONLESS" ; }
    RADIO(i_loc)
    {
        ADD(0, "0: Set to 1");
        ADD(1, "1: (Default) Local damage formulation");
        ADD(2, "2: Non-local damage regularization using the Micromorphic method");
        ADD(3, "3: Non-local damage regularization using the Peerlings method");
    }
    SCALAR(eps_n)                               { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(a_s)                                 { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(k_w)                                 { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(f_c)                                 { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(f_r)                                 { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(f_0)                                 { DIMENSION = "DIMENSIONLESS" ; }
    if(i_loc > 1)
    {
        SCALAR(r_len)                           { DIMENSION = "l" ; }
    }
    if(i_loc == 2)
    {
        SCALAR(h_chi)                           { DIMENSION = "pressure" ; }
    }
    optional:
    FLAG(ID_CARD_EXIST);
}

FORMAT(radioss2021)
{
    HEADER("/FAIL/GURSON/%-d", mat_id);

    //Card 1
    COMMENT("#                 q1                  q2                                                        Iloc");
    CARD("%20lg%20lg%50s%10d", q1, q2, _BLANK_, i_loc);

    //Card 2
    COMMENT("#                 En                  As                  Kw");
    CARD("%20lg%20lg%20lg", eps_n, a_s, k_w);

    //Card 3
    COMMENT("#                 fc                  fr                  f0");
    CARD("%20lg%20lg%20lg", f_c, f_r, f_0);

    //Card 4
    COMMENT("#               Rlen                Hchi");
    CARD("%20lg%20lg", r_len, h_chi);

    //Optional line
    if (ID_CARD_EXIST==TRUE)
    {
        COMMENT("#  FAIL_ID") ;
    }
    FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);
}
