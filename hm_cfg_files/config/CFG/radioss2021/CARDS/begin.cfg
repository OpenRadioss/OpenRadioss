//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- begin_card.cfg ---
//		GROUP	ControlCard	5001	110
//		 23/03/2020

ATTRIBUTES(COMMON)
{
    IRUN = VALUE(INT, "IRUN", "Irun");
    INVERS = VALUE(INT, "INVERS", "Invers");
    RUNNAME = VALUE(STRING, "RUNNAME", "Runname");
    length_inputunit_code = VALUE(STRING, "Unit system of input for length", "Input_length_unit");
    mass_inputunit_code = VALUE(STRING, "Unit system of input for mass", "Input_mass_unit");
    time_inputunit_code = VALUE(STRING, "Unit system of input for time", "Input_time_unit");
    length_workunit_code = VALUE(STRING, "Unit system of work for length", "Work_length_unit");
    mass_workunit_code = VALUE(STRING, "Unit system of work for mass", "Work_mass_unit");
    time_workunit_code = VALUE(STRING, "Unit system of work for time", "Work_time_unit");

    //Attributes for HM usage
    KEYWORD_STR = VALUE(STRING, "Solver Keyword");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR = 9000;
    IRUN = 4000;
    RUNNAME = 5015;
    length_inputunit_code = 4606;
    mass_inputunit_code = 4604;
    time_inputunit_code = 4608;
}

DEFAULTS(COMMON)
{
    length_inputunit_code = "m";
    mass_inputunit_code = "kg";
    time_inputunit_code = "s";
}

GUI(COMMON)
{

    ASSIGN(KEYWORD_STR, "/BEGIN");
    SCALAR(RUNNAME, "RUNNAME");
    SEPARATOR("INVERS=110");
    SEPARATOR();
    RADIO(mass_inputunit_code, "Input_mass_unit")
    {
        ADD("kg", "kg");
        ADD("g", "g");
        ADD("yg", "yg");
        ADD("zg", "zg");
        ADD("ag", "ag");
        ADD("fg", "fg");
        ADD("pg", "pg");
        ADD("ng", "ng");
        ADD("mug", "mug");
        ADD("mg", "mg");
        ADD("cg", "cg");
        ADD("dg", "dg");
        ADD("dag", "dag");
        ADD("hg", "hg");
        ADD("kg", "kg");
        ADD("Mg", "Mg");
        ADD("Gg", "Gg");
        ADD("Tg", "Tg");
        ADD("Pg", "Pg");
        ADD("Eg", "Eg");
        ADD("Zg", "Zg");
        ADD("Yg", "Yg");
    }

    RADIO(length_inputunit_code, "Input_length_unit")
    {
        ADD("m", "m");
        ADD("ym", "ym");
        ADD("zm", "zm");
        ADD("am", "am");
        ADD("fm", "fm");
        ADD("pm", "pm");
        ADD("nm", "nm");
        ADD("mum", "mum");
        ADD("mm", "mm");
        ADD("cm", "cm");
        ADD("dm", "dm");
        ADD("dam", "dam");
        ADD("hm", "hm");
        ADD("km", "km");
        ADD("Mm", "Mm");
        ADD("Gm", "Gm");
        ADD("Tm", "Tm");
        ADD("Pm", "Pm");
        ADD("Em", "Em");
        ADD("Zm", "Zm");
        ADD("Ym", "Ym");
    }

    RADIO(time_inputunit_code, "Input_time_unit")
    {
        ADD("s","s");
        ADD("ys","ys");
        ADD("zs","zs");
        ADD("as","as");
        ADD("fs","fs");
        ADD("ps","ps");
        ADD("ns","ns");
        ADD("mus","mus");
        ADD("ms","ms");
        ADD("cs","cs");
        ADD("ds","ds");
        ADD("das","das");
        ADD("hs","hs");
        ADD("ks","ks");
        ADD("Ms","Ms");
        ADD("Gs","Gs");
        ADD("Ts","Ts");
        ADD("Ps","Ps");
        ADD("Es","Es");
        ADD("Zs","Zs");
        ADD("Ys","Ys");
    }
}

// File format
FORMAT(radioss2021)
{
    HEADER("/BEGIN");
    CARD("%-100s", RUNNAME);
    CARD("%10d", INVERS);
    CARD("%20s%20s%20s", mass_inputunit_code, length_inputunit_code, time_inputunit_code);
    CARD("%20s%20s%20s", mass_workunit_code, length_workunit_code, time_workunit_code);
}
FORMAT(radioss100)
{
    HEADER("/BEGIN");
    CARD("%-100s", RUNNAME);
    CARD("%10d%10d", INVERS, IRUN);
    CARD("%20s%20s%20s", mass_inputunit_code, length_inputunit_code, time_inputunit_code);
    CARD("%20s%20s%20s", mass_workunit_code, length_workunit_code, time_workunit_code);
}
FORMAT(radioss51)
{
    HEADER("/BEGIN");
    CARD("%-100s", RUNNAME);
    CARD("%10d%10d", INVERS, IRUN);
}
