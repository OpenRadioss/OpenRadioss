//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Time history (MONV) Setup File
// 

ATTRIBUTES(COMMON) 
{
    //INPUT ATTRIBUTES
    idsmax              = SIZE("Number of Monitored volume");
    ids                 = ARRAY[idsmax](CONTROLVOL, "Identifiers of the objects to be saved");
    Number_Of_Variables = SIZE("Number Variables saved for TH");
    VAR                 = ARRAY[Number_Of_Variables](STRING, "Variables saved for TH");
    // HM INTERNAL
    KEYWORD_STR         = VALUE(STRING, "Solver Keyword");
    TITLE               = VALUE(STRING, "TH group name");
    TH_OPTION           = VALUE(INT, "TH group name");
// ----- CFG Local attribute
    IO_FLAG             = VALUE(INT, "Import/Export flag");
    PREFIX_STR          = VALUE(STRING, "prefix Keyword");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR         = 9000;
    Number_Of_Variables = 7045;
    VAR                 = 7044;
    TH_OPTION           = 4674;
    IO_FLAG             =-1;
    PREFIX_STR          =-1;
}

DEFAULTS(COMMON) 
{

}

GUI(COMMON) 
{
    RADIO(TH_OPTION) 
    {
     /*   ADD(0,"Default TH");*/
        ADD(1,"/TH");
        ADD(2,"/ATH");
        ADD(3,"/BTH");
        ADD(4,"/CTH");
        ADD(5,"/DTH");
        ADD(6,"/ETH");
        ADD(7,"/FTH");
        ADD(8,"/GTH");
        ADD(9,"/HTH");
        ADD(10,"/ITH");
    }
    if(TH_OPTION==0 || TH_OPTION == 1)
    {
        ASSIGN(KEYWORD_STR, "/TH/MONV/"); 
    }
    else if( TH_OPTION == 2)
    {
        ASSIGN(KEYWORD_STR, "/ATH/MONV/"); 
    }
    else if( TH_OPTION == 3)
    {
        ASSIGN(KEYWORD_STR, "/BTH/MONV/"); 
    }
    else if( TH_OPTION == 4)
    {
        ASSIGN(KEYWORD_STR, "/CTH/MONV/"); 
    }
    else if( TH_OPTION == 5)
    {
        ASSIGN(KEYWORD_STR, "/DTH/MONV/"); 
    }
    else if( TH_OPTION == 6)
    {
        ASSIGN(KEYWORD_STR, "/ETH/MONV/"); 
    }
    else if( TH_OPTION == 7)
    {
        ASSIGN(KEYWORD_STR, "/FTH/MONV/"); 
    }
    else if( TH_OPTION == 8)
    {
        ASSIGN(KEYWORD_STR, "/GTH/MONV/"); 
    }
    else if( TH_OPTION == 9)
    {
        ASSIGN(KEYWORD_STR, "/HTH/MONV/"); 
    }
    else if( TH_OPTION == 10)
    {
        ASSIGN(KEYWORD_STR, "/ITH/MONV/"); 
    }
    SIZE(Number_Of_Variables);
    ARRAY(Number_Of_Variables,"Variables") 
    {
       RADIO(VAR) 
       {
            ADD("DEF","DEF: Default");
            ADD("GAS","GAS: Gas (CP CV GAMA)");
            ADD("MASS","MASS: Mass");
            ADD("VOL","VOL: Volume");
            ADD("P","P: Pressure");
            ADD("A","A: Area");
            ADD("T","T: Temperature");
            ADD("AO","AO: Vent area");
            ADD("UO","UO: Vent velocity");
            ADD("AC","AC: Common area");
            ADD("UC","UC: Common velocity");
            ADD("CP","CP: Average heat capacity at constant pressure per mass unit");
            ADD("CV","CV: Average heat capacity at constant volume per mass unit");
            ADD("GAMA","GAMA: CP/CV");
            ADD("DTBAG","DTBAG: FVM stability time step");
            ADD("NFV","NFV: Number of finite volumes");
            ADD("MASS-IN","MASS-IN: Sum of injected mass");
            ADD("ENTHA-IN","ENTHA-IN: Internal energy");
            ADD("WORK","WORK: FVM ressure force work");
            ADD("UPCRIT","UPCRIT: Pressure criterion for FVM to uniform pressure switch");
            ADD("OUT1","OUT1: Vent Hole 1");
            ADD("OUT2","OUT2: Vent Hole 2");
            ADD("OUT3","OUT3: Vent Hole 3");
            ADD("OUT4","OUT4: Vent Hole 4");
            ADD("OUT5","OUT5: Vent Hole 5");
            ADD("OUT6","OUT6: Vent Hole 6");
            ADD("OUT7","OUT7: Vent Hole 7");
            ADD("OUT8","OUT8: Vent Hole 8");
            ADD("OUT9","OUT9: Vent Hole 9");
            ADD("OUT10","OUT10: Vent Hole 10");
            ADD("AO1","AO1: Opened vent area for vent hole or porous surface n1 on non-impacted surface");
            ADD("BO1","BO1: Opened vent area for vent hole or porous surface n1 on impacted surface");
            ADD("UO1","UO1: Outgoing velocity at vent hole or porous surface n1");
            ADD("MO1","MO1: Outgoing mass at vent hole or porous surface n1");
            ADD("HO1","HO1: Outgoing energy at vent hole or porous surface n1");
            ADD("AO2","AO2: Opened vent area for vent hole or porous surface n2 on non-impacted surface");
            ADD("BO2","BO2: Opened vent area for vent hole or porous surface n2 on impacted surface");
            ADD("UO2","UO2: Outgoing velocity at vent hole or porous surface n2");
            ADD("MO2","MO2: Outgoing mass at vent hole or porous surface n2");
            ADD("HO2","HO2: Outgoing energy at vent hole or porous surface n2");
            ADD("AO3","AO3: Opened vent area for vent hole or porous surface n3 on non-impacted surface");
            ADD("BO3","BO3: Opened vent area for vent hole or porous surface n3 on impacted surface");
            ADD("UO3","UO3: Outgoing velocity at vent hole or porous surface n3");
            ADD("MO3","MO3: Outgoing mass at vent hole or porous surface n3");
            ADD("HO3","HO3: Outgoing energy at vent hole or porous surface n3");
            ADD("AO4","AO4: Opened vent area for vent hole or porous surface n4 on non-impacted surface");
            ADD("BO4","BO4: Opened vent area for vent hole or porous surface n4 on impacted surface");
            ADD("UO4","UO4: Outgoing velocity at vent hole or porous surface n4");
            ADD("MO4","MO4: Outgoing mass at vent hole or porous surface n4");
            ADD("HO4","HO4: Outgoing energy at vent hole or porous surface n4");
            ADD("AO5","AO5: Opened vent area for vent hole or porous surface n5 on non-impacted surface");
            ADD("BO5","BO5: Opened vent area for vent hole or porous surface n5 on impacted surface");
            ADD("UO5","UO5: Outgoing velocity at vent hole or porous surface n5");
            ADD("MO5","MO5: Outgoing mass at vent hole or porous surface n5");
            ADD("HO5","HO5: Outgoing energy at vent hole or porous surface n5");
            ADD("AO6","AO6: Opened vent area for vent hole or porous surface n6 on non-impacted surface");
            ADD("BO6","BO6: Opened vent area for vent hole or porous surface n6 on impacted surface");
            ADD("UO6","UO6: Outgoing velocity at vent hole or porous surface n6");
            ADD("MO6","MO6: Outgoing mass at vent hole or porous surface n6");
            ADD("HO6","HO6: Outgoing energy at vent hole or porous surface n6");
            ADD("AO7","AO7: Opened vent area for vent hole or porous surface n7 on non-impacted surface");
            ADD("BO7","BO7: Opened vent area for vent hole or porous surface n7 on impacted surface");
            ADD("UO7","UO7: Outgoing velocity at vent hole or porous surface n7");
            ADD("MO7","MO7: Outgoing mass at vent hole or porous surface n7");
            ADD("HO7","HO7: Outgoing energy at vent hole or porous surface n7");
            ADD("AO8","AO8: Opened vent area for vent hole or porous surface n8 on non-impacted surface");
            ADD("BO8","BO8: Opened vent area for vent hole or porous surface n8 on impacted surface");
            ADD("UO8","UO8: Outgoing velocity at vent hole or porous surface n8");
            ADD("MO8","MO8: Outgoing mass at vent hole or porous surface n8");
            ADD("HO8","HO8: Outgoing energy at vent hole or porous surface n8");
            ADD("AO9","AO9: Opened vent area for vent hole or porous surface n9 on non-impacted surface");
            ADD("BO9","BO9: Opened vent area for vent hole or porous surface n9 on impacted surface");
            ADD("UO9","UO9: Outgoing velocity at vent hole or porous surface n9");
            ADD("MO9","MO9: Outgoing mass at vent hole or porous surface n9");
            ADD("HO9","HO9: Outgoing energy at vent hole or porous surface n9");
            ADD("AO10","AO10: Opened vent area for vent hole or porous surface n10 on non-impacted surface");
            ADD("BO10","BO10: Opened vent area for vent hole or porous surface n10 on impacted surface");
            ADD("UO10","UO10: Outgoing velocity at vent hole or porous surface n10");
            ADD("MO10","MO10: Outgoing mass at vent hole or porous surface n10");
            ADD("HO10","HO10: Outgoing energy at vent hole or porous surface n10");

        }
    }
    SIZE(idsmax);
    ARRAY(idsmax,"MONV")
    {
        DATA(ids);
    }
}

// File format
FORMAT(radioss100)
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
 
    
    if(IO_FLAG == 1 )
    {
        HEADER("/%-s/MONV/%d",PREFIX_STR, _ID_);
        if(PREFIX_STR=="TH")
        {
             ASSIGN(TH_OPTION,1, IMPORT);
        }
        else if(PREFIX_STR=="ATH")
        {
            ASSIGN(TH_OPTION, 2, IMPORT);
        }
        else if(PREFIX_STR=="BTH")
        {
            ASSIGN(TH_OPTION, 3, IMPORT);
        }
        else if(PREFIX_STR=="CTH")
        {
            ASSIGN(TH_OPTION, 4, IMPORT);
        }
        else if(PREFIX_STR=="DTH")
        {
            ASSIGN(TH_OPTION, 5, IMPORT);
        }
        else if(PREFIX_STR=="ETH")
        {
            ASSIGN(TH_OPTION, 6, IMPORT);
        }
         else if(PREFIX_STR=="FTH")
        {
            ASSIGN(TH_OPTION, 7, IMPORT);
        }
        else if(PREFIX_STR=="GTH")
        {
            ASSIGN(TH_OPTION, 8, IMPORT);
        }
        else if(PREFIX_STR=="HTH")
        {
            ASSIGN(TH_OPTION, 9, IMPORT);
        }                
        else if(PREFIX_STR=="ITH")
        {
            ASSIGN(TH_OPTION, 10, IMPORT);
        }
        
    }
    if(IO_FLAG == 2 )
    {
        if(TH_OPTION==0 || TH_OPTION == 1)
        {
            HEADER("/TH/MONV/%d", _ID_); 
        }
        else if( TH_OPTION == 2)
        {
            HEADER("/ATH/MONV/%d", _ID_); 
        }
        else if( TH_OPTION == 3)
        {
            HEADER("/BTH/MONV/%d", _ID_); 
        }
        else if( TH_OPTION == 4)
        {
            HEADER("/CTH/MONV/%d", _ID_); 
        }
        else if( TH_OPTION == 5)
        {
            HEADER("/DTH/MONV/%d", _ID_); 
        }
        else if( TH_OPTION == 6)
        {
            HEADER("/ETH/MONV/%d", _ID_); 
        }
        else if( TH_OPTION == 7)
        {
            HEADER("/FTH/MONV/%d", _ID_); 
        }
        else if( TH_OPTION == 8)
        {
            HEADER("/GTH/MONV/%d", _ID_); 
        }
        else if( TH_OPTION == 9)
        {
            HEADER("/HTH/MONV/%d", _ID_); 
        }
        else if( TH_OPTION == 10)
        {
            HEADER("/ITH/MONV/%d", _ID_); 
        }
    }
    CARD("%-100s", TITLE);
    // ASSIGN(Number_Of_Variables,13); // Dummy value, pending an improvement of the FREE_CELL_LIST
    COMMENT("#      var       var       var       var       var       var       var       var       var       var");
    FREE_CELL_LIST(Number_Of_Variables,"%-10s",VAR,100);
    COMMENT("#      Obj       Obj       Obj       Obj       Obj       Obj       Obj       Obj       Obj       Obj");
    FREE_CELL_LIST(idsmax,"%10d",ids,100);
}

FORMAT(radioss51)
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
 
    
    if(IO_FLAG == 1 )
    {
        HEADER("/%-s/MONV/%d",PREFIX_STR, _ID_);
        if(PREFIX_STR=="TH")
        {
             ASSIGN(TH_OPTION,1, IMPORT);
        }
        else if(PREFIX_STR=="ATH")
        {
            ASSIGN(TH_OPTION, 2, IMPORT);
        }
        else if(PREFIX_STR=="BTH")
        {
            ASSIGN(TH_OPTION, 3, IMPORT);
        }
        else if(PREFIX_STR=="CTH")
        {
            ASSIGN(TH_OPTION, 4, IMPORT);
        }
        else if(PREFIX_STR=="DTH")
        {
            ASSIGN(TH_OPTION, 5, IMPORT);
        }
        else if(PREFIX_STR=="ETH")
        {
            ASSIGN(TH_OPTION, 6, IMPORT);
        }
         else if(PREFIX_STR=="FTH")
        {
            ASSIGN(TH_OPTION, 7, IMPORT);
        }
        else if(PREFIX_STR=="GTH")
        {
            ASSIGN(TH_OPTION, 8, IMPORT);
        }
        else if(PREFIX_STR=="HTH")
        {
            ASSIGN(TH_OPTION, 9, IMPORT);
        }                
        else if(PREFIX_STR=="ITH")
        {
            ASSIGN(TH_OPTION, 10, IMPORT);
        }
        
    }
    if(IO_FLAG == 2 )
    {
        if(TH_OPTION==0 || TH_OPTION == 1)
        {
            HEADER("/TH/MONV/%d", _ID_); 
        }
        else if( TH_OPTION == 2)
        {
            HEADER("/ATH/MONV/%d", _ID_); 
        }
        else if( TH_OPTION == 3)
        {
            HEADER("/BTH/MONV/%d", _ID_); 
        }
        else if( TH_OPTION == 4)
        {
            HEADER("/CTH/MONV/%d", _ID_); 
        }
        else if( TH_OPTION == 5)
        {
            HEADER("/DTH/MONV/%d", _ID_); 
        }
        else if( TH_OPTION == 6)
        {
            HEADER("/ETH/MONV/%d", _ID_); 
        }
        else if( TH_OPTION == 7)
        {
            HEADER("/FTH/MONV/%d", _ID_); 
        }
        else if( TH_OPTION == 8)
        {
            HEADER("/GTH/MONV/%d", _ID_); 
        }
        else if( TH_OPTION == 9)
        {
            HEADER("/HTH/MONV/%d", _ID_); 
        }
        else if( TH_OPTION == 10)
        {
            HEADER("/ITH/MONV/%d", _ID_); 
        }
    }
    CARD("%-100s", TITLE);
    // ASSIGN(Number_Of_Variables,13); // Dummy value, pending an improvement of the FREE_CELL_LIST
    COMMENT("#      var       var       var       var       var       var       var       var       var       var");
    FREE_CELL_LIST(Number_Of_Variables,"%-10s",VAR,100);
    COMMENT("#      Obj       Obj       Obj       Obj       Obj       Obj       Obj       Obj       Obj       Obj");
    FREE_CELL_LIST(idsmax,"%10d",ids,100);
}

FORMAT(radioss41) 
{
    HEADER("/TH/MONV/%d/%s",_ID_,TITLE);
    // ASSIGN(Number_Of_Variables,13); // Dummy value, pending an improvement of the FREE_CELL_LIST
    COMMENT("#    var     var     var     var     var     var     var     var     var     var");
    FREE_CELL_LIST(Number_Of_Variables,"%-8s",VAR,80);
    COMMENT("#    Obj     Obj     Obj     Obj     Obj     Obj     Obj     Obj     Obj     Obj");
    FREE_CELL_LIST(idsmax,"%8d",ids,80);
}