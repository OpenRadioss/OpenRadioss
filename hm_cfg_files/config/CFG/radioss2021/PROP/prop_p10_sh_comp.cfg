//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Property SH_COMP TYPE10
ATTRIBUTES(COMMON)
{
    Ishell                                  = VALUE(INT,  " Shell Element Formulation Flag");
    Ismstr                                  = VALUE(INT,  " Shell Small Strain Formulation Flag");
    ISH3N                                   = VALUE(INT,  " 3 Node Shell Element Formulation Flag");
    Idrill                                  = VALUE(INT,  " Drilling Degree of Freedom Stiffness Flag");
    P_Thick_Fail                            = VALUE(FLOAT, "Percentage of layers that must fail before the element is deleted ");
    Hm                                      = VALUE(FLOAT,  " Shell Membrane Hourglass Coefficient");
    Hf                                      = VALUE(FLOAT,  " Shell Out-of-Plane Hourglass");
    Hr                                      = VALUE(FLOAT,  " Shell Rotation Hourglass Coefficient");
    Dm                                      = VALUE(FLOAT,  " Shell Membrane Damping");
    Dn                                      = VALUE(FLOAT,  " Shell Numerical Damping");
    NIP                                     = SIZE(" Number of Layers");
    ISTRAIN                                 = VALUE(INT,  " Compute Strains for Post-Processing Flag");
    THICK                                   = VALUE(FLOAT,  " Shell Thickness");
    AREA_SHEAR                              = VALUE(FLOAT,  " Shear Factor");
    ITHICK                                  = VALUE(INT,  " Shell Resultant Stresses Calculation Flag");
    IPLAS                                   = VALUE(INT,  " Shell Plane Stress Plasticity Flag");
    V_X                                     = VALUE(FLOAT,  " X component for Reference Vector");
    V_Y                                     = VALUE(FLOAT,  " Y component for Reference Vector");
    V_Z                                     = VALUE(FLOAT,  " Z component for Reference Vector");
    Prop_phi                                = ARRAY[NIP](FLOAT," Angle for Layer");
    SKEW_CSID                               = VALUE(SYSTEM,  " Skew Identifier for Reference Vector");
    Ip                                      = VALUE(INT,  " Reference Direction in Shell plane");
    
    //Attributes for HM usage
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    NODE1                                   = VALUE(NODE, " Vector Base Node");
    NODE2                                   = VALUE(NODE, " Vector End Node");   
    n1                                      = VALUE(FLOAT, "");
    n2                                      = VALUE(FLOAT, "");
    Prop_Name_OR_Type                       = VALUE(INT, "");
    TITLE                                   = VALUE(STRING, "");
    IO_FLAG                                 = VALUE(INT, "");
    TYPE_NO                                 = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    NUM_COMMENTS                            = 5110;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;   
    Ishell                                  = 8028;
    Ismstr                                  = 5152;
    ISH3N                                   = 4001;
    P_Thick_Fail                            = 5407;
    Idrill                                  = 4827;
    Hm                                      = 8024;
    Hf                                      = 8025;
    Hr                                      = 8026;
    Dm                                      = 8027;
    Dn                                      = 4135;
    NIP                                     =  427;
    ISTRAIN                                 = 2177;
    THICK                                   =  431;
    AREA_SHEAR                              =  402;
    ITHICK                                  = 2092;
    IPLAS                                   = 2089;
    NODE1                                   = 5115;
    NODE2                                   = 4481;
    V_X                                     =  139;
    V_Y                                     =  140;
    V_Z                                     =  141;
    SKEW_CSID                               =  412;
    Prop_phi                                = 4165;
    n1                                      =   -1;
    n2                                      =   -1;
    Prop_Name_OR_Type                       = 4537;
    TITLE                                   =   -1;
    IO_FLAG                                 =   -1;
    TYPE_NO                                 =   -1;
    Ip                                      = 8029;
}

DRAWABLES(COMMON) {
  THICKNESS = SCALAR(THICK);
}

CHECK(COMMON)
{
    Hf                                      >=  0.0;
    Hf                                      <= 0.05;
    Hm                                      >=  0.0;
    Hm                                      <= 0.05;
    Hr                                      >=  0.0;
    Hr                                      <= 0.05;
    THICK                                   >   0.0;
    P_Thick_Fail                            >=  0.0;
    P_Thick_Fail                            <=  1.0;
    NIP                                     <=  100;
}

DEFAULTS(COMMON)
{
    AREA_SHEAR                              = 0.833333;
    Hf                                      =     0.01;
    Hm                                      =     0.01;
    Hr                                      =     0.01;
    NIP                                     =        1;
    V_X                                     =      1.0;
    V_Y                                     =      0.0;
    V_Z                                     =      0.0;
    Ip                                      =        0;
}

DRAWABLES(COMMON) {
  THICKNESS = SCALAR(THICK);
}
GUI(COMMON)
{
 optional:
    RADIO(CommentEnumField)
    {
       ENUM_VALUE_FLAG=TRUE;
       ADD(1, "1:Hide in Menu/Export");
       ADD(2, "2:Show in Menu/Export");
       ADD(3, "3:Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Prop_Name_OR_Type == 2)
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TYPE10/");

    }
    else
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/SH_COMP/");
    }
    RADIO(Ishell)
    {
       ADD(0, "0:Use Value in /DEF_SHELL.");
       ADD(1, "1:Q4, Visco-Elastic Hourglass Modes Orthogonal to Deformation and Rigid Modes (Belytschko).");
       ADD(2, "2:Q4, Visco-Elastic Hourglass without Orthogonality (Hallquist).");
       ADD(3, "3:Q4, Elasto-Plastic Hourglass with Orthogonality.");
       ADD(4, "4:Q4 with Improved Type 1 Formulation (Orthogonalization for Warped Elements).");
       ADD(12, "12:QBAT Shell Formulation.");
       ADD(24, "24:QEPH Shell Formulation.");
    }
    RADIO(Ismstr)
    {
       ADD(0, "0:Use Value in /DEF_SHELL.");
       ADD(1, "1:Small STrain from Time=0.");
       ADD(2, "2:Full Geometric Nonlinearities with Possible Small Strain Formulation Activation in RADIOSS Engine.");
       ADD(3, "3:Old Small Strain Formulation.");
       ADD(4, "4:Full Geometric Nonlinearities.");
    }
    RADIO(ISH3N)
    {
       ADD(0, "0:Use Value in /DEF_SHELL.");
       ADD(1, "1:Standard Triangle (C0).");
       ADD(2, "2:Standard Triangle (C0) with Modification for Large Rotation.");
       ADD(30, "30:DKT18.");
       ADD(31, "31:DKT_S3, which Based on DKT12 of BATOZ.");
    }
    RADIO(Idrill)
    {
       ADD(0, "0:Default, Set to 2.");
       ADD(1, "1:Yes.");
       ADD(2, "2:No.");
    }
    SCALAR(P_Thick_Fail);
    SCALAR(Hm);
    SCALAR(Hf);
    SCALAR(Hr);
    SCALAR(Dm);
    SCALAR(Dn);
    SIZE(NIP);
    ARRAY(NIP,"Layer") 
    {
        SCALAR(Prop_phi) { DIMENSION="a";        }
    }
    RADIO(ISTRAIN)
    {
       ADD(0, "0:Default, Set to Value Defined with /DEF_SHELL.");
       ADD(1, "1:Yes.");
       ADD(2, "2:No."); 
    }
    SCALAR(THICK)  { DIMENSION="l";        }
    SCALAR(AREA_SHEAR);
    RADIO(ITHICK)
    {
       ADD(0, "0:Default, Set to Value Defined with /DEF_SHELL.");
       ADD(1, "1:Thickness Change is Taken into Account.");
       ADD(2, "2:Thickness is Constant.");
    }
    RADIO(IPLAS)
    {
       ADD(0, "0:Default, Set to Value Defined with /DEF_SHELL.");
       ADD(1, "1:Iterative Projection with Three Newton Iterations.");
       ADD(2, "2:Radial Return.");
    }
    DATA(NODE1);
    DATA(NODE2);
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(V_X, [@getentityvalue(nodes,$NODE2,x)] - [@getentityvalue(nodes,$NODE1,x)] );
        ASSIGN(V_Y, [@getentityvalue(nodes,$NODE2,y)] - [@getentityvalue(nodes,$NODE1,y)]);
        ASSIGN(V_Z, [@getentityvalue(nodes,$NODE2,z)] - [@getentityvalue(nodes,$NODE1,z)]);
    }
    else
    {
        SCALAR(V_X);
        SCALAR(V_Y);
        SCALAR(V_Z);
    }

    /*
     mandatory:
  graphical SUPPORT("Support") {
    OBJECTS=(/PART/SHELL);
    ADD(PART,"Parts");
  }
  */
}
//File format for Radioss 2021
FORMAT(radioss2021)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE10/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SH_COMP/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#   Ishell    Ismstr     Ish3n    Idrill                            P_thick_fail");
    CARD("%10d%10d%10d%10d                    %20lg",Ishell,Ismstr,ISH3N,Idrill,P_Thick_Fail);
    COMMENT("#                 Hm                  Hf                  Hr                  Dm                  Dn");
    CARD("%20lg%20lg%20lg%20lg%20lg",Hm,Hf,Hr,Dm,Dn);
    COMMENT("#        N   Istrain               Thick              Ashear              Ithick     Iplas");
    CARD("%10d%10d%20lg%20lg          %10d%10d",NIP,ISTRAIN,THICK,AREA_SHEAR,ITHICK,IPLAS);
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,x)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,x)], EXPORT);
        ASSIGN(V_X, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,y)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,y)], EXPORT);
        ASSIGN(V_Y, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,z)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,z)], EXPORT);
        ASSIGN(V_Z, n2-n1, EXPORT);
    }
    COMMENT("#                 Vx                  Vy                  Vz     Iskew                            Ip");
    CARD("%20lg%20lg%20lg%10d                    %10d",V_X,V_Y,V_Z,SKEW_CSID,Ip);
    if(NIP > 0)
    {
        COMMENT("#              Phi_1               Phi_2               Phi_3               Phi_4               Phi_5");
        CELL_LIST(NIP,"%20lg",Prop_phi);
    }
}

//File format for Radioss 2018
FORMAT(radioss2018)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE10/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SH_COMP/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#   Ishell    Ismstr     Ish3n    Idrill                            P_thick_fail");
    CARD("%10d%10d%10d%10d                    %20lg",Ishell,Ismstr,ISH3N,Idrill,P_Thick_Fail);
    COMMENT("#                 Hm                  Hf                  Hr                  Dm                  Dn");
    CARD("%20lg%20lg%20lg%20lg%20lg",Hm,Hf,Hr,Dm,Dn);
    COMMENT("#        N   Istrain               Thick              Ashear              Ithick     Iplas");
    CARD("%10d%10d%20lg%20lg          %10d%10d",NIP,ISTRAIN,THICK,AREA_SHEAR,ITHICK,IPLAS);
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,x)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,x)], EXPORT);
        ASSIGN(V_X, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,y)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,y)], EXPORT);
        ASSIGN(V_Y, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,z)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,z)], EXPORT);
        ASSIGN(V_Z, n2-n1, EXPORT);
    }
    COMMENT("#                 Vx                  Vy                  Vz");
    CARD("%20lg%20lg%20lg",V_X,V_Y,V_Z);
    if(NIP > 0)
    {
        COMMENT("#              Phi_1               Phi_2               Phi_3               Phi_4               Phi_5");
        CELL_LIST(NIP,"%20lg",Prop_phi);
    }
}

//File format for Radioss 110
FORMAT(radioss110)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE10/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SH_COMP/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#   Ishell    Ismstr     Ish3n    Idrill");
    CARD("%10d%10d%10d%10d",Ishell,Ismstr,ISH3N,Idrill);
    COMMENT("#                 Hm                  Hf                  Hr                  Dm                  Dn");
    CARD("%20lg%20lg%20lg%20lg%20lg",Hm,Hf,Hr,Dm,Dn);
    COMMENT("#        N   Istrain               Thick              Ashear              Ithick     Iplas");
    CARD("%10d%10d%20lg%20lg          %10d%10d",NIP,ISTRAIN,THICK,AREA_SHEAR,ITHICK,IPLAS);
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,x)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,x)], EXPORT);
        ASSIGN(V_X, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,y)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,y)], EXPORT);
        ASSIGN(V_Y, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,z)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,z)], EXPORT);
        ASSIGN(V_Z, n2-n1, EXPORT);
    }
    COMMENT("#                 Vx                  Vy                  Vz");
    CARD("%20lg%20lg%20lg",V_X,V_Y,V_Z);
    if(NIP > 0)
    {
        COMMENT("#              Phi_1               Phi_2               Phi_3               Phi_4               Phi_5");
        CELL_LIST(NIP,"%20lg",Prop_phi);
    }
}
//File format for Radioss 90
FORMAT(radioss90)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE10/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#   Ishell    Ismstr     Ish3n");
    CARD("%10d%10d%10d",Ishell,Ismstr,ISH3N);
    COMMENT("#                 Hm                  Hf                  Hr                  Dm                  Dn");
    CARD("%20lg%20lg%20lg%20lg%20lg",Hm,Hf,Hr,Dm,Dn);
    COMMENT("#        N   Istrain               Thick              Ashear              Ithick     Iplas");
    CARD("%10d%10d%20lg%20lg          %10d%10d",NIP,ISTRAIN,THICK,AREA_SHEAR,ITHICK,IPLAS);
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,x)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,x)], EXPORT);
        ASSIGN(V_X, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,y)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,y)], EXPORT);
        ASSIGN(V_Y, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,z)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,z)], EXPORT);
        ASSIGN(V_Z, n2-n1, EXPORT);
    }
    COMMENT("#                 Vx                  Vy                  Vz");
    CARD("%20lg%20lg%20lg",V_X,V_Y,V_Z);
    if(NIP > 0)
    {
        COMMENT("#              Phi_1               Phi_2               Phi_3               Phi_4               Phi_5");
        CELL_LIST(NIP,"%20lg",Prop_phi);
    }
}
//File format for Radioss 51
FORMAT(radioss51)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE10/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#   Ishell    Ismstr");
    CARD("%10d%10d",Ishell,Ismstr);
    COMMENT("#                 Hm                  Hf                  Hr                  Dm                  Dn");
    CARD("%20lg%20lg%20lg%20lg%20lg",Hm,Hf,Hr,Dm,Dn);
    COMMENT("#        N   Istrain               Thick              Ashear              Ithick     Iplas");
    CARD("%10d%10d%20lg%20lg          %10d%10d",NIP,ISTRAIN,THICK,AREA_SHEAR,ITHICK,IPLAS);
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,x)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,x)], EXPORT);
        ASSIGN(V_X, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,y)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,y)], EXPORT);
        ASSIGN(V_Y, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,z)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,z)], EXPORT);
        ASSIGN(V_Z, n2-n1, EXPORT);
    }
    COMMENT("#                 Vx                  Vy                  Vz");
    CARD("%20lg%20lg%20lg",V_X,V_Y,V_Z);
    if(NIP > 0)
    {
        COMMENT("#              Phi_1               Phi_2               Phi_3               Phi_4               Phi_5");
        CELL_LIST(NIP,"%20lg",Prop_phi);
    }
}
// File format for Radioss 41
FORMAT(radioss44) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s/%d/%s",TYPE_NO,_ID_,TITLE);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    COMMENT("# Ishell  Ismstr");
    CARD("%8d%8d",Ishell,Ismstr);
    COMMENT("#             Hm              Hf              Hr              Dm              Dn");
    CARD("%16lg%16lg%16lg%16lg%16lg",Hm,Hf,Hr,Dm,Dn);
    COMMENT("#      N Istrain           Thick          Ashear          Ithick   Iplas");
    CARD("%8d%8d%16lg%16lg        %8d%8d",NIP,ISTRAIN,THICK,AREA_SHEAR,ITHICK,IPLAS);
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,x)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,x)], EXPORT);
        ASSIGN(V_X, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,y)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,y)], EXPORT);
        ASSIGN(V_Y, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,z)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,z)], EXPORT);
        ASSIGN(V_Z, n2-n1, EXPORT);
    }
    COMMENT("#             Vx              Vy              Vz");
    CARD("%16lg%16lg%16lg",V_X,V_Y,V_Z);
    if(NIP > 0)
    {
        COMMENT("#          Phi_1           Phi_2           Phi_3           Phi_4           Phi_5");
        CELL_LIST(NIP,"%16lg",Prop_phi);
    }
}

// File format for Radioss 41
FORMAT(radioss41) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s/%d/%s",TYPE_NO,_ID_,TITLE);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    COMMENT("# Ishell  Ismstr");
    CARD("%8d%8d",Ishell,Ismstr);
    COMMENT("#             Hm              Hf              Hr              Dm");
    CARD("%16lg%16lg%16lg%16lg",Hm,Hf,Hr,Dm);
    COMMENT("#      N Istrain           Thick          Ashear          Ithick   Iplas");
    CARD("%8d%8d%16lg%16lg        %8d%8d",NIP,ISTRAIN,THICK,AREA_SHEAR,ITHICK,IPLAS);
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,x)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,x)], EXPORT);
        ASSIGN(V_X, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,y)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,y)], EXPORT);
        ASSIGN(V_Y, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,z)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,z)], EXPORT);
        ASSIGN(V_Z, n2-n1, EXPORT);
    }
    COMMENT("#             Vx              Vy              Vz");
    CARD("%16lg%16lg%16lg",V_X,V_Y,V_Z);
    if(NIP > 0)
    {
        COMMENT("#          Phi_1           Phi_2           Phi_3           Phi_4           Phi_5");
        CELL_LIST(NIP,"%16lg",Prop_phi);
    }
}
