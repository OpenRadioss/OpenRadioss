//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- inter_type3.cfg ---

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES
    mainentityids                           = VALUE(SETS,         "First surface identifier")      { SUBTYPES = (/SETS/SURF) ; }
    secondaryentityids                      = VALUE(SETS,         "Second surface identifier")     { SUBTYPES = (/SETS/SURF) ; }
    NodDel3                                 = VALUE(INT,          "Node and segment deletion flag");

    TYPE3_SCALE                             = VALUE(FLOAT,        "Interface stiffness scale factor must be less than 1.0");
    FRIC                                    = VALUE(FLOAT,        "Coulomb friction");
    GAP                                     = VALUE(FLOAT,        "Gap for impact activation");
    TSTART                                  = VALUE(FLOAT,        "Start time for contact impact computation");
    TSTOP                                   = VALUE(FLOAT,        "Time for temporary deactivation");

    Deactivate_X_BC                         = VALUE(INT,          "Deactivation flag of X boundary condition at impact");
    Deactivate_Y_BC                         = VALUE(INT,          "Deactivation flag of Y boundary condition at impact");
    Deactivate_Z_BC                         = VALUE(INT,          "Deactivation flag of Z boundary condition at impact");
    Gflag                                   = VALUE(INT,          "Renumbering flag for segments of the first surface");
    Vflag                                   = VALUE(INT,          "Renumbering flag for segments of the second surface ");

    Ptlim                                   = VALUE(FLOAT,        "Maximum tangential pressure");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING,       "Solver Keyword");

    TITLE                                   = VALUE(STRING,       "Interface title");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES
    NodDel3                                 = 4013;

    TYPE3_SCALE                             = 4014;
    FRIC                                    = 5;
    GAP                                     = 5153;
    TSTART                                  = 11;
    TSTOP                                   = 12;

    Deactivate_X_BC                         = 7020;
    Deactivate_Y_BC                         = 7021;
    Deactivate_Z_BC                         = 7022;
    Gflag                                   = 5112;
    Vflag                                   = 5113;

    Ptlim                                   = 3020;

    //HM INTERNAL
    KEYWORD_STR                             = 9000;

    TITLE                                   = -1;
}

CHECK(COMMON)
{
    TYPE3_SCALE                             <=1.0;
}

DEFAULTS(COMMON)
{
    NodDel3                                 = 0;
    TYPE3_SCALE                             = 0.2;
    Ptlim                                   = 10E30;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "/INTER/TYPE3/");

    DATA(mainentityids, "surf_ID1");
    DATA(secondaryentityids,  "surf_ID2");

    RADIO(NodDel3, "Idel")
    {
        ADD(0,  "0: (Default) No deletion");
        ADD(1,  "1: When all the elements (4-node shells, 3-node shells, solids) associated to one segment are deleted, the segment is removed from the interface");
        ADD(2,  "2: When a 4-node shell, a 3-node shell or a solid element is deleted, the corresponding segment is removed from the interface");
        ADD(-1, "-1: Same as =1, except non-connected nodes are not removed from the secondary side of the interface");
        ADD(-2, "-2: Same as =2, except non-connected nodes are not removed from the secondary side of the interface");
    }

    SCALAR(TYPE3_SCALE, "Stfac")                    { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(FRIC,        "Fric")                     { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(GAP,         "Gap")                      { DIMENSION = "l" ; }
    SCALAR(TSTART,      "Tstart")                   { DIMENSION = "t" ; }
    SCALAR(TSTOP,       "Tstop")                    { DIMENSION = "t" ; }

    FLAG( Deactivate_X_BC, "IBC_x");
    FLAG( Deactivate_Y_BC, "IBC_y");
    FLAG( Deactivate_Z_BC, "IBC_z");

    RADIO(Gflag, "IRS")
    {
       ADD(0, "0: If segment is connected to a solid element its normal is reversed if entering the solid element (the segment is renumbered)");
       ADD(1, "1: Normal is always reversed (segment 1234 is read 2143)");
       ADD(2, "2: Normal is never reversed (segments connected to a solid element are not renumbered)");
    }

    RADIO(Vflag, "IRm")
    {
       ADD(0, "0: If segment is connected to a solid element its normal is reversed if entering the solid element (the segment is renumbered)");
       ADD(1, "1: Normal is always reversed (segment 1234 is read 2143)");
       ADD(2, "2: Normal is never reversed (segments connected to a solid element are not renumbered)");
    }

    SCALAR(Ptlim, "Ptlim")                  { DIMENSION = "pressure" ; }
}

// File format
FORMAT(radioss44)
{
    HEADER("/INTER/TYPE3/%-d", _ID_);
    CARD("%-80s", TITLE);

    COMMENT("#surfid1 surfid2");
    CARD("%8d%8d", mainentityids, secondaryentityids);

    COMMENT("#          STFAC            FRIC             GAP          Tstart           Tstop");
    CARD("%16lg%16lg%16lg%16lg%16lg", TYPE3_SCALE, FRIC, GAP, TSTART, TSTOP);

    COMMENT("#    IBC     IRS     IRM");
    CARD("%5s%1d%1d%1d%8d%8d", _BLANK_, Deactivate_X_BC, Deactivate_Y_BC, Deactivate_Z_BC, Gflag, Vflag);
}

FORMAT(radioss51)
{
    HEADER("/INTER/TYPE3/%-d", _ID_);
    CARD("%-100s", TITLE);

    COMMENT("# surf_id1  surf_id2                                                        Idel");
    CARD("%10d%10d%50s%10d", mainentityids, secondaryentityids, _BLANK_, NodDel3);

    COMMENT("#              STFAC                FRIC                 GAP              Tstart               Tstop");
    CARD("%20lg%20lg%20lg%20lg%20lg", TYPE3_SCALE, FRIC, GAP, TSTART, TSTOP);

    COMMENT("#      IBC       IRS       IRM");
    CARD("%7s%1d%1d%1d%10d%10d", _BLANK_, Deactivate_X_BC, Deactivate_Y_BC, Deactivate_Z_BC, Gflag, Vflag);
}

FORMAT(radioss90)
{
    HEADER("/INTER/TYPE3/%-d", _ID_);
    CARD("%-100s", TITLE);

    COMMENT("# surf_ID1  surf_ID2                                                        Idel");
    CARD("%10d%10d%50s%10d", mainentityids, secondaryentityids, _BLANK_, NodDel3);

    COMMENT("#              Stfac                Fric                 Gap              Tstart               Tstop");
    CARD("%20lg%20lg%20lg%20lg%20lg", TYPE3_SCALE, FRIC, GAP, TSTART, TSTOP);

    COMMENT("#      IBC       IRS       IRM");
    CARD("%7s%1d%1d%1d%10d%10d", _BLANK_, Deactivate_X_BC, Deactivate_Y_BC, Deactivate_Z_BC, Gflag, Vflag);
}

FORMAT(radioss2018)
{
    HEADER("/INTER/TYPE3/%-d", _ID_);
    CARD("%-100s", TITLE);

    COMMENT("# surf_ID1  surf_ID2                                                        Idel");
    CARD("%10d%10d%50s%10d", mainentityids, secondaryentityids, _BLANK_, NodDel3);

    COMMENT("#              Stfac                Fric                 Gap              Tstart               Tstop");
    CARD("%20lg%20lg%20lg%20lg%20lg", TYPE3_SCALE, FRIC, GAP, TSTART, TSTOP);

    COMMENT("#      IBC       IRS       IRm");
    CARD("%7s%1d%1d%1d%10d%10d", _BLANK_, Deactivate_X_BC, Deactivate_Y_BC, Deactivate_Z_BC, Gflag, Vflag);

    COMMENT("#                                                                          Ptlim");
    CARD("%60s%20lg", _BLANK_, Ptlim);
}
