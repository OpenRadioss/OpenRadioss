//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Subobject Laminate
//
ATTRIBUTES(COMMON)
{
    plyidlistmax                            = SIZE("Number of Layers");
    plyidlist                               = ARRAY[plyidlistmax](PLY, "Ply Property ID for Layer i");
    Phi_Zi_Size                             = SIZE("Temp variable for Phi & Zi array size");
    Prop_phi                                = ARRAY[Phi_Zi_Size](FLOAT, "Angle for Layer i");
    Prop_Zi                                 = ARRAY[Phi_Zi_Size](FLOAT, "Z Position for Layer i");
    P_thick_fail_lam                        = ARRAY[Phi_Zi_Size](FLOAT,"Percentage of layer thickness that must fail before the element is deleted");
    F_weight_i                              = ARRAY[Phi_Zi_Size](FLOAT,"Relative failure weight factor for layer ");
    TITLE                                   = VALUE(STRING, "Laminate Title");
    laminateconfig                          = VALUE(INT, "Laminate Configuration");
    sublaminateidlistmax                    = SIZE("Number of Sublaminates");
    sublaminateidlist                       = ARRAY[sublaminateidlistmax](LAMINATE, "Sublaminate id list");
    interfacepair                           = SIZE("Number of Interface Pairs");
    interfacepairsize                       = SIZE("");
    interfacepairplyids                     = ARRAY[interfacepairsize](PLY, "Ply Property ID for Layer i");
    
    //Attributes for HM usage 
    IO_FLAG                                 = VALUE(INT, "IO Flag");
    DUMMY                                   = VALUE(INT, "Temporary Variable to Increment Size of Plies while Exporting");
    IS_SUB                                  = VALUE(STRING, "Temporary Variable to check whether next string is SUB or not");
    updated_ply_id                          = VALUE(PLY, "Updated Id of Ply");
    index                                   = VALUE(INT,"");
    Pply_IDt                                = VALUE(PLY,"");
    Pply_IDb                                = VALUE(PLY,"");
    Current_Phi_Zi                          = VALUE(INT,"");
    _BLANK                                  = VALUE(STRING,"To consider blank");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    Prop_phi                                = 4165;
    Prop_Zi                                 = 4167;
    P_thick_fail_lam                        = -1; // temporarily defining as -1.
    F_weight_i                              = -1; // temporarily defining as -1.
    IO_FLAG                                 =   -1;
    DUMMY                                   =   -1;
    IS_SUB                                  =   -1;
    TITLE                                   =   -1;
    updated_ply_id                          =   -1;
    interfacepairsize                       =   -1;
    index                                   =   -1;
    Pply_IDt                                =   -1;
    Pply_IDb                                =   -1;
    Phi_Zi_Size                             =   -1;
    Current_Phi_Zi                          =   -1;
    _BLANK                                  =   -1;
}

GUI(COMMON)
{
    //Is not working will have to look into it
    SIZE(Phi_Zi_Size);
    ARRAY(Phi_Zi_Size,"")
    {
        SCALAR(Prop_phi)  {DIMENSION="a";}
        SCALAR(Prop_Zi)    {DIMENSION="l";}
        SCALAR(P_thick_fail_lam)  {DIMENSION="DIMENSIONLESS";}
        SCALAR(F_weight_i)    {DIMENSION="DIMENSIONLESS";}
    }

    SIZE(sublaminateidlistmax) ;
    ARRAY(sublaminateidlistmax,"")
    {
        SUBOBJECT(sublaminateidlist) {SUBTYPES = (/LAMINATE/SUB_PROP_TYPE51);}
    }
}

//File format for Radioss 2018
FORMAT(radioss2018) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(updated_ply_id,0,EXPORT);
    COMMENT("#Laminatename %-86s",TITLE);
    if(IO_FLAG==0)
    {
        if(laminateconfig==1)
        {
            SUBOBJECTS(sublaminateidlist,/LAMINATE/SUB_PROP_TYPE51);
            ASSIGN(interfacepairsize, interfacepair*2,EXPORT);
            ASSIGN(index,0,EXPORT);
            CARD_LIST(interfacepair)
            {
                ASSIGN(Pply_IDt, _ATTRIB(interfacepairplyids, index), EXPORT);
                ASSIGN(Pply_IDt,_GET_NLOOKUP_VALUE(16,17,Pply_IDt),EXPORT);
                if(Pply_IDt == NONE)
                {
                    ASSIGN(Pply_IDt, _ATTRIB(interfacepairplyids, index), EXPORT);
                }
                ASSIGN(index,index+1,EXPORT);
                ASSIGN(Pply_IDb, _ATTRIB(interfacepairplyids, index), EXPORT);
                ASSIGN(Pply_IDb,_GET_NLOOKUP_VALUE(16,17,Pply_IDb),EXPORT);
                if(Pply_IDb == NONE)
                {
                    ASSIGN(Pply_IDb, _ATTRIB(interfacepairplyids, index), EXPORT);
                }
                CARD("INT       %10d%10d", Pply_IDt, Pply_IDb);
                ASSIGN(index,index+1,EXPORT);
            }
        }
        else
        {
            ASSIGN(index,0,EXPORT);
            CARD_LIST(plyidlistmax)
            {
                ASSIGN(updated_ply_id,_GET_NLOOKUP_VALUE(16,17,plyidlist),EXPORT);
                if(updated_ply_id == NONE)
                {
                    ASSIGN(updated_ply_id,_ATTRIB(plyidlist, index),EXPORT);
                }
                ASSIGN(index,index+1,EXPORT);
                COMMENT("#   Ply_id                 Phi                  Zi         P_thickfail           F_weighti");
                CARD("%10d%20lg%20lg%20lg%20lg",updated_ply_id,Prop_phi,Prop_Zi,P_thick_fail_lam,F_weight_i);
                BLANK;
            }
        }
    }
    else
    {
        CARD_PREREAD("%3s",IS_SUB);
        if(IS_SUB=="SUB")
        {
            SUBOBJECTS(sublaminateidlist,/LAMINATE/SUB_PROP_TYPE51);
            ASSIGN (laminateconfig, 1,IMPORT);
            FREE_CARD_LIST(interfacepairsize)
            {
                CARD("INT       %10d", CELL_PAIR(interfacepairplyids));
            }
            ASSIGN(interfacepair, interfacepairsize,IMPORT);
        }
        else
        {
            ASSIGN (laminateconfig, 0,IMPORT);
            ASSIGN(Phi_Zi_Size,_GET_NB_FREE_CARDS(),IMPORT);
            ASSIGN(Phi_Zi_Size,Phi_Zi_Size/2,IMPORT);
            FREE_CARD_LIST(plyidlistmax)
            {
                CARD("%10d%20lg%20lg%20lg%20lg",plyidlist,Prop_phi,Prop_Zi,P_thick_fail_lam,F_weight_i);
                CARD("%s", _BLANK);
            }
        }
    }
}

//File format for Radioss 140
FORMAT(radioss140) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(updated_ply_id,0,EXPORT);
    COMMENT("#Laminatename %-86s",TITLE);
    if(IO_FLAG==0)
    {
        if(laminateconfig==1)
        {
            SUBOBJECTS(sublaminateidlist,/LAMINATE/SUB_PROP_TYPE51);
            ASSIGN(interfacepairsize, interfacepair*2,EXPORT);
            ASSIGN(index,0,EXPORT);
            CARD_LIST(interfacepair)
            {
                ASSIGN(Pply_IDt, _ATTRIB(interfacepairplyids, index), EXPORT);
                ASSIGN(Pply_IDt,_GET_NLOOKUP_VALUE(16,17,Pply_IDt),EXPORT);
                if(Pply_IDt == NONE)
                {
                    ASSIGN(Pply_IDt, _ATTRIB(interfacepairplyids, index), EXPORT);
                }
                ASSIGN(index,index+1,EXPORT);
                ASSIGN(Pply_IDb, _ATTRIB(interfacepairplyids, index), EXPORT);
                ASSIGN(Pply_IDb,_GET_NLOOKUP_VALUE(16,17,Pply_IDb),EXPORT);
                if(Pply_IDb == NONE)
                {
                    ASSIGN(Pply_IDb, _ATTRIB(interfacepairplyids, index), EXPORT);
                }
                CARD("INT       %10d%10d", Pply_IDt, Pply_IDb);
                ASSIGN(index,index+1,EXPORT);
            }
        }
        else
        {
            ASSIGN(index,0,EXPORT);
            CARD_LIST(plyidlistmax)
            {
                ASSIGN(updated_ply_id,_GET_NLOOKUP_VALUE(16,17,plyidlist),EXPORT);
                if(updated_ply_id == NONE)
                {
                    ASSIGN(updated_ply_id,_ATTRIB(plyidlist, index),EXPORT);
                }
                ASSIGN(index,index+1,EXPORT);
                COMMENT("#   Ply_id                 Phi                  Zi");
                CARD("%10d%20lg%20lg",updated_ply_id,Prop_phi,Prop_Zi);
                BLANK;
            }
        }
    }
    else
    {
        CARD_PREREAD("%3s",IS_SUB);
        if(IS_SUB=="SUB")
        {
            SUBOBJECTS(sublaminateidlist,/LAMINATE/SUB_PROP_TYPE51);
            ASSIGN (laminateconfig, 1,IMPORT);
            FREE_CARD_LIST(interfacepairsize)
            {
                CARD("INT       %10d", CELL_PAIR(interfacepairplyids));
            }
            ASSIGN(interfacepair, interfacepairsize,IMPORT);
        }
        else
        {
            ASSIGN (laminateconfig, 0,IMPORT);
            ASSIGN(Phi_Zi_Size,_GET_NB_FREE_CARDS(),IMPORT);
            ASSIGN(Phi_Zi_Size,Phi_Zi_Size/2,IMPORT);
            FREE_CARD_LIST(plyidlistmax)
            {
                CARD("%10d%20lg%20lg",plyidlist,Prop_phi,Prop_Zi);
                CARD("%s", _BLANK);
            }
        }
    }
}
