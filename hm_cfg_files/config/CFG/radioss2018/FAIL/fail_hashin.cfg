//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//FAIL : Hashin HC 9.0-SP1
//


ATTRIBUTES(COMMON){ 

	_HMCOMMENTSFLAG  					= VALUE(INT, "Write HM Comments");
	mat_id           					= VALUE(MAT,  "Material");

	Iform     							= VALUE(INT,"Formulation flag") ;
	Ifail_sh     						= VALUE( INT,"Shell failure flag") ;
	Ifail_so     						= VALUE( INT,"Flag for solid failure model") ;
	ratio      							= VALUE( FLOAT, "Ratio control parameter") ;
	I_Dam       						= VALUE(INT, "Damage calculation flag") ;
	
	Sigma_1t							= VALUE( FLOAT, "Longitudinal tensile strength") ;
	Sigma_2t							= VALUE( FLOAT, "Transverse tensile strength") ;
	Sigma_3t							= VALUE( FLOAT, "Through thickness tensile strength") ;
	Sigma_1c  							= VALUE( FLOAT, "Longitudinal compressive strength") ;
	Sigma_2c  							= VALUE( FLOAT, "Transverse compressive strength") ;
	
	Sigma_c								= VALUE( FLOAT, "Crush strength") ;
	Sigma_12f							= VALUE( FLOAT, "Fiber shear strength") ;
	Sigma_12m							= VALUE( FLOAT, "Matrix shear strength 12") ;
	Sigma_23m							= VALUE( FLOAT, "Matrix shear strength 23") ;
	Sigma_13m							= VALUE( FLOAT, "Matrix shear strength 13") ;
	
	Phi									= VALUE( FLOAT, "Coulomb friction angle for matrix and delamination (<90Â°)") ;
	Sdel								= VALUE( FLOAT, "Scale factor for delamination criteria") ;
	Tau_max       						= VALUE( FLOAT, "Dynamic time relaxation") ;
	
	ID_CARD_EXIST						= VALUE(BOOL, "Give an Id");
}


SKEYWORDS_IDENTIFIER(COMMON)
{
	_HMCOMMENTSFLAG=-1;
}


GUI(COMMON){ 

  SCALAR (Sigma_1t)		{DIMENSION="pressure";      }
  SCALAR (Sigma_2t)		{DIMENSION="pressure";      }
  SCALAR (Sigma_3t)		{DIMENSION="pressure";      }
  SCALAR (Sigma_1c)		{DIMENSION="pressure";      }
  SCALAR (Sigma_2c)		{DIMENSION="pressure";      }
  SCALAR (Sigma_c)		 {DIMENSION="pressure";      }
  SCALAR (Sigma_12f)	{DIMENSION="pressure";      }
  SCALAR (Sigma_12m)	{DIMENSION="pressure";      }
  SCALAR (Sigma_23m)	{DIMENSION="pressure";      }
  SCALAR (Sigma_13m)	{DIMENSION="pressure";      }
  SCALAR (Phi)			    {DIMENSION="a";   }
  SCALAR (Sdel)	    	{DIMENSION="DIMENSIONLESS"; }
  SCALAR (Tau_max )	 {DIMENSION="t";          }
}





/*


DEFINITIONS(COMMON) {
  SUPPORTING=(MAT);
}
DEFAULTS(COMMON) {
    IDAM = 1;
}
GUI(COMMON){ 
 DATA(MAT) {SUBTYPES=(/MAT/3D_COMP,/MAT/COMPSH,/MAT/COMPSO);}
 RADIO(IMODEL)
 {
    ADD(1,"1: Unidirection lamina model") ;
    ADD(2,"2: Fabric lamina model") ;
 }
 RADIO(ISHELL)
 {
    ADD(1,"1: Shell is deleted, if damage is reached for one layer") ;
    ADD(2,"2: Shell is deleted, if damage is reached for a number of failed > total number of layers*RATIO") ;
    ADD(3,"3: Shell is deleted, if all layers, except 1 have failed") ;
 }
 RADIO(ISOLID)
 {
    ADD(1,"1: Solid is deleted, if damage is reached for one integration point of solid") ;
    ADD(2,"2: Solid is deleted, if damage is reached for a number of failed IP > total number of IP*RATIO") ;
    ADD(3,"3: Solid is deleted, if all integration points, except 1 have failed") ;
 }
  //
  SCALAR(RATIO)         { DIMENSION="DIMENSIONLESS"; }
  RADIO(IDAM) {
      ADD(1,"1:Default, New method to calculate post-failure damage");
      ADD(2,"2:Old method (compatibility option)");
  }
  //
  SCALAR (SIGMA1_T)		{DIMENSION="pressure"; }
  SCALAR (SIGMA2_T)		{DIMENSION="pressure"; }
  SCALAR (SIGMA3_T)		{DIMENSION="pressure"; }
  SCALAR (SIGMA1_C)		{DIMENSION="pressure"; }
  SCALAR (SIGMA2_C)		{DIMENSION="pressure"; }
  SCALAR (SIGMA3_C)		{DIMENSION="pressure"; }
  SCALAR (SIGMAF_12)	{DIMENSION="pressure"; }
  SCALAR (SIGMAM_12)	{DIMENSION="pressure"; }
  SCALAR (SIGMAM_23)	{DIMENSION="pressure"; }
  SCALAR (SIGMAM_13)	{DIMENSION="pressure"; }
  SCALAR (PHI)			{DIMENSION="a"; }
  SCALAR (SDELAMIN)		{DIMENSION="DIMENSIONLESS"; }
 mandatory:
  SCALAR (TMAX )		{DIMENSION="t"; }
  
 optional:
  FLAG(ID_CARD_EXIST);
  //

}


*/

FORMAT(radioss2017) { 
	HEADER("/FAIL/HASHIN/%d",mat_id);
	
	COMMENT("#    IFORM  IFAIL_SH  IFAIL_SO               RATIO     I_DAM");
	CARD("%10d%10d%10d%20lg%10d",Iform, Ifail_sh, Ifail_so, ratio,I_Dam);
	COMMENT("#           SIGMA_1T            SIGMA_2T            SIGMA_3T            SIGMA_1C            SIGMA_2C");
	CARD("%20lg%20lg%20lg%20lg%20lg",Sigma_1t, Sigma_2t, Sigma_3t, Sigma_1c, Sigma_2c);
	COMMENT("#            SIGMA_C           SIGMA_12F           SIGMA_12M           SIGMA_23M           SIGMA_13M");
	CARD("%20lg%20lg%20lg%20lg%20lg",Sigma_c, Sigma_12f, Sigma_12m, Sigma_23m, Sigma_13m);
	COMMENT("#                PHI                SDEL             TAU_MAX");
	CARD("%20lg%20lg%20lg",Phi, Sdel, Tau_max);

	
	if (ID_CARD_EXIST==TRUE)
	{
		COMMENT("#  FAIL_ID") ;
	}
	FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);
} 


FORMAT(radioss130) {
	HEADER("/FAIL/HASHIN/%d",mat_id);
	
	COMMENT("#    IFORM  IFAIL_SH  IFAIL_SO               RATIO");
	CARD("%10d%10d%10d%20lg",Iform, Ifail_sh, Ifail_so, ratio);
	COMMENT("#           SIGMA_1T            SIGMA_2T            SIGMA_3T            SIGMA_1C            SIGMA_2C");
	CARD("%20lg%20lg%20lg%20lg%20lg",Sigma_1t, Sigma_2t, Sigma_3t, Sigma_1c, Sigma_2c);
	COMMENT("#            SIGMA_C           SIGMA_12F           SIGMA_12M           SIGMA_23M           SIGMA_13M");
	CARD("%20lg%20lg%20lg%20lg%20lg",Sigma_c, Sigma_12f, Sigma_12m, Sigma_23m, Sigma_13m);
	COMMENT("#                PHI                SDEL             TAU_MAX");
	CARD("%20lg%20lg%20lg",Phi, Sdel, Tau_max);

	if (ID_CARD_EXIST==TRUE)
	{
		COMMENT("#  FAIL_ID") ;
	}
	FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);
} 

FORMAT(radioss120) {
	HEADER("/FAIL/HASHIN/%d",mat_id);
	
	COMMENT("#    IFORM  IFAIL_SH  IFAIL_SO               RATIO");
	CARD("%10d%10d%10d%20lg",Iform, Ifail_sh, Ifail_so, ratio);
	COMMENT("#           SIGMA_1T            SIGMA_2T            SIGMA_3T            SIGMA_1C            SIGMA_2C");
	CARD("%20lg%20lg%20lg%20lg%20lg",Sigma_1t, Sigma_2t, Sigma_3t, Sigma_1c, Sigma_2c);
	COMMENT("#            SIGMA_C           SIGMA_12F           SIGMA_12M           SIGMA_23M           SIGMA_13M");
	CARD("%20lg%20lg%20lg%20lg%20lg",Sigma_c, Sigma_12f, Sigma_12m, Sigma_23m, Sigma_13m);
	COMMENT("#                PHI                SDEL             TAU_MAX");
	CARD("%20lg%20lg%20lg",Phi, Sdel, Tau_max);

} 

FORMAT(radioss90) {
	HEADER("/FAIL/HASHIN/%d",mat_id);
  	
	COMMENT("#    IFORM  IFAIL_SH  IFAIL_SO");
	CARD("%10d%10d%10d",Iform, Ifail_sh, Ifail_so);
	COMMENT("#           SIGMA_1T            SIGMA_2T            SIGMA_3T            SIGMA_1C            SIGMA_2C");
	CARD("%20lg%20lg%20lg%20lg%20lg",Sigma_1t, Sigma_2t, Sigma_3t, Sigma_1c, Sigma_2c);
	COMMENT("#            SIGMA_C           SIGMA_12F           SIGMA_12M           SIGMA_23M           SIGMA_13M");
	CARD("%20lg%20lg%20lg%20lg%20lg",Sigma_c, Sigma_12f, Sigma_12m, Sigma_23m, Sigma_13m);
	COMMENT("#                PHI                SDEL             TAU_MAX");
	CARD("%20lg%20lg%20lg",Phi, Sdel, Tau_max);

}