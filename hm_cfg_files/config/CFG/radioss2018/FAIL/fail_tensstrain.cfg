//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//FAIL : TENSTRAIN for HC 2.7
//


ATTRIBUTES(COMMON){ 

	_HMCOMMENTSFLAG  			= VALUE(INT, "Write HM Comments");
	mat_id           			= VALUE(MAT,  "Material");

	Epsilon_t1					= VALUE( FLOAT, "Maximum strain") ;
	Epsilon_t2					= VALUE( FLOAT, "Tensile failure strain") ;
	fct_ID						= VALUE( FUNCT, "Function identifier of strain ET1 ET2 scaling factor") ;
	Epsilon_f1					= VALUE( FLOAT, "Failure tension strain (first principal strain)") ;
	Epsilon_f2					= VALUE( FLOAT, "Failure tension strain (second principal strain)") ;
	S_Flag						= VALUE( INT, "Options failure flag") ;
    
	fct_IDel			        = VALUE( FUNCT, "Element size factor function identifier");
	Fscale_el			        = VALUE( FLOAT, "Element size function scale factor");
	EI_ref				        = VALUE( FLOAT, "Reference element size");
    
	fct_IDt				        = VALUE( FUNCT, "Temperature factor function identifier");
	FscaleT				        = VALUE( FLOAT, "Temperature function scale factor");
	
	ID_CARD_EXIST				= VALUE(BOOL, "Give an Id");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
	_HMCOMMENTSFLAG=-1;
}
GUI(COMMON){ 
 optional:
  SCALAR (Fscale_el){DIMENSION="DIMENSIONLESS"; } 
  SCALAR (EI_ref)   {DIMENSION="l"; } 
}


/*


DEFAULTS(COMMON) {
    IDAM = 1;
}
GUI(COMMON){ 
 DATA(MAT)   {SUBTYPES=(/MAT/3D_COMP,
         /MAT/BARLAT3, /MAT/BOLTZMAN,/MAT/COMPSO,
         /MAT/CONC,/MAT/COSSER,/MAT/COWPER,/MAT/DAMA,/MAT/DPRAG,
         /MAT/LAW10,
         /MAT/ELAST,/MAT/ELASTOMER,/MAT/FABR_A,/MAT/FOAM_PLAS,
         /MAT/LAW70,
         /MAT/FOAM_VISC,/MAT/GURSON,
         /MAT/LAW63,
         /MAT/HILL_TAB,/MAT/HONEYCOMB,
         /MAT/HYD_JCOOK,/MAT/HYDRO,/MAT/HYDPLA,/MAT/KELVINMAX,
  //       /MAT/LAW41,
         /MAT/LEE_T,
         /MAT/OGDEN,/MAT/LAW23,/MAT/PLAS_JOHNS,/MAT/PLAS_TAB,/MAT/PLAS_T3,
         /MAT/PLAS_ZERIL,/MAT/STEINB, /MAT/LAW53, /MAT/LAW64, /MAT/LAW50,
         /MAT/VISC_HYP,/MAT/VISC_TAB,  
         /MAT/ZHAO,
       /MAT/BARLAT2000,
       /MAT/LAW82,
       /MAT/LAW92);}
 mandatory:
  SCALAR (ET1){DIMENSION="DIMENSIONLESS"; }
 mandatory:
  SCALAR (ET2){DIMENSION="DIMENSIONLESS"; }
 optional:
  SCALAR (EPS1){DIMENSION="DIMENSIONLESS"; } 
  SCALAR (EPS2){DIMENSION="DIMENSIONLESS"; } 
  SCALAR (Fscale_el){DIMENSION="DIMENSIONLESS"; } 
  SCALAR (EI_ref)   {DIMENSION="l"; } 
  FUNCTION(IFUN) {
    X_TITLE="Strain Rate";  X_DIMENSION="DIMENSIONLESS";
    Y_TITLE="Scale Factor"; Y_DIMENSION="DIMENSIONLESS";
  }
  RADIO(IDAM) {
      ADD(1,"1:Default, New method to calculate post-failure damage");
      ADD(2,"2:Old method (compatibility option)");
  }
  FLAG(ID_CARD_EXIST);
}



*/
FORMAT(radioss2018) { 
	HEADER("/FAIL/TENSSTRAIN/%d",mat_id);

	COMMENT("#         EPSILON_T1          EPSILON_T2    FCT_ID          EPSILON_F1          EPSILON_F2     S_Flag");
	CARD("%20lg%20lg%10d%20lg%20lg%10d",Epsilon_t1 ,Epsilon_t2 ,fct_ID,Epsilon_f1, Epsilon_f2,S_Flag);   
	
    if ( S_Flag == 2 || S_Flag ==3 ) {
    
        COMMENT("# FCT_IDEL           FSCALE_EL              EI_REF") ;
        CARD("%10d%20lg%20lg",fct_IDel,Fscale_el,EI_ref);

        COMMENT("# FCT_ID_T            FSCALE_T") ;
        CARD("%10d%20lg",fct_IDt,FscaleT);
    }
    
	if (ID_CARD_EXIST==TRUE)
	{
	 COMMENT("#  FAIL_ID") ;
	}
	FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);

}
 
FORMAT(radioss2017) { 
	HEADER("/FAIL/TENSSTRAIN/%d",mat_id);

	COMMENT("#         EPSILON_T1          EPSILON_T2    FCT_ID          EPSILON_F1          EPSILON_F2");
	CARD("%20lg%20lg%10d%20lg%20lg",Epsilon_t1 ,Epsilon_t2 ,fct_ID,Epsilon_f1, Epsilon_f2);   
	
	
	if (ID_CARD_EXIST==TRUE)
	{
	 COMMENT("#  FAIL_ID") ;
	}
	FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);
} 

FORMAT(radioss130) { 
	HEADER("/FAIL/TENSSTRAIN/%d",mat_id);

	COMMENT("#         EPSILON_T1          EPSILON_T2    FCT_ID");
	CARD("%20lg%20lg%10d",Epsilon_t1 ,Epsilon_t2 ,fct_ID);   
	
	if (ID_CARD_EXIST==TRUE)
	{
	 COMMENT("#  FAIL_ID") ;
	}
	FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);

} 
FORMAT(radioss51) { 
	HEADER("/FAIL/TENSSTRAIN/%d",mat_id);

	COMMENT("#         EPSILON_T1          EPSILON_T2    FCT_ID");
	CARD("%20lg%20lg%10d",Epsilon_t1 ,Epsilon_t2 ,fct_ID);   
} 