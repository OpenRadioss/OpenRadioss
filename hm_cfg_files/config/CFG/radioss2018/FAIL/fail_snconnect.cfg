//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//FAIL : connection material 
//

ATTRIBUTES(COMMON){ 

	_HMCOMMENTSFLAG  		= VALUE(INT, "Write HM Comments");
	mat_id           		= VALUE(MAT,  "Material");
	
	Alpha_0					= VALUE( FLOAT, "Parameter for initial yield function referring to the beginning of damage");
	Beta_0					= VALUE( FLOAT, "Exponent for initial yield function referring to the beginning of damage");
	Alpha_f					= VALUE( FLOAT, "Parameter for final yield function referring to rupture");
	Beta_f					= VALUE( FLOAT, "Exponent for final yield function referring to rupture");
	Ifail_so 				= VALUE( INT,   "Flag for solid failure model");
	ISYM				    = VALUE( INT,  "Rupture deactivation flag for compression") ;
	
	fct_IDON   				= VALUE( FUNCT, "Function identifier defining a scale factor for strain rate dependency in normal direction in initial yield function") ;
	fct_IDOS   				= VALUE( FUNCT, "Function identifier defining a scale factor for strain rate dependency in tangential direction in initial yield function") ;
	fct_IDFN   				= VALUE( FUNCT, "Function identifier defining a scale factor for strain rate dependency in normal direction in rupture yield function") ;
	fct_IDFS   				= VALUE( FUNCT, "Function identifier defining a scale factor for strain rate dependency in tangential direction in rupture yield function") ;
	XSCALE_0				= VALUE( FLOAT, "Scale factor for the abscissa strain rate for initial function");
	XSCALE_F   				= VALUE( FLOAT, "Scale factor for the abscissa strain rate for rupture function");
	AREA_scale				= VALUE( FLOAT, "Failure scale factor for area increase");

	ID_CARD_EXIST			= VALUE(BOOL,"Give an Id");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
	_HMCOMMENTSFLAG=-1;
}

GUI(COMMON) 
{

mandatory:
    SCALAR(XSCALE_0)      { DIMENSION="strain_rate";}
    SCALAR(XSCALE_F)      { DIMENSION="strain_rate";}
}


/*


DEFINITIONS(COMMON) {
	SUPPORTING=(MAT);
}

DEFAULTS(COMMON) {

}

GUI(COMMON){
	DATA(MAT)	{SUBTYPES=(/MAT/CONNECT);}
	SCALAR (EPS_N_MAX)      {DIMENSION="l"; }
	SCALAR (EXP_N)          {DIMENSION="DIMENSIONLESS"; }
	SCALAR (ALPHA_N)	{DIMENSION="DIMENSIONLESS"; }
        FUNCTION(SR_N) {
                X_TITLE     = "Strain rate";      
                Y_TITLE     = "Normal elongation scale factor";
                X_DIMENSION = "DIMENSIONLESS"; 
                Y_DIMENSION = "DIMENSIONLESS";
        }
	SCALAR (EPS_T_MAX)      {DIMENSION="l"; }
	SCALAR (EXP_T)          {DIMENSION="DIMENSIONLESS"; }
	SCALAR (ALPHA_T)	{DIMENSION="DIMENSIONLESS"; }
        FUNCTION(SR_T) {
                X_TITLE     = "Strain rate";      
                Y_TITLE     = "Tangential elongation scale factor";
                X_DIMENSION = "DIMENSIONLESS"; 
                Y_DIMENSION = "DIMENSIONLESS";
        }
	SCALAR (EI_MAX)         {DIMENSION="lineic_energy"; }
	SCALAR (EN_MAX)         {DIMENSION="lineic_energy"; }
	SCALAR (ET_MAX)         {DIMENSION="lineic_energy"; }
	SCALAR (NN)             {DIMENSION="DIMENSIONLESS"; }
	SCALAR (NT)             {DIMENSION="DIMENSIONLESS"; }
	SCALAR (DMAX)           {DIMENSION="t"; }
	SCALAR (DSOFT)          {DIMENSION="DIMENSIONLESS"; }
	SCALAR (AREA_SCALE)     {DIMENSION="DIMENSIONLESS"; }
	RADIO(IFAIL) {
		ADD(0, "0: unidirectional failure");
		ADD(1, "1: multi-directional failure");
	}
	RADIO(ISOLID) {
		ADD(1, "1: the solid element is deleted when one integration point reaches the failure criteria");
		ADD(2, "2: the solid element is failure when all integration points reach the failure criteria");
	}
        RADIO(ISYM)
        {
             ADD(0, "Same behavior in tension and compression") ;
             ADD(1, "Deactivation of failure in case of compression") ;
        }
  FLAG(ID_CARD_EXIST);
}



*/
FORMAT(radioss2017) {
	HEADER("/FAIL/SNCONNECT/%d",mat_id);

	COMMENT("#            ALPHA_0              BETA_0             ALPHA_F              BETA_F  IFAIL_SO      ISYM") ;
	CARD("%20lg%20lg%20lg%20lg%10d%10d",Alpha_0,Beta_0,Alpha_f,Beta_f,Ifail_so,ISYM);
	COMMENT("# FCT_IDON  FCT_IDOS  FCT_IDFN  FCT_IDFS            XSCALE_0            XSCALE_F          AREA_SCALE") ;
	CARD("%10d%10d%10d%10d%20lg%20lg%20lg",fct_IDON,fct_IDOS,fct_IDFN,fct_IDFS,XSCALE_0,XSCALE_F,AREA_scale);
	  
	
	if (ID_CARD_EXIST==TRUE)
	{
	 COMMENT("#  FAIL_ID") ;
	}
	FREE_CARD(ID_CARD_EXIST,"%10d",_ID_);
}

FORMAT(radioss130) { 
	HEADER("/FAIL/SNCONNECT/%d",mat_id);

	COMMENT("#            ALPHA_0              BETA_0             ALPHA_F              BETA_F  IFAIL_SO      ISYM") ;
	CARD("%20lg%20lg%20lg%20lg%10d%10d",Alpha_0,Beta_0,Alpha_f,Beta_f,Ifail_so,ISYM);
	COMMENT("# FCT_IDON  FCT_IDOS  FCT_IDFN  FCT_IDFS            XSCALE_0            XSCALE_F") ;
	CARD("%10d%10d%10d%10d%20lg%20lg",fct_IDON,fct_IDOS,fct_IDFN,fct_IDFS,XSCALE_0,XSCALE_F);
	  
	if (ID_CARD_EXIST==TRUE)
	{
	 COMMENT("#  FAIL_ID") ;
	}
	FREE_CARD(ID_CARD_EXIST,"%10d",_ID_);
}
