//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Material law 90 setup config file

ATTRIBUTES(COMMON)
{
    NUM_COMMENTS            = SIZE("No. of Comment Lines");
    COMMENTS                = ARRAY[NUM_COMMENTS](STRING, "Entity_Comments");
    CommentEnumField        = VALUE(INT, "User Comments");
    KEYWORD_STR             = VALUE(STRING, "Solver Keyword");
    MAT_RHO                 = VALUE(FLOAT, "Initial Density");
    MAT_E0                  = VALUE(FLOAT, "Initial Young's Modulus");
    MAT_NU                  = VALUE(FLOAT, "Poisson's Ratio");
    NL                      = SIZE("Number of Loading Functions");
    Ismooth                 = VALUE(INT, "Smooth Strain Rate Option Flag");
    Fcut                    = VALUE(FLOAT, "Cutoff Frequency for Strain Rate Filtering");
    MAT_SHAPE               = VALUE(FLOAT, "Shape Factor");
    Hys                     = VALUE(FLOAT, "Hysteresis Unloading Factor");
    fct_IDL                 = ARRAY[NL](FUNCT, "Load Function (in Compression) Identifier");
    EpsilondotL             = ARRAY[NL](FLOAT, "Strain Rate for Load Function");
    FscaleL                 = ARRAY[NL](FLOAT, "Load Function Scale Factor");
    Heat_Inp_opt            = VALUE(INT, "Heat");
    SUBGRP_HEAT_MAT         = VALUE(SUBOBJECT, "");
    THERM_STRESS            = VALUE(INT, "Therm Stress");
    SUBGRP_THERM_STRESS     = VALUE(SUBOBJECT, "");
    IO_FLAG                 = VALUE(INT, "");
    TITLE                   = VALUE(STRING,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR             = 9000;
    NUM_COMMENTS            = 5110;
    COMMENTS                = 5109;
    CommentEnumField        = 7951;
    MAT_RHO                 = 118;
    MAT_E0                  = 1507;
    MAT_NU                  = 120;
    NL                      = 3031;
    Ismooth                 = 3032;
    Fcut                    = 5356;
    MAT_SHAPE               = 4580;
    Hys                     = 3033;
    fct_IDL                 = 3034;
    EpsilondotL             = 3035;
    FscaleL                 = 3036;
    Heat_Inp_opt            = 4346;
    SUBGRP_HEAT_MAT         = -1;
    THERM_STRESS            = 4555;
    SUBGRP_THERM_STRESS     = -1;
    IO_FLAG                 = -1;
    TITLE                   = -1;
}
DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY                 = SCALAR(MAT_RHO);
    YOUNG_MODULUS                   = SCALAR(MAT_E0);
    POISSON_RATIO                   = SCALAR(MAT_NU);
public:
    SOUND_SPEED                     = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                               = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                              = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID               = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}
CHECK(COMMON)
{
    MAT_RHO   > 0.0;
    NL      > 0;
    NL      <= 99;
}

DEFAULTS(COMMON)
{
    Fcut                = 1E30;
    Hys                 = 1.0;
    Ismooth             = 0;
    MAT_SHAPE           = 1.0;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG = TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if (CommentEnumField == 2)
    {
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS, "")
        {
            SCALAR(COMMENTS);
        }
    }
    ASSIGN(KEYWORD_STR, "/MAT");
    ASSIGN(KEYWORD_STR, "/LAW90/");
    SCALAR(MAT_RHO)                     { DIMENSION="density";  }
    SCALAR(MAT_E0)                      { DIMENSION="pressure";      }
    SCALAR(MAT_NU);
    SIZE(NL);
    RADIO(Ismooth)
    {
        ADD(0, "No Strain Rate Smoothing");
        ADD(1, "Strain Rate Smoothing Active");
    }
    SCALAR(Fcut)                       { DIMENSION="f";      }
    SCALAR(MAT_SHAPE);
    SCALAR(Hys);
    ARRAY(NL, "Loading Functions")
    {
        DATA(fct_IDL);
        SCALAR(EpsilondotL)            { DIMENSION="f";      }
        SCALAR(FscaleL)                { DIMENSION="pressure";       }
    }

optional:
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt != 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) { SUBTYPES = (/SUBOBJECT/HEAT); }
    }
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS != 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) { SUBTYPES = (/SUBOBJECT/THERM_STRESS); }
    }
}

FORMAT(radioss2018)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 0)
    {
        HEADER("/MAT/LAW90/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    COMMENT("#              Rho_I");
    CARD("%20lg", MAT_RHO);
    COMMENT("#                 E0              MAT_NU");
    CARD("%20lg%20lg", MAT_E0, MAT_NU);
    COMMENT("#       NL   Ismooth                Fcut               Shape                 Hys");
    CARD("%10d%10d%20lg%20lg%20lg", NL, Ismooth, Fcut, MAT_SHAPE, Hys);
    if (NL > 0)
    {
        COMMENT("#  fct_idL             eps_dot              Fscale");
        CARD_LIST(NL) {
            CARD("%10d%20lg%20lg", fct_IDL, EpsilondotL, FscaleL);
        }
    }
    if (Heat_Inp_opt != 0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT, /SUBOBJECT/HEAT);
    }
    if (Heat_Inp_opt != 0 && THERM_STRESS != 0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS, /SUBOBJECT/THERM_STRESS);
    }
}
