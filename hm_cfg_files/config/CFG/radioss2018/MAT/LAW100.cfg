//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.

// Material law 100 Setup File

ATTRIBUTES(COMMON)
{

    KEYWORD_STR             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS            = SIZE("No. of Comment Lines");
    COMMENTS                = ARRAY[NUM_COMMENTS](STRING, "Entity_Comments");
    CommentEnumField        = VALUE(INT, "User Comments");
    MAT_RHO                 = VALUE(FLOAT, "Initial Density");
    MAT_N_net               = SIZE("Total Number of Secondary Networks");
    MAT_Flag_HE             = VALUE(INT, "Flag_HE Flag for Hyperelastic Model:");
    MAT_Flag_Cr             = VALUE(INT, "Flag_Cr Creep in Equilibrium Network Flag:");
    MAT_C_10                = VALUE(FLOAT, "C_10 Material Parameter for Hyperelastic Model");
    MAT_C_01                = VALUE(FLOAT, "C_01 Material Parameter for Hyperelastic Model");
    MAT_C_20                = VALUE(FLOAT, "C_20 Material Parameter for Hyperelastic Model");
    MAT_C_11                = VALUE(FLOAT, "C_11 Material Parameter for Hyperelastic Model");
    MAT_C_02                = VALUE(FLOAT, "C_02 Material Parameter for Hyperelastic Model");
    MAT_C_30                = VALUE(FLOAT, "C_30 Material Parameter for Hyperelastic Model");
    MAT_C_21                = VALUE(FLOAT, "C_21 Material Parameter for Hyperelastic Model");
    MAT_C_12                = VALUE(FLOAT, "C_12 Material Parameter for Hyperelastic Model");
    MAT_C_03                = VALUE(FLOAT, "C_03 Material Parameter for Hyperelastic Model");
    MAT_D_1                 = VALUE(FLOAT, "D_1 Volumetric Material Parameter 1, Used for Bulk Modulus Computation");
    MAT_D_2                 = VALUE(FLOAT, "D_2 Volumetric Material Parameter 2");
    MAT_D_3                 = VALUE(FLOAT, "D_3 Volumetric Material Parameter 3");
    MAT_MUE1                = VALUE(FLOAT, "Mu Shear Modulus");
    MAT_D                   = VALUE(FLOAT, "D Material Parameter for Bulk Modulus Computation ");
    Lambda                  = VALUE(FLOAT, "Lambda_M The Limit of Stretch");
    Itype                   = VALUE(INT, "Test Data Type (stress strain curve)");
    MAT_fct_ID_AB           = VALUE(FUNCT, "fct_ID_AB Function Identifier Defining Engineer Stress Vs Engineer Strain for the Arruda-Boyce Material Model.");
    MAT_NU                  = VALUE(FLOAT, "Nu Poisson Ratio");
    MAT_fct_ID_SM           = VALUE(FUNCT, "fct_ID_SM Function Identifier for Shear Modulus Vs Temperature.");
    MAT_fct_ID_BM           = VALUE(FUNCT, "fct_ID_BM Function Identifier for Bulk Modulus Vs Temperature.");
    MAT_Fscale_SM           = VALUE(FLOAT, "Fscale_SM Shear Modulus Scale Factor for fct_ID1");
    MAT_Fscale_BM           = VALUE(FLOAT, "Fscale_BM Bulk Modulus Scale Factor for fct_ID2");
    MAT_A_pl                = VALUE(FLOAT, "A_pl Scaling Factor for Plastic Flow Rule.");
    MAT_Sigma_pl            = VALUE(FLOAT, "Sigma_pl Flow Resistance for Plastic Flow Rule.");
    MAT_F_pl                = VALUE(FLOAT, "F_pl Weight Factor for Flow Resistance in Plastic Flow Rule.");
    MAT_Epsilon_F           = VALUE(FLOAT, "epsilon_pl Characteristic Strain for Plastic Flow Rule.");
    MAT_N_pl                = VALUE(INT, "N_pl Exponent for Plastic Flow Rule.");
    MAT_ARR_Flag_visc       = ARRAY[MAT_N_net](INT, "Flag for Viscous Model:");
    MAT_ARR_stiffness       = ARRAY[MAT_N_net](FLOAT, "stiffness Stiffness Weight Factor for Secondary Networks");
    MAT_ARR_A1              = ARRAY[MAT_N_net](FLOAT, "A1 Effective Creep Strain Rate");
    MAT_ARR_C               = ARRAY[MAT_N_net](FLOAT, "C Exponent Characterizing the Creep Strain Dependence of the Effective Creep Strain Rate in Network B, (-1 < C < 0)");
    MAT_ARR_M               = ARRAY[MAT_N_net](FLOAT, "M Positive Exponent = 1 Characterizing the Effective Stress Dependence of the Effective Creep Strain Rate in Secondary Network.");
    MAT_ARR_KSI             = ARRAY[MAT_N_net](FLOAT, "KSI Constant for Regularization of the Creep Strain Rate Near the Undeformed State.");
    MAT_ARR_A2              = ARRAY[MAT_N_net](FLOAT, "A2 Effective Creep Strain Rate");
    MAT_ARR_B               = ARRAY[MAT_N_net](FLOAT, "B Coefficient in Hyperbolic Sine Viscous Model Multiplying the Norm of the Stress in the Secondary Network.");
    MAT_ARR_N2              = ARRAY[MAT_N_net](FLOAT, "n2 Exponent in Hyperbolic Sine Viscous Model in the Secondary Network.");
    MAT_ARR_A3              = ARRAY[MAT_N_net](FLOAT, "A3 Effective Creep Strain Rate");
    MAT_ARR_N3              = ARRAY[MAT_N_net](FLOAT, "n3 Exponent in Power Law Viscous Model in the Secondary Network.");
    MAT_ARR_M3              = ARRAY[MAT_N_net](FLOAT, "M3 Exponent in Power Law Viscous Model in the Secondary Network.");
    Heat_Inp_opt            = VALUE(INT, "Heat");
    SUBGRP_HEAT_MAT         = VALUE(SUBOBJECT, "");
    THERM_STRESS            = VALUE(INT, "Therm Stress");
    SUBGRP_THERM_STRESS     = VALUE(SUBOBJECT, "");
    DUMMY                   = VALUE(STRING, "Dummy variable for Ref_Rho flag");
    IO_FLAG                 = VALUE(INT, "");
    LAW_NO                  = VALUE(STRING, "");
    Mat_Name_OR_LawNo       = VALUE(INT, "");
    TITLE                   = VALUE(STRING, "");
    networkID               = VALUE(INT, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                         = 9000;
    NUM_COMMENTS                        = 5110;
    COMMENTS                            = 5109;
    CommentEnumField                    = 7951;
    MAT_RHO                             = 118;
    MAT_N_net                           = 3501;
    MAT_Flag_HE                         = 3502;
    MAT_Flag_Cr                         = 3503;
    MAT_C_10                            = 3001;
    MAT_C_01                            = 3018;
    MAT_C_20                            = 3003;
    MAT_C_11                            = 3004;
    MAT_C_02                            = 3005;
    MAT_C_30                            = 3006;
    MAT_C_21                            = 3007;
    MAT_C_12                            = 3008;
    MAT_C_03                            = 3009;
    MAT_D_1                             = 3011;
    MAT_D_2                             = 3012;
    MAT_D_3                             = 3013;
    MAT_MUE1                            = 8014;
    MAT_D                               = 997;
    Lambda                              = 4200;
    Itype                               = 5107;
    MAT_fct_ID_AB                       = 3504;
    MAT_NU                              = 120;
    MAT_fct_ID_SM                       = 3505;
    MAT_fct_ID_BM                       = 3506;
    MAT_Fscale_SM                       = 3507;
    MAT_Fscale_BM                       = 3508;
    MAT_A_pl                            = 3509;
    MAT_Sigma_pl                        = 3510;
    MAT_F_pl                            = 3511;
    MAT_Epsilon_F                       = 4093;
    MAT_N_pl                            = 3512;
    MAT_ARR_Flag_visc                   = 3513;
    MAT_ARR_stiffness                   = 3514;
    MAT_ARR_A1                          = 3515;
    MAT_ARR_C                           = 3516;
    MAT_ARR_M                           = 3517;
    MAT_ARR_KSI                         = 3518;
    MAT_ARR_A2                          = 3519;
    MAT_ARR_B                           = 3520;
    MAT_ARR_N2                          = 3521;
    MAT_ARR_A3                          = 3522;
    MAT_ARR_N3                          = 3523;
    MAT_ARR_M3                          = 3524;
    Heat_Inp_opt                        = 4346;
    SUBGRP_HEAT_MAT                     = -1;
    THERM_STRESS                        = 4555;
    SUBGRP_THERM_STRESS                 = -1;
    DUMMY                               = -1;
    Mat_Name_OR_LawNo                   = 4538;
    LAW_NO                              = -1;
    IO_FLAG                             = -1;
    TITLE                               = -1;
    networkID =-1;
}
DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY                 = SCALAR(MAT_RHO);
    SHEAR_MODULUS                   = SCALAR(MAT_MUE1);
    POISSON_RATIO                   = SCALAR(MAT_NU);
    YOUNG_MODULUS=EVAL(2*1.463*SHEAR_MODULUS);
    BULK_MODULUS=EVAL(YOUNG_MODULUS/(3*0.074));
    SOUND_SPEED                     = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
    SOUND_SPEED_SOLID               = EVAL(((4*SHEAR_MODULUS/3+BULK_MODULUS)/INITIAL_DENSITY)^0.5);
}
CHECK(COMMON)
{

    MAT_ARR_A1      >= 0.0;
    MAT_ARR_A2      >= 0.0;
    MAT_ARR_A3      >= 0.0;
    MAT_ARR_C       > -1;
    MAT_ARR_C       < 0;
    MAT_ARR_M       >= 1.0;
    MAT_N_net       >= 0;
    MAT_N_net       <= 50;
    MAT_RHO         > 0.0;
}

DEFAULTS(COMMON)
{

    Itype           = 1;
    Lambda          = 7.0;
    MAT_C_01        = 0.0;
    MAT_C_02        = 0.0;
    MAT_C_03        = 0.0;
    MAT_C_10        = 0.0;
    MAT_C_11        = 0.0;
    MAT_C_12        = 0.0;
    MAT_C_20        = 0.0;
    MAT_C_21        = 0.0;
    MAT_C_30        = 0.0;
    MAT_D           = 10E30;
    MAT_D_1         = 0.0;
    MAT_D_2         = 0.0;
    MAT_D_3         = 0.0;
    MAT_Flag_Cr     = 0;
    MAT_N_pl        = 1;
    Mat_Name_OR_LawNo       = 0;

}

GUI(COMMON)
{

    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG = TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if (CommentEnumField == 2)
    {
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS, "")
        {
            SCALAR(COMMENTS);
        }
    }
    if( Mat_Name_OR_LawNo == 1)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/MNF/");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW100/");
    }

    SCALAR(MAT_RHO){ DIMENSION = "density"; }
    SIZE(MAT_N_net);
    RADIO(MAT_Flag_HE)
    {
        ENUM_VALUE_FLAG = TRUE;
        ADD(1, "1: Polynomial form");
        ADD(2, "2: Arruda Boyce");
        ADD(3, "3: Neo Hookean");
        ADD(4, "4: Mooney-Rivlin");
        ADD(5, "5: Yeoh");
        ADD(13, "13: Neo Hookean with temperature dependency");
    }

    RADIO(MAT_Flag_Cr)
    {
        ADD(0, "0: No creep (no additional line)");
        ADD(1, "1: Creep (read parameters in additional line)");
    }
    if (MAT_Flag_HE == 1)
    {
        SCALAR(MAT_C_10) { DIMENSION = "pressure"; }
        SCALAR(MAT_C_01) { DIMENSION = "pressure"; }
        SCALAR(MAT_C_20) { DIMENSION = "pressure"; }
        SCALAR(MAT_C_11) { DIMENSION = "pressure"; }
        SCALAR(MAT_C_02) { DIMENSION = "pressure"; }
        SCALAR(MAT_C_30) { DIMENSION = "pressure"; }
        SCALAR(MAT_C_21) { DIMENSION = "pressure"; }
        SCALAR(MAT_C_12) { DIMENSION = "pressure"; }
        SCALAR(MAT_C_03) { DIMENSION = "pressure"; }
        SCALAR(MAT_D_1)  { DIMENSION = "inverse_of_pressure"; }
        SCALAR(MAT_D_2)  { DIMENSION = "inverse_of_pressure"; }
        SCALAR(MAT_D_3)  { DIMENSION = "inverse_of_pressure"; }
    }
    if (MAT_Flag_HE == 2)
    {
        SCALAR(MAT_MUE1){ DIMENSION = "pressure"; }
        SCALAR(MAT_D)   { DIMENSION = "inverse_of_pressure"; }
        SCALAR(Lambda)  { DIMENSION = "DIMENSIONLESS"; }
        RADIO(Itype)
        {
            ENUM_VALUE_FLAG = TRUE;
            ADD(1, "1: Uniaxial Data Test");
            ADD(2, "2: Equibiaxial Data Test");
            ADD(3, "3: Planar Data Test");
        }
        DATA(MAT_fct_ID_AB);
        SCALAR(MAT_NU)       { DIMENSION = "DIMENSIONLESS"; }
    }

    if (MAT_Flag_HE == 3)
    {
        SCALAR(MAT_C_10){ DIMENSION = "pressure"; }
        SCALAR(MAT_D_1) { DIMENSION = "inverse_of_pressure"; }
    }

    if (MAT_Flag_HE == 4)
    {
        SCALAR(MAT_C_10){ DIMENSION = "pressure"; }
        SCALAR(MAT_C_01){ DIMENSION = "pressure"; }
        SCALAR(MAT_D_1) { DIMENSION = "inverse_of_pressure"; }
    }

    if (MAT_Flag_HE == 5)
    {
        SCALAR(MAT_C_10){ DIMENSION = "pressure"; }
        SCALAR(MAT_C_20){ DIMENSION = "pressure"; }
        SCALAR(MAT_C_30){ DIMENSION = "pressure"; }
        SCALAR(MAT_D_1) { DIMENSION = "inverse_of_pressure"; }
    }

    if (MAT_Flag_HE == 13)
    {
        DATA(MAT_fct_ID_SM);
        DATA(MAT_fct_ID_BM);
        SCALAR(MAT_Fscale_SM){ DIMENSION = "pressure"; }
        SCALAR(MAT_Fscale_BM){ DIMENSION = "pressure"; }
    }

    if (MAT_Flag_Cr == 1)
    {
        SCALAR(MAT_A_pl)     { DIMENSION = "strain_rate"; }
        SCALAR(MAT_Sigma_pl) { DIMENSION = "pressure"; }
        SCALAR(MAT_F_pl)     { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(MAT_Epsilon_F){ DIMENSION = "DIMENSIONLESS"; }
        SCALAR(MAT_N_pl)     { DIMENSION = "DIMENSIONLESS"; }
    }
    ARRAY(MAT_N_net, "")
    {
        RADIO(MAT_ARR_Flag_visc)
        {
            ENUM_VALUE_FLAG = TRUE;
            ADD(1, "1: Bergstrom Boyce");
            ADD(2, "2: Hyperbolic sine");
            ADD(3, "3: Power law");

        }
        SCALAR(MAT_ARR_stiffness);
    
        if( MAT_ARR_Flag_visc == 1)
        {
            SCALAR(MAT_ARR_A1) { DIMENSION = "strain_rate"; }
            SCALAR(MAT_ARR_C)  { DIMENSION = "DIMENSIONLESS"; }
            SCALAR(MAT_ARR_M)  { DIMENSION = "DIMENSIONLESS"; }
            SCALAR(MAT_ARR_KSI){ DIMENSION = "DIMENSIONLESS"; }
        }
        if(MAT_ARR_Flag_visc == 2)
        {
            SCALAR(MAT_ARR_A2){ DIMENSION = "strain_rate"; }
            SCALAR(MAT_ARR_B) { DIMENSION = "DIMENSIONLESS"; }
            SCALAR(MAT_ARR_N2){ DIMENSION = "DIMENSIONLESS"; }
        }
        if( MAT_ARR_Flag_visc == 3)
        {
            SCALAR(MAT_ARR_A3){ DIMENSION = "strain_rate"; }
            SCALAR(MAT_ARR_N3){ DIMENSION = "DIMENSIONLESS"; }
            SCALAR(MAT_ARR_M3){ DIMENSION = "DIMENSIONLESS"; }
        }
    }
    // HEAT data
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0)
    {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}
    }
    // THERM_STRESS
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) 
    {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
}

FORMAT(radioss2018)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%-3s",LAW_NO);
        if(LAW_NO == "MNF" )
        {
            ASSIGN(Mat_Name_OR_LawNo,1);
        }
        else
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 1)
    {
        HEADER("/MAT/MNF/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/LAW100/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    COMMENT("#              RHO_I");
    CARD("%20lg", MAT_RHO);
    COMMENT("#    N_net   Flag_HE   Flag_Cr");
    CARD("%10d%10d%10d", MAT_N_net, MAT_Flag_HE, MAT_Flag_Cr);
    if (MAT_Flag_HE == 1)
    {
        COMMENT("#               C_10                C_01                C_20                C_11                C_02");
        CARD("%20lg%20lg%20lg%20lg%20lg", MAT_C_10, MAT_C_01, MAT_C_20, MAT_C_11, MAT_C_02);
        COMMENT("#               C_30                C_21                C_12                C_03");
        CARD("%20lg%20lg%20lg%20lg", MAT_C_30, MAT_C_21, MAT_C_12, MAT_C_03);
        COMMENT("#                D_1                 D_2                 D_3");
        CARD("%20lg%20lg%20lg", MAT_D_1, MAT_D_2, MAT_D_3);
    }
    else if (MAT_Flag_HE == 2)
    {
        COMMENT("#                 Mu                   D            Lambda_M");
        CARD("%20lg%20lg%20lg", MAT_MUE1, MAT_D, Lambda);
        COMMENT("#    Itype fct_ID_AB                  Nu");
        CARD("%10d%10d%20lg", Itype, MAT_fct_ID_AB, MAT_NU);
    }
    else if (MAT_Flag_HE == 3)
    {
        COMMENT("#               C_10                 D_1");
        CARD("%20lg%20lg", MAT_C_10, MAT_D_1);
    }
    else if (MAT_Flag_HE == 4)
    {
        COMMENT("#               C_10                C_01                 D_1");
        CARD("%20lg%20lg%20lg", MAT_C_10, MAT_C_01, MAT_D_1);
    }
    else if (MAT_Flag_HE == 5)
    {
        COMMENT("#               C_10                C_20                C_30                 D_1");
        CARD("%20lg%20lg%20lg%20lg", MAT_C_10, MAT_C_20, MAT_C_30, MAT_D_1);
    }
    else if (MAT_Flag_HE == 13)
    {
        COMMENT("#fct_ID_SM fct_ID_BM           Fscale_SM           Fscale_BM");
        CARD("%10d%10d%20lg%20lg", MAT_fct_ID_SM, MAT_fct_ID_BM, MAT_Fscale_SM, MAT_Fscale_BM);
    }
    if (MAT_Flag_Cr == 1)
    {
        COMMENT("#               A_pl            Sigma_pl                F_pl          epsilon_pl      N_pl");
        CARD("%20lg%20lg%20lg%20lg%10d", MAT_A_pl, MAT_Sigma_pl, MAT_F_pl, MAT_Epsilon_F, MAT_N_pl);
    }
    if (MAT_N_net > 0)
    {
        ASSIGN(networkID, 1, EXPORT);
        CARD_LIST(MAT_N_net)
        {
            if (IO_FLAG == 0) {
                COMMENT("#networkID Flag_visc           stiffness");
                CARD("NETWORK%-3d%10d%20lg",networkID, MAT_ARR_Flag_visc, MAT_ARR_stiffness);
                ASSIGN(networkID, networkID + 1, EXPORT);
            }
            else if (IO_FLAG == 1)
            {
                COMMENT("#networkID Flag_visc           stiffness");
                CARD("%-10s%10d%20lg", DUMMY,MAT_ARR_Flag_visc, MAT_ARR_stiffness);
            }
            if (MAT_ARR_Flag_visc == 1)
            {
                COMMENT("#                 A1                   C                   M                 KSI");
                CARD("%20lg%20lg%20lg%20lg", MAT_ARR_A1, MAT_ARR_C, MAT_ARR_M, MAT_ARR_KSI);
            }
            else if (MAT_ARR_Flag_visc == 2)
            {
                COMMENT("#                 A2                   B                  n2");
                CARD("%20lg%20lg%20lg", MAT_ARR_A2, MAT_ARR_B, MAT_ARR_N2);
            }
            else if (MAT_ARR_Flag_visc == 3)
            {
                COMMENT("#                 A3                  n3                  M3");
                CARD("%20lg%20lg%20lg", MAT_ARR_A3, MAT_ARR_N3, MAT_ARR_M3);
            }

        }
    }
    if (Heat_Inp_opt != 0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT, /SUBOBJECT/HEAT);
    }
    if (Heat_Inp_opt != 0 && THERM_STRESS != 0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS, /SUBOBJECT/THERM_STRESS);
    }
}

