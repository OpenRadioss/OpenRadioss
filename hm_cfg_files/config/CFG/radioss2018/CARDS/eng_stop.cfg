//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// ENG_STOP
//

ATTRIBUTES(COMMON)
{
    //HM INTERNAL
    ENG_STOP_eMax                           = VALUE(FLOAT, "Energy error ratio", "Emax");
    ENG_STOP_mMax                           = VALUE(FLOAT, "Total mass ratio criteria", "DeltaMmax");
    ENG_STOP_nMax                           = VALUE(FLOAT, "Nodal mass ratio criteria", "DeltaNmax");
    ENG_STOP_nTH                            = VALUE(INT, "NTH", "NTH");
    ENG_STOP_nAnim                          = VALUE(INT, "NANIM", "NANIM");
    ENG_STOP_N_ERR_POSIT                    = VALUE(INT, "NERRPOSIT", "NERR_POSIT");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    IO_FLAG                                 = VALUE(INT, "IO_FLAG");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES
    ENG_STOP_eMax                           = 7216;
    ENG_STOP_mMax                           = 7217;
    ENG_STOP_nMax                           = 7218;
    ENG_STOP_nTH                            = 7219;
    ENG_STOP_nAnim                          = 7220;
    ENG_STOP_N_ERR_POSIT                    = 2607;

    //HM INTERNAL
    KEYWORD_STR                             = 9000;
    IO_FLAG                                 = -1;
}

DEFAULTS(COMMON)
{
    ENG_STOP_eMax                           = 10E+30;
    ENG_STOP_mMax                           = 10E+30;
    ENG_STOP_nMax                           = 10E+30;
    ENG_STOP_nTH                            = 0;
    ENG_STOP_nAnim                          = 0;
    ENG_STOP_N_ERR_POSIT                    = 0;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "/STOP");

    SCALAR(ENG_STOP_eMax, "Emax")           {DIMENSION="DIMENSIONLESS";}
    SCALAR(ENG_STOP_mMax, "DeltaMmax")      {DIMENSION="DIMENSIONLESS";}
    SCALAR(ENG_STOP_nMax)                   {DIMENSION="DIMENSIONLESS";}
    RADIO(ENG_STOP_nTH)
    {
        ADD(0, "0: The Engine is stopped without Time History file (Default)");
        ADD(1, "1: A Time History file is written if the Engine is stopped, due to energy error ratio criteria");
    }
    RADIO(ENG_STOP_nAnim)
    {
        ADD(0, "0: The Engine is stopped without animation file (Default)");
        ADD(1, "1: A Time History file is written if the Engine is stopped, due to energy error ratio criteria");
    }
    RADIO(ENG_STOP_N_ERR_POSIT)
    {
        ADD(0, "0: The Engine is stopped when the absolute value of the energy error is more than Emax (Default)");
        ADD(1, "1: Only positive energy error is checked for stopping the Engine. Engine is stopped when the energy error is more than Emax");
    }
}

// File format
FORMAT(radioss41)
{
    HEADER("/STOP");

    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if (IO_FLAG == 0)
    {
        // implements the free format export (with spaces) as per manual
        CARD("%lg %lg %lg",ENG_STOP_eMax,ENG_STOP_mMax,ENG_STOP_nMax);
    }
    else
    {
        // implements the free format import (w/o spaces)
        CARD("%lg%lg%lg",ENG_STOP_eMax,ENG_STOP_mMax,ENG_STOP_nMax);
    }
}

FORMAT(radioss44)
{
    HEADER("/STOP");

    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if (IO_FLAG == 0)
    {
        // implements the free format export (with spaces) as per manual
        CARD("%lg %lg %lg %d %d",ENG_STOP_eMax,ENG_STOP_mMax,ENG_STOP_nMax,ENG_STOP_nTH,ENG_STOP_nAnim);
    }
    else
    {
        // implements the free format import (w/o spaces)
        CARD("%lg%lg%lg%d%d",ENG_STOP_eMax,ENG_STOP_mMax,ENG_STOP_nMax,ENG_STOP_nTH,ENG_STOP_nAnim);
    }
}

FORMAT(radioss2018)
{
    HEADER("/STOP");
    
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if (IO_FLAG == 0)
    {
        // implements the free format export (with spaces) as per manual
        CARD("%lg %lg %lg %d %d %d",ENG_STOP_eMax,ENG_STOP_mMax,ENG_STOP_nMax,ENG_STOP_nTH,ENG_STOP_nAnim,ENG_STOP_N_ERR_POSIT);
    }
    else
    {
        // implements the free format import (w/o spaces)
        CARD("%lg%lg%lg%d%d%d",ENG_STOP_eMax,ENG_STOP_mMax,ENG_STOP_nMax,ENG_STOP_nTH,ENG_STOP_nAnim,ENG_STOP_N_ERR_POSIT);
    }
}
