//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//CONTROL_SPH
//

ATTRIBUTES(COMMON) {
// INPUT ATTRIBUTES 
    LSD_NCBS                                  = VALUE(INT,"Number of time steps between particle sorting");
    LSD_BOXID                                 = VALUE(BLOCK,"SPH approximations are computed inside a specified BOX");
    LSDYNA_DT                                 = VALUE(FLOAT,"Death time");
    LSD_IDIM                                  = VALUE(INT,"Space dimensions for SPH particles");
    LSD_Memory                                = VALUE(INT,"Defines the initial number of neighbors per particle");
    LSD_FORM                                  = VALUE(INT,"Particle approximation theory");
    LSD_START                                 = VALUE(FLOAT,"Start time for particle approximation");
    LSD_MAXV                                  = VALUE(FLOAT,"Maximum value of velocity for the SPH particles");

    //Optional Card
    optionalCards                             = VALUE(INT, "Optional Card 1");

    LSD_CONT                                  = VALUE(INT,"Defines the computation of the particle approximation between two different SPH parts");
    LSD_DERIV                                 = VALUE(INT,"Time integration type for the smoothing length");
    LSD_INI                                   = VALUE(INT,"Computation of the smoothing length during the initialization");
    LSD_ISHOW                                 = VALUE(INT,"Display option for deactivated SPH particles");
    LSD_IEROD                                 = VALUE(INT,"Deactivation control for SPH particles");
    LSD_ICONT                                 = VALUE(INT,"Controls contact behavior for deactivated SPH particles");
    LSD_IAVIS                                 = VALUE(INT,"Defines artificial viscosity formulation for SPH elements");

// HM INTERNAL
    KEYWORD_STR                               = VALUE(STRING,"Solver Keyword");
}



SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                               = 9000;
    LSD_NCBS                                  = 5206;
    LSD_BOXID                                 = 4170;
    LSDYNA_DT                                 = 12;
    LSD_IDIM                                  = 5202;
    LSD_Memory                                = 2001;
    LSD_FORM                                  = 3152;
    LSD_START                                 = 449;
    LSD_MAXV                                  = 5203;
    optionalCards                             = 4772;
    LSD_CONT                                  = 5204;
    LSD_DERIV                                 = 5205;
    LSD_INI                                   = 796;
    LSD_ISHOW                                 = 799;
    LSD_IEROD                                 = 800;
    LSD_ICONT                                 = 801;
    LSD_IAVIS                                 = 802;
}

CHECK(COMMON)
{

}

DEFAULTS(COMMON)
{
    LSD_NCBS                                  = 1;
    LSDYNA_DT                                 = 1e+20;
    LSD_Memory                                = 150;
    LSD_FORM                                  = 0;
    LSD_START                                 = 0.0;
    LSD_MAXV                                  = 1e+15;
    LSD_CONT                                  = 0;
    LSD_DERIV                                 = 0;
    LSD_INI                                   = 0;
    LSD_ISHOW                                 = 0;
    LSD_IEROD                                 = 0;
    LSD_ICONT                                 = 0;
    LSD_IAVIS                                 = 0;
}

GUI(COMMON) {
  ASSIGN(KEYWORD_STR, "*CONTROL_SPH");
  SCALAR(LSD_NCBS)  {DIMENSION="DIMENSIONLESS";}
  DATA(LSD_BOXID);
  SCALAR(LSDYNA_DT)  {DIMENSION="DIMENSIONLESS";}
  RADIO(LSD_IDIM)
  {
    ADD(3,"3: For 3D problems");
    ADD(2,"2: For 2D plane strain problems");
    ADD(-2,"-2: For 2D axisymmetric problems");
  }
  SCALAR(LSD_Memory) {DIMENSION="DIMENSIONLESS";}
  RADIO(LSD_FORM)
  {
    ADD(0,"0: Default formulation");
    ADD(1,"1: Renormalization approximation");
    ADD(2,"2: Symmetric formulation");
    ADD(3,"3: Symmetric renormalized approximation");
    ADD(4,"4: Tensor formulation");
    ADD(5,"5: Fluid particle approximation");
    ADD(6,"6: Fluid particle with renormalization approximation");
    ADD(7,"7: Total Lagrangian formulation");
    ADD(7,"8: Total Lagrangian formulation with renormalization");
  }
  SCALAR(LSD_START) {DIMENSION="DIMENSIONLESS";}
  SCALAR(LSD_MAXV) {DIMENSION="DIMENSIONLESS";}

  //Optional card 
  SEPARATOR("Optional Cards");
  FLAG(optionalCards);
  if(optionalCards != FALSE) {
    RADIO(LSD_CONT)
    {
      ADD(0,"0: Particle approximation is defined (default)");
      ADD(1,"1: Particle approximation is not computed");
    }
    RADIO(LSD_DERIV)
    {
      ADD(0,"0: Equation 1 (default)");
      ADD(1,"1: Equation 2");
    }
    RADIO(LSD_INI)
    {
      ADD(0,"0: Bucket sort based algorithm (default, very fast)");
      ADD(1,"1: Global computation on all the particles of the model");
      ADD(2,"2: Based on the mass of the SPH element");
    }
    RADIO(LSD_ISHOW)
    {
      ADD(0,"0: Show all SPH particles in LS-PrePost");
      ADD(1,"1: Exclude deactivated SPH particles in LS-PrePost");
    }
    RADIO(LSD_IEROD)
    {
      ADD(0,"0: Particles remain active");
      ADD(1,"1: SPH particles are deactivated and stress states are set to 0 when erosion criteria are satisfied");
    }
    RADIO(LSD_ICONT)
    {
      ADD(0,"0: Any contact defined for SPH remains active for deactivated particles");
      ADD(1,"1: Contact is inactive for deactivated particles");
    }
    RADIO(LSD_IAVIS)
    {
      ADD(0,"0: Monaghan type artificial viscosity formulation is used");
      ADD(1,"1: Standard type artificial viscosity formulation from solid element is used");
    }
  }
}

//File format
FORMAT(Keyword971) {
  HEADER("*CONTROL_SPH");
  COMMENT("$     NCBS     BOXID        DT      IDIM    MEMORY      FORM     START      MAXV");
  CARD("%10d%10d%10lg%10d%10d%10d%10lg%10lg",LSD_NCBS,LSD_BOXID,LSDYNA_DT,LSD_IDIM,LSD_Memory,LSD_FORM,LSD_START,LSD_MAXV);

  if(optionalCards != FALSE)
    COMMENT("$     CONT     DERIV       INI");
  FREE_CARD(optionalCards,"%10d%10d%10d",LSD_CONT,LSD_DERIV,LSD_INI);
}
 

FORMAT(Keyword971_R6.1) {
  HEADER("*CONTROL_SPH");
  COMMENT("$     NCBS     BOXID        DT      IDIM    MEMORY      FORM     START      MAXV");
  CARD("%10d%10d%10lg%10d%10d%10d%10lg%10lg",LSD_NCBS,LSD_BOXID,LSDYNA_DT,LSD_IDIM,LSD_Memory,LSD_FORM,LSD_START,LSD_MAXV);

  if(optionalCards != FALSE)
    COMMENT("$     CONT     DERIV       INI     ISHOW     IEROD     ICONT     IAVIS");
  FREE_CARD(optionalCards,"%10d%10d%10d%10d%10d%10d%10d",LSD_CONT,LSD_DERIV,LSD_INI,LSD_ISHOW,LSD_IEROD,LSD_ICONT,LSD_IAVIS);
}
