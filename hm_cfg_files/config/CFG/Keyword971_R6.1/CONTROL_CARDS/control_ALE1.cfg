//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//CONTROL_ALE
//

ATTRIBUTES(COMMON)
{
    // INPUT ATTRIBUTES
    LSD_DCT            = VALUE(INT,"Default continuum treatment");
    LSD_NADV           = VALUE(INT,"Number of cycles between advections");
    LSD_METH           = VALUE(INT,"Advection method");
    LSD_AFAC           = VALUE(FLOAT,"ALE smoothing weight factor - Simple average");
    LSD_BFAC           = VALUE(FLOAT,"ALE smoothing weight factor – Volume weighting");
    LSD_CFAC           = VALUE(FLOAT,"ALE smoothing weight factor – Isoparametric");
    LSD_DFAC           = VALUE(FLOAT,"ALE smoothing weight factor – Equipotential");
    LSD_EFAC           = VALUE(FLOAT,"ALE smoothing weight factor – Equilibrium");
    //
    LSD_START          = VALUE(FLOAT,"Start time for ALE smoothing or Start time for ALE advection if smoothing is not used");
    LSD_END            = VALUE(FLOAT,"End time for ALE smoothing or End time for ALE advection if smoothing is not used");
    LSD_AAFAC          = VALUE(FLOAT,"ALE advection factor");
    LSD_VFACT          = VALUE(FLOAT,"Volume fraction limit for stresses in single material and void formulation");
    LSD_VLIMIT         = VALUE(FLOAT,"A flag to turn on or off the pressure equilibrium iteration option for multi-material elements");
    LSD_EBC            = VALUE(INT,"Automatic Eulerian boundary condition");
    LSD_Pressure       = VALUE(FLOAT,"Reference pressure applied to the free surfaces of the ALE mesh boundary");
    LSD_NSID           = VALUE(SETS,"Node set ID which is excluded from the EBC constraint") { SUBTYPES = (/SETS/SET_NODE_IDPOOL); }
    //
    LSD_NCPL           = VALUE(INT,"Number of Lagrangian cycles between coupling calculations");
    LSD_NBKT           = VALUE(INT,"No. of Lagran cycle b/t between global bucket-sort & ALE fluid");
    CALE_IMASCL        = VALUE(INT,"Flag for turning ON/OFF mass scaling for ALE parts");
    CALE_CHECKR        = VALUE(FLOAT,"Parameter for reducing or eliminating an ALE pressure locking pattern");
    LSD_BEAMIN         = VALUE(FLOAT,"Flag to align the dynamics of plain strain and axisymmetric beams");
    LSD_INIJWL         = VALUE(INT,"Flag to initialize to PREF the pressures of ALE groups");
    LSD_PDIFMX         = VALUE(FLOAT,"Maximum of pressure difference between neighboring ALE elements under which the stresses are zeroed out");
    // HM INTERNAL
    KEYWORD_STR        = VALUE(STRING, "Solver Keyword");
    CONT_ALE_OPT_CARD3 = VALUE(INT, "Optional card 3");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR          = 9000;
    LSD_DCT              = 2213;
    LSD_NADV             = 2214;
    LSD_METH             = 2215;
    LSD_AFAC             = 445;
    LSD_BFAC             = 446;
    LSD_CFAC             = 447;
    LSD_DFAC             = 448;
    LSD_EFAC             = 3225;

    LSD_START            = 449;
    LSD_END              = 450;
    LSD_AAFAC            = 451;
    LSD_VFACT            = 188;
    LSD_VLIMIT           = 189;
    LSD_EBC              = 190;
    LSD_Pressure         = 4677;
    LSD_NSID             = 745;

    LSD_NCPL             = 5298;
    LSD_NBKT             = 5299;
    CALE_IMASCL          = 682;
    CALE_CHECKR          = 683;
    LSD_BEAMIN           = 6292;
    LSD_INIJWL           = 6293;
    LSD_PDIFMX           = 6294;
    CONT_ALE_OPT_CARD3   = 5297;
}

DEFAULTS(COMMON)
{
    LSD_DCT         = 1;
    LSD_METH        = 1;
    LSD_END         = 1.0E+20;
    LSD_AAFAC       = 1.0;
    LSD_VFACT       = 1.0E-06;
    LSD_NCPL        = 1;
    LSD_NBKT        = 50;
}

CHECK(COMMON)
{
    CALE_CHECKR>=0.01;
    CALE_CHECKR <=0.1;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*CONTROL_ALE");
    SCALAR(LSD_DCT)    { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSD_NADV)    { DIMENSION="DIMENSIONLESS"; }
    RADIO(LSD_METH,"Advection method")
    {
        ADD(1,"1: Donor Cell + HIS (Half-Index-Shift, first order accurate)");
        ADD(2,"2: Van Leer + HIS (Half-Index-Shift, second order)");
        ADD(-2,"-2: Van Leer + HIS");
        ADD(3,"3: Donor cell +HIS, first order accurate");
    }
    SCALAR(LSD_AFAC)    {DIMENSION = "DIMENSIONLESS";}
    SCALAR(LSD_BFAC)    {DIMENSION = "DIMENSIONLESS";}
    SCALAR(LSD_CFAC)    {DIMENSION = "DIMENSIONLESS";}
    SCALAR(LSD_DFAC)    {DIMENSION = "DIMENSIONLESS";}
    SCALAR(LSD_EFAC)    {DIMENSION = "DIMENSIONLESS";}

    SCALAR(LSD_START)   {DIMENSION="t";}
    SCALAR(LSD_END)     {DIMENSION="t";}
    SCALAR(LSD_AAFAC)   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_VFACT)   {DIMENSION="DIMENSIONLESS";}
    RADIO(LSD_VLIMIT)
    {
        ADD(0,"0: Off");
        ADD(1,"1: On");
    }
    RADIO(LSD_EBC,"Automatic Eulerian boundary condition")
    {
        ADD(0,"0: Off");
        ADD(1,"1: On with stick condition");
        ADD(2,"2: On with slip condition");
    }
    SCALAR(LSD_Pressure)    {DIMENSION="pressure";}
    DATA(LSD_NSID);
    FLAG(CONT_ALE_OPT_CARD3);
    SEPARATOR("Optional Card 3");
    if(CONT_ALE_OPT_CARD3 != FALSE) 
    {
        SCALAR(LSD_NCPL)    {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_NBKT)    {DIMENSION ="DIMENSIONLESS";}
        RADIO(CALE_IMASCL)
        {
            ADD(0,"0: No mass scaling for ALE parts,Print out maximum 20 warnings");
            ADD(1,"1: No mass scaling for ALE parts. Stop the run");
            ADD(2,"2: Do mass scaling for ALE parts (the result may not be correct due to this scaling)");
        }
        SCALAR(CALE_CHECKR)  {DIMENSION="DIMENSIONLESS";}

        RADIO(LSD_BEAMIN)
        {
            ADD(0,"0: Off");
            ADD(1,"1: On");
        }
        RADIO(LSD_INIJWL)
        {
            ADD(0,"0: Off");
            ADD(1,"1: On");
        }
        SCALAR(LSD_PDIFMX)    {DIMENSION="pressure";}
    }
    SEPARATOR();
}

//File format
FORMAT(Keyword971_R6.1)
{
    HEADER("*CONTROL_ALE");
    COMMENT("$      DCT      NADV      METH      AFAC      BFAC      CFAC      DFAC      EFAC");
    CARD("%10d%10d%10d%10lg%10lg%10lg%10lg%10lg",LSD_DCT,LSD_NADV,LSD_METH,LSD_AFAC,LSD_BFAC,LSD_CFAC,LSD_DFAC,LSD_EFAC);

    COMMENT("$    START       END     AAFAC     VFACT      PRIT       EBC      PREF   NSIDEBC");
    CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10d",LSD_START,LSD_END,LSD_AAFAC,LSD_VFACT,LSD_VLIMIT,LSD_EBC,LSD_Pressure,LSD_NSID);
//
    if(CONT_ALE_OPT_CARD3 != FALSE)
        COMMENT("$     NCPL      NBKT    IMASCL    CHECKR    BEAMIN    INIJWL    PDIFMX");
    FREE_CARD(CONT_ALE_OPT_CARD3,"%10d%10d%10d%10lg%10lg%10d%10lg",LSD_NCPL,LSD_NBKT,CALE_IMASCL,CALE_CHECKR,LSD_BEAMIN,LSD_INIJWL,LSD_PDIFMX);
}

FORMAT(Keyword971)
{
    HEADER("*CONTROL_ALE");
    COMMENT("$      DCT      NADV      METH      AFAC      BFAC      CFAC      DFAC      EFAC");
    CARD("%10d%10d%10d%10lg%10lg%10lg%10lg%10lg",LSD_DCT,LSD_NADV,LSD_METH,LSD_AFAC,LSD_BFAC,LSD_CFAC,LSD_DFAC,LSD_EFAC);

    COMMENT("$    START       END     AAFAC     VFACT      PRIT       EBC      PREF   NSIDEBC");
    CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10d",LSD_START,LSD_END,LSD_AAFAC,LSD_VFACT,LSD_VLIMIT,LSD_EBC,LSD_Pressure,LSD_NSID);
//
    if(CONT_ALE_OPT_CARD3 != FALSE)
        COMMENT("$     NCPL      NBKT    IMASCL    CHECKR");
    FREE_CARD(CONT_ALE_OPT_CARD3,"%10d%10d%10d%10lg",LSD_NCPL,LSD_NBKT,CALE_IMASCL,CALE_CHECKR);
}
