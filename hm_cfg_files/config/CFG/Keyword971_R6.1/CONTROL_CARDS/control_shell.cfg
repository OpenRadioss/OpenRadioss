//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// CONTROL_SHELL
//

ATTRIBUTES(COMMON)
{
// INPUT ATTRIBUTES 
    LSD_WRPANG                              = VALUE(FLOAT,"Shell element warpage angle in degrees");
    LSD_ITRIST                              = VALUE(INT,"Sorting of triangular shell elements to automatically switch degenerate quadrilateral shell  formulations to more suitable triangular shell formulations");
    LSD_IRNXX                               = VALUE(INT,"Shell normal update option");
    LSD_ISTUPD                              = VALUE(INT,"Shell thickness change option for deformable shells");
    LSD_IBELYT                              = VALUE(INT,"Default shell formulation");
    LSD_WARPBTS                             = VALUE(INT,"Warping stiffness for Belytschko-Tsay shells");
    LSD_MITER                               = VALUE(INT,"Plane stress plasticity option");
    LSD_PROJ                                = VALUE(INT,"Projection method for the warping stiffness in the Belytschko-Tsay shell (the BWC option above) and the Belytschko-Wong-Chiang elements");

    //Optional card 1
    LSD_AddCrd                              = VALUE(INT, "Optional card 1");
    LSD_ROTASCL                             = VALUE(FLOAT,"Scale factor for the rotary shell mass");
    LSD_INTGRD                              = VALUE(INT,"Default through thickness numerical integration rule for shells and thick shells");
    LSD_LAMSHT                              = VALUE(INT,"Laminated shell theory");
    LSD_CSTYP6                              = VALUE(INT,"Coordinate system for the type 6 shell element");
    LSD_TSHELL                              = VALUE(INT,"Thermal shell option (applies only to thermal and coupled structural thermal analyses)");

    //Optional card 2
    ImpSolnOptCard3                         = VALUE(INT, "Optional card 2");
    CSH_PSSTUPD                             = VALUE(SETS,"Optional shell part set ID specifying which part ID's have or do not have their thickness updated") { SUBTYPES = (/SETS/SET_PART_IDPOOL) ; }
    LSD_SIDT4TU_ENT                         = VALUE(SETS,"Part set ID for parts which use the type 4 thickness update where elastic strains are ignored")  { SUBTYPES = (/SETS/SET_PART_IDPOOL) ; }
    LSD_CNTCO                               = VALUE(INT,"Flag affecting location of contact surfaces for shells") ;  
    LSD_ITSFLG                              = VALUE(INT,"Flag to activate/deactivate initial transverse shear stresses");  
    CSH_IRQUAD                              = VALUE(INT,"In plane integration rule for the 8 node shell element");
    LSD_WMODE                               = VALUE(FLOAT,"W-mode amplitude for element deletion, specified in degrees");
    LSD_STRETCH                             = VALUE(FLOAT,"Stretch ratio of element diagonals for element deletion");

    //Optional card 3
    ImpSolnOptCard4                         = VALUE(INT, "Optional card 3");
    LSD_NFAIL1                              = VALUE(INT,"Flag to check for highly distorted under-integrated shell elements, print a message, and delete the element or terminate");
    LSD_NFAIL4                              = VALUE(INT,"Flag  to check for highly distorted fully-integrated shell elements, print a message and delete the element or terminate");
    CSH_PSNFAIL                             = VALUE(SETS,"Optional shell part set ID specifying which part ID's are checked by the NFAIL1 and NFAIL4 options") { SUBTYPES = (/SETS/SET_PART_IDPOOL) ; }
    LSD_KEEPCS                              = VALUE(INT,"Flag to keep the contact segments of failed shell elements in the calculation");
    LSD_DELFR                               = VALUE(INT,"Flag to delete shell elements whose neighboring shell elements have failed");
    LSD_DRCPSID                             = VALUE(SETS,"Part set ID for drilling rotation constraint method") { SUBTYPES = (/SETS/SET_PART_IDPOOL) ; }
    LSD_DRCPRM                              = VALUE(FLOAT,"Drilling rotation constraint parameter");
    LSD_INTPERR                             = VALUE(INT,"Flag for behavior in case of unwanted interpolation/extrapolation of initial stresses from *INITIAL_STRESS_SHELL");

// HM INTERNAL
    KEYWORD_STR                               = VALUE(STRING, "Solver Keyword");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    LSD_WRPANG                              = 2088;
    LSD_ITRIST                              = 2090;
    LSD_IRNXX                               = 2091;
    LSD_ISTUPD                              = 2092;
    LSD_IBELYT                              = 2093;
    LSD_WARPBTS                             = 2096;
    LSD_MITER                               = 2089;
    LSD_PROJ                                = 3219;
    LSD_AddCrd                              = 2504;
    LSD_ROTASCL                             = 3221;
    LSD_INTGRD                              = 3222;
    LSD_LAMSHT                              = 3223;
    LSD_CSTYP6                              = 4475;
    LSD_TSHELL                              = 4476;
    ImpSolnOptCard3                         = 4128;
    CSH_PSSTUPD                             = 684;
    LSD_SIDT4TU_ENT                         = 8078;
    LSD_CNTCO                               = 5889;
    LSD_ITSFLG                              = 5890;
    CSH_IRQUAD                              = 685;
    LSD_WMODE                               = 7993;
    LSD_STRETCH                             = 7994;
    ImpSolnOptCard4                         = 2261;
    LSD_NFAIL1                              = 4477;
    LSD_NFAIL4                              = 4478;
    CSH_PSNFAIL                             = 795;
    LSD_KEEPCS                              = 5891;
    LSD_DELFR                               = 5892;
    LSD_DRCPSID                             = 5893;
    LSD_DRCPRM                              = 5894;
    LSD_INTPERR                             = 7995;

}

CHECK(COMMON) {
    LSD_IRNXX > -3 ;
}

DEFAULTS(COMMON)
{
    LSD_WRPANG = 20.0;
    LSD_ITRIST = 0;
    LSD_IRNXX = -1;
    LSD_ISTUPD = 0;
    LSD_IBELYT = 2;
    LSD_WARPBTS = 2;
    LSD_MITER = 1;
    LSD_PROJ = 0;
    LSD_ROTASCL = 1.0;
    LSD_INTGRD = 0;
    LSD_LAMSHT = 0;
    LSD_CSTYP6 = 1;
    LSD_CNTCO = 0;
    LSD_ITSFLG = 0;
    CSH_IRQUAD = 0;
    LSD_KEEPCS = 0;
    LSD_DELFR = 0;
    LSD_DRCPRM = 1.0;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*CONTROL_SHELL");

    SCALAR(LSD_WRPANG) {DIMENSION="DIMENSIONLESS";}	
    RADIO(LSD_ITRIST)
    {
      ADD(0,"0: Do not sort (default)");
      ADD(1,"1: Full sorting (C0 triangular shells)");
      ADD(2,"2: Sort (switch to DKT triangular shell formulation 17, or if a quadratic shell, switch to shell formulation 24)");
    }
    SCALAR(LSD_IRNXX) {DIMENSION="DIMENSIONLESS";}
    RADIO(LSD_ISTUPD)
    {
      ADD(0,"0: No thickness change");
      ADD(1,"1: Membrane straining causes thickness change in 3 and 4 node shell elements");
      ADD(2,"2: Membrane straining causes thickness change in 8 node thick shell elements, types 1 and 2");
      ADD(3,"3: Options 1 and 2 apply");
      ADD(4,"4: Option 1 applies, but the elastic strains are neglected for the thickness update");
    }
    RADIO(LSD_IBELYT)
    {
      ADD(1,"1: Hughes-Liu");
      ADD(2,"2: Belytschko-Tsay (default)");
      ADD(3,"3: BCIZ triangular shell (not recommended)");
      ADD(4,"4: C0 triangular shell");
      ADD(5,"5: Belytschko-Tsay membrane");
      ADD(6,"6: S/R Hughes Liu");
      ADD(7,"7: S/R co-rotational Hughes Liu");
      ADD(8,"8: Belytschko-Leviathan shell");
      ADD(9,"9: Fully integrated Belytschko-Tsay membrane");
      ADD(10,"10: Belytschko-Wong-Chiang");
      ADD(11,"11: Fast (co-rotational) Hughes-Liu");
      ADD(12,"12: Plane stress (x-yplane)");
      ADD(13,"13: Plane strain (x-yplane)");
      ADD(14,"14: Axisymmetric solid (y-axis of symmetry) -- area weighted");
      ADD(15,"15: Axisymmetric solid (y-axis of symmetry) -- volume weighted");
      ADD(16,"16: Fully integrated shell element (very fast) ");
      ADD(17,"17: Discrete Kirchhoff triangular shell (DKT)");
      ADD(18,"18: Discrete Kirchhoff linear shell quadrilateral/Triangular with 6DOF per node");
      ADD(20,"20: C0 - linear shell element with 6 DOF per node");
      ADD(21,"21: C0 - linear shell element with 5 DOF per node with the PianSumihara membrane hybrid quadrilateral membrane");
      ADD(25,"25: Belytschko-Tsay shell with thickness stretch");
      ADD(26,"26: Fully integrated shell with thickness stretch");
      ADD(27,"27: C0 triangular shell with thickness stretch");
    }
    RADIO(LSD_WARPBTS)
    {
      ADD(1,"1: Belytschko-Wong-Chiang warping stiffness added");
      ADD(2,"2: Belytschko-Tsay (default)");
    }
    RADIO(LSD_MITER)
    {
      ADD(1,"1: Iterative plasticity with 3 secant iterations (default)");
      ADD(2,"2: Full iterative plasticity");
      ADD(3,"3: Radial return non iterative plasticity");
    }
    RADIO(LSD_PROJ)
    {
      ADD(0,"0: Drill projection");
      ADD(1,"1: Full projection");
    }

    //Optional card 1  
    FLAG(LSD_AddCrd);
    optional:
    
    if(LSD_AddCrd != FALSE) {
      SEPARATOR("OPTIONAL CARDS 1");
      SCALAR(LSD_ROTASCL) {DIMENSION="DIMENSIONLESS";}
      RADIO(LSD_INTGRD)
      {
        ADD(0,"0: Gauss integration");
        ADD(1,"1: Lobatto integration");
      }
      RADIO(LSD_LAMSHT)
      {
        ADD(0,"0: Do not update shear corrections");
        ADD(1,"1: Activate laminated shell theory");
        ADD(3,"3: Activate laminated thin shell");
        ADD(4,"4: Activate laminated shell theory for thick shells");
        ADD(5,"5: Activate laminated shell theory for thin and thick shells");
      }
      RADIO(LSD_CSTYP6)
      {
        ADD(1,"1: Variable local coordinate system (default)");
        ADD(2,"2: Uniform local system");
      }
      RADIO(LSD_TSHELL) 
      {
         ADD(0,"0: No temperature gradient is considered through the shell thickness (default)") ;
         ADD(1,"1: A temperature gradient is calculated through the shell thickness") ;
      } 
    }

    if(LSD_AddCrd != FALSE)
    {
      FLAG(ImpSolnOptCard3);
    }

    //Optional card 2 
    if(LSD_AddCrd != FALSE && ImpSolnOptCard3 != FALSE) {   
    optional:
      SEPARATOR("OPTIONAL CARDS 2");
      DATA(CSH_PSSTUPD);
      DATA(LSD_SIDT4TU_ENT);
      RADIO(LSD_CNTCO)
      {
        ADD(0,"0: NLOC and OFFSET have no effect on location of shell contact surfaces");
        ADD(1,"1: Contact reference plane coincides with shell reference surface") ;
        ADD(2,"2: Contact reference plane is affected by contact thickness (not physical)") ;
      }
      RADIO(LSD_ITSFLG)
      {
         ADD( 0, "0: Keep transverse shear stresses");
         ADD( 1, "1: Set transverse shear stresses to zero");
      }
      RADIO(CSH_IRQUAD)
      {
        ADD(0,"0: Default");
        ADD(2,"2: 2 x 2 Gauss quadrature");
        ADD(3,"3: 3 x 3 Gauss quadrature");
      }
    }

    if(ImpSolnOptCard3 != FALSE && LSD_AddCrd != FALSE)
    {
      FLAG(ImpSolnOptCard4);
    }

    //Optional card 3 
    if((LSD_AddCrd != FALSE) && (ImpSolnOptCard3 != FALSE) && (ImpSolnOptCard4 != FALSE))
    {  
    optional:
      SEPARATOR("OPTIONAL CARDS 3");
      SCALAR(LSD_NFAIL1) {DIMENSION="DIMENSIONLESS";}
      SCALAR(LSD_NFAIL4) {DIMENSION="DIMENSIONLESS";}
      DATA(CSH_PSNFAIL);
  
      RADIO(LSD_KEEPCS)
      {
         ADD(0, "0: Inactive");
         ADD(1, "1: Active");
      }
      
      RADIO(LSD_DELFR)
      {
         ADD(0, "0: Inactive");
         ADD(1, "1: Active");
      }
  }
}

// File format
FORMAT(Keyword971) {
  HEADER("*CONTROL_SHELL");
  COMMENT("$   WRPANG     ESORT     IRNXX    ISTUPD    THEORY       BWC     MITER      PROJ");
  CARD("%10lg%10d%10d%10d%10d%10d%10d%10d",LSD_WRPANG,LSD_ITRIST,LSD_IRNXX,LSD_ISTUPD,LSD_IBELYT,LSD_WARPBTS,LSD_MITER,LSD_PROJ);

  //First optional Card
  if(LSD_AddCrd != FALSE)
    COMMENT("$  ROTASCL    INTGRD    LAMSHT    CSTYP6    THSHEL    NFAIL1    NFAIL4   PSNFAIL");
  FREE_CARD(LSD_AddCrd,"%10lg%10d%10d%10d%10d%10d%10d%10d",LSD_ROTASCL,LSD_INTGRD,LSD_LAMSHT,LSD_CSTYP6,LSD_TSHELL,LSD_NFAIL1,LSD_NFAIL4,CSH_PSNFAIL);

  //Second optional Card
  if(ImpSolnOptCard3 != FALSE && LSD_AddCrd != FALSE)
    COMMENT("$  PSSTUPD   SIDT4TU     CNTCO");
  FREE_CARD(ImpSolnOptCard3,"%10d%10d%10d",CSH_PSSTUPD,LSD_SIDT4TU_ENT,LSD_CNTCO);
}

FORMAT(Keyword971_R6.1) {
  HEADER("*CONTROL_SHELL");
  COMMENT("$   WRPANG     ESORT     IRNXX    ISTUPD    THEORY       BWC     MITER      PROJ");
  CARD("%10lg%10d%10d%10d%10d%10d%10d%10d",LSD_WRPANG,LSD_ITRIST,LSD_IRNXX,LSD_ISTUPD,LSD_IBELYT,LSD_WARPBTS,LSD_MITER,LSD_PROJ);

  //First optional Card
  if(LSD_AddCrd != FALSE)
    COMMENT("$  ROTASCL    INTGRD    LAMSHT    CSTYP6    THSHEL");
  FREE_CARD(LSD_AddCrd,"%10lg%10d%10d%10d%10d",LSD_ROTASCL,LSD_INTGRD,LSD_LAMSHT,LSD_CSTYP6,LSD_TSHELL);

  //Second optional Card
  if(ImpSolnOptCard3 != FALSE && LSD_AddCrd != FALSE)
    COMMENT("$   PSTUPD   SIDT4TU     CNTCO    ITSFLG    IRQUAD");
  FREE_CARD(ImpSolnOptCard3,"%10d%10d%10d%10d%10d",CSH_PSSTUPD,LSD_SIDT4TU_ENT,LSD_CNTCO,LSD_ITSFLG,CSH_IRQUAD);
    
  //Third optional Card
  if((LSD_AddCrd != FALSE) && (ImpSolnOptCard3 != FALSE) && (ImpSolnOptCard4 != FALSE))
    COMMENT("$   NFAIL1    NFAIL4   PSNFAIL    KEEPCS     DELFR");
  FREE_CARD(ImpSolnOptCard4,"%10d%10d%10d%10d%10d",LSD_NFAIL1,LSD_NFAIL4,CSH_PSNFAIL,LSD_KEEPCS,LSD_DELFR);
}
