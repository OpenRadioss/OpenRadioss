//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//CONTROL_CONTACT
//

ATTRIBUTES(COMMON)
{
// INPUT ATTRIBUTES    
    LSD_SLSFAC                                = VALUE(FLOAT,"Scale factor for sliding interface penalties, SLSFAC:");
    LSD_RWPNAL                                = VALUE(FLOAT,"Scale factor for rigid wall penalties, which treat nodal points interacting with rigid walls, RWPNAL");
    LSD_ISHLTK                                = VALUE(INT,"Initial penetration check in contact surfaces with indication of initial penetration in output files:");
    LSD_SHLTHK                                = VALUE(INT,"Shell thickness considered in type surface to surface and node to surface type contact options");
    LSD_PENOPT                                = VALUE(INT,"Penalty stiffness value option");
    LSD_THKCHG                                = VALUE(INT,"Shell thickness changes considered in single surface contact:");
    LSD_ORIEN                                 = VALUE(INT,"Optional automatic reorientation of contact interface segments during initialization:");
    LSD_ENMASS                                = VALUE(INT,"Treatment of the mass of eroded nodes in contact");

    LSD_USRSTR                                = VALUE(INT,"Storage per contact interface for user supplied interface control subroutine");
    LSD_USRFRC                                = VALUE(INT,"Storage per contact interface for user supplied interface friction subroutine");
    LSD_NSBCS                                 = VALUE(INT,"Number of cycles between contact searching using three dimensional bucket searches");
    LSD_INTERM                                = VALUE(INT,"Flag for intermittent searching in old surface-to-surface contact using the interval specified as NSBCS above:");
    LSD_XPENE                                 = VALUE(FLOAT,"Contact surface maximum penetration check multiplier");
    LSD_SSTHK                                 = VALUE(INT,"Flag for using actual shell thickness in single surface contact logic-types 4, 13, 15 and 26");
    LSD_ECDT                                  = VALUE(INT,"Time step size override for eroding contact:");
    LSD_TIEDPRJ                               = VALUE(INT,"Bypass projection of slave nodes to master surface in types:");

    //Optional Cards
    LSD_AddCrd                                = VALUE(INT, "AdditionalCards");
    
    LSD_SFRIC                                 = VALUE(FLOAT,"Default static coefficient of friction (see *PART_CONTACT)");
    LSD_DFRIC                                 = VALUE(FLOAT,"Default dynamic coefficient of friction (see *PART_CONTACT)");
    LSD_CEDC                                  = VALUE(FLOAT,"Default exponential decay coefficient (see *PART_CONTACT)");
    LSD_VFC                                   = VALUE(FLOAT,"Default viscous friction coefficient (see *PART_CONTACT)");
    LSD_TH                                    = VALUE(FLOAT,"Default contact thickness (see *PART_CONTACT)");
    LSD_TH_SF                                 = VALUE(FLOAT,"Default thickness scale factor (see *PART_CONTACT)");
    LSD_PEN_SF                                = VALUE(FLOAT,"Default local penalty scale factor (see *PART_CONTACT)");
    
    //Optional Card 4
    CONT_OPT_CARD4                            = VALUE(INT, "OptionalCard4");

    CONT_IGNORE                               = VALUE(INT,"Ignore initial penetrations in the *C0NTACT AUTOMATIC options");
    CONT_FRCENG                               = VALUE(INT,"Flag to activate the calculation of frictional sliding energy:");
    CONT_SKIPRWG                              = VALUE(INT,"Flag not to display stationary rigid wall by default");
    CONT_OUTSEG                               = VALUE(INT,"Flag to output each beam spot weld slave node & its master segment for contact type: *CONTACT_SPOTWELD into the D3HSP file");
    CONT_SPOTSTP                              = VALUE(INT,"If a spot weld node or face, which is related to a *MAT_SPOTWELD beam or solid element, respectively, cannot be found on the master surface, should an error termination occur?");
    CONT_SPOTDEL                              = VALUE(INT,"If the nodes of a spot weld beam or solid element are attached to a shell element that fails and are deleted, then the attached spot weld element is deleted if this flag is on");
    CONT_SPOTHIN                              = VALUE(FLOAT,"Optional thickness scale factor");

    //Optional Card 5
    CONT_OPT_CARD5                            = VALUE(INT, "OptionalCard5");

    CONT_ISYM                                 = VALUE(INT,"Symmetry plane option default for automatic segment generation when contact is defined by part IDï¿½s:");
    CONT_NSEROD                               = VALUE(INT,"Flag to use one-way node to surface erosion");
    CONT_RWGAPS                               = VALUE(INT,"Flag to add rigid wall gap stiffness, see parameter RWGDTH below");
    CONT_RWGDTH                               = VALUE(FLOAT,"Death time for gap stiffness");
    CONT_RWKSF                                = VALUE(FLOAT,"Rigid wall penalty scale factor for contact with deformable parts during implicit calculations");
    CONT_ICOV                                 = VALUE(INT,"Invokes covariant formulation of Konyukhov and Schweizerhof in the FORMING contact option");
    CONT_SWRADF                               = VALUE(FLOAT,"Spot weld radius scale factor for neighbor segment thinning");
    CONT_ITHOFF                               = VALUE(INT,"Flag for offsetting thermal contact surfaces for thick thermal shells");

    //Optional Card 6
    CONT_OPT_CARD6                            = VALUE(INT, "OptionalCard6");

    CONT_SHLEDG                               = VALUE(INT,"Flag for assuming edge shape for shells when measuring penetration");
    CONT_PSTIFF                               = VALUE(INT,"Flag to choose the method for calculating penalty stiffness. This is available for segment based contact (see SOFT on *CONTACT)");
    CONT_ITHCNT                               = VALUE(INT,"Thermal contact heat transfer methodology");
    CONT_TDCNOF                               = VALUE(INT,"Tied constraint offset contact update option");
    CONT_FTALL                                = VALUE(INT,"Option to output contact forces to RCFORC for all 2 surface force transducers when the force transducer surfaces overlap");
    CONT_SHLTRW                               = VALUE(FLOAT,"Optional shell thickness scale factor for contact with rigid walls");

    empty_string                              = VALUE(STRING, "");

// HM INTERNAL
    KEYWORD_STR                               = VALUE(STRING, "Solver Keyword");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                               = 9000;
    LSD_SLSFAC                                = 2117;
    LSD_RWPNAL                                = 2118;
    LSD_ISHLTK                                = 2119;
    LSD_SHLTHK                                = 2120;
    LSD_PENOPT                                = 2121;
    LSD_THKCHG                                = 2122;
    LSD_ORIEN                                 = 2123;
    LSD_ENMASS                                = 4186;

    LSD_USRSTR                                = 1941;
    LSD_USRFRC                                = 1942;
    LSD_NSBCS                                 = 2124;
    LSD_INTERM                                = 2125;
    LSD_XPENE                                 = 2126;
    LSD_SSTHK                                 = 2127;
    LSD_ECDT                                  = 2128;
    LSD_TIEDPRJ                               = 105;

    LSD_AddCrd                                = 2504;
    LSD_SFRIC                                 = 2497;
    LSD_DFRIC                                 = 2498;
    LSD_CEDC                                  = 2499;
    LSD_VFC                                   = 2500;
    LSD_TH                                    = 2501;
    LSD_TH_SF                                 = 2502;
    LSD_PEN_SF                                = 2503;
    
    CONT_OPT_CARD4                            = 4187;
    CONT_IGNORE                               = 4184;
    CONT_FRCENG                               = 4185;
    CONT_SKIPRWG                              = 4464;
    CONT_OUTSEG                               = 4465;
    CONT_SPOTSTP                              = 4466;
    CONT_SPOTDEL                              = 4467;
    CONT_SPOTHIN                              = 871;

    CONT_OPT_CARD5                            = 878;
    CONT_ISYM                                 = 872;
    CONT_NSEROD                               = 873;
    CONT_RWGAPS                               = 874;
    CONT_RWGDTH                               = 875;
    CONT_RWKSF                                = 876;
    CONT_ICOV                                 = 877;
    CONT_SWRADF                               = 4892;
    CONT_ITHOFF                               = 4893;

    CONT_OPT_CARD6                            = 4895;
    CONT_SHLEDG                               = 4894;
    CONT_PSTIFF                               = 5839;
    CONT_ITHCNT                               = 5840;
    CONT_TDCNOF                               = 5841;
    CONT_FTALL                                = 5842;
    CONT_SHLTRW                               = 5843;

    empty_string                              = -1;
}

CHECK(COMMON)
{

}

DEFAULTS(COMMON)
{
    LSD_SLSFAC                                = 0.1;
    LSD_ISHLTK                                = 1;
    LSD_SHLTHK                                = 0;
    LSD_PENOPT                                = 1;
    LSD_THKCHG                                = 0;
    LSD_ORIEN                                 = 1;
    LSD_ENMASS                                = 0;

    LSD_USRSTR                                = 0;
    LSD_USRFRC                                = 0;
    LSD_NSBCS                                 = 10;
    LSD_INTERM                                = 0;
    LSD_XPENE                                 = 4.0;
    LSD_SSTHK                                 = 0;
    LSD_ECDT                                  = 0;
    LSD_TIEDPRJ                               = 0;
   
    LSD_SFRIC                                 = 0.0;
    LSD_DFRIC                                 = 0.0;
    LSD_CEDC                                  = 0.0;
    LSD_VFC                                   = 0.0;
    LSD_TH                                    = 0.0;
    LSD_TH_SF                                 = 0.0;
    LSD_PEN_SF                                = 0.0;
    
    CONT_IGNORE                               = 0;
    CONT_FRCENG                               = 0;
    CONT_SKIPRWG                              = 0;
    CONT_OUTSEG                               = 0;
    CONT_SPOTSTP                              = 0;
    CONT_SPOTDEL                              = 0;

    CONT_ISYM                                 = 0;
    CONT_NSEROD                               = 0;
    CONT_RWGAPS                               = 0;
    CONT_RWGDTH                               = 0.0;
    CONT_RWKSF                                = 1.0;
    CONT_ICOV                                 = 0;
    CONT_SWRADF                               = 0.0;
    CONT_ITHOFF                               = 0;

    CONT_SHLEDG                               = 0;
    CONT_PSTIFF                               = 0;
    CONT_ITHCNT                               = 0;
    CONT_TDCNOF                               = 0;
    CONT_FTALL                                = 0;
    CONT_SHLTRW                               = 0;

    empty_string                              = "";
}

GUI(COMMON)
{
  ASSIGN(KEYWORD_STR, "*CONTROL_CONTACT");

  SCALAR(LSD_SLSFAC) {DIMENSION = "DIMENSIONLESS";}
  SCALAR(LSD_RWPNAL) {DIMENSION = "DIMENSIONLESS";}
  RADIO(LSD_ISHLTK)
  {
    ADD(0,"0: the default is set to 1");
    ADD(1,"1: No checking");
    ADD(2,"2: Full check of initial penetration");
  }
  RADIO(LSD_SHLTHK)
  {
    ADD(0,"0: Thickness is not considered");
    ADD(1,"1: Thickness is considered but rigid bodies are excluded");
    ADD(2,"2: Thickness is considered including rigid bodies");
  }
  RADIO(LSD_PENOPT)
  {
    ADD(0,"0: the default is set to 1");
    ADD(1,"1: Minimum of master segment and slave node (default for most contact types)");
    ADD(2,"2: Use master segment stiffness (old way)");
    ADD(3,"3: Use slave node value");
    ADD(4,"4: Use slave node value, area or mass weighted");
    ADD(5,"5: Same as 4 but inversely proportional to the shell thickness");
  }
  RADIO(LSD_THKCHG)
  {
    ADD(0,"0: No consideration (default)");
    ADD(1,"1: Shell thickness changes are included");
  }
  RADIO(LSD_ORIEN)
  {
    ADD(0,"0: Default is set to 1");
    ADD(1,"1: Active for automated (part) input only. Contact surfaces are given by *PART definitions");
    ADD(2,"2: Active for manual (segment) and automated (part) input");
    ADD(3,"3: Inactive for non-forming contact");
    ADD(4,"4: Inactive for forming contact");
  }
  RADIO(LSD_ENMASS)
  {
    ADD(0,"0: Eroding nodes are removed from the calculation");
    ADD(1,"1: Eroding nodes of solid elements are retained and continue to be active in contact");
    ADD(2,"2: The Eroding nodes of solid and shell elements are retained and continue to be active in contact");
  }

  SCALAR(LSD_USRSTR) {DIMENSION = "DIMENSIONLESS";}
  SCALAR(LSD_USRFRC) {DIMENSION = "DIMENSIONLESS";}
  SCALAR(LSD_NSBCS) {DIMENSION = "DIMENSIONLESS";}
  RADIO(LSD_INTERM)
  {
    ADD(0,"0: Off");
    ADD(1,"1: On");
  }
  SCALAR(LSD_XPENE ) {DIMENSION = "DIMENSIONLESS";}
  RADIO(LSD_SSTHK)
  {
    ADD(0,"0: Actual shell thickness is not used in the contacts. (default)");
    ADD(1,"1: Actual shell thickness is used in the contacts (sometimes recommended for metal forming calculations)");
  }
  RADIO(LSD_ECDT)
  {
    ADD(0,"0: Contact time size may control Dt.");
    ADD(1,"1: Contact is not considered in Dt determination");
  }
  RADIO(LSD_TIEDPRJ)
  {
    ADD(0,"0: Eliminate gaps by projection nodes");
    ADD(1,"1: Bypass projection. Gaps create rotational constraints which can substantially affect results");
  }

  //Optional card
  FLAG(LSD_AddCrd);
  optional:

  if (LSD_AddCrd != FALSE) {
    SEPARATOR("OPTIONAL CARDS 3");
    SCALAR(LSD_SFRIC)  {DIMENSION = "DIMENSIONLESS";}
    SCALAR(LSD_DFRIC)  {DIMENSION = "DIMENSIONLESS";}
    SCALAR(LSD_CEDC)   {DIMENSION = "DIMENSIONLESS";}
    SCALAR(LSD_VFC)    {DIMENSION = "DIMENSIONLESS";}
    SCALAR(LSD_TH)     {DIMENSION = "DIMENSIONLESS";}
    SCALAR(LSD_TH_SF)  {DIMENSION = "DIMENSIONLESS";}
    SCALAR(LSD_PEN_SF) {DIMENSION = "DIMENSIONLESS";}
  }

  if(LSD_AddCrd != FALSE)
  {
    FLAG(CONT_OPT_CARD4);
  }
  
  //Optional card 4
  if ((CONT_OPT_CARD4 != FALSE) && (LSD_AddCrd != FALSE))
  {
  optional:
    SEPARATOR("OPTIONAL CARDS 4");
    RADIO(CONT_IGNORE)
    {
        ADD(0,"0: Move nodes to eliminate initial penetrations in the model definition");
        ADD(1,"1: Allow initial penetrations to exist by tracking the initial penetrations");
        ADD(2,"2: Allow initial penetrations to exist by tracking the initial penetrations but print with penetration warning messages");
    }
    RADIO(CONT_FRCENG)
    {
      ADD(0,"0: Do not calculate");
      ADD(1,"1: Calculate and convert frictional energy in contact to heat");
    }
    RADIO(CONT_SKIPRWG)
    {
      ADD(0,"0: Generate 4 extra nodes and 1 shell element to visualize stationary planar rigid wall");
      ADD(1,"1: Do not generate stationary rigid wall");
    }
    RADIO(CONT_OUTSEG)
    {
      ADD(0,"0: No, do not write out this information");
      ADD(1,"1: Yes, write out this information");
    }
    RADIO(CONT_SPOTSTP)
    {
      ADD(0,"0: No, silently delete the weld and continue");
      ADD(1,"1: Yes, print error message and terminate");
      ADD(2,"2: No, delete the weld, print a message, and continue");
      ADD(3,"3: No, keep the weld. (This is not recommended as it can lead to instabilities)");
    }
    RADIO(CONT_SPOTDEL)
    {
      ADD(0,"0: No, do not delete the spot weld beam or solid element");
      ADD(1,"1: Yes,delete weld elements when attached shells on one side of element fail");
    }
    SCALAR(CONT_SPOTHIN) {DIMENSION = "DIMENSIONLESS";}
  }

  if(LSD_AddCrd != FALSE && CONT_OPT_CARD4 != FALSE)
  {
    FLAG(CONT_OPT_CARD5);
  }
  
  //Optional card 5
  if ((CONT_OPT_CARD5 != FALSE) && (CONT_OPT_CARD4 != FALSE) && (LSD_AddCrd != FALSE))
  {
  optional:
    SEPARATOR("OPTIONAL CARDS 5");
    RADIO(CONT_ISYM)
    {
      ADD(0,"0: Off");
      ADD(1,"1: Do not include faces with normal boundary constraints");
    }
    RADIO(CONT_NSEROD)
    {
      ADD(0,"0: Use two-way algorithm");
      ADD(1,"1: Use one-way algorithm");
    }
    RADIO(CONT_RWGAPS)
    {
      ADD(1,"1: Add gap stiffness");
      ADD(2,"2: Do not add gap stiffness");
    }
    SCALAR(CONT_RWGDTH) {DIMENSION = "DIMENSIONLESS";}
    SCALAR(CONT_RWKSF)  {DIMENSION = "DIMENSIONLESS";}
    RADIO(CONT_ICOV)
    {
      ADD(0,"0: Standard formulation (default)");
      ADD(1,"1: Covariant contact formulation");
    }
    SCALAR(CONT_SWRADF){DIMENSION="DIMENSIONLESS";}
    RADIO(CONT_ITHOFF)
    {
      ADD(0,"0: No offset, if thickness is not included in the contact the heat will be transferred between the mid-surfaces of the corresponding");
      ADD(1,"1: Offsets are applied, so that contact heat transfer is always between the outer surfaces of the contact segments (shells)");
    }
  }
  
  if(LSD_AddCrd != FALSE && CONT_OPT_CARD4 != FALSE)
  {
    FLAG(CONT_OPT_CARD6);
  }
  
  //Optional card 6
  if ((CONT_OPT_CARD6 != FALSE) && (CONT_OPT_CARD5 != FALSE) && (CONT_OPT_CARD4 != FALSE) && (LSD_AddCrd != FALSE))
  {
  optional:
    SEPARATOR("OPTIONAL CARDS 6");
    RADIO(CONT_SHLEDG)
    {
      ADD(0,"0: Shell edges are assumed round (default)");
      ADD(1,"1: Shell edges are assumed square and are flush with the nodes");
    }
    RADIO(CONT_PSTIFF)
    {
      ADD(0,"0: Based on material density and segment dimensions (default)");
      ADD(1,"1: Based on nodal masses.");
    }
    RADIO(CONT_ITHCNT)
    {
      ADD(-1,"-1: Conduction evevenly distributed (pre R4)");
      ADD(0,"0: Default set to 1");
      ADD(0,"1: Conduction weighted by shape functions, reduced integration");
      ADD(1,"2: Conduction weighted by shape functions, full integration");
    } 
    RADIO(CONT_TDCNOF)
    {
      ADD(0,"0: Update velocities and displacements from accelerations");
      ADD(1,"1: Update velocities and acclelerations from displacements");
    } 
    RADIO(CONT_FTALL)
    {
      ADD(0,"0: Output to the first force transducer that matches (default)");
      ADD(1,"1: Output to all force transducers that match");
    } 
    SCALAR(CONT_SHLTRW) {DIMENSION = "DIMENSIONLESS";}
  }
}

//File format
FORMAT(Keyword971)
{
  HEADER("*CONTROL_CONTACT");
  COMMENT("$   SLSFAC    RWPNAL    ISLCHK    SHLTHK    PENOPT    THKCHG     ORIEN    ENMASS");
  CARD("%10lg%10lg%10d%10d%10d%10d%10d%10d",LSD_SLSFAC,LSD_RWPNAL,LSD_ISHLTK,LSD_SHLTHK,LSD_PENOPT,LSD_THKCHG,LSD_ORIEN,LSD_ENMASS);

  COMMENT("$   USRSTR    USRFRC     NSBCS    INTERM     XPENE     SSTHK      ECDT   TIEDPRJ");
  CARD("%10d%10d%10d%10d%10lg%10d%10d%10d",LSD_USRSTR,LSD_USRFRC,LSD_NSBCS,LSD_INTERM,LSD_XPENE,LSD_SSTHK,LSD_ECDT,LSD_TIEDPRJ);

  if (LSD_AddCrd !=FALSE)
    COMMENT("$    SFRIC     DFRIC       EDC       VFC        TH     TH_SF    PEN_SF");
  FREE_CARD(LSD_AddCrd,"%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_SFRIC,LSD_DFRIC,LSD_CEDC,LSD_VFC,LSD_TH,LSD_TH_SF,LSD_PEN_SF);

  if ((CONT_OPT_CARD4 != FALSE) && (LSD_AddCrd != FALSE))
    COMMENT("$   IGNORE    FRCENG   SKIPRWG    OUTSEG   SPOTSTP   SPOTDEL   SPOTHIN");
  FREE_CARD(CONT_OPT_CARD4,"%10d%10d%10d%10d%10d%10d%10lg",CONT_IGNORE,CONT_FRCENG,CONT_SKIPRWG,CONT_OUTSEG,CONT_SPOTSTP,CONT_SPOTDEL,CONT_SPOTHIN);

  if ((CONT_OPT_CARD5 != FALSE) && (CONT_OPT_CARD4 != FALSE) && (LSD_AddCrd != FALSE))
    COMMENT("$     ISYM    NSEROD    RWGAPS    RWGDTH     RWKSF      ICOV    SWRADF    ITHOFF");
  FREE_CARD(CONT_OPT_CARD5,"%10d%10d%10d%10lg%10lg%10d%10lg%10d",CONT_ISYM,CONT_NSEROD,CONT_RWGAPS,CONT_RWGDTH,CONT_RWKSF,CONT_ICOV,CONT_SWRADF,CONT_ITHOFF);

  if ((CONT_OPT_CARD6 != FALSE) && (CONT_OPT_CARD5 != FALSE) && (CONT_OPT_CARD4 != FALSE) && (LSD_AddCrd != FALSE))
    COMMENT("$   SHLEDG    PSTIFF    ITHCNT    TDCNOF     FTALL");
  FREE_CARD(CONT_OPT_CARD6,"%10d%10d%10d%10d%10d",CONT_SHLEDG,CONT_PSTIFF,CONT_ITHCNT,CONT_TDCNOF,CONT_FTALL);
}

FORMAT(Keyword971_R6.1)
{
  HEADER("*CONTROL_CONTACT");
  COMMENT("$   SLSFAC    RWPNAL    ISLCHK    SHLTHK    PENOPT    THKCHG     ORIEN    ENMASS");
  CARD("%10lg%10lg%10d%10d%10d%10d%10d%10d",LSD_SLSFAC,LSD_RWPNAL,LSD_ISHLTK,LSD_SHLTHK,LSD_PENOPT,LSD_THKCHG,LSD_ORIEN,LSD_ENMASS);

  COMMENT("$   USRSTR    USRFRC     NSBCS    INTERM     XPENE     SSTHK      ECDT   TIEDPRJ");
  CARD("%10d%10d%10d%10d%10lg%10d%10d%10d",LSD_USRSTR,LSD_USRFRC,LSD_NSBCS,LSD_INTERM,LSD_XPENE,LSD_SSTHK,LSD_ECDT,LSD_TIEDPRJ);

  if (LSD_AddCrd !=FALSE)
    COMMENT("$    SFRIC     DFRIC       EDC       VFC        TH     TH_SF    PEN_SF");
  FREE_CARD(LSD_AddCrd,"%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_SFRIC,LSD_DFRIC,LSD_CEDC,LSD_VFC,LSD_TH,LSD_TH_SF,LSD_PEN_SF);

  if ((CONT_OPT_CARD4 != FALSE) && (LSD_AddCrd != FALSE))
    COMMENT("$   IGNORE    FRCENG   SKIPRWG    OUTSEG   SPOTSTP   SPOTDEL   SPOTHIN");
  FREE_CARD(CONT_OPT_CARD4,"%10d%10d%10d%10d%10d%10d%10lg",CONT_IGNORE,CONT_FRCENG,CONT_SKIPRWG,CONT_OUTSEG,CONT_SPOTSTP,CONT_SPOTDEL,CONT_SPOTHIN);

  if ((CONT_OPT_CARD5 != FALSE) && (CONT_OPT_CARD4 != FALSE) && (LSD_AddCrd != FALSE))
    COMMENT("$     ISYM    NSEROD    RWGAPS    RWGDTH     RWKSF      ICOV    SWRADF    ITHOFF");
  FREE_CARD(CONT_OPT_CARD5,"%10d%10d%10d%10lg%10lg%10d%10lg%10d",CONT_ISYM,CONT_NSEROD,CONT_RWGAPS,CONT_RWGDTH,CONT_RWKSF,CONT_ICOV,CONT_SWRADF,CONT_ITHOFF);

  if ((CONT_OPT_CARD6 != FALSE) && (CONT_OPT_CARD5 != FALSE) && (CONT_OPT_CARD4 != FALSE) && (LSD_AddCrd != FALSE))
    COMMENT("$   SHLEDG    PSTIFF    ITHCNT    TDCNOF     FTALL              SHLTRW");
  FREE_CARD(CONT_OPT_CARD6,"%10d%10d%10d%10d%10d%10s%10lg",CONT_SHLEDG,CONT_PSTIFF,CONT_ITHCNT,CONT_TDCNOF,CONT_FTALL,empty_string,CONT_SHLTRW);
}
