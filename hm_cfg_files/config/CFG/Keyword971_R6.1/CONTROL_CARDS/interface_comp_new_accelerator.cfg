//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// *INTERFACE_COMPENSATION_NEW_ACCELERATOR
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");

    LSD_ISTEPS                              = VALUE(INT,    "Steps in accelerated compensation procedure");
    LSD_TOLX                                = VALUE(FLOAT,  "Part deviation tolerance between current blank and target blank shape in global X-direction");
    LSD_TOLY                                = VALUE(FLOAT,  "Part deviation tolerance between current blank and target blank shape in global Y-direction");
    LSD_TOLZ                                = VALUE(FLOAT,  "Part deviation tolerance between current blank and target blank shape in global Z-direction");
    Card_Option                             = VALUE(INT,    "Compensation acceleration method");

}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;

    LSD_ISTEPS                              = 11131;
    LSD_TOLX                                = 11132;
    LSD_TOLY                                = 11133;
    LSD_TOLZ                                = 11134;
    Card_Option                             = 998;

}

CHECK(COMMON)
{


}

DEFAULTS(COMMON)
{

    LSD_ISTEPS  = 0;
    LSD_TOLX    = 0.5;
    LSD_TOLY    = 0.5;
    LSD_TOLZ    = 0.5;
    Card_Option = 1;

}

GUI(COMMON)
{

    ASSIGN(KEYWORD_STR, "*INTERFACE_COMPENSATION_NEW_ACCELERATOR");
    RADIO(LSD_ISTEPS)
    {
       ADD(0, "0: Represents the baseline spring back simulation");
       ADD(1, "1: Represents one compensation iteration");
       ADD(2, "2: Represents two compensation iterations");
       ADD(3, "3: Represents three compensation iterations");
    }
    SCALAR(LSD_TOLX);
    SCALAR(LSD_TOLY);
    SCALAR(LSD_TOLZ);
    SCALAR(Card_Option);

}

// File format
FORMAT(Keyword971_R6.1)
{
  HEADER("*INTERFACE_COMPENSATION_NEW_ACCELERATOR");
  COMMENT("$   ISTEPS      TOLX      TOLY      TOLZ    OPTION");
  CARD("%10d%10lg%10lg%10lg%10d",LSD_ISTEPS,LSD_TOLX,LSD_TOLY,LSD_TOLZ,Card_Option);
}
