//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// DATABASE_EXTENT_MPGS
//

ATTRIBUTES(COMMON)
{
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");

    LSD_VTYPE                               = VALUE(INT,    "Variable type");
    LSD_COMP                                = VALUE(INT,    "Component ID");

    IO_FLAG                                 = VALUE(INT,    "Import/Export flag");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;

    LSD_VTYPE                               = 2227;
    LSD_COMP                                = 2228;

    IO_FLAG                                 = -1;
}

DEFAULTS(COMMON)
{
}

GUI(COMMON)
{
  ASSIGN(KEYWORD_STR, "*DATABASE_EXTENT_MPGS");

  RADIO(LSD_VTYPE) {
      ADD(0, "0: node");
      ADD(1, "1: brick");
      ADD(2, "2: beam");
      ADD(3, "3: shell");
      ADD(4, "4: thick shell");
  }

  if(LSD_VTYPE==0) {
    RADIO(LSD_COMP) {
      ADD(1, "1: x, y, z-displacements");
      ADD(2, "2: x, y, z-velocities");
      ADD(3, "3: x, y, z-accelerations");
    }
  } else if(LSD_VTYPE==1) {
    RADIO(LSD_COMP) {
      ADD(1, "1: x-stress");
      ADD(2, "2: y-stress");
      ADD(3, "3: z-stress");
      ADD(4, "4: xy-stress");
      ADD(5, "5: yz-stress");
      ADD(6, "6: zx-stress");
      ADD(7, "7: effective plastic strain");
    }
  } else if(LSD_VTYPE==3) {
    RADIO(LSD_COMP) {
      ADD(1, "1: mid-surface x-stress");
      ADD(2, "2: mid-surface y-stress");
      ADD(3, "3: mid-surface z-stress");
      ADD(4, "4: mid-surface xy-stress");
      ADD(5, "5: mid-surface yz-stress");
      ADD(6, "6: mid-surface xz-stress");
      ADD(7, "7: mid-surface effective plastic strain");
      ADD(8, "8: inner surface x-stress");
      ADD(9, "9: inner surface y-stress");
      ADD(10, "10: inner surface z-stress");
      ADD(11, "11: inner surface xy-stress");
      ADD(12, "12: inner surface yz-stress");
      ADD(13, "13: inner surface zx-stress");
      ADD(14, "14: inner surface effective plastic strain");
      ADD(15, "15: outer surface x-stress");
      ADD(16, "16: outer surface y-stress");
      ADD(17, "17: outer surface z-stress");
      ADD(18, "18: outer surface xy-stress");
      ADD(19, "19: outer surface yz-stress");
      ADD(20, "20: outer surface zx-stress");
      ADD(21, "21: outer surface effective plastic strain");
      ADD(22, "22: bending moment Mxx (4-node shell)");
      ADD(23, "23: bending moment Myy (4-node shell)");
      ADD(24, "24: bending moment Mxy (4-node shell)");
      ADD(25, "25: shear resultant Qxx (4-node shell)");
      ADD(26, "26: shear resultant Qyy (4-node shell)");
      ADD(27, "27: normal resultant Nxx (4-node shell)");
      ADD(28, "28: normal resultant Nyy (4-node shell)");
      ADD(29, "29: normal resultant Nxy (4-node shell)");
      ADD(30, "30: thickness (4-node shell)");
      ADD(31, "31: element dependent variable");
      ADD(32, "32: element dependent variable");
      ADD(33, "33: inner surface x-strain");
      ADD(34, "34: inner surface y-strain");
      ADD(35, "35: inner surface z-strain");
      ADD(36, "36: inner surface xy-strain");
      ADD(37, "37: inner surface yz-strain");
      ADD(38, "38: inner surface zx-strain");
      ADD(39, "39: outer surface x-strain");
      ADD(40, "40: outer surface y-strain");
      ADD(41, "41: outer surface z-strain");
      ADD(42, "42: outer surface xy-strain");
      ADD(43, "43: outer surface yz-strain");
      ADD(44, "44: outer surface zx-strain");
      ADD(45, "45: internal energy");
      ADD(46, "46: mid-surface effective stress");
      ADD(47, "47: inner surface effective stress");
      ADD(48, "48: outer surface effective stress");
      ADD(49, "49: mid-surface max. principal strain");
      ADD(50, "50: through thickness strain");
      ADD(51, "51: mid-surface min. principal strain");
      ADD(52, "52: lower surface effective strain");
      ADD(53, "53: lower surface max. principal strain");
      ADD(54, "54: through thickness strain");
      ADD(55, "55: lower surface min. principal strain");
      ADD(56, "56: lower surface effective strain");
      ADD(57, "57: upper surface max. principal strain");
      ADD(58, "58: through thickness strain");
      ADD(59, "59: upper surface min. principal strain");
      ADD(60, "60: upper surface effective strain");
    }
  }
}

// File format
FORMAT(Keyword971_R6.1)
{
  ASSIGN(IO_FLAG,1,IMPORT);
  ASSIGN(IO_FLAG,0,EXPORT);

  HEADER("*DATABASE_EXTENT_MPGS");
  
  if(IO_FLAG == 1) {
    CARD_PREREAD("%10d",LSD_VTYPE);
  }
  
  if(LSD_VTYPE<2 || LSD_VTYPE==3) {
    COMMENT("$    VTYPE      COMP");
    CARD("%10d%10d",LSD_VTYPE,LSD_COMP);
  } else {
    COMMENT("$    VTYPE");
    CARD("%10d",LSD_VTYPE);
  }
}
