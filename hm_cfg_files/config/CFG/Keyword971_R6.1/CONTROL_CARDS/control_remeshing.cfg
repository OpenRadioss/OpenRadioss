//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- control_remeshing.cfg ---
//		Contro_Card	remeshing	2008	6.1
//		 03/04/2020

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES
    LSD_RMIN                                = VALUE(FLOAT,  "Minimum edge length for the surface mesh surrounding the parts which should be remeshed");
    LSD_RMAX                                = VALUE(FLOAT,  "Maximum edge length for the surface mesh surrounding the parts which should be remeshed");
    LSD_VFLOSS                              = VALUE(FLOAT,  "Volume fraction loss required in a type 13 solid elements to trigger a remesh");
    LSD_MFRAC                               = VALUE(FLOAT,  "Mass ratio gain during mass scaling required for triggering a remesh");
    LSD_TSMIN                               = VALUE(FLOAT,  "Time step size required for triggering a remesh");
    LSD_ICURV                               = VALUE(INT,  "Define number of element along the radius in the adaptivity");
    LSD_IADP10                              = VALUE(INT,  "Not used");
    LSD_SEGANG                              = VALUE(FLOAT,  "Define angular mesh size in 3-D axisymmetric remeshing");
    
    //Card 2
    LSD_IVT                                 = VALUE(INT,  "Internal variable transfer in adaptive EFG");
    LSD_IAT                                 = VALUE(INT,  "Interactive adaptivity");
    LSD_IAAT                                = VALUE(INT,  "Interactive adaptivity adjustable tolerance");

    //Card 3
    LSD_IAT1                                = VALUE(FLOAT,  "Define the tolerance of shear distortion indicator for interactive adaptivity");
    LSD_IAT2                                = VALUE(FLOAT,  "Define the tolerance of unbalanced nodal distribution indicator for interactive adaptivity");
    LSD_IAT3                                = VALUE(FLOAT,  "Define the tolerance of volumetric change indicator for interactive adaptivity");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    IOFLAG                                  = VALUE(INT,"");
    _opt                                    = VALUE(STRING,"-1");
    Option1                                 = VALUE(INT,  "EFG");
            
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    LSD_IAAT                                = 979;
    LSD_IADP10                              = 975;
    LSD_IAT                                 = 978;
    LSD_IAT1                                = 980;
    LSD_IAT2                                = 981;
    LSD_IAT3                                = 982;
    LSD_ICURV                               = 983;
    LSD_IVT                                 = 977;
    LSD_MFRAC                               = 2012;
    LSD_RMAX                                = 2010;
    LSD_RMIN                                = 2009;
    LSD_SEGANG                              = 976;
    LSD_TSMIN                               = 2061;
    LSD_VFLOSS                              = 2011;
    Option1                                 = 686; //Option EFG
    IOFLAG                                  = -1;
    _opt                                    = -1;
}

DEFAULTS(COMMON)
{
    //CARD 1
    LSD_VFLOSS    = 1.0;
    LSD_MFRAC    = 0.0;
    LSD_TSMIN    = 0.0;
    LSD_ICURV    = 4;
    LSD_IADP10  = 0;
    LSD_SEGANG  = 0.0;
    //CARD 2
    LSD_IVT    = 1;
    LSD_IAT = 0;
    LSD_IAAT=    0;
    //CARD 3
    LSD_IAT1    = 1.0E+20;
    LSD_IAT2    = 1.0E+20;
    LSD_IAT3    = 1.0E+20;

}

GUI(COMMON)
{
    FLAG(Option1);
    if (Option1 == 0)
    {
        ASSIGN(KEYWORD_STR,"*CONTROL_REMESHING");
    }
    else
    {
        ASSIGN(KEYWORD_STR,"*CONTROL_REMESHING_EFG");
    }
    SCALAR(LSD_RMIN, "RMIN")        {DIMENSION="l";}
    SCALAR(LSD_RMAX, "RMAX")        {DIMENSION="l";}
    SCALAR(LSD_VFLOSS, "VF_LOSS")   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MFRAC, "MFRAC")      {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_TSMIN, "DT_MIN")     {DIMENSION="t";}
    SCALAR(LSD_ICURV, "ICURV")      {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_IADP10, "IADP10")    {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_SEGANG, "SEGANG")    {DIMENSION="DIMENSIONLESS";}

    if(Option1 == 1)
    {
        RADIO(LSD_IVT, "IVT")
        {
            ADD(1, "1: Moving Least square approximation with Kronecker-delta property (recommended in general case)");
            ADD(-1, "-1: Moving Least square approximation without Kronecker-delta property");
            ADD(2, "2: Partition of unity approximation with Kronecker-delta property");
            ADD(-2, "-2: Partition of unity approximation without Kronecker-delta property");
        }
        RADIO(LSD_IAT, "IAT")
        {
            ADD(0, "0: No interactive adaptivity");
            ADD(1, "1: Interactive adaptivity combined with predefined adaptivity");
            ADD(2, "2: Purely interactive adaptivity. The time interval between two successive adaptive steps is bounded by ADPFREQ");
            ADD(3, "3: Purely interactive adaptivity");
        }
        RADIO(LSD_IAAT, "IAAT")
        {
            ADD(0, "0: The tolerance to trigger interactive adaptivity is not adjusted");
            ADD(1, "1: The tolerance is adjusted in run-time to avoid over-activation");
        }
        SCALAR(LSD_IAT1, "IAT1")    {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_IAT2, "IAT2")   {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_IAT3, "IAT3")   {DIMENSION="DIMENSIONLESS";}  
    }

}

// File format
FORMAT(Keyword971_R6.1) 
{
    ASSIGN(IOFLAG,1,IMPORT);
    ASSIGN(IOFLAG,0,EXPORT);
    if (IOFLAG == 1)
    {
        HEADER("*CONTROL_REMESHING%s", _opt);
    }
    if(IOFLAG == 0 && Option1 == 0)
    {
        HEADER("*CONTROL_REMESHING");
        COMMENT("$     RMIN      RMAX   VF_LOSS     MFRAC    DT_MIN     ICURV    IADP10    SEGANG");
        CARD("%10lg%10lg%10lg%10lg%10lg%10d%10d%10lg",LSD_RMIN,LSD_RMAX,LSD_VFLOSS,LSD_MFRAC,LSD_TSMIN,LSD_ICURV,LSD_IADP10,LSD_SEGANG);
    } else if (IOFLAG == 0 && Option1 == 1)
    {
        HEADER("*CONTROL_REMESHING_EFG");
        COMMENT("$     RMIN      RMAX   VF_LOSS     MFRAC    DT_MIN     ICURV    IADP10    SEGANG");
        CARD("%10lg%10lg%10lg%10lg%10lg%10d%10d%10lg",LSD_RMIN,LSD_RMAX,LSD_VFLOSS,LSD_MFRAC,LSD_TSMIN,LSD_ICURV,LSD_IADP10,LSD_SEGANG);
        COMMENT("$      IVT       IAT      IAAT");
        CARD("%10d%10d%10d",LSD_IVT,LSD_IAT,LSD_IAAT);
        COMMENT("$     IAT1      IAT2      IAT3");
        CARD("%10lg%10lg%10lg",LSD_IAT1,LSD_IAT2,LSD_IAT3);
    } else if (IOFLAG == 1 && _opt == "")
    {
        ASSIGN(Option1, 0, IMPORT);
        CARD("%10lg%10lg%10lg%10lg%10lg%10d%10d%10lg",LSD_RMIN,LSD_RMAX,LSD_VFLOSS,LSD_MFRAC,LSD_TSMIN,LSD_ICURV,LSD_IADP10,LSD_SEGANG);
    } else if (IOFLAG == 1 && _opt != "")
    {
        ASSIGN(Option1, 1, IMPORT);
        CARD("%10lg%10lg%10lg%10lg%10lg%10d%10d%10lg",LSD_RMIN,LSD_RMAX,LSD_VFLOSS,LSD_MFRAC,LSD_TSMIN,LSD_ICURV,LSD_IADP10,LSD_SEGANG);
        CARD("%10d%10d%10d",LSD_IVT,LSD_IAT,LSD_IAAT);
        CARD("%10lg%10lg%10lg",LSD_IAT1,LSD_IAT2,LSD_IAT3);
    }
}