//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//DEFINE_CONTACT_CONTROL
//

// 
// ContactControl should mirror the structure defined in:
// '../../../../defaults/ls-dyna971/domain/tree_hierarchy_domain.cfg'
//

ATTRIBUTES(COMMON) {
    // 
    // The following generic (non type-specific) variables are not user-modifiable
    //

    discretization                          = VALUE(STRING, "Discretization");
    staticfrictioncoefficient               = VALUE(FLOAT, "FS", "Static Friction Coefficient");
    initialpenetrations                     = VALUE(INT, "IGNORE", "Allow Initial Penetrations");
    solverkword                             = VALUE(STRING, "Solver Keyword");

    //
    // The following type-specific variables are user-modifiable
    //

    // *CONTACT_AUTOMATIC_SURFACE_TO_SURFACE
    // *CONTACT_AUTOMATIC_NODES_TO_SURFACE
    // *CONSTRAINT_SURFACE_TO_SURFACE
    // *CONSTRAINT_NODES_TO_SURFACE
    sst                                     = VALUE(FLOAT, "SST");
    mst                                     = VALUE(FLOAT, "MST");
}

DEFAULTS(COMMON)
{
    // 
    // The following generic (non type-specific) variables are not user-modifiable
    //

    discretization                          = "Surface To Surface";
    staticfrictioncoefficient               = 1.0;
    initialpenetrations                     = 1;
    solverkword                             = "AUTOMATIC_SURFACE_TO_SURFACE";

    //
    // The following type-specific variables are user-modifiable
    //

    // *CONTACT_AUTOMATIC_SURFACE_TO_SURFACE
    // *CONTACT_AUTOMATIC_NODES_TO_SURFACE
    // *CONSTRAINT_SURFACE_TO_SURFACE
    // *CONSTRAINT_NODES_TO_SURFACE
    sst                                     = 0.0;
    mst                                     = 0.0;
}

GUI(COMMON)
{
    // 
    // The following generic (non type-specific) variables are not user-modifiable
    //

    SEPARATOR("Generic");

    RADIO(discretization)
    {
        ADD("Nodes To Surface", "Nodes To Surface");
        ADD("Rigid To Rigid", "Rigid To Rigid");
        ADD("Surface To Surface", "Surface To Surface");
    }

    SCALAR(staticfrictioncoefficient);

    RADIO(initialpenetrations)
    {
        ADD(0, "Remove Initial Penetrations");
        ADD(1, "Allow Initial Penetrations");
    }

    SEPARATOR("");

    SEPARATOR("Solver Specific");

    //
    // The following type-specific variables are user-modifiable
    //

    if(discretization == "Surface To Surface")
    {
        RADIO(solverkword)
        {
            ADD("AUTOMATIC_ONE_WAY_SURFACE_TO_SURFACE", "AUTOMATIC_ONE_WAY_SURFACE_TO_SURFACE");
            ADD("AUTOMATIC_SURFACE_TO_SURFACE", "AUTOMATIC_SURFACE_TO_SURFACE");
            ADD("CONSTRAINT_SURFACE_TO_SURFACE", "CONSTRAINT_SURFACE_TO_SURFACE");
            ADD("ERODING_SURFACE_TO_SURFACE", "ERODING_SURFACE_TO_SURFACE");
            ADD("ONE_WAY_SURFACE_TO_SURFACE", "ONE_WAY_SURFACE_TO_SURFACE");
            ADD("SURFACE_TO_SURFACE", "SURFACE_TO_SURFACE");
        }

        if((solverkword == "AUTOMATIC_SURFACE_TO_SURFACE") ||
           (solverkword == "CONSTRAINT_SURFACE_TO_SURFACE"))
        {
            SCALAR(sst);

            SCALAR(mst);
        }
    }
    else if(discretization == "Nodes To Surface")
    {
        RADIO(solverkword)
        {
            ADD("AUTOMATIC_NODES_TO_SURFACE", "AUTOMATIC_NODES_TO_SURFACE");
            ADD("CONSTRAINT_NODES_TO_SURFACE", "CONSTRAINT_NODES_TO_SURFACE");
            ADD("ERODING_NODES_TO_SURFACE", "ERODING_NODES_TO_SURFACE");
            ADD("NODES_TO_SURFACE", "NODES_TO_SURFACE");
            ADD("NODES_TO_SURFACE_INTERFERENCE", "NODES_TO_SURFACE_INTERFERENCE");
        }

        if((solverkword == "AUTOMATIC_NODES_TO_SURFACE") ||
           (solverkword == "CONSTRAINT_NODES_TO_SURFACE"))
        {
            SCALAR(sst);

            SCALAR(mst);
        }
    }
    else if(discretization == "Rigid To Rigid")
    {
        RADIO(solverkword)
        {
            ADD("RIGID_BODY_ONE_WAY_TO_RIGID_BODY", "RIGID_BODY_ONE_WAY_TO_RIGID_BODY");
            ADD("RIGID_BODY_TWO_WAY_TO_RIGID_BODY", "RIGID_BODY_TWO_WAY_TO_RIGID_BODY");
            ADD("RIGID_NODES_TO_RIGID_BODY", "RIGID_NODES_TO_RIGID_BODY");
            ADD("RIGID_SURFACE", "RIGID_SURFACE");
        }
    }

    SEPARATOR("");
}
