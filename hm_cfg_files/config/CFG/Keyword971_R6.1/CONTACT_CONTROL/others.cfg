//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//DEFINE_CONTACT_CONTROL
//

// 
// ContactControl should mirror the structure defined in:
// '../../../../defaults/ls-dyna971/domain/tree_hierarchy_domain.cfg'
//

ATTRIBUTES(COMMON) {
    // 
    // The following generic (non type-specific) variables are not user-modifiable
    //

    discretization                          = VALUE(STRING, "Discretization");
    staticfrictioncoefficient               = VALUE(FLOAT, "FS", "Static Friction Coefficient");
    initialpenetrations                     = VALUE(INT, "IGNORE", "Allow Initial Penetrations");
    solverkword                             = VALUE(STRING, "Solver Keyword");

    //
    // The following type-specific variables are user-modifiable
    //
}

DEFAULTS(COMMON)
{
    // 
    // The following generic (non type-specific) variables are not user-modifiable
    //

    discretization                          = "Others";
    staticfrictioncoefficient               = 1.0;
    initialpenetrations                     = 1;
    solverkword                             = "SLIDING_ONLY";

    //
    // The following type-specific variables are user-modifiable
    //
}

GUI(COMMON)
{
    // 
    // The following generic (non type-specific) variables are not user-modifiable
    //

    SEPARATOR("Generic");

    RADIO(discretization)
    {
        ADD("Nodes To Surface", "Nodes To Surface");
        ADD("Surface To Surface", "Surface To Surface");
    }

    SCALAR(staticfrictioncoefficient);

    RADIO(initialpenetrations)
    {
        ADD(0, "Remove Initial Penetrations");
        ADD(1, "Allow Initial Penetrations");
    }

    SEPARATOR("");

    SEPARATOR("Solver Specific");

    //
    // The following type-specific variables are user-modifiable
    //

    RADIO(solverkword)
    {
        ADD("2D_AUTOMATIC_SURFACE_TO_SURFACE_TITLE", "2D_AUTOMATIC_SURFACE_TO_SURFACE_TITLE");
        ADD("2D_AUTOMATIC_TIED_TITLE", "2D_AUTOMATIC_TIED_TITLE");
        ADD("AUTO_MOVE", "AUTO_MOVE");
        ADD("AUTOMATIC_BEAMS_TO_SURFACE", "AUTOMATIC_BEAMS_TO_SURFACE");
        ADD("FORCE_TRANSDUCER_CONSTRAINT", "FORCE_TRANSDUCER_CONSTRAINT");
        ADD("FORCE_TRANSDUCER_PENALTY", "FORCE_TRANSDUCER_PENALTY");
        ADD("GUIDED_CABLE", "GUIDED_CABLE");
        ADD("SINGLE_EDGE", "SINGLE_EDGE");
        ADD("SLIDING_ONLY", "SLIDING_ONLY");
        ADD("TIEBREAK_NODES_ONLY", "TIEBREAK_NODES_ONLY");
    }

    SEPARATOR("");
}
