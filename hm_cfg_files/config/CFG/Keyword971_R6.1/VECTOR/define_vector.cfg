//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//DEFINE_VECTOR
//

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES
    magnitude                               = VALUE(FLOAT, "");
    components                              = VALUE(NODE, "x-y-z values of orientation vector");
    tail_node                               = VALUE(NODE, "tail node of orientation vector");
    head_node                               = VALUE(NODE, "head node of orientation vector");
    xcomp                                   = VALUE(FLOAT, "x-value of orientation vector");
    ycomp                                   = VALUE(FLOAT, "y-value of orientation vector");
    zcomp                                   = VALUE(FLOAT, "z-value of orientation vector");
    basenode                                = VALUE(NODE, "");
        x                                   = VALUE(FLOAT, "x-coordinate of tail of vector");
        y                                   = VALUE(FLOAT, "y-coordinate of tail of vector");
        z                                   = VALUE(FLOAT, "z-coordinate of tail of vector");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    LSD_TitleOpt                            = VALUE(INT,  "");

    XH                                      = VALUE(FLOAT, "x-coordinate of head of vector");
    YH                                      = VALUE(FLOAT, "y-coordinate of head of vector");
    ZH                                      = VALUE(FLOAT, "z-coordinate of head of vector");
    LSD_CID                                 = VALUE(SYSTEM, "Coordinate system ID to define vector in local coordinate system");

   
    Elem_option                             = VALUE(INT, "Vector option");
    OPTION                                  = VALUE(STRING,"Vector option string");
    IOFLAG                                  = VALUE(INT, "");
    TITLE                                   = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //HM INTERNAL
    KEYWORD_STR                             = 9000;
    LSD_TitleOpt                            = 90;

    XH                                      = -1;
    YH                                      = -1;
    ZH                                      = -1;
    LSD_CID                                 = 412;
    tail_node                               = -1;
    head_node                               = -1;

    OPTION                                    = -1;
    IOFLAG                                  = -1;
    TITLE                                   = -1;
}

// GUI(COMMON) {

//   RADIO(Elem_option)
//   {
//      ADD(1, "SD_ORIENTATION");
//      ADD(2, "VECTOR");
//      ADD(3, "VECTOR_NODES");
//   }
//   if(Elem_option == 2)
//   {
//   /*
// 	POINT(XT,YT,ZT,"[XT YT ZT] Coordinates of tail")
// 	{
// 		DIMENSION="l";
// 	}
// 	POINT(XH,YH,ZH,"[XH YH ZH] Coordinates of head")
// 	{
// 		DIMENSION="l";
// 		TYPE=RELATIVE;
// 	}

//        SCALAR(XT);
//        SCALAR(YT);
//        SCALAR(ZT);
//        SCALAR(XH);
//        SCALAR(YH);
//        SCALAR(ZH);


//        //ARRAY(3,"Coordinate of tail of vector") {
//        //  SCALAR(points);
//        //}

//        //ARRAY(3,"Coordinate of head of vector") {
//        //  SCALAR(points);
//        //}

//        SCALAR(unit[0]);
//        SCALAR(unit[1]);
//        SCALAR(unit[2]);

//        SCALAR(dist[0]);
//        SCALAR(dist[1]);
//        SCALAR(dist[2]);
//    */

//        optional:
//        SCALAR(CID);
//   }
// }


// File format
FORMAT(Keyword971_R6.1)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0 && Elem_option == 0)
    {
        if(LSD_TitleOpt == 0)
        {
            HEADER("*DEFINE_VECTOR");
        }
        else
        {
            HEADER("*DEFINE_VECTOR_TITLE");
        }
    }
    else if(IOFLAG == 0 && Elem_option == 1)
    {
        if(LSD_TitleOpt == 0)
        {
            HEADER("*DEFINE_VECTOR_NODES");
        }
        else
        {
            HEADER("*DEFINE_VECTOR_NODES_TITLE");
        }
    }
    else //IMPORT
    {
        HEADER("*DEFINE_VECTOR%s", OPTION);

        ASSIGN(LSD_TitleOpt,_FIND(OPTION, "_TITLE"), IMPORT);
        ASSIGN(Elem_option,_FIND(OPTION, "_NODES"), IMPORT);
    }

    if(IOFLAG == 1 && LSD_TitleOpt == 1)
    {
        CARD("%-80s",TITLE);
    }



    if(Elem_option == 0)
    {
      ASSIGN(XH, x + magnitude * xcomp);
      ASSIGN(YH, y + magnitude * ycomp);
      ASSIGN(ZH, z + magnitude * zcomp);
      //Card
      COMMENT("$      VID        XT        YT        ZT        XH        YH        ZH       CID");
      CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10d",_ID_, x, y, z, XH, YH, ZH, LSD_CID); 
    } 
    else if(Elem_option == 1)
    {
      //Card
      COMMENT("$      VID     NODET     NODEH");
      CARD("%10d%10d%10d",_ID_,tail_node,head_node);
    }
}
