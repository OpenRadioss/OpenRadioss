//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// LOAD_NODE_POINT
//

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES
    //Card 1
    entityid                                = VALUE(MULTIOBJECT, "Node ID or nodal set ID (NSID)") { SUBTYPES = ( /NODE , /SETS/SET_NODE_IDPOOL ); }
    LSD_DOFX                                = VALUE(INT,   "Applicable degrees-of-freedom");
    LSD_LCID                                = VALUE(CURVE, "Load curve ID");
    LSD_SF                                  = VALUE(FLOAT, "Load curve scale factor");
    LSD_SYSTEM                              = VALUE(SYSTEM, "Coordinate system ID");
    LSD_NODE1                               = VALUE(NODE,   "Node 1 ID");
    LSD_NODE2                               = VALUE(NODE,   "Node 2 ID");
    LSD_NODE3                               = VALUE(NODE,   "Node 3 ID");
    
    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    FollwrForce                             = VALUE(INT,    "FollwrForce");
    FollwrMoment                            = VALUE(INT,    "FollwrMoment");

    IOFLAG                                  = VALUE(INT,    "IOFLAG");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES

    //Card 1
    LSD_DOFX                                = 3128;
    LSD_LCID                                = 45;
    LSD_SF                                  = 714;
    LSD_SYSTEM                              = 184;
    LSD_NODE1                               = 86;
    LSD_NODE2                               = 87;
    LSD_NODE3                               = 2802;

    //HM INTERNAL
    KEYWORD_STR                             = 9000;
    FollwrForce                             = 4172;
    FollwrMoment                            = 4173;

    IOFLAG                                  = -1;
}

DEFAULTS(COMMON)
{
    LSD_SF                                  = 1.0;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*LOAD_NODE_POINT");

    RADIO(LSD_DOFX, "DOF")
    {
        ADD(1, "x-direction of load action");
        ADD(2, "y-direction of load action");
        ADD(3, "z-direction of load action");
        ADD(4, "Follower force");
        ADD(5, "Moment about the x-axis");
        ADD(6, "Moment about the y-axis");
        ADD(7, "Moment about the z-axis");
        ADD(8, "Follower moment");
    }

    if(LSD_DOFX <= 4)
    {
        FLAG(FollwrForce, "FollwrForce");
        DATA(entityid, "NID/NSID");
        SCALAR(LSD_DOFX, "DOF") {DIMENSION="DIMENSIONLESS";}
        DATA(LSD_LCID, "LCID");
        SCALAR(LSD_SF, "SF") { DIMENSION="DIMENSIONLESS"; }
        DATA(LSD_SYSTEM, "CID");
    }

    if(LSD_DOFX <= 4 && FollwrForce == 1)
    {
        DATA(LSD_NODE1, "M1");
        DATA(LSD_NODE2, "M2");
        DATA(LSD_NODE3, "M3");
    }

    if(LSD_DOFX >= 5)
    {
        FLAG(FollwrMoment);

        DATA(LSD_LCID, "LCID");
        SCALAR(LSD_SF, "SF") { DIMENSION="DIMENSIONLESS"; }
        DATA(LSD_SYSTEM, "CID");
    }

    if(LSD_DOFX >= 5 && FollwrMoment == 1)
    {
        DATA(LSD_NODE1, "M1");
        DATA(LSD_NODE2, "M2");
        DATA(LSD_NODE3, "M3");
    }
}

// File format
FORMAT(Keyword971_R6.1)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    HEADER("*LOAD_NODE_POINT");

    if(IOFLAG == 0)
    {
        if(LSD_DOFX == 4 || LSD_DOFX == 8)
        {
            COMMENT("$     NODE       DOF      LCID        SF       CID        M1        M2        M3");
            CARD("%10d%10d%10d%10lg%10d%10d%10d%10d", entityid, LSD_DOFX, LSD_LCID, LSD_SF, LSD_SYSTEM, LSD_NODE1, LSD_NODE2, LSD_NODE3);
        }
        else
        {
            COMMENT("$     NODE       DOF      LCID        SF       CID");
            CARD("%10d%10d%10d%10lg%10d", entityid, LSD_DOFX, LSD_LCID, LSD_SF, LSD_SYSTEM);
        }
    }
    else //IMPORT
    {
        CARD_PREREAD("%10s%10d", _BLANK_, LSD_DOFX);

        if(LSD_DOFX == 4 || LSD_DOFX == 8)
        {
            COMMENT("$NODE/NSID       DOF      LCID        SF       CID        M1        M2        M3");
            CARD("%10d%10d%10d%10lg%10d%10d%10d%10d", entityid, LSD_DOFX, LSD_LCID, LSD_SF, LSD_SYSTEM, LSD_NODE1, LSD_NODE2, LSD_NODE3);

            if(LSD_DOFX == 4)
            {
                ASSIGN(FollwrForce,  1, IMPORT);
                ASSIGN(FollwrMoment, 0, IMPORT);
            }
            else //LSD_DOFX==8
            {
                ASSIGN(FollwrForce,  0, IMPORT);
                ASSIGN(FollwrMoment, 1, IMPORT);
            }
        }
        else
        {
            COMMENT("$NODE/NSID       DOF      LCID        SF       CID");
            CARD("%10d%10d%10d%10lg%10d", entityid, LSD_DOFX, LSD_LCID, LSD_SF, LSD_SYSTEM);

            ASSIGN(FollwrForce,  0, IMPORT);
            ASSIGN(FollwrMoment, 0, IMPORT);
        }
    }
}
