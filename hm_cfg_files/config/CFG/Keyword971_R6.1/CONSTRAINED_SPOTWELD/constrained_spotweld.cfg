//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//CONSTRAINED_SPOTWELD
//

ATTRIBUTES(COMMON)
{
    // INPUT ATTRIBUTES

    //Card 1
    node1               = VALUE(NODE,  "Node ID");
    node2               = VALUE(NODE,  "Node ID");

    LSD_SN              = VALUE(FLOAT, "Normal force at spot weld failure");
    LSD_SS              = VALUE(FLOAT, "Shear force at spot weld failure");
    LSD_NORMAL          = VALUE(FLOAT, "Exponent for normal spot weld force");
    LSD_SHEAR           = VALUE(FLOAT, "Exponent for shear spot weld force");
    LSDYNA_TF           = VALUE(FLOAT, "Failure time for nodal constraint set");
    LSDYNA_EP           = VALUE(FLOAT, "Effective plastic strain at failure");
    LSD_NF              = VALUE(INT,   "Number of force vectors stored for filtering");
    LSD_TW              = VALUE(FLOAT, "Time window for filtering");

    // HM INTERNAL
    KEYWORD_STR         = VALUE(STRING, "Solver Keyword");
    LSD_TitleOpt        = VALUE(INT,    "TitleOption"); // this doesn't work with the tool. Use keyword_name
    filteredForceOpt    = VALUE(INT,    "Time filtered force calculation");


    IOFLAG              = VALUE(INT,    "Import/Export flag");
    _opt                = VALUE(STRING, "_opt");
    _dummy_id           = VALUE(INT,    "_dummy_id");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES

    //Card 1
    LSD_SN             = 420;
    LSD_SS             = 421;
    LSD_NORMAL         = 422;
    LSD_SHEAR          = 423;
    LSDYNA_TF          = 2734;
    LSDYNA_EP          = 2735;
    LSD_NF             = 5294;
    LSD_TW             = 1641;

    //HM INTERNAL
    KEYWORD_STR        = 9000;
    LSD_TitleOpt       = 90; // this doesn't work with the tool. Use keyword_name
    filteredForceOpt   = 5295;

    IOFLAG             = -1;
    _opt               = -1;
    _dummy_id          = -1;
}

DEFAULTS(COMMON)
{
    LSDYNA_TF         = 1.0E+20;
    LSDYNA_EP         = 1.0E+20;
}

GUI(COMMON)
{
    FLAG(LSD_TitleOpt,"ID");
    FLAG(filteredForceOpt,"FilteredForce");

    if(filteredForceOpt == 1 && LSD_TitleOpt == 1)
    {
        ASSIGN(KEYWORD_STR, "*CONSTRAINED_SPOTWELD_FILTERED_FORCE_ID");
    }
    else if(filteredForceOpt == 1 && LSD_TitleOpt == 0)
    {
        ASSIGN(KEYWORD_STR,"*CONSTRAINED_SPOTWELD_FILTERED_FORCE");
    }
    else if(filteredForceOpt == 0 && LSD_TitleOpt == 1)
    {
        ASSIGN(KEYWORD_STR,"*CONSTRAINED_SPOTWELD_ID");
    }
    else
    {
        ASSIGN(KEYWORD_STR,"*CONSTRAINED_SPOTWELD");
    }

    mandatory:
    DATA(node1, "N1");
    DATA(node2, "N2");

    optional:
    SCALAR(LSD_SN, "SN")                { DIMENSION = "force"; }
    SCALAR(LSD_SS, "SS")                { DIMENSION = "force"; }
    SCALAR(LSD_NORMAL, "N")             { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(LSD_SHEAR, "M")              { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(LSDYNA_TF, "TF")             { DIMENSION = "t"; }
    SCALAR(LSDYNA_EP, "EP")             { DIMENSION = "DIMENSIONLESS"; }

    if(filteredForceOpt == 1)
    {
        SCALAR(LSD_NF, "NF")            { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(LSD_TW, "TW")            { DIMENSION = "t"; }
    }
}


FORMAT(Keyword971_R6.1)
 {
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        ASSIGN(KEYWORD_STR, *CONSTRAINED_SPOTWELD, EXPORT);

        ASSIGN(_opt, , EXPORT);
        if(filteredForceOpt == 1)
        {
            ASSIGN(_opt, _COMBINE(_opt, "_FILTERED_FORCE"), EXPORT);
        }
        if(LSD_TitleOpt != 0)
        {
            ASSIGN(_opt, _COMBINE(_opt, "_ID"), EXPORT);
        }

        ASSIGN(KEYWORD_STR, _COMBINE(KEYWORD_STR, _opt), EXPORT);

        CARD("%-s", KEYWORD_STR);
    }
    else //IMPORT
    {
        HEADER("*CONSTRAINED_SPOTWELD%-30s", _opt);
        
        ASSIGN(filteredForceOpt, _FIND(_opt, "_FILTERED_FORCE"), IMPORT);

        ASSIGN(_dummy_id, _FIND(_opt, "_ID"), IMPORT); //??? why, if not tested?
        if (_dummy_id == 1)
        {
            ASSIGN(LSD_TitleOpt,1,IMPORT);
        }
        else
        {
            ASSIGN(LSD_TitleOpt,0,IMPORT);
        }
    }

    //ID Card
    if(IOFLAG == 0 && LSD_TitleOpt == 1)
    {
        COMMENT("$      WID");
        CARD("%10d", _ID_);
    }

    //Card 1
    COMMENT("$       N1        N2        SN        SS         N         M        TF        EP");
    CARD("%10d%10d%10lg%10lg%10lg%10lg%10lg%10lg", node1, node2, LSD_SN, LSD_SS, LSD_NORMAL, LSD_SHEAR, LSDYNA_TF, LSDYNA_EP);

    //FILTERED_FORCE Card
    if (filteredForceOpt == 1)
    {
        COMMENT("$       NF        TW");
        CARD("%10d%10lg", LSD_NF, LSD_TW);
    }
    
}
