//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// rigidwall.cfg

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES

    //PLANAR Required:----------------------------------------------------------------------------------------------------------------------------------------

    //Card 1
    NodeSet_ID                              = VALUE(SETS,       "Nodal set ID containing secondary nodes")                         { SUBTYPES = (/SETS/SET_NODE_IDPOOL); }
    excludeNodeSet_ID                       = VALUE(SETS,       "Nodal set ID containing nodes that exempted as secondary nodes")  { SUBTYPES = (/SETS/SET_NODE_IDPOOL); }
    Block_ID                                = VALUE(BLOCK,      "If defined, only nodes in box are included as secondary nodes to rigid wall");
    birth                                   = VALUE(FLOAT,      "Birth time of rigid wall");
    death                                   = VALUE(FLOAT,      "Death time of rigid wall");
    offset                                  = VALUE(FLOAT,      "All nodes within a normal offset distance, OFFSET, to the rigid wall are included as secondary nodes for the rigid wall");
    rwksf                                   = VALUE(FLOAT,      "Stiffness scaling factor");

    //Card 2
    basenode                                = VALUE(NODE,       "x-y-z-coordinate of tail of normal vector n");
        x                                   = VALUE(FLOAT,      "x-coordinate of tail of normal vector n");
        y                                   = VALUE(FLOAT,      "y-coordinate of tail of normal vector n");
        z                                   = VALUE(FLOAT,      "z-coordinate of tail of normal vector n");
    XH                                      = VALUE(FLOAT,      "x-coordinate of head of normal vector n");
    YH                                      = VALUE(FLOAT,      "y-coordinate of head of normal vector n");
    ZH                                      = VALUE(FLOAT,      "z-coordinate of head of normal vector n");
    fric                                    = VALUE(FLOAT,      "Interface friction");

    wvel                                    = VALUE(FLOAT,      "Critical normal velocity at which nodes weld to wall (FRIC = 2 or 3)");

    // Optional Card A for ORTHO
    SfricA                                  = VALUE(FLOAT,      "Static friction coefficient in local a-direction, Micro_sa");
    SfricB                                  = VALUE(FLOAT,      "Static friction coefficient in local b-direction, Micro_sb");
    DfricA                                  = VALUE(FLOAT,      "Dynamic friction coefficient in local a-direction, Micro_ka");
    DfricB                                  = VALUE(FLOAT,      "Dynamic friction coefficient in local b-direction, Micro_kb");
    DecayA                                  = VALUE(FLOAT,      "Decay constant in local a-direction, d_va");
    DecayB                                  = VALUE(FLOAT,      "Decay constant in local b-direction, d_vb");

    // Optional Card B for ORTHO
    Node1                                   = VALUE(NODE,       "Node 1");
    Node2                                   = VALUE(NODE,       "Node 2");
    D1                                      = VALUE(FLOAT,      "d1, x-component of vector");
    D2                                      = VALUE(FLOAT,      "d2, y-component of vector");
    D3                                      = VALUE(FLOAT,      "d3, z-component of vector");

    // Optional Card C for FINITE
    XHev                                    = VALUE(FLOAT,      "X-coordinate of head of edge vector");
    YHev                                    = VALUE(FLOAT,      "Y-coordinate of head of edge vector l");
    ZHev                                    = VALUE(FLOAT,      "Z-coordinate of head of edge vector l");
    Length                                  = VALUE(FLOAT,      "Length of l edge");
    Width                                   = VALUE(FLOAT,      "Length of m edge");

    // Optional Card D for MOVING
    Mass                                    = VALUE(FLOAT,      "Total mass od rigidwall");
    initialvelocity                         = VALUE(FLOAT,      "Initial velocity of rigidwall in direction of defining vector, n");

    //Optional card E for FORCES
    SOFT                                    = VALUE(INT,        "Number of cycles to zero relative velocity to reduce force spike");
    ssid                                    = VALUE(SETS,       "Segment set identification number for defining areas for force output") { SUBTYPES = (/SETS/SET_SEGMENT_GENERAL_IDPOOL); }
    N1                                      = VALUE(NODE,       "Optional node 1 for visualization");
    N2                                      = VALUE(NODE,       "Optional node 2  for visualization");
    N3                                      = VALUE(NODE,       "Optional node 3 for visualization");
    N4                                      = VALUE(NODE,       "Optional node 4 for visualization");

//------------------------------------------------------------------------------------------------------------------------------------------------------------

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING,     "Solver Keyword");
    geometrytype                            = VALUE(INT,        "Geometry Type");
    MotionType                              = VALUE(INT,        "Motion Type");
    DisplayType                             = VALUE(INT,        "Display Type");
    OrhtoOption                             = VALUE(INT,        "Ortho Option");
    Force                                   = VALUE(INT,        "Force Option");
    DefineByVector                          = VALUE(INT,        "DefineByVector");

    IOFLAG                                  = VALUE(INT,        "IOFLAG");
    _dummy_keyword                          = VALUE(STRING,     "Keyword Option Export");
    TITLE                                   = VALUE(STRING,     "Title");
    _opt                                    = VALUE(STRING,     "Keyword Option Import");
    _shape                                  = VALUE(INT,        "Shape Option");
    LSD_TitleOpt                            = VALUE(INT,        "Title Option");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES

    //HM INTERNAL
    KEYWORD_STR                             = 9000;

    IOFLAG                                  = -1;
    _dummy_keyword                          = -1;
    TITLE                                   = -1;
    _opt                                    = -1;
    _shape                                  = -1;
    LSD_TitleOpt                            = 90;
}

CHECK(COMMON)
{
    fric                                    >= 0.0;
    Length                                  >= 0.0;
    Width                                   >= 0.0;
    offset                                  >= 0.0;
    Mass                                    >= 0.0;
    initialvelocity                         >= 0.0;
}

DEFAULTS(COMMON)
{
    //Card 1
    death                                   = 1.0e+20;

    //Card 2
    x                                       = 0.0;
    y                                       = 0.0;
    z                                       = 0.0;
    XH                                      = 0.0;
    YH                                      = 0.0;
    ZH                                      = 0.0;
    fric                                    = 0.0;

    // Optional Card C for FINITE
    XHev                                    = 0.0;
    YHev                                    = 0.0;
    ZHev                                    = 0.0;

    //Planar card 1
    offset                                  = 0.0;
    birth                                   = 0.0;
    death                                   = 10e+20;
    rwksf                                   = 1.0;

    //Planar card 2
    wvel                                    = 0.0;

    //Orthotropic
    SfricA                                  = 0.0;
    SfricB                                  = 0.0;
    DfricA                                  = 0.0;
    DfricB                                  = 0.0;
    DecayA                                  = 0.0;
    DecayB                                  = 0.0;
    D1                                      = 0.0;
    D2                                      = 0.0;
    D3                                      = 0.0;

    //Moving
    initialvelocity                         = 0.0;

    //Force
    SOFT                                    = 0;
}

GUI(COMMON)
{
    SCALAR(birth)                           { DIMENSION = "t"; }
    SCALAR(death)                           { DIMENSION = "t"; }
    SCALAR(XH)                              { DIMENSION = "l"; }
    SCALAR(YH)                              { DIMENSION = "l"; }
    SCALAR(ZH)                              { DIMENSION = "l"; }
    SCALAR(fric)                            { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(XHev)                            { DIMENSION = "l"; }
    SCALAR(YHev)                            { DIMENSION = "l"; }
    SCALAR(ZHev)                            { DIMENSION = "l"; }
    SCALAR(Length)                          { DIMENSION = "l"; }
    SCALAR(Width)                           { DIMENSION = "l"; }
    SCALAR(offset)                          { DIMENSION = "l"; }
    SCALAR(rwksf)                           { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(wvel)                            { DIMENSION = "velocity"; }
    SCALAR(SfricA)                          { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(SfricB)                          { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(DfricA)                          { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(DfricB)                          { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(DecayA)                          { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(DecayB)                          { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(D1)                              { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(D2)                              { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(D3)                              { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(Mass)                            { DIMENSION = "m"; }
    SCALAR(initialvelocity)                 { DIMENSION = "velocity"; }
    SCALAR(SOFT)                            { DIMENSION = "DIMENSIONLESS"; }
}

// File formal
FORMAT(Keyword971_R6.1)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        ASSIGN(KEYWORD_STR, *RIGIDWALL_PLANAR, EXPORT);

        if(OrhtoOption == 1 && MotionType == 0)
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_ORTHO"), EXPORT);
        }

        if(geometrytype == 2)                                                        //Finite Plane
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_FINITE"), EXPORT);
        }

        if(OrhtoOption == 0 && MotionType == 1)
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_MOVING"), EXPORT);
        }

        if(Force == 1)
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_FORCES"), EXPORT);
        }

        if(DisplayType == 1 && MotionType == 1)
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_DISPLAY"), EXPORT);
        }

        if(LSD_TitleOpt == 1)
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_ID"), EXPORT);
        }

        ASSIGN(KEYWORD_STR, _COMBINE(KEYWORD_STR, _dummy_keyword), EXPORT);
        CARD("%-s", KEYWORD_STR);
    }
    else  //IMPORT
    {
        HEADER("*RIGIDWALL_PLANAR%80s", _opt);

        ASSIGN(OrhtoOption, _FIND(_opt, "_ORTHO"), IMPORT);

        ASSIGN(MotionType, _FIND(_opt, "_MOVING"), IMPORT);

        ASSIGN(Force, _FIND(_opt, "_FORCES"), IMPORT);

        ASSIGN(DisplayType, _FIND(_opt, "_DISPLAY"), IMPORT);

        ASSIGN(LSD_TitleOpt, _FIND(_opt, "_ID"), IMPORT);
    }

    //ID Card
    if(IOFLAG == 0 && LSD_TitleOpt == 1)
    {
        COMMENT("$     RWIDHEADING                                                               ");
        CARD("%10d%-70s", _ID_, TITLE);
    }

    ASSIGN(_shape, _FIND(_opt, "_FINITE"), IMPORT);
    if(_shape != 1)
    {
        ASSIGN(geometrytype, 1, IMPORT);  //Infinite
    }
    else
    {
        ASSIGN(geometrytype, 2, IMPORT);  //Finite
    }

    //Card 1
    COMMENT("$     NSID    NSIDEX     BOXID    OFFSET     BIRTH     DEATH     RWKSF");
    CARD("%10d%10d%10d%10lg%10lg%10lg%10lg", NodeSet_ID, excludeNodeSet_ID, Block_ID, offset, birth, death, rwksf);

    CARD_PREREAD("%60s%10lg", _BLANK_, fric);
    if(fric == 2 || fric == 3)
    {
        //Card 2
        COMMENT("$       XT        YT        ZT        XH        YH        ZH      FRIC      WVEL");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg", x, y, z, XH, YH, ZH, fric, wvel);
    }
    else
    {
        //Card 2
        COMMENT("$       XT        YT        ZT        XH        YH        ZH      FRIC");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg", x, y, z, XH, YH, ZH, fric);
    }

    // Optional Cards for ORTHO keyword option
    if(OrhtoOption == 1)
    {
        COMMENT("$   SFRICA    SFRICB    DFRICA    DFRICB    DECAYA    DECAYB");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg", SfricA, SfricB, DfricA, DfricB, DecayA, DecayB);

        CARD_PREREAD("%20s%10lg%10lg%10lg", _BLANK_, D1, D2, D3);

        if(D1 != 0.0 || D2 != 0.0 || D3 != 0.0)
        {
            ASSIGN(DefineByVector, 1, IMPORT);

            COMMENT("$    NODE1     NODE2        D1        D2        D3");
            CARD("%10d%10d%10lg%10lg%10lg", Node1, Node2, D1, D2, D3);
        }
        else
        {
            ASSIGN(DefineByVector, 0, IMPORT);

            COMMENT("$    NODE1     NODE2");
            CARD("%10d%10d", Node1, Node2);
        }
    }

    // Additional card for FINITE keyword option
    if(geometrytype == 2)
    {
        COMMENT("$     XHEV      YHEV      ZHEV      LENL      LENM");
        CARD("%10lg%10lg%10lg%10lg%10lg", XHev, YHev, ZHev, Length, Width);
    }

    // Optional Cards for MOVING keyword option
    if(MotionType == 1)
    {
        COMMENT("$     MASS        V0");
        CARD("%10lg%10lg", Mass, initialvelocity);
    }

    // Additional card for FORCES keyword option
    if(Force == 1)
    {
        COMMENT("$     SOFT      SSID        N1        N2        N3        N4");
        CARD("%10d%10d%10d%10d%10d%10d", SOFT, ssid, N1, N2, N3, N4);
    }
}