//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 00
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    STYP                                    = VALUE(INT,  "Set Type");
    LSD_PID                                 = VALUE(COMPONENT,  "Part Id");
    LSD_PSID                                = VALUE(SETS,  "Part Set Id");
    LSD_NSID                                = VALUE(NODE,  "Node Set Id");
    OMEGA                                   = VALUE(FLOAT,  "Angular velocity about the rotational axis");
    LSD_VX                                  = VALUE(FLOAT,  "Initial translational velocity in x-direction");
    LSD_VY                                  = VALUE(FLOAT,  "Initial translational velocity in y-direction");
    LSD_VZ                                  = VALUE(FLOAT,  "Initial translational velocity in z-direction");
    LSD_IVATN                               = VALUE(INT,  "Flag for setting the initial velocities of secondary nodes and parts");
    LSD_ICID                                = VALUE(SYSTEM,  "Local coordinate system ID");
    LSD_XC                                  = VALUE(FLOAT,  "Global x-coordinate on rotational axis");
    LSD_YC                                  = VALUE(FLOAT,  "Global y-coordinate on rotational axis");
    LSD_ZC                                  = VALUE(FLOAT,  "Global z-coordinate on rotational axis");
    UseNodeOpt                              = VALUE(INT,  "Use Node");    
    LSD_NX                                  = VALUE(FLOAT,  "x-direction cosine");
    LSD_NY                                  = VALUE(FLOAT,  "y-direction cosine");
    LSD_NZ                                  = VALUE(FLOAT,  "z-direction cosine");
    LSD_NODE1                               = VALUE(NODE,  "1st node of the rotational axis");
    LSD_NODE2                               = VALUE(NODE,  "2nd node of the rotational axis");    
    PHASE                                   = VALUE(INT,  "Flag specifying phase of the analysis the velocities apply to");
    IRIGID                                  = VALUE(INT,  "Controls hierarchy of initial velocities set");
    /// HM INTERNAL

    _dummy                                  = VALUE(INT,"");
    _IO_FLAG                                = VALUE(INT,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
  
    LSD_PSID                                = 768;
    LSD_PID                                 = 149;
    LSD_NSID                                = 745;
    STYP                                    = 2788;
    OMEGA                                   = 2789;    
    LSD_VX                                  = 747;
    LSD_VY                                  = 748;
    LSD_VZ                                  = 749;
    LSD_IVATN                               = 893;
    LSD_ICID                                = 5867;
    LSD_XC                                  = 466;
    LSD_YC                                  = 467;
    LSD_ZC                                  = 468;    
    UseNodeOpt                              = 8631;    
    LSD_NX                                  = 2790;
    LSD_NY                                  = 2791;
    LSD_NZ                                  = 2792;    
    LSD_NODE1                               = 86;
    LSD_NODE2                               = 87;    
    PHASE                                   = 2793;
    IRIGID                                  = 4484;  

    ///HM_INTERNAL
    _IO_FLAG                                = -1;
    _dummy                                  = -1;

}

GUI(COMMON)
{

    ASSIGN(KEYWORD_STR,"INITIAL_VELOCITY_GENERATION");
    RADIO(STYP,"Set Type")
    {
    ADD(0,"0: Entire Model");
    ADD(1,"1: Part Set ID");
    ADD(2,"2: Part ID");
    ADD(3,"3: Node Set ID");
    }
    SEPARATOR("SET");
    // if(STYP == 0) 
    // {
    //     SCALAR(_ID_,"Model ID");
    // }
    if(STYP == 1) 
    {
        DATA(LSD_PSID);
    }
    if(STYP == 2)
    {
        DATA(LSD_PID);
    }
    if(STYP == 3)
    {
        DATA(LSD_NSID);
    }
    SEPARATOR("");
    SCALAR(OMEGA,"OMEGA");
    SCALAR(LSD_VX,"VX");
    SCALAR(LSD_VY,"VY");
    SCALAR(LSD_VZ,"VZ");
    RADIO(LSD_IVATN,"IVATN")
    {
        ADD(0,"0: secondary parts are ignored");
        ADD(1,"1: secondary parts and secondary nodes of the main parts will be assigned initial velocities like the main part");
    }
    DATA(LSD_ICID,"Local coordinate system ID");
    FLAG(UseNodeOpt,"Use node Option");    
    if(UseNodeOpt == 0)
    {
        SEPARATOR("Directions");
        SCALAR(LSD_NX,"NX");
        SCALAR(LSD_NY,"NY");
        SCALAR(LSD_NZ,"NZ");
        SEPARATOR("");
    } 
    else 
    {
        ASSIGN(LSD_NX,-999);
        DATA(LSD_NODE1,"NY");
        DATA(LSD_NODE2,"NZ");
    }
    RADIO(PHASE,"PHASE")
    {
        ADD(0,"0: Velocities are applied immediately");
        ADD(1,"1: Velocities are applied after reaching the start time");
    }
    RADIO(IRIGID,"IRIGID")
    {
        ADD(0,"0: *PART_INERTIA / *CONSTRAINED_NODAL_RIGID_BODY_INERTIA controls initial velocities");
        ADD(1,"1: *INITIAL_VELOCITY_GENERATION controls initial velocities");
    }


}

// !! Please refer manual and correct, if any, missing or wrongly generated format !!

// File format
FORMAT(Keyword971) 
{

    // HEADER("*INITIAL_VELOCITY_GENERATION");
    CARD_PREREAD("%10s%10d",_BLANK_,STYP);
    if(STYP == 0)
    {
        COMMENT("$       ID      STYP     OMEGA        VX        VY        VZ     IVATN      ICID");
        CARD("         0%10d%10lg%10lg%10lg%10lg%10d%10d",STYP,OMEGA,LSD_VX,LSD_VY,LSD_VZ,LSD_IVATN,LSD_ICID);
    } 
    else if(STYP == 1)
    {
        COMMENT("$     PSID      STYP     OMEGA        VX        VY        VZ     IVATN      ICID");
        CARD("%10d%10d%10lg%10lg%10lg%10lg%10d%10d",LSD_PSID,STYP,OMEGA,LSD_VX,LSD_VY,LSD_VZ,LSD_IVATN,LSD_ICID);
    } 
    else if(STYP == 2)
    {
        COMMENT("$      PID      STYP     OMEGA        VX        VY        VZ     IVATN      ICID");
        CARD("%10d%10d%10lg%10lg%10lg%10lg%10d%10d",LSD_PID,STYP,OMEGA,LSD_VX,LSD_VY,LSD_VZ,LSD_IVATN,LSD_ICID);
    }
    else if(STYP == 3)
    {
        COMMENT("$     NSID      STYP     OMEGA        VX        VY        VZ     IVATN      ICID");
        CARD("%10d%10d%10lg%10lg%10lg%10lg%10d%10d",LSD_NSID,STYP,OMEGA,LSD_VX,LSD_VY,LSD_VZ,LSD_IVATN,LSD_ICID);
    }

    CARD_PREREAD("%30s%10d",_BLANK_,_dummy);

    if(_dummy != -999)
    {
        ASSIGN(UseNodeOpt,0,IMPORT);
        if(STYP != 3)
        {
            COMMENT("$       XC        YC        ZC        NX        NY        NZ     PHASE    IRIGID");
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d%10d",LSD_XC,LSD_YC,LSD_ZC,LSD_NX,LSD_NY,LSD_NZ,PHASE,IRIGID);
        } 
        else
        {
            COMMENT("$       XC        YC        ZC        NX        NY        NZ     PHASE");
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d",LSD_XC,LSD_YC,LSD_ZC,LSD_NX,LSD_NY,LSD_NZ,PHASE);
        }

    } 
    else 
    {
        ASSIGN(UseNodeOpt,1,IMPORT);
        if(STYP != 3)
        {
            COMMENT("$       XC        YC        ZC        NX        NY        NZ     PHASE    IRIGID");
            CARD("%10lg%10lg%10lg%10d%10d%10d%10d%10d",LSD_XC,LSD_YC,LSD_ZC,_dummy,LSD_NODE1,LSD_NODE2,PHASE,IRIGID);
        }
        else
        {
            COMMENT("$       XC        YC        ZC        NX        NY        NZ     PHASE");
            CARD("%10lg%10lg%10lg%10d%10d%10d%10d",LSD_XC,LSD_YC,LSD_ZC,_dummy,LSD_NODE1,LSD_NODE2,PHASE);
        }

    }  

}
