//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// BOUNDARY_PRESCRIBED_MOTION_RIGID_OPTION
//

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES

    //ID Card
    TITLE                                   = VALUE(STRING,       "HEADING");

    //Card 1
    entityid                                = VALUE(MULTIOBJECT,  "typeID") { SUBTYPES = ( /NODE, /SETS , /ELEMS, /COMPONENT) ; }
    DOF                                     = VALUE(INT,          "Applicable degrees-of-freedom");
    LSD_VAD                                 = VALUE(INT,          "Velocity/Acceleration/Displacement flag");
    curveid                                 = VALUE(CURVE,        "Curve ID or function ID to describe motion value versus time");
    SFACT                                   = VALUE(FLOAT,        "Load curve scale factor");
    LSD_VID1                                = VALUE(VECTOR,       "Vector ID");
    LSD_TDEATH                              = VALUE(FLOAT,        "Time imposed motion/constraint is removed");
    LSD_BIRTH                               = VALUE(FLOAT,        "Time that the imposed motion/constraint is activated");

    //Additional Card 3
    BPM_OFFSET1                             = VALUE(FLOAT,        "Offset for DOF types 9 - 11 (y, x, z direction)");
    BPM_OFFSET2                             = VALUE(FLOAT,        "Offset for DOF types 9 - 11 (z, x, y direction)");
    LSD_MRB                                 = VALUE(COMPONENT,    "Master rigid body for measuring the relative displacement");
    LSD_NODE1                               = VALUE(NODE,         "Optional orientation node N1");
    LSD_NODE2                               = VALUE(NODE,         "Optional orientation node N2");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING,       "Solver Keyword");
    LSD_TitleOpt                            = VALUE(INT,          "Title"); // this doesn't work
    VectOption                              = VALUE(INT,          "Vector Option");
    localOption                             = VALUE(INT,          "Local Option");

    IOFLAG                                  = VALUE(INT,          "IOFLAG");
    _opt                                    = VALUE(STRING,       "Keyword Option");
    dummy                                   = VALUE(INT,          "dummy");
    dummy_keyword                           = VALUE(STRING,       "dummy_keyword");
        entityid_type                              = VALUE(STRING, "Type of multi object");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //ID Card
    TITLE                                   = -1;

    //Card 1
    DOF                                     = 2774;
    LSD_VAD                                 = 6050;
    SFACT                                   = 4396;
    LSD_VID1                                = 4125;
    LSD_TDEATH                              = 2239;
    LSD_BIRTH                               = 3074;

    //Additional Card 3
    BPM_OFFSET1                             = 4101;
    BPM_OFFSET2                             = 4102;
    LSD_MRB                                 = 3033;
    LSD_NODE1                               = 86;
    LSD_NODE2                               = 87;

    //HM INTERNAL
    KEYWORD_STR                             = 9000;
    LSD_TitleOpt                            = 90; // this doesn't work
    VectOption                              = 6253;
    localOption                             = 4204;

    IOFLAG                                  = -1;
    _opt                                    = -1;
    dummy                                   = -1;
    dummy_keyword                           = -1;
}

DEFAULTS(COMMON)
{
    SFACT                                   = 1.0;
    LSD_TDEATH                              = 1E+28;
    BPM_OFFSET1                             = 0;
    BPM_OFFSET2                             = 0;
}

GUI(COMMON)
{
    SCALAR(SFACT,       "SFACT")            { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_BIRTH,   "BIRTH")            { DIMENSION = "t" ; }
    SCALAR(LSD_TDEATH,  "DEATH")            { DIMENSION = "t" ; }
    SCALAR(BPM_OFFSET1, "OFFSET1")          { DIMENSION = "l" ; }
    SCALAR(BPM_OFFSET2, "OFFSET2")          { DIMENSION = "l" ; }
}

// File format
FORMAT(Keyword971_R6.1)
{
    ASSIGN(IOFLAG, 1, IMPORT);
    ASSIGN(IOFLAG, 0, EXPORT);

    if(IOFLAG == 0)
    {
        ASSIGN(KEYWORD_STR, *BOUNDARY_PRESCRIBED_MOTION_RIGID,            EXPORT);

        if(localOption == 1)
        {
            ASSIGN(dummy_keyword, _COMBINE(dummy_keyword, "_LOCAL"),      EXPORT);
        }

        if(LSD_TitleOpt == 1)
        {
            ASSIGN(dummy_keyword, _COMBINE(dummy_keyword, "_ID"),         EXPORT);
        }

        ASSIGN(KEYWORD_STR,       _COMBINE(KEYWORD_STR, dummy_keyword),   EXPORT);
        CARD("%-s", KEYWORD_STR);
    }
    else
    {
        HEADER("*BOUNDARY_PRESCRIBED_MOTION_RIGID%s", _opt);

        ASSIGN(localOption,   _FIND(_opt, "_LOCAL"),                      IMPORT);

        ASSIGN(LSD_TitleOpt,  _FIND(_opt, "_ID"),                         IMPORT);  // LSD_TitleOpt seems to be readonly!!!
    }

    if(IOFLAG == 0 && LSD_TitleOpt == 1)
    {
        COMMENT("$       IDHEADING                                                               ");
        CARD("%10d%-70s", _ID_, TITLE);
    }

    if (IOFLAG == 1)
    {
        CARD_PREREAD("%50s%10d", _BLANK_, LSD_VID1);

        if (LSD_VID1 == NONE)
        {
            ASSIGN(VectOption, 0, IMPORT);
        }
        else
        {
            ASSIGN(VectOption, 1, IMPORT);
        }
    }

    //Card 1
    if(VectOption == 1)
    {
        COMMENT("$   typeID       DOF       VAD      LCID        SF       VID     DEATH     BIRTH");
        CARD("%10d%10d%10d%10d%10lg%10d%10lg%10lg",  entityid, DOF, LSD_VAD, curveid, SFACT, LSD_VID1, LSD_TDEATH, LSD_BIRTH);
    }
    else
    {
        COMMENT("$   typeID       DOF       VAD      LCID        SF               DEATH     BIRTH");
        CARD("%10d%10d%10d%10d%10lg%10s%10lg%10lg",  entityid, DOF, LSD_VAD, curveid, SFACT, _BLANK_, LSD_TDEATH, LSD_BIRTH);
    }
    ASSIGN(entityid_type, /COMPONENT, IMPORT); 
    //Additional Card 3
    if(DOF == -9 || DOF == -10 || DOF == -11 || DOF == 9 || DOF == 10 || DOF == 11 || LSD_VAD == 4)
    {
        COMMENT("$  OFFSET1   OFFSET2       MRB     NODE1     NODE2");
        CARD("%10lg%10lg%10d%10d%10d",  BPM_OFFSET1, BPM_OFFSET2, LSD_MRB, LSD_NODE1, LSD_NODE2);
    }
}