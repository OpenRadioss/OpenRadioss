//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// *LOAD_GRAVITY_PART
//

ATTRIBUTES(COMMON)
{
    // Card
    LSD_PID                                 = VALUE(COMPONENT, "Part ID for application of gravity load");
    LSD_PSID                                = VALUE(SETS, "Part Set ID for application of gravity load") { SUBTYPES = (/SETS/SET_PART_IDPOOL) ; }
    DOF                                     = VALUE(INT, "Direction: enter 1, 2 or 3 for x, y or z");
    LSD_LCID                                = VALUE(CURVE, "Load curve defining factor as a function of time (or zero if STGA, STGR are defined)");
    LSD_ACCEL                               = VALUE(FLOAT,"Acceleration (will be multiplied by factor from curve)");
    LSD_LCDR                                = VALUE(CURVE, "Load curve defining as a function of time during dynamic relaxation");
    LSD_STGA                                = VALUE(INT, "Construction stage at which part is added (optional)");
    LSD_STGR                                = VALUE(INT, "Construction stage at which part is removed (optional)");

    LCOption                                = VALUE(INT, "LCOpt");
    SetOption                               = VALUE(INT, "SET");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    
    IO_FLAG                                 = VALUE(INT, "IOFLAG");
    _opt                                    = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    LSD_PID                                 = 149;
    LSD_PSID                                = 768;
    DOF                                     = 2774;
    LSD_LCID                                = 45;
    LSD_ACCEL                               = 7917;
    LSD_LCDR                                = 7918;
    LSD_STGA                                = 7919;
    LSD_STGR                                = 7920;

    LCOption                                = 8630;
    SetOption                               = 7922;
    
    //HM INTERNAL
    KEYWORD_STR                             = 9000;

    IO_FLAG                                 = -1;
    _opt                                    = -1;
}

DEFAULTS(COMMON)
{
    LSD_ACCEL                               = 0;
    LSD_STGA                                = 0;
    LSD_STGR                                = 0;

    LCOption                                = 0;
    SetOption                               = 0;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR,"*LOAD_GRAVITY_PART");

    FLAG(SetOption,"SET");
    if(SetOption == 1)
    {
        ASSIGN(KEYWORD_STR, "_SET");
        DATA(LSD_PID);
    }
    else
    {
        DATA(LSD_PSID);
    }
    
    RADIO(DOF,"DOF")
    {
        ADD(1,"1: Direction X");
        ADD(2,"2: Direction Y");
        ADD(3,"3: Direction Z");
    }    

    FLAG(LCOption);
    if(LCOption == 1)
    {
        DATA(LSD_LCID);
    }
    
    SCALAR(LSD_ACCEL)                       { DIMENSION = "acceleration"; }
    DATA(LSD_LCDR); 

    if(LCOption == 0)
    {
        SCALAR(LSD_STGA)                    { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(LSD_STGR)                    { DIMENSION = "DIMENSIONLESS"; }
    }
}

// File format
FORMAT(Keyword971_R6.1) 
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if(IO_FLAG == 0)
    {
        if(SetOption == 0)
            HEADER("*LOAD_GRAVITY_PART");
        else
            HEADER("*LOAD_GRAVITY_PART_SET");
    }
    else //IMPORT
    {
        HEADER("*LOAD_GRAVITY_PART%20s", _opt);
        
        if(_opt == "_SET")
            ASSIGN(SetOption, 1, IMPORT);
        else
            ASSIGN(SetOption, 0, IMPORT);
    }

    if(SetOption == 0)
    {
        COMMENT("$      PID       DOF        LC     ACCEL      LCDR      STGA      STGR");
        CARD("%10d%10d%10d%10lg%10d%10d%10d",LSD_PID,DOF,LSD_LCID,LSD_ACCEL,LSD_LCDR,LSD_STGA,LSD_STGR);
    }
    else
    {
        COMMENT("$     PSID       DOF        LC     ACCEL      LCDR      STGA      STGR");
        CARD("%10d%10d%10d%10lg%10d%10d%10d",LSD_PSID,DOF,LSD_LCID,LSD_ACCEL,LSD_LCDR,LSD_STGA,LSD_STGR);
    }
}
