//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
ATTRIBUTES(COMMON) {

    //Attributes for HM usage 
    IO_FLAG                             = VALUE(INT, "Import/Export flag");
    _HMCOMMENTSFLAG                     = VALUE(INT, "Write HM Comments");
    _HWCOLOR                            = VALUE(INT, "Entity Color");
    _HAS_HEADER                         = VALUE(BOOL,"Has Header Card");
    TITLE                               = VALUE(STRING, "TITLE");
    solverkeyword                       = VALUE(STRING, "Solver Keyword");

    // Solver fields
    n1typ                                = VALUE(INT,"Type of N1");
    n1                                   = VALUE(MULTIOBJECT,"Node / Node set/Segment set ID for excitation input") { SUBTYPES = ( /SETS/SET_NODE_IDPOOL,  /NODE,  /SETS/SET_SEGMENT_GENERAL_IDPOOL ) ; }
    dof1                                 = VALUE(INT,"Applicable degrees-of-freedom for excitation input");
    vad1                                 = VALUE(INT,"Excitation input type");
    vid_direction                        = VALUE(VECTOR,"Vector ID for DOF1=4 for excitation input");
    fnmax                                = VALUE(FLOAT,"Optional maximum natural frequency employed in FRF computation");
    mdmin                                = VALUE(INT, "The first mode employed in FRF computation");
    mdmax                                = VALUE(INT,"The last mode employed in FRF computation");
    dampf                                = VALUE(FLOAT,"Modal damping coefficient");
    lcdam                                = VALUE(FUNCT, "Load Curve ID defining mode dependent modal damping coefficient");
    lctyp                                = VALUE(INT,"Type of load curve defining modal damping coefficient");
    dmpmas                               = VALUE(FLOAT,"Mass proportional damping constant Alpha, in Rayleigh damping");
    dmpstf                               = VALUE(FLOAT,"Stiffness proportional damping constant Beta , in Rayleigh damping");
    n2typ                                = VALUE(INT,"Type of N2");
    n2                                   = VALUE(MULTIOBJECT,"Node / Node set/Segment set ID for response output") { SUBTYPES = ( /SETS/SET_NODE_IDPOOL,  /NODE,  /SETS/SET_SEGMENT_GENERAL_IDPOOL ) ; }
    dof2                                 = VALUE(INT,"Applicable degrees-of-freedom for response output");
    vad2                                 = VALUE(INT,"Response output type");
    relatv                               = VALUE(INT,"FLAG for displacement, velocity and acceleration results");
    fmin                                 = VALUE(FLOAT,"Minimum frequency for FRF output");
    fmax                                 = VALUE(FLOAT,"Maximum frequency for FRF output");
    nfreq                                = VALUE(INT,"Number of frequencies for FRF output");
    fspace                               = VALUE(INT,"Frequency spacing option for FRF output");
    lcfreq                               = VALUE(FUNCT, "Load Curve ID defining the frequencies for FRF output");
    restrt                               = VALUE(INT,"Restart option");
    output                               = VALUE(INT,"Output option");
    DUMMY_N1TYP                          = VALUE(INT, "N1TYP");
    DUMMY_N2TYP                          = VALUE(INT, "N2TYP");
    empty_string                         = VALUE(STRING, "empty string");
    n1_type                             = VALUE(STRING, "Type of multi object");
    n2_type                              = VALUE(STRING, "Type of multi object");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    IO_FLAG                            =-1;
    _HMCOMMENTSFLAG                    =-1;
    _HWCOLOR                           =-1;
    _HAS_HEADER                        = -1;
    TITLE                              =-1;
    solverkeyword                      = -1;
    empty_string                       = -1;
    n1_type                            = -1;
    n2_type                            = -1;
    DUMMY_N1TYP                        = -1;
    DUMMY_N2TYP                        = -1;
}

DEFAULTS(COMMON)
{
    n1typ                                = 0;
    vad1                                 = 3;
    fnmax                                = 0.0;
    mdmin                                = 0;
    mdmax                                = 0;
    dampf                                = 0.0;
    lctyp                                = 0;
    dmpmas                               = 0.0;
    dmpstf                               = 0.0;
    n2typ                                = 0;
    vad2                                 = 2;
    relatv                               = 0;
    nfreq                                = 2;
    fspace                               = 0;
    restrt                               = 0;
    output                               = 0;
    n1_type                              = "/NODE";
    n2_type                              = "/NODE";
}

GUI(COMMON)
{
    ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_FRF);
    
    // Card 1
    RADIO(n1typ)
    {
        ADD(0,"0:Node ID");
        ADD(1,"1:Node set ID");
        ADD(2,"2:Segment set ID");
    }
    if(n1typ == 0)
    {
        DATA(n1) { SUBTYPES = ( /NODE ) ;  }
    }
    else if(n1typ == 1)
    {
        DATA(n1) { SUBTYPES = ( /SETS/SET_NODE_IDPOOL ) ;  }
    }
    else
    {
        DATA(n1) { SUBTYPES = ( /SETS/SET_SEGMENT_GENERAL_IDPOOL ) ;  }
    }
    RADIO(dof1)
    {
        ADD(1,"1:X-translational degree-of-freedom, or X-rotational degree of freedom");
        ADD(2,"2:Y-translational degree-of-freedom, or Y-rotational degree of freedom");
        ADD(3,"3:Z-translational degree-of-freedom, or Z-rotational degree of freedom");
        ADD(4,"4:Translational movement in direction given by vector VID");
        ADD(-1,"-1:X-translational degree-of-freedom, or X-rotational degree of freedom");
        ADD(-2,"-2:Y-translational degree-of-freedom, or Y-rotational degree of freedom");
        ADD(-3,"-3:Z-translational degree-of-freedom, or Z-rotational degree of freedom");
        ADD(-4,"-4:Translational movement in direction given by vector VID");
    }
    RADIO(vad1)
    {
        ADD(0, "0:Base velocity");
        ADD(1, "1:Base acceleration");
        ADD(2, "2:Base displacement");
        ADD(3, "3:Nodal force");
        ADD(4, "4:Pressure");
    }
    DATA(vid_direction);
    SCALAR(fnmax) { DIMENSION = "f"; }
    SCALAR(mdmin);
    SCALAR(mdmax);
    
    // Card 2
    SCALAR(dampf);
    FUNCTION(lcdam) {/FILTER/curveoption/0/EQ;}
    RADIO(lctyp)
    {
        ADD(0,"0:Abscissa value defines frequency");
        ADD(1,"1:Abscissa value defines mode number");
    }
    SCALAR(dmpmas);
    SCALAR(dmpstf);
    
    // Card 3
    RADIO(n2typ)
    {
        ADD(0,"0:Node ID");
        ADD(1,"1:Node set ID");
        ADD(2,"2:Segment set ID");
    }
    if(n2typ == 0)
    {
        DATA(n2) { SUBTYPES = ( /NODE ) ;  }
    }
    else if(n2typ == 1)
    {
        DATA(n2) { SUBTYPES = ( /SETS/SET_NODE_IDPOOL ) ;  }
    }
    else
    {
        DATA(n2) { SUBTYPES = ( /SETS/SET_SEGMENT_GENERAL_IDPOOL ) ;  }
    }

    RADIO(dof2)
    {
        ADD(1,"1:X-translational degree-of-freedom");
        ADD(2,"2:Y-translational degree-of-freedom");
        ADD(3,"3:Z-translational degree-of-freedom");
    }
    RADIO(vad2)
    {
        ADD(0,"0:Velocity");
        ADD(1,"1:Acceleration");
        ADD(2,"2:Displacement");
        ADD(3,"3:Nodal force");
    }
    RADIO(relatv)
    {
        ADD(0,"0:Absolute values are requested");
        ADD(1,"1:Relative values are requested");
    }
    
    // Card 4
    SCALAR(fmin) { DIMENSION = "f"; }
    SCALAR(fmax) { DIMENSION = "f"; }
    SCALAR(nfreq);
    RADIO(fspace)
    {
        ADD(0,"0:Linear");
        ADD(1,"1:Logarithmic");
        ADD(2,"2:Biased");
    }
    FUNCTION(lcfreq) {/FILTER/curveoption/0/EQ;}
    RADIO(restrt)
    {
        ADD(0,"0:Initial run");
        ADD(1,"1:Restart with d3eigv family files");
        ADD(2,"2:Restart with dumpfrf");
        ADD(3,"3:Restart with d3eigv family files and dumpfrf");
    }
    RADIO(output)
    {
        ADD(0,"0:Write amplitude and phase angle pairs");
        ADD(1,"1:Write real and imaginary pairs");
    }
}

// File format
FORMAT(Keyword971_R6.1) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    HEADER("*FREQUENCY_DOMAIN_FRF");
    
    if(IO_FLAG == 1)
    {
        CARD_PREREAD("%10s%10d%10s%10s%10s%10s%10s%10s",empty_string,DUMMY_N1TYP,empty_string,empty_string,empty_string,empty_string,empty_string,empty_string);
    }
    
    if(IO_FLAG == 1 && DUMMY_N1TYP == 0)
    {
        ASSIGN(n1_type, /NODE, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_N1TYP == 1)
    {
        ASSIGN(n1_type, /SETS/SET_NODE_IDPOOL, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_N1TYP == 2)
    {
        ASSIGN(n1_type, /SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT); 
    }
    
    COMMENT("$       N1     N1TYP      DOF1      VAD1       VID     FNMAX     MDMIN     MDMAX");
    CARD("%10d%10d%10d%10d%10d%10lg%10d%10d",n1,n1typ,dof1,vad1,vid_direction,fnmax,mdmin,mdmax);
    
    COMMENT("$    DAMPF     LCDAM     LCTYP    DMPMAS    DMPSTF");
    CARD("%10lg%10d%10d%10lg%10lg",dampf,lcdam,lctyp,dmpmas,dmpstf);
    
    if(IO_FLAG == 1)
    {
        CARD_PREREAD("%10s%10d%10s%10s%10s",empty_string,DUMMY_N2TYP,empty_string,empty_string,empty_string);
    }
    
    if(IO_FLAG == 1 && DUMMY_N2TYP == 0)
    {
        ASSIGN(n2_type, /NODE, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_N2TYP == 1)
    {
        ASSIGN(n2_type, /SETS/SET_NODE_IDPOOL, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_N2TYP == 2)
    {
        ASSIGN(n2_type, /SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT); 
    }
    
    COMMENT("$       N2     N2TYP      DOF2      VAD2    RELATV");
    CARD("%10d%10d%10d%10d%10d",n2,n2typ,dof2,vad2,relatv);
    
    COMMENT("$     FMIN      FMAX     NFREQ    FSPACE    LCFREQ    RESTRT    OUTPUT");
    CARD("%10lg%10lg%10d%10d%10d%10d%10d",fmin,fmax,nfreq,fspace,lcfreq,restrt,output);
}
