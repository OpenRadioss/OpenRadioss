//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 202
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    E                                       = VALUE(FLOAT,  "Youngs modulus");
    LSDYNA_SIGY                             = VALUE(FLOAT,  "Initial yield stress");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    MAT202_LC_AL                            = VALUE(FUNCT,  "alpha vs temperature");
    MAT202_LC_E                             = VALUE(FUNCT,  "Youngs Modulus vs Temperature");
    MAT202_LC_FS                            = VALUE(FUNCT,  "failure strain vs temperature");
    MAT202_LC_PR                            = VALUE(FUNCT,  "Poissons Ratio vs Temperature");
    MAT202_TBL_SS                           = VALUE(FUNCT,  "Table ID containing stress-strain curves at different temp.");
    Nu                                      = VALUE(FLOAT,  "Poissons ratio");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    IO_FLAG                                 = VALUE(INT, "io flag");
    _HMCOMMENTSFLAG                         = VALUE(INT, "Write HM Comments");
    TITLE                                   = VALUE(STRING, "Title");
    EncTypeEnumField                        = VALUE(INT,  "Type");
    RegTypeEnumField                        = VALUE(INT,  "Type");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    E                                       = 119;
    LSDYNA_SIGY                             = 152;
    LSD_TitleOpt                            = 90;
    MAT202_LC_AL                            = 1314;
    MAT202_LC_E                             = 1312;
    MAT202_LC_FS                            = 1316;
    MAT202_LC_PR                            = 1313;
    MAT202_TBL_SS                           = 1315;
    Nu                                      = 120;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    EncTypeEnumField                        = 5828;
    RegTypeEnumField                        = 5827;
    TITLE                                   = -1;
    IO_FLAG                                 = -1;
}

DRAWABLES(COMMON) {
       public:
       MASS_DENSITY=SCALAR(Rho);
       YOUNG_MODULUS=SCALAR(E);
       POISSON_RATIO=SCALAR(Nu);
         //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED= EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
  private:
  G = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1 = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
  public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

DEFAULTS(COMMON)
{
}

CHECK(COMMON){
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_STEEL_EC3");
     RADIO(CommentEnumField)
     {
         //////ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                            {DIMENSION="density";}
 optional:
     SCALAR(E)                              {DIMENSION="pressure";}
     SCALAR(Nu)                             {DIMENSION="DIMENSIONLESS";}
 mandatory:
     SCALAR(LSDYNA_SIGY)                    {DIMENSION="pressure";}
 optional:
     DATA(MAT202_LC_E);
     DATA(MAT202_LC_PR);
     DATA(MAT202_LC_AL);
     DATA(MAT202_TBL_SS);
     DATA(MAT202_LC_FS);
/*
     graphical SUPPORT("Part(s) to which material is applied")
     {
       OBJECTS=(/COMPONENT/BEAM);
       ADD(COMPONENT,"Parts");
     }  
*/
}

// File format
FORMAT(Keyword971_R6.1) 
{
    //    
    COMMENT("$      MID        RO         E        PR      SIGY");
    CARD("%10d%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,LSDYNA_SIGY);
    //    
    COMMENT("$     LC_E     LC_PR     LC_AL    TBL_SS     LC_FS");
    CARD("%10d%10d%10d%10d%10d",MAT202_LC_E,MAT202_LC_PR,MAT202_LC_AL,MAT202_TBL_SS,MAT202_LC_FS);
    //    
    BLANK;
}
