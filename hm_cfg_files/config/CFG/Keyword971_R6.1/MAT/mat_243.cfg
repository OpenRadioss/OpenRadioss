//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 243
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    E                                       = VALUE(FLOAT,  "Youngs modulus");
    E_AsFunctOfStrain                       = VALUE(FUNCT,  "Youngs Modulus vs plastic strain");
    LSDYNA_A1                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A2                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A3                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_D1                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D2                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D3                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_V1                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V2                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V3                               = VALUE(FLOAT,  "Components of vector v");
    LSD_CRA1                                = VALUE(FLOAT,  "Chaboche-Rousselier hardening parameter");
    LSD_CRA2                                = VALUE(FLOAT,  "Chaboche-Rousselier hardening parameter");
    LSD_CRA3                                = VALUE(FLOAT,  "Chaboche-Rousselier hardening parameter");
    LSD_CRA4                                = VALUE(FLOAT,  "Chaboche-Rousselier hardening parameter");
    LSD_CRC1                                = VALUE(FLOAT,  "Chaboche-Rousselier hardening parameter");
    LSD_CRC2                                = VALUE(FLOAT,  "Chaboche-Rousselier hardening parameter");
    LSD_CRC3                                = VALUE(FLOAT,  "Chaboche-Rousselier hardening parameter");
    LSD_CRC4                                = VALUE(FLOAT,  "Chaboche-Rousselier hardening parameter");
    LSD_E0                                  = VALUE(FLOAT,  "Material parameter");
    LSD_HR                                  = VALUE(FLOAT,  "Hardening rule");
    LSD_ITER                                = VALUE(FLOAT,  "Iteration flag for speed");
    LSD_LCID                                = VALUE(FUNCT,  "curve ID for hardening in the 0 degree direction");
    LSD_MAT_BETA                            = VALUE(FLOAT,  "Material angle");
    LSD_MAT_C                               = VALUE(FLOAT,  "C in Cowper-Symonds strain rate model");
    LSD_MAT_M                               = VALUE(FLOAT,  "exponent in Hill's yield surface");
    LSD_MAT_SRP                             = VALUE(FLOAT,  "p in Cowper-Symonds strain rate");
    LSD_MAT_VLCID                           = VALUE(FUNCT,  "relative volume change vs effective plastic strain");
    LSD_MAT_XP                              = VALUE(FLOAT,  "Coordinates of point p");
    LSD_MAT_YP                              = VALUE(FLOAT,  "Coordinates of point p");
    LSD_MAT_ZP                              = VALUE(FLOAT,  "Coordinates of point p");
    LSD_NODE1                               = VALUE(NODE,  "Node");
    LSD_NODE3                               = VALUE(NODE,  "Node1");
    LSD_NODE4                               = VALUE(NODE,  "Node2");
    LSD_NODE5                               = VALUE(NODE,  "Node1");
    LSD_NODE6                               = VALUE(NODE,  "Node2");
    LSD_NODE7                               = VALUE(NODE,  "Node1");
    LSD_NODE8                               = VALUE(NODE,  "Node2");
    LSD_P1                                  = VALUE(FLOAT,  "Material parameter");
    LSD_P1_curve                            = VALUE(FUNCT,  "load curve for hardening in 45 degree direction");
    LSD_P2                                  = VALUE(FLOAT,  "Material parameter");
    LSD_P2_curve                            = VALUE(FUNCT,  "load curve for hardening in 90 degree direction");
    LSD_P3                                  = VALUE(FLOAT,  "Material parameter");
    LSD_R00                                 = VALUE(FLOAT,  "Hill90 parameter");
    LSD_R45                                 = VALUE(FLOAT,  "Hill90 parameter");
    LSD_R90                                 = VALUE(FLOAT,  "Hill90 parameter");
    LSD_SPI                                 = VALUE(FLOAT,  "for finding strain at plastic yield");
    LSD_SYSTEM                              = VALUE(SYSTEM,  "coordinate system ID number");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    Nu                                      = VALUE(FLOAT,  "Poissons ratio");
    R00FunctOfPlasticStrain                 = VALUE(FUNCT,  "R value vs plastic strain");
    R00FunctionOfPlasticStrain              = VALUE(INT,  "Lankford parameter in 0 degree direction");
    R45FunctOfPlasticStrain                 = VALUE(FUNCT,  "R value vs plastic strain");
    R45FunctionOfPlasticStrain              = VALUE(INT,  "Lankford parameter in 45 degree direction");
    R90FunctOfPlasticStrain                 = VALUE(FUNCT,  "R value vs plastic strain");
    R90FunctionOfPlasticStrain              = VALUE(INT,  "Lankford parameter in 90 degree direction");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    YoungsModulusAsFunctionOfStrain         = VALUE(INT,  "YoungsModulusAsFunctionOfStrain");
    axisOptFlag                             = VALUE(INT,  "Anisotropy axis definition");
    parameterOptFlag                        = VALUE(INT,  "Parameters Option");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    IO_FLAG                                 = VALUE(INT, "io flag");
    _HMCOMMENTSFLAG                         = VALUE(INT, "Write HM Comments");
    TITLE                                   = VALUE(STRING, "Title");
    EncTypeEnumField                        = VALUE(INT,  "Type");
    RegTypeEnumField                        = VALUE(INT,  "Type");
    FLAG                                    = VALUE(FLOAT,  "Flag for interpretation of parameters");
    LOC_AOPT                                = VALUE(FLOAT, "");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
}

DRAWABLES(COMMON) {
       public:
       MASS_DENSITY=SCALAR(Rho);
       YOUNG_MODULUS=SCALAR(E);
       POISSON_RATIO=SCALAR(Nu);
                    //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED= EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
  private:
  G = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1 = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
  public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    E                                       = 119;
    E_AsFunctOfStrain                       = 5610;
    LSDYNA_A1                               = 139;
    LSDYNA_A2                               = 140;
    LSDYNA_A3                               = 141;
    LSDYNA_D1                               = 145;
    LSDYNA_D2                               = 146;
    LSDYNA_D3                               = 147;
    LSDYNA_V1                               = 142;
    LSDYNA_V2                               = 143;
    LSDYNA_V3                               = 144;
    LSD_CRA1                                = 5794;
    LSD_CRA2                                = 5796;
    LSD_CRA3                                = 5798;
    LSD_CRA4                                = 5800;
    LSD_CRC1                                = 5793;
    LSD_CRC2                                = 5795;
    LSD_CRC3                                = 5797;
    LSD_CRC4                                = 5799;
    LSD_E0                                  = 1507;
    LSD_HR                                  = 5045;
    LSD_ITER                                = 4788;
    LSD_LCID                                = 45;
    LSD_MAT_BETA                            = 306;
    LSD_MAT_C                               = 313;
    LSD_MAT_M                               = 314;
    LSD_MAT_SRP                             = 1174;
    LSD_MAT_VLCID                           = 5452;
    LSD_MAT_XP                              = 338;
    LSD_MAT_YP                              = 339;
    LSD_MAT_ZP                              = 340;
    LSD_NODE1                               = 86;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_NODE7                               = 5080;
    LSD_NODE8                               = 5081;
    LSD_P1                                  = 5046;
    LSD_P1_curve                            = 5611;
    LSD_P2                                  = 5047;
    LSD_P2_curve                            = 5612;
    LSD_P3                                  = 810;
    LSD_R00                                 = 5048;
    LSD_R45                                 = 5049;
    LSD_R90                                 = 5050;
    LSD_SPI                                 = 5051;
    LSD_SYSTEM                              = 184;
    LSD_TitleOpt                            = 90;
    Nu                                      = 120;
    Num_Comments                            = 3101;
    R00FunctOfPlasticStrain                 = 5616;
    R00FunctionOfPlasticStrain              = 5613;
    R45FunctOfPlasticStrain                 = 5617;
    R45FunctionOfPlasticStrain              = 5614;
    R90FunctOfPlasticStrain                 = 5618;
    R90FunctionOfPlasticStrain              = 5615;
    Rho                                     = 118;
    YoungsModulusAsFunctionOfStrain         = 5619;
    axisOptFlag                             = 4946;
    parameterOptFlag                        = 1744;
    AOPT_SKEW_FLAG                          = -1;
    EncTypeEnumField                        = 5828;
    RegTypeEnumField                        = 5827;
    TITLE                                   = -1;
    FLAG                                    = -1;
    IO_FLAG                                 = -1;
    LOC_AOPT                                = -1;
    //empty_string                       = -1;
}

DEFAULTS(COMMON)
{
}

CHECK(COMMON)
{
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_HILL_90");
      RADIO(CommentEnumField)
     {
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
     SCALAR(Rho)                                {DIMENSION="density";}
     FLAG(YoungsModulusAsFunctionOfStrain);
     if(YoungsModulusAsFunctionOfStrain == FALSE)
     {
         SCALAR(E)                              {DIMENSION="pressure";} 
     }
     if(YoungsModulusAsFunctionOfStrain == TRUE)
     {
         DATA(E_AsFunctOfStrain);
     }
     SCALAR(Nu)                                 {DIMENSION="DIMENSIONLESS";} 
     RADIO(LSD_HR)
     {
        ADD(1.0, "1.0: Linear");
        ADD(2.0, "2.0: Exponential,Swift");
        ADD(3.0, "3.0: Load curve or table with strain rate effects");
        ADD(4.0, "4.0: Exponential,Voce");
        ADD(5.0, "5.0: Exponential,Gosh");
        ADD(6.0, "6.0: Exponential,Hocket-Sherby");
        ADD(7.0, "7.0: Load curves in three directions");
        ADD(8.0, "8.0: Table with temperature dependence");
        ADD(9.0, "9.0: 3d table with temperature and strain rate dependence");
     }
     if(LSD_HR == 7.0)
     {
         DATA(LSD_P1_curve);
         DATA(LSD_P2_curve);
     }
     if(LSD_HR == 1.0 || LSD_HR == 2.0 || LSD_HR == 4.0 || LSD_HR == 5.0 || LSD_HR == 6.0)
     {
         SCALAR(LSD_P1)                         {DIMENSION="pressure";} 
         SCALAR(LSD_P2)                         {DIMENSION="pressure";} 
     }
    SCALAR(LSD_ITER);
    SCALAR(LSD_MAT_M)                      {DIMENSION="DIMENSIONLESS";}
     RADIO(parameterOptFlag)
     {
        ADD(1, "Lankford parameter R00-R45-R90");
        ADD(2, "Barlat89 parameter AH-BH-CH");
     }     
     if(parameterOptFlag == 1)
     {
             FLAG(R00FunctionOfPlasticStrain);
     }
     if((parameterOptFlag == 1 && R00FunctionOfPlasticStrain == FALSE) || parameterOptFlag == 2)
     {
         SCALAR(LSD_R00)                        {DIMENSION="pressure";} 
     }
     if(parameterOptFlag == 1 && R00FunctionOfPlasticStrain == TRUE)
     {
         DATA(R00FunctOfPlasticStrain);
     }

     if(parameterOptFlag == 1)
     {
             FLAG(R45FunctionOfPlasticStrain);
     }
     if((parameterOptFlag == 1 && R45FunctionOfPlasticStrain == FALSE) || parameterOptFlag == 2)
     {
         SCALAR(LSD_R45)                        {DIMENSION="pressure";} 
     }
     if(parameterOptFlag == 1 && R45FunctionOfPlasticStrain == TRUE)
     {
         DATA(R45FunctOfPlasticStrain);
     }

     if(parameterOptFlag == 1)
     {
             FLAG(R90FunctionOfPlasticStrain);
     }
     if((parameterOptFlag == 1 && R90FunctionOfPlasticStrain == FALSE) || parameterOptFlag == 2)
     {
         SCALAR(LSD_R90)                        {DIMENSION="pressure";} 
     }
     if(parameterOptFlag == 1 && R90FunctionOfPlasticStrain == TRUE)
     {
         DATA(R90FunctOfPlasticStrain);
     }
     DATA(LSD_LCID);
     if(LSD_HR == 1.0 || LSD_HR == 2.0 || LSD_HR == 4.0 || LSD_HR == 5.0 || LSD_HR == 6.0)
     {
         SCALAR(LSD_E0)                         {DIMENSION="DIMENSIONLESS";}
     }
     SCALAR(LSD_SPI)                            {DIMENSION="DIMENSIONLESS";}
     if(LSD_HR == 5.0 || LSD_HR == 6.0)
     {
         SCALAR(LSD_P3);
     }
     if(LSD_MAT_M < 0)
     {
         SCALAR(LSD_CRC1);
         SCALAR(LSD_CRA1);
         SCALAR(LSD_CRC2);
         SCALAR(LSD_CRA2);
         SCALAR(LSD_CRC3);
         SCALAR(LSD_CRA3);
         SCALAR(LSD_CRC4);
         SCALAR(LSD_CRA4);
     }
     RADIO(axisOptFlag)
     {
        ADD(1, "0: Locally orthotropic: axis given by nodes 1,2 and 4");
        ADD(2, "1: Locally orthotropic: a-dir given by a point and global location of element center");
        ADD(3, "2: Globally orthotropic: axis given by vectors");
        ADD(4, "3: Locally orthotropic: axis given by rotating the material axes by an angle BETA");
        ADD(5, "By System");
     }
     if(axisOptFlag == 5)
     {
        DATA(LSD_SYSTEM);
     }
     SCALAR(LSD_MAT_C)                   {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_SRP)                 {DIMENSION="DIMENSIONLESS";}
     DATA(LSD_MAT_VLCID);
     if(parameterOptFlag == 1)
     {
        ASSIGN(FLAG,0.0,FALSE);
     }
     else
     {
        ASSIGN(FLAG,1.0,FALSE);
     }
     if(axisOptFlag == 2)
     {
        DATA(LSD_NODE1);
        ASSIGN(LSD_MAT_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],FALSE);
        ASSIGN(LSD_MAT_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],FALSE);
        ASSIGN(LSD_MAT_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],FALSE);
     }
     if(axisOptFlag == 3)
     {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],FALSE);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],FALSE);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],FALSE);
        DATA(LSD_NODE7);                
        DATA(LSD_NODE8);                
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],FALSE);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],FALSE);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],FALSE);
     }
     if(axisOptFlag == 4)
     {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],FALSE);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],FALSE);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],FALSE);
     }     
     if(axisOptFlag == 1 || axisOptFlag == 4)
     {
        SCALAR(LSD_MAT_BETA)             {DIMENSION="a";}
     }
/*
    graphical SUPPORT("Part(s) to which material is applied") 
    {
       OBJECTS=(/COMPONENT/SHELL,/COMPONENT/TSHELL);
       ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971_R6.1) 
{
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    if(LSD_NODE7 != NONE && LSD_NODE8 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSD_MAT_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSD_MAT_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSD_MAT_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    //
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    //
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);
    //
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    //
    if(parameterOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(FLAG,0.0,EXPORT);
    }
    else if(parameterOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(FLAG,1.0,EXPORT);
    }
    //
    COMMENT("$      MID       RHO         E        PR        HR        P1        P2      ITER");
    CARD_PREREAD("%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_HR) ;
    if (LSD_HR != 7.0)
    {       
       CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,SCALAR_OR_OBJECT(YoungsModulusAsFunctionOfStrain,E,E_AsFunctOfStrain),Nu,LSD_HR,LSD_P1,LSD_P2,LSD_ITER);
    }
    else
    {
       CARD("%10d%10lg%10lg%10lg%10lg%10d%10d%10lg",_ID_,Rho,SCALAR_OR_OBJECT(YoungsModulusAsFunctionOfStrain,E,E_AsFunctOfStrain),Nu,LSD_HR,LSD_P1_curve,LSD_P2_curve,LSD_ITER);
    }
    //
    COMMENT("$        M    R00/AB    R45/CB    R90/HB      LCID        E0       SPI        P3");
    if(LSD_HR == 5.0 || LSD_HR == 6.0)
    {
        CARD("%10lg%10lg%10lg%10lg%10d%10lg%10lg%10lg",LSD_MAT_M,SCALAR_OR_OBJECT(R00FunctionOfPlasticStrain,LSD_R00,R00FunctOfPlasticStrain),SCALAR_OR_OBJECT(R45FunctionOfPlasticStrain,LSD_R45,R45FunctOfPlasticStrain),SCALAR_OR_OBJECT(R90FunctionOfPlasticStrain,LSD_R90,R90FunctOfPlasticStrain),LSD_LCID,LSD_E0,LSD_SPI,LSD_P3); 
    }
    else if(LSD_HR == 1 || LSD_HR == 2.0 || LSD_HR == 4.0)
    {
        CARD("%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSD_MAT_M,SCALAR_OR_OBJECT(R00FunctionOfPlasticStrain,LSD_R00,R00FunctOfPlasticStrain),SCALAR_OR_OBJECT(R45FunctionOfPlasticStrain,LSD_R45,R45FunctOfPlasticStrain),SCALAR_OR_OBJECT(R90FunctionOfPlasticStrain,LSD_R90,R90FunctOfPlasticStrain),LSD_LCID,LSD_E0,LSD_SPI); 
    }
    else
    {
        CARD("%10lg%10lg%10lg%10lg%10d%10s%10lg",LSD_MAT_M,SCALAR_OR_OBJECT(R00FunctionOfPlasticStrain,LSD_R00,R00FunctOfPlasticStrain),SCALAR_OR_OBJECT(R45FunctionOfPlasticStrain,LSD_R45,R45FunctOfPlasticStrain),SCALAR_OR_OBJECT(R90FunctionOfPlasticStrain,LSD_R90,R90FunctOfPlasticStrain),LSD_LCID,_BLANK_,LSD_SPI); 
    }
    //
    if(LSD_MAT_M < 0)
    {
       //
       COMMENT("$     CRC1      CRA1      CRC2      CRA2      CRC3      CRA3      CRC4      CRA4");
      CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_CRC1,LSD_CRA1,LSD_CRC2,LSD_CRA2,LSD_CRC3,LSD_CRA3,LSD_CRC4,LSD_CRA4);
       //
    }  
    //
    COMMENT("$     AOPT         C         P     VCLID                FLAG");
    if(IO_FLAG == 2)
    {
        if(axisOptFlag != 5)
        {
            CARD("%10lg%10lg%10lg%10d%10s%10lg",LOC_AOPT,LSD_MAT_C,LSD_MAT_SRP,LSD_MAT_VLCID,_BLANK_,FLAG);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10d%10s%10lg",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM),LSD_MAT_C,LSD_MAT_SRP,LSD_MAT_VLCID,_BLANK_,FLAG);
        }
    }
    CARD_PREREAD("%10lg%10s%10s%10s%10s%10lg",LOC_AOPT,_BLANK_,_BLANK_,_BLANK_,_BLANK_,FLAG);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,4,IMPORT);
    }
    //
    if(FLAG == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(parameterOptFlag,1,IMPORT);
    }
    else if(FLAG == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(parameterOptFlag,2,IMPORT);
    }
    //
    if(IO_FLAG == 1)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 5)
        {
            CARD("%10lg%10lg%10lg%10d%10s%10lg",LOC_AOPT,LSD_MAT_C,LSD_MAT_SRP,LSD_MAT_VLCID,_BLANK_,FLAG);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10d%10s%10lg",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM),LSD_MAT_C,LSD_MAT_SRP,LSD_MAT_VLCID,_BLANK_,FLAG);
            ASSIGN(axisOptFlag, 5, IMPORT);
        }
    }
    //
    COMMENT("$       XP        YP        ZP        A1        A2        A3");
    if(axisOptFlag == 2)
    {
        CARD("%10lg%10lg%10lg",LSD_MAT_XP,LSD_MAT_YP,LSD_MAT_ZP);
    }
    else if(axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
    }
    else
    {
        BLANK;
    }
    //
    COMMENT("$       V1        V2        V3        D1        D2        D3    MANGLE"); 
    if(axisOptFlag == 4)
    {
        CARD("%10lg%10lg%10lg%10s%10s%10s%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,LSD_MAT_BETA);
    }
    else if(axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
    }
    else if(axisOptFlag == 1)
    {
        CARD("%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_MAT_BETA);
    }
    else
    {
        BLANK;
    }
}
