//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 154
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    Nu                                      = VALUE(FLOAT,  "Poissons ratio");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    E                                       = VALUE(FLOAT,  "Youngs modulus");
    LSDYNA_BETA                             = VALUE(FLOAT,  "BETA");
    LSD_ALPHA                               = VALUE(FLOAT,  "Controls shape of yield surface");
    LSD_ALPHA2                              = VALUE(FLOAT,  "ALPHA2");
    LSD_CFAIL                               = VALUE(FLOAT,  "Failure volumetric strain");
    LSD_DERFI                               = VALUE(FLOAT,  "Type of derivation used in material subroutine");
    LSD_EPSD                                = VALUE(FLOAT,  "Densification strain");
    LSD_GAMMA                               = VALUE(FLOAT,  "GAMMA");
    LSD_SIGP                                = VALUE(FLOAT,  "SIGP");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    MATL154_NUM                             = VALUE(FLOAT,  "Number of timesteps at or above PFAIL to trigger element failure");
    MATL154_PFAIL                           = VALUE(FLOAT,  "Failure principal stress");

}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    E                                       = 119;
    LSDYNA_BETA                             = 148;
    LSD_ALPHA                               = 1651;
    LSD_ALPHA2                              = 4579;
    LSD_CFAIL                               = 4578;
    LSD_DERFI                               = 4577;
    LSD_EPSD                                = 4575;
    LSD_GAMMA                               = 4336;
    LSD_SIGP                                = 4576;
    LSD_TitleOpt                            = 90;
    MATL154_NUM                             = 1782;
    MATL154_PFAIL                           = 1781;
    Nu                                      = 120;
    Num_Comments                            = 3101;
    Rho                                     = 118;

}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  YOUNG_MODULUS=SCALAR(E);
  POISSON_RATIO=SCALAR(Nu);
  CONTROLS_SHAPE_OF_YIELD_SURFACE=SCALAR(LSD_ALPHA);
  GAMMA=SCALAR(LSD_GAMMA);
  DENSIFICATION_STRAIN=SCALAR(LSD_EPSD);
  ALPHA2=SCALAR(LSD_ALPHA2);
  BETA=SCALAR(LSDYNA_BETA);
  SIGP=SCALAR(LSD_SIGP);
  TYPE_OF_DERIVATION=SCALAR(LSD_DERFI);
  FAILURE_STRAIN=SCALAR(LSD_CFAIL);
 public:
 //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_DESHPANDE_FLECK_FOAM");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                                {DIMENSION="density";}
 optional:
     SCALAR(E)                                  {DIMENSION="pressure";}
     SCALAR(Nu)                                 {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_ALPHA)                          {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_GAMMA)                          {DIMENSION="pressure";}
     SCALAR(LSD_EPSD)                           {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_ALPHA2)                         {DIMENSION="pressure";}
     SCALAR(LSDYNA_BETA)                        {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_SIGP)                           {DIMENSION="pressure";}
     RADIO(LSD_DERFI)
     {
        ADD(0.0, "0.0: Numerical derivation");
        ADD(1.0, "1.0: Analytical derivation");
     }
     SCALAR(LSD_CFAIL)                          {DIMENSION="DIMENSIONLESS";}
     SCALAR(MATL154_PFAIL)                      {DIMENSION="pressure";}
     SCALAR(MATL154_NUM);
/*
    graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D);
      ADD(COMPONENT,"Parts");
    }
*/

}

// File format
FORMAT(Keyword971) 
{
    //
    COMMENT("$      MID       RHO         E        PR     ALPHA     GAMMA");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,LSD_ALPHA,LSD_GAMMA);
    //
    COMMENT("$     EPSD    ALPHA2      BETA      SIGP     DERFI     CFAIL");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_EPSD,LSD_ALPHA2,LSDYNA_BETA,LSD_SIGP,LSD_DERFI,LSD_CFAIL);
    //
    
}
FORMAT(Keyword971_R6.1) 
{
    //
    COMMENT("$      MID       RHO         E        PR     ALPHA     GAMMA");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,LSD_ALPHA,LSD_GAMMA);
    //
    COMMENT("$     EPSD    ALPHA2      BETA      SIGP     DERFI     CFAIL     PFAIL       NUM");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_EPSD,LSD_ALPHA2,LSDYNA_BETA,LSD_SIGP,LSD_DERFI,LSD_CFAIL,MATL154_PFAIL,MATL154_NUM);
    //
    
}
