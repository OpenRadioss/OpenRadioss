//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 077_H
// 


 ATTRIBUTES(COMMON) 
 {
  // Initial and reference densities
  KEYWORD_STR                       = VALUE(STRING, "Solver Keyword");
  LSD_TitleOpt                      = VALUE(INT, "Title");
  CommentEnumField                  = VALUE(INT, "User Comments");
  Num_Comments                      = SIZE("No. of comment lines");
  Comments                          = ARRAY[Num_Comments](STRING, "Entity Comments");
  Rho                               = VALUE(FLOAT, "Mass density");  
  Nu                                = VALUE(FLOAT, "Poissons ratio");
  LSD_MAT77_N                       = VALUE(INT, "Number of constants to solve");
  LSD_MAT77_NV                      = VALUE(INT, "Number of Prony series terms in fit");
  LSD_G                             = VALUE(FLOAT, "Shear modulus for frequency independent damping");
  LSDYNA_SIGF                       = VALUE(FLOAT, "Limit stress for frequency independent frictional damping ");
  LSD_MAT_REF                       = VALUE(FLOAT, "Use reference geometry to initialize the stress tensor");
  MATL77B_TBHYS                     = VALUE(FUNCT, "Table ID for hysteresis,");
  LSD_MAT_SGL                       = VALUE(FLOAT, "Specimen gauge length");
  LSD_MAT_ST                        = VALUE(FLOAT, "Specimen thickness");
  LSD_MAT_SW                        = VALUE(FLOAT, "Specimen width");
  LSD_LCID                          = VALUE(FUNCT, "versus actual change in the gauge length");
  LSD_MAT77_DATA                    = VALUE(FLOAT, "Type of experimental data");
  LSD_MAT77_LCID2                   = VALUE(FUNCT, "deviatoric stress relaxation curve");
  LSD_MAT77_BSSTART                 = VALUE(FLOAT, "BSSTART");
  LSD_MAT77_TRAMP                   = VALUE(FLOAT, "Optional ramp time for loading");
  LSD_MAT_C10                       = VALUE(FLOAT, "constant");
  LSD_MAT_C01                       = VALUE(FLOAT, "constant");
  LSD_MAT_C11                       = VALUE(FLOAT, "constant");
  LSD_MAT_C20                       = VALUE(FLOAT, "constant");
  LSD_MAT_C02                       = VALUE(FLOAT, "constant");
  LSD_MAT_C30                       = VALUE(FLOAT,   "constant");
  ArrayCount                        = SIZE("ArrayCount");
  LSD_MAT_Gi                        = ARRAY[ArrayCount](FLOAT, "Optional shear relaxation modulus");
  LSD_MAT_Beta                      = ARRAY[ArrayCount](FLOAT, "Optional decay constant");
  MATL77_GJ                         = ARRAY[ArrayCount](FLOAT, "Optional shear modulus for frequency independent damping");
  MATL77_SIGFJ                      = ARRAY[ArrayCount](FLOAT, "Limit stress for frequency independent");
  LOC_N                             = VALUE(INT,"");
  IO_FLAG                           = VALUE(INT, "io flag");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

  KEYWORD_STR                   = 9000;
  CommentEnumField              = 3220;
  Num_Comments                  = 3101;
  LSD_TitleOpt                  = 90;
  Comments                      = 3100;
  Rho                           = 118;
  Nu                            = 120;
  LSD_MAT77_N                   = 3233;
  LSD_MAT77_NV                  = 3228;
  LSD_G                         = 1560;
  LSDYNA_SIGF                   = 248;
  LSD_MAT_REF                   = 359;
  MATL77B_TBHYS                 = 6409;
  LSD_MAT_SGL                   = 350;
  LSD_MAT_SW                    = 351;
  LSD_MAT_ST                    = 352;
  LSD_LCID                      = 45;
  LSD_MAT77_DATA                = 3229;
  LSD_MAT77_LCID2               = 3232;
  LSD_MAT77_BSSTART             = 3230;
  LSD_MAT77_TRAMP               = 3231;
  LSD_MAT_C10                   = 1168;
  LSD_MAT_C01                   = 1169;
  LSD_MAT_C11                   = 1170;
  LSD_MAT_C20                   = 1171;
  LSD_MAT_C02                   = 4066;
  LSD_MAT_C30                   = 4067;
  ArrayCount                    = 2246;
  LSD_MAT_Gi                    = 354;
  LSD_MAT_Beta                  = 355;
  MATL77_GJ                     = 6411;
  MATL77_SIGFJ                  = 6412;
  LOC_N                         = -1;
  IO_FLAG                       = -1;
}

DEFAULTS(COMMON)
{ 
    LSD_MAT77_NV        = 6;
    
}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  POISSONS_RATIO=SCALAR(Nu);
  SHEAR_MODULUS=SCALAR(LSD_G);
  LIMIT_STRESS=SCALAR(LSDYNA_SIGF);
  SPECIMEN_GAUGE_LENGTH=SCALAR(LSD_MAT_SGL);
  SPECIMEN_WIDTH=SCALAR(LSD_MAT_SW);
  SPECIMEN_THICKNESS=SCALAR(LSD_MAT_ST);
  TYPE_OF_EXPERIMENTAL_DATA=SCALAR(LSD_MAT77_DATA);
  SET_TO_BSTART=SCALAR(LSD_MAT77_BSSTART);
  RAMP_TIME_FOR_LOADING=SCALAR(LSD_MAT77_TRAMP);
  C10=SCALAR(LSD_MAT_C10);
  C01=SCALAR(LSD_MAT_C01);
  C11=SCALAR(LSD_MAT_C11);
  C20=SCALAR(LSD_MAT_C20);
  C02=SCALAR(LSD_MAT_C02);
  C30=SCALAR(LSD_MAT_C30);
  YOUNG_MODULUS=EVAL(2*(1+POISSONS_RATIO)*SHEAR_MODULUS);
  BULK_MODULUS = EVAL(YOUNG_MODULUS/(3*(1-2*POISSONS_RATIO)));

  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED        = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSONS_RATIO*POISSONS_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);

  SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+BULK_MODULUS)/MASS_DENSITY)^0.5);
}

GUI(COMMON) 
{


     ASSIGN(KEYWORD_STR, "*MAT_HYPERELASTIC_RUBBER");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
       {
             ASSIGN(KEYWORD_STR, "_TITLE");
       } 
 mandatory:
     SCALAR(Rho)                         { DIMENSION="density";}
 optional:
     SCALAR(Nu)                          { DIMENSION="DIMENSIONLESS"; }
     RADIO(LSD_MAT77_N)
     {
        ADD(0, "0: Defined constants");
        ADD(1, "1: Solve for C10 and C01");
        ADD(2, "2: Solve for C10, C01, C11, C20 and C02");
        ADD(3, "3: Solve for C10, C01, C11, C20, C02 and C30");
     }
     SCALAR(LSD_MAT77_NV)                 {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_G)                        {DIMENSION="pressure";}
     SCALAR(LSDYNA_SIGF)                  {DIMENSION="pressure";}
     RADIO(LSD_MAT_REF)    
     {
        ADD(0.0, "0.0: Off");
        ADD(1.0, "1.0: On");
     }
     if(Nu < 0)
     {
        DATA(MATL77B_TBHYS);    
     }
     if(LSD_MAT77_N > 0)
     {
 mandatory:
        SCALAR(LSD_MAT_SGL)              {DIMENSION="l";}
        SCALAR(LSD_MAT_SW)               {DIMENSION="l";}
        SCALAR(LSD_MAT_ST)               {DIMENSION="l";}
        DATA(LSD_LCID);         
 optional:
        SCALAR(LSD_MAT77_DATA)           {DIMENSION="DIMENSIONLESS";}
        DATA(LSD_MAT77_LCID2);  
        SCALAR(LSD_MAT77_BSSTART)        {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT77_TRAMP)          {DIMENSION="t";}
     }
     if(LSD_MAT77_N == 0)
     {
 optional:
         SCALAR(LSD_MAT_C10)             {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_MAT_C01)             {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_MAT_C11)             {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_MAT_C20)             {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_MAT_C02)             {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_MAT_C30)             {DIMENSION="DIMENSIONLESS";}
     }

     SIZE_RADIO(ArrayCount)
     {
        ADD(0,  "OFF");
        ADD(0,  " 0");
        ADD(1,  " 1");
        ADD(2,  " 2");
        ADD(3,  " 3");
        ADD(4,  " 4");
        ADD(5,  " 5");
        ADD(6,  " 6");
        ADD(7,  " 7");
        ADD(8,  " 8");
        ADD(9,  " 9");
        ADD(10, "10");
        ADD(11, "11");
        ADD(12, "12");
     }
    ARRAY(ArrayCount,"")
    {
        SCALAR(LSD_MAT_Gi)           {DIMENSION="pressure";}
        SCALAR(LSD_MAT_Beta)         {DIMENSION="DIMENSIONLESS";}
        SCALAR(MATL77_GJ)            {DIMENSION="pressure";}
        SCALAR(MATL77_SIGFJ)         {DIMENSION="pressure";}
    }
/*
     graphical SUPPORT("Part(s) to which material is applied") {
     OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/SHELL,/COMPONENT/SPHCEL);
     ADD(COMPONENT,"Parts");
    }
*/
     
}

// File format
FORMAT(Keyword971) 
{
    COMMENT("$      MID       RHO        PR         N        NV         G      SIGF       REF");
    CARD("%10d%10lg%10lg%10lg%10d%10lg%10lg%10lg",_ID_,Rho,Nu,LSD_MAT77_N,LSD_MAT77_NV,LSD_G,LSDYNA_SIGF,LSD_MAT_REF);

    if(LSD_MAT77_N == 0)
    {
        COMMENT("$      C10       C01       C11       C20       C02       C30");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_C10,LSD_MAT_C01,LSD_MAT_C11,LSD_MAT_C20,LSD_MAT_C02,LSD_MAT_C30);
    }
    if(LSD_MAT77_N > 0)
    {
        COMMENT("$      SGL        SW        ST     LCID1      DATA     LCID2    BSTART     TRAMP");
        CARD("%10lg%10lg%10lg%10d%10lg%10d%10lg%10lg",LSD_MAT_SGL,LSD_MAT_SW,LSD_MAT_ST,LSD_LCID,LSD_MAT77_DATA,LSD_MAT77_LCID2,LSD_MAT77_BSSTART,LSD_MAT77_TRAMP);
    }
    if(ArrayCount > 0)
    {
        COMMENT("$       Gi     BETAi        Gj     SIGFj");
    }
    FREE_CARD_LIST(ArrayCount)
    {
        CARD("%10lg%10lg%10lg%10lg",LSD_MAT_Gi,LSD_MAT_Beta,MATL77_GJ,MATL77_SIGFJ);
    }
}

FORMAT(Keyword971_R6.1) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    COMMENT("$      MID       RHO        PR         N        NV         G      SIGF       REF");
    CARD("%10d%10lg%10lg%10d%10d%10lg%10lg%10lg",_ID_,Rho,Nu,LSD_MAT77_N,LSD_MAT77_NV,LSD_G,LSDYNA_SIGF,LSD_MAT_REF);

    if (Nu < 0)
    {
        COMMENT("$    TBHYS") ;
        CARD("%10d",MATL77B_TBHYS);
    }
    if(LSD_MAT77_N == 0)
    {
        COMMENT("$      C10       C01       C11       C20       C02       C30");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_C10,LSD_MAT_C01,LSD_MAT_C11,LSD_MAT_C20,LSD_MAT_C02,LSD_MAT_C30);
    }
    if(LSD_MAT77_N > 0)
    {
        COMMENT("$      SGL        SW        ST     LCID1      DATA     LCID2    BSTART     TRAMP");
        CARD("%10lg%10lg%10lg%10d%10lg%10d%10lg%10lg",LSD_MAT_SGL,LSD_MAT_SW,LSD_MAT_ST,LSD_LCID,LSD_MAT77_DATA,LSD_MAT77_LCID2,LSD_MAT77_BSSTART,LSD_MAT77_TRAMP);
    }
    if(ArrayCount > 0)
    {
        COMMENT("$       Gi     BETAi        Gj     SIGFj");
    }
    FREE_CARD_LIST(ArrayCount)
    {
        CARD("%10lg%10lg%10lg%10lg",LSD_MAT_Gi,LSD_MAT_Beta,MATL77_GJ,MATL77_SIGFJ);
    }
}
