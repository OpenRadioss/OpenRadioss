//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 133
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    E                                       = VALUE(FLOAT,  "Youngs modulus");
    E_AsFunctOfStrain                       = VALUE(FUNCT,  "Youngs modulus vs plastic strain");
    Nu                                      = VALUE(FLOAT,  "Poissons ratio");
    YoungsModulusAsFunctionOfStrain         = VALUE(INT,  "YoungsModulusAsFunctionOfStrain");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    LSDYNA_A1                               = VALUE(FLOAT,  "Components of vector a");
    LSDYNA_A2                               = VALUE(FLOAT,  "Components of vector a");
    LSDYNA_A3                               = VALUE(FLOAT,  "Components of vector a");
    LSDYNA_BETA                             = VALUE(FLOAT,  "Hardening parameter");
    LSDYNA_C                                = VALUE(FLOAT,  "Martensite rate equation parameter");
    LSDYNA_D1                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D2                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D3                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_K                                = VALUE(FLOAT,  "Material parameter");
    LSDYNA_MAT_A                            = VALUE(FLOAT,  "Martensite rate equation parameter");
    LSDYNA_MAT_B                            = VALUE(FLOAT,  "Martensite rate equation parameter");
    LSDYNA_MAT_C                            = VALUE(FLOAT,  "Cowper-Symonds strain rate parameter");
    LSDYNA_MAT_D                            = VALUE(FLOAT,  "Martensite rate equation parameter");
    LSDYNA_MAT_EPS0                         = VALUE(FLOAT,  "Hardening law parameter");
    LSDYNA_MAT_M                            = VALUE(FLOAT,  "Hardening law parameter");
    LSDYNA_MAT_N                            = VALUE(FLOAT,  "Material parameter");
    LSDYNA_MAT_P                            = VALUE(FLOAT,  "Cowper-Symonds strain rate parameter");
    LSDYNA_MAT_Q                            = VALUE(FLOAT,  "Cowper-Symonds strain rate parameter");
    LSDYNA_N                                = VALUE(FLOAT,  "Hardening law parameter");
    LSDYNA_P                                = VALUE(FLOAT,  "Martensite rate equation parameter");
    LSDYNA_V1                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V2                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V3                               = VALUE(FLOAT,  "Components of vector v");
    LSD_A                                   = VALUE(FLOAT,  "Flow potential exponent");
    LSD_ALPHA1                              = VALUE(FLOAT,  "ALPHA1");
    LSD_ALPHA2                              = VALUE(FLOAT,  "ALPHA2");
    LSD_ALPHA3                              = VALUE(FLOAT,  "ALPHA3");
    LSD_ALPHA4                              = VALUE(FLOAT,  "ALPHA4");
    LSD_ALPHA5                              = VALUE(FLOAT,  "ALPHA5");
    LSD_ALPHA6                              = VALUE(FLOAT,  "ALPHA6");
    LSD_ALPHA7                              = VALUE(FLOAT,  "ALPHA7");
    LSD_ALPHA8                              = VALUE(FLOAT,  "ALPHA8");
    LSD_CRA1                                = VALUE(FLOAT,  "Chaboche-Rousselier kinematic hardening parameters");
    LSD_CRA2                                = VALUE(FLOAT,  "Chaboche-Rousselier kinematic hardening parameters");
    LSD_CRA3                                = VALUE(FLOAT,  "Chaboche-Rousselier kinematic hardening parameters");
    LSD_CRA4                                = VALUE(FLOAT,  "Chaboche-Rousselier kinematic hardening parameters");
    LSD_CRC1                                = VALUE(FLOAT,  "Chaboche-Rousselier kinematic hardening parameters");
    LSD_CRC2                                = VALUE(FLOAT,  "Chaboche-Rousselier kinematic hardening parameters");
    LSD_CRC3                                = VALUE(FLOAT,  "Chaboche-Rousselier kinematic hardening parameters");
    LSD_CRC4                                = VALUE(FLOAT,  "Chaboche-Rousselier kinematic hardening parameters");
    LSD_E0                                  = VALUE(FLOAT,  "Material parameter");
    LSD_ITER                                = VALUE(FLOAT,  "Plastic iteration flag");
    LSD_LCID                                = VALUE(FUNCT,  "Hardening law");
    LSD_MAT_AHS                             = VALUE(FLOAT,  "Hardening law parameter");
    LSD_MAT_BHS                             = VALUE(FLOAT,  "Hardening law parameter");
    LSD_MAT_CP                              = VALUE(FLOAT,  "Adiabatic temperature calculation option");
    LSD_MAT_DXX                             = VALUE(FLOAT,  "XX-component of tangent to yield surface");
    LSD_MAT_DXY                             = VALUE(FLOAT,  "XY-component of tangent to yield surface");
    LSD_MAT_DYY                             = VALUE(FLOAT,  "YY-component of tangent to yield surface");
    LSD_MAT_E0MART                          = VALUE(FLOAT,  "Martensite rate equation parameter");
    LSD_MAT_FIT                             = VALUE(FLOAT,  "Material parameter fit flag");
    LSD_MAT_HMART                           = VALUE(FLOAT,  "Hardening law parameter");
    LSD_MAT_K1                              = VALUE(FLOAT,  "Hardening law parameter");
    LSD_MAT_K2                              = VALUE(FLOAT,  "Hardening law parameter");
    LSD_MAT_R00                             = VALUE(FLOAT,  "R-value in 00 direction");
    LSD_MAT_R45                             = VALUE(FLOAT,  "R-value in 45 direction");
    LSD_MAT_R90                             = VALUE(FLOAT,  "R-value in 90 direction");
    LSD_MAT_SIG00                           = VALUE(FLOAT,  "Yield stress in 00 direction");
    LSD_MAT_SIG45                           = VALUE(FLOAT,  "Yield stress in 45 direction");
    LSD_MAT_SIG90                           = VALUE(FLOAT,  "Yield stress in 90 direction");
    LSD_MAT_SIGXX                           = VALUE(FLOAT,  "XX-component of stress on yield surface");
    LSD_MAT_SIGXY                           = VALUE(FLOAT,  "XY-component of stress on yield surface");
    LSD_MAT_SIGYY                           = VALUE(FLOAT,  "YY-component of stress on yield surface");
    LSD_MAT_T0                              = VALUE(FLOAT,  "Initial temperature of material with adiabatic temperature");
    LSD_MAT_TA0                             = VALUE(FLOAT,  "Reference temperature");
    LSD_MAT_VM0                             = VALUE(FLOAT,  "initial volume fraction of martensite");
    LSD_NODE1                               = VALUE(NODE,  "Node1");
    LSD_NODE2                               = VALUE(NODE,  "Node2");
    LSD_NODE3                               = VALUE(NODE,  "Node1");
    LSD_NODE4                               = VALUE(NODE,  "Node2");
    LSD_NODE5                               = VALUE(NODE,  "Node1");
    LSD_NODE6                               = VALUE(NODE,  "Node2");
    LSD_OFFANG                              = VALUE(FLOAT,  "Offset angle for AOPT");
    LSD_SYSTEM                              = VALUE(SYSTEM,  "AOPT");
    LSD_TREF                                = VALUE(FLOAT,  "Reference temperature for output of the yield stress as history variable");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    MATL133_ISCALE                          = VALUE(FLOAT,  "Yield locus scaling flag");
    MATL133_P4                              = VALUE(FLOAT,  "Material parameter");
    MATL133_VM0                             = VALUE(FUNCT,  "Martensite");
    MATL36_HTA                              = VALUE(FUNCT,  "Load curve/Table ID for postforming parameter");
    MATL36_HTB                              = VALUE(FUNCT,  "Load curve/Table ID for postforming parameter");
    MATL36_HTC                              = VALUE(FUNCT,  "Load curve/Table ID for postforming parameter");
    MATL36_HTD                              = VALUE(FUNCT,  "Load curve/Table ID for postforming parameter");
    MATL36_HTFLAG                           = VALUE(FLOAT,  "Heat treatment flag");
    axisOptFlag                             = VALUE(INT,  "Material axes option");
    hardeningOptFlag                        = VALUE(INT,  "Hardening law");
    martensiteOptFlag                       = VALUE(INT,  "martensiteOptFlag");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    LOC_AOPT                                = VALUE(FLOAT, "");
    LOC_HARD                                = VALUE(FLOAT, "");
    IO_FLAG                                 = VALUE(INT, "io flag");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    E                                       = 119;
    E_AsFunctOfStrain                       = 5610;
    LSDYNA_A1                               = 139;
    LSDYNA_A2                               = 140;
    LSDYNA_A3                               = 141;
    LSDYNA_BETA                             = 148;
    LSDYNA_C                                = 197;
    LSDYNA_D1                               = 145;
    LSDYNA_D2                               = 146;
    LSDYNA_D3                               = 147;
    LSDYNA_K                                = 124;
    LSDYNA_MAT_A                            = 4911;
    LSDYNA_MAT_B                            = 4912;
    LSDYNA_MAT_C                            = 4913;
    LSDYNA_MAT_D                            = 4914;
    LSDYNA_MAT_EPS0                         = 4923;
    LSDYNA_MAT_M                            = 4921;
    LSDYNA_MAT_N                            = 4922;
    LSDYNA_MAT_P                            = 4915;
    LSDYNA_MAT_Q                            = 4916;
    LSDYNA_N                                = 71;
    LSDYNA_P                                = 198;
    LSDYNA_V1                               = 142;
    LSDYNA_V2                               = 143;
    LSDYNA_V3                               = 144;
    LSD_A                                   = 718;
    LSD_ALPHA1                              = 4817;
    LSD_ALPHA2                              = 4579;
    LSD_ALPHA3                              = 4859;
    LSD_ALPHA4                              = 4860;
    LSD_ALPHA5                              = 4866;
    LSD_ALPHA6                              = 4862;
    LSD_ALPHA7                              = 4863;
    LSD_ALPHA8                              = 4864;
    LSD_CRA1                                = 5794;
    LSD_CRA2                                = 5796;
    LSD_CRA3                                = 5798;
    LSD_CRA4                                = 5800;
    LSD_CRC1                                = 5793;
    LSD_CRC2                                = 5795;
    LSD_CRC3                                = 5797;
    LSD_CRC4                                = 5799;
    LSD_E0                                  = 1507;
    LSD_ITER                                = 4788;
    LSD_LCID                                = 45;
    LSD_MAT_AHS                             = 4919;
    LSD_MAT_BHS                             = 4920;
    LSD_MAT_CP                              = 318;
    LSD_MAT_DXX                             = 4938;
    LSD_MAT_DXY                             = 4940;
    LSD_MAT_DYY                             = 4939;
    LSD_MAT_E0MART                          = 4917;
    LSD_MAT_FIT                             = 4928;
    LSD_MAT_HMART                           = 4924;
    LSD_MAT_K1                              = 4925;
    LSD_MAT_K2                              = 4926;
    LSD_MAT_R00                             = 4932;
    LSD_MAT_R45                             = 4933;
    LSD_MAT_R90                             = 4934;
    LSD_MAT_SIG00                           = 4929;
    LSD_MAT_SIG45                           = 4930;
    LSD_MAT_SIG90                           = 4931;
    LSD_MAT_SIGXX                           = 4935;
    LSD_MAT_SIGXY                           = 4937;
    LSD_MAT_SIGYY                           = 4936;
    LSD_MAT_T0                              = 4909;
    LSD_MAT_TA0                             = 4910;
    LSD_MAT_VM0                             = 4918;
    LSD_NODE1                               = 86;
    LSD_NODE2                               = 87;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_OFFANG                              = 5217;
    LSD_SYSTEM                              = 184;
    LSD_TREF                                = 1643;
    LSD_TitleOpt                            = 90;
    MATL133_ISCALE                          = 1829;
    MATL133_P4                              = 1830;
    MATL133_VM0                             = 1832;
    MATL36_HTA                              = 1734;
    MATL36_HTB                              = 1735;
    MATL36_HTC                              = 1736;
    MATL36_HTD                              = 1737;
    MATL36_HTFLAG                           = 1738;
    Nu                                      = 120;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    YoungsModulusAsFunctionOfStrain         = 5619;
    axisOptFlag                             = 4946;
    hardeningOptFlag                        = 5285;
    martensiteOptFlag                       = 1831;
    AOPT_SKEW_FLAG                          = -1;
    LOC_AOPT                                = -1;
    LOC_HARD                                = -1;
    IO_FLAG                                 = -1;
    //empty_string                       = -1;
}

CHECK(COMMON)
{

    LSDYNA_BETA                               >=0.0;
    LSDYNA_BETA                               <=1.0;
    LSD_MAT_CP                                >=0.0;
    LSD_MAT_VM0                               >0.0;
    LSD_MAT_VM0                               <1.0;
}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  YOUNG_MODULUS=SCALAR(E);
  POISSON_RATIO=SCALAR(Nu);
  MATERIAL_PARAMETER_FIT_FLAG=SCALAR(LSD_MAT_FIT);
  HARDENING_PARAMETER=SCALAR(LSDYNA_BETA);
  PLASTIC_ITERATION_FLAG=SCALAR(LSD_ITER);
  K=SCALAR(LSDYNA_K);
  MATERIAL_PARAMETER_E0=SCALAR(LSD_E0);
  N=SCALAR(LSDYNA_N);
  C=SCALAR(LSDYNA_C);
  P=SCALAR(LSDYNA_P);
  HARDENING_LAW=SCALAR(hardeningOptFlag);
  A=SCALAR(LSD_A);
  YIELD_STRESS_IN_00_DIRECTION=SCALAR(LSD_MAT_SIG00);
  YIELD_STRESS_IN_45_DIRECTION=SCALAR(LSD_MAT_SIG45);
  YIELD_STRESS_IN_90_DIRECTION=SCALAR(LSD_MAT_SIG90);
  R_VALUE_IN_00_DIRECTION=SCALAR(LSD_MAT_R00);
  R_VALUE_IN_45_DIRECTION=SCALAR(LSD_MAT_R45);
  R_VALUE_IN_90_DIRECTION=SCALAR(LSD_MAT_R90);
  YIELD_STRESS_IN_00_DIRECTION=SCALAR(LSD_MAT_SIG00);
  YIELD_STRESS_IN_45_DIRECTION=SCALAR(LSD_MAT_SIG45);
  YIELD_STRESS_IN_90_DIRECTION=SCALAR(LSD_MAT_SIG90);
  R_VALUE_IN_00_DIRECTION=SCALAR(LSD_MAT_R00);
  R_VALUE_IN_45_DIRECTION=SCALAR(LSD_MAT_R45);
  R_VALUE_IN_90_DIRECTION=SCALAR(LSD_MAT_R90);
  XX-COMPONENT_OF_STRESS=SCALAR(LSD_MAT_SIGXX);
  YY-COMPONENT_OF_STRESS=SCALAR(LSD_MAT_SIGYY);
  XY-COMPONENT_OF_STRESS=SCALAR(LSD_MAT_SIGXY);
  XX-COMPONENT_OF_TANGENT=SCALAR(LSD_MAT_DXX);
  YY-COMPONENT_OF_TANGENT=SCALAR(LSD_MAT_DYY);
  XY-COMPONENT_OF_TANGENT=SCALAR(LSD_MAT_DXY);
  MATERIAL_AXES_OPTION=SCALAR(axisOptFlag);
  OFFSET_ANGLE=SCALAR(LSD_OFFANG);
 public:
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_BARLAT_YLD2000");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                                    {DIMENSION="density";}
     FLAG(YoungsModulusAsFunctionOfStrain);         
     if(YoungsModulusAsFunctionOfStrain == FALSE)
     {
        SCALAR(E)                                   {DIMENSION="pressure";}
     }
     if(YoungsModulusAsFunctionOfStrain == TRUE)
     {
        DATA(E_AsFunctOfStrain);
     }
 optional:
     SCALAR(Nu)                                     {DIMENSION="DIMENSIONLESS";}
     RADIO(LSD_MAT_FIT)
     {
        ADD(0.0, "0.0: Material parameters are used directly on card3");
        ADD(1.0, "1.0: Material parameters are determined from test data on cards 3 and 4");
     }
     SCALAR(LSDYNA_BETA)                            {DIMENSION="DIMENSIONLESS";}
     RADIO(LSD_ITER)
     {
         ADD(0.0, "0.0: Plane stress algorithm for stress return");
         ADD(1.0, "1.0: Secant iteration algorithm for stress return");
     }
     RADIO(MATL133_ISCALE)
     {
         ADD(0.0, "0.0: Scaling on - reference direction = rolling direction");
         ADD(1.0, "1.0: Scaling  off - reference direction arbitrary ");
     }
     SCALAR(LSDYNA_C)                               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_P)                               {DIMENSION="DIMENSIONLESS";}
 mandatory:
     RADIO(hardeningOptFlag)
     {
         ADD(1, "Exponential hardening");
         ADD(2, "Voce hardening");
         ADD(3, "By curve");
         ADD(4, "Hansel hardening");
         ADD(5, "Gosh hardening");
         ADD(6, "Hocket-Sherby hardening");
     }
     if(hardeningOptFlag == 3)
     {
        DATA(LSD_LCID);
     }
     if(hardeningOptFlag != 3)
     {
 optional:
        SCALAR(LSDYNA_K);
        SCALAR(LSD_E0);
        SCALAR(LSDYNA_N);
     }
     SCALAR(LSD_A)                                {DIMENSION="DIMENSIONLESS";}
     if(LSD_A < 0.0)
     {
         SCALAR(LSD_CRC1);
         SCALAR(LSD_CRA1);
         SCALAR(LSD_CRC2);
         SCALAR(LSD_CRA2);
         SCALAR(LSD_CRC3);
         SCALAR(LSD_CRA3);
         SCALAR(LSD_CRC4);
         SCALAR(LSD_CRA4);
        
     }
     if(LSD_MAT_FIT == 0.0)
     {
         SCALAR(LSD_ALPHA1)                         {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_ALPHA2)                         {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_ALPHA3)                         {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_ALPHA4)                         {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_ALPHA5)                         {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_ALPHA6)                         {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_ALPHA7)                         {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_ALPHA8)                         {DIMENSION="DIMENSIONLESS";}
     }
     if(LSD_MAT_FIT == 1.0)
     {
 mandatory:
         SCALAR(LSD_MAT_SIG00)                      {DIMENSION="pressure";}
         SCALAR(LSD_MAT_SIG45)                      {DIMENSION="pressure";}
         SCALAR(LSD_MAT_SIG90)                      {DIMENSION="pressure";}
 optional:
         SCALAR(LSD_MAT_R00)                        {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_MAT_R45)                        {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_MAT_R90)                        {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_MAT_SIGXX)                      {DIMENSION="pressure";}
         SCALAR(LSD_MAT_SIGYY)                      {DIMENSION="pressure";}
         SCALAR(LSD_MAT_SIGXY)                      {DIMENSION="pressure";}
         SCALAR(LSD_MAT_DXX)                        {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_MAT_DYY)                        {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_MAT_DXY)                        {DIMENSION="DIMENSIONLESS";}
     }
     if(hardeningOptFlag == 4)
     {
         SCALAR(LSD_MAT_CP)                         {DIMENSION="specificheat";}
         SCALAR(LSD_MAT_T0)                         {DIMENSION="k";}
         SCALAR(LSD_TREF)                           {DIMENSION="k";}
         SCALAR(LSD_MAT_TA0)                        {DIMENSION="k";}
         SCALAR(LSDYNA_MAT_A);
         SCALAR(LSDYNA_MAT_B);
         SCALAR(LSDYNA_MAT_C);
         SCALAR(LSDYNA_MAT_D);
         SCALAR(LSDYNA_MAT_P);
         SCALAR(LSDYNA_MAT_Q);
         SCALAR(LSD_MAT_E0MART);
         FLAG(martensiteOptFlag);
     }
     if(hardeningOptFlag == 4 && martensiteOptFlag == FALSE)
     {
         SCALAR(LSD_MAT_VM0);
     }
     if(hardeningOptFlag == 4 && martensiteOptFlag == TRUE)
     {
         DATA(MATL133_VM0);
     }
     if(hardeningOptFlag == 4)
     {
         SCALAR(LSD_MAT_AHS);
         SCALAR(LSD_MAT_BHS);
         SCALAR(LSDYNA_MAT_M);
         SCALAR(LSDYNA_MAT_N);
         SCALAR(LSDYNA_MAT_EPS0);
         SCALAR(LSD_MAT_HMART);
         SCALAR(LSD_MAT_K1);
         SCALAR(LSD_MAT_K2);
     }
     RADIO(axisOptFlag)
     {
        ADD(1, "By element nodes");
        ADD(2, "Define global vector");
        ADD(3, "Define local vector");
        ADD(4, "Pick System");
            
     }
     if(axisOptFlag == 4)
     {
        DATA(LSD_SYSTEM);
     }
     if(axisOptFlag == 3)
     {
        SCALAR(LSD_OFFANG)              {DIMENSION="a";}
     }
     SCALAR(MATL133_P4);
     SCALAR(MATL36_HTFLAG);
     DATA(MATL36_HTA);
     DATA(MATL36_HTB);
     DATA(MATL36_HTC);
     DATA(MATL36_HTD);
     if(axisOptFlag == 2)
     {
        DATA(LSD_NODE1);
        DATA(LSD_NODE2);
        SCALAR(LSDYNA_A1)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_A2)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_A3)               {DIMENSION="DIMENSIONLESS";}
        DATA(LSD_NODE5);                
        DATA(LSD_NODE6);                
        SCALAR(LSDYNA_D1)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_D2)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_D3)               {DIMENSION="DIMENSIONLESS";}
     }
     if(axisOptFlag == 3)
     {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        SCALAR(LSDYNA_V1)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_V2)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_V3)               {DIMENSION="DIMENSIONLESS";}
     }
/*
  optional:
    graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/SHELL,/COMPONENT/TSHELL);
      ADD(COMPONENT,"Parts");
    }
*/
}

FORMAT(Keyword971) 
{
    if(LSD_NODE2 != NONE && LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE2,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE2,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE2,z)],EXPORT);
    }
    if(LSD_NODE3 != NONE && LSD_NODE4 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE5 != NONE && LSD_NODE6 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);

    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }

    if(hardeningOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_HARD,1.0,EXPORT);
    }
    else if(hardeningOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_HARD,2.0,EXPORT);
    }

    COMMENT("$      MID       RHO         E        PR       FIT      BETA      ITER");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,LSD_MAT_FIT,LSDYNA_BETA,LSD_ITER);

    COMMENT("$        K        E0         N         C         P      HARD         A");
    if(IO_FLAG == 2)
    {
        if(hardeningOptFlag != 3)
        {
            
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_K,LSD_E0,LSDYNA_N,LSDYNA_C,LSDYNA_P,LOC_HARD,LSD_A);
        }
        else
        {
            CARD("%10s%10s%10s%10lg%10lg%10d%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_C,LSDYNA_P,FLAGGED_OBJECT(LSD_LCID,AOPT_SKEW_FLAG),LSD_A);
        }
    }

    CARD_PREREAD("%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LOC_HARD);
    if(LOC_HARD == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(hardeningOptFlag,1,IMPORT);
    }
    else if(LOC_HARD == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(hardeningOptFlag,2,IMPORT);
    }
    else
    {
         ASSIGN(hardeningOptFlag,3,IMPORT);
    }
    if(IO_FLAG == 1)
    {
        if(hardeningOptFlag == 3)
        {
            CARD("%10s%10s%10s%10lg%10lg%10d%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_C,LSDYNA_P,FLAGGED_OBJECT(LSD_LCID,AOPT_SKEW_FLAG),LSD_A);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_K,LSD_E0,LSDYNA_N,LSDYNA_C,LSDYNA_P,LOC_HARD,LSD_A);
        }
    }

    if (LSD_A < 0.0)
    {
         COMMENT("$     CRC1      CRA1      CRC2      CRA2      CRC3      CRA3      CRC4      CRA4");
         CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_CRC1,LSD_CRA1,LSD_CRC2,LSD_CRA2,LSD_CRC3,LSD_CRA3,LSD_CRC4,LSD_CRA4);
    }

    if (LSD_MAT_FIT == 0.0)
    {
         COMMENT("$   ALPHA1    ALPHA2    ALPHA3    ALPHA4    ALPHA5    ALPHA6    ALPHA7    ALPHA8");
         CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_ALPHA1,LSD_ALPHA2,LSD_ALPHA3,LSD_ALPHA4,LSD_ALPHA5,LSD_ALPHA6,LSD_ALPHA7,LSD_ALPHA8);
    }

    if (LSD_MAT_FIT == 1.0)
    {

         COMMENT("$    SIG00     SIG45     SIG90       R00       R45       R90");
         CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_SIG00,LSD_MAT_SIG45,LSD_MAT_SIG90,LSD_MAT_R00,LSD_MAT_R45,LSD_MAT_R90);

         COMMENT("$    SIGXX     SIGYY     SIGXY       DXX       DYY       DXY");
         CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_SIGXX,LSD_MAT_SIGYY,LSD_MAT_SIGXY,LSD_MAT_DXX,LSD_MAT_DYY,LSD_MAT_DXY);
    }

    COMMENT("$     AOPT    OFFANG");
    if(IO_FLAG == 2)
    {
        if(axisOptFlag == 1 || axisOptFlag == 2)
        {
            CARD("%10lg",LOC_AOPT);
        }
        else if(axisOptFlag == 3)
        {
            CARD("%10lg%10lg",LOC_AOPT,LSD_OFFANG);
        }
        else
        {
            CARD("%10d",FLAGGED_OBJECT(LSD_SYSTEM,AOPT_SKEW_FLAG));
        }
    }
    CARD_PREREAD("%10lg",LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    if(IO_FLAG == 1)
    {
        if(axisOptFlag == 1 || axisOptFlag == 2)
        {
            CARD("%10lg",LOC_AOPT);
        }
        else if(axisOptFlag == 3)
        {
            CARD("%10lg%10lg",LOC_AOPT,LSD_OFFANG);
        }
        else
        {
            CARD("%10d",FLAGGED_OBJECT(LSD_SYSTEM,AOPT_SKEW_FLAG));
            ASSIGN(axisOptFlag, 4, IMPORT);
        }
    }

    COMMENT("$                                     A1        A2        A3");
    if(axisOptFlag == 2)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
    }
    else 
    {
        BLANK;
    }

    COMMENT("$       V1        V2        V3        D1        D2        D3");
    if(axisOptFlag == 2)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
    }
    else if(axisOptFlag == 3)
    {
        CARD("%10lg%10lg%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3);
    }
    else 
    {
        BLANK;
    }
}

FORMAT(Keyword971_R6.1) 
{
    if(LSD_NODE2 != NONE && LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE2,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE2,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE2,z)],EXPORT);
    }
    if(LSD_NODE3 != NONE && LSD_NODE4 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE5 != NONE && LSD_NODE6 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);

    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }

    if(hardeningOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_HARD,1.0,EXPORT);
    }
    else if(hardeningOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_HARD,2.0,EXPORT);
    }
    else if(hardeningOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_HARD,3.0,EXPORT);
    }
    else if(hardeningOptFlag == 5 && IO_FLAG == 2)
    {
        ASSIGN(LOC_HARD,4.0,EXPORT);
    }
    else if(hardeningOptFlag == 6 && IO_FLAG == 2)
    {
        ASSIGN(LOC_HARD,5.0,EXPORT);
    }

    COMMENT("$      MID       RHO         E        PR       FIT      BETA      ITER    ISCALE");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,SCALAR_OR_OBJECT(YoungsModulusAsFunctionOfStrain,E,E_AsFunctOfStrain),Nu,LSD_MAT_FIT,LSDYNA_BETA,LSD_ITER,MATL133_ISCALE);

    COMMENT("$        K        E0         N         C         P      HARD         A");
    if(IO_FLAG == 2)
    {
        if(hardeningOptFlag != 3)
        {
            
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_K,LSD_E0,LSDYNA_N,LSDYNA_C,LSDYNA_P,LOC_HARD,LSD_A);
        }
        else
        {
            CARD("%10s%10s%10s%10lg%10lg%10d%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_C,LSDYNA_P,FLAGGED_OBJECT(LSD_LCID,AOPT_SKEW_FLAG),LSD_A);
        }
    }

    CARD_PREREAD("%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LOC_HARD);
    if(LOC_HARD == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(hardeningOptFlag,1,IMPORT);
    }
    else if(LOC_HARD == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(hardeningOptFlag,2,IMPORT);
    }
    else if(LOC_HARD == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(hardeningOptFlag,4,IMPORT);
    }
    else if(LOC_HARD == 4.0 && IO_FLAG == 1)
    {
        ASSIGN(hardeningOptFlag,5,IMPORT);
    }
    else if(LOC_HARD == 5.0 && IO_FLAG == 1)
    {
        ASSIGN(hardeningOptFlag,6,IMPORT);
    }
    else
    {
         ASSIGN(hardeningOptFlag,3,IMPORT);
    }
    if(IO_FLAG == 1)
    {
        if(hardeningOptFlag == 3)
        {
            CARD("%10s%10s%10s%10lg%10lg%10d%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_C,LSDYNA_P,FLAGGED_OBJECT(LSD_LCID,AOPT_SKEW_FLAG),LSD_A);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_K,LSD_E0,LSDYNA_N,LSDYNA_C,LSDYNA_P,LOC_HARD,LSD_A);
        }
    }

    if (LSD_A < 0.0)
    {
         COMMENT("$     CRC1      CRA1      CRC2      CRA2      CRC3      CRA3      CRC4      CRA4");
         CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_CRC1,LSD_CRA1,LSD_CRC2,LSD_CRA2,LSD_CRC3,LSD_CRA3,LSD_CRC4,LSD_CRA4);
    }

    if (LSD_MAT_FIT == 0.0)
    {
         COMMENT("$   ALPHA1    ALPHA2    ALPHA3    ALPHA4    ALPHA5    ALPHA6    ALPHA7    ALPHA8");
         CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_ALPHA1,LSD_ALPHA2,LSD_ALPHA3,LSD_ALPHA4,LSD_ALPHA5,LSD_ALPHA6,LSD_ALPHA7,LSD_ALPHA8);
    }

    if (LSD_MAT_FIT == 1.0)
    {

         COMMENT("$    SIG00     SIG45     SIG90       R00       R45       R90");
         CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_SIG00,LSD_MAT_SIG45,LSD_MAT_SIG90,LSD_MAT_R00,LSD_MAT_R45,LSD_MAT_R90);

         COMMENT("$    SIGXX     SIGYY     SIGXY       DXX       DYY       DXY");
         CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_SIGXX,LSD_MAT_SIGYY,LSD_MAT_SIGXY,LSD_MAT_DXX,LSD_MAT_DYY,LSD_MAT_DXY);
    }

    if (hardeningOptFlag == 4)
    {
         COMMENT("$       CP        T0      TREF       TA0");
         CARD("%10lg%10lg%10lg%10lg",LSD_MAT_CP,LSD_MAT_T0,LSD_TREF,LSD_MAT_TA0);

         COMMENT("$        A         B         C         D         P         Q    E0MART       VM0");
         CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_MAT_A,LSDYNA_MAT_B,LSDYNA_MAT_C,LSDYNA_MAT_D,LSDYNA_MAT_P,LSDYNA_MAT_Q,LSD_MAT_E0MART,SCALAR_OR_OBJECT(martensiteOptFlag,LSD_MAT_VM0,MATL133_VM0));

         COMMENT("$      AHS       BHS         M         N      EPS0     HMART        K1        K2");
         CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_AHS,LSD_MAT_BHS,LSDYNA_MAT_M,LSDYNA_MAT_N,LSDYNA_MAT_EPS0,LSD_MAT_HMART,LSD_MAT_K1,LSD_MAT_K2);
    }

    COMMENT("$     AOPT    OFFANG        P4    HTFLAG       HTA       HTB       HTC       HTD");
    if(IO_FLAG == 2)
    {
        if(axisOptFlag == 1 || axisOptFlag == 2)
        {
            CARD("%10lg%10s%10lg%10lg%10lg%10lg%10lg%10lg",LOC_AOPT,_BLANK_,MATL133_P4,MATL36_HTFLAG,MATL36_HTA,MATL36_HTB,MATL36_HTC,MATL36_HTD);
        }
        else if(axisOptFlag == 3)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LOC_AOPT,LSD_OFFANG,MATL133_P4,MATL36_HTFLAG,MATL36_HTA,MATL36_HTB,MATL36_HTC,MATL36_HTD);
        }
        else
        {
            CARD("%10d%10s%10lg%10lg%10lg%10lg%10lg%10lg",FLAGGED_OBJECT(LSD_SYSTEM,AOPT_SKEW_FLAG),_BLANK_,MATL133_P4,MATL36_HTFLAG,MATL36_HTA,MATL36_HTB,MATL36_HTC,MATL36_HTD);
        }
    }
    CARD_PREREAD("%10lg",LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    if(IO_FLAG == 1)
    {
        if(axisOptFlag == 1 || axisOptFlag == 2)
        {
            CARD("%10lg%10s%10lg%10lg%10lg%10lg%10lg%10lg",LOC_AOPT,_BLANK_,MATL133_P4,MATL36_HTFLAG,MATL36_HTA,MATL36_HTB,MATL36_HTC,MATL36_HTD);
        }
        else if(axisOptFlag == 3)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LOC_AOPT,LSD_OFFANG,MATL133_P4,MATL36_HTFLAG,MATL36_HTA,MATL36_HTB,MATL36_HTC,MATL36_HTD);
        }
        else
        {
            CARD("%10d%10s%10lg%10lg%10lg%10lg%10lg%10lg",FLAGGED_OBJECT(LSD_SYSTEM,AOPT_SKEW_FLAG),_BLANK_,MATL133_P4,MATL36_HTFLAG,MATL36_HTA,MATL36_HTB,MATL36_HTC,MATL36_HTD);
            ASSIGN(axisOptFlag, 4, IMPORT);
        }
    }

    COMMENT("$                                     A1        A2        A3");
    if(axisOptFlag == 2)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
    }
    else 
    {
        BLANK;
    }

    COMMENT("$       V1        V2        V3        D1        D2        D3");
    if(axisOptFlag == 2)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
    }
    else if(axisOptFlag == 3)
    {
        CARD("%10lg%10lg%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3);
    }
    else 
    {
        BLANK;
    }
}
