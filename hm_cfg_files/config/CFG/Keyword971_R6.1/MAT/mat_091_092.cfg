//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- mat_091-092.cfg ---

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES

    //Card 1
    LSD_MID                                 = VALUE(MATERIAL, "Material identification");
    Rho                                     = VALUE(FLOAT,    "Mass density");
    LSD_C1                                  = VALUE(FLOAT,    "Hyperelastic coefficient");
    LSD_C2                                  = VALUE(FLOAT,    "Hyperelastic coefficient");
    LSD_C3                                  = VALUE(FLOAT,    "Hyperelastic coefficient");
    LSD_C4                                  = VALUE(FLOAT,    "Hyperelastic coefficient");
    LSD_C5                                  = VALUE(FLOAT,    "Hyperelastic coefficient");

    //Card 2
    LSD_XK                                  = VALUE(FLOAT,    "Bulk Modulus");
    LSD_XLAM                                = VALUE(FLOAT,    "Stretch ratio at which fibers are straightened");
    LSD_FANG                                = VALUE(FLOAT,    "Fiber angle in local shell coordinate system (shells only)");
    LSD_XLAM0                               = VALUE(FLOAT,    "Initial fiber stretch");
    LSD_FAILSF                              = VALUE(FLOAT,    "Stretch ratio for ligament fibers at failure");
    LSD_FAILSM                              = VALUE(FLOAT,    "Stretch ratio for surrounding matrix material at failure");
    LSD_FAILSHR                             = VALUE(FLOAT,    "Shear strain at failure at a material point");

    //Card 3
    LSD_AOPT                                = VALUE(FLOAT,    "Material axes option");

    //A
    LSDYNA_XP                               = VALUE(FLOAT,    "X-coordinate of point");
    LSDYNA_YP                               = VALUE(FLOAT,    "Y-coordinate of point");
    LSDYNA_ZP                               = VALUE(FLOAT,    "Z-coordinate of point");

    LSDYNA_A1                               = VALUE(FLOAT,    "X-coordinate of vector a");
    LSDYNA_A2                               = VALUE(FLOAT,    "Y-coordinate of vector a");
    LSDYNA_A3                               = VALUE(FLOAT,    "Z-coordinate of vector a");

    LSDYNA_V1                               = VALUE(FLOAT,    "X-coordinate of vector v");
    LSDYNA_V2                               = VALUE(FLOAT,    "Y-coordinate of vector v");
    LSDYNA_V3                               = VALUE(FLOAT,    "Z-coordinate of vector v");

    LSD_SYSTEM                              = VALUE(SYSTEM,   "Coordinate system ID number");

    //B
    LSDYNA_D1                               = VALUE(FLOAT,    "X-coordinate of point d");
    LSDYNA_D2                               = VALUE(FLOAT,    "Y-coordinate of point d");
    LSDYNA_D3                               = VALUE(FLOAT,    "Z-coordinate of point d");

    //Card 4
    LSD_LA1                                 = VALUE(FLOAT,    "Local fiber orientation vector (bricks only)");
    LSD_LA2                                 = VALUE(FLOAT,    "Local fiber orientation vector (bricks only)");
    LSD_LA3                                 = VALUE(FLOAT,    "Local fiber orientation vector (bricks only)");
    LSD_MACF                                = VALUE(INT,      "Material axes change flag for brick elements");

    //Prony Series Cards:

    //Card 5
    LSD_S1                                  = VALUE(FLOAT,    "Factor in the Prony series");
    LSD_S2                                  = VALUE(FLOAT,    "Factor in the Prony series");
    LSD_S3                                  = VALUE(FLOAT,    "Factor in the Prony series");
    LSD_S4                                  = VALUE(FLOAT,    "Factor in the Prony series");
    LSD_S5                                  = VALUE(FLOAT,    "Factor in the Prony series");
    LSD_S6                                  = VALUE(FLOAT,    "Factor in the Prony series");

    //Card 6
    LSD_T1                                  = VALUE(FLOAT,    "Characteristic time for Prony series relaxation kernel for VISCO option");
    LSD_T2                                  = VALUE(FLOAT,    "Characteristic time for Prony series relaxation kernel for VISCO option");
    LSD_T3                                  = VALUE(FLOAT,    "Characteristic time for Prony series relaxation kernel for VISCO option");
    LSD_T4                                  = VALUE(FLOAT,    "Characteristic time for Prony series relaxation kernel for VISCO option");
    LSD_T5                                  = VALUE(FLOAT,    "Characteristic time for Prony series relaxation kernel for VISCO option");
    LSD_T6                                  = VALUE(FLOAT,    "Characteristic time for Prony series relaxation kernel for VISCO option");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING,   "Solver Keyword");
    LSD_TitleOpt                            = VALUE(INT,      "Title Option");
    axisOptFlag                             = VALUE(INT,      "axisOptFlag");
    LSD_NODE1                               = VALUE(NODE,     "Node1");
    LSD_NODE3                               = VALUE(NODE,     "Node3");
    LSD_NODE4                               = VALUE(NODE,     "Node4");
    LSD_NODE5                               = VALUE(NODE,     "Node5");
    LSD_NODE6                               = VALUE(NODE,     "Node6");
    LSD_NODE7                               = VALUE(NODE,     "Node7");
    LSD_NODE8                               = VALUE(NODE,     "Node8");

    keyOpt                                  = VALUE(INT,      "Keyword Option");
    LSD_AOPT_flag                           = VALUE(INT,      "AOPT flag");
    IO_FLAG                                 = VALUE(INT,      "IOFLAG");
    _opt                                    = VALUE(STRING,   "keyword opt");
    TITLE                                   = VALUE(STRING,   "Title");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES

    //Card 1
    LSD_MID                                 = 2458;
    Rho                                     = 118;
    LSD_C1                                  = 1501;
    LSD_C2                                  = 1502;
    LSD_C3                                  = 1503;
    LSD_C4                                  = 1504;
    LSD_C5                                  = 1505;

    //Card 2
    LSD_XK                                  = -1;
    LSD_XLAM                                = -1;
    LSD_FANG                                = -1;
    LSD_XLAM0                               = -1;
    LSD_FAILSF                              = -1;
    LSD_FAILSM                              = -1;
    LSD_FAILSHR                             = -1;

    //Card 3
    LSD_AOPT                                = 5052;

    //A
    LSDYNA_XP                               = 136;
    LSDYNA_YP                               = 137;
    LSDYNA_ZP                               = 138;

    LSDYNA_A1                               = 139;
    LSDYNA_A2                               = 140;
    LSDYNA_A3                               = 141;

    LSDYNA_V1                               = 142;
    LSDYNA_V2                               = 143;
    LSDYNA_V3                               = 144;

    LSD_SYSTEM                              = 184;

    //B
    LSDYNA_D1                               = 145;
    LSDYNA_D2                               = 146;
    LSDYNA_D3                               = 147;

    //Card 4
    LSD_LA1                                 = -1;
    LSD_LA2                                 = -1;
    LSD_LA3                                 = -1;
    LSD_MACF                                = -1;

    //Prony Series Cards:

    //Card 5
    LSD_S1                                  = 1520;
    LSD_S2                                  = 1521;
    LSD_S3                                  = 1522;
    LSD_S4                                  = -1;
    LSD_S5                                  = -1;
    LSD_S6                                  = -1;

    //Card 6
    LSD_T1                                  = 431;
    LSD_T2                                  = 432;
    LSD_T3                                  = 433;
    LSD_T4                                  = 434;
    LSD_T5                                  = 1587;
    LSD_T6                                  = 1588;

    //HM INTERNAL
    KEYWORD_STR                             = 9000;
    LSD_TitleOpt                            = 90;
    axisOptFlag                             = 4946;

    keyOpt                                  = -1;
    LSD_AOPT_flag                           = -1;
    IO_FLAG                                 = -1;
    _opt                                    = -1;
    TITLE                                   = -1;
}

DEFAULTS(COMMON)
{
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*MAT_SOFT_TISSUE");

    FLAG(keyOpt, "keyOpt");
    if(keyOpt == 1)
    {
        ASSIGN(KEYWORD_STR, "_VISCO");
    }

    if(LSD_TitleOpt == 1)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
        SCALAR(TITLE, "TITLE")          { DIMENSION = "DIMENSIONLESS" ; }
    }

    DATA(LSD_MID,       "MID");
    SCALAR(Rho,         "RO")                { DIMENSION = "density" ; }
    SCALAR(LSD_C1,      "C1")                { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_C2,      "C2")                { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_C3,      "C3")                { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_C4,      "C4")                { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_C5,      "C5")                { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_XK,      "XK")                { DIMENSION = "VISCOUS BULK MODULUS" ; }
    SCALAR(LSD_XLAM,    "XLAM")              { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_FANG,    "FANG")              { DIMENSION = "a" ; }
    SCALAR(LSD_XLAM0,   "XLAM0")             { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_FAILSF,  "FAILSF")            { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_FAILSM,  "FAILSM")            { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_FAILSHR, "FAILSHR")           { DIMENSION = "strain_rate" ; }

    mandatory:
        RADIO(axisOptFlag, "axisOptFlag")
        {
            ADD(1, "0.0: Nodes 1, 2, and 4 of an element are identical to the nodes used for the definition of a coordinate system");
            ADD(2, "1.0: Locally orthotropic with material axes determined by a point in space and the global location of the element center; this is the a-direction");
            ADD(3, "2.0: Globally orthotropic with material axes determined by vectors");
            ADD(4, "3.0: Locally orthotropic material axes determined by a line in the plane of the element defined by the cross product of the vector v with the element normal");
            ADD(5, "4.0: Locally orthotropic in cylindrical coordinate system with the material axes determined by a vector v, and an originating point, p, which define the centerline axis");
            ADD(6, "5.0: The absolute value of AOPT is a coordinate system ID number");
        }
    optional:
    if(axisOptFlag == 2 || axisOptFlag == 5)
    {
        mandatory:
            DATA(LSD_NODE1);
            SCALAR(LSDYNA_XP, "XP")          { DIMENSION= "l" ; }
            SCALAR(LSDYNA_YP, "YP")          { DIMENSION= "l" ; }
            SCALAR(LSDYNA_ZP, "ZP")          { DIMENSION= "l" ; }
    }
    else if(axisOptFlag == 3)
    {
        mandatory:
            DATA(LSD_NODE3);
            DATA(LSD_NODE4);
            SCALAR(LSDYNA_A1, "A1");
            SCALAR(LSDYNA_A2, "A2");
            SCALAR(LSDYNA_A3, "A3");
    }
    else if(axisOptFlag == 4  || axisOptFlag == 5)
    {
        mandatory:
            DATA(LSD_NODE7);
            DATA(LSD_NODE8);
            SCALAR(LSDYNA_V1, "V1");
            SCALAR(LSDYNA_V2, "V2");
            SCALAR(LSDYNA_V3, "V3");
    }
    else if(axisOptFlag == 6)
    {
        DATA(LSD_SYSTEM, "CID");
    }

    if(axisOptFlag == 3)
    {
            SCALAR(LSDYNA_D1, "D1")          { DIMENSION = "l" ; }
            SCALAR(LSDYNA_D2, "D2")          { DIMENSION = "l" ; }
            SCALAR(LSDYNA_D3, "D3")          { DIMENSION = "l" ; }
    }

    SCALAR(LSD_LA1,    "LA1")                { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_LA2,    "LA2")                { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_LA3,    "LA3")                { DIMENSION = "DIMENSIONLESS" ; }

    mandatory:
    RADIO(LSD_MACF, "MACF")
    {
        ADD(1, "1: No change, default");
        ADD(2, "2: Switch material axes a and b");
        ADD(3, "3: Switch material axes a and c");
        ADD(4, "4: Switch material axes b and c");
    }
    optional:
    if(keyOpt == 1)
    {
        SCALAR(LSD_S1,    "S1")              { DIMENSION = "DIMENSIONLESS" ; }
        SCALAR(LSD_S2,    "S2")              { DIMENSION = "DIMENSIONLESS" ; }
        SCALAR(LSD_S3,    "S3")              { DIMENSION = "DIMENSIONLESS" ; }
        SCALAR(LSD_S4,    "S4")              { DIMENSION = "DIMENSIONLESS" ; }
        SCALAR(LSD_S5,    "S5")              { DIMENSION = "DIMENSIONLESS" ; }
        SCALAR(LSD_S6,    "S6")              { DIMENSION = "DIMENSIONLESS" ; }
        SCALAR(LSD_T1,    "T1")              { DIMENSION = "t" ; }
        SCALAR(LSD_T2,    "T2")              { DIMENSION = "t" ; }
        SCALAR(LSD_T3,    "T3")              { DIMENSION = "t" ; }
        SCALAR(LSD_T4,    "T4")              { DIMENSION = "t" ; }
        SCALAR(LSD_T5,    "T5")              { DIMENSION = "t" ; }
        SCALAR(LSD_T6,    "T6")              { DIMENSION = "t" ; }
    }
}

FORMAT(Keyword971_R6.1)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);

    ASSIGN(LSD_AOPT_flag, 1, IMPORT);
    ASSIGN(LSD_AOPT_flag, 1, EXPORT);

    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    if(LSD_NODE3 != NONE && LSD_NODE4 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE5 != NONE && LSD_NODE6 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    if(LSD_NODE7 != NONE && LSD_NODE8 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }

    if(IO_FLAG == 0)
    {
        if(keyOpt == 0)
        {
            if(LSD_TitleOpt == 0)
                HEADER("*MAT_SOFT_TISSUE");
            else
                HEADER("*MAT_SOFT_TISSUE_TITLE");
        }
        else
        {
            if(LSD_TitleOpt == 0)
                HEADER("*MAT_SOFT_TISSUE_VISCO");
            else
                HEADER("*MAT_SOFT_TISSUE_VISCO_TITLE");
        }
    }
    else // IMPORT
    {
        HEADER("*MAT_SOFT_TISSUE%-20s", _opt);

        ASSIGN(LSD_TitleOpt, _FIND(_opt, "_TITLE"), IMPORT);
        ASSIGN(keyOpt,       _FIND(_opt, "_VISCO"), IMPORT);
    }

    if(IO_FLAG == 0 && LSD_TitleOpt == 1)
    {
        CARD("%-80s", TITLE);
    }

    //Card 1
    COMMENT("$      MID        RO        C1        C2        C3        C4        C5");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg", _ID_, Rho, LSD_C1, LSD_C2, LSD_C3, LSD_C4, LSD_C5);

    //Card 2
    COMMENT("$       XK      XLAM      FANG     XLAM0    FAILSF    FAILSM   FAILSHR");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg", LSD_XK, LSD_XLAM, LSD_FANG, LSD_XLAM0, LSD_FAILSF, LSD_FAILSM, LSD_FAILSHR);

    //Card 3

    //Export
    if(IO_FLAG == 0)
    {
        if(axisOptFlag == 1)
        {
            ASSIGN(LSD_AOPT, 0.0, EXPORT);
        }
        else if(axisOptFlag == 2)
        {
            ASSIGN(LSD_AOPT, 1.0, EXPORT);
        }
        else if(axisOptFlag == 3)
        {
            ASSIGN(LSD_AOPT, 2.0, EXPORT);
        }
        else if(axisOptFlag == 4)
        {
            ASSIGN(LSD_AOPT, 3.0, EXPORT);
        }
        else if(axisOptFlag == 5)
        {
            ASSIGN(LSD_AOPT, 4.0, EXPORT);
        }
        else if(axisOptFlag == 6)
        {
            ASSIGN(LSD_AOPT, 5.0, EXPORT);
        }
    }

    //Import
    CARD_PREREAD("%10lg", LSD_AOPT);
    if(LSD_AOPT == 0.0 && IO_FLAG == 1)
        ASSIGN(axisOptFlag, 1, IMPORT);
    else if(LSD_AOPT == 1.0 && IO_FLAG == 1)
        ASSIGN(axisOptFlag, 2, IMPORT);
    else if(LSD_AOPT == 2.0 && IO_FLAG == 1)
        ASSIGN(axisOptFlag, 3, IMPORT);
    else if(LSD_AOPT == 3.0 && IO_FLAG == 1)
        ASSIGN(axisOptFlag, 4, IMPORT);
    else if(LSD_AOPT == 4.0 && IO_FLAG == 1)
        ASSIGN(axisOptFlag, 5, IMPORT);
    else if(LSD_AOPT == 5.0 && IO_FLAG == 1)
        ASSIGN(axisOptFlag, 6, IMPORT);

    if(axisOptFlag == 1)
    {
        COMMENT("$     AOPT");
        CARD("%10lg", LSD_AOPT);
    }
    else if(axisOptFlag == 2)
    {
        COMMENT("$     AOPT        AX        AY        AZ");
        CARD("%10lg%10lg%10lg%10lg", LSD_AOPT, LSDYNA_XP, LSDYNA_YP, LSDYNA_ZP);
    }
    else if(axisOptFlag == 3)
    {
        COMMENT("$     AOPT        AX        AY        AZ        BX        BY        BZ");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg", LSD_AOPT, LSDYNA_A1, LSDYNA_A2, LSDYNA_A3, LSDYNA_D1, LSDYNA_D2, LSDYNA_D3);
    }
    else if(axisOptFlag == 4)
    {
        COMMENT("$     AOPT        AX        AY        AZ");
        CARD("%10lg%10lg%10lg%10lg", LSD_AOPT, LSDYNA_V1, LSDYNA_V2, LSDYNA_V3);
    }
    else if(axisOptFlag == 5)
    {
        COMMENT("$     AOPT        AX        AY        AZ        BX        BY        BZ");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg", LSD_AOPT, LSDYNA_V1, LSDYNA_V2, LSDYNA_V3, LSDYNA_XP, LSDYNA_YP, LSDYNA_ZP);
    }
    else if(axisOptFlag == 6)
    {
        COMMENT("$     AOPT       CID");
        CARD("%10lg%10lg", LSD_AOPT, SCALAR_OR_OBJECT(LSD_AOPT_flag, LSD_AOPT, LSD_SYSTEM));
    }

    //Card 4
    COMMENT("$      LA1       LA2       LA3      MACF");
    CARD("%10lg%10lg%10lg%10d", LSD_LA1, LSD_LA2, LSD_LA3, LSD_MACF);

    //Prony Series Cards:

    if(keyOpt == 1)
    {
        //Card 5
        COMMENT("$       S1        S2        S3        S4        S5        S6");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg", LSD_S1, LSD_S2, LSD_S3, LSD_S4, LSD_S5, LSD_S6);

        //Card 6
        COMMENT("$       T1        T2        T3        T4        T5        T6");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg", LSD_T1, LSD_T2, LSD_T3, LSD_T4, LSD_T5, LSD_T6);
    }
}