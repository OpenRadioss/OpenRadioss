//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 252
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    EncTypeEnumField                        = VALUE(INT,  "Type");
    RegTypeEnumField                        = VALUE(INT,  "Type");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    E                                       = VALUE(FLOAT,  "Young's modulus");
    MAT252_A10                              = VALUE(FLOAT,  "Yield function parameter");
    MAT252_A1H                              = VALUE(FLOAT,  "Yield function parameter:");
    MAT252_A20                              = VALUE(FLOAT,  "Yield function parameter:");
    MAT252_A2H                              = VALUE(FLOAT,  "Yield function parameter:");
    MAT252_A2S                              = VALUE(FLOAT,  "Plastic potential parameter");
    MAT252_B                                = VALUE(FLOAT,  "Decay parameter");
    MAT252_C                                = VALUE(FLOAT,  "Strain rate coefficient");
    MAT252_D1                               = VALUE(FLOAT,  "Johnson & Cook failure parameter");
    MAT252_D1C                              = VALUE(FLOAT,  "Johnson & Cook damage threshold parameter");
    MAT252_D2                               = VALUE(FLOAT,  "Johnson & Cook failure parameter");
    MAT252_D2C                              = VALUE(FLOAT,  "Johnson & Cook damage threshold parameter");
    MAT252_D3                               = VALUE(FLOAT,  "Johnson & Cook failure parameter");
    MAT252_D4                               = VALUE(FLOAT,  "Johnson & Cook rate dependent failure parameter");
    MAT252_DOPT                             = VALUE(INT,  "Damage criterion flag");
    MAT252_FLG                              = VALUE(INT,  "Flag for yield functions");
    MAT252_GAMM                             = VALUE(FLOAT,  "Maximum threshold strain rate");
    MAT252_GAMO                             = VALUE(FLOAT,  "Quasi-static threshold strain rate");
    MAT252_H                                = VALUE(FLOAT,  "Hardening modulus");
    MAT252_JCFL                             = VALUE(INT,  "failure criterion flag");
    MAT252_POW                              = VALUE(FLOAT,  "Exponent of phenomenological damage");
    MAT252_Q                                = VALUE(FLOAT,  "Isotropic nonlinear hardening modulus");
    MAT252_TAUO                             = VALUE(FLOAT,  "Initial shear yield stress");
    MATL252_LCSS                            = VALUE(FUNCT,  "curve for yield stress vs plastic strain");
    Nu                                      = VALUE(FLOAT,  "Poisson's ratio");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    IO_FLAG                                 = VALUE(INT, "io flag");
    _HMCOMMENTSFLAG                         = VALUE(INT, "Write HM Comments");
    TITLE                                   = VALUE(STRING, "Title");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    EncTypeEnumField                        = 5828;
    RegTypeEnumField                        = 5827;
    E                                       = 119;
    LSD_TitleOpt                            = 90;
    MAT252_A10                              = 8430;
    MAT252_A1H                              = 8432;
    MAT252_A20                              = 8431;
    MAT252_A2H                              = 8434;
    MAT252_A2S                              = 8435;
    MAT252_B                                = 8425;
    MAT252_C                                = 8427;
    MAT252_D1                               = 8437;
    MAT252_D1C                              = 8494;
    MAT252_D2                               = 8438;
    MAT252_D2C                              = 8495;
    MAT252_D3                               = 8439;
    MAT252_D4                               = 8440;
    MAT252_DOPT                             = 8423;
    MAT252_FLG                              = 8421;
    MAT252_GAMM                             = 8429;
    MAT252_GAMO                             = 8428;
    MAT252_H                                = 8426;
    MAT252_JCFL                             = 8422;
    MAT252_POW                              = 8436;
    MAT252_Q                                = 8445;
    MAT252_TAUO                             = 8424;
    MATL252_LCSS                            = 8444;
    Nu                                      = 120;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    IO_FLAG                                 = -1;
    TITLE                                   = -1;
    //empty_string                       = -1;
}
DRAWABLES(COMMON) {
 public:
   MASS_DENSITY=SCALAR(Rho);
   YOUNG_MODULUS=SCALAR(E);
   POISSON_RATIO=SCALAR(Nu);
 private:
   G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
   C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public: 
   //SOUND_SPEED is speed for ISDO = 0 and 1
   SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
   SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
   SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}
DEFAULTS(COMMON)
{
}

CHECK(COMMON)
{
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*MAT_TOUGHENED_ADHESIVE_POLYMER");
    RADIO(CommentEnumField)
    {
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    }
    if( CommentEnumField == 2)
    {
       SIZE(Num_Comments);
       ARRAY(Num_Comments,"")
       {
          SCALAR(Comments);
       }
    }
    FLAG( LSD_TitleOpt);
    if(LSD_TitleOpt == 1)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    }
mandatory:
    SCALAR(Rho);
    SCALAR(E);
    SCALAR(Nu);
optional:
    RADIO(MAT252_FLG)
    {
       ADD(0, "0.0: Cap in tension and Drucker & Prager in compression");
       ADD(2, "2.0: Cap in tension. and von Mises in compression.");
    }
    RADIO(MAT252_JCFL)
    {
       ADD(0, "0.0: use triaxiality factor only in tension");
       ADD(1, "1.0: use triaxiality factor in tension and compression");
    }
    RADIO(MAT252_DOPT)
    {
       ADD(0, "0.0: damage model uses damage plastic strain");
       ADD(1, "1.0: damage model uses plastic arc length");
    }
     DATA(MATL252_LCSS);
    SCALAR(MAT252_TAUO);
    SCALAR(MAT252_Q);
    SCALAR(MAT252_B);
    SCALAR(MAT252_H);
    SCALAR(MAT252_C);
    SCALAR(MAT252_GAMO);
    SCALAR(MAT252_GAMM);
    SCALAR(MAT252_A10);
    SCALAR(MAT252_A20);
    SCALAR(MAT252_A1H);
    SCALAR(MAT252_A2H);
    SCALAR(MAT252_A2S);
    SCALAR(MAT252_POW);
    SCALAR(MAT252_D1);
    SCALAR(MAT252_D2);
    SCALAR(MAT252_D3);
    SCALAR(MAT252_D4);
    SCALAR(MAT252_D1C);
    SCALAR(MAT252_D2C);

}

// File format
FORMAT(Keyword971_R6.1) 
{
    
    //
    COMMENT("$      MID       RHO         E        PR       FLG      JCFL      DOPT");
    CARD("%10d%10lg%10lg%10lg%10d%10d%10d",_ID_,Rho,E,Nu,MAT252_FLG,MAT252_JCFL,MAT252_DOPT);
    //
    COMMENT("$     LCSS      TAUO         Q         B         H         C      GAM0      GAMM");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",MATL252_LCSS,MAT252_TAUO,MAT252_Q,MAT252_B,MAT252_H,MAT252_C,MAT252_GAMO,MAT252_GAMM);
    //
    COMMENT("$      A10       A20       A1H       A2H       A2S       POW");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",MAT252_A10,MAT252_A20,MAT252_A1H,MAT252_A2H,MAT252_A2S,MAT252_POW);
    //
    COMMENT("$                           D1        D2        D3        D4       D1C       D2C");
    CARD("%10s%10s%10lg%10lg%10lg%10lg%10lg%10lg",_BLANK_,_BLANK_,MAT252_D1,MAT252_D2,MAT252_D3,MAT252_D4,MAT252_D1C,MAT252_D2C);
}
