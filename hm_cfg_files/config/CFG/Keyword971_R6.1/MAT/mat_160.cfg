//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 160
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    Rho                                     = VALUE(FLOAT,  "Material density");
    LSD_MAT_MU                              = VALUE(FLOAT,  "Dynamic viscosity coefficient");
    LSD_MAT_PC                              = VALUE(FLOAT,  "Pressure cutoff");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    MAT160_DTOUT                            = VALUE(FLOAT,  "Time interval between screen outputs");
    MAT160_METH                             = VALUE(INT,  "Conjugate gradient methods");
    MAT160_NCG                              = VALUE(INT,  "Maximum number of loops in the conjugate gradient");
    MAT160_TOL                              = VALUE(FLOAT,  "Tolerance for the convergence of the conjugate gradient");

}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    LSD_MAT_MU                              = 1162;
    LSD_MAT_PC                              = 282;
    LSD_TitleOpt                            = 90;
    MAT160_DTOUT                            = 1302;
    MAT160_METH                             = 1304;
    MAT160_NCG                              = 1303;
    MAT160_TOL                              = 1301;
    Num_Comments                            = 3101;
    Rho                                     = 118;

}

CHECK(COMMON)
{

    LSD_MAT_PC                                <=0;
}

DEFAULTS(COMMON)
{

    MAT160_DTOUT    = 1E10;
    MAT160_METH    = -7;
    MAT160_NCG    = 50;
    MAT160_TOL    = 1E-8;

}

DRAWABLES(COMMON) {
       public:
       MASS_DENSITY=SCALAR(Rho);
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_ALE_INCOMPRESSIBLE");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                                { DIMENSION="density";  }
 optional:    
     SCALAR(LSD_MAT_PC)                         { DIMENSION="pressure";      }
     SCALAR(LSD_MAT_MU)                         { DIMENSION="DIMENSIONLESS"; }
     SCALAR(MAT160_TOL)                         { DIMENSION="DIMENSIONLESS"; }
     SCALAR(MAT160_DTOUT)                       { DIMENSION="DIMENSIONLESS"; }
     SCALAR(MAT160_NCG)                         { DIMENSION="DIMENSIONLESS"; }
     RADIO(MAT160_METH)
     {
        ADD(-6, "-6: Solves the poisson equation for the pressure");
        ADD(-7, "-7: Solves the poisson equation for the pressure increment");
     }
/*
       graphical SUPPORT("Part(s) to which material is applied")
        {
          OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D);   
          ADD(COMPONENT,"Parts");
        }
*/
}

// File format
FORMAT(Keyword971_R6.1) 
{
    //
    COMMENT("$      MID       RHO        PC        MU");
    CARD("%10d%10lg%10lg%10lg",_ID_,Rho,LSD_MAT_PC,LSD_MAT_MU);
    //
    COMMENT("$      TOL     DTOUT       NCG      METH");
    CARD("%10lg%10lg%10d%10d",MAT160_TOL,MAT160_DTOUT,MAT160_NCG,MAT160_METH);
    //

}
