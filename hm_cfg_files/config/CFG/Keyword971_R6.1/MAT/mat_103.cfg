//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 103
//

ATTRIBUTES(COMMON)
{
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    LSDYNA_FAIL                             = VALUE(FLOAT,  "FAIL");
    LSD_LCID                                = VALUE(FUNCT,  "Load curve ID or Table ID");
    LSD_MAT103_A1                           = VALUE(FLOAT,  "define components of vector a");
    LSD_MAT103_A2                           = VALUE(FLOAT,  "define components of vector a");
    LSD_MAT103_A3                           = VALUE(FLOAT,  "define components of vector a");
    LSD_MAT103_ALPHA                        = VALUE(FLOAT,  "distribution of hardening used in the curve-fitting");
    LSD_MAT103_BETA                         = VALUE(FLOAT,  "Material angle in degrees");
    LSD_MAT103_CR1                          = VALUE(FLOAT,  "Isotropic hardening parameter CR1");
    LSD_MAT103_CR2                          = VALUE(FLOAT,  "Isotropic hardening parameter CR2");
    LSD_MAT103_CX1                          = VALUE(FLOAT,  "Kinematic hardening parameter CX1");
    LSD_MAT103_CX2                          = VALUE(FLOAT,  "Kinematic hardening parameter CX2");
    LSD_MAT103_D1                           = VALUE(FLOAT,  "define components of vector d");
    LSD_MAT103_D2                           = VALUE(FLOAT,  "define components of vector d");
    LSD_MAT103_D3                           = VALUE(FLOAT,  "define components of vector d");
    E                                       = VALUE(FLOAT,  "Youngs Modulus");
    LSD_MAT103_FLAG                         = VALUE(FLOAT,  "FLAG");
    LSD_MAT103_L                            = VALUE(FLOAT,  "L for brick");
    LSD_MAT103_M                            = VALUE(FLOAT,  "M for brick");
    LSD_MAT103_N                            = VALUE(FLOAT,  "N for brick");
    LSD_MAT103_PR                           = VALUE(FLOAT,  "Poisson's Ratio");
    LSD_MAT103_QR1                          = VALUE(FLOAT,  "Isotropic hardening parameter QR1");
    LSD_MAT103_QR2                          = VALUE(FLOAT,  "Isotropic hardening parameter QR2");
    LSD_MAT103_QX1                          = VALUE(FLOAT,  "Kinematic hardening parameter QX1");
    LSD_MAT103_QX2                          = VALUE(FLOAT,  "Kinematic hardening parameter QX2");
    LSD_MAT103_R45                          = VALUE(FLOAT,  "R45 for shell");
    LSD_MAT103_R90                          = VALUE(FLOAT,  "R90 for shell");
    Rho                                     = VALUE(FLOAT,  "Mass Density");
    LSD_MAT103_ROO                          = VALUE(FLOAT,  "ROO for shell");
    LSD_MAT103_SIGY                         = VALUE(FLOAT,  "SIGY");
    LSD_MAT103_V1                           = VALUE(FLOAT,  "define components of vector v");
    LSD_MAT103_V2                           = VALUE(FLOAT,  "define components of vector v");
    LSD_MAT103_V3                           = VALUE(FLOAT,  "define components of vector v");
    LSD_MAT103_VK                           = VALUE(FLOAT,  "Viscous material parameter VK");
    LSD_MAT103_VM                           = VALUE(FLOAT,  "Viscous material parameter VM");
    LSD_MAT103_XP                           = VALUE(FLOAT,  "define coordinates of point p");
    LSD_MAT103_YP                           = VALUE(FLOAT,  "define coordinates of point p");
    LSD_MAT103_ZP                           = VALUE(FLOAT,  "define coordinates of point p");
    LSD_NODE1                               = VALUE(NODE,  "Node");
    LSD_NODE3                               = VALUE(NODE,  "Node1");
    LSD_NODE4                               = VALUE(NODE,  "Node2");
    LSD_NODE5                               = VALUE(NODE,  "Node1");
    LSD_NODE6                               = VALUE(NODE,  "Node2");
    LSD_NODE7                               = VALUE(NODE,  "Node1");
    LSD_NODE8                               = VALUE(NODE,  "Node2");
    LSD_SYSTEM                              = VALUE(SYSTEM,  "AOPT");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    MATL123_NUMINT                          = VALUE(FLOAT,  "Number of integration points which must fail before element deletion");
    axisOptFlag                             = VALUE(INT,  "Anisotropy axis definition");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    LOC_AOPT                                = VALUE(FLOAT, "");
    IO_FLAG                                 = VALUE(INT, "io flag");
    LSD_MAT_USER_DEF_MACF                   = VALUE(INT,  "Material axes change flag for brick elements");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    LSDYNA_FAIL                             = 256;
    LSD_LCID                                = 45;
    LSD_MAT103_A1                           = 2674;
    LSD_MAT103_A2                           = 2675;
    LSD_MAT103_A3                           = 2676;
    LSD_MAT103_ALPHA                        = 2653;
    LSD_MAT103_BETA                         = 2683;
    LSD_MAT103_CR1                          = 2655;
    LSD_MAT103_CR2                          = 2657;
    LSD_MAT103_CX1                          = 2659;
    LSD_MAT103_CX2                          = 2661;
    LSD_MAT103_D1                           = 2680;
    LSD_MAT103_D2                           = 2681;
    LSD_MAT103_D3                           = 2682;
    E                                       = 119;
    LSD_MAT103_FLAG                         = 2652;
    LSD_MAT103_L                            = 2667;
    LSD_MAT103_M                            = 2668;
    LSD_MAT103_N                            = 2669;
    LSD_MAT103_PR                           = 2650;
    LSD_MAT103_QR1                          = 2654;
    LSD_MAT103_QR2                          = 2656;
    LSD_MAT103_QX1                          = 2658;
    LSD_MAT103_QX2                          = 2660;
    LSD_MAT103_R45                          = 2665;
    LSD_MAT103_R90                          = 2666;
    Rho                                     = 118;
    LSD_MAT103_ROO                          = 2664;
    LSD_MAT103_SIGY                         = 2651;
    LSD_MAT103_V1                           = 2677;
    LSD_MAT103_V2                           = 2678;
    LSD_MAT103_V3                           = 2679;
    LSD_MAT103_VK                           = 2662;
    LSD_MAT103_VM                           = 2663;
    LSD_MAT103_XP                           = 2671;
    LSD_MAT103_YP                           = 2672;
    LSD_MAT103_ZP                           = 2673;
    LSD_NODE1                               = 86;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_NODE7                               = 5080;
    LSD_NODE8                               = 5081;
    LSD_SYSTEM                              = 184;
    LSD_TitleOpt                            = 90;
    MATL123_NUMINT                          = 4254;
    Num_Comments                            = 3101;
    axisOptFlag                             = 4946;
    LSD_MAT_USER_DEF_MACF                   = 1296;
    AOPT_SKEW_FLAG                          = -1;
    LOC_AOPT                                = -1;
    IO_FLAG                                 = -1;
    //empty_string                       = -1;
}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  YOUNG_MODULUS=SCALAR(E);
  POISSON_RATIO=SCALAR(LSD_MAT103_PR);
  INITIAL_YIELD_STRESS=SCALAR(LSD_MAT103_SIGY);
  FLAG=SCALAR(LSD_MAT103_FLAG);
  DISTRIBUTION_OF_HARDENING_USED_IN_THE_CURVE-FITTING=SCALAR(LSD_MAT103_ALPHA);
  ISOTROPIC_HARDENING_PARAMETER_Qr1=SCALAR(LSD_MAT103_QR1);
  ISOTROPIC_HARDENING_PARAMETER_Cr1=SCALAR(LSD_MAT103_CR1);
  ISOTROPIC_HARDENING_PARAMETER_Qr2=SCALAR(LSD_MAT103_QR2);
  ISOTROPIC_HARDENING_PARAMETER_Cr2=SCALAR(LSD_MAT103_CR2);
  KINEMATIC_HARDENING_PARAMETER_Qx1=SCALAR(LSD_MAT103_QX1);
  KINEMATIC_HARDENING_PARAMETER_Cx1=SCALAR(LSD_MAT103_CX1);
  KINEMATIC_HARDENING_PARAMETER_Qx2=SCALAR(LSD_MAT103_QX2);
  KINEMATIC_HARDENING_PARAMETER_Cx2=SCALAR(LSD_MAT103_CX2);
  VISCOUS_MATERIAL_PARAMETER_K=SCALAR(LSD_MAT103_VK);
  VISCOUS_MATERIAL_PARAMETER_M=SCALAR(LSD_MAT103_VM);
  R00_FOR_SHELL=SCALAR(LSD_MAT103_ROO);
  R45_FOR_SHELL=SCALAR(LSD_MAT103_R45);
  R45_FOR_SHELL=SCALAR(LSD_MAT103_R90);
  L_FOR_BRICK=SCALAR(LSD_MAT103_L);
  M_FOR_BRICK=SCALAR(LSD_MAT103_M);
  N_FOR_BRICK=SCALAR(LSD_MAT103_N);
  MATERIAL_AXES_OPTION=SCALAR(axisOptFlag);
  FAILURE_FLAG=SCALAR(LSDYNA_FAIL);
  NUMBER_OF_INTEGRATION_POINTS=SCALAR(MATL123_NUMINT);
  MATERIAL_ANGLE_IN_DEGREES=SCALAR(LSD_MAT103_BETA);
 public:
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON) 
{


     ASSIGN(KEYWORD_STR, "*MAT_ANISOTROPIC_VISCOPLASTIC");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
       {
             ASSIGN(KEYWORD_STR, "_TITLE");
       } 
 mandatory:
     SCALAR(Rho)                                    {DIMENSION="density";}
 optional:    
     SCALAR(E)                                      {DIMENSION="pressure";}
     SCALAR(LSD_MAT103_PR)                          {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT103_SIGY)                        {DIMENSION="pressure";}
     RADIO(LSD_MAT103_FLAG)
     {
        ADD(0, "0: Give all material parameters");
        ADD(1, "1: Material parameters are fit in LS-DYNA to Load curve or Table given below");
        ADD(2, "2: Use load curve directly");
     }
    FUNCTION(LSD_LCID)
    {
      X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
      Y_TITLE = "Stress"; Y_DIMENSION = "pressure";
      Z_TITLE = "Strain Rate"; Z_DIMENSION = "strain_rate";
    }
     SCALAR(LSD_MAT103_ALPHA)                       {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT103_QR1)                         {DIMENSION="pressure";}
     SCALAR(LSD_MAT103_CR1)                         {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT103_QR2)                         {DIMENSION="pressure";}
     SCALAR(LSD_MAT103_CR2)                         {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT103_QX1)                         {DIMENSION="pressure";}
     SCALAR(LSD_MAT103_CX1)                         {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT103_QX2)                         {DIMENSION="pressure";}
     SCALAR(LSD_MAT103_CX2)                         {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT103_VK)                          {DIMENSION="pressure";}
     SCALAR(LSD_MAT103_VM)                          {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT103_ROO)                         {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT103_R45)                         {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT103_R90)                         {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT103_L)                           {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT103_M)                           {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT103_N)                           {DIMENSION="DIMENSIONLESS";}
     RADIO(axisOptFlag)
     {
        ADD(1, "0.0: Locally orthotropic: axis given by nodes 1,2 and 4");
        ADD(2, "1.0: Locally orthotropic: a-dir given by a point and global location of element center");
        ADD(3, "2.0: Globally orthotropic: axis given by vectors");
        ADD(4, "3.0: Locally orthotropic: axis given by rotating the material axes by an angle BETA");
        ADD(5, "4.0: Locally orhtotropic: cylindrical coordinate given by vector v and point P");
        ADD(6, "Pick System");
     }
     if(axisOptFlag == 6)
     {
        DATA(LSD_SYSTEM);
     }
     SCALAR(LSDYNA_FAIL)                            {DIMENSION="DIMENSIONLESS";}
     SCALAR(MATL123_NUMINT)                         {DIMENSION="DIMENSIONLESS";}
     RADIO(LSD_MAT_USER_DEF_MACF)
     {
        ADD(1, "No change");
        ADD(2, "switch material axes a and b");
        ADD(3, "switch material axes a and c");
        ADD(4, "switch material axes b and c");
     }
     if(axisOptFlag == 1 || axisOptFlag == 4)
     {
        DATA(LSD_NODE1);
        ASSIGN(LSD_MAT103_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],FALSE);
        ASSIGN(LSD_MAT103_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],FALSE);
        ASSIGN(LSD_MAT103_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],FALSE);
        
     }
     if(axisOptFlag == 3)
     {
         DATA(LSD_NODE3);
         DATA(LSD_NODE4);
         ASSIGN(LSD_MAT103_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],FALSE);
         ASSIGN(LSD_MAT103_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],FALSE);
         ASSIGN(LSD_MAT103_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],FALSE);
         DATA(LSD_NODE5);
         DATA(LSD_NODE6);
         ASSIGN(LSD_MAT103_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],FALSE);
         ASSIGN(LSD_MAT103_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],FALSE);
         ASSIGN(LSD_MAT103_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],FALSE);
     }     
     if(axisOptFlag == 4 || axisOptFlag == 5)
     {
        DATA(LSD_NODE7);
        DATA(LSD_NODE8);
        ASSIGN(LSD_MAT103_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],FALSE);
        ASSIGN(LSD_MAT103_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],FALSE);
        ASSIGN(LSD_MAT103_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],FALSE);
     }
     if(axisOptFlag == 4)
     {
        SCALAR(LSD_MAT103_BETA)                     {DIMENSION="a";}
     }
/*
    graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/SHELL,/COMPONENT/TSHELL);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);

    //
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSD_MAT103_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSD_MAT103_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSD_MAT103_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSD_MAT103_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSD_MAT103_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSD_MAT103_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE8 != NONE && LSD_NODE7 != NONE)
    {
        ASSIGN(LSD_MAT103_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSD_MAT103_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSD_MAT103_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSD_MAT103_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSD_MAT103_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSD_MAT103_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    //
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 5 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,4.0,EXPORT);
    }
    //
    COMMENT("$      MID       RHO         E        PR      SIGY      FLAG      LCSS     ALPHA");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,LSD_MAT103_PR,LSD_MAT103_SIGY,LSD_MAT103_FLAG,LSD_LCID,LSD_MAT103_ALPHA);
    //
    COMMENT("$      QR1       CR1       QR2       CR2       QX1       CX1       QX2       CX2");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT103_QR1,LSD_MAT103_CR1,LSD_MAT103_QR2,LSD_MAT103_CR2,LSD_MAT103_QX1,LSD_MAT103_CX1,LSD_MAT103_QX2,LSD_MAT103_CX2);
    //
    COMMENT("$       VK        VM     R00_F     R45_G     R90_H         L         M         N");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT103_VK,LSD_MAT103_VM,LSD_MAT103_ROO,LSD_MAT103_R45,LSD_MAT103_R90,LSD_MAT103_L,LSD_MAT103_M,LSD_MAT103_N);
    //
    COMMENT("$     AOPT      FAIL    NUMINT      MACF");
    if(IO_FLAG == 2)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 6)
        {
              CARD("%10d%10lg%10lg%10d",LOC_AOPT,LSDYNA_FAIL,MATL123_NUMINT,LSD_MAT_USER_DEF_MACF);
        }
        else
        {
              CARD("%10lg%10lg%10lg%10d",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,LOC_AOPT,LSD_SYSTEM),LSDYNA_FAIL,MATL123_NUMINT,LSD_MAT_USER_DEF_MACF);
        }
    }
    CARD_PREREAD("%10lg",LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,4,IMPORT);
    }
    else if(LOC_AOPT == 4.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,5,IMPORT);
    }

    if(IO_FLAG == 1)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 6)
        {
            CARD("%10d%10lg%10lg%10d",LOC_AOPT,LSDYNA_FAIL,MATL123_NUMINT,LSD_MAT_USER_DEF_MACF);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10d",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM),LSDYNA_FAIL,MATL123_NUMINT,LSD_MAT_USER_DEF_MACF);
            ASSIGN(axisOptFlag, 6, IMPORT);
        }
    }

    //
    COMMENT("$       XP        YP        ZP        A1        A2        A3");
    if(axisOptFlag == 2 || axisOptFlag == 5)
    {
        CARD("%10lg%10lg%10lg",LSD_MAT103_XP,LSD_MAT103_YP,LSD_MAT103_ZP);
    }
    else if(axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSD_MAT103_A1,LSD_MAT103_A2,LSD_MAT103_A3);
    }
    else
    {
        BLANK;
    }
    //
    COMMENT("$       V1        V2        V3        D1        D2        D3      BETA");
    if(axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSD_MAT103_D1,LSD_MAT103_D2,LSD_MAT103_D3);
    }
    else if(axisOptFlag == 4)
    {
        CARD("%10lg%10lg%10lg%10s%10s%10s%10lg",LSD_MAT103_V1,LSD_MAT103_V2,LSD_MAT103_V3,_BLANK_,_BLANK_,_BLANK_,LSD_MAT103_BETA);
    }
    else if(axisOptFlag == 5)
    {
        CARD("%10lg%10lg%10lg",LSD_MAT103_V1,LSD_MAT103_V2,LSD_MAT103_V3);
    }
    else if(axisOptFlag == 1)
    {
        CARD("%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_MAT103_BETA);
    }
    else
    {
        BLANK;
    }
}
FORMAT(Keyword971_R6.1) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);

    //
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSD_MAT103_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSD_MAT103_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSD_MAT103_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSD_MAT103_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSD_MAT103_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSD_MAT103_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE8 != NONE && LSD_NODE7 != NONE)
    {
        ASSIGN(LSD_MAT103_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSD_MAT103_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSD_MAT103_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSD_MAT103_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSD_MAT103_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSD_MAT103_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    //
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 5 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,4.0,EXPORT);
    }
    //
    COMMENT("$      MID       RHO         E        PR      SIGY      FLAG      LCSS     ALPHA");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,LSD_MAT103_PR,LSD_MAT103_SIGY,LSD_MAT103_FLAG,LSD_LCID,LSD_MAT103_ALPHA);
    //
    COMMENT("$      QR1       CR1       QR2       CR2       QX1       CX1       QX2       CX2");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT103_QR1,LSD_MAT103_CR1,LSD_MAT103_QR2,LSD_MAT103_CR2,LSD_MAT103_QX1,LSD_MAT103_CX1,LSD_MAT103_QX2,LSD_MAT103_CX2);
    //
    COMMENT("$       VK        VM     R00_F     R45_G     R90_H         L         M         N");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT103_VK,LSD_MAT103_VM,LSD_MAT103_ROO,LSD_MAT103_R45,LSD_MAT103_R90,LSD_MAT103_L,LSD_MAT103_M,LSD_MAT103_N);
    //
    COMMENT("$     AOPT      FAIL    NUMINT      MACF");
    if(IO_FLAG == 2)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 6)
        {
              CARD("%10d%10lg%10lg%10d",LOC_AOPT,LSDYNA_FAIL,MATL123_NUMINT,LSD_MAT_USER_DEF_MACF);
        }
        else
        {
              CARD("%10lg%10lg%10lg%10d",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,LOC_AOPT,LSD_SYSTEM),LSDYNA_FAIL,MATL123_NUMINT,LSD_MAT_USER_DEF_MACF);
        }
    }
    CARD_PREREAD("%10lg",LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,4,IMPORT);
    }
    else if(LOC_AOPT == 4.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,5,IMPORT);
    }

    if(IO_FLAG == 1)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 6)
        {
            CARD("%10d%10lg%10lg%10d",LOC_AOPT,LSDYNA_FAIL,MATL123_NUMINT,LSD_MAT_USER_DEF_MACF);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10d",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM),LSDYNA_FAIL,MATL123_NUMINT,LSD_MAT_USER_DEF_MACF);
            ASSIGN(axisOptFlag, 6, IMPORT);
        }
    }

    //
    COMMENT("$       XP        YP        ZP        A1        A2        A3");
    if(axisOptFlag == 2 || axisOptFlag == 5)
    {
        CARD("%10lg%10lg%10lg",LSD_MAT103_XP,LSD_MAT103_YP,LSD_MAT103_ZP);
    }
    else if(axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSD_MAT103_A1,LSD_MAT103_A2,LSD_MAT103_A3);
    }
    else
    {
        BLANK;
    }
    //
    COMMENT("$       V1        V2        V3        D1        D2        D3      BETA");
    if(axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSD_MAT103_D1,LSD_MAT103_D2,LSD_MAT103_D3);
    }
    else if(axisOptFlag == 4)
    {
        CARD("%10lg%10lg%10lg%10s%10s%10s%10lg",LSD_MAT103_V1,LSD_MAT103_V2,LSD_MAT103_V3,_BLANK_,_BLANK_,_BLANK_,LSD_MAT103_BETA);
    }
    else if(axisOptFlag == 5)
    {
        CARD("%10lg%10lg%10lg",LSD_MAT103_V1,LSD_MAT103_V2,LSD_MAT103_V3);
    }
    else if(axisOptFlag == 1)
    {
        CARD("%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_MAT103_BETA);
    }
    else
    {
        BLANK;
    }
}