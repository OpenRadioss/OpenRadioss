//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 077_O
// 


ATTRIBUTES(COMMON) 
{
  // Initial and reference densities
  KEYWORD_STR                       = VALUE(STRING, "Solver Keyword");
  LSD_TitleOpt                      = VALUE(INT, "Title");
  CommentEnumField                  = VALUE(INT, "User Comments");
  Num_Comments                      = SIZE("No. of comment lines");
  Comments                          = ARRAY[Num_Comments](STRING, "Entity Comments");
  Rho                               = VALUE(FLOAT, "Mass density");  
  Nu                                = VALUE(FLOAT, "Poissons ratio");
  EncTypeEnumField                  = VALUE(INT, "Type");
  RegTypeEnumField                  = VALUE(INT, "Type");
  LSDYNA_SIGF                       = VALUE(FLOAT, "Limit stress for frequency independent frictional damping");
  LSD_G                             = VALUE(FLOAT, "Shear modulus for frequency independent damping");
  LSD_LCID                          = VALUE(FUNCT, "force versus actual change in the gauge length");
  LSD_MATL77B_BSSTART               = VALUE(FLOAT, "BSTART");
  LSD_MATL77B_DATA                  = VALUE(FLOAT, "Type of experimental data");
  LSD_MATL77B_LCID                  = VALUE(FUNCT, "deviatoric stress relaxation curve");
  LSD_MATL77B_NV                    = VALUE(INT, "Number of Prony series terms in fit");
  LSD_MATL77B_TRAMP                 = VALUE(FLOAT, "Optional ramp time for loading");
  LSD_MAT_AL1                       = VALUE(FLOAT, "AL1");
  LSD_MAT_AL2                       = VALUE(FLOAT, "AL2");
  LSD_MAT_AL3                       = VALUE(FLOAT, "AL3");
  LSD_MAT_AL4                       = VALUE(FLOAT, "AL4");
  LSD_MAT_AL5                       = VALUE(FLOAT, "AL5");
  LSD_MAT_AL6                       = VALUE(FLOAT, "AL6");
  LSD_MAT_AL7                       = VALUE(FLOAT, "AL7");
  LSD_MAT_AL8                       = VALUE(FLOAT, "AL8");
  LSD_MAT_MU1                       = VALUE(FLOAT, "shear modulus");
  LSD_MAT_MU2                       = VALUE(FLOAT, "shear modulus");
  LSD_MAT_MU3                       = VALUE(FLOAT, "shear modulus");
  LSD_MAT_MU4                       = VALUE(FLOAT, "shear modulus");
  LSD_MAT_MU5                       = VALUE(FLOAT, "shear modulus");
  LSD_MAT_MU6                       = VALUE(FLOAT, "shear modulus");
  LSD_MAT_MU7                       = VALUE(FLOAT, "shear modulus");
  LSD_MAT_MU8                       = VALUE(FLOAT, "shear modulus");
  LSD_MAT77_N                       = VALUE(INT, "Order of fit to the Ogden model");
  LSD_MAT_REF                       = VALUE(FLOAT, "Use reference geometry to initialize the stress tensor");
  LSD_MAT_SGL                       = VALUE(FLOAT, "Specimen gauge length");
  LSD_MAT_ST                        = VALUE(FLOAT, "Specimen thickness");
  LSD_MAT_SW                        = VALUE(FLOAT, "Specimen width");
  MATL77B_NEW_NV                    = VALUE(INT, "Number of Prony series terms in fit.");
  MATL77B_TBHYS                     = VALUE(FUNCT, "Table ID for hysteresis");
  MATL77B_ViscoConst                = SIZE("ViscoConst");
  MATL77B_VFLAG                     = VALUE(INT, "Flag for the viscoelasticity formulation");
  LSD_MAT_Beta                      = ARRAY[MATL77B_ViscoConst](FLOAT, "Optional shear relaxation modulus");
  LSD_MAT_Gi                        = ARRAY[MATL77B_ViscoConst](FLOAT, "Optional decay constant");
  IO_FLAG                           = VALUE(INT, "io flag");
  Count                             = VALUE(INT, "Local count variable");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
  KEYWORD_STR                   = 9000;
  CommentEnumField              = 3220;
  Num_Comments                  = 3101;
  Comments                      = 3100;
  LSD_TitleOpt                  = 90;
  Rho                           = 118;
  EncTypeEnumField              = 5828;
  LSDYNA_SIGF                   = 248;
  LSD_G                         = 1560;
  LSD_LCID                      = 45;
  LSD_MATL77B_BSSTART           = 3234;
  LSD_MATL77B_DATA              = 2890;
  LSD_MATL77B_LCID              = 2889;
  LSD_MAT77_N                   = 3233;
  LSD_MATL77B_NV                = 2888;
  LSD_MATL77B_TRAMP             = 2891;
  LSD_MAT_AL1                   = 2480;
  LSD_MAT_AL2                   = 2481;
  LSD_MAT_AL3                   = 2482;
  LSD_MAT_AL4                   = 2483;
  LSD_MAT_AL5                   = 2484;
  LSD_MAT_AL6                   = 2485;
  LSD_MAT_AL7                   = 2486;
  LSD_MAT_AL8                   = 3006;
  LSD_MAT_Beta                  = 355;
  LSD_MAT_Gi                    = 354;
  LSD_MAT_MU1                   = 2473;
  LSD_MAT_MU2                   = 2474;
  LSD_MAT_MU3                   = 2475;
  LSD_MAT_MU4                   = 2476;
  LSD_MAT_MU5                   = 2477;
  LSD_MAT_MU6                   = 2478;
  LSD_MAT_MU7                   = 2479;
  LSD_MAT_MU8                   = 3005;
  LSD_MAT_REF                   = 359;
  LSD_MAT_SGL                   = 350;
  LSD_MAT_ST                    = 352;
  LSD_MAT_SW                    = 351;
  MATL77B_NEW_NV                = 4189;
  MATL77B_TBHYS                 = 6409;
  MATL77B_VFLAG                 = 6410;
  MATL77B_ViscoConst            = 4181;
  Nu                            = 120;
  RegTypeEnumField              = 5827;
  IO_FLAG                       = -1;
  Count                         = -1;
}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  POISSONS_RATIO=SCALAR(Nu);
  SHEAR_MODULUS=SCALAR(LSD_G);
  LIMIT_STRESS=SCALAR(LSDYNA_SIGF);
  SPECIMEN_GAUGE_LENGTH=SCALAR(LSD_MAT_SGL);
  SPECIMEN_WIDTH=SCALAR(LSD_MAT_SW);
  SPECIMEN_THICKNESS=SCALAR(LSD_MAT_ST);
  TYPE_OF_EXPERIMENTAL_DATA=SCALAR(LSD_MATL77B_DATA);
  SET_TO_BSTART=SCALAR(LSD_MATL77B_BSSTART);
  RAMP_TIME_FOR_LOADING=SCALAR(LSD_MATL77B_TRAMP);
  YOUNG_MODULUS=EVAL(2*(1+POISSONS_RATIO)*SHEAR_MODULUS);
  BULK_MODULUS = EVAL(YOUNG_MODULUS/(3*(1-2*POISSONS_RATIO)));

  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED        = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSONS_RATIO*POISSONS_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);

  SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+BULK_MODULUS)/MASS_DENSITY)^0.5);
}

DEFAULTS(COMMON)
{
    MATL77B_NEW_NV = 6;
}

GUI(COMMON)
{
     ASSIGN(KEYWORD_STR, "*MAT_OGDEN_RUBBER");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }    
     RADIO(RegTypeEnumField)
     {
        ADD(0.0, "Regular");
     }
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
       {
             ASSIGN(KEYWORD_STR, "_TITLE");
       } 
 mandatory:
     SCALAR(Rho)                         { DIMENSION="density";}
 optional:
     SCALAR(Nu)                          {DIMENSION="DIMENSIONLESS";}
     RADIO(LSD_MAT77_N)
     {
        ADD(0.0, "0");
        ADD(1.0, "1");
        ADD(2.0, "2");
        ADD(3.0, "3");
        ADD(4.0, "4");
        ADD(5.0, "5");
        ADD(6.0, "6");
        ADD(7.0, "7");
        ADD(8.0, "8");
     }
     SCALAR(MATL77B_NEW_NV)             {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_G)                      {DIMENSION="pressure";}
     SCALAR(LSDYNA_SIGF)                {DIMENSION="pressure";}
     RADIO(LSD_MAT_REF)
     {
        ADD(0.0, "0.0: Off");
        ADD(0.0, "1.0: On");
     }
     if(Nu < 0)
     {
        FUNCTION(MATL77B_TBHYS)
        {
          X_TITLE = "Deviatoric strain energy density"; X_DIMENSION = "energydensity";
          Y_TITLE = "Stress reduction factor"; Y_DIMENSION = "DIMENSIONLESS";
        }
     }
     if(LSD_MAT77_N > 0)
     {
 mandatory:
        SCALAR(LSD_MAT_SGL)             {DIMENSION="l";}
        SCALAR(LSD_MAT_SW)              {DIMENSION="l";}
        SCALAR(LSD_MAT_ST)              {DIMENSION="l";}
 optional:
        FUNCTION(LSD_LCID)
        {
          X_TITLE = "Change in gauge length"; X_DIMENSION = "l";
          Y_TITLE = "Force"; Y_DIMENSION = "force";
        }
        RADIO(LSD_MATL77B_DATA)
        {
            ADD(0.0, "1.0: Uniaxial data (default)");
            ADD(0.0, "2.0: Biaxial data");
            ADD(0.0, "3.0: Pure shear data");
        }
        FUNCTION(LSD_MATL77B_LCID)
        {
          X_TITLE = "Time"; X_DIMENSION = "t";
          Y_TITLE = "Relaxation Stress"; Y_DIMENSION = "pressure";
        }
        SCALAR(LSD_MATL77B_BSSTART)     {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MATL77B_TRAMP)       {DIMENSION="t";}
     }
     if(LSD_MAT77_N == 0)
     {
        SCALAR(LSD_MAT_MU1)             {DIMENSION="pressure";}
        SCALAR(LSD_MAT_MU2)             {DIMENSION="pressure";}
        SCALAR(LSD_MAT_MU3)             {DIMENSION="pressure";}
        SCALAR(LSD_MAT_MU4)             {DIMENSION="pressure";}
        SCALAR(LSD_MAT_MU5)             {DIMENSION="pressure";}
        SCALAR(LSD_MAT_MU6)             {DIMENSION="pressure";}
        SCALAR(LSD_MAT_MU7)             {DIMENSION="pressure";}
        SCALAR(LSD_MAT_MU8)             {DIMENSION="pressure";}
        SCALAR(LSD_MAT_AL1)             {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_AL2)             {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_AL3)             {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_AL4)             {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_AL5)             {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_AL6)             {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_AL7)             {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_AL8)             {DIMENSION="DIMENSIONLESS";}
     }
     SIZE_RADIO(MATL77B_ViscoConst)
     {
        ADD(0,  "0");
        ADD(1,  "1");
        ADD(2,  "2");
        ADD(3,  "3");
        ADD(4,  "4");
        ADD(5,  "5");
        ADD(6,  "6");
        ADD(7,  "7");
        ADD(8,  "8");
        ADD(9,  "9");
        ADD(10, "10");
        ADD(11, "11");
        ADD(12, "12");
     }
     if(MATL77B_ViscoConst > 0)
     {
        ARRAY(MATL77B_ViscoConst,"")
        {
            SCALAR(LSD_MAT_Gi)          {DIMENSION="pressure";}
            SCALAR(LSD_MAT_Beta)        {DIMENSION="f";}
        }
        RADIO(MATL77B_VFLAG)
        {
            ADD(0, "0: Standard viscoselasticity formulations is used (the default)");
            ADD(1, "1: Viscoelasticity formulation using the instantaneous elastic stress is used");
        }
        
     }
/*
     graphical SUPPORT("Part(s) to which material is applied") {
     OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/SHELL);
     ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    COMMENT("$      MID        RO        PR         N        NV         G      SIGF       REF");
    CARD("%10d%10lg%10lg%10d%10d%10lg%10lg%10lg",_ID_,Rho,Nu,LSD_MAT77_N,MATL77B_NEW_NV,LSD_G,LSDYNA_SIGF,LSD_MAT_REF);

    if(LSD_MAT77_N > 0)
    {
        COMMENT("$      SGL        SW        ST     LCID1      DATA     LCID2    BSTART     TRAMP");
        CARD("%10lg%10lg%10lg%10d%10lg%10d%10lg%10lg",LSD_MAT_SGL,LSD_MAT_SW,LSD_MAT_ST,LSD_LCID,LSD_MATL77B_DATA,LSD_MATL77B_LCID,LSD_MATL77B_BSSTART,LSD_MATL77B_TRAMP);
    }
    if(LSD_MAT77_N == 0)
    {
        COMMENT("$      MU1       MU2       MU3       MU4       MU5       MU6       MU7       MU8");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_MU1,LSD_MAT_MU2,LSD_MAT_MU3,LSD_MAT_MU4,LSD_MAT_MU5,LSD_MAT_MU6,LSD_MAT_MU7,LSD_MAT_MU8);

        COMMENT("$   ALPHA1    ALPHA2    ALPHA3    ALPHA4    ALPHA5    ALPHA6    ALPHA7    ALPHA8");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_AL1,LSD_MAT_AL2,LSD_MAT_AL3,LSD_MAT_AL4,LSD_MAT_AL5,LSD_MAT_AL6,LSD_MAT_AL7,LSD_MAT_AL8);
    }
    if(MATL77B_ViscoConst > 0)
    {
        COMMENT("$       GI     BETAI");
    }
    FREE_CARD_LIST(MATL77B_ViscoConst)
    {
        CARD("%10lg%10lg",LSD_MAT_Gi,LSD_MAT_Beta);
    }
}

FORMAT(Keyword971_R6.1) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    COMMENT("$      MID        RO        PR         N        NV         G      SIGF       REF");
    CARD("%10d%10lg%10lg%10d%10d%10lg%10lg%10lg",_ID_,Rho,Nu,LSD_MAT77_N,MATL77B_NEW_NV,LSD_G,LSDYNA_SIGF,LSD_MAT_REF);

    if(Nu < 0)
    {
        COMMENT("$    TBHYS");
        CARD("%10d",MATL77B_TBHYS);
    }
    if(LSD_MAT77_N > 0)
    {
        COMMENT("$      SGL        SW        ST     LCID1      DATA     LCID2    BSTART     TRAMP");
        CARD("%10lg%10lg%10lg%10d%10lg%10d%10lg%10lg",LSD_MAT_SGL,LSD_MAT_SW,LSD_MAT_ST,LSD_LCID,LSD_MATL77B_DATA,LSD_MATL77B_LCID,LSD_MATL77B_BSSTART,LSD_MATL77B_TRAMP);
    }
    else if(LSD_MAT77_N == 0)
    {
        COMMENT("$      MU1       MU2       MU3       MU4       MU5       MU6       MU7       MU8");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_MU1,LSD_MAT_MU2,LSD_MAT_MU3,LSD_MAT_MU4,LSD_MAT_MU5,LSD_MAT_MU6,LSD_MAT_MU7,LSD_MAT_MU8);

        COMMENT("$   ALPHA1    ALPHA2    ALPHA3    ALPHA4    ALPHA5    ALPHA6    ALPHA7    ALPHA8");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_AL1,LSD_MAT_AL2,LSD_MAT_AL3,LSD_MAT_AL4,LSD_MAT_AL5,LSD_MAT_AL6,LSD_MAT_AL7,LSD_MAT_AL8);
    }

    ASSIGN(Count, 1, IMPORT);
    ASSIGN(Count, 1, EXPORT);
    if(MATL77B_ViscoConst > 0)
    {
        COMMENT("$       GI     BETAI     VFLAG");
    }
    FREE_CARD_LIST(MATL77B_ViscoConst)
    {
        if(Count == 1)
        {
            CARD("%10lg%10lg%10d",LSD_MAT_Gi,LSD_MAT_Beta,MATL77B_VFLAG);
        }
        else
        {
            CARD("%10lg%10lg",LSD_MAT_Gi,LSD_MAT_Beta);
        }
        ASSIGN(Count, 2, IMPORT);
        ASSIGN(Count, 2, EXPORT);
    }
}
