//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 172
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    LSDYNA_A1                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A2                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A3                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_BETA                             = VALUE(FLOAT,  "Material angle in degrees");
    LSDYNA_D1                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D2                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D3                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_V1                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V2                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V3                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_XP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSDYNA_YP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSDYNA_ZP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSD_NODE1                               = VALUE(NODE,  "Node");
    LSD_NODE3                               = VALUE(NODE,  "Node1");
    LSD_NODE4                               = VALUE(NODE,  "Node2");
    LSD_NODE5                               = VALUE(NODE,  "Node1");
    LSD_NODE6                               = VALUE(NODE,  "Node2");
    LSD_NODE7                               = VALUE(NODE,  "Node1");
    LSD_NODE8                               = VALUE(NODE,  "Node2");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    MATL172_AGGSZ                           = VALUE(FLOAT,  "Aggregate size");
    MATL172_DEGRAD                          = VALUE(FLOAT,  "If non-zero, the compressive strength of concrete parallel to an open crack will be reduced");
    MATL172_ECI_6                           = VALUE(FLOAT,  "Strain at maximum compressive stress for Type 6 concrete");
    MATL172_ECRAGG                          = VALUE(FLOAT,  "Strain parameter for aggregate interlock");
    MATL172_ECSP_6                          = VALUE(FLOAT,  "Spalling strain in compression for Type 6 concrete");
    MATL172_ECUT36                          = VALUE(FLOAT,  "Strain to failure of concrete in compression");
    MATL172_ECUTEN                          = VALUE(FLOAT,  "Strain to fully open a crack");
    MATL172_EFFD                            = VALUE(FLOAT,  "Effective section depth");
    MATL172_ESOFT                           = VALUE(FLOAT,  "Tension stiffening");
    MATL172_ET36                            = VALUE(FLOAT,  "Youngs Modulus of concrete");
    MATL172_FC                              = VALUE(FLOAT,  "Compressive strength of concrete");
    MATL172_FCC6                            = VALUE(FLOAT,  "compressive strength");
    MATL172_FRACRX                          = VALUE(FLOAT,  "Fraction of reinforcement");
    MATL172_FRACRY                          = VALUE(FLOAT,  "Fraction of reinforcement");
    MATL172_FT                              = VALUE(FLOAT,  "Tensile stress to cause cracking");
    MATL172_GAMSC                           = VALUE(FLOAT,  "Load factor used in BS8110 shear capacity check");
    MATL172_ISHCHK                          = VALUE(INT,  "Flag = 1 to input data for shear capacity check");
    MATL172_LCALPC                          = VALUE(FUNCT,  "hermal expansion coefficient of concrete vs temp.");
    MATL172_LCALPS                          = VALUE(FUNCT,  "thermal expansion coefficient of reinforcement vs temperature");
    MATL172_LCHAR                           = VALUE(FLOAT,  "Characteristic length at which ESOFT applies");
    MATL172_LCRSU                           = VALUE(FUNCT,  "non-dimensional factor on SUREINF VS plastic strain");
    MATL172_MU                              = VALUE(FLOAT,  "Friction on crack planes");
    MATL172_PRREINF                         = VALUE(FLOAT,  "Poissons Ratio of reinforcement");
    MATL172_PRT36                           = VALUE(FLOAT,  "Poissons Ratio of concrete");
    MATL172_P_OR_F                          = VALUE(FLOAT,  "If BS8110 shear check, percent reinforcement");
    MATL172_SUREINF                         = VALUE(FLOAT,  "Ultimate stress of reinforcement");
    MATL172_TAUMXC                          = VALUE(FLOAT,  "TAUMXC");
    MATL172_TAUMXF                          = VALUE(FLOAT,  "Maximum friction shear stress on crack planes");
    MATL172_TYPEC                           = VALUE(FLOAT,  "Concrete aggregate type for stress-strain-temperature relationships");
    MATL172_TYPER                           = VALUE(FLOAT,  "Type of reinforcement for stress-strain-temperature relationships");
    MATL172_TYPSEC                          = VALUE(FLOAT,  "Type of shear capacity check");
    MATL172_UNITC                           = VALUE(FLOAT,  "Factor to convert stress units to MPa");
    MATL172_UNITL                           = VALUE(FLOAT,  "Factor to convert length units to millimeters");
    MATL172_UNLFAC                          = VALUE(FLOAT,  "Stiffness degradation factor after crushing");
    MATL172_YMREINF                         = VALUE(FLOAT,  "Youngs Modulus of reinforcement");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    axisOptFlag                             = VALUE(INT,  "Anisotropy axis definition");
    IO_FLAG                                 = VALUE(INT, "io flag");
    _HMCOMMENTSFLAG                         = VALUE(INT, "Write HM Comments");
    TITLE                                   = VALUE(STRING, "Title");
    EncTypeEnumField                        = VALUE(INT,  "Type");
    RegTypeEnumField                        = VALUE(INT,  "Type");
    LOC_AOPT                                = VALUE(FLOAT, "");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    LSDYNA_A1                               = 139;
    LSDYNA_A2                               = 140;
    LSDYNA_A3                               = 141;
    LSDYNA_BETA                             = 148;
    LSDYNA_D1                               = 145;
    LSDYNA_D2                               = 146;
    LSDYNA_D3                               = 147;
    LSDYNA_V1                               = 142;
    LSDYNA_V2                               = 143;
    LSDYNA_V3                               = 144;
    LSDYNA_XP                               = 136;
    LSDYNA_YP                               = 137;
    LSDYNA_ZP                               = 138;
    LSD_NODE1                               = 86;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_NODE7                               = 5080;
    LSD_NODE8                               = 5081;
    LSD_TitleOpt                            = 90;
    MATL172_AGGSZ                           = 1865;
    MATL172_DEGRAD                          = 1879;
    MATL172_ECI_6                           = 1886;
    MATL172_ECRAGG                          = 1864;
    MATL172_ECSP_6                          = 1887;
    MATL172_ECUT36                          = 1877;
    MATL172_ECUTEN                          = 1857;
    MATL172_EFFD                            = 1884;
    MATL172_ESOFT                           = 1859;
    MATL172_ET36                            = 1875;
    MATL172_FC                              = 1853;
    MATL172_FCC6                            = 1858;
    MATL172_FRACRX                          = 1871;
    MATL172_FRACRY                          = 1872;
    MATL172_FT                              = 1854;
    MATL172_GAMSC                           = 1885;
    MATL172_ISHCHK                          = 1880;
    MATL172_LCALPC                          = 1878;
    MATL172_LCALPS                          = 1874;
    MATL172_LCHAR                           = 1860;
    MATL172_LCRSU                           = 1873;
    MATL172_MU                              = 1861;
    MATL172_PRREINF                         = 1868;
    MATL172_PRT36                           = 1876;
    MATL172_P_OR_F                          = 1883;
    MATL172_SUREINF                         = 1869;
    MATL172_TAUMXC                          = 1863;
    MATL172_TAUMXF                          = 1862;
    MATL172_TYPEC                           = 1855;
    MATL172_TYPER                           = 1870;
    MATL172_TYPSEC                          = 1882;
    MATL172_UNITC                           = 1856;
    MATL172_UNITL                           = 1866;
    MATL172_UNLFAC                          = 1881;
    MATL172_YMREINF                         = 1867;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    axisOptFlag                             = 4946;
    EncTypeEnumField                        = 5828;
    RegTypeEnumField                        = 5827;
    AOPT_SKEW_FLAG                          = -1;
    IO_FLAG                                 = -1;
    TITLE                                   = -1;
    LOC_AOPT                                = -1;
    //empty_string                       = -1;
}

DEFAULTS(COMMON)
{

    MATL172_ECRAGG      = 0.001;
    MATL172_ECUT36      = 1.e20;
    MATL172_ECUTEN      = 0.0025;
    MATL172_MU          = 0.4;
    MATL172_PRT36       = 0.25;
    MATL172_TAUMXF      = 1.e20;
    MATL172_TYPEC       = 1.0;
    MATL172_TYPER       = 1.0;
    MATL172_UNITC       = 1.0;
    MATL172_UNITL       = 1.0;
    MATL172_UNLFAC      = 0.5;

}

DRAWABLES(COMMON)
{
  public:  
  MASS_DENSITY=SCALAR(Rho);  
  COMPRESSIVE_STRENGTH=SCALAR(MATL172_FC);  
  TENSILE_STRENGTH=SCALAR(MATL172_FT);  
  FACTOR_TO_CONVERT_STRESS_UNITS_TO_MPA=SCALAR(MATL172_UNITC);  
  FRICTION_ON_CRACK_PLANES=SCALAR(MATL172_MU);  
  CHARACTERISTIC_LENGTH_AT_WHICH_ESOFT_APPLIES=SCALAR(MATL172_LCHAR);  
  YOUNG_MODULUS=SCALAR(MATL172_YMREINF);  
  POISSON_RATIO=SCALAR(MATL172_PRREINF);
  ULTIMATE_STRESS_OF_REINFORCEMENT=SCALAR(MATL172_SUREINF);  
  public:
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED= EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
  private:
  G = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1 = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
  public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5); 
}

CHECK(COMMON){
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_CONCRETE_EC2");
     RADIO(CommentEnumField)
     {
         //////ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
mandatory:
     SCALAR(Rho)                                    {DIMENSION="density";} 
optional:
     SCALAR(MATL172_FC)                             {DIMENSION="pressure";}
     SCALAR(MATL172_FT)                             {DIMENSION="pressure";}
     RADIO(MATL172_TYPEC)
     {
        ADD(1.0, "1.0: Siliceous, relationships from Draft EC2 ANNEX");
        ADD(2.0, "2.0: Calcareous, relationships from Draft EC2 ANNEX");
        ADD(3.0, "3.0: Non-thermally senstitive using ET3, ECU3");
        ADD(4.0, "4.0: Lightweight");
        ADD(5.0, "5.0: Fiber-reinforced");
        ADD(6.0, "6.0: Non-thermally-sensitive, Mander algorithm");
     }
     SCALAR(MATL172_UNITC)                          {DIMENSION="DIMENSIONLESS";}
     SCALAR(MATL172_ECUTEN)                         {DIMENSION="DIMENSIONLESS";}
     SCALAR(MATL172_FCC6)                           {DIMENSION="force";}
     SCALAR(MATL172_ESOFT)                          {DIMENSION="DIMENSIONLESS";}  
     SCALAR(MATL172_LCHAR)                          {DIMENSION="l";}  
     SCALAR(MATL172_MU)                             {DIMENSION="DIMENSIONLESS";}
     SCALAR(MATL172_TAUMXF)                         {DIMENSION="pressure";}
     SCALAR(MATL172_TAUMXC)                         {DIMENSION="pressure";}
     SCALAR(MATL172_ECRAGG);
     SCALAR(MATL172_AGGSZ)                          {DIMENSION="l";}
     SCALAR(MATL172_UNITL);
     SCALAR(MATL172_YMREINF)                        {DIMENSION="pressure";}  
     SCALAR(MATL172_PRREINF)                        {DIMENSION="DIMENSIONLESS";}
     SCALAR(MATL172_SUREINF)                        {DIMENSION="pressure";}
     RADIO(MATL172_TYPER)
     {
        ADD(1.0, "1.0: Hot rolled reinforcing steel, from Draft EC2 Annex");
        ADD(2.0, "2.0: Cold worked reinforcing steel,default, from Draft EC2");
        ADD(3.0, "3.0: Quenched and tempered prestressing steel");
        ADD(4.0, "4.0: Cold worked prestressingn steel");
        ADD(5.0, "5.0: Non-thermally sensitive using loadcurve LCRSU");
     }
     SCALAR(MATL172_FRACRX)                         {DIMENSION="DIMENSIONLESS";}  
     SCALAR(MATL172_FRACRY)                         {DIMENSION="DIMENSIONLESS";}  
     if(MATL172_TYPER == 5.0)
     {
        DATA(MATL172_LCRSU);
     }
     DATA(MATL172_LCALPS);
     RADIO(axisOptFlag)
     {
        ADD(1, "0.0: Locally orthotropic: axis given by nodes 1,2 and 4");
        ADD(2, "1.0: Locally orthotropic: a-dir given by a point and global location of element center");
        ADD(3, "2.0: Globally orthotropic: axis given by vectors");
        ADD(4, "3.0: Locally orthotropic: axis given by rotating the material axes by an angle BETA");
        ADD(5, "4.0: Locally orhtotropic: cylindrical coordinate given by vector v and point P");
     }
     if(MATL172_TYPEC == 3.0 || MATL172_TYPEC == 6.0)
     {
         SCALAR(MATL172_ET36)                       {DIMENSION="pressure";}
         SCALAR(MATL172_PRT36)                      {DIMENSION="DIMENSIONLESS";}
         SCALAR(MATL172_ECUT36)                     {DIMENSION="DIMENSIONLESS";}
     }
     DATA(MATL172_LCALPC);
     SCALAR(MATL172_DEGRAD);
     SCALAR(MATL172_ISHCHK);
     SCALAR(MATL172_UNLFAC);
     if(axisOptFlag == 2 || axisOptFlag == 5)
     {
        DATA(LSD_NODE1);
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],FALSE);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],FALSE);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],FALSE);
        //SCALAR(LSDYNA_XP)                           {DIMENSION="l";}
        //SCALAR(LSDYNA_YP)                           {DIMENSION="l";}
        //SCALAR(LSDYNA_ZP)                           {DIMENSION="l";}  
        
     }
     if(axisOptFlag == 3)
     {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],FALSE);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],FALSE);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],FALSE);
        //SCALAR(LSDYNA_A1)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_A2)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_A3)               {DIMENSION="DIMENSIONLESS";}
        DATA(LSD_NODE7);                
        DATA(LSD_NODE8);                
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],FALSE);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],FALSE);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],FALSE);
        //SCALAR(LSDYNA_D1)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_D2)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_D3)               {DIMENSION="DIMENSIONLESS";}

     }

     if(axisOptFlag == 4 || axisOptFlag == 5)
     {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],FALSE);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],FALSE);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],FALSE);
        //SCALAR(LSDYNA_V1)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_V2)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_V3)               {DIMENSION="DIMENSIONLESS";}        
     }
     if(axisOptFlag == 4)
     {
        SCALAR(LSDYNA_BETA)                        {DIMENSION="a";}
     }    
     if(MATL172_ISHCHK != 0)
     {
         RADIO(MATL172_TYPSEC)
         {
            ADD(0.0, "0.0: Default");
            ADD(1.0, "1.0: BS 8110 ");
            ADD(2.0, "2.0: ACI");
         }
         SCALAR(MATL172_P_OR_F);
         SCALAR(MATL172_EFFD)                       {DIMENSION="l";}
         SCALAR(MATL172_GAMSC);
     }
     if(MATL172_TYPEC == 6)
     {
         SCALAR(MATL172_ECI_6);
         SCALAR(MATL172_ECSP_6);
     }
/*
  graphical SUPPORT("Part(s) to which material is applied")
  {
    OBJECTS=(/COMPONENT/SHELL,/COMPONENT/BEAM);
    ADD(COMPONENT,"Parts");
  }  
*/

}

// File format
FORMAT(Keyword971) 
{
    //
    COMMENT("$      MID       RHO        FC        FT     TYPEC     UNITC");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,MATL172_FC,MATL172_FT,MATL172_TYPEC,MATL172_UNITC);
    //
    COMMENT("$    ESOFT     LCHAR        MU");
    CARD("%10lg%10lg%10lg",MATL172_ESOFT,MATL172_LCHAR,MATL172_MU);
    //
    COMMENT("$  YMREINF   PRREINF   SUREINF     TYPER    FRACRX     FRACY");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",MATL172_YMREINF,MATL172_PRREINF,MATL172_SUREINF,MATL172_TYPER,MATL172_FRACRX,MATL172_FRACRY);
    //


}
FORMAT(Keyword971_R6.1) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);
    //
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE8 != NONE && LSD_NODE7 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    //
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 5 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,4.0,EXPORT);
    }
    //
    COMMENT("$      MID       RHO        FC        FT     TYPEC     UNITC    ECUTEN      FCC6");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,MATL172_FC,MATL172_FT,MATL172_TYPEC,MATL172_UNITC,MATL172_ECUTEN,MATL172_FCC6);
    //
    COMMENT("$    ESOFT     LCHAR        MU    TAUMXF    TAUMXC    ECRAGG     AGGSZ     UNITL");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",MATL172_ESOFT,MATL172_LCHAR,MATL172_MU,MATL172_TAUMXF,MATL172_TAUMXC,MATL172_ECRAGG,MATL172_AGGSZ,MATL172_UNITL);
    //
    COMMENT("$  YMREINF   PRREINF   SUREINF     TYPER    FRACRX     FRACY     LCRSU    LCALPS");
    CARD_PREREAD("%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,MATL172_TYPER);
    if(MATL172_TYPER == 5.0)
    {
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d%10d",MATL172_YMREINF,MATL172_PRREINF,MATL172_SUREINF,MATL172_TYPER,MATL172_FRACRX,MATL172_FRACRY,MATL172_LCRSU,MATL172_LCALPS);
    }
    else
    {
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10s%10d",MATL172_YMREINF,MATL172_PRREINF,MATL172_SUREINF,MATL172_TYPER,MATL172_FRACRX,MATL172_FRACRY,_BLANK_,MATL172_LCALPS);
    }
    //
    COMMENT("$     AOPT      ET36     PRT36    ECUT36    LCALPC    DEGRAD    ISHCHK    UNLFAC");
    if(IO_FLAG == 2)
    {
        if(MATL172_TYPEC == 3.0 || MATL172_TYPEC == 6.0)
        {
            CARD("%10lg%10lg%10lg%10lg%10d%10lg%10d%10lg",LOC_AOPT,MATL172_ET36,MATL172_PRT36,MATL172_ECUT36,MATL172_LCALPC,MATL172_DEGRAD,MATL172_ISHCHK,MATL172_UNLFAC);
        }
        //
        else
        {
            CARD("%10lg%10s%10s%10s%10d%10lg%10d%10lg",LOC_AOPT,_BLANK_,_BLANK_,_BLANK_,MATL172_LCALPC,MATL172_DEGRAD,MATL172_ISHCHK,MATL172_UNLFAC);
        }
    }
    CARD_PREREAD("%10lg",LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,4,IMPORT);
    }
    else if(LOC_AOPT == 4.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,5,IMPORT);
    }
    if(IO_FLAG == 1)
    {
        if(MATL172_TYPEC == 3.0 || MATL172_TYPEC == 6.0)
        {
            CARD("%10lg%10lg%10lg%10lg%10d%10lg%10d%10lg",LOC_AOPT,MATL172_ET36,MATL172_PRT36,MATL172_ECUT36,MATL172_LCALPC,MATL172_DEGRAD,MATL172_ISHCHK,MATL172_UNLFAC);
        }
        //
        else
        {
            CARD("%10lg%10s%10s%10s%10d%10lg%10d%10lg",LOC_AOPT,_BLANK_,_BLANK_,_BLANK_,MATL172_LCALPC,MATL172_DEGRAD,MATL172_ISHCHK,MATL172_UNLFAC);
        }
    }
    //
    if(axisOptFlag>1)
    {
        COMMENT("$       XP        YP        ZP        A1        A2        A3");
        if(axisOptFlag == 2 || axisOptFlag == 5)
        {
             CARD("%10lg%10lg%10lg",LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP);
        }
        else if(axisOptFlag == 3)
        {
            CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
        }
        else
        {
            BLANK;
        }

        COMMENT("$       V1        V2        V3        D1        D2        D3      BETA");
        if(axisOptFlag == 4)
        {
             CARD("%10lg%10lg%10lg%10s%10s%10s%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,LSDYNA_BETA);
        }
        else if(axisOptFlag == 5)
        {
            CARD("%10lg%10lg%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3);
        }
        else if(axisOptFlag == 3)
        {
            CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
        }
        else
        {
            BLANK;
        }
    }
    if (MATL172_ISHCHK != 0)
    {
         //
         COMMENT("$   TYPSEC    P_OR_F      EFFD     GAMSC");
         CARD("%10lg%10lg%10lg%10lg",MATL172_TYPSEC,MATL172_P_OR_F,MATL172_EFFD,MATL172_GAMSC) ;
         //
    }
    if (MATL172_TYPEC == 6)
    {
         //
         COMMENT("$    ECI_6    ECSP_6");
         CARD("%10lg%10lg",MATL172_ECI_6,MATL172_ECSP_6) ;
         //
    }
}
