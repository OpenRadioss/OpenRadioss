//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 135
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    AnisoAxisDefiniFlag                     = VALUE(INT,  "Anisotropy axis definition");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    E                                       = VALUE(FLOAT,  "Youngs modulus");
    Nu                                      = VALUE(FLOAT,  "Poissons ratio");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    LSD_MAT103_CR1                          = VALUE(FLOAT,  "Isotropic hardening parameter");
    LSD_MAT103_CR2                          = VALUE(FLOAT,  "Isotropic hardening parameter");
    LSD_MAT103_CX1                          = VALUE(FLOAT,  "Kinematic hardening parameter");
    LSD_MAT103_CX2                          = VALUE(FLOAT,  "Kinematic hardening parameter");
    LSD_MAT103_QR1                          = VALUE(FLOAT,  "Isotropic hardening parameter");
    LSD_MAT103_QR2                          = VALUE(FLOAT,  "Isotropic hardening parameter");
    LSD_MAT103_QX1                          = VALUE(FLOAT,  "Kinematic hardening parameter");
    LSD_MAT103_QX2                          = VALUE(FLOAT,  "Kinematic hardening parameter");
    LSD_MAT_A1                              = VALUE(FLOAT,  "Components of vector a");
    LSD_MAT_A2                              = VALUE(FLOAT,  "Components of vector a");
    LSD_MAT_A3                              = VALUE(FLOAT,  "Components of vector a");
    LSD_MAT_BETA                            = VALUE(FLOAT,  "Material angle in degrees");
    LSD_MAT_D1                              = VALUE(FLOAT,  "Components of vector d");
    LSD_MAT_D2                              = VALUE(FLOAT,  "Components of vector d");
    LSD_MAT_D3                              = VALUE(FLOAT,  "Components of vector d");
    LSD_MAT_R00                             = VALUE(FLOAT,  "R-ratio in 0° direction");
    LSD_MAT_R45                             = VALUE(FLOAT,  "R-ratio in 45° direction");
    LSD_MAT_R90                             = VALUE(FLOAT,  "R-ratio in 90° direction");
    LSD_MAT_V1                              = VALUE(FLOAT,  "Components of vector v");
    LSD_MAT_V2                              = VALUE(FLOAT,  "Components of vector v");
    LSD_MAT_V3                              = VALUE(FLOAT,  "Components of vector v");
    LSD_MAT_XP                              = VALUE(FLOAT,  "Coordinates of point p");
    LSD_MAT_YP                              = VALUE(FLOAT,  "Coordinates of point p");
    LSD_MAT_ZP                              = VALUE(FLOAT,  "Coordinates of point p");
    LSD_NODE1                               = VALUE(NODE,  "Node");
    LSD_NODE3                               = VALUE(NODE,  "Node1");
    LSD_NODE4                               = VALUE(NODE,  "Node2");
    LSD_NODE5                               = VALUE(NODE,  "Node1");
    LSD_NODE6                               = VALUE(NODE,  "Node2");
    LSD_NODE7                               = VALUE(NODE,  "Node1");
    LSD_NODE8                               = VALUE(NODE,  "Node2");
    LSD_SYSTEM                              = VALUE(SYSTEM,  "AOPT");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    MATL135_A                               = VALUE(FLOAT,  "YLD89 parameter");
    MATL135_A1                              = VALUE(FLOAT,  "Yld2003 parameter");
    MATL135_A2                              = VALUE(FLOAT,  "Yld2003 parameter");
    MATL135_A3                              = VALUE(FLOAT,  "Yld2003 parameter");
    MATL135_A4                              = VALUE(FLOAT,  "Yld2003 parameter");
    MATL135_A5                              = VALUE(FLOAT,  "Yld2003 parameter");
    MATL135_A6                              = VALUE(FLOAT,  "Yld2003 parameter");
    MATL135_A7                              = VALUE(FLOAT,  "Yld2003 parameter");
    MATL135_A8                              = VALUE(FLOAT,  "Yld2003 parameter");
    MATL135_ALPHA                           = VALUE(FLOAT,  "Dynamic strain aging parameter");
    MATL135_C                               = VALUE(FLOAT,  "YLD89 parameter");
    MATL135_EDOT                            = VALUE(FLOAT,  "Strain rate parameter");
    MATL135_EMIN                            = VALUE(FLOAT,  "Lower limit of the isotropic hardening rate");
    MATL135_EPS0                            = VALUE(FLOAT,  "Dynamic strain aging parameter");
    MATL135_EPSC                            = VALUE(FLOAT,  "Critical value of the plastic thickness strain");
    MATL135_FLG                             = VALUE(FLOAT,  "FLAG");
    MATL135_H                               = VALUE(FLOAT,  "Dynamic strain aging parameter");
    MATL135_H_PLC                           = VALUE(FLOAT,  "YLD89 parameter");
    MATL135_K                               = VALUE(FLOAT,  "half the exponent for the yield criterion");
    MATL135_LC                              = VALUE(FUNCT,  "pre-strain vs yield stress");
    MATL135_M                               = VALUE(FLOAT,  "Strain rate parameter");
    MATL135_NUMFI                           = VALUE(FLOAT,  "Number of through thickness integration points that must fail");
    MATL135_OMEGA                           = VALUE(FLOAT,  "Dynamic strain aging parameter");
    MATL135_P                               = VALUE(FLOAT,  "YLD89 parameter");
    MATL135_RBB                             = VALUE(FLOAT,  "Balance biaxial flow ratio");
    MATL135_S                               = VALUE(FLOAT,  "Dynamic strain aging parameter");
    MATL135_S00                             = VALUE(FLOAT,  "Yield stress in 0 direction");
    MATL135_S100                            = VALUE(FLOAT,  "Yield stress at 100% strain for using a power-law");
    MATL135_S45                             = VALUE(FLOAT,  "Yield stress in 45 direction");
    MATL135_S90                             = VALUE(FLOAT,  "Yield stress in 90 direction");
    MATL135_SBB                             = VALUE(FLOAT,  "Balanced biaxial flow stress");
    MATL135_SIGMA0                          = VALUE(FLOAT,  "Initial yield stress");
    MATL135_TAUC                            = VALUE(FLOAT,  "Critical value for the shear fracture criterion");
    MATL135_TD                              = VALUE(FLOAT,  "Dynamic strain aging parameter");
    MATL135_WC                              = VALUE(FLOAT,  "Critical value for the Cockcroft-Latham fracture criterion");
    MATL_OPTION                             = VALUE(INT,  "PLC_Option");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    LOC_AOPT                                = VALUE(FLOAT, "");
    IO_FLAG                                 = VALUE(INT, "io flag");
    TITLE                                   = VALUE(STRING, "Title");
    OPT_TYPE_STR                            = VALUE(STRING, "OPT");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
    _HAS_HEADER                             = VALUE(BOOL,"Has Header Card");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    AnisoAxisDefiniFlag                     = 1053;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    E                                       = 119;
    LSD_MAT103_CR1                          = 2655;
    LSD_MAT103_CR2                          = 2657;
    LSD_MAT103_CX1                          = 2659;
    LSD_MAT103_CX2                          = 2661;
    LSD_MAT103_QR1                          = 2654;
    LSD_MAT103_QR2                          = 2656;
    LSD_MAT103_QX1                          = 2658;
    LSD_MAT103_QX2                          = 2660;
    LSD_MAT_A1                              = 280;
    LSD_MAT_A2                              = 281;
    LSD_MAT_A3                              = 341;
    LSD_MAT_BETA                            = 306;
    LSD_MAT_D1                              = 320;
    LSD_MAT_D2                              = 321;
    LSD_MAT_D3                              = 322;
    LSD_MAT_R00                             = 4932;
    LSD_MAT_R45                             = 4933;
    LSD_MAT_R90                             = 4934;
    LSD_MAT_V1                              = 342;
    LSD_MAT_V2                              = 343;
    LSD_MAT_V3                              = 344;
    LSD_MAT_XP                              = 338;
    LSD_MAT_YP                              = 339;
    LSD_MAT_ZP                              = 340;
    LSD_NODE1                               = 86;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_NODE7                               = 5080;
    LSD_NODE8                               = 5081;
    LSD_SYSTEM                              = 184;
    LSD_TitleOpt                            = 90;
    MATL135_A                               = 1767;
    MATL135_A1                              = 1754;
    MATL135_A2                              = 1755;
    MATL135_A3                              = 1756;
    MATL135_A4                              = 1757;
    MATL135_A5                              = 1758;
    MATL135_A6                              = 1759;
    MATL135_A7                              = 1760;
    MATL135_A8                              = 1761;
    MATL135_ALPHA                           = 1779;
    MATL135_C                               = 1768;
    MATL135_EDOT                            = 1771;
    MATL135_EMIN                            = 1773;
    MATL135_EPS0                            = 1780;
    MATL135_EPSC                            = 1747;
    MATL135_FLG                             = 1753;
    MATL135_H                               = 1769;
    MATL135_H_PLC                           = 1776;
    MATL135_K                               = 1751;
    MATL135_LC                              = 1752;
    MATL135_M                               = 1772;
    MATL135_NUMFI                           = 1746;
    MATL135_OMEGA                           = 1777;
    MATL135_P                               = 1770;
    MATL135_RBB                             = 1766;
    MATL135_S                               = 1775;
    MATL135_S00                             = 1762;
    MATL135_S100                            = 1774;
    MATL135_S45                             = 1763;
    MATL135_S90                             = 1764;
    MATL135_SBB                             = 1765;
    MATL135_SIGMA0                          = 1750;
    MATL135_TAUC                            = 1749;
    MATL135_TD                              = 1778;
    MATL135_WC                              = 1748;
    MATL_OPTION                             = 999;
    Nu                                      = 120;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    AOPT_SKEW_FLAG                          = -1;
    LOC_AOPT                                = -1;
    IO_FLAG                                 = -1;
    TITLE                                   = -1;
    OPT_TYPE_STR                            = -1;
    //empty_string                       = -1;
    _HAS_HEADER                             = -1;
}
DRAWABLES(COMMON) {
public:
    MASS_DENSITY=SCALAR(Rho);
    YOUNG_MODULUS = SCALAR(E);
    POISSON_RATIO = SCALAR(Nu);
    //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}
DEFAULTS(COMMON) {
    _HAS_HEADER = TRUE;
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_WTM_STM");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }   
     FLAG(MATL_OPTION);
     if(MATL_OPTION == 1)
     {
             ASSIGN(KEYWORD_STR, "_PLC");
     }
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                            { DIMENSION="density";  } 
     SCALAR(E)                              { DIMENSION="pressure";      } 
 optional:                                   
     SCALAR(Nu)                             { DIMENSION="DIMENSIONLESS"; }
     SCALAR(MATL135_NUMFI)                  { DIMENSION="DIMENSIONLESS"; } 
     SCALAR(MATL135_EPSC)                   { DIMENSION="DIMENSIONLESS"; }
     SCALAR(MATL135_WC)                     { DIMENSION="DIMENSIONLESS"; }
     SCALAR(MATL135_TAUC)                   { DIMENSION="DIMENSIONLESS"; }
     SCALAR(MATL135_SIGMA0)                 { DIMENSION="DIMENSIONLESS"; } 
     SCALAR(LSD_MAT103_QR1)                 { DIMENSION="DIMENSIONLESS"; }
     SCALAR(LSD_MAT103_CR1)                 { DIMENSION="DIMENSIONLESS"; }
     SCALAR(LSD_MAT103_QR2)                 { DIMENSION="DIMENSIONLESS"; }
     SCALAR(LSD_MAT103_CR2)                 { DIMENSION="DIMENSIONLESS"; }
     SCALAR(MATL135_K)                      { DIMENSION="DIMENSIONLESS"; }
     if(MATL_OPTION == 0)
     {
        DATA(MATL135_LC);
        RADIO(MATL135_FLG)
        {
            ADD(0.0, "0.0");
            ADD(1.0, "1.0");
            ADD(2.0, "2.0");
        }
     }
     if(MATL_OPTION == 1 || (MATL_OPTION == FALSE && MATL135_FLG == 0.0))
     {
         SCALAR(MATL135_A1)                 { DIMENSION="DIMENSIONLESS"; }
         SCALAR(MATL135_A2)                 { DIMENSION="DIMENSIONLESS"; }
         SCALAR(MATL135_A3)                 { DIMENSION="DIMENSIONLESS"; }
         SCALAR(MATL135_A4)                 { DIMENSION="DIMENSIONLESS"; }
         SCALAR(MATL135_A5)                 { DIMENSION="DIMENSIONLESS"; }
         SCALAR(MATL135_A6)                 { DIMENSION="DIMENSIONLESS"; }
         SCALAR(MATL135_A7)                 { DIMENSION="DIMENSIONLESS"; }
         SCALAR(MATL135_A8)                 { DIMENSION="DIMENSIONLESS"; }
     }
     if(MATL_OPTION == 0 && MATL135_FLG == 1.0)
     {
         SCALAR(MATL135_S00)                { DIMENSION="pressure"; }  
         SCALAR(MATL135_S45)                { DIMENSION="pressure"; }  
         SCALAR(MATL135_S90)                { DIMENSION="pressure"; }  
         SCALAR(MATL135_SBB)                { DIMENSION="pressure"; }  
         SCALAR(LSD_MAT_R00)                { DIMENSION="DIMENSIONLESS"; }
         SCALAR(LSD_MAT_R45)                { DIMENSION="DIMENSIONLESS"; }
         SCALAR(LSD_MAT_R90)                { DIMENSION="DIMENSIONLESS"; }
         SCALAR(MATL135_RBB)                { DIMENSION="DIMENSIONLESS"; }
     }
     if(MATL_OPTION == 0 && MATL135_FLG == 2.0)
     {
         SCALAR(MATL135_A)                  { DIMENSION="DIMENSIONLESS"; }
         SCALAR(MATL135_C)                  { DIMENSION="DIMENSIONLESS"; }
         SCALAR(MATL135_H)                  { DIMENSION="DIMENSIONLESS"; }
         SCALAR(MATL135_P)                  { DIMENSION="DIMENSIONLESS"; }
     }
     if(MATL_OPTION == 0)
     {
         SCALAR(LSD_MAT103_QX1)             { DIMENSION="DIMENSIONLESS"; }
         SCALAR(LSD_MAT103_CX1)             { DIMENSION="DIMENSIONLESS"; }
         SCALAR(LSD_MAT103_QX2)             { DIMENSION="DIMENSIONLESS"; }
         SCALAR(LSD_MAT103_CX2)             { DIMENSION="DIMENSIONLESS"; }
         SCALAR(MATL135_EDOT)               { DIMENSION="DIMENSIONLESS"; }
         SCALAR(MATL135_M)                  { DIMENSION="DIMENSIONLESS"; }
         SCALAR(MATL135_EMIN)               { DIMENSION="DIMENSIONLESS"; }
         SCALAR(MATL135_S100)               { DIMENSION="DIMENSIONLESS"; }
     }
     if(MATL_OPTION == 1)
     {
         SCALAR(MATL135_S);
         SCALAR(MATL135_H_PLC);
         SCALAR(MATL135_OMEGA);
         SCALAR(MATL135_TD);
         SCALAR(MATL135_ALPHA);
         SCALAR(MATL135_EPS0);
     }
     RADIO(AnisoAxisDefiniFlag)
     {
        ADD(1, "0: Locally orthotropic: axis given by nodes 1,2 and 4");
        ADD(2, "1: Locally orthotropic: a-dir given by a point and global location of element center");
        ADD(3, "2: globally orthotropic: axis given by vectors");
        ADD(4, "3: Locally orthotropic: axis given by rotating the material axes by an angle BETA");
        ADD(5, "By System");
     }
     if(AnisoAxisDefiniFlag == 5)
     {
        DATA(LSD_SYSTEM);
     }
     if(AnisoAxisDefiniFlag == 1 || AnisoAxisDefiniFlag == 4)
     {
        SCALAR(LSD_MAT_BETA)                {DIMENSION="a";}
     }
     if(AnisoAxisDefiniFlag == 2)
     {
        DATA(LSD_NODE1);
        ASSIGN(LSD_MAT_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],FALSE);
        ASSIGN(LSD_MAT_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],FALSE);
        ASSIGN(LSD_MAT_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],FALSE);
     }     
     if(AnisoAxisDefiniFlag == 3)
     {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        ASSIGN(LSD_MAT_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],FALSE);
        ASSIGN(LSD_MAT_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],FALSE);
        ASSIGN(LSD_MAT_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],FALSE);
        DATA(LSD_NODE7);                
        DATA(LSD_NODE8);                
        ASSIGN(LSD_MAT_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],FALSE);
        ASSIGN(LSD_MAT_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],FALSE);
        ASSIGN(LSD_MAT_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],FALSE);
     }
     if(AnisoAxisDefiniFlag == 4)
     {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        ASSIGN(LSD_MAT_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],FALSE);
        ASSIGN(LSD_MAT_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],FALSE);
        ASSIGN(LSD_MAT_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],FALSE);
     }     
     
/*
       graphical SUPPORT("Part(s) to which material is applied")
        {
          OBJECTS=(/COMPONENT/SHELL,/COMPONENT/TSHELL);   
          ADD(COMPONENT,"Parts");
        }
*/
     
}

// File format
FORMAT(Keyword971) 
{
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSD_MAT_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSD_MAT_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSD_MAT_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSD_MAT_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSD_MAT_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSD_MAT_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    if(LSD_NODE7 != NONE && LSD_NODE8 != NONE)
    {
        ASSIGN(LSD_MAT_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSD_MAT_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSD_MAT_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSD_MAT_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSD_MAT_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSD_MAT_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);

    if(IO_FLAG == 1)
    {
        HEADER("*MAT_135%10s",OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "" || OPT_TYPE_STR != "_TITLE" || OPT_TYPE_STR != "_PLC" || OPT_TYPE_STR != "_PLC_TITLE"))
    {
         HEADER("*MAT_WTM_STM%10s", OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "" || OPT_TYPE_STR == "_TITLE"))
    {
        ASSIGN(MATL_OPTION,0,IMPORT);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "_PLC" || OPT_TYPE_STR == "_PLC_TITLE"))
    {
        ASSIGN(MATL_OPTION,1,IMPORT);
    }
    if(IO_FLAG == 2 && MATL_OPTION == 0 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_WTM_STM");
    }
    else if(IO_FLAG == 2 && MATL_OPTION == 0 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_WTM_STM_TITLE");
        CARD("%-80s", TITLE);
    }
    else if(IO_FLAG == 2 && MATL_OPTION == 1 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_WTM_STM_PLC");
    }
    else if(IO_FLAG == 2 && MATL_OPTION == 1 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_WTM_STM_PLC_TITLE");
        CARD("%-80s", TITLE);
    }

    if(AnisoAxisDefiniFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(AnisoAxisDefiniFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(AnisoAxisDefiniFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(AnisoAxisDefiniFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }

    COMMENT("$      MID       RHO         E        PR     NUMFI      EPSC        WC      TAUC");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,MATL135_NUMFI,MATL135_EPSC,MATL135_WC,MATL135_TAUC);

    COMMENT("$   SIGMA0       QR1       CR1       QR2       CR2         K        LC       FLG");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d%10lg",MATL135_SIGMA0,LSD_MAT103_QR1,LSD_MAT103_CR1,LSD_MAT103_QR2,LSD_MAT103_CR2,MATL135_K,MATL135_LC,MATL135_FLG);

    if(MATL_OPTION == 1 || (MATL_OPTION == 0 && MATL135_FLG == 0.0))
    {
         COMMENT("$       A1        A2        A3        A4        A5        A6        A7        A8");
         CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",MATL135_A1,MATL135_A2,MATL135_A3,MATL135_A4,MATL135_A5,MATL135_A6,MATL135_A7,MATL135_A8);
    } 
    if(MATL_OPTION == 0 && MATL135_FLG == 1.0)
    {
         COMMENT("$      S00       S45       S90       SBB       R00       R45       R90       RBB");
         CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",MATL135_S00,MATL135_S45,MATL135_S90,MATL135_SBB,LSD_MAT_R00,LSD_MAT_R45,LSD_MAT_R90,MATL135_RBB);
    } 
    if(MATL_OPTION == 0 && MATL135_FLG == 2.0) 
    {
         COMMENT("$        A         C         H         P");
         CARD("%10lg%10lg%10lg%10lg",MATL135_A,MATL135_C,MATL135_H,MATL135_P);
    }
    if(MATL_OPTION == 0)
    {
        COMMENT("$      QX1       CX1       QX2       CX2      EDOT         M      EMIN      S100");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT103_QX1,LSD_MAT103_CX1,LSD_MAT103_QX2,LSD_MAT103_CX2,MATL135_EDOT,MATL135_M,MATL135_EMIN,MATL135_S100);
    }
    if(MATL_OPTION == 1)
    {
        COMMENT("$        S         H     OMEGA        TD     ALPHA      EPS0");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg",MATL135_S,MATL135_H_PLC,MATL135_OMEGA,MATL135_TD,MATL135_ALPHA,MATL135_EPS0);
    }

    COMMENT("$     AOPT      BETA");
    if(IO_FLAG == 2)
    {
        if(AnisoAxisDefiniFlag == 1 || AnisoAxisDefiniFlag == 4)
        {
            CARD("%10lg%10lg",LOC_AOPT,LSD_MAT_BETA);
        }
        else if(AnisoAxisDefiniFlag == 2 || AnisoAxisDefiniFlag == 3)
        {
            CARD("%10lg",LOC_AOPT);
        }
        else
        {
            CARD("%10d",FLAGGED_OBJECT(LSD_SYSTEM,AOPT_SKEW_FLAG));
        }
    }
    CARD_PREREAD("%10lg",LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(AnisoAxisDefiniFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(AnisoAxisDefiniFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(AnisoAxisDefiniFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(AnisoAxisDefiniFlag,4,IMPORT);
    }

    if(IO_FLAG == 1)
    {
        if(AnisoAxisDefiniFlag == 4)
        {
            CARD("%10lg%10lg",LOC_AOPT,LSD_MAT_BETA);
        }
        else if(AnisoAxisDefiniFlag == 1 || AnisoAxisDefiniFlag == 2 || AnisoAxisDefiniFlag == 3)
        {
            CARD("%10lg",LOC_AOPT);
        }
        else
        {
              CARD("%10lg",FLAGGED_OBJECT(LSD_SYSTEM,AOPT_SKEW_FLAG));
              ASSIGN(AnisoAxisDefiniFlag, 5, IMPORT);
        }
    }

    COMMENT("$       XP        YP        ZP        A1        A2        A3");
    if(AnisoAxisDefiniFlag == 2)
    {
        CARD("%10lg%10lg%10lg",LSD_MAT_XP,LSD_MAT_YP,LSD_MAT_ZP);
    }
    else if(AnisoAxisDefiniFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSD_MAT_A1,LSD_MAT_A2,LSD_MAT_A3);
    }
    else
    {
        BLANK;
    }

    COMMENT("$       V1        V2        V3        D1        D2        D3"); 
    if(AnisoAxisDefiniFlag == 4)
    {
        CARD("%10lg%10lg%10lg",LSD_MAT_V1,LSD_MAT_V2,LSD_MAT_V3);
    }
    else if(AnisoAxisDefiniFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSD_MAT_D1,LSD_MAT_D2,LSD_MAT_D3);
    }
    else
    {
        BLANK;
    }
}

// File format
FORMAT(Keyword971_R6.1) 
{
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSD_MAT_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSD_MAT_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSD_MAT_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSD_MAT_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSD_MAT_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSD_MAT_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    if(LSD_NODE7 != NONE && LSD_NODE8 != NONE)
    {
        ASSIGN(LSD_MAT_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSD_MAT_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSD_MAT_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSD_MAT_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSD_MAT_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSD_MAT_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);

    if(IO_FLAG == 1)
    {
        HEADER("*MAT_135%10s",OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "" || OPT_TYPE_STR != "_TITLE" || OPT_TYPE_STR != "_PLC" || OPT_TYPE_STR != "_PLC_TITLE"))
    {
         HEADER("*MAT_WTM_STM%10s", OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "" || OPT_TYPE_STR == "_TITLE"))
    {
        ASSIGN(MATL_OPTION,0,IMPORT);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "_PLC" || OPT_TYPE_STR == "_PLC_TITLE"))
    {
        ASSIGN(MATL_OPTION,1,IMPORT);
    }
    if(IO_FLAG == 2 && MATL_OPTION == 0 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_WTM_STM");
    }
    else if(IO_FLAG == 2 && MATL_OPTION == 0 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_WTM_STM_TITLE");
        CARD("%-80s", TITLE);
    }
    else if(IO_FLAG == 2 && MATL_OPTION == 1 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_WTM_STM_PLC");
    }
    else if(IO_FLAG == 2 && MATL_OPTION == 1 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_WTM_STM_PLC_TITLE");
        CARD("%-80s", TITLE);
    }

    if(AnisoAxisDefiniFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(AnisoAxisDefiniFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(AnisoAxisDefiniFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(AnisoAxisDefiniFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }

    COMMENT("$      MID       RHO         E        PR     NUMFI      EPSC        WC      TAUC");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,MATL135_NUMFI,MATL135_EPSC,MATL135_WC,MATL135_TAUC);

    COMMENT("$   SIGMA0       QR1       CR1       QR2       CR2         K        LC       FLG");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d%10lg",MATL135_SIGMA0,LSD_MAT103_QR1,LSD_MAT103_CR1,LSD_MAT103_QR2,LSD_MAT103_CR2,MATL135_K,MATL135_LC,MATL135_FLG);

    if(MATL_OPTION == 1 || (MATL_OPTION == 0 && MATL135_FLG == 0.0))
    {
         COMMENT("$       A1        A2        A3        A4        A5        A6        A7        A8");
         CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",MATL135_A1,MATL135_A2,MATL135_A3,MATL135_A4,MATL135_A5,MATL135_A6,MATL135_A7,MATL135_A8);
    } 
    if(MATL_OPTION == 0 && MATL135_FLG == 1.0)
    {
         COMMENT("$      S00       S45       S90       SBB       R00       R45       R90       RBB");
         CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",MATL135_S00,MATL135_S45,MATL135_S90,MATL135_SBB,LSD_MAT_R00,LSD_MAT_R45,LSD_MAT_R90,MATL135_RBB);
    } 
    if(MATL_OPTION == 0 && MATL135_FLG == 2.0) 
    {
         COMMENT("$        A         C         H         P");
         CARD("%10lg%10lg%10lg%10lg",MATL135_A,MATL135_C,MATL135_H,MATL135_P);
    }
    if(MATL_OPTION == 0)
    {
        COMMENT("$      QX1       CX1       QX2       CX2      EDOT         M      EMIN      S100");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT103_QX1,LSD_MAT103_CX1,LSD_MAT103_QX2,LSD_MAT103_CX2,MATL135_EDOT,MATL135_M,MATL135_EMIN,MATL135_S100);
    }
    if(MATL_OPTION == 1)
    {
        COMMENT("$        S         H     OMEGA        TD     ALPHA      EPS0");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg",MATL135_S,MATL135_H_PLC,MATL135_OMEGA,MATL135_TD,MATL135_ALPHA,MATL135_EPS0);
    }

    COMMENT("$     AOPT      BETA");
    if(IO_FLAG == 2)
    {
        if(AnisoAxisDefiniFlag == 1 || AnisoAxisDefiniFlag == 4)
        {
            CARD("%10lg%10lg",LOC_AOPT,LSD_MAT_BETA);
        }
        else if(AnisoAxisDefiniFlag == 2 || AnisoAxisDefiniFlag == 3)
        {
            CARD("%10lg",LOC_AOPT);
        }
        else
        {
            CARD("%10d",FLAGGED_OBJECT(LSD_SYSTEM,AOPT_SKEW_FLAG));
        }
    }
    CARD_PREREAD("%10lg",LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(AnisoAxisDefiniFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(AnisoAxisDefiniFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(AnisoAxisDefiniFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(AnisoAxisDefiniFlag,4,IMPORT);
    }

    if(IO_FLAG == 1)
    {
        if(AnisoAxisDefiniFlag == 1 || AnisoAxisDefiniFlag == 4)
        {
            CARD("%10lg%10lg",LOC_AOPT,LSD_MAT_BETA);
        }
        else if(AnisoAxisDefiniFlag == 2 || AnisoAxisDefiniFlag == 3)
        {
            CARD("%10lg",LOC_AOPT);
        }
        else
        {
              CARD("%10lg",FLAGGED_OBJECT(LSD_SYSTEM,AOPT_SKEW_FLAG));
              ASSIGN(AnisoAxisDefiniFlag, 5, IMPORT);
        }
    }

    COMMENT("$       XP        YP        ZP        A1        A2        A3");
    if(AnisoAxisDefiniFlag == 2)
    {
        CARD("%10lg%10lg%10lg",LSD_MAT_XP,LSD_MAT_YP,LSD_MAT_ZP);
    }
    else if(AnisoAxisDefiniFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSD_MAT_A1,LSD_MAT_A2,LSD_MAT_A3);
    }
    else
    {
        BLANK;
    }

    COMMENT("$       V1        V2        V3        D1        D2        D3"); 
    if(AnisoAxisDefiniFlag == 4)
    {
        CARD("%10lg%10lg%10lg",LSD_MAT_V1,LSD_MAT_V2,LSD_MAT_V3);
    }
    else if(AnisoAxisDefiniFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSD_MAT_D1,LSD_MAT_D2,LSD_MAT_D3);
    }
    else
    {
        BLANK;
    }
}
