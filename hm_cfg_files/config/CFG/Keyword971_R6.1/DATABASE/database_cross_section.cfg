//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
/
//DATABASE_CROSS_SECTION
//

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES
    VisualizationPart_ID        = VALUE(SETS, "Nodal set ID containing secondary nodes") { SUBTYPES = (/SETS/SET_PART_IDPOOL) ; }  
    basenode                    = VALUE(NODE, "X Y Z coordinate");
    normal                      = VALUE(NODE, "X Y Z coordinate");
    XTail                       = VALUE(FLOAT, "x-coordinate of tail of normal vector n");
    YTail                       = VALUE(FLOAT, "y-coordinate of tail of normal vector n");
    ZTail                       = VALUE(FLOAT, "z-coordinate of tail of normal vector n");
    XHead                       = VALUE(FLOAT, "x-coordinate of head of normal vector n");
    YHead                       = VALUE(FLOAT, "y-coordinate of head of normal vector n");
    ZHead                       = VALUE(FLOAT, "z-coordinate of head of normal vector n");

    Edge                        = VALUE(NODE, "X Y Z coordinate");
    XHev                        = VALUE(FLOAT, "x-coordinate of head of edge vector l");
    YHev                        = VALUE(FLOAT, "y-coordinate of head of edge vector l");
    ZHev                        = VALUE(FLOAT, "z-coordinate of head of edge vector l");
    Length                      = VALUE(FLOAT, "Length of l edge");
    Width                       = VALUE(FLOAT, "Length of m edge");
    Radius                      = VALUE(FLOAT, "Optional radius");

    NodalSet_ID                 = VALUE(SETS, "Nodal set ID") { SUBTYPES = (/SETS/SET_NODE_IDPOOL); }
    SolidElementSet_ID          = VALUE(SETS, "Solid element set ID") { SUBTYPES = (/SETS/SET_SOLID_IDPOOL) ; }
    BeamElementSet_ID           = VALUE(SETS, "Beam element set ID") { SUBTYPES = (/SETS/SET_BEAM_IDPOOL) ; }
    ShellElementSet_ID          = VALUE(SETS, "Shell element set ID") { SUBTYPES = (/SETS/SET_SHELL_IDPOOL) ; }
    ThickShellElementSet_ID     = VALUE(SETS, "Thick shell element set ID") { SUBTYPES = (/SETS/SET_TSHELL_IDPOOL) ; }
    DiscreteElementSet_ID       = VALUE(SETS, "Discrete element set ID") { SUBTYPES = (/SETS/SET_DISCRETE_IDPOOL) ; }

    component_elem_system_id    = VALUE(COMPONENT, "Rigid body accelerometer ID or coordinate ID");
    ITYPE                       = VALUE(INT,"Flag that specifies whether ID above pertains to a rigid body, an accelerometer, or a coordinate system");

    // HM INTERNAL
    KEYWORD_STR         = VALUE(STRING, "Solver Keyword");
    config              = VALUE(INT, "Cross section configure");
    geometrytype        = VALUE(INT, "Select a Geometry Type");

    IOFLAG              = VALUE(INT, "Import/Export flag");
    option              = VALUE(STRING, "");
    filteredIdOpt       = VALUE(INT, "OPTION: Define ID card");
    TITLE               = VALUE(STRING,"title");
}


DEFAULTS(COMMON) 
{

}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR        = 9000;
    IOFLAG             = -1;
    option             = -1;
    filteredIdOpt      = -1;
}

GUI(COMMON) 
{
    RADIO(config,"config")
    {
        ADD(101, "Plane");
        ADD(102, "Set");
    }
    FLAG(filteredIdOpt,"ID Option");
    if (config == 101 && filteredIdOpt == 1) 
    {
        ASSIGN(KEYWORD_STR,"*DATABASE_CROSS_SECTION_PLANE_ID");
    } 
    else if (config == 101 && filteredIdOpt == 0)
    {
        ASSIGN(KEYWORD_STR,"*DATABASE_CROSS_SECTION_PLANE");
    } 
    else if (config == 102 && filteredIdOpt == 1)
    {
        ASSIGN(KEYWORD_STR,"*DATABASE_CROSS_SECTION_SET_ID");
    } 
    else if (config == 102 && filteredIdOpt == 0)
    {
        ASSIGN(KEYWORD_STR,"*DATABASE_CROSS_SECTION_SET");
    }
    mandatory:
    RADIO(geometrytype,"Geometry Type")
    {
        ADD(1, "Plane");
        ADD(2, "Circle");
    }
    optional:
    if (config == 101 && geometrytype != 2)
    {
        DATA(VisualizationPart_ID, "Set ID");
        DATA(basenode, "Basenode");
        DATA(normal, "Normal");
        SCALAR(XHead)      { DIMENSION="l"; }
        SCALAR(YHead)      { DIMENSION="l"; }
        SCALAR(ZHead)      { DIMENSION="l"; }
        DATA(Edge, "Edge");
        SCALAR(XHev)      { DIMENSION="l"; }
        SCALAR(YHev)      { DIMENSION="l"; }
        SCALAR(ZHev)      { DIMENSION="l"; }
        SCALAR(Length)    { DIMENSION="l"; }
        SCALAR(Width)     { DIMENSION="l"; }
    }
    else if(config == 101 && geometrytype == 2)
    {
        DATA(VisualizationPart_ID, "Set ID");
        DATA(basenode, "Basenode");
        DATA(normal, "Normal");
        SCALAR(XHead)      { DIMENSION="l"; }
        SCALAR(YHead)      { DIMENSION="l"; }
        SCALAR(ZHead)      { DIMENSION="l"; }
        SCALAR(Radius)     { DIMENSION="l"; }
        DATA(Edge, "Edge");
        SCALAR(XHev)      { DIMENSION="l"; }
        SCALAR(YHev)      { DIMENSION="l"; }
        SCALAR(ZHev)      { DIMENSION="l"; }
        SCALAR(Length)    { DIMENSION="l"; }
        SCALAR(Width)     { DIMENSION="l"; }
    }
    if (config == 102)
    {
        DATA(NodalSet_ID,"Nodal set ID");
        DATA(SolidElementSet_ID,"Solid element set ID");
        DATA(BeamElementSet_ID,"Beam element set ID");
        DATA(ShellElementSet_ID,"Shell element set ID");
        DATA(ThickShellElementSet_ID,"Thick Shellelement set ID");
        DATA(DiscreteElementSet_ID,"Discrete element set ID");
    }

    DATA(component_elem_system_id);
    RADIO(ITYPE)
    {
        ADD(0, "rigid body");
        ADD(1, "accelerometer");
        ADD(2, "coordinate system");
    }
}

FORMAT(Keyword971_R6.1) 
{
    ASSIGN(IOFLAG, 1, IMPORT);
    ASSIGN(IOFLAG, 0, EXPORT);
    if (IOFLAG == 0) 
    {
        if (config == 101 && filteredIdOpt == 1) 
        {
            HEADER("*DATABASE_CROSS_SECTION_PLANE_ID");
        } 
        else if (config == 101 && filteredIdOpt == 0)
        {
            HEADER("*DATABASE_CROSS_SECTION_PLANE");
        } 
        else if (config == 102 && filteredIdOpt == 1)
        {
            HEADER("*DATABASE_CROSS_SECTION_SET_ID");
        } 
        else if (config == 102 && filteredIdOpt == 0)
        {
            HEADER("*DATABASE_CROSS_SECTION_SET");
        }
    } 
    else 
    {
        // IMPORT
        HEADER("*DATABASE_CROSS_SECTION%s",option);
        if (option == "_PLANE_ID")
        {
            ASSIGN(config, 101, IMPORT);
            ASSIGN(filteredIdOpt, 1, IMPORT);
        } 
        else if (option == "_PLANE")
        {
            ASSIGN(config, 101, IMPORT);
            ASSIGN(filteredIdOpt, 0, IMPORT);
        } 
        else if (option == "_SET_ID")
        {
            ASSIGN(config, 102, IMPORT);
            ASSIGN(filteredIdOpt, 1, IMPORT);
        } 
        else if (option == "_SET")
        {
            ASSIGN(config, 102, IMPORT);
            ASSIGN(filteredIdOpt, 0, IMPORT);
        }
    }
    
    if (IOFLAG == 0 && filteredIdOpt == 1) 
    {
        COMMENT("$     CSIDHEADING");
        CARD("%10d%-70s",_ID_,TITLE);
    }

    if (config == 101)
    {
        if (IOFLAG == 1)
            CARD_PREREAD("                                                                      %10lg",Radius);
        if (Radius > 0.0)
        {
            ASSIGN(geometrytype, 2, IMPORT);

        }
        else
        {
            ASSIGN(geometrytype, 1, IMPORT);
        }
        
        COMMENT("$     PSID       XCT       YCT       ZCT       XCH       YCH       ZCH    RADIUS");
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",VisualizationPart_ID,XTail,YTail,ZTail,XHead,YHead,ZHead,Radius);

        COMMENT("$     XHEV      YHEV      ZHEV      LENL      LENM        ID     ITYPE");
        CARD("%10lg%10lg%10lg%10lg%10lg%10d%10d",XHev,YHev,ZHev,Length,Width,component_elem_system_id,ITYPE);
    }
    else if (config == 102)
    {
        COMMENT("$     NSID      HSID      BSID      SSID      TSID      DSID        ID     ITYPE");
        CARD("%10d%10d%10d%10d%10d%10d%10d%10d",NodalSet_ID,SolidElementSet_ID,BeamElementSet_ID,ShellElementSet_ID,ThickShellElementSet_ID,DiscreteElementSet_ID,component_elem_system_id,ITYPE);
    }
}
