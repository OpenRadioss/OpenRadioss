//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// CONSTRAINED_NODAL_RIGID_BODY
//

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES
    //Title Card
    Comment                                 = VALUE(STRING,  "Title");
    //Card 1
    LSD_CID                                 = VALUE(SYSTEM,  "Optional coordinate system ID for the rigid body local system");
    dependentnodeset                        = VALUE(SETS, "Nodal set ID")                                                                   { SUBTYPES = (/SETS/SET_NODE_IDPOOL) ; }
    LSD_NODE1                               = VALUE(NODE,  "An optional node");
    LSD_PRBF                                = VALUE(INT,  "Print flag");
    DRFLAG                                  = VALUE(INT,"DRFLAG");
    RRFLAG                                  = VALUE(INT,"RRFLAG");
    //Card 2
    LSDYNA_CMO                              = VALUE(FLOAT,  "Center of mass constraint option");
    LSD_CON1                                = VALUE(INT,  "First constraint parameter");
    LSD_CON2int                             = VALUE(INT,  "Second constraint parameter:");
    LSDYNA_CON2                             = VALUE(STRING,  "Second constraint parameter:");
    //Inertia Card 1
    LSD_XC                                  = VALUE(FLOAT,  "x-coordinate of center of mass");
    LSD_YC                                  = VALUE(FLOAT,  "y-coordinate of center of mass");
    LSD_ZC                                  = VALUE(FLOAT,  "z-coordinate of center of mass");
    LSD_TM                                  = VALUE(FLOAT,  "Translational mass");
    LSD_IRCS                                = VALUE(INT,  "Flag for inertia tensor reference coordinate system");
    LSD_NODE2                               = VALUE(NODE,  "Optional nodal point defining the CG of the rigid body.");
    //Inertia Card 2
    LSD_IXX                                 = VALUE(FLOAT,  "Ixx, xx component of inertia tensor");
    LSD_IXY                                 = VALUE(FLOAT,  "Ixy, xy component of inertia tensor");
    LSD_IXZ                                 = VALUE(FLOAT,  "Ixz, xz component of inertia tensor");
    LSD_IYY                                 = VALUE(FLOAT,  "Iyy, yy component of inertia tensor");
    LSD_IYZ                                 = VALUE(FLOAT,  "Ixz, yz component of inertia tensor");
    LSD_IZZ                                 = VALUE(FLOAT,  "Izz, zz component of inertia tensor");
    //Inertia Card 3
    LSD_VTX                                 = VALUE(FLOAT,  "x-rigid body initial translational velocity in global coordinate system");
    LSD_VTY                                 = VALUE(FLOAT,  "y-rigid body initial translational velocity in global coordinate system");
    LSD_VTZ                                 = VALUE(FLOAT,  "z-rigid body initial translational velocity in global coordinate system");
    LSD_VRX                                 = VALUE(FLOAT,  "x-rigid body initial rotational velocity in global coordinate system");
    LSD_VRY                                 = VALUE(FLOAT,  "y-rigid body initial rotational velocity in global coordinate system");
    LSD_VRZ                                 = VALUE(FLOAT,  "z-rigid body initial rotational velocity in global coordinate system");
    //Local Inertia Tensor Card
    LSD_XL                                  = VALUE(FLOAT,  "x-coordinate of local x-axis");
    LSD_YL                                  = VALUE(FLOAT,  "y-coordinate of local x-axis");
    LSD_ZL                                  = VALUE(FLOAT,  "z-coordinate of local x-axis");
    LSD_XLIP                                = VALUE(FLOAT,  "x-coordinate of local in-plane vector");
    LSD_YLIP                                = VALUE(FLOAT,  "y-coordinate of local in-plane vector");
    LSD_ZLIP                                = VALUE(FLOAT,  "z-coordinate of local in-plane vector");
    LSD_CID2                                = VALUE(SYSTEM,  "Local coordinate system ID");
    LSD_CON1_SID                            = VALUE(SYSTEM, "Local coordinate system ID");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    Elem_Option                             = VALUE(INT,  "");
    LSD_TitleOpt                            = VALUE(INT,  "");
    spcOption                               = VALUE(INT,  "");
    IOFLAG                                  = VALUE(INT, "");
    _opt                                    = VALUE(STRING, "");
    _dummy                                  = VALUE(INT, "");
    _HAS_HEADER                             = VALUE(BOOL, "");
    HAS_TITLE                               = VALUE(STRING, "");
    TITLE                                   = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    Comment                                 = 100;
    LSD_CID                                 = 412;
    LSD_NODE1                               = 86;
    LSD_PRBF                                = 2828;
    DRFLAG                                  = 4458;
    RRFLAG                                  = 4459;

    LSDYNA_CMO                              = 181;
    LSD_CON1                                = 3090;
    LSD_CON2int                             = 3091;
    LSDYNA_CON2                             = 183;

    LSD_XC                                  = 466;
    LSD_YC                                  = 467;
    LSD_ZC                                  = 468;
    LSD_TM                                  = 469;
    LSD_IRCS                                = 470;
    LSD_NODE2                               = 87;

    LSD_IXX                                 = 471;
    LSD_IXY                                 = 472;
    LSD_IXZ                                 = 473;
    LSD_IYY                                 = 474;
    LSD_IYZ                                 = 475;
    LSD_IZZ                                 = 476;

    LSD_VTX                                 = 477;
    LSD_VTY                                 = 478;
    LSD_VTZ                                 = 479;
    LSD_VRX                                 = 480;
    LSD_VRY                                 = 481;
    LSD_VRZ                                 = 482;
    
    LSD_XL                                  = 483;
    LSD_YL                                  = 484;
    LSD_ZL                                  = 485;
    LSD_XLIP                                = 486;
    LSD_YLIP                                = 487;
    LSD_ZLIP                                = 488;
    LSD_CID2                                = 414;

    KEYWORD_STR                             = 9000;
    Elem_Option                             = 701;
    spcOption                               = 4457;
    LSD_TitleOpt                            = 90;
    IOFLAG                                  = -1;
    _opt                                    = -1;
    _dummy                                  = -1;
    _HAS_HEADER                             = -1;
    TITLE                                   = -1;

    // Added this new attribute to resolve the issue cause because LSD_CID2 attribute
    // is used twice in the same keyword i.e. card2 and card 6 which is not correct and to resolve added this temporary variable. 
    LSD_CON1_SID                            = -1;
}


DEFAULTS(COMMON)
{
   HAS_TITLE                                = "";
   _HAS_HEADER                              = TRUE;
}


GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*CONSTRAINED_NODAL_RIGID_BODY");

    FLAG(spcOption, "spcOption");
    FLAG(Elem_Option, "Elem_Option");
    FLAG(LSD_TitleOpt, "TitleOption");

    if(spcOption == 1)
    {
        ASSIGN(KEYWORD_STR, "_SPC");
    }

    if(Elem_Option == 1)
    {
        ASSIGN(KEYWORD_STR, "_INERTIA");
    }

    if(LSD_TitleOpt == 1)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    }

    DATA(dependentnodeset, "NSID");

    DATA(LSD_CID, "CID");

    DATA(LSD_NODE1, "PNODE");

    RADIO(LSD_PRBF,"IPRT")
    {
        ADD(1, "1: write data into rbdout");
        ADD(2, "2: do not write data into rbdout");
    }

    RADIO(DRFLAG, "DRFLAG")
    {
        ADD(-7, "-7: Release x, y, and z displacement in global system");
        ADD(-6, "-6: Release z and x displacement in global system");
        ADD(-5, "-5: Release y and z displacement in global system");
        ADD(-4, "-4: Release x and y displacement in global system");
        ADD(-3, "-3: Release z displacement in global system");
        ADD(-2, "-2: Release y displacement in global system");
        ADD(-1, "-1: Release x displacement in global system");
        ADD(0, "0: Off for rigid body behavior");
        ADD(1, "1: Release x displacement in rigid body local system");
        ADD(2, "2: Release y displacement in rigid body local system");
        ADD(3, "3: Release z displacement in rigid body local system");
        ADD(4, "4: Release x and y displacement in rigid body local system");
        ADD(5, "5: Release y and z displacement in rigid body local system");
        ADD(6, "6: Release z and x displacement in rigid body local system");
        ADD(7, "7: Release x, y, and z displacement in rigid body local");
    }

    RADIO(RRFLAG, "RRFLAG")
    {
        ADD(-7, "-7: Release x, y, and z rotations in global system");
        ADD(-6, "-6: Release z and x rotations in global system");
        ADD(-5, "-5: Release y and z rotations in global system");
        ADD(-4, "-4: Release x and y rotations in global system");
        ADD(-3, "-3: Release z rotation in global system");
        ADD(-2, "-2: Release y rotation in global system");
        ADD(-1, "-1: Release x rotation in global system");
        ADD(0, "0: Off for rigid body behavior");
        ADD(1, "1: Release x rotation in rigid body local system");
        ADD(2, "2: Release y rotation in rigid body local system");
        ADD(3, "3: Release z rotation in rigid body local system");
        ADD(4, "4: Release x and y rotations in rigid body local system");
        ADD(5, "5: Release y and z rotations in rigid body local system");
        ADD(6, "6: Release z and x rotations in rigid body local system");
        ADD(7, "7: Release x, y, and z rotations in rigid body local system");   
    }

    if(spcOption == 1)
    {
        RADIO(LSDYNA_CMO, "CMO")
        {
            ADD(1.0, "1.0: Constraints applied in global directions");
            ADD(0.0, "0.0: No constraints");
            ADD(-1.0, "-1.0: constraints applied in local directions");
        }
    }
    if(LSDYNA_CMO == 1.0)
    {
        RADIO(LSD_CON1, "CON1")
        {
            ADD(0, "0: no constraints");
            ADD(1, "1: constrained x displacement");
            ADD(2, "2: constrained y displacement");
            ADD(3, "3: constrained z displacement");
            ADD(4, "4: constrained x and y displacements");
            ADD(5, "5: constrained y and z displacements");
            ADD(6, "6: constrained z and x displacements");
            ADD(7, "7: constrained x, y, and z displacements");
        }
        RADIO(LSD_CON2int, "CON2")
        {
            ADD(0, "0: no constraints");
            ADD(1, "1: constrained x rotation");
            ADD(2, "2: constrained y rotation");
            ADD(3, "3: constrained z rotation");
            ADD(4, "4: constrained x and y rotations");
            ADD(5, "5: constrained y and z rotations");
            ADD(6, "6: constrained z and x rotations");
            ADD(7, "7: constrained x, y, and z rotations");
        }
    }
    else if(LSDYNA_CMO == -1.0)
    {
        DATA(LSD_CON1_SID, "CON1");
        SCALAR(LSDYNA_CON2, "CON2")                                                 {DIMENSION="DIMENSIONLESS";}
    }

    if(Elem_Option == 1)
    {
        SCALAR(LSD_XC, "XC")                                                        {DIMENSION="l";}
        SCALAR(LSD_YC, "YC")                                                        {DIMENSION="l";}
        SCALAR(LSD_ZC, "ZC")                                                        {DIMENSION="l";}
        SCALAR(LSD_TM, "TM")                                                        {DIMENSION="m";}
        
        RADIO(LSD_IRCS, "IRCS")
        {
            ADD(0, "0: Global inertia tensor");
            ADD(1, "1: Local inertia tensor");
        }

        DATA(LSD_NODE2, "NODEID");
    
        SCALAR(LSD_IXX, "IXX")                                                        {DIMENSION="massmi";}
        SCALAR(LSD_IXY, "IXY")                                                        {DIMENSION="massmi";}
        SCALAR(LSD_IXZ, "IXZ")                                                        {DIMENSION="massmi";}
        SCALAR(LSD_IYY, "IYY")                                                        {DIMENSION="massmi";}
        SCALAR(LSD_IYZ, "IYZ")                                                        {DIMENSION="massmi";}
        SCALAR(LSD_IZZ, "IZZ")                                                        {DIMENSION="massmi";}

        SCALAR(LSD_VTX, "VTX")                                                        {DIMENSION="velocity";}
        SCALAR(LSD_VTY, "VTY")                                                        {DIMENSION="velocity";}
        SCALAR(LSD_VTZ, "VTZ")                                                        {DIMENSION="velocity";}
        SCALAR(LSD_VRX, "VRX")                                                        {DIMENSION="ang_velocity";}
        SCALAR(LSD_VRY, "VRY")                                                        {DIMENSION="ang_velocity";}
        SCALAR(LSD_VRZ, "VRZ")                                                        {DIMENSION="ang_velocity";}
    }
    if(Elem_Option == 1 && LSD_IRCS > 0)
    {
        SCALAR(LSD_XL, "XL")                                                            {DIMENSION="l";}
        SCALAR(LSD_YL, "YL")                                                            {DIMENSION="l";}
        SCALAR(LSD_ZL, "ZL")                                                            {DIMENSION="l";}
        SCALAR(LSD_XLIP, "XLIP")                                                        {DIMENSION="l";}
        SCALAR(LSD_YLIP, "YLIP")                                                        {DIMENSION="l";}
        SCALAR(LSD_ZLIP, "ZLIP")                                                        {DIMENSION="l";}
        
        DATA(LSD_CID2, "CID2");
    }
}

// File format
FORMAT(Keyword971_R6.1)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);
    
    if(IOFLAG == 0)
    {
        if(LSD_TitleOpt == 0 && Elem_Option == 0 && spcOption == 0)
        {
            HEADER("*CONSTRAINED_NODAL_RIGID_BODY");
        }
        else if(LSD_TitleOpt == 1 && Elem_Option == 0 && spcOption == 0)
        {
            HEADER("*CONSTRAINED_NODAL_RIGID_BODY_TITLE");
        }
        else if(LSD_TitleOpt == 0 && Elem_Option == 0 && spcOption == 1)
        {
            HEADER("*CONSTRAINED_NODAL_RIGID_BODY_SPC");
        }
        else if(LSD_TitleOpt == 1 && Elem_Option == 0 && spcOption == 1)
        {
            HEADER("*CONSTRAINED_NODAL_RIGID_BODY_SPC_TITLE");
        }
        else if(LSD_TitleOpt == 0 && Elem_Option == 1 && spcOption == 0)
        {
            HEADER("*CONSTRAINED_NODAL_RIGID_BODY_INERTIA");
        }
        else if(LSD_TitleOpt == 1 && Elem_Option == 1 && spcOption == 0)
        {
            HEADER("*CONSTRAINED_NODAL_RIGID_BODY_INERTIA_TITLE");
        }
        else if(LSD_TitleOpt == 0 && Elem_Option == 1 && spcOption == 1)
        {
            HEADER("*CONSTRAINED_NODAL_RIGID_BODY_SPC_INERTIA");
        }
        else if(LSD_TitleOpt == 1 && Elem_Option == 1 && spcOption == 1)
        {
            HEADER("*CONSTRAINED_NODAL_RIGID_BODY_SPC_INERTIA_TITLE");
        }
    }
    else //IMPORT
    {
        HEADER("*CONSTRAINED_NODAL_RIGID_BODY%20s", _opt);

        ASSIGN(LSD_TitleOpt,_FIND(_opt,"_TITLE"),IMPORT);
        ASSIGN(spcOption,_FIND(_opt,"_SPC"),IMPORT);
        ASSIGN(Elem_Option,_FIND(_opt,"_INERTIA"),IMPORT);
    }

    //Title Card
    if(IOFLAG == 0 && LSD_TitleOpt == 1)
    {
        COMMENT("$NAME                                                                           ");
        CARD("%-80s",TITLE);
    }

    //Card 1
    COMMENT("$      PID       CID      NSID     PNODE      IPRT    DRFLAG    RRFLAG");
    CARD("%10d%10d%10d%10d%10d%10d%10d",_ID_,LSD_CID,dependentnodeset,LSD_NODE1,LSD_PRBF,DRFLAG,RRFLAG);

    //SPC Card  
    if(spcOption == 1)
    {
        
        if(IOFLAG == 1)
        {
            CARD_PREREAD("%10lg", LSDYNA_CMO);
        }
        if(LSDYNA_CMO == 1.0)
        {
            COMMENT("$      CMO      CON1      CON2");
            CARD("%10lg%10d%10d",LSDYNA_CMO,LSD_CON1,LSD_CON2int);
        }
        else if(LSDYNA_CMO == -1.0)
        {
            COMMENT("$      CMO      CON1      CON2");
            CARD("%10lg%10d%10s",LSDYNA_CMO,LSD_CON1_SID,LSDYNA_CON2);
        }
        else
        {
            COMMENT("$      CMO");
            CARD("%10lg%10s%10s",LSDYNA_CMO,_BLANK_,_BLANK_);
        }
    }
    
    //INERTIA Cards
    if(Elem_Option == 1)
    {
        //Inertia Card 1
        COMMENT("$       XC        YC        ZC        TM      IRCS    NODEID");
        CARD("%10lg%10lg%10lg%10lg%10d%10d",LSD_XC,LSD_YC,LSD_ZC,LSD_TM,LSD_IRCS,LSD_NODE2);
        //Inertia Card 2
        COMMENT("$      IXX       IXY       IXZ       IYY       IYZ       IZZ");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_IXX,LSD_IXY,LSD_IXZ,LSD_IYY,LSD_IYZ,LSD_IZZ);
        //Inertia Card 3
        COMMENT("$      VTX       VTY       VTZ       VRX       VRY       VRZ");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_VTX,LSD_VTY,LSD_VTZ,LSD_VRX,LSD_VRY,LSD_VRZ);

        if(LSD_IRCS == 1)
        {
            //Local Inertia Tensor Card
            COMMENT("$       XL        YL        ZL      XLIP      YLIP      ZLIP       CID");
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d",LSD_XL,LSD_YL,LSD_ZL,LSD_XLIP,LSD_YLIP,LSD_ZLIP,LSD_CID2);
        }
    }
}
