//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//DEFINE_FRICTION
//
ATTRIBUTES(COMMON) {

    IO_FLAG             = VALUE(INT, "Import/Export flag");
    _HMCOMMENTSFLAG     = VALUE(INT, "Write HM Comments");
    _HWCOLOR            = VALUE(INT, "Entity Color");
    N                   = SIZE("Number of Connected Parts");
    N_LOCAL             = VALUE(INT, "");
    N_REAL              = VALUE(INT, "");
    NUM_FREE            = VALUE(INT, "");
    inside_if           = VALUE(BOOL,"");

    TITLE               = VALUE(STRING, "TITLE");
    ifric               = VALUE(INT,"Friction formulation flag ");
    ifiltr              = VALUE(INT,"Friction filtering flag ");
    xfreq               = VALUE(FLOAT,"Filtering coefficient");
    iform               = VALUE(INT, "Type of friction penalty formulation");
    c1                  = VALUE(FLOAT,"Friction law coefficient");
    c2                  = VALUE(FLOAT,"Friction law coefficient");
    c3                  = VALUE(FLOAT,"Friction law coefficient");
    c4                  = VALUE(FLOAT,"Friction law coefficient");
    c5                  = VALUE(FLOAT,"Friction law coefficient");
    c6                  = VALUE(FLOAT,"Friction law coefficient");
    fric                = VALUE(FLOAT,"Coulomb friction");
    vis_f               = VALUE(FLOAT,"Critical damping coefficient on interface friction");
    grpart_ID1          = ARRAY[N](SETS, "Part group identifier for the first set") { SUBTYPES = (/SETS/GRPART) ; }
    grpart_ID2          = ARRAY[N](SETS, "Part group identifier for the second  set") { SUBTYPES = (/SETS/GRPART) ; }
    part_ID1            = ARRAY[N](COMPONENT, "Part identifier");
    part_ID2            = ARRAY[N](COMPONENT, "Part identifier");
    c1_part             = ARRAY[N](FLOAT,"Friction law coefficient");
    c2_part             = ARRAY[N](FLOAT,"Friction law coefficient");
    c3_part             = ARRAY[N](FLOAT,"Friction law coefficient");
    c4_part             = ARRAY[N](FLOAT,"Friction law coefficient");
    c5_part             = ARRAY[N](FLOAT,"Friction law coefficient");
    c6_part             = ARRAY[N](FLOAT,"Friction law coefficient");
    fric_part           = ARRAY[N](FLOAT,"Coulomb friction");
    vis_f_part          = ARRAY[N](FLOAT,"Critical damping coefficient on interface friction");
    Idir                = ARRAY[N](INT, "Flag for orthotropic friction for couple of parts");
    c1_2                = ARRAY[N](FLOAT,"Friction law coefficient");
    c2_2                = ARRAY[N](FLOAT,"Friction law coefficient");
    c3_2                = ARRAY[N](FLOAT,"Friction law coefficient");
    c4_2                = ARRAY[N](FLOAT,"Friction law coefficient");
    c5_2                = ARRAY[N](FLOAT,"Friction law coefficient");
    c6_2                = ARRAY[N](FLOAT,"Friction law coefficient");
    fric_2              = ARRAY[N](FLOAT,"Coulomb friction");
    vis_f_2             = ARRAY[N](FLOAT,"Critical damping coefficient on interface friction");
}
SKEYWORDS_IDENTIFIER(COMMON)
{
    IO_FLAG             =-1;
    _HMCOMMENTSFLAG     =-1;
    _HWCOLOR            =-1;
    N_LOCAL             = -1;
    N_REAL              = -1;
    inside_if           = -1;
    NUM_FREE            = -1;
}
DEFAULTS(COMMON)
{
    IO_FLAG             = 0;
    _HMCOMMENTSFLAG     = 0;
    N_LOCAL             = 0;
    N_REAL              = 0;
    N                   = 0;
    inside_if           = FALSE;
}
GUI(COMMON) {
  //
 optional:
    RADIO(ifric,"Friction formulation") {
      ADD(0,"Static Coulomb friction law");
      ADD(1,"Generalized viscous friction law"); 
      ADD(2,"(Modified) Darmstad friction law"); 
      ADD(3,"Renard friction law"); 
 //     ADD(5,"Exponential decay model"); 
    }
    RADIO(ifiltr,"Friction filtering") {
      ADD(0,"No filtering") ;
      ADD(1,"Simple numerical filter"); 
      ADD(2,"Standard -3dB filter with filtering period"); 
      ADD(3,"Standard -3dB filter with cutting frequency"); 
    }

  if (ifiltr>0) {
    SCALAR(xfreq)               { DIMENSION="f"; }
  }
  RADIO(iform,"Friction penalty formulation") {
    ADD(0,"Default, set to 1") ;
    ADD(1,"Viscous (total) formulation (default)"); 
    ADD(2,"Stiffness (incremental) formulation"); 
  }
  if(ifric>0) {
    SCALAR(c1) {
      if (ifric==1)      { TITLE = "Friction C1 (Viscous law)"  ; DIMENSION="inverse_of_pressure"; }
      else if (ifric==2) { TITLE = "Friction C1 (Darmstad law)" ; DIMENSION="inverse_of_square_of_pressure"; }
      else if (ifric==3) { TITLE = "Friction C1 (Renard law)"   ; DIMENSION = "DIMENSIONLESS"; }
      else if (ifric==4) { TITLE = "Friction C1 (Exponential decay model)" ; DIMENSION = "DIMENSIONLESS"; }
    }  
    SCALAR(c2) {
      if (ifric==1)      { TITLE = "Friction C2 (Viscous law)"  ; DIMENSION="inverse_of_speed"; }
      else if (ifric==2) { TITLE = "Friction C2 (Darmstad law)" ; DIMENSION="inverse_of_speed"; }
      else if (ifric==3) { TITLE = "Friction C2 (Renard law)"   ; DIMENSION = "DIMENSIONLESS"; }
      else if (ifric==4) { TITLE = "Friction C2 (Exponential decay model)" ; DIMENSION="inverse_of_speed"; }
    }  
    SCALAR(c3) {
      if (ifric==1)      { TITLE = "Friction C3 (Viscous law)"  ; DIMENSION = "inverse_surfacic_power"; }
      else if (ifric==2) { TITLE = "Friction C3 (Darmstad law)" ; DIMENSION="inverse_of_pressure"; }
      else if (ifric==3) { TITLE = "Friction C3 (Renard law)"   ; DIMENSION = "DIMENSIONLESS"; }
    }  
    SCALAR(c4) {
      if (ifric==1)      { TITLE = "Friction C4 (Viscous law)"  ; DIMENSION="inverse_of_square_of_pressure"; }
      else if (ifric==2) { TITLE = "Friction C4 (Darmstad law)" ; DIMENSION="inverse_of_speed"; }
      else if (ifric==3) { TITLE = "Friction C4 (Renard law)"   ; DIMENSION = "DIMENSIONLESS"; }
    }  
    SCALAR(c5) {
      if (ifric==1)      { TITLE = "Friction C5 (Viscous law)"  ; DIMENSION = "inverse_of_square_of_speed"; }
      else if (ifric==2) { TITLE = "Friction C5 (Darmstad law)" ; DIMENSION = "DIMENSIONLESS"; }
      else if (ifric==3) { TITLE = "Friction C5 (Renard law)"   ; DIMENSION="velocity"; }
    }
  }
  if(ifric>1) {
    SCALAR(c6) {
     if (ifric==2)      { TITLE = "Friction C6 (Darmstad law)" ; DIMENSION="inverse_of_speed"; }
     else if (ifric==3) { TITLE = "Friction C6 (Renard law)"   ; DIMENSION="velocity"; }
    } 
  }
  
  SCALAR(fric)   { DIMENSION="DIMENSIONLESS"; }

  SCALAR(vis_f)  { DIMENSION="DIMENSIONLESS"; } 
  
  SIZE(N);
  ARRAY(N,"Pairs") {  

optional: 

 /* graphical SUPPORT("Group Part 1") {
    OBJECTS=(part_ID1);
    ADD(grpart_ID1);
  }
  graphical SUPPORT("Group Part 2") {
    OBJECTS=(part_ID2);
    ADD(grpart_ID2);
  }*/ 
  DATA(grpart_ID1) ; 
  DATA(grpart_ID2) ;
  DATA(part_ID1) ;
  DATA(part_ID2) ;

  RADIO(Idir) 
  {
    ADD(0,"0:Isotropic Friction") ;
    ADD(1,"1:Orthotropic Friction");
  }

optional: 
    SCALAR(c1_part) {
      if (ifric==1)      { TITLE = "Friction C1 (Viscous law)"  ; DIMENSION="inverse_of_pressure"; }
      else if (ifric==2) { TITLE = "Friction C1 (Darmstad law)" ; DIMENSION="inverse_of_square_of_pressure"; }
      else if (ifric==3) { TITLE = "Friction C1 (Renard law)"   ; DIMENSION = "DIMENSIONLESS"; }
      else if (ifric==4) { TITLE = "Friction C1 (Exponential decay model)" ; DIMENSION = "DIMENSIONLESS"; }
    }  
    SCALAR(c2_part) {
      if (ifric==1)      { TITLE = "Friction C2 (Viscous law)"  ; DIMENSION="inverse_of_speed"; }
      else if (ifric==2) { TITLE = "Friction C2 (Darmstad law)" ; DIMENSION="inverse_of_speed"; }
      else if (ifric==3) { TITLE = "Friction C2 (Renard law)"   ; DIMENSION = "DIMENSIONLESS"; }
      else if (ifric==4) { TITLE = "Friction C2 (Exponential decay model)" ; DIMENSION="inverse_of_speed"; }

    }  
    SCALAR(c3_part) {
      if (ifric==1)      { TITLE = "Friction C3 (Viscous law)"  ; DIMENSION = "inverse_surfacic_power"; }
      else if (ifric==2) { TITLE = "Friction C3 (Darmstad law)" ; DIMENSION="inverse_of_pressure"; }
      else if (ifric==3) { TITLE = "Friction C3 (Renard law)"   ; DIMENSION = "DIMENSIONLESS"; }
    }  
    SCALAR(c4_part) {
      if (ifric==1)      { TITLE = "Friction C4 (Viscous law)"  ; DIMENSION="inverse_of_square_of_pressure"; }
      else if (ifric==2) { TITLE = "Friction C4 (Darmstad law)" ; DIMENSION="inverse_of_speed"; }
      else if (ifric==3) { TITLE = "Friction C4 (Renard law)"   ; DIMENSION = "DIMENSIONLESS"; }
    }  
    SCALAR(c5_part) {
      if (ifric==1)      { TITLE = "Friction C5 (Viscous law)"  ; DIMENSION = "inverse_of_square_of_speed"; }
      else if (ifric==2) { TITLE = "Friction C5 (Darmstad law)" ; DIMENSION = "DIMENSIONLESS"; }
      else if (ifric==3) { TITLE = "Friction C5 (Renard law)"   ; DIMENSION="velocity"; }
    }
    SCALAR(c6_part) {
     if (ifric==2)      { TITLE = "Friction C6 (Darmstad law)" ; DIMENSION="inverse_of_speed"; }
     else if (ifric==3) { TITLE = "Friction C6 (Renard law)"   ; DIMENSION="velocity"; }
    } 

    SCALAR(fric_part)   { DIMENSION="DIMENSIONLESS"; }

    SCALAR(vis_f_part)  { DIMENSION="DIMENSIONLESS"; } 

    SCALAR(c1_2) {
      if (ifric==1)      { TITLE = "Friction C1 (Viscous law)"  ; DIMENSION="inverse_of_pressure"; }
      else if (ifric==2) { TITLE = "Friction C1 (Darmstad law)" ; DIMENSION="inverse_of_square_of_pressure"; }
      else if (ifric==3) { TITLE = "Friction C1 (Renard law)"   ; DIMENSION = "DIMENSIONLESS"; }
      else if (ifric==4) { TITLE = "Friction C1 (Exponential decay model)" ; DIMENSION = "DIMENSIONLESS"; }
    }  
    SCALAR(c2_2) {
      if (ifric==1)      { TITLE = "Friction C2 (Viscous law)"  ; DIMENSION="inverse_of_speed"; }
      else if (ifric==2) { TITLE = "Friction C2 (Darmstad law)" ; DIMENSION="inverse_of_speed"; }
      else if (ifric==3) { TITLE = "Friction C2 (Renard law)"   ; DIMENSION = "DIMENSIONLESS"; }
      else if (ifric==4) { TITLE = "Friction C2 (Exponential decay model)" ; DIMENSION="inverse_of_speed"; }

    }  
    SCALAR(c3_2) {
      if (ifric==1)      { TITLE = "Friction C3 (Viscous law)"  ; DIMENSION = "inverse_surfacic_power"; }
      else if (ifric==2) { TITLE = "Friction C3 (Darmstad law)" ; DIMENSION="inverse_of_pressure"; }
      else if (ifric==3) { TITLE = "Friction C3 (Renard law)"   ; DIMENSION = "DIMENSIONLESS"; }
    }  
    SCALAR(c4_2) {
      if (ifric==1)      { TITLE = "Friction C4 (Viscous law)"  ; DIMENSION="inverse_of_square_of_pressure"; }
      else if (ifric==2) { TITLE = "Friction C4 (Darmstad law)" ; DIMENSION="inverse_of_speed"; }
      else if (ifric==3) { TITLE = "Friction C4 (Renard law)"   ; DIMENSION = "DIMENSIONLESS"; }
    }  
    SCALAR(c5_2) {
      if (ifric==1)      { TITLE = "Friction C5 (Viscous law)"  ; DIMENSION = "inverse_of_square_of_speed"; }
      else if (ifric==2) { TITLE = "Friction C5 (Darmstad law)" ; DIMENSION = "DIMENSIONLESS"; }
      else if (ifric==3) { TITLE = "Friction C5 (Renard law)"   ; DIMENSION="velocity"; }
    }
    SCALAR(c6_2) {
     if (ifric==2)      { TITLE = "Friction C6 (Darmstad law)" ; DIMENSION="inverse_of_speed"; }
     else if (ifric==3) { TITLE = "Friction C6 (Renard law)"   ; DIMENSION="velocity"; }
    } 

    SCALAR(fric_2)   { DIMENSION="DIMENSIONLESS"; }

    SCALAR(vis_f_2)  { DIMENSION="DIMENSIONLESS"; } 

   /* if( Idir == 1 )
    {
        SCALAR(c1_2);
        SCALAR(c2_2);
        SCALAR(c3_2);
        SCALAR(c4_2);
        SCALAR(c5_2);
        SCALAR(c6_2);
        SCALAR(fric_2);
        SCALAR(vis_f_2);
    }*/


  }
}

//File format
FORMAT(radioss2020) { 
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    HEADER("/FRICTION/%d", _ID_);
    CARD("%-100s", TITLE);
    COMMENT("#   I_fric   I_filtr              X_freq    I_form");
    CARD("%10d%10d%20lg%10d", ifric,ifiltr,xfreq,iform);
    COMMENT("#                 C1                  C2                  C3                  C4                  C5");
    CARD("%20lg%20lg%20lg%20lg%20lg", c1, c2, c3, c4, c5);
    COMMENT("#                 C6                FRIC               VIS_f");
    CARD("%20lg%20lg%20lg", c6, fric, vis_f);
    if(IO_FLAG == 0)
    {
        CARD_LIST(N)
        {
            COMMENT("#grpartID1 grpartID2   partID1   partID2                IDIR");
            CARD("%10d%10d%10d%10d          %10d", grpart_ID1, grpart_ID2, part_ID1, part_ID2,Idir);
            COMMENT("#            C1_DIR1             C2_DIR1             C3_DIR1             C4_DIR1             C5_DIR1");
            CARD("%20lg%20lg%20lg%20lg%20lg", c1_part, c2_part, c3_part, c4_part, c5_part);
            COMMENT("#            C6_DIR1           FRIC_DIR1          VIS_F_DIR1");
            CARD("%20lg%20lg%20lg", c6_part, fric_part, vis_f_part);
            if(Idir == 1)
            {
                COMMENT("#            C1_DIR2             C2_DIR2             C3_DIR2             C4_DIR2             C5_DIR2");
                CARD("%20lg%20lg%20lg%20lg%20lg", c1_2, c2_2, c3_2, c4_2, c5_2);
                COMMENT("#            C6_DIR2           FRIC_DIR2          VIS_F_DIR2");
                CARD("%20lg%20lg%20lg", c6_2, fric_2, vis_f_2);
            }
        }
    }
    else
    {
        ASSIGN(NUM_FREE,_GET_NB_FREE_CARDS(),IMPORT);
        ASSIGN(N, NUM_FREE, IMPORT);
        ASSIGN(N_LOCAL, 0, IMPORT);
        ASSIGN(N_REAL, 0, IMPORT);
        ASSIGN(inside_if, 0, IMPORT);
        CARD_LIST(N)
        {
            if(N <= N_LOCAL)
            {
                ASSIGN(inside_if,1, IMPORT);
            }
            if(inside_if == FALSE)
            {
                COMMENT("#grpartID1 grpartID2   partID1   partID2                IDIR");
                CARD("%10d%10d%10d%10d          %10d", grpart_ID1, grpart_ID2, part_ID1, part_ID2,Idir);
                COMMENT("#            C1_DIR1             C2_DIR1             C3_DIR1             C4_DIR1             C5_DIR1");
                CARD("%20lg%20lg%20lg%20lg%20lg", c1_part, c2_part, c3_part, c4_part, c5_part);
                COMMENT("#            C6_DIR1           FRIC_DIR1          VIS_F_DIR1");
                CARD("%20lg%20lg%20lg", c6_part, fric_part, vis_f_part);
                if(Idir == 1)
                {
                    COMMENT("#            C1_DIR2             C2_DIR2             C3_DIR2             C4_DIR2             C5_DIR2");
                    CARD("%20lg%20lg%20lg%20lg%20lg", c1_2, c2_2, c3_2, c4_2, c5_2);
                    COMMENT("#            C6_DIR2           FRIC_DIR2          VIS_F_DIR2");
                    CARD("%20lg%20lg%20lg", c6_2, fric_2, vis_f_2);
                    ASSIGN(N_LOCAL, N_LOCAL + 5, IMPORT);
                }
                else
                {
                     ASSIGN(N_LOCAL, N_LOCAL + 3, IMPORT);
                     // Idir is already 0 but it is again set to 0 to cover the use case of Radioss 2020 decks created from ML 2020 which does not have Idir.
                     ASSIGN(Idir, 0, IMPORT);
                     ASSIGN(c1_2, 0.0, IMPORT);
                     ASSIGN(c2_2, 0.0, IMPORT);
                     ASSIGN(c3_2, 0.0, IMPORT);
                     ASSIGN(c4_2, 0.0, IMPORT);
                     ASSIGN(c5_2, 0.0, IMPORT);
                     ASSIGN(c6_2, 0.0, IMPORT);
                     ASSIGN(fric_2, 0.0, IMPORT);
                     ASSIGN(vis_f_2, 1.0, IMPORT);
                }
                ASSIGN(N_REAL, N_REAL + 1, IMPORT);
            }
        }
        ASSIGN(N, N_REAL, IMPORT);
    }
}

//File format
FORMAT(radioss2018) { 
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    HEADER("/FRICTION/%d", _ID_);
    CARD("%-100s", TITLE);
    COMMENT("#   I_fric   I_filtr              X_freq    I_form");
    CARD("%10d%10d%20lg%10d", ifric,ifiltr,xfreq,iform);
    COMMENT("#                 C1                  C2                  C3                  C4                  C5");
    CARD("%20lg%20lg%20lg%20lg%20lg", c1, c2, c3, c4, c5);
    COMMENT("#                 C6                FRIC               VIS_f");
    CARD("%20lg%20lg%20lg", c6, fric, vis_f);
    FREE_CARD_LIST(N)
    {
        COMMENT("#grpartID1 grpartID2   partID1   partID2");
        CARD("%10d%10d%10d%10d", grpart_ID1, grpart_ID2, part_ID1, part_ID2);
        COMMENT("#                 C1                  C2                  C3                  C4                  C5");
        CARD("%20lg%20lg%20lg%20lg%20lg", c1_part, c2_part, c3_part, c4_part, c5_part);
        COMMENT("#                 C6                FRIC               VIS_f");
        CARD("%20lg%20lg%20lg", c6_part, fric_part, vis_f_part);

        // Making the size of dependent array fields same as other arrays on import
        if(IO_FLAG == 1)
        {
            ASSIGN(Idir, 0, IMPORT);
            ASSIGN(c1_2, 0.0, IMPORT);
            ASSIGN(c2_2, 0.0, IMPORT);
            ASSIGN(c3_2, 0.0, IMPORT);
            ASSIGN(c4_2, 0.0, IMPORT);
            ASSIGN(c5_2, 0.0, IMPORT);
            ASSIGN(c6_2, 0.0, IMPORT);
            ASSIGN(fric_2, 0.0, IMPORT);
            ASSIGN(vis_f_2, 1.0, IMPORT);
        }
    }
} 
