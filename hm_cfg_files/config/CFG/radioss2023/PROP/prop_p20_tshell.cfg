//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Property tshell type20
//

ATTRIBUTES(COMMON)
{
    ISOLID                                  = VALUE(INT,  " Solid Elements Formulation Flag");
    Ismstr                                  = VALUE(INT,  " Strain Formulation Flag");
    Icpre                                   = VALUE(INT,  " Constant Pressure Formulation Flag");
    Icstr                                   = VALUE(INT,  " Constant Stress Formulation Flag");
    Iint                                    = VALUE(INT,  " Thickness Integration Formulation");
    Inpts_R                                 = VALUE(INT,  " Number of Integration Points in R Direction");
    Inpts_S                                 = VALUE(INT,  " Number of Integration Points in S Direction");
    Inpts_T                                 = VALUE(INT,  " Number of Integration Points in T Direction");
    dn                                      = VALUE(FLOAT,  " Numerical Damping for Stabilization");
    qa                                      = VALUE(FLOAT,  " Quadratic Bulk Viscosity");
    qb                                      = VALUE(FLOAT,  " Linear Bulk Viscosity");
    h                                       = VALUE(FLOAT,  " Hourglass Viscosity Coefficient");
    deltaT_min                              = VALUE(FLOAT,  " Minimum Time Step");
    Istrain                                 = VALUE(INT,  " Compute Strain Post-Processing Flag");
    vdef_min                                = VALUE(FLOAT,  " Minimum volumetric strain");
    vdef_max                                = VALUE(FLOAT,  " Maximum volumetric strain");
    ASP_max                                 = VALUE(FLOAT,  " Maximum aspect ratio");
    COL_min                                 = VALUE(FLOAT,  " Minimum collapse ratio");

    //Attributes for HM usage 
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Prop_Name_OR_Type                       = VALUE(INT, "");
    TITLE                                   = VALUE(STRING, "");
    IO_FLAG                                 = VALUE(INT, "");
    TYPE_NO                                 = VALUE(STRING, "");
    NBP                                     = VALUE(INT,   "Number of integration points");
    Inpts_R_status                          = VALUE(BOOL, "");
    Inpts_S_status                          = VALUE(BOOL, "");
    Inpts_T_status                          = VALUE(BOOL, "");
    Inpts_NBP_status                        = VALUE(BOOL, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    NUM_COMMENTS                            = 5110;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;
    ISOLID                                  = 8003;
    Icpre                                   = 5396;
    Icstr                                   = 5397;
    Iint                                    = 3985;
    Inpts_R                                 = 4151;
    Inpts_S                                 = 4152;
    Inpts_T                                 = 4153;
    Ismstr                                  = 5152;
    Istrain                                 = 8009;
    deltaT_min                              = 4154;
    dn                                      = 5363;
    h                                       = 8031;
    qa                                      = 8029;
    qb                                      = 8030;
    Prop_Name_OR_Type                       = 4537;
    TITLE                                   =   -1;
    IO_FLAG                                 =   -1;
    TYPE_NO                                 =   -1;
    NBP                                     =   -1;
    Inpts_R_status                          =   -1;
    Inpts_S_status                          =   -1;
    Inpts_T_status                          =   -1;
    Inpts_NBP_status                        =   -1;
}

CHECK(COMMON)
{
    h                                       >= 0.00;
    h                                       <= 0.15;
}

DEFAULTS(COMMON)
{
    ISOLID                                  =     15;
    Iint                                    =     1;
    Inpts_R                                 =     2;
    Inpts_S                                 =     2;
    Inpts_T                                 =     2;
    Istrain                                 =     2;
    deltaT_min                              = 1.0e6;
    dn                                      =   0.1;
    h                                       =  0.10;
    qa                                      =  1.10;
    qb                                      =  0.05;
    Prop_Name_OR_Type                       = 0;
    vdef_min                                = 0.00;
    vdef_max                                = 0.00;
    ASP_max                                 = 0.00;
    COL_min                                 = 0.00;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
       ENUM_VALUE_FLAG=TRUE;
       ADD(1, "1:Hide in Menu/Export");
       ADD(2, "2:Show in Menu/Export");
       ADD(3, "3:Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Prop_Name_OR_Type == 2)
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TYPE20/");

    }
    else
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TSHELL/");
    }
    RADIO(ISOLID)
    {
        ADD(14,"14:HA8 Locking-Free 8-node Thick Shell Element, Co-Rotational, Full Integration, Variable Number of Gauss Points in All Directions.");
        ADD(15,"15:HSEPH/PA6 Thick Shell Elements. Co-Rotational, Under Integrated with Physical Stabilization.");
        ADD(16,"16:Quadratic 16-node Thick Shell, Full Integration, Variable Number of Gauss Points in All Directions.");
    }
    RADIO(Ismstr)
    {
        ADD(0,"0:Default, Set to Value Defined in /DEF_SOLID.");
        ADD(1,"1:Small Strain from Time=0.");
        ADD(2,"2:Full Geometric Nonlinearities with Possible Small Strain Formulation in RADIOSS Engine (/DT/BRICK/CST).");
        ADD(3,"3:Simplified Small Strain Formulation from Time=0 (non-objective formulation).");
        ADD(4,"4:Full Geometric Nonlinearities (/DT/BRICK/CST has no effect).");
    }
    if(ISOLID==14)
    {
        RADIO(Icstr)
        {
            ADD(0,"0:No Reduced Stress Integration.");
            ADD(001,"001:Reduced Stress Integration in T Direction.");
            ADD(010,"010:Reduced Stress Integration in S Direction.");
            ADD(100,"100:Reduced Stress Integration in R Direction.");
        }
    }
    if(ISOLID==15)
    {
        RADIO(Inpts_S)
        {
            ADD(1,"1");
            ADD(2,"2");
            ADD(3,"3");
            ADD(4,"4");
            ADD(5,"5");
            ADD(6,"6");
            ADD(7,"7");
            ADD(8,"8");
            ADD(9,"9");
        }
    }
    else if(ISOLID==14)
    {
        RADIO(Inpts_R)
        {
            ADD(2,"2");
            ADD(3,"3");
            ADD(4,"4");
            ADD(5,"5");
            ADD(6,"6");
            ADD(7,"7");
            ADD(8,"8");
            ADD(9,"9");
        }
        RADIO(Inpts_S)
        {
            ADD(2,"2");
            ADD(3,"3");
            ADD(4,"4");
            ADD(5,"5");
            ADD(6,"6");
            ADD(7,"7");
            ADD(8,"8");
            ADD(9,"9");
        }
        RADIO(Inpts_T)
        {
            ADD(2,"2");
            ADD(3,"3");
            ADD(4,"4");
            ADD(5,"5");
            ADD(6,"6");
            ADD(7,"7");
            ADD(8,"8");
            ADD(9,"9");
        }
    }
    else if(ISOLID==16)
    {
        RADIO(Inpts_R)
        {
            ADD(2,"2");
            ADD(3,"3");
        }
        RADIO(Inpts_S)
        {
            ADD(2,"2");
            ADD(3,"3");
            ADD(4,"4");
            ADD(5,"5");
            ADD(6,"6");
            ADD(7,"7");
            ADD(8,"8");
        }
        RADIO(Inpts_T)
        {
            ADD(2,"2");
            ADD(3,"3");
        }
        RADIO(Iint)
        {
            ADD(0,"0:Default, Set to 1.");
            ADD(1,"1:Gauss Integration Scheme.");
            ADD(2,"2:Lobatto Integration Scheme.");
        }
    }
    ASSIGN(NBP, [$Inpts_R*100+$Inpts_S*10+$Inpts_T]);
    if(ISOLID==15)
    {
        SCALAR(dn);
    }
    SCALAR(qa);
    SCALAR(qb);
    SCALAR(h);
    SCALAR(deltaT_min)  { DIMENSION="t";          }    
    RADIO(Istrain)
    {
        ADD(0,"0:Default, Set to Value Defined in /DEF_SOLID.");
        ADD(1,"1:Yes.");
        ADD(2,"2:No.");
    }
}

//File format for radioss 2023
FORMAT(radioss2023)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE20/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/TSHELL/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    ASSIGN(Inpts_R_status,_GET_DISPLAY_STATUS(Inpts_R),EXPORT);
    ASSIGN(Inpts_S_status,_GET_DISPLAY_STATUS(Inpts_S),EXPORT);
    ASSIGN(Inpts_T_status,_GET_DISPLAY_STATUS(Inpts_T),EXPORT);
    if(IO_FLAG == 0)
    {
        if(Inpts_T_status == 1 && Inpts_S_status == 1 && Inpts_R_status == 1) 
        {
            ASSIGN(NBP,Inpts_R*100,EXPORT);
            ASSIGN(NBP,NBP +(Inpts_S*10),EXPORT);
            ASSIGN(NBP,NBP + Inpts_T,EXPORT);
        }
        else
        {
            ASSIGN(NBP,Inpts_S,EXPORT);
        }
    }
    COMMENT("#   ISOLID    Ismstr                         Icstr     Inpts      Iint                            Dn");
    CARD("%10d%10d                    %10d%10d%10d          %20lg",ISOLID,Ismstr,Icstr,NBP,Iint,dn);
    //
    ASSIGN(Inpts_NBP_status,_GET_DISPLAY_STATUS(NBP),IMPORT);
    if(IO_FLAG == 1  && Inpts_NBP_status != 0) 
    {
        if(NBP > 200)
        {
            ASSIGN(Inpts_R,NBP / 100, IMPORT);
            ASSIGN(Inpts_T,NBP - (Inpts_R*100), IMPORT);
            ASSIGN(Inpts_S,Inpts_T / 10, IMPORT);
            ASSIGN(Inpts_T,Inpts_T - (Inpts_S*10), IMPORT);
        }
        else
        {
            ASSIGN(Inpts_S,NBP, IMPORT);
        }
    }
    COMMENT("#                 qa                  qb                   h");
    CARD("%20lg%20lg%20lg",qa,qb,h);
    //
    COMMENT("#         deltaT_min            vdef_min            vdef_max             ASP_max             COL_min");
    CARD("%20lg%20lg%20lg%20lg%20lg",deltaT_min,vdef_min,vdef_max,ASP_max,COL_min);
}
//File format for radioss 2018
FORMAT(radioss2018)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE20/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/TSHELL/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    ASSIGN(Inpts_R_status,_GET_DISPLAY_STATUS(Inpts_R),EXPORT);
    ASSIGN(Inpts_S_status,_GET_DISPLAY_STATUS(Inpts_S),EXPORT);
    ASSIGN(Inpts_T_status,_GET_DISPLAY_STATUS(Inpts_T),EXPORT);
    if(IO_FLAG == 0)
    {
        if(Inpts_T_status == 1 && Inpts_S_status == 1 && Inpts_R_status == 1) 
        {
            ASSIGN(NBP,Inpts_R*100,EXPORT);
            ASSIGN(NBP,NBP +(Inpts_S*10),EXPORT);
            ASSIGN(NBP,NBP + Inpts_T,EXPORT);
        }
        else
        {
            ASSIGN(NBP,Inpts_S,EXPORT);
        }
    }
    COMMENT("#   ISOLID    Ismstr                         Icstr     Inpts      Iint                            Dn");
    CARD("%10d%10d                    %10d%10d%10d          %20lg",ISOLID,Ismstr,Icstr,NBP,Iint,dn);
    //
    ASSIGN(Inpts_NBP_status,_GET_DISPLAY_STATUS(NBP),IMPORT);
    if(IO_FLAG == 1  && Inpts_NBP_status != 0) 
    {
        if(NBP > 200)
        {
            ASSIGN(Inpts_R,NBP / 100, IMPORT);
            ASSIGN(Inpts_T,NBP - (Inpts_R*100), IMPORT);
            ASSIGN(Inpts_S,Inpts_T / 10, IMPORT);
            ASSIGN(Inpts_T,Inpts_T - (Inpts_S*10), IMPORT);
        }
        else
        {
            ASSIGN(Inpts_S,NBP, IMPORT);
        }
    }
    COMMENT("#                 qa                  qb                   h");
    CARD("%20lg%20lg%20lg",qa,qb,h);
    //
    COMMENT("#         DeltaT_min   Istrain");
    CARD("%20lg%10d",deltaT_min,Istrain);
}

//File format for radioss 140
FORMAT(radioss140)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE20/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/TSHELL/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    ASSIGN(Inpts_R_status,_GET_DISPLAY_STATUS(Inpts_R),EXPORT);
    ASSIGN(Inpts_S_status,_GET_DISPLAY_STATUS(Inpts_S),EXPORT);
    ASSIGN(Inpts_T_status,_GET_DISPLAY_STATUS(Inpts_T),EXPORT);
    if(IO_FLAG == 0)
    {
        if(Inpts_T_status == 1 && Inpts_S_status == 1 && Inpts_R_status == 1) 
        {
            ASSIGN(NBP,Inpts_R*100,EXPORT);
            ASSIGN(NBP,NBP +(Inpts_S*10),EXPORT);
            ASSIGN(NBP,NBP + Inpts_T,EXPORT);
        }
        else
        {
            ASSIGN(NBP,Inpts_S,EXPORT);
        }
    }
    COMMENT("#   ISOLID    Ismstr               Icpre     Icstr     Inpts      Iint                            Dn");
    CARD("%10d%10d          %10d%10d%10d%10d          %20lg",ISOLID,Ismstr,Icpre,Icstr,NBP,Iint,dn);
    //
    ASSIGN(Inpts_NBP_status,_GET_DISPLAY_STATUS(NBP),IMPORT);
    if(IO_FLAG == 1  && Inpts_NBP_status != 0) 
    {
        if(NBP > 200)
        {
            ASSIGN(Inpts_R,NBP / 100, IMPORT);
            ASSIGN(Inpts_T,NBP - (Inpts_R*100), IMPORT);
            ASSIGN(Inpts_S,Inpts_T / 10, IMPORT);
            ASSIGN(Inpts_T,Inpts_T - (Inpts_S*10), IMPORT);
        }
        else
        {
            ASSIGN(Inpts_S,NBP, IMPORT);
        }
    }
    COMMENT("#                 qa                  qb                   h");
    CARD("%20lg%20lg%20lg",qa,qb,h);
    //
    COMMENT("#         DeltaT_min   Istrain");
    CARD("%20lg%10d",deltaT_min,Istrain);
}

//File Format for Radioss 100
FORMAT(radioss100)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE20/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/TSHELL/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    ASSIGN(Inpts_R_status,_GET_DISPLAY_STATUS(Inpts_R),EXPORT);
    ASSIGN(Inpts_S_status,_GET_DISPLAY_STATUS(Inpts_S),EXPORT);
    ASSIGN(Inpts_T_status,_GET_DISPLAY_STATUS(Inpts_T),EXPORT);
    if(IO_FLAG == 0)
    {
        if(Inpts_T_status == 1 && Inpts_S_status == 1 && Inpts_R_status == 1) 
        {
            ASSIGN(NBP,Inpts_R*100,EXPORT);
            ASSIGN(NBP,NBP +(Inpts_S*10),EXPORT);
            ASSIGN(NBP,NBP + Inpts_T,EXPORT);
        }
        else
        {
            ASSIGN(NBP,Inpts_S,EXPORT);
        }
    }
    COMMENT("#   ISOLID    Ismstr               Icpre     Icstr     Inpts      Iint                            Dn");
    CARD("%10d%10d          %10d%10d%10d%10d          %20lg",ISOLID,Ismstr,Icpre,Icstr,NBP,Iint,dn);
    //
    ASSIGN(Inpts_NBP_status,_GET_DISPLAY_STATUS(NBP),IMPORT);
    if(IO_FLAG == 1  && Inpts_NBP_status != 0) {
        if(NBP > 200)
        {
            ASSIGN(Inpts_R,NBP / 100, IMPORT);
            ASSIGN(Inpts_T,NBP - (Inpts_R*100), IMPORT);
            ASSIGN(Inpts_S,Inpts_T / 10, IMPORT);
            ASSIGN(Inpts_T,Inpts_T - (Inpts_S*10), IMPORT);
        }
        else
        {
            ASSIGN(Inpts_S,NBP, IMPORT);
        }
    }
    COMMENT("#                 qa                  qb                   h");
    CARD("%20lg%20lg%20lg",qa,qb,h);
    //
    COMMENT("#         DeltaT_min");
    CARD("%20lg",deltaT_min);
}


// File format for radioss 51
FORMAT(radioss51) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE20/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/TSHELL/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    ASSIGN(Inpts_R_status,_GET_DISPLAY_STATUS(Inpts_R),EXPORT);
    ASSIGN(Inpts_S_status,_GET_DISPLAY_STATUS(Inpts_S),EXPORT);
    ASSIGN(Inpts_T_status,_GET_DISPLAY_STATUS(Inpts_T),EXPORT);
    if(IO_FLAG == 0)
    {
        if(Inpts_T_status == 1 && Inpts_S_status == 1 && Inpts_R_status == 1) 
        {
            ASSIGN(NBP,Inpts_R*100,EXPORT);
            ASSIGN(NBP,NBP +(Inpts_S*10),EXPORT);
            ASSIGN(NBP,NBP + Inpts_T,EXPORT);
        }
        else
        {
            ASSIGN(NBP,Inpts_S,EXPORT);
        }
    }
    COMMENT("#   ISOLID    Ismstr                         Icstr     Inpts      Iint                            Dn");
    CARD("%10d%10d                    %10d%10d%10d          %20lg",ISOLID,Ismstr,Icstr,NBP,Iint,dn);
    //
    ASSIGN(Inpts_NBP_status,_GET_DISPLAY_STATUS(NBP),IMPORT);
    if(IO_FLAG == 1  && Inpts_NBP_status != 0) {
        if(NBP > 200)
        {
            ASSIGN(Inpts_R,NBP / 100, IMPORT);
            ASSIGN(Inpts_T,NBP - (Inpts_R*100), IMPORT);
            ASSIGN(Inpts_S,Inpts_T / 10, IMPORT);
            ASSIGN(Inpts_T,Inpts_T - (Inpts_S*10), IMPORT);
        }
        else
        {
            ASSIGN(Inpts_S,NBP, IMPORT);
        }
    }
    COMMENT("#                 qa                  qb                   h");
    CARD("%20lg%20lg%20lg",qa,qb,h);
    COMMENT("#         DeltaT_min");
    CARD("%20lg",deltaT_min);
}
