//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// /MONVOL/FVMBAG2
//

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES

    // Card 1
    entityiddisplayed                       = VALUE(SETS, "External surface identifier")  { SUBTYPES = (/SETS/SURF_IDPOOL); }
    entityiddisplayed_IN                    = VALUE(SETS, "Internal surface identifier")  { SUBTYPES = (/SETS/SURF_IDPOOL); }
    HEAT_T0                                 = VALUE(FLOAT, "Heat transfer coefficient");

    MAT1                                    = VALUE(MAT, "Initial gas material identifier");
    PEXT                                    = VALUE(FLOAT, "External pressure");
    T_Initial                               = VALUE(FLOAT, "Initial temperature");
    I_ttf                                   = VALUE(INT, "Time shift flag. Active only when injection sensor is specified. Determines time shift for venting and porosity options when injection starts at a Time to Fire specified in a sensor");

    IH3D_FLAG                               = VALUE(INT, "FVMBAG flag for H3D output");
    
    // Card 2: Number of injectors
    ABG_Njet                                = SIZE("Number of injectors");

    // Card 3: Define Njet injectors
    injector_IDs                            = ARRAY[ABG_Njet](PROPERTY, "Injector property identifier")  { SUBTYPES=(/PROP/INJECT1,/PROP/INJECT2); }
    ABG_Isensor                             = ARRAY[ABG_Njet](SENSOR, "Sensor identifier");
    S1_SETSURFID                            = ARRAY[ABG_Njet](SETS, "Injector surface identifier (must be different for each injector)")  { SUBTYPES = (/SETS/SURF_IDPOOL); }

    // Card 4: Number of vent holes and porous fabric surfaces
    ABG_Nvent                               = SIZE("Number of vent holes");
    ABG_Nporsurf                            = SIZE("Number of porous surfaces");

    // Card 5: Define Nvent vent holes (four lines per vent hole and optional line for Chemkin vent)
    SVENT_SETSURFID                         = ARRAY[ABG_Nvent](SETS, "Vent holes area surface identifier")  { SUBTYPES = (/SETS/SURF_IDPOOL); }
    Itvent                                  = ARRAY[ABG_Nvent](INT, "Venting formulation");
    ABG_Avent                               = ARRAY[ABG_Nvent](FLOAT, "If surf_IDv ? 0: scale factor on vent hole area or If surf_IDv = 0: vent hole area");
    ABG_Bvent                               = ARRAY[ABG_Nvent](FLOAT, "If surf_IDv ? 0: scale factor on impacted vent hole area or If surf_IDv = 0: Bvent is reset to 0 for vent hole area");
    KEYWORD1                                = ARRAY[ABG_Nvent](STRING, "Vent hole title");

    Tstart_arr_X                            = ARRAY[ABG_Nvent](FLOAT, "Start time for venting");
    Tstop_arr_X                             = ARRAY[ABG_Nvent](FLOAT, "Stop time for venting");
    ABG_dPdef                               = ARRAY[ABG_Nvent](FLOAT, "Pressure difference to open vent hole membrane. dPdef=Pdef-Pext");
    ABG_dtPdef                              = ARRAY[ABG_Nvent](FLOAT, "Minimum duration pressure exceeds Pdef to open vent hole membrane");
    I_dtPdef_arr                            = ARRAY[ABG_Nvent](INT, "Time delay flag, when dPdef is reached");

    ABG_Iport                               = ARRAY[ABG_Nvent](FUNCT, "Vent area scale factor vs time function identifier");
    ABG_Iporp                               = ARRAY[ABG_Nvent](FUNCT, "Vent area scale factor vs pressure function identifier");
    ABG_IporA                               = ARRAY[ABG_Nvent](FUNCT, "Vent area scale factor vs area function identifier");
    Fport                                   = ARRAY[ABG_Nvent](FLOAT, "Scale factor for fct_IDt");
    Fporp                                   = ARRAY[ABG_Nvent](FLOAT, "Scale factor for fct_IDP");
    FporA                                   = ARRAY[ABG_Nvent](FLOAT, "Scale factor for fct_IDA");

    ABG_Iport1                              = ARRAY[ABG_Nvent](FUNCT, "Vent area scale factor vs time during contact function identifier");
    ABG_Iporp1                              = ARRAY[ABG_Nvent](FUNCT, "Vent area scale factor vs pressure during contact function identifier");
    ABG_IporA1                              = ARRAY[ABG_Nvent](FUNCT, "Vent area scale factor vs impacted surface function identifier");
    Fport1                                  = ARRAY[ABG_Nvent](FLOAT, "Scale factor for fct_IDt'");
    Fporp1                                  = ARRAY[ABG_Nvent](FLOAT, "Scale factor for fct_IDP'");
    FporA1                                  = ARRAY[ABG_Nvent](FLOAT, "Scale factor for fct_IDA'");

    // Card 6: Chemkin model data (read only Iform =2)
    ABG_Iv                                  = ARRAY[ABG_Nvent](CURVE, "Outflow velocity versus relative pressure function identifier (Chemkin model, only if Iform = 2)");
    BB1                                     = ARRAY[ABG_Nvent](FLOAT, "Scale factor on fct_IDV");

    // Card 7: Insert for each porous surface
    S2_SETSURFID                            = ARRAY[ABG_Nporsurf](SETS, "Porous surface identifier")  { SUBTYPES = (/SETS/SURF_IDPOOL); }
    ITYPE                                   = ARRAY[ABG_Nporsurf](INT, "Porosity formulation");
    Iblockage                               = ARRAY[ABG_Nporsurf](INT, "Block porous leakage flag, when in contact (Iformps > 0)");
    KEYWORD2                                = ARRAY[ABG_Nporsurf](STRING, "Porous surface title");

    Tstart_arr_Y                            = ARRAY[ABG_Nporsurf](FLOAT, "Start time for venting");
    Tstop_arr_Y                             = ARRAY[ABG_Nporsurf](FLOAT, "Stop time for venting");
    ABG_dPdef_ps                            = ARRAY[ABG_Nporsurf](FLOAT, "Pressure difference to open vent hole membrane");
    ABG_dtPdef_ps                           = ARRAY[ABG_Nporsurf](FLOAT, "Minimum duration pressure exceeds Pdef to open vent hole membrane");
    I_dtPdef_arr_ps                         = ARRAY[ABG_Nporsurf](INT, "Time delay flag, when dPdef is reached");

    // Card 8: Chemkin model data (read only if Iformps = 2)
    ABG_fct                                 = ARRAY[ABG_Nporsurf](CURVE, "Outflow velocity versus relative pressure function identifier");
    BB10                                    = ARRAY[ABG_Nporsurf](FLOAT, "Scale factor on fct_ID_psV");

    // Card 9: Numerical and meshing parameters
    Cgmerg                                  = VALUE(FLOAT, "Factor for global merging"); 
    Tswitch                                 = VALUE(FLOAT, "Amount of time after airbag time to fire to switch from FVM to UP (Uniform Pressure) formulation");
    Iswitch                                 = VALUE(INT, "Flag to switch from FVM to UP");
    Pswitch                                 = VALUE(FLOAT, "Ratio of FV standard deviation pressure to average pressure which triggers FVM to UP switch");

    Dtsca                                   = VALUE(FLOAT, "Scale factor for airbag time step. Using /DT/FVMBAG in the Engine will override this value");
    Dtmin                                   = VALUE(FLOAT, "Minimum time step for the airbag. Using /DT/FVMBAG in the Engine will override this value");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    CommentEnumField                        = VALUE(INT, "User Comments");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING, "Entity Comments");

    TITLE                                   = VALUE(STRING, "Monitored volume title");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES

    // Card 1
    entityiddisplayed_IN                    = -1;
    HEAT_T0                                 = 4339;

    MAT1                                    = 5277;
    PEXT                                    = 8144;
    T_Initial                               = 4113;
    I_ttf                                   = 4759;

    // Card 2: Number of injectors
    ABG_Njet                                = 969;

    // Card 3: Define Njet injectors
    injector_IDs                            = 4681;
    ABG_Isensor                             = 920;
    S1_SETSURFID                            = 4819;

    // Card 4: Number of vent holes and porous fabric surfaces
    ABG_Nvent                               = 928;
    ABG_Nporsurf                            = 764;

    // Card 5 Define Nvent vent holes (four lines per vent hole and optional line for Chemkin vent)
    SVENT_SETSURFID                         = 4682;
    Itvent                                  = 4499;
    ABG_Avent                               = 930;
    ABG_Bvent                               = 931;
    KEYWORD1                                = 549;

    Tstart_arr_X                            = 4635;
    Tstop_arr_X                             = 4636;
    ABG_dPdef                               = 933;
    ABG_dtPdef                              = 934;
    I_dtPdef_arr                            = 4760;

    ABG_Iport                               = 935;
    ABG_Iporp                               = 936;
    ABG_IporA                               = 937;
    Fport                                   = 4110;
    Fporp                                   = 4111;
    FporA                                   = 4112;

    ABG_Iport1                              = 938;
    ABG_Iporp1                              = 939;
    ABG_IporA1                              = 940;
    Fport1                                  = 4119;
    Fporp1                                  = 4120;
    FporA1                                  = 4121;

    // Card 6: Chemkin model data (read only Iform =2)
    ABG_Iv                                  = 943;
    BB1                                     = 115;

    // Card 7: Define Nporsurf porous surfaces (two lines per vent hole and optional line for Chemkin porosity)
    S2_SETSURFID                            = 2601;
    ITYPE                                   = 599;
    Iblockage                               = 765;
    KEYWORD2                                = 550;

    Tstart_arr_Y                            = 4637;
    Tstop_arr_Y                             = 4638;
    ABG_dPdef_ps                            = 767;
    ABG_dtPdef_ps                           = 768;
    I_dtPdef_arr_ps                         = 766;

    // Card 8: Chemkin model data (read only if Iformps = 2)
    ABG_fct                                 = 771;
    BB10                                    = 185;

    // Card 9: Numerical and meshing parameters
    Cgmerg                                  = 4514;
    Tswitch                                 = 2651;
    Iswitch                                 = -1;
    Pswitch                                 = -1;

    Dtsca                                   = 2715;
    Dtmin                                   = 2714;

    //HM INTERNAL
    KEYWORD_STR                             = 9000;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;
    NUM_COMMENTS                            = 5110;

    TITLE                                   = -1;
}

DEFAULTS(COMMON)
{
    T_Initial                               = 295.0;
    I_ttf                                   = 0;

    Itvent                                  = 1;
    ABG_Avent                               = 1.0;
    ABG_Bvent                               = 1.0;

    Tstart_arr_X                            = 0.0;
    Tstop_arr_X                             = 10e30;
    ABG_dPdef                               = 0.0;
    ABG_dtPdef                              = 0.0;

    Fport                                   = 1.0;
    Fporp                                   = 1.0;
    FporA                                   = 1.0;

    Fport1                                  = 1.0;
    Fporp1                                  = 1.0;
    FporA1                                  = 1.0;

    BB1                                     = 1.0;

    ITYPE                                   = 1;

    BB10                                    = 1.0;

    Cgmerg                                  = 0.02;
    Tswitch                                 = 1e30;
    Iswitch                                 = 0;
    Pswitch                                 = 0.0;

    Dtsca                                   = 0.9;
}

GUI(COMMON)
{

    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }

    ASSIGN(KEYWORD_STR, "/MONVOL/FVMBAG2");

    // Card 1
    DATA(entityiddisplayed, "surf_IDex");
    DATA(entityiddisplayed_IN, "surf_IDin");

    SCALAR(HEAT_T0, "Hconv")                { DIMENSION = "thermal_convectivity"; }

    DATA(MAT1, "mat_ID")                    { SUBTYPES=(/MAT/GAS_MASS,/MAT/GAS_MOLE,/MAT/GAS_PREDEFINED); }
    SCALAR(PEXT, "Pext")                    { DIMENSION = "pressure"; }
    SCALAR(T_Initial, "T0")                 { DIMENSION = "k"; }

    RADIO(I_ttf, "Ittf")
    {
      ADD(0, "0 (Default)");
      ADD(1, "1 and 2 Obsolete");
      ADD(3, "3: All options are shifted");
    }

    // Card 2 Number of injectors
    SIZE(ABG_Njet, "Number of injectors");

    // Card 3 Repeat the next line Njet times to define each injector
    ARRAY(ABG_Njet, "Injectors")
    {
      DATA(injector_IDs, "inject_ID")       { SUBTYPES=(/PROP/INJECT1,/PROP/INJECT2); }
      DATA(ABG_Isensor, "sens_ID");
      DATA(S1_SETSURFID, "surf_IDinj");
    }

    // Card 4 Number of vent holes and porous fabric surfaces
    SIZE(ABG_Nvent, "Number of vent holes");
    SIZE(ABG_Nporsurf, "Number of porous surfaces");

    // Card 5 Define Nvent vent holes (four lines per vent hole and optional line for Chemkin vent)
    ARRAY(ABG_Nvent, "Vent holes")
    {
        DATA(SVENT_SETSURFID, "surf_IDv");
        
        RADIO(Itvent, "Iform")
        {
          ADD(0, "0: Set to 1");
          ADD(1, "1: (Default) Isenthalpic");
          ADD(2, "2: Chemkin");
          ADD(3, "3: Local");
          ADD(4, "4: Isenthalpic with possible gas (mat_ID) flow in");
        }

        SCALAR(ABG_Avent, "Avent")
        {
            if(SVENT_SETSURFID!=NONE)       { TITLE = "scale factor on surface" ; DIMENSION = "DIMENSIONLESS"; }
            else                            { TITLE = "Surface of vent holes" ; DIMENSION = "area"; }
        }

        SCALAR(ABG_Bvent, "Bvent")
        {
            if(SVENT_SETSURFID!=NONE)       { TITLE = "scale factor on impacted surface" ; DIMENSION = "DIMENSIONLESS"; }
            else                            { TITLE = "Bvent is reset to 0" ; DIMENSION = "area"; }
        }

        SCALAR(KEYWORD1, "vent_title")      { DIMENSION = "DIMENSIONLESS"; }

        SCALAR(Tstart_arr_X, "Tstart")      { DIMENSION = "t"; }
        SCALAR(Tstop_arr_X, "Tstop")        { DIMENSION = "t"; }
        SCALAR(ABG_dPdef, "dPdef")          { DIMENSION = "pressure"; }
        SCALAR(ABG_dtPdef, "dtPdef")        { DIMENSION = "t"; }

        RADIO(I_dtPdef_arr, "IdtPdef")
        {
            ADD(0, "0: Pressure should be over dPdef during a dtPdef cumulative time to activate venting");
            ADD(1, "1: Venting is activated dtPdef after dPdef is reached");
        }

        DATA(ABG_Iport, "fct_IDt");
        DATA(ABG_Iporp, "fct_IDP");
        DATA(ABG_IporA, "fct_IDA");
        SCALAR(Fport, "Fscalet")            { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(Fporp, "FscaleP")            { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(FporA, "FscaleA")            { DIMENSION = "DIMENSIONLESS"; }

        DATA(ABG_Iport1, "fct_IDt'");
        DATA(ABG_Iporp1, "fct_IDP'");
        DATA(ABG_IporA1, "fct_IDA'");
        SCALAR(Fport1, "Fscalet'")          { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(Fporp1, "FscaleP'")          { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(FporA1, "FscaleA'")          { DIMENSION = "DIMENSIONLESS"; }

        // Card 5:Chemkin model data (read only Iform =2)
        if (Itvent == 2)
        {
            DATA(ABG_Iv, "fct_IDV");
            SCALAR(BB1, "FscaleV")          { DIMENSION = "velocity"; }
        }
    }

    // Card 6: Define Nporsurf porous surfaces (two lines per vent hole and optional line for Chemkin porosity)
    ARRAY(ABG_Nporsurf, "Porous fabric surfaces")
    {
        DATA(S2_SETSURFID, "surf_IDps");
        RADIO(ITYPE, "Iformps")
        {
          ADD(1,"1: (Default) Bernoulli (Wang & Nefske)");
          ADD(2,"2: Chemkin");
          ADD(3,"3: Graefe");
        }
        RADIO(Iblockage, "Iblockage")
        {
          ADD(0,"0: No");
          ADD(1,"1: Yes");
        }
        SCALAR(KEYWORD2, "surface_title");

        SCALAR(Tstart_arr_Y, "Tstart")      { DIMENSION = "t"; }
        SCALAR(Tstop_arr_Y, "Tstop")        { DIMENSION = "t"; }
        SCALAR(ABG_dPdef_ps, "dPdef")       { DIMENSION = "pressure"; }
        SCALAR(ABG_dtPdef_ps, "dtPdef")     { DIMENSION = "t"; }
        RADIO(I_dtPdef_arr_ps, "IdtPdef_ps")
        {
            ADD(0, "0: Pressure should be over dPdef during a dtPdef cumulative time to activate venting");
            ADD(1, "1: Venting is activated dtPdef after dPdef is reached");
        }
        // Card 7: Chemkin model data  (read only if Iformps = 2)
        if (ITYPE == 2)
        {
            DATA(ABG_fct, "fct_IDV");
            SCALAR(BB10, "FscaleV")         { DIMENSION = "velocity"; } 
        }
    }

    // Card 8: Numerical and meshing parameters

    SCALAR(Cgmerg, "Cgmerg")                { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(Tswitch, "Tswitch")              { DIMENSION = "t"; }
    RADIO(Iswitch, "Iswitch")
    {
      ADD(0,"0: (Default) No switch to uniform pressure. The finite volume method is used");
      ADD(1,"1: Switch is performed when either Pswitch or Tswitch criteria is reached");
    }
    SCALAR(Pswitch, "Pswitch")              { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(Dtsca, "Dtsca")                  { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(Dtmin, "Dtmin")                  { DIMENSION = "DIMENSIONLESS"; }
}

// File format
FORMAT(radioss2021)
{
    HEADER("/MONVOL/FVMBAG2/%-d", _ID_);
    CARD("%-100s", TITLE);

    // Card 1
    COMMENT("#surf_IDex surf_IDin               Hconv");
    CARD("%10d%10d%20lg", entityiddisplayed, entityiddisplayed_IN, HEAT_T0);

    COMMENT("#   mat_ID                                              Pext                  T0                Ittf");
    CARD("%10d%30s%20lg%20lg%10s%10d", MAT1, _BLANK_, PEXT, T_Initial, _BLANK_, I_ttf);

    // Card 2: Number of injectors
    COMMENT("#     Njet");
    CARD("%10d", ABG_Njet);

    CARD_LIST(ABG_Njet)
    {
      COMMENT("#inject_ID   sens_IDsurf_IDinj");
      CARD("%10d%10d%10d", injector_IDs, ABG_Isensor, S1_SETSURFID);
    }

    // Card 3 Number of vent holes and porous fabric surfaces
    COMMENT("#    Nvent  Nporsurf");
    CARD("%10d%10d", ABG_Nvent, ABG_Nporsurf);

    // Card 4 Define Nvent vent holes (four lines per vent hole and optional line for Chemkin vent)
    CARD_LIST(ABG_Nvent)
    {
      COMMENT("# surf_IDv     Iform               Avent               Bvent                              vent_title");
      CARD("%10d%10d%20lg%20lg%20s%20s", SVENT_SETSURFID, Itvent, ABG_Avent, ABG_Bvent, _BLANK_, KEYWORD1);

      COMMENT("#             Tstart               Tstop               dPdef              dtPdef             Idtpdef");
      CARD("%20lg%20lg%20lg%20lg%10s%10d", Tstart_arr_X, Tstop_arr_X, ABG_dPdef, ABG_dtPdef, _BLANK_, I_dtPdef_arr);

      COMMENT("#  fct_IDt   fct_IDP   fct_IDA                       Fscalet             FscaleP             FscaleA");
      CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport, ABG_Iporp, ABG_IporA, _BLANK_, Fport, Fporp, FporA);

      COMMENT("# fct_IDt'  fct_IDP'  fct_IDA'                      Fscalet'            FscaleP'            FscaleA'");
      CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport1, ABG_Iporp1, ABG_IporA1, _BLANK_, Fport1, Fporp1, FporA1);

      // Card 5: Chemkin model data
      if (Itvent == 2)
      {
        COMMENT("#  fct_IDv                       Fscalev");
        CARD("%10d%10s%20lg", ABG_Iv, _BLANK_, BB1);
      }
    }

    // Card 6: Insert for each porous surface
    CARD_LIST(ABG_Nporsurf)
    {
      COMMENT("#surf_IDps   Iformps Iblockage                                                         surface_title");
      CARD("%10d%10d%10d%50s%20s", S2_SETSURFID, ITYPE, Iblockage, _BLANK_, KEYWORD2);
 
      COMMENT("#             Tstart               Tstop               dPdef              dtPdef             IdtPdef");
      CARD("%20lg%20lg%20lg%20lg%10s%10d", Tstart_arr_Y, Tstop_arr_Y, ABG_dPdef_ps, ABG_dtPdef_ps, _BLANK_, I_dtPdef_arr_ps);

      // Card 7: Chemkin model data
      if (ITYPE == 2) 
      {
         COMMENT("#fct_ID_psV                   Fscale_psV");
         CARD("%10d%10s%20lg", ABG_fct, _BLANK_, BB10);
      }
    }

    // Card 8: Numerical and meshing parameters
    COMMENT("#              Cgmerg            Tswitch             Iswitch             Pswitch");
    CARD("%20lg%20lg%10s%10d%20lg", Cgmerg, Tswitch, _BLANK_, Iswitch, Pswitch);

    COMMENT("#              Dtsca               Dtmin");
    CARD("%20lg%20lg", Dtsca, Dtmin);
}
FORMAT(radioss2023)
{
    HEADER("/MONVOL/FVMBAG2/%-d", _ID_);
    CARD("%-100s", TITLE);

    // Card 1
    COMMENT("#surf_IDex surf_IDin               Hconv      IH3D");
    CARD("%10d%10d%20lg%10d", entityiddisplayed, entityiddisplayed_IN, HEAT_T0, IH3D_FLAG);

    COMMENT("#   mat_ID                                              Pext                  T0                Ittf");
    CARD("%10d%30s%20lg%20lg%10s%10d", MAT1, _BLANK_, PEXT, T_Initial, _BLANK_, I_ttf);

    // Card 2: Number of injectors
    COMMENT("#     Njet");
    CARD("%10d", ABG_Njet);

    CARD_LIST(ABG_Njet)
    {
      COMMENT("#inject_ID   sens_IDsurf_IDinj");
      CARD("%10d%10d%10d", injector_IDs, ABG_Isensor, S1_SETSURFID);
    }

    // Card 3 Number of vent holes and porous fabric surfaces
    COMMENT("#    Nvent  Nporsurf");
    CARD("%10d%10d", ABG_Nvent, ABG_Nporsurf);

    // Card 4 Define Nvent vent holes (four lines per vent hole and optional line for Chemkin vent)
    CARD_LIST(ABG_Nvent)
    {
      COMMENT("# surf_IDv     Iform               Avent               Bvent                              vent_title");
      CARD("%10d%10d%20lg%20lg%20s%20s", SVENT_SETSURFID, Itvent, ABG_Avent, ABG_Bvent, _BLANK_, KEYWORD1);

      COMMENT("#             Tstart               Tstop               dPdef              dtPdef             Idtpdef");
      CARD("%20lg%20lg%20lg%20lg%10s%10d", Tstart_arr_X, Tstop_arr_X, ABG_dPdef, ABG_dtPdef, _BLANK_, I_dtPdef_arr);

      COMMENT("#  fct_IDt   fct_IDP   fct_IDA                       Fscalet             FscaleP             FscaleA");
      CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport, ABG_Iporp, ABG_IporA, _BLANK_, Fport, Fporp, FporA);

      COMMENT("# fct_IDt'  fct_IDP'  fct_IDA'                      Fscalet'            FscaleP'            FscaleA'");
      CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport1, ABG_Iporp1, ABG_IporA1, _BLANK_, Fport1, Fporp1, FporA1);

      // Card 5: Chemkin model data
      if (Itvent == 2)
      {
        COMMENT("#  fct_IDv                       Fscalev");
        CARD("%10d%10s%20lg", ABG_Iv, _BLANK_, BB1);
      }
    }

    // Card 6: Insert for each porous surface
    CARD_LIST(ABG_Nporsurf)
    {
      COMMENT("#surf_IDps   Iformps Iblockage                                                         surface_title");
      CARD("%10d%10d%10d%50s%20s", S2_SETSURFID, ITYPE, Iblockage, _BLANK_, KEYWORD2);
 
      COMMENT("#             Tstart               Tstop               dPdef              dtPdef             IdtPdef");
      CARD("%20lg%20lg%20lg%20lg%10s%10d", Tstart_arr_Y, Tstop_arr_Y, ABG_dPdef_ps, ABG_dtPdef_ps, _BLANK_, I_dtPdef_arr_ps);

      // Card 7: Chemkin model data
      if (ITYPE == 2) 
      {
         COMMENT("#fct_ID_psV                   Fscale_psV");
         CARD("%10d%10s%20lg", ABG_fct, _BLANK_, BB10);
      }
    }

    // Card 8: Numerical and meshing parameters
    COMMENT("#              Cgmerg            Tswitch             Iswitch             Pswitch");
    CARD("%20lg%20lg%10s%10d%20lg", Cgmerg, Tswitch, _BLANK_, Iswitch, Pswitch);

    COMMENT("#              Dtsca               Dtmin");
    CARD("%20lg%20lg", Dtsca, Dtmin);
}
