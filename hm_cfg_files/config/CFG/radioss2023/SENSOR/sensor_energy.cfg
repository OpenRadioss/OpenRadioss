//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// /SENSOR ENERGY
//

ATTRIBUTES(COMMON)
{
//    Sensor_Type                             = VALUE(INT,  "Sensor type keyword");
    Tdelay                                  = VALUE(FLOAT,  "Time delay");
    //
    Energy_Type                             = VALUE(INT,  "");
    Part_Id                                 = VALUE(COMPONENT,"Part identifier for the part monitored");
    Subset_ID                               = VALUE(ASSEMBLY,  "Subset identifier for the subset monitored");
    Iselect                                 = VALUE(INT,    "Global / Part or Subset energy selector");
    IEmin                                   = VALUE(FLOAT,  "Minimum part or subset internal energy");
    IEmax                                   = VALUE(FLOAT,  "Maximum part or subset internal energy");
    KEmin                                   = VALUE(FLOAT,  "Minimum part or subset kinetic energy");
    KEmax                                   = VALUE(FLOAT,  "Maximum part or subset kinetic energy");
    Tmin                                    = VALUE(FLOAT,  "Minimum time duration before activation when criteria is reached");
    IEtol                                   = VALUE(FLOAT,  "Tolerance of constant internal energy");
    KEtol                                   = VALUE(FLOAT,  "Tolerance of constant kinetic energy");
    IEtime                                  = VALUE(FLOAT,  "Time duration of constant internal energy");
    KEtime                                  = VALUE(FLOAT,  "Time duration of constant kinetic energy");

//HM INTERNAL
//    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES
//    Sensor_Type                             = 8107;
    Energy_Type                             = 5415;
    Part_Id                                 = 800;
    Subset_ID                               = 5414;
    IEmin                                   = 5416;
    IEmax                                   = 5417;
    KEmin                                   = 5418;
    KEmax                                   = 5419;
    Tmin                                    = 4831;
    //HM INTERNAL 
//    KEYWORD_STR                             = 9000;
}


DEFAULTS(COMMON)
{
//    Sensor_Type = 14 ;
    IEmax           = 1.0e20;
    KEmax           = 1.0e20;
    Iselect         = 0;
}

GUI(COMMON)
{
    SCALAR(Tdelay,"Tdelay")  { DIMENSION = "t";}
//
    DATA(Part_Id,"part_ID");
    DATA(Subset_ID,"subset_ID");
    SCALAR(IEmin,"IEmin") { DIMENSION = "energy";}
    SCALAR(IEmax,"IEmax") { DIMENSION = "energy";}
    SCALAR(KEmin,"KEmin") { DIMENSION = "energy";}
    SCALAR(KEmax,"KEmax") { DIMENSION = "energy";}
    SCALAR(IEtol,"IEtol") { DIMENSION = "energy";}
    SCALAR(KEtol,"KEtol") { DIMENSION = "energy";}
    SCALAR(Tmin,"Tmin")   { DIMENSION = "t";}
    SCALAR(IEtime,"Tmin") { DIMENSION = "t";}
    SCALAR(KEtime,"Tmin") { DIMENSION = "t";}

}

// File format

FORMAT(radioss2023)
{
    COMMENT("#             Tdelay");
    CARD("%20lg",Tdelay);

    CARD_PREREAD("%10d%10d",Part_Id,Subset_ID);
    if(Part_Id != NONE)
    {
        ASSIGN(Energy_Type,1,IMPORT);
    }
    else if (Subset_ID != NONE)
    {
        ASSIGN(Energy_Type,2,IMPORT);
    }
    COMMENT("#  part_ID subset_ID   Iselect");
    CARD("%10d%10d%10d",Part_Id,Subset_ID,Iselect);

    COMMENT("#              IEmin               IEmax               KEmin               KEmax                Tmin");
    CARD("%20lg%20lg%20lg%20lg%20lg",IEmin,IEmax,KEmin,KEmax,Tmin);

    COMMENT("#              IEtol              IEtime               KEtol              KEtime");
    CARD("%20lg%20lg%20lg%20lg",IEtol,IEtime,KEtol,KEtime);
}


FORMAT(radioss2021)
{
    COMMENT("#             Tdelay");
    CARD("%20lg",Tdelay);

    CARD_PREREAD("%10d%10d",Part_Id,Subset_ID);
    if(Part_Id != NONE)
    {
        ASSIGN(Energy_Type,1,IMPORT);
    }
    else if (Subset_ID != NONE)
    {
        ASSIGN(Energy_Type,2,IMPORT);
    }
    COMMENT("#  part_ID subset_ID");
    CARD("%10d%10d",Part_Id,Subset_ID);

    COMMENT("#              IEmin               IEmax               KEmin               KEmax                Tmin");
    CARD("%20lg%20lg%20lg%20lg%20lg",IEmin,IEmax,KEmin,KEmax,Tmin);

    COMMENT("#              IEtol              IEtime               KEtol              KEtime");
    CARD("%20lg%20lg%20lg%20lg",IEtol,IEtime,KEtol,KEtime);
}
FORMAT(radioss2020)
{
    COMMENT("#             Tdelay");
    CARD("%20lg",Tdelay);

    CARD_PREREAD("%10d%10d",Part_Id,Subset_ID);
    if(Part_Id != NONE)
    {
        ASSIGN(Energy_Type,1,IMPORT);
    }
    else if (Subset_ID != NONE)
    {
        ASSIGN(Energy_Type,2,IMPORT);
    }
    COMMENT("#  part_ID subset_ID");
    CARD("%10d%10d",Part_Id,Subset_ID);

    COMMENT("#              IEmin               IEmax               KEmin               KEmax                Tmin");
    CARD("%20lg%20lg%20lg%20lg%20lg",IEmin,IEmax,KEmin,KEmax,Tmin);
}
