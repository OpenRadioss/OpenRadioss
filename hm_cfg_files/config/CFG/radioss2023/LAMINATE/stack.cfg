//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// 
// /STACK 
//

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES

    // Card
    LAM_Ishell                              = VALUE(INT, "Shell element formulation flag");
    LAM_Ismstr                              = VALUE(INT, "Shell small strain formulation flag");
    LAM_ISH3N                               = VALUE(INT, "3 node shell element formulation flag");
    LAM_Idrill                              = VALUE(INT, "Drilling degree of freedom stiffness flag");
    LAM_Z0                                  = VALUE(FLOAT, "Distance from the shell element reference plane to the bottom surface of the shell");

    LAM_Hm                                  = VALUE(FLOAT, "Shell membrane hourglass coefficient");
    LAM_Hf                                  = VALUE(FLOAT, "Shell out-of-plane hourglass");
    LAM_Hr                                  = VALUE(FLOAT, "Shell rotation hourglass coefficient");
    LAM_Dm                                  = VALUE(FLOAT, "Shell membrane damping");
    LAM_Dn                                  = VALUE(FLOAT, "Shell numerical damping");

    N                                       = VALUE(INT, "Number of Layers");
    LAM_ISTRAIN                             = VALUE(INT, "Compute strains for post-processing flag");
    LAM_Ashear                              = VALUE(FLOAT, "Shear factor");
    LAM_Iint                                = VALUE(INT, "Thickness integration formulation - through ply thickness");
    LAM_Ithick                              = VALUE(INT, "Shell resultant stresses calculation flag");

    LAM_Vx                                  = VALUE(FLOAT, "X component for reference vector");
    LAM_Vy                                  = VALUE(FLOAT, "Y component for reference vector");
    LAM_Vz                                  = VALUE(FLOAT, "Z component for reference vector");
    LAM_SKEW_CSID                           = VALUE(SYSTEM, "Skew identifier for reference vector");
    LAM_Iorth                               = VALUE(INT, "Orthotropic system formulation flag for reference vector");
    LAM_Ipos                                = VALUE(INT, "Ply positioning flag for reference vector");
    P_Thick_Fail                            = VALUE(FLOAT, "Percentage of layer thickness that must fail before the element is deleted");
    LAM_Ip                                  = VALUE(INT,  " Reference Direction in Shell plane","Ip");

    // By ply
    plyidlistmax                            = SIZE("Number of Layers");
    plyidlist                               = ARRAY[plyidlistmax](PLY, "Ply Property ID for Layer i");
    Phi_Zi_Size                             = SIZE("Temp variable for Phi & Zi array size");
    LAM_Stack_phi                           = ARRAY[Phi_Zi_Size](FLOAT, "Angle for Layer i");
    LAM_Stack_Zi                            = ARRAY[Phi_Zi_Size](FLOAT, "Z Position for Layer i");
    P_thick_fail_lam                        = ARRAY[Phi_Zi_Size](FLOAT,"Percentage of layer thickness that must fail before the element is deleted");
    F_weight_i                              = ARRAY[Phi_Zi_Size](FLOAT,"Relative failure weight factor for layer ");

    // By substack     
    sublaminateidlistmax                    = SIZE("Number of Sublaminates");
    sublaminateidlist                       = ARRAY[sublaminateidlistmax](LAMINATE, "Sublaminate id list");
    interfacepair                           = SIZE("Number of Interface Pairs");
    interfacepairsize                       = SIZE("");
    interfacepairplyids                     = ARRAY[interfacepairsize](PLY, "Ply Property ID for Layer i");

    //HM INTERNAL
    IS_SUB                                  = VALUE(STRING, "Temporary Variable to check whether next string is SUB or not");
    laminateconfig                          = VALUE(INT, "Laminate Configuration");
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    CommentEnumField                        = VALUE(INT, "User Comments");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING, "Entity Comments");
    id                                      = VALUE(SETS,"Temp variable for id");
    internal_id                             = VALUE(INT,"Temp variable for internalid");
    index                                   = VALUE(INT,"Temp variable for indexing");
    laminate                                = VALUE(LAMINATE,"");
    Pply_IDt                                = VALUE(PLY,"");
    Pply_IDb                                = VALUE(PLY,"");
    Current_Phi_Zi                          = VALUE(INT,"");
    _BLANK                                  = VALUE(STRING,"To consider blank");
    IO_FLAG                                 = VALUE(INT, "IOFLAG");
    TITLE                                   = VALUE(STRING, "Stack title");
    Line_count                              = VALUE(INT,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES

    // Card
    LAM_Ishell                              = 5707;
    LAM_Ismstr                              = 5708;
    LAM_ISH3N                               = 5709;
    LAM_Idrill                              = 5710;
    LAM_Z0                                  = 5711;
    P_Thick_Fail                            = 5407;
    
    LAM_Hm                                  = 5712;
    LAM_Hf                                  = 5713;
    LAM_Hr                                  = 5717;
    LAM_Dm                                  = 5714;
    LAM_Dn                                  = 5715;

    LAM_ISTRAIN                             = 5716;
    LAM_Ashear                              = 5718;
    LAM_Iint                                = 5719;
    LAM_Ithick                              = 5720;

    LAM_Vx                                  = 5723;
    LAM_Vy                                  = 5722;
    LAM_Vz                                  = 5721;
    LAM_SKEW_CSID                           = 5724;
    LAM_Iorth                               = 5725;
    LAM_Ipos                                = 5726;
    LAM_Ip                                  = -1; // temporarily defining as -1.

    LAM_Stack_phi                           = 5705;
    LAM_Stack_Zi                            = 5706;
    P_thick_fail_lam                        = -1; // temporarily defining as -1.
    F_weight_i                              = -1; // temporarily defining as -1.
    //sub_ plyn                               = -1;
    //id                                      = -1;
    internal_id                             = -1;
    index                                   = -1;

    //HM INTERNAL
    IS_SUB                                  = -1;
    KEYWORD_STR                             = 9000;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;
    NUM_COMMENTS                            = 5110;
    Pply_IDt                                =   -1;
    Pply_IDb                                =   -1;
    Phi_Zi_Size                             =   -1;
    Current_Phi_Zi                          =   -1;
    _BLANK                                  =   -1;

    IO_FLAG                                 = -1;

    TITLE                                   = -1;
    Line_count                              =   -1;
}

CHECK(COMMON)
{
    LAM_Hm                                  >=  0.0;
    LAM_Hm                                  <= 0.05;

    LAM_Hf                                  >=  0.0;
    LAM_Hf                                  <= 0.05;

    LAM_Hr                                  >=  0.0;
    LAM_Hr                                  <= 0.05;
    P_Thick_Fail                            >=  0.0;
    P_Thick_Fail                            <=  1.0;
}

DEFAULTS(COMMON)
{
    // Card
    LAM_Z0                                  = 0.0;

    LAM_Hf                                  = 0.01;
    LAM_Hm                                  = 0.01;
    LAM_Hr                                  = 0.01;

    LAM_ISTRAIN                             = 0;
    LAM_Ashear                              = 0.833333;
    LAM_Iint                                = 1;
    LAM_Ip                                  = 0;

    LAM_Vx                                  = 1.0;
    LAM_Vy                                  = 0.0;
    LAM_Vz                                  = 0.0;
    LAM_Iorth                               = 0;
    LAM_Ipos                                = 0;

}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
       ENUM_VALUE_FLAG=TRUE;
       ADD(1, "1:Hide in Menu/Export");
       ADD(2, "2:Show in Menu/Export");
       ADD(3, "3:Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }

    ASSIGN(KEYWORD_STR, "/STACK");

    RADIO(laminateconfig, "Type")
    {
        ADD(0, "0: Ply laminate");
        ADD(1, "1: Interface laminate");
        ADD(2, "2: Sublaminate");
    }

    RADIO(LAM_Ishell, "Ishell")
    {
        ADD(0, "0:Use value in /DEF_SHELL");
        ADD(1, "1: Q4, visco-elastic hourglass modes orthogonal to deformation and rigid modes (Belytschko)");
        ADD(2, "2: Q4, visco-elastic hourglass without orthogonality (Hallquist)");
        ADD(3, "3: Q4, elasto-plastic hourglass with orthogonality");
        ADD(4, "4: Q4 with improved type 1 formulation (orthogonalization for warped elements)");
        ADD(12, "12: QBAT shell formulation");
        ADD(24, "24: QEPH shell formulation");
    }

    RADIO(LAM_Ismstr, "Ismstr")
    {
        ADD(0, "0: Use value in /DEF_SHELL.");
        ADD(1, "1: Small strain from time =0 (new formulation compatible with all other formulation flags)");
        ADD(2, "2: Full geometric nonlinearities with possible small strain formulation activation in Radioss Engine");
        ADD(4, "4: Full geometric nonlinearities");
    }
    RADIO(LAM_ISH3N, "Ish3n")
    {
        ADD(0, "0: Use value in /DEF_SHELL");
        ADD(1, "1: Standard triangle (C0)");
        ADD(2, "2: Standard triangle (C0) with modification for large rotation");
        ADD(30, "30: DKT18");
        ADD(31, "31: DKT_S3, which based on DTK12 of BATOZ");
    }
    RADIO(LAM_Idrill, "Idrill")
    {
        ADD(0, "0: No");
        ADD(1, "1: Yes");
    }

    SCALAR(P_Thick_Fail);
    SCALAR(LAM_Z0, "Z0")                    { DIMENSION = "DIMENSIONLESS"; }

    SCALAR(LAM_Hm, "Hm")                    { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(LAM_Hf, "Hf")                    { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(LAM_Hr, "Hr")                    { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(LAM_Dm, "Dm")                    { DIMENSION = "DIMENSIONLESS"; }

    if(LAM_Ishell==12 || LAM_Ishell ==24)
    {
        SCALAR(LAM_Dn, "Dn");
    }

   /* RADIO(LAM_ISTRAIN, "Istrain")
    {
        ADD(0, "0: (Default) Use value Din /DEF_SHELL");
        ADD(1, "1: Yes");
        ADD(2, "2: No");
    }*/

    SCALAR(LAM_Ashear, "AREA_SHEAR")        { DIMENSION = "DIMENSIONLESS"; }

    RADIO(LAM_Iint, "Iint")
    {
        ADD(1, "1: (Default) Uniform integration scheme (uniformly distribution of the integration points through ply thickness)");
        ADD(2, "2: Gauss integration scheme");
    }

    RADIO(LAM_Ithick, "ITHICK")
    {
        ADD(0, "0: (Default) Use value in /DEF_SHELL");
        ADD(1, "1: Thickness change is taken into account");
        ADD(2, "2: Thickness is constant");
    }


    SCALAR(LAM_Vx, "Vx")                    { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(LAM_Vy, "Vy")                    { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(LAM_Vz, "Vz")                    { DIMENSION = "DIMENSIONLESS"; }
    DATA(LAM_SKEW_CSID, "Skew_ID");
    RADIO(LAM_Ip)
    {
       ADD(0, "0:Use first direction of skew_ID or vector V (if skew_ID is not defined) projected on the shell element.");
       ADD(20, "20:Defined from element connectivity (N1,N2) of the shell element.");
       ADD(22, "22:Defined from 1st direction of skew_ID projected on the shell element and angle phi. (Vector V is ignored).");
       ADD(23, "23:Defined from reference vector V projected on the shell element and angle phi (skew_ID is ignored).");
    }
    RADIO(LAM_Iorth, "Iorth")
    {
        ADD(0, "0: (Default) The first axis of orthotropy is maintained at constant angle with respect to the X-axis of an orthonormal co-rotational element coordinate system");
        ADD(1, "1: The first orthotropy direction is constant with respect to a non-orthonormal system of deformed element");
    }
    RADIO(LAM_Ipos, "Ipos")
    {
        ADD(0, "0: Ply positions are automatically calculated with regard to ply thicknesses");
        ADD(1, "1: All ply positions in the element thickness are user-defined. Multiple plies may have the same special position");
        ADD(2, "2: The shell element reference plane is at Z0 from the bottom surface of the shell");
        ADD(3, "3: The top surface of the shell is considered as element reference plane");
        ADD(4, "4: The bottom surface of the shell is considered as element reference plane");
    }
    SIZE(plyidlistmax);
    ARRAY(plyidlistmax, "No of rows")
    {
      if (laminateconfig == 0)
      {
            SCALAR(plyidlist, "Pply_IDi")   { DIMENSION = "DIMENSIONLESS"; }
            SCALAR(LAM_Stack_phi, "Phi_i")  { DIMENSION="k"; }
            SCALAR(LAM_Stack_Zi, "Z_i")     { DIMENSION="l"; }
      }

      if (laminateconfig == 1)
      {
            // Nsub
            SCALAR(plyidlist, "Pply_IDi")   { DIMENSION = "DIMENSIONLESS"; }
            SCALAR(LAM_Stack_phi, "Phii")   { DIMENSION="k"; }
            SCALAR(LAM_Stack_Zi, "Zi")      { DIMENSION="l"; }
            SCALAR(P_thick_fail_lam)  {DIMENSION="DIMENSIONLESS";}
            SCALAR(F_weight_i)    {DIMENSION="DIMENSIONLESS";}
      }
    }

    SIZE(sublaminateidlistmax) ;
    ARRAY(sublaminateidlistmax,"")
    {
        SUBOBJECT(sublaminateidlist) {SUBTYPES = (/LAMINATE/STACKSUB);}
    }
}

// File format
FORMAT(radioss2023) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
 
    HEADER("/STACK/%-d", _ID_);
    CARD("%-100s", TITLE);

    COMMENT("#   Ishell    Ismstr     Ish3n    Idrill        P_thick_fail                  Z0");
    CARD("%10d%10d%10d%10d%20lg%20lg", LAM_Ishell, LAM_Ismstr, LAM_ISH3N, LAM_Idrill, P_Thick_Fail, LAM_Z0);

    if(LAM_Ishell==12 || LAM_Ishell==24)
    {
        COMMENT("#                 Hm                  Hf                  Hr                  Dm                  Dn");
        CARD("%20lg%20lg%20lg%20lg%20lg", LAM_Hm, LAM_Hf, LAM_Hr, LAM_Dm, LAM_Dn);
    }
    else
    {
        COMMENT("#                 Hm                  Hf                  Hr                  Dm");
        CARD("%20lg%20lg%20lg%20lg", LAM_Hm, LAM_Hf, LAM_Hr, LAM_Dm);
    }

    COMMENT("#                                 Ashear                Iint              Ithick");
    CARD("%10s%10d%20lg%10s%10d%10s%10d", _BLANK_, LAM_ISTRAIN, LAM_Ashear, _BLANK_, LAM_Iint, _BLANK_, LAM_Ithick);

    COMMENT("#                 Vx                  Vy                  Vz   skew_ID     Iorth      Ipos        Ip");
    CARD("%20lg%20lg%20lg%10d%10d%10d%10d", LAM_Vx, LAM_Vy, LAM_Vz, LAM_SKEW_CSID, LAM_Iorth, LAM_Ipos, LAM_Ip);
    
    ASSIGN(Line_count,_GET_NB_FREE_CARDS(),IMPORT);
    ASSIGN(Line_count,1,EXPORT);
    if(Line_count > 0)
    {
        CARD_PREREAD("%3s",IS_SUB);
        if(IS_SUB=="SUB" || IS_SUB=="Sub")
        {
            ASSIGN(laminateconfig,1,IMPORT);
        }
        else
        {
            ASSIGN(laminateconfig,0,IMPORT);
        }
    
        if(laminateconfig==0)
        {
            FREE_CARD_LIST(plyidlistmax)
            {
                COMMENT("# Pply_IDi               Phi_i                 Z_i      P_thick_fail_i          F_weight_i");
                CARD("%10d%20lg%20lg%20lg%20lg", plyidlist, LAM_Stack_phi, LAM_Stack_Zi,P_thick_fail_lam,F_weight_i);
                CARD("%s", _BLANK);
            }
        }
        else if(laminateconfig==1 && IO_FLAG==0)
        {
            SUBOBJECTS(sublaminateidlist,/LAMINATE/STACKSUB);
            ASSIGN(interfacepairsize, interfacepair*2,EXPORT);
            ASSIGN(index,0,EXPORT);
            CARD_LIST(interfacepair)
            {
                ASSIGN(Pply_IDt, _ATTRIB(interfacepairplyids, index), EXPORT);
                ASSIGN(Pply_IDt,_GET_NLOOKUP_VALUE(16,17,Pply_IDt),EXPORT);
                if(Pply_IDt == NONE)
                {
                    ASSIGN(Pply_IDt, _ATTRIB(interfacepairplyids, index), EXPORT);
                }
                ASSIGN(index,index+1,EXPORT);
                ASSIGN(Pply_IDb, _ATTRIB(interfacepairplyids, index), EXPORT);
                ASSIGN(Pply_IDb,_GET_NLOOKUP_VALUE(16,17,Pply_IDb),EXPORT);
                if(Pply_IDb == NONE)
                {
                    ASSIGN(Pply_IDb, _ATTRIB(interfacepairplyids, index), EXPORT);
                }
                CARD("INT       %10d%10d", Pply_IDt, Pply_IDb);
                ASSIGN(index,index+1,EXPORT);
            }
        }
        else
        {
            SUBOBJECTS(sublaminateidlist,/LAMINATE/STACKSUB);
            FREE_CARD_LIST(interfacepairsize)
            {
                CARD("INT       %10d", CELL_PAIR(interfacepairplyids));
            }
            ASSIGN(interfacepair, interfacepairsize,IMPORT);
        }
    }
}

// File format
FORMAT(radioss2022) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
 
    HEADER("/STACK/%-d", _ID_);
    CARD("%-100s", TITLE);

    COMMENT("#   Ishell    Ismstr     Ish3n    Idrill                            Z0");
    CARD("%10d%10d%10d%10d%20s%20lg", LAM_Ishell, LAM_Ismstr, LAM_ISH3N, LAM_Idrill, _BLANK_, LAM_Z0);

    if(LAM_Ishell==12 || LAM_Ishell==24)
    {
        COMMENT("#                 Hm                  Hf                  Hr                  Dm                  Dn");
        CARD("%20lg%20lg%20lg%20lg%20lg", LAM_Hm, LAM_Hf, LAM_Hr, LAM_Dm, LAM_Dn);
    }
    else
    {
        COMMENT("#                 Hm                  Hf                  Hr                  Dm");
        CARD("%20lg%20lg%20lg%20lg", LAM_Hm, LAM_Hf, LAM_Hr, LAM_Dm);
    }

    COMMENT("#                                 Ashear                Iint              Ithick");
    CARD("%10s%10d%20lg%10s%10d%10s%10d", _BLANK_, LAM_ISTRAIN, LAM_Ashear, _BLANK_, LAM_Iint, _BLANK_, LAM_Ithick);

    COMMENT("#                 Vx                  Vy                  Vz   skew_ID     Iorth      Ipos        Ip");
    CARD("%20lg%20lg%20lg%10d%10d%10d%10d", LAM_Vx, LAM_Vy, LAM_Vz, LAM_SKEW_CSID, LAM_Iorth, LAM_Ipos, LAM_Ip);
    
    ASSIGN(Line_count,_GET_NB_FREE_CARDS(),IMPORT);
    ASSIGN(Line_count,1,EXPORT);
    if(Line_count > 0)
    {
        CARD_PREREAD("%3s",IS_SUB);
        if(IS_SUB=="SUB" || IS_SUB=="Sub")
        {
            ASSIGN(laminateconfig,1,IMPORT);
        }
        else
        {
            ASSIGN(laminateconfig,0,IMPORT);
        }
    
        if(laminateconfig==0)
        {
            FREE_CARD_LIST(plyidlistmax)
            {
                COMMENT("# Pply_IDi               Phi_i                 Z_i      P_thick_fail_i          F_weight_i");
                CARD("%10d%20lg%20lg%20lg%20lg", plyidlist, LAM_Stack_phi, LAM_Stack_Zi,P_thick_fail_lam,F_weight_i);
                CARD("%s", _BLANK);
            }
        }
        else if(laminateconfig==1 && IO_FLAG==0)
        {
            SUBOBJECTS(sublaminateidlist,/LAMINATE/STACKSUB);
            ASSIGN(interfacepairsize, interfacepair*2,EXPORT);
            ASSIGN(index,0,EXPORT);
            CARD_LIST(interfacepair)
            {
                ASSIGN(Pply_IDt, _ATTRIB(interfacepairplyids, index), EXPORT);
                ASSIGN(Pply_IDt,_GET_NLOOKUP_VALUE(16,17,Pply_IDt),EXPORT);
                if(Pply_IDt == NONE)
                {
                    ASSIGN(Pply_IDt, _ATTRIB(interfacepairplyids, index), EXPORT);
                }
                ASSIGN(index,index+1,EXPORT);
                ASSIGN(Pply_IDb, _ATTRIB(interfacepairplyids, index), EXPORT);
                ASSIGN(Pply_IDb,_GET_NLOOKUP_VALUE(16,17,Pply_IDb),EXPORT);
                if(Pply_IDb == NONE)
                {
                    ASSIGN(Pply_IDb, _ATTRIB(interfacepairplyids, index), EXPORT);
                }
                CARD("INT       %10d%10d", Pply_IDt, Pply_IDb);
                ASSIGN(index,index+1,EXPORT);
            }
        }
        else
        {
            SUBOBJECTS(sublaminateidlist,/LAMINATE/STACKSUB);
            FREE_CARD_LIST(interfacepairsize)
            {
                CARD("INT       %10d", CELL_PAIR(interfacepairplyids));
            }
            ASSIGN(interfacepair, interfacepairsize,IMPORT);
        }
    }
}

FORMAT(radioss2018) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
 
    HEADER("/STACK/%-d", _ID_);
    CARD("%-100s", TITLE);

    COMMENT("#   Ishell    Ismstr     Ish3n    Idrill                            Z0");
    CARD("%10d%10d%10d%10d%20s%20lg", LAM_Ishell, LAM_Ismstr, LAM_ISH3N, LAM_Idrill, _BLANK_, LAM_Z0);

    if(LAM_Ishell==12 || LAM_Ishell==24)
    {
        COMMENT("#                 Hm                  Hf                  Hr                  Dm                  Dn");
        CARD("%20lg%20lg%20lg%20lg%20lg", LAM_Hm, LAM_Hf, LAM_Hr, LAM_Dm, LAM_Dn);
    }
    else
    {
        COMMENT("#                 Hm                  Hf                  Hr                  Dm");
        CARD("%20lg%20lg%20lg%20lg", LAM_Hm, LAM_Hf, LAM_Hr, LAM_Dm);
    }

    COMMENT("#            Istrain              Ashear                Iint              Ithick");
    CARD("%10s%10d%20lg%10s%10d%10s%10d", _BLANK_, LAM_ISTRAIN, LAM_Ashear, _BLANK_, LAM_Iint, _BLANK_, LAM_Ithick);

    COMMENT("#                 Vx                  Vy                  Vz   skew_ID     Iorth      Ipos");
    CARD("%20lg%20lg%20lg%10d%10d%10d", LAM_Vx, LAM_Vy, LAM_Vz, LAM_SKEW_CSID, LAM_Iorth, LAM_Ipos);
    
    ASSIGN(Line_count,_GET_NB_FREE_CARDS(),IMPORT);
    ASSIGN(Line_count,1,EXPORT);
    if(Line_count > 0)
    {
        CARD_PREREAD("%3s",IS_SUB);
        if(IS_SUB=="SUB" || IS_SUB=="Sub")
        {
            ASSIGN(laminateconfig,1,IMPORT);
        }
        else
        {
            ASSIGN(laminateconfig,0,IMPORT);
        }
    
        if(laminateconfig==0)
        {
            FREE_CARD_LIST(plyidlistmax)
            {
                COMMENT("# Pply_IDi               Phi_i                 Z_i      P_thick_fail_i          F_weight_i");
                CARD("%10d%20lg%20lg%20lg%20lg", plyidlist, LAM_Stack_phi, LAM_Stack_Zi,P_thick_fail_lam,F_weight_i);
                CARD("%s", _BLANK);
            }
        }
        else if(laminateconfig==1 && IO_FLAG==0)
        {
            SUBOBJECTS(sublaminateidlist,/LAMINATE/STACKSUB);
            ASSIGN(interfacepairsize, interfacepair*2,EXPORT);
            ASSIGN(index,0,EXPORT);
            CARD_LIST(interfacepair)
            {
                ASSIGN(Pply_IDt, _ATTRIB(interfacepairplyids, index), EXPORT);
                ASSIGN(Pply_IDt,_GET_NLOOKUP_VALUE(16,17,Pply_IDt),EXPORT);
                if(Pply_IDt == NONE)
                {
                    ASSIGN(Pply_IDt, _ATTRIB(interfacepairplyids, index), EXPORT);
                }
                ASSIGN(index,index+1,EXPORT);
                ASSIGN(Pply_IDb, _ATTRIB(interfacepairplyids, index), EXPORT);
                ASSIGN(Pply_IDb,_GET_NLOOKUP_VALUE(16,17,Pply_IDb),EXPORT);
                if(Pply_IDb == NONE)
                {
                    ASSIGN(Pply_IDb, _ATTRIB(interfacepairplyids, index), EXPORT);
                }
                CARD("INT       %10d%10d", Pply_IDt, Pply_IDb);
                ASSIGN(index,index+1,EXPORT);
            }
        }
        else
        {
            SUBOBJECTS(sublaminateidlist,/LAMINATE/STACKSUB);
            FREE_CARD_LIST(interfacepairsize)
            {
                CARD("INT       %10d", CELL_PAIR(interfacepairplyids));
            }
            ASSIGN(interfacepair, interfacepairsize,IMPORT);
        }
    }
}

FORMAT(radioss2017) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
 
    HEADER("/STACK/%-d", _ID_);
    CARD("%-100s", TITLE);

    COMMENT("#   Ishell    Ismstr     Ish3n    Idrill                            Z0");
    CARD("%10d%10d%10d%10d%20s%20lg", LAM_Ishell, LAM_Ismstr, LAM_ISH3N, LAM_Idrill, _BLANK_, LAM_Z0);

    if(LAM_Ishell==12 || LAM_Ishell==24)
    {
        COMMENT("#                 Hm                  Hf                  Hr                  Dm                  Dn");
        CARD("%20lg%20lg%20lg%20lg%20lg", LAM_Hm, LAM_Hf, LAM_Hr, LAM_Dm, LAM_Dn);
    }
    else
    {
        COMMENT("#                 Hm                  Hf                  Hr                  Dm");
        CARD("%20lg%20lg%20lg%20lg", LAM_Hm, LAM_Hf, LAM_Hr, LAM_Dm);
    }

    COMMENT("#            Istrain              Ashear                Iint              Ithick");
    CARD("%10s%10d%20lg%10s%10d%10s%10d", _BLANK_, LAM_ISTRAIN, LAM_Ashear, _BLANK_, LAM_Iint, _BLANK_, LAM_Ithick);

    COMMENT("#                 Vx                  Vy                  Vz   skew_ID     Iorth      Ipos");
    CARD("%20lg%20lg%20lg%10d%10d%10d", LAM_Vx, LAM_Vy, LAM_Vz, LAM_SKEW_CSID, LAM_Iorth, LAM_Ipos);
    
    ASSIGN(Line_count,_GET_NB_FREE_CARDS(),IMPORT);
    ASSIGN(Line_count,1,EXPORT);
    if(Line_count > 0)
    {
        CARD_PREREAD("%3s",IS_SUB);
        if(IS_SUB=="SUB" || IS_SUB=="Sub")
        {
            ASSIGN(laminateconfig,1,IMPORT);
        }
        else
        {
            ASSIGN(laminateconfig,0,IMPORT);
        }
    
        if(laminateconfig==0)
        {
            FREE_CARD_LIST(plyidlistmax)
            {
                COMMENT("# Pply_IDi               Phi_i                 Z_i");
                CARD("%10d%20lg%20lg", plyidlist, LAM_Stack_phi, LAM_Stack_Zi);
                CARD("%s", _BLANK);
            }
        }
        else if(laminateconfig==1 && IO_FLAG==0)
        {
            SUBOBJECTS(sublaminateidlist,/LAMINATE/STACKSUB);
            ASSIGN(interfacepairsize, interfacepair*2,EXPORT);
            ASSIGN(index,0,EXPORT);
            CARD_LIST(interfacepair)
            {
                ASSIGN(Pply_IDt, _ATTRIB(interfacepairplyids, index), EXPORT);
                ASSIGN(Pply_IDt,_GET_NLOOKUP_VALUE(16,17,Pply_IDt),EXPORT);
                if(Pply_IDt == NONE)
                {
                    ASSIGN(Pply_IDt, _ATTRIB(interfacepairplyids, index), EXPORT);
                }
                ASSIGN(index,index+1,EXPORT);
                ASSIGN(Pply_IDb, _ATTRIB(interfacepairplyids, index), EXPORT);
                ASSIGN(Pply_IDb,_GET_NLOOKUP_VALUE(16,17,Pply_IDb),EXPORT);
                if(Pply_IDb == NONE)
                {
                    ASSIGN(Pply_IDb, _ATTRIB(interfacepairplyids, index), EXPORT);
                }
                CARD("INT       %10d%10d", Pply_IDt, Pply_IDb);
                ASSIGN(index,index+1,EXPORT);
            }
        }
        else
        {
            SUBOBJECTS(sublaminateidlist,/LAMINATE/STACKSUB);
            FREE_CARD_LIST(interfacepairsize)
            {
                CARD("INT       %10d", CELL_PAIR(interfacepairplyids));
            }
            ASSIGN(interfacepair, interfacepairsize,IMPORT);
        }
    }
}
