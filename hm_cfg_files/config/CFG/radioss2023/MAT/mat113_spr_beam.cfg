//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Material SPR_BEAM Type113
ATTRIBUTES(COMMON)
{
    // Solver attributes
    MAT_RHO                                 = VALUE(FLOAT, "Initial Density");
    TITLE                                   = VALUE(STRING, "Title");
    Ifail                                   = VALUE(INT,  " Failure Criteria");
    Ileng                                   = VALUE(INT,  " Input Per Unit Length Flag");
    Ifail2                                  = VALUE(INT,  " Failure Model Flag");
    
    //Tension (x)
    STIFF1                                  = VALUE(FLOAT,  " Stiffness for tension");
    DAMP1                                   = VALUE(FLOAT,  " Damping for tension");
    Acoeft1                                 = VALUE(FLOAT,  " Nonlinear stiffness function scale factor");
    Bcoeft1                                 = VALUE(FLOAT,  " Scale factor for logarithmic rate effects");
    Dcoeft1                                 = VALUE(FLOAT,  " Scale factor for logarithmic rate effects");
    FUN_A1                                  = VALUE(FUNCT,  " Function identifier defining nonlinear stiffness");
    HFLAG1                                  = VALUE(INT,  " Hardening flag for nonlinear spring");
    FUN_B1                                  = VALUE(FUNCT,  " Function identifier defining force or moment as a function of spring velocity");
    FUN_C1                                  = VALUE(FUNCT,  " Function identifier");
    FUN_D1                                  = VALUE(FUNCT,  " Function identifier for nonlinear damping");
    MIN_RUP1                                = VALUE(FLOAT,  " Negative translation Failure Limit");
    MAX_RUP1                                = VALUE(FLOAT,  " Positive translation Failure Limit");
    Prop_X_F                                = VALUE(FLOAT,  " Abscissa scale factor for the damping functions for the g and h");
    Prop_X_E                                = VALUE(FLOAT,  " Ordinate scale factor for the damping function g");
    scale1                                  = VALUE(FLOAT,  " Abscissa scale factor for the stiffness function f");
    Prop_X_H                                = VALUE(FLOAT,  " Ordinate Scale factor for the damping function h");   
    FUN_K1                                  = VALUE(FUNCT,  " Function identifier for nonlinear stifness scale");
    
    //Shear (xy)
    STIFF2                                  = VALUE(FLOAT,  " Stiffness for Shear XY");
    DAMP2                                   = VALUE(FLOAT,  " Damping for Shear XY");
    Acoeft2                                 = VALUE(FLOAT,  " Nonlinear stiffness function scale factor");
    Bcoeft2                                 = VALUE(FLOAT,  " Scale factor for logarithmic rate effects");
    Dcoeft2                                 = VALUE(FLOAT,  " Scale factor for logarithmic rate effects");
    FUN_A2                                  = VALUE(FUNCT,  " Function identifier defining nonlinear stiffness");
    HFLAG2                                  = VALUE(INT,  " Hardening flag for nonlinear spring");
    FUN_B2                                  = VALUE(FUNCT,  " Function identifier defining force or moment as a function of spring velocity");
    FUN_C2                                  = VALUE(FUNCT,  " Function identifier");
    FUN_D2                                  = VALUE(FUNCT,  " Function identifier for nonlinear damping");
    MIN_RUP2                                = VALUE(FLOAT,  " Negative translation Failure Limit");
    MAX_RUP2                                = VALUE(FLOAT,  " Positive translation Failure Limit");
    Prop_Y_F                                = VALUE(FLOAT,  " Abscissa scale factor for the damping functions for the g and h");
    Prop_Y_E                                = VALUE(FLOAT,  " Ordinate scale factor for the damping function g");
    scale2                                  = VALUE(FLOAT,  " Abscissa scale factor for the stiffness function f");
    Prop_Y_H                                = VALUE(FLOAT,  " Ordinate Scale factor for the damping function h");
    FUN_K2                                  = VALUE(FUNCT,  " Function identifier for nonlinear stifness scale");
    
    //Shear (xz)
    STIFF3                                  = VALUE(FLOAT,  " Stiffness for shear  XZ");
    DAMP3                                   = VALUE(FLOAT,  " Damping for Shear XZ");
    Acoeft3                                 = VALUE(FLOAT,  " Nonlinear stiffness function scale factor");
    Bcoeft3                                 = VALUE(FLOAT,  " Scale factor for logarithmic rate effects");
    Dcoeft3                                 = VALUE(FLOAT,  " Scale factor for logarithmic rate effects");
    FUN_A3                                  = VALUE(FUNCT,  " Function identifier defining nonlinear stiffness");
    HFLAG3                                  = VALUE(INT,  " Hardening flag for nonlinear spring");
    FUN_B3                                  = VALUE(FUNCT,  " Function identifier defining force or moment as a function of spring velocity");
    FUN_C3                                  = VALUE(FUNCT,  " Function identifier");
    FUN_D3                                  = VALUE(FUNCT,  " Function identifier for nonlinear damping");
    MIN_RUP3                                = VALUE(FLOAT,  " Negative translation Failure Limit");
    MAX_RUP3                                = VALUE(FLOAT,  " Positive translation Failure Limit");
    Prop_Z_F                                = VALUE(FLOAT,  " Abscissa scale factor for the damping functions for the g and h");
    Prop_Z_E                                = VALUE(FLOAT,  " Ordinate scale factor for the damping function g");
    scale3                                  = VALUE(FLOAT,  " Abscissa scale factor for the stiffness function f");
    Prop_Z_H                                = VALUE(FLOAT,  " Ordinate Scale factor for the damping function h");
    FUN_K3                                  = VALUE(FUNCT,  " Function identifier for nonlinear stifness scale");
    
    //Torsion (x)
    STIFF4                                  = VALUE(FLOAT,  " Stiffness for Torsion");
    DAMP4                                   = VALUE(FLOAT,  " Damping for Torsion");
    Acoeft4                                 = VALUE(FLOAT,  " Nonlinear stiffness function scale factor");
    Bcoeft4                                 = VALUE(FLOAT,  " Scale factor for logarithmic rate effects");
    Dcoeft4                                 = VALUE(FLOAT,  " Scale factor for logarithmic rate effects");
    FUN_A4                                  = VALUE(FUNCT,  " Function identifier defining nonlinear stiffness");
    HFLAG4                                  = VALUE(INT,  " Hardening flag for nonlinear spring");
    FUN_B4                                  = VALUE(FUNCT,  " Function identifier defining force or moment as a function of spring velocity");
    FUN_C4                                  = VALUE(FUNCT,  " Function identifier");
    FUN_D4                                  = VALUE(FUNCT,  " Function identifier for nonlinear damping");
    MIN_RUP4                                = VALUE(FLOAT,  " Negative rotational Failure Limit");
    MAX_RUP4                                = VALUE(FLOAT,  " Positive rotational Failure Limit");
    Prop_Tor_F                              = VALUE(FLOAT,  " Abscissa scale factor for the damping functions for the g and h");
    Prop_Tor_E                              = VALUE(FLOAT,  " Ordinate scale factor for the damping function g");
    scale4                                  = VALUE(FLOAT,  " Abscissa scale factor for the stiffness function f");
    Prop_Tor_H                              = VALUE(FLOAT,  " Ordinate Scale factor for the damping function h");
    FUN_K4                                  = VALUE(FUNCT,  " Function identifier for nonlinear stifness scale");
    
    //Bending (y)
    STIFF5                                  = VALUE(FLOAT,  " Stiffness for bending Y");
    DAMP5                                   = VALUE(FLOAT,  " Damping for bending Y");
    Acoeft5                                 = VALUE(FLOAT,  " Nonlinear stiffness function scale factor");
    Bcoeft5                                 = VALUE(FLOAT,  " Scale factor for logarithmic rate effects");
    Dcoeft5                                 = VALUE(FLOAT,  " Scale factor for logarithmic rate effects");
    FUN_A5                                  = VALUE(FUNCT,  " Function identifier defining nonlinear stiffness");
    HFLAG5                                  = VALUE(INT,  " Hardening flag for nonlinear spring");
    FUN_B5                                  = VALUE(FUNCT,  " Function identifier defining force or moment as a function of spring velocity");
    FUN_C5                                  = VALUE(FUNCT,  " Function identifier");
    FUN_D5                                  = VALUE(FUNCT,  " Function identifier for nonlinear damping");
    MIN_RUP5                                = VALUE(FLOAT,  " Negative rotational Failure Limit");
    MAX_RUP5                                = VALUE(FLOAT,  " Positive rotational Failure Limit");
    Prop_FlxY_F                             = VALUE(FLOAT,  " Abscissa scale factor for the damping functions for the g and h");
    Prop_FlxY_E                             = VALUE(FLOAT,  " Ordinate scale factor for the damping function g");
    scale5                                  = VALUE(FLOAT,  " Abscissa scale factor for the stiffness function f");
    Prop_FlxY_H                             = VALUE(FLOAT,  " Ordinate Scale factor for the damping function h"); 
    FUN_K5                                  = VALUE(FUNCT,  " Function identifier for nonlinear stifness scale"); 
   
   //Bending (z)
    STIFF6                                  = VALUE(FLOAT,  " Stiffness for bending Z");
    DAMP6                                   = VALUE(FLOAT,  " Damping for bending Z");
    Acoeft6                                 = VALUE(FLOAT,  " Nonlinear stiffness function scale factor");
    Bcoeft6                                 = VALUE(FLOAT,  " Scale factor for logarithmic rate effects");
    Dcoeft6                                 = VALUE(FLOAT,  " Scale factor for logarithmic rate effects");
    FUN_A6                                  = VALUE(FUNCT,  " Function identifier defining nonlinear stiffness");
    HFLAG6                                  = VALUE(INT,    " Hardening flag for nonlinear spring");
    FUN_B6                                  = VALUE(FUNCT,  " Function identifier defining force or moment as a function of spring velocity");
    FUN_C6                                  = VALUE(FUNCT,  " Function identifier");
    FUN_D6                                  = VALUE(FUNCT,  " Function identifier defining h(Theta) in bending Z");
    MIN_RUP6                                = VALUE(FLOAT,  " Negative rotational Failure Limit");
    MAX_RUP6                                = VALUE(FLOAT,  " Positive rotational Failure Limit");
    Prop_FlxZ_F                             = VALUE(FLOAT,  " Abscissa scale factor for the damping functions for the g and h");
    Prop_FlxZ_E                             = VALUE(FLOAT,  " Ordinate scale factor for the damping function g");
    scale6                                  = VALUE(FLOAT,  " Abscissa scale factor for the stiffness function f");
    Prop_FlxZ_H                             = VALUE(FLOAT,  " Ordinate Scale factor for the damping function h"); 
    FUN_K6                                  = VALUE(FUNCT,  " Function identifier for nonlinear stifness scale"); 
   
   //Velocity Dependent Failure Parameters
    TRANS_VEL0                              = VALUE(FLOAT,  " Reference Translational Velocity");
    ROT_VEL0                                = VALUE(FLOAT,  " Reference rotational velocity");
    Asrate                                  = VALUE(FLOAT,  " Strain Rate Cutting Frequency");
    ISRATE                                  = VALUE(INT,    " Smooth strain rate flag");
    //Tx
    C1                                      = VALUE(FLOAT,  " Relative velocity coefficient in translation X");
    REL_VEL_EXP1                            = VALUE(FLOAT,  " Relative velocity exponent in translation X");
    ALPHA1                                  = VALUE(FLOAT,  " failure scale factor in translation X");
    BETA1                                   = VALUE(FLOAT,  " Exponent in translation X");
    //Ty
    C2                                      = VALUE(FLOAT,  " Relative velocity coefficient in shear XY");
    REL_VEL_EXP2                            = VALUE(FLOAT,  " Relative velocity exponent in shear XY");
    ALPHA2                                  = VALUE(FLOAT,  " failure scale factor in shear XY");
    BETA2                                   = VALUE(FLOAT,  " Exponent in shear XY");
    //Tz
    C3                                      = VALUE(FLOAT,  " Relative velocity coefficient in shear XZ");
    REL_VEL_EXP3                            = VALUE(FLOAT,  " Relative velocity exponent in shear XZ");
    ALPHA3                                  = VALUE(FLOAT,  " failure scale factor in shear XZ");
    BETA3                                   = VALUE(FLOAT,  " Exponent in shear XZ");
    //Rx
    C4                                      = VALUE(FLOAT,  " Relative velocity coefficient in torsion X");
    REL_VEL_EXP4                            = VALUE(FLOAT,  " Relative velocity exponent in torsion X");
    ALPHA4                                  = VALUE(FLOAT,  " failure scale factor in torsion X");
    BETA4                                   = VALUE(FLOAT,  " Exponent in torsion X");
    //Ry
    C5                                      = VALUE(FLOAT,  " Relative velocity coefficient in bending Y");
    REL_VEL_EXP5                            = VALUE(FLOAT,  " Relative velocity exponent in bending Y");
    ALPHA5                                  = VALUE(FLOAT,  " failure scale factor in bending Y");
    BETA5                                   = VALUE(FLOAT,  " Exponent in bending Y");
    //Rz
    C6                                      = VALUE(FLOAT,  " Relative velocity coefficient in bending Z");
    REL_VEL_EXP6                            = VALUE(FLOAT,  " Relative velocity exponent in bending Z");
    ALPHA6                                  = VALUE(FLOAT,  " failure scale factor in bending Z");
    BETA6                                   = VALUE(FLOAT,  " Exponent in bending Z");  
    
    
    //Attributes for HM usage
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,  "User Comments"); 
    Mat_Name_OR_LawNo                       = VALUE(INT, "");
    IO_FLAG                                 = VALUE(INT, "");
    TYPE_NO                                 = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    NUM_COMMENTS                            = 5110;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951; 
    
    MAT_RHO                                 = 118;
    ALPHA1                                  = 6145;
    ALPHA2                                  = 6146;
    ALPHA3                                  = 6147;
    ALPHA4                                  = 6148;
    ALPHA5                                  = 6149;
    ALPHA6                                  = 6150;
    Acoeft1                                 = 5160;
    Acoeft2                                 = 5180;
    Acoeft3                                 = 5188;
    Acoeft4                                 = 5196;
    Acoeft5                                 = 5204;
    Acoeft6                                 = 5212;
    Asrate                                  = 4534;
    BETA1                                   = 6151;
    BETA2                                   = 6152;
    BETA3                                   = 6153;
    BETA4                                   = 6154;
    BETA5                                   = 6155;
    BETA6                                   = 6156;
    Bcoeft1                                 = 5161;
    Bcoeft2                                 = 5181;
    Bcoeft3                                 = 5189;
    Bcoeft4                                 = 5197;
    Bcoeft5                                 = 5205;
    Bcoeft6                                 = 5213;
    C1                                      = 6306;
    C2                                      = 6307;
    C3                                      = 6308;
    C4                                      = 6309;
    C5                                      = 6310;
    C6                                      = 6311;
    DAMP1                                   =  254;
    DAMP2                                   = 5179;
    DAMP3                                   = 5187;
    DAMP4                                   = 5195;
    DAMP5                                   = 5203;
    DAMP6                                   = 5211;
    Dcoeft1                                 = 5162;
    Dcoeft2                                 = 5182;
    Dcoeft3                                 = 5190;
    Dcoeft4                                 = 5198;
    Dcoeft5                                 = 5206;
    Dcoeft6                                 = 5214;
    FUN_A1                                  =   45;
    FUN_A2                                  =  170;
    FUN_A3                                  =  172;
    FUN_A4                                  =  200;
    FUN_A5                                  = 1141;
    FUN_A6                                  = 1175;
    FUN_B1                                  =  168;
    FUN_B2                                  =  171;
    FUN_B3                                  =  199;
    FUN_B4                                  =  224;
    FUN_B5                                  = 1142;
    FUN_B6                                  = 1176;
    FUN_C1                                  = 1189;
    FUN_C2                                  = 1167;
    FUN_C3                                  = 5347;
    FUN_C4                                  = 5348;
    FUN_C5                                  = 5349;
    FUN_C6                                  = 5350;
    HFLAG1                                  = 5163;
    HFLAG2                                  = 5183;
    HFLAG3                                  = 5191;
    HFLAG4                                  = 5199;
    HFLAG5                                  = 5207;
    HFLAG6                                  = 5215;
    Ifail                                   = 8032;
    Ifail2                                  = 1000;
    Ileng                                   =  999;
    MAX_RUP1                                = 5165;
    MAX_RUP2                                = 5185;
    MAX_RUP3                                = 5193;
    MAX_RUP4                                = 5201;
    MAX_RUP5                                = 5209;
    MAX_RUP6                                = 5217;
    MIN_RUP1                                = 5164;
    MIN_RUP2                                = 5184;
    MIN_RUP3                                = 5192;
    MIN_RUP4                                = 5200;
    MIN_RUP5                                = 5208;
    MIN_RUP6                                = 5216;
    Prop_FlxY_E                             = 4146;
    Prop_FlxY_F                             = 4145;
    Prop_FlxZ_E                             = 4148;
    Prop_FlxZ_F                             = 4147;
    Prop_Tor_E                              = 4144;
    Prop_Tor_F                              = 4143;
    Prop_X_E                                = 4138;
    Prop_X_F                                = 4137;
    Prop_Y_E                                = 4140;
    Prop_Y_F                                = 4139;
    Prop_Z_E                                = 4142;
    Prop_Z_F                                = 4141;
    REL_VEL_EXP1                            = 6139;
    REL_VEL_EXP2                            = 6140;
    REL_VEL_EXP3                            = 6141;
    REL_VEL_EXP4                            = 6142;
    REL_VEL_EXP5                            = 6143;
    REL_VEL_EXP6                            = 6144;
    ROT_VEL0                                = 6138;
    //SKEW_CSID                               =  412;
    STIFF1                                  = 1131;
    STIFF2                                  = 5178;
    STIFF3                                  = 5186;
    STIFF4                                  = 5194;
    STIFF5                                  = 5202;
    STIFF6                                  = 5210;
    TRANS_VEL0                              = 6137;
    scale1                                  = 4528;
    scale2                                  = 4529;
    scale3                                  = 4530;
    scale4                                  = 4531;
    scale5                                  = 4532;
    scale6                                  = 4533;
    FUN_D1                                  = 8035;
    FUN_D2                                  = 8036;
    FUN_D3                                  = 8037;
    FUN_D4                                  = 8038;
    FUN_D5                                  = 8039;
    FUN_D6                                  = 8040;
    Prop_FlxY_H                             =  784;
    Prop_FlxZ_H                             =  785;
    Prop_Tor_H                              =  783;
    Prop_X_H                                =  780;
    Prop_Y_H                                =  781;
    Prop_Z_H                                =  782;    
    ISRATE                                  = 4231;
    Mat_Name_OR_LawNo                       = 4538;
    TITLE                                   =   -1;
    IO_FLAG                                 =   -1;
    TYPE_NO                                 =   -1;
}

CHECK(COMMON)
{
    MIN_RUP1                            <= 0.0;
    MIN_RUP2                            <= 0.0;
    MIN_RUP3                            <= 0.0;
    MIN_RUP4                            <= 0.0;
    MIN_RUP5                            <= 0.0;
    MIN_RUP6                            <= 0.0;
}

DEFAULTS(COMMON)
{
    ALPHA1                              =     1.0;
    ALPHA2                              =     1.0;
    ALPHA3                              =     1.0;
    ALPHA4                              =     1.0;
    ALPHA5                              =     1.0;
    ALPHA6                              =     1.0;
    Acoeft1                             =     1.0;
    Acoeft2                             =     1.0;
    Acoeft3                             =     1.0;
    Acoeft4                             =     1.0;
    Acoeft5                             =     1.0;
    Acoeft6                             =     1.0;
    Asrate                              =  1.0e30;  
    BETA1                               =     2.0;
    BETA2                               =     2.0;
    BETA3                               =     2.0;
    BETA4                               =     2.0;
    BETA5                               =     2.0;
    BETA6                               =     2.0;
    C1                                  =     0.0;
    C2                                  =     0.0;
    C3                                  =     0.0;
    C4                                  =     0.0;
    C5                                  =     0.0;
    C6                                  =     0.0;
    Dcoeft1                             =     1.0;
    Dcoeft2                             =     1.0;
    Dcoeft3                             =     1.0;
    Dcoeft4                             =     1.0;
    Dcoeft5                             =     1.0;
    Dcoeft6                             =     1.0;
    Ifail2                              =       0;
    ISRATE                             =        0;
    MAX_RUP1                            =  1.0e30;
    MAX_RUP2                            =  1.0e30;
    MAX_RUP3                            =  1.0e30;
    MAX_RUP4                            =  1.0e30;
    MAX_RUP5                            =  1.0e30;
    MAX_RUP6                            =  1.0e30;
    MIN_RUP1                            = -1.0e30;
    MIN_RUP2                            = -1.0e30;
    MIN_RUP3                            = -1.0e30;
    MIN_RUP4                            = -1.0e30;
    MIN_RUP5                            = -1.0e30;
    MIN_RUP6                            = -1.0e30;
    REL_VEL_EXP1                        =     0.0;
    REL_VEL_EXP2                        =     0.0;
    REL_VEL_EXP3                        =     0.0;
    REL_VEL_EXP4                        =     0.0;
    REL_VEL_EXP5                        =     0.0;
    REL_VEL_EXP6                        =     0.0;
    ROT_VEL0                            =     1.0;
    TRANS_VEL0                          =     1.0;
    scale1                              =     1.0;
    scale2                              =     1.0;
    scale5                              =     1.0;
    Prop_FlxY_H                         =     1.0;
    Prop_FlxZ_H                         =     1.0;
    Prop_Tor_H                          =     1.0;
    Prop_X_H                            =     1.0;
    Prop_Y_H                            =     1.0;
    Prop_Z_H                            =     1.0;
    Mat_Name_OR_LawNo                   =       0;
}

GUI(COMMON)
{
 optional:
    RADIO(CommentEnumField)
    {
       ENUM_VALUE_FLAG=TRUE;
       ADD(1, "1:Hide in Menu/Export");
       ADD(2, "2:Show in Menu/Export");
       ADD(3, "3:Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Mat_Name_OR_LawNo == 2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW113/");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/SPR_BEAM/");
    }
// Solver attributes 
    mandatory:
        SCALAR(MAT_RHO)        {DIMENSION="density";}
    optional:
    RADIO(Ifail)
    {
       ADD(0, "0:Uni-Directional Criteria.");
       ADD(1, "1:Multi-Directional Criteria.");
    }
    RADIO(Ileng)
    {
       ADD(0, "0:Spring stiffness properties are input as explained in the definition table.");
       ADD(1, "1:Spring properties are a function of engineering strain.");
    }  
    RADIO(Ifail2)
    {
        ADD(0, "0:displacement and rotation criteria (Default)");
        ADD(1, "1:displacement and rotation criteria with velocity rate effect");
        ADD(2, "2:force and moment criteria");
        ADD(3, "3:internal energy criteria");
    }
    SEPARATOR("Tension(Tx)");
    SCALAR(STIFF1){ if(Ileng==0) { DIMENSION="translation_stiffness"; } else { DIMENSION="force";                } }
    SCALAR(DAMP1) { if(Ileng==0) { DIMENSION="massFlux";             } else { DIMENSION="QUANTITY OF MOVEMENT"; } }
    SCALAR(Acoeft1) { DIMENSION="force"; } 
    SCALAR(Bcoeft1) { DIMENSION="force"; } 
    SCALAR(Dcoeft1) { if(Ileng==0) { DIMENSION="velocity";                 } else { DIMENSION="f";            } }
    FUNCTION(FUN_A1) {
      if(Ileng==0) { X_TITLE="dl";     X_DIMENSION="l";        }
      else             { X_TITLE="Strain"; X_DIMENSION="DIMENSIONLESS"; }
      Y_TITLE="f"; Y_DIMENSION="force";
    }
    RADIO(HFLAG1)
    {
       ADD(0, "0: Elastic spring.");
       ADD(1, "1: Nonlinear elasto-plastic spring with isotropic hardening.");
       ADD(2, "2: Nonlinear elasto-plastic spring with uncoupled hardening.");
       ADD(4, "4: Nonlinear elastic plastic spring with kinematic hardening.");
       ADD(5, "5: Nonlinear elasto-plastic spring with nonlinear unloading.");
       ADD(6, "6: Nonlinear elasto-plastic spring with isotropic hardening and nonlinear unloading.");
       ADD(7, "7: Nonlinear elastic plastic spring with elastic hysteresis.");
    }
     FUNCTION(FUN_B1) {
      if(Ileng==0) { X_TITLE="dl/dt";       X_DIMENSION="velocity";     }
      else             { X_TITLE="Strain rate"; X_DIMENSION="f"; }
      Y_TITLE="g";     Y_DIMENSION="DIMENSIONLESS";
    }
    FUNCTION(FUN_C1) {
      if((HFLAG1==4) && (Ileng==0)) {
    X_TITLE="dl";                    X_DIMENSION="l";
    Y_TITLE="f3";                    Y_DIMENSION="force";
      } else if((HFLAG1==4) && (Ileng!=0)) {
    X_TITLE="Strain";                X_DIMENSION="DIMENSIONLESS";
    Y_TITLE="f3";                    Y_DIMENSION="force";
      } else if((HFLAG1==5) && (Ileng==0)) {
    X_TITLE="Maximum displacement";  X_DIMENSION="l";
    Y_TITLE="Residual displacement"; Y_DIMENSION="l";
      } else if((HFLAG1==5) && (Ileng!=0)) {
    X_TITLE="Maximum strain";        X_DIMENSION="DIMENSIONLESS";
    Y_TITLE="Residual strain";       Y_DIMENSION="DIMENSIONLESS";
      }
    }
    FUNCTION(FUN_D1)
    {
       X_DIMENSION="velocity";
       X_TITLE="dl/dt";
       Y_DIMENSION="force";
       Y_TITLE="h";
    }
    SCALAR(MIN_RUP1){
      if(Ileng==0 && Ifail2 < 2)        { TITLE="Negative failure displacement in transitional direction";  DIMENSION="l";        }
      else if (Ileng==1 && Ifail2 < 2) { TITLE="Negative rupture strain"; DIMENSION="DIMENSIONLESS"; }
      else if (Ifail2 == 2) { TITLE="Negative failure force in transitional direction"; DIMENSION="force"; }
      else if (Ifail2 == 3) { TITLE="Negative failure internal energy related to transitional direction"; DIMENSION="energy"; }
    }
    SCALAR(MAX_RUP1) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Positive failure displacement in transitional direction";  DIMENSION="l";        }
      else  if (Ileng==1 && Ifail2 < 2) { TITLE="Positive rupture strain"; DIMENSION="DIMENSIONLESS";  }
      else if (Ifail2 == 2)  { TITLE="Positive failure force in transitional direction"; DIMENSION="force"; }
      else if (Ifail2 == 3)   { TITLE="Positive failure internal energy related to transitional direction"; DIMENSION="energy"; }
    }
    SCALAR(Prop_X_F) { if(Ileng==0) { DIMENSION="velocity";                 } else { DIMENSION="f";            } }
    SCALAR(Prop_X_E) { DIMENSION="force"; }
    SCALAR(scale1) { if(Ileng==0) { DIMENSION="l";} else { DIMENSION="DIMENSIONLESS"; } }
    SCALAR(Prop_X_H) {DIMENSION="force";}
    SEPARATOR("");
    SEPARATOR("Shear(Ty)");
    SCALAR(STIFF2){ if(Ileng==0) { DIMENSION="translation_stiffness"; } else { DIMENSION="force";                } }
    SCALAR(DAMP2) { if(Ileng==0) { DIMENSION="massFlux";             } else { DIMENSION="QUANTITY OF MOVEMENT"; } }
    SCALAR(Acoeft2) { DIMENSION="force"; } 
    SCALAR(Bcoeft2) { DIMENSION="force"; } 
    SCALAR(Dcoeft2){ if(Ileng==0) { DIMENSION="velocity";                 } else { DIMENSION="f";            } }
    FUNCTION(FUN_A2) {
      if(Ileng==0) { X_TITLE="dl";     X_DIMENSION="l";        }
      else             { X_TITLE="Strain"; X_DIMENSION="DIMENSIONLESS"; }
      Y_TITLE="f"; Y_DIMENSION="force";
    }
    RADIO(HFLAG2)
    {
       ADD(0, "0: Nonlinear elastic spring.");
       ADD(1, "1: Nonlinear elastic plastic spring.");
       ADD(2, "2: Nonlinear elasto-plastic spring with decoupled hardening in tension and compression.");
       ADD(4, "4: Nonlinear elastic plastic spring kinematic hardening.");
       ADD(5, "5: Nonlinear elasto-plastic spring with nonlinear unloading.");
       ADD(6, "6: Nonlinear elasto-plastic spring with isotropic hardening and nonlinear unloading.");
       ADD(7, "7: Nonlinear spring with elastic Hysteresis.");
    }
     FUNCTION(FUN_B2) {
      if(Ileng==0) { X_TITLE="dl/dt";       X_DIMENSION="velocity";     }
      else             { X_TITLE="Strain rate"; X_DIMENSION="f"; }
      Y_TITLE="g";     Y_DIMENSION="DIMENSIONLESS";
    }
    FUNCTION(FUN_C2) {
      if((HFLAG2==4) && (Ileng==0)) {
    X_TITLE="dl";                    X_DIMENSION="l";
    Y_TITLE="f3";                    Y_DIMENSION="force";
      } else if((HFLAG2==4) && (Ileng!=0)) {
    X_TITLE="Strain";                X_DIMENSION="DIMENSIONLESS";
    Y_TITLE="f3";                    Y_DIMENSION="force";
      } else if((HFLAG2==5) && (Ileng==0)) {
    X_TITLE="Maximum displacement";  X_DIMENSION="l";
    Y_TITLE="Residual displacement"; Y_DIMENSION="l";
      } else if((HFLAG2==5) && (Ileng!=0)) {
    X_TITLE="Maximum strain";        X_DIMENSION="DIMENSIONLESS";
    Y_TITLE="Residual strain";       Y_DIMENSION="DIMENSIONLESS";
      }
    }
    FUNCTION(FUN_D2)
    {
       X_DIMENSION="velocity";
       X_TITLE="dl/dt";
       Y_DIMENSION="force";
       Y_TITLE="h";
    }
    SCALAR(MIN_RUP2){
      if(Ileng==0 && Ifail2 < 2)        { TITLE="Negative failure displacement in transitional direction";  DIMENSION="l";        }
      else if (Ileng==1 && Ifail2 < 2) { TITLE="Negative rupture strain"; DIMENSION="DIMENSIONLESS"; }
      else if (Ifail2 == 2) { TITLE="Negative failure force in transitional direction"; DIMENSION="force"; }
      else if (Ifail2 == 3) { TITLE="Negative failure internal energy related to transitional direction"; DIMENSION="energy"; }
    }
    SCALAR(MAX_RUP2) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Positive failure displacement in transitional direction";  DIMENSION="l";        }
      else if (Ileng==1 && Ifail2 < 2) { TITLE="Positive rupture strain"; DIMENSION="DIMENSIONLESS";  }
      else if (Ifail2 == 2)  { TITLE="Positive failure force in transitional direction"; DIMENSION="force"; }
      else if (Ifail2 == 3)   { TITLE="Positive failure internal energy related to transitional direction"; DIMENSION="energy"; }
    }
    SCALAR(Prop_Y_F) { if(Ileng==0) { DIMENSION="velocity";                 } else { DIMENSION="f";            } }
    SCALAR(Prop_Y_E) { DIMENSION="force"; }
    SCALAR(scale2) { if(Ileng==0) { DIMENSION="l";} else { DIMENSION="DIMENSIONLESS"; } }
    SCALAR(Prop_Y_H) {DIMENSION="force";}
    SEPARATOR("");
    SEPARATOR("Shear(Tz)");
    SCALAR(STIFF3){ if(Ileng==0) { DIMENSION="translation_stiffness"; } else { DIMENSION="force";                } }
    SCALAR(DAMP3) { if(Ileng==0) { DIMENSION="massFlux";             } else { DIMENSION="QUANTITY OF MOVEMENT"; } }
    SCALAR(Acoeft3) { DIMENSION="force"; } 
    SCALAR(Bcoeft3) { DIMENSION="force"; } 
    SCALAR(Dcoeft3){ if(Ileng==0) { DIMENSION="velocity";                 } else { DIMENSION="f";            } }
    FUNCTION(FUN_A3) {
      if(Ileng==0) { X_TITLE="dl";     X_DIMENSION="l";        }
      else             { X_TITLE="Strain"; X_DIMENSION="DIMENSIONLESS"; }
      Y_TITLE="f"; Y_DIMENSION="force";
    }
    RADIO(HFLAG3)
    {
       ADD(0, "0: Nonlinear elastic spring.");
       ADD(1, "1: Nonlinear elastic plastic spring.");
       ADD(2, "2: Nonlinear elasto-plastic spring with decoupled hardening in tension and compression.");
       ADD(4, "4: Nonlinear elastic plastic spring kinematic hardening.");
       ADD(5, "5: Nonlinear elasto-plastic spring with nonlinear unloading.");
       ADD(6, "6: Nonlinear elasto-plastic spring with isotropic hardening and nonlinear unloading.");
       ADD(7, "7: Nonlinear spring with elastic Hysteresis.");
    }
     FUNCTION(FUN_B3) {
      if(Ileng==0) { X_TITLE="dl/dt";       X_DIMENSION="velocity";     }
      else             { X_TITLE="Strain rate"; X_DIMENSION="f"; }
      Y_TITLE="g";     Y_DIMENSION="DIMENSIONLESS";
    }
    FUNCTION(FUN_C3) {
      if((HFLAG3==4) && (Ileng==0)) {
    X_TITLE="dl";                    X_DIMENSION="l";
    Y_TITLE="f3";                    Y_DIMENSION="force";
      } else if((HFLAG3==4) && (Ileng!=0)) {
    X_TITLE="Strain";                X_DIMENSION="DIMENSIONLESS";
    Y_TITLE="f3";                    Y_DIMENSION="force";
      } else if((HFLAG3==5) && (Ileng==0)) {
    X_TITLE="Maximum displacement";  X_DIMENSION="l";
    Y_TITLE="Residual displacement"; Y_DIMENSION="l";
      } else if((HFLAG3==5) && (Ileng!=0)) {
    X_TITLE="Maximum strain";        X_DIMENSION="DIMENSIONLESS";
    Y_TITLE="Residual strain";       Y_DIMENSION="DIMENSIONLESS";
      }
    }
    FUNCTION(FUN_D3)
    {
       X_DIMENSION="velocity";
       X_TITLE="dl/dt";
       Y_DIMENSION="force";
       Y_TITLE="h";
    }
    SCALAR(MIN_RUP3){
      if(Ileng==0 && Ifail2 < 2)        { TITLE="Negative failure displacement in transitional direction";  DIMENSION="l";        }
      else if (Ileng==1 && Ifail2 < 2) { TITLE="Negative rupture strain"; DIMENSION="DIMENSIONLESS"; }
      else if (Ifail2 == 2) { TITLE="Negative failure force in transitional direction"; DIMENSION="force"; }
      else if (Ifail2 == 3) { TITLE="Negative failure internal energy related to transitional direction"; DIMENSION="energy"; }
    }
    SCALAR(MAX_RUP3) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Positive failure displacement in transitional direction";  DIMENSION="l";        }
      else if (Ileng==1 && Ifail2 < 2) { TITLE="Positive rupture strain"; DIMENSION="DIMENSIONLESS";  }
      else if (Ifail2 == 2)  { TITLE="Positive failure force in transitional direction"; DIMENSION="force"; }
      else if (Ifail2 == 3)   { TITLE="Positive failure internal energy related to transitional direction"; DIMENSION="energy"; }
    }
    SCALAR(Prop_Z_F) { if(Ileng==0) { DIMENSION="velocity";                 } else { DIMENSION="f";            } }
    SCALAR(Prop_Z_E) { DIMENSION="force"; }
    SCALAR(scale3) { if(Ileng==0) { DIMENSION="l";} else { DIMENSION="DIMENSIONLESS"; } }
    SCALAR(Prop_Z_H) {DIMENSION="force";}
    SEPARATOR("");
    SEPARATOR("Torsion(Rx)");
    SCALAR(STIFF4){ if(Ileng==0) { DIMENSION="ROTATION STIFFNESS"; } else { DIMENSION="ROTATION STIFFNESS PER UNIT LENGTH"; }  }
    SCALAR(DAMP4){ if(Ileng==0) { DIMENSION="torsion_damping";    } else { DIMENSION="TORSION DAMPING PER UNIT LENGTH";    }  }
    SCALAR(Acoeft4) { DIMENSION="moment";}
    SCALAR(Bcoeft4) { DIMENSION="moment";}
    SCALAR(Dcoeft4) { if(Ileng==0) { DIMENSION="ang_velocity";      } else { DIMENSION="ANGULAR SPEED PER UNIT LENGTH";      }  }
    FUNCTION(FUN_A4,"f(r)") {
      if(Ileng==0) { X_TITLE="Angular disp.";          X_DIMENSION="a";                 }
      else             { X_TITLE="Angular disp. (lineic)"; X_DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      Y_TITLE="f"; Y_DIMENSION="moment";
    }
    RADIO(HFLAG4)
    {
       ADD(0, "0: Nonlinear elastic spring.");
       ADD(1, "1: Nonlinear elastic plastic spring.");
       ADD(2, "2: Nonlinear elasto-plastic spring with decoupled hardening in tension and compression.");
       ADD(4, "4: Nonlinear elastic plastic spring kinematic hardening.");
       ADD(5, "5: Nonlinear elasto-plastic spring with nonlinear unloading.");
       ADD(6, "6: Nonlinear elasto-plastic spring with isotropic hardening and nonlinear unloading.");
       ADD(7, "7: Nonlinear spring with elastic Hysteresis.");
    }
    FUNCTION(FUN_B4,"g(dr/dt)") {
      if(Ileng==0) { X_TITLE="Angular speed";          X_DIMENSION="ang_velocity"; } 
      else             { X_TITLE="Angular speed (lineic)"; X_DIMENSION="ANGULAR SPEED PER UNIT LENGTH"; }
      Y_TITLE="g";      Y_DIMENSION="DIMENSIONLESS";
    }
    FUNCTION(FUN_C4) {
      if((HFLAG4==4) && (Ileng==0)) {
    X_TITLE="Angular disp.";               X_DIMENSION="a";
    Y_TITLE="f3";                          Y_DIMENSION="moment";
      } else if((HFLAG4==4) && (Ileng!=0)) {
    X_TITLE="Angular disp. (lineic)";      X_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
    Y_TITLE="f3";                          Y_DIMENSION="moment";
      } else if((HFLAG4==5) && (Ileng==0)) {
    X_TITLE="Max. angular disp.";          X_DIMENSION="a";
    Y_TITLE="Res. angular disp.";          Y_DIMENSION="a";
      } else if((HFLAG4==5) && (Ileng!=0)) {
    X_TITLE="Max. angular disp. (lineic)"; X_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
    Y_TITLE="Res. angular disp. (lineic)"; Y_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
      }
    }
    FUNCTION(FUN_D4) {
        X_TITLE="Angular speed";          X_DIMENSION="ang_velocity"; 
    Y_TITLE="h";                          Y_DIMENSION="moment";
    }
    SCALAR(MIN_RUP4) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Negative failure displacement in rotational direction";  DIMENSION="a";        }
      else if (Ileng==1 && Ifail2 < 2) { TITLE="Negative rupture strain"; DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      else if (Ifail2 == 2)  { TITLE="Negative failure force in rotational direction"; DIMENSION="moment"; }
      else if (Ifail2 == 3)   { TITLE="Negative failure internal energy related to rotational"; DIMENSION="energy"; }
    }
    SCALAR(MAX_RUP4) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Positive failure displacement in rotational direction";  DIMENSION="a";        }
      else if (Ileng==1 && Ifail2 < 2) { TITLE="Positive rupture strain"; DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      else if (Ifail2 == 2)  { TITLE="Positive failure force in rotational direction"; DIMENSION="moment"; }
      else if (Ifail2 == 3)   { TITLE="Positive failure internal energy related to rotational direction"; DIMENSION="energy"; }
    }    
    SCALAR(Prop_Tor_F){ if(Ileng==0) { DIMENSION="ang_velocity"; } else { DIMENSION="ANGULAR SPEED PER UNIT LENGTH"; }  }
    SCALAR(Prop_Tor_E){ DIMENSION="moment"; } 
    SCALAR(scale4) { if(Ileng==0) { DIMENSION="a";} else { DIMENSION="PLANE ANGLE PER UNIT LENGTH"; } }
    SCALAR(Prop_Tor_H){DIMENSION="moment";}
    SEPARATOR("");
    SEPARATOR("Bending(Ry)");
    SCALAR(STIFF5){ if(Ileng==0) { DIMENSION="ROTATION STIFFNESS"; } else { DIMENSION="ROTATION STIFFNESS PER UNIT LENGTH"; }  }
    SCALAR(DAMP5){ if(Ileng==0) { DIMENSION="torsion_damping";    } else { DIMENSION="TORSION DAMPING PER UNIT LENGTH";    }  }
    SCALAR(Acoeft5){ DIMENSION="moment";}
    SCALAR(Bcoeft5){ DIMENSION="moment";}
    SCALAR(Dcoeft5) { if(Ileng==0) { DIMENSION="ang_velocity";      } else { DIMENSION="ANGULAR SPEED PER UNIT LENGTH";      }  }
    FUNCTION(FUN_A5,"f(r)") {
      if(Ileng==0) { X_TITLE="Angular disp.";          X_DIMENSION="a";                 }
      else             { X_TITLE="Angular disp. (lineic)"; X_DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      Y_TITLE="f"; Y_DIMENSION="moment";
    }
    RADIO(HFLAG5)
    {
       ADD(0, "0: Nonlinear elastic spring.");
       ADD(1, "1: Nonlinear elastic plastic spring.");
       ADD(2, "2: Nonlinear elasto-plastic spring with decoupled hardening in tension and compression.");
       ADD(4, "4: Nonlinear elastic plastic spring kinematic hardening.");
       ADD(5, "5: Nonlinear elasto-plastic spring with nonlinear unloading.");
       ADD(6, "6: Nonlinear elasto-plastic spring with isotropic hardening and nonlinear unloading.");
       ADD(7, "7: Nonlinear spring with elastic Hysteresis.");
    }
    FUNCTION(FUN_B5,"g(dr/dt)") {
      if(Ileng==0) { X_TITLE="Angular speed";          X_DIMENSION="ang_velocity"; } 
      else             { X_TITLE="Angular speed (lineic)"; X_DIMENSION="ANGULAR SPEED PER UNIT LENGTH"; }
      Y_TITLE="g";      Y_DIMENSION="DIMENSIONLESS";
    }
    FUNCTION(FUN_C5) {
      if((HFLAG5==4) && (Ileng==0)) {
    X_TITLE="Angular disp.";               X_DIMENSION="a";
    Y_TITLE="f3";                          Y_DIMENSION="moment";
      } else if((HFLAG5==4) && (Ileng!=0)) {
    X_TITLE="Angular disp. (lineic)";      X_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
    Y_TITLE="f3";                          Y_DIMENSION="moment";
      } else if((HFLAG5==5) && (Ileng==0)) {
    X_TITLE="Max. angular disp.";          X_DIMENSION="a";
    Y_TITLE="Res. angular disp.";          Y_DIMENSION="a";
      } else if((HFLAG5==5) && (Ileng!=0)) {
    X_TITLE="Max. angular disp. (lineic)"; X_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
    Y_TITLE="Res. angular disp. (lineic)"; Y_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
      }
    }
    FUNCTION(FUN_D5) {
        X_TITLE="Angular speed";          X_DIMENSION="ang_velocity"; 
    Y_TITLE="h";                          Y_DIMENSION="moment";
    }
    SCALAR(MIN_RUP5) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Negative failure displacement in rotational direction";  DIMENSION="a";        }
      else if (Ileng==1 && Ifail2 < 2) { TITLE="Negative rupture strain"; DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      else if (Ifail2 == 2)  { TITLE="Negative failure force in rotational direction"; DIMENSION="moment"; }
      else if (Ifail2 == 3)   { TITLE="Negative failure internal energy related to rotational"; DIMENSION="energy"; }
    }
    SCALAR(MAX_RUP5) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Positive failure displacement in rotational direction";  DIMENSION="a";        }
      else if (Ileng==1 && Ifail2 < 2) { TITLE="Positive rupture strain"; DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      else if (Ifail2 == 2)  { TITLE="Positive failure force in rotational direction"; DIMENSION="moment"; }
      else if (Ifail2 == 3)   { TITLE="Positive failure internal energy related to rotational direction"; DIMENSION="energy"; }
    }       
    SCALAR(Prop_FlxY_F){ if(Ileng==0) { DIMENSION="ang_velocity"; } else { DIMENSION="ANGULAR SPEED PER UNIT LENGTH"; }  }
    SCALAR(Prop_FlxY_E){ DIMENSION="moment"; } 
    SCALAR(scale5) { if(Ileng==0) { DIMENSION="a";} else { DIMENSION="PLANE ANGLE PER UNIT LENGTH"; } }
    SCALAR(Prop_FlxY_H){DIMENSION="moment";}
    SEPARATOR("");
    SEPARATOR("Bending(Rz)");
    SCALAR(STIFF6){ if(Ileng==0) { DIMENSION="ROTATION STIFFNESS"; } else { DIMENSION="ROTATION STIFFNESS PER UNIT LENGTH"; }  }
    SCALAR(DAMP6){ if(Ileng==0) { DIMENSION="torsion_damping";    } else { DIMENSION="TORSION DAMPING PER UNIT LENGTH";    }  }
    SCALAR(Acoeft6){ DIMENSION="moment";}
    SCALAR(Bcoeft6){ DIMENSION="moment";}
    SCALAR(Dcoeft6) { if(Ileng==0) { DIMENSION="ang_velocity";      } else { DIMENSION="ANGULAR SPEED PER UNIT LENGTH";      }  }
    FUNCTION(FUN_A6,"f(r)") {
      if(Ileng==0) { X_TITLE="Angular disp.";          X_DIMENSION="a";                 }
      else             { X_TITLE="Angular disp. (lineic)"; X_DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      Y_TITLE="f"; Y_DIMENSION="moment";
    }
    RADIO(HFLAG6)
    {
       ADD(0, "0: Nonlinear elastic spring.");
       ADD(1, "1: Nonlinear elastic plastic spring.");
       ADD(2, "2: Nonlinear elasto-plastic spring with decoupled hardening in tension and compression.");
       ADD(4, "4: Nonlinear elastic plastic spring kinematic hardening.");
       ADD(5, "5: Nonlinear elasto-plastic spring with nonlinear unloading.");
       ADD(6, "6: Nonlinear elasto-plastic spring with isotropic hardening and nonlinear unloading.");
       ADD(7, "7: Nonlinear spring with elastic Hysteresis.");
    }
    FUNCTION(FUN_B6,"g(dr/dt)") {
      if(Ileng==0) { X_TITLE="Angular speed";          X_DIMENSION="ang_velocity"; } 
      else             { X_TITLE="Angular speed (lineic)"; X_DIMENSION="ANGULAR SPEED PER UNIT LENGTH"; }
      Y_TITLE="g";      Y_DIMENSION="DIMENSIONLESS";
    }
    FUNCTION(FUN_C6) {
      if((HFLAG6==4) && (Ileng==0)) {
    X_TITLE="Angular disp.";               X_DIMENSION="a";
    Y_TITLE="f3";                          Y_DIMENSION="moment";
      } else if((HFLAG6==4) && (Ileng!=0)) {
    X_TITLE="Angular disp. (lineic)";      X_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
    Y_TITLE="f3";                          Y_DIMENSION="moment";
      } else if((HFLAG6==5) && (Ileng==0)) {
    X_TITLE="Max. angular disp.";          X_DIMENSION="a";
    Y_TITLE="Res. angular disp.";          Y_DIMENSION="a";
      } else if((HFLAG6==5) && (Ileng!=0)) {
    X_TITLE="Max. angular disp. (lineic)"; X_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
    Y_TITLE="Res. angular disp. (lineic)"; Y_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
      }
    }
    FUNCTION(FUN_D6) {
        X_TITLE="Angular speed";          X_DIMENSION="ang_velocity"; 
    Y_TITLE="h";                          Y_DIMENSION="moment";
    }
    SCALAR(MIN_RUP6) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Negative failure displacement in rotational direction";  DIMENSION="a";        }
      else if (Ileng==1 && Ifail2 < 2) { TITLE="Negative rupture strain"; DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      else if (Ifail2 == 2)  { TITLE="Negative failure force in rotational direction"; DIMENSION="moment"; }
      else if (Ifail2 == 3)   { TITLE="Negative failure internal energy related to rotational"; DIMENSION="energy"; }
    }
    SCALAR(MAX_RUP6) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Positive failure displacement in rotational direction";  DIMENSION="a";        }
      else if (Ileng==1 && Ifail2 < 2) { TITLE="Positive rupture strain"; DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      else if (Ifail2 == 2)  { TITLE="Positive failure force in rotational direction"; DIMENSION="moment"; }
      else if (Ifail2 == 3)   { TITLE="Positive failure internal energy related to rotational direction"; DIMENSION="energy"; }
    }       
    SCALAR(Prop_FlxZ_F){ if(Ileng==0) { DIMENSION="ang_velocity"; } else { DIMENSION="ANGULAR SPEED PER UNIT LENGTH"; }  }
    SCALAR(Prop_FlxZ_E){ DIMENSION="moment"; } 
    SCALAR(scale6) { if(Ileng==0) { DIMENSION="a";} else { DIMENSION="PLANE ANGLE PER UNIT LENGTH"; } }
    SCALAR(Prop_FlxZ_H){DIMENSION="moment";}
    SEPARATOR("");
    SEPARATOR("Velocity Dependent Failure Parameters");
    SCALAR(TRANS_VEL0)   { DIMENSION="velocity";                 }
    SCALAR(ROT_VEL0)     { DIMENSION="ang_velocity";         }
    SCALAR(Asrate) { DIMENSION="f";           } 
    RADIO(ISRATE)
    {
        ADD(0, "0: Strain rate smoothing is inactive");
        ADD(1, "1: Strain rate smoothing is active");
    }
    SEPARATOR("Tension(Tx)");    
    SCALAR(C1) {
      if(Ileng==0 && Ifail2 < 2)  { DIMENSION="l";        }
      else if(Ileng==1 && Ifail2 < 2)  { DIMENSION="DIMENSIONLESS";        }
      else if( Ifail2 == 2)  { DIMENSION="force";        }
      else if( Ifail2 == 3)  { DIMENSION="energy";        }
    }
    SCALAR(REL_VEL_EXP1);
    SCALAR(ALPHA1);
    SCALAR(BETA1);
    SEPARATOR("");
    SEPARATOR("Shear(Txy)");
    SCALAR(C2) {
      if(Ileng==0 && Ifail2 < 2)  { DIMENSION="l";        }
      else if(Ileng==1 && Ifail2 < 2)  { DIMENSION="DIMENSIONLESS";        }
      else if( Ifail2 == 2)  { DIMENSION="force";        }
      else if( Ifail2 == 3)  { DIMENSION="energy";        }
    }
    SCALAR(REL_VEL_EXP2);
    SCALAR(ALPHA2);
    SCALAR(BETA2);
    SEPARATOR("");
    SEPARATOR("Shear(Txz)");
    SCALAR(C3) {
      if(Ileng==0 && Ifail2 < 2)  { DIMENSION="l";        }
      else if(Ileng==1 && Ifail2 < 2)  { DIMENSION="DIMENSIONLESS";        }
      else if( Ifail2 == 2)  { DIMENSION="force";        }
      else if( Ifail2 == 3)  { DIMENSION="energy";        }
    }
    SCALAR(REL_VEL_EXP3);
    SCALAR(ALPHA3);
    SCALAR(BETA3);
    SEPARATOR("");
    SEPARATOR("Torsion(Rx)");
    SCALAR(C4) {
      if(Ileng==0 && Ifail2 < 2)  { DIMENSION="a";        }
      else if(Ileng==1 && Ifail2 < 2)  { DIMENSION="PLANE ANGLE PER UNIT LENGTH";        }
      else if( Ifail2 == 2)  { DIMENSION="moment";        }
      else if( Ifail2 == 3)  { DIMENSION="energy";        }
    } 
    SCALAR(REL_VEL_EXP4);
    SCALAR(ALPHA4);
    SCALAR(BETA4);
    SEPARATOR("");
    SEPARATOR("Bending(Ry)");
    SCALAR(C5)  {
      if(Ileng==0 && Ifail2 < 2)  { DIMENSION="a";        }
      else if(Ileng==1 && Ifail2 < 2)  { DIMENSION="PLANE ANGLE PER UNIT LENGTH";        }
      else if( Ifail2 == 2)  { DIMENSION="moment";        }
      else if( Ifail2 == 3)  { DIMENSION="energy";        }
    } 
    SCALAR(REL_VEL_EXP5);
    SCALAR(ALPHA5);
    SCALAR(BETA5);
    SEPARATOR("");
    SEPARATOR("Bending(Rz)");
    SCALAR(C6)  {
      if(Ileng==0 && Ifail2 < 2)  { DIMENSION="a";        }
      else if(Ileng==1 && Ifail2 < 2)  { DIMENSION="PLANE ANGLE PER UNIT LENGTH";        }
      else if( Ifail2 == 2)  { DIMENSION="moment";        }
      else if( Ifail2 == 3)  { DIMENSION="energy";        }
    } 
    SCALAR(REL_VEL_EXP6);
    SCALAR(ALPHA6);
    SCALAR(BETA6);
    SEPARATOR("");
    SEPARATOR("");
}
//File format for Radioss 2023
FORMAT(radioss2023)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",TYPE_NO);
        if(TYPE_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW113/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/SPR_BEAM/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    COMMENT("#              RHO_I");
    CARD("%20lg", MAT_RHO);
    COMMENT("#    Ifail     Ileng    Ifail2");
    CARD("%10d%10d%10d",Ifail,Ileng,Ifail2);  
    //Tx
    COMMENT("#                 K1                  C1                  A1                  B1                  D1");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF1,DAMP1,Acoeft1,Bcoeft1,Dcoeft1);
    COMMENT("# fct_ID11        H1  fct_ID21  fct_ID31  fct_ID41  fct_ID51           DeltaMin1           DeltaMax1");
    CARD("%10d%10d%10d%10d%10d%10d%20lg%20lg",FUN_A1,HFLAG1,FUN_B1,FUN_C1,FUN_D1,FUN_K1,MIN_RUP1,MAX_RUP1);
    COMMENT("#                 F1                  E1             Ascale1             Hscale1");
    CARD("%20lg%20lg%20lg%20lg",Prop_X_F,Prop_X_E,scale1,Prop_X_H);
    //Ty
    COMMENT("#                 K2                  C2                  A2                  B2                  D2");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF2,DAMP2,Acoeft2,Bcoeft2,Dcoeft2);
    COMMENT("# fct_ID12        H2  fct_ID22  fct_ID32  fct_ID42  fct_ID52           DeltaMin2           DeltaMax2");
    CARD("%10d%10d%10d%10d%10d%10d%20lg%20lg",FUN_A2,HFLAG2,FUN_B2,FUN_C2,FUN_D2,FUN_K2,MIN_RUP2,MAX_RUP2);
    COMMENT("#                 F2                  E2             Ascale2             Hscale2");
    CARD("%20lg%20lg%20lg%20lg",Prop_Y_F,Prop_Y_E,scale2,Prop_Y_H); 
    //Tz
    COMMENT("#                 K3                  C3                  A3                  B3                  D3");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF3,DAMP3,Acoeft3,Bcoeft3,Dcoeft3);
    COMMENT("# fct_ID13        H3  fct_ID23  fct_ID33  fct_ID43  fct_ID53           DeltaMin3           DeltaMax3");
    CARD("%10d%10d%10d%10d%10d%10d%20lg%20lg",FUN_A3,HFLAG3,FUN_B3,FUN_C3,FUN_D3,FUN_K3,MIN_RUP3,MAX_RUP3);
    COMMENT("#                 F3                  E3             Ascale3             Hscale3");
    CARD("%20lg%20lg%20lg%20lg",Prop_Z_F,Prop_Z_E,scale3,Prop_Z_H);
    //Rx
    COMMENT("#                 K4                  C4                  A4                  B4                  D4");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF4,DAMP4,Acoeft4,Bcoeft4,Dcoeft4);
    COMMENT("# fct_ID14        H4  fct_ID24  fct_ID34  fct_ID44  fct_ID54           ThetaMin4           ThetaMax4");
    CARD("%10d%10d%10d%10d%10d%10d%20lg%20lg",FUN_A4,HFLAG4,FUN_B4,FUN_C4,FUN_D4,FUN_K4,MIN_RUP4,MAX_RUP4);
    COMMENT("#                 F4                  E4             Ascale4             Hscale4");
    CARD("%20lg%20lg%20lg%20lg",Prop_Tor_F,Prop_Tor_E,scale4,Prop_Tor_H);
    //Ry
    COMMENT("#                 K5                  C5                  A5                  B5                  D5");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF5,DAMP5,Acoeft5,Bcoeft5,Dcoeft5);
    COMMENT("# fct_ID15        H5  fct_ID25  fct_ID35  fct_ID45  fct_ID55           ThetaMin5           ThetaMax5");
    CARD("%10d%10d%10d%10d%10d%10d%20lg%20lg",FUN_A5,HFLAG5,FUN_B5,FUN_C5,FUN_D5,FUN_K5,MIN_RUP5,MAX_RUP5);
    COMMENT("#                 F5                  E5             Ascale5             Hscale5");
    CARD("%20lg%20lg%20lg%20lg",Prop_FlxY_F,Prop_FlxY_E,scale5,Prop_FlxY_H);
    //Rz
    COMMENT("#                 K6                  C6                  A6                  B6                  D6");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF6,DAMP6,Acoeft6,Bcoeft6,Dcoeft6);
    COMMENT("# fct_ID16        H6  fct_ID26  fct_ID36  fct_ID46  fct_ID56           ThetaMin6           ThetaMax6");
    CARD("%10d%10d%10d%10d%10d%10d%20lg%20lg",FUN_A6,HFLAG6,FUN_B6,FUN_C6,FUN_D6,FUN_K6,MIN_RUP6,MAX_RUP6);
    COMMENT("#                 F6                  E6             Ascale6             Hscale6");
    CARD("%20lg%20lg%20lg%20lg",Prop_FlxZ_F,Prop_FlxZ_E,scale6,Prop_FlxZ_H);
    COMMENT("#                 Vo                  Wo                Fcut   Fsmooth");
    CARD("%20lg%20lg%20lg%10d",TRANS_VEL0,ROT_VEL0,Asrate,ISRATE);
    //Tx
    COMMENT("#                 c1                  n1              alpha1               beta1");
    CARD("%20lg%20lg%20lg%20lg",C1,REL_VEL_EXP1,ALPHA1,BETA1);
    //Ty
    COMMENT("#                 c2                  n2              alpha2               beta2");
    CARD("%20lg%20lg%20lg%20lg",C2,REL_VEL_EXP2,ALPHA2,BETA2);
    //Tz
    COMMENT("#                 c3                  n3              alpha3               beta3");
    CARD("%20lg%20lg%20lg%20lg",C3,REL_VEL_EXP3,ALPHA3,BETA3);
    //Rx
    COMMENT("#                 c4                  n4              alpha4               beta4");
    CARD("%20lg%20lg%20lg%20lg",C4,REL_VEL_EXP4,ALPHA4,BETA4);
    //Ry
    COMMENT("#                 c5                  n5              alpha5               beta5");
    CARD("%20lg%20lg%20lg%20lg",C5,REL_VEL_EXP5,ALPHA5,BETA5);
    //Rz
    COMMENT("#                 c6                  n6              alpha6               beta6");
    CARD("%20lg%20lg%20lg%20lg",C6,REL_VEL_EXP6,ALPHA6,BETA6);
}
//File format for Radioss 2018
FORMAT(radioss2020)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",TYPE_NO);
        if(TYPE_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW113/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/SPR_BEAM/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    COMMENT("#              RHO_I");
    CARD("%20lg", MAT_RHO);
    COMMENT("#    Ifail     Ileng    Ifail2");
    CARD("%10d%10d%10d",Ifail,Ileng,Ifail2);  
    //Tx
    COMMENT("#                 K1                  C1                  A1                  B1                  D1");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF1,DAMP1,Acoeft1,Bcoeft1,Dcoeft1);
    COMMENT("# fct_ID11        H1  fct_ID21  fct_ID31  fct_ID41                     DeltaMin1           DeltaMax1");
    CARD("%10d%10d%10d%10d%10d          %20lg%20lg",FUN_A1,HFLAG1,FUN_B1,FUN_C1,FUN_D1,MIN_RUP1,MAX_RUP1);
    COMMENT("#                 F1                  E1             Ascale1             Hscale1");
    CARD("%20lg%20lg%20lg%20lg",Prop_X_F,Prop_X_E,scale1,Prop_X_H);
    //Ty
    COMMENT("#                 K2                  C2                  A2                  B2                  D2");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF2,DAMP2,Acoeft2,Bcoeft2,Dcoeft2);
    COMMENT("# fct_ID12        H2  fct_ID22  fct_ID32  fct_ID42                     DeltaMin2           DeltaMax2");
    CARD("%10d%10d%10d%10d%10d          %20lg%20lg",FUN_A2,HFLAG2,FUN_B2,FUN_C2,FUN_D2,MIN_RUP2,MAX_RUP2);
    COMMENT("#                 F2                  E2             Ascale2             Hscale2");
    CARD("%20lg%20lg%20lg%20lg",Prop_Y_F,Prop_Y_E,scale2,Prop_Y_H); 
    //Tz
    COMMENT("#                 K3                  C3                  A3                  B3                  D3");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF3,DAMP3,Acoeft3,Bcoeft3,Dcoeft3);
    COMMENT("# fct_ID13        H3  fct_ID23  fct_ID33  fct_ID43                     DeltaMin3           DeltaMax3");
    CARD("%10d%10d%10d%10d%10d          %20lg%20lg",FUN_A3,HFLAG3,FUN_B3,FUN_C3,FUN_D3,MIN_RUP3,MAX_RUP3);
    COMMENT("#                 F3                  E3             Ascale3             Hscale3");
    CARD("%20lg%20lg%20lg%20lg",Prop_Z_F,Prop_Z_E,scale3,Prop_Z_H);
    //Rx
    COMMENT("#                 K4                  C4                  A4                  B4                  D4");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF4,DAMP4,Acoeft4,Bcoeft4,Dcoeft4);
    COMMENT("# fct_ID14        H4  fct_ID24  fct_ID34  fct_ID44                     ThetaMin4           ThetaMax4");
    CARD("%10d%10d%10d%10d%10d          %20lg%20lg",FUN_A4,HFLAG4,FUN_B4,FUN_C4,FUN_D4,MIN_RUP4,MAX_RUP4);
    COMMENT("#                 F4                  E4             Ascale4             Hscale4");
    CARD("%20lg%20lg%20lg%20lg",Prop_Tor_F,Prop_Tor_E,scale4,Prop_Tor_H);
    //Ry
    COMMENT("#                 K5                  C5                  A5                  B5                  D5");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF5,DAMP5,Acoeft5,Bcoeft5,Dcoeft5);
    COMMENT("# fct_ID15        H5  fct_ID25  fct_ID35  fct_ID45                     ThetaMin5           ThetaMax5");
    CARD("%10d%10d%10d%10d%10d          %20lg%20lg",FUN_A5,HFLAG5,FUN_B5,FUN_C5,FUN_D5,MIN_RUP5,MAX_RUP5);
    COMMENT("#                 F5                  E5             Ascale5             Hscale5");
    CARD("%20lg%20lg%20lg%20lg",Prop_FlxY_F,Prop_FlxY_E,scale5,Prop_FlxY_H);
    //Rz
    COMMENT("#                 K6                  C6                  A6                  B6                  D6");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF6,DAMP6,Acoeft6,Bcoeft6,Dcoeft6);
    COMMENT("# fct_ID16        H6  fct_ID26  fct_ID36  fct_ID46                     ThetaMin6           ThetaMax6");
    CARD("%10d%10d%10d%10d%10d          %20lg%20lg",FUN_A6,HFLAG6,FUN_B6,FUN_C6,FUN_D6,MIN_RUP6,MAX_RUP6);
    COMMENT("#                 F6                  E6             Ascale6             Hscale6");
    CARD("%20lg%20lg%20lg%20lg",Prop_FlxZ_F,Prop_FlxZ_E,scale6,Prop_FlxZ_H);
    COMMENT("#                 Vo                  Wo                Fcut   Fsmooth");
    CARD("%20lg%20lg%20lg%10d",TRANS_VEL0,ROT_VEL0,Asrate,ISRATE);
    //Tx
    COMMENT("#                 c1                  n1              alpha1               beta1");
    CARD("%20lg%20lg%20lg%20lg",C1,REL_VEL_EXP1,ALPHA1,BETA1);
    //Ty
    COMMENT("#                 c2                  n2              alpha2               beta2");
    CARD("%20lg%20lg%20lg%20lg",C2,REL_VEL_EXP2,ALPHA2,BETA2);
    //Tz
    COMMENT("#                 c3                  n3              alpha3               beta3");
    CARD("%20lg%20lg%20lg%20lg",C3,REL_VEL_EXP3,ALPHA3,BETA3);
    //Rx
    COMMENT("#                 c4                  n4              alpha4               beta4");
    CARD("%20lg%20lg%20lg%20lg",C4,REL_VEL_EXP4,ALPHA4,BETA4);
    //Ry
    COMMENT("#                 c5                  n5              alpha5               beta5");
    CARD("%20lg%20lg%20lg%20lg",C5,REL_VEL_EXP5,ALPHA5,BETA5);
    //Rz
    COMMENT("#                 c6                  n6              alpha6               beta6");
    CARD("%20lg%20lg%20lg%20lg",C6,REL_VEL_EXP6,ALPHA6,BETA6);
}
