//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 2 (PLAS_JOHNS) Setup File
// 

ATTRIBUTES(COMMON) {
    // Support
    //NB_PARTS                  = SIZE("Number of Connected Parts"); 
    //COMPONENT                 = ARRAY[NB_PARTS](COMPONENT,"Connected Parts");
    NUM_COMMENTS                = SIZE("NUM_COMMENTS");
    COMMENT_ENUM_FIELD          = VALUE(INT,"User Comments");
    COMMENTS                    = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    KEYWORD_STR                 = VALUE(STRING, "Solver Keyword");
    // Initial and reference densities
    MAT_REFRHO_Option           = VALUE(INT, "RefRho_Option");
    DUMMY                       = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    MAT_RHO                     = VALUE(FLOAT, "Initial Density");
    Refer_Rho                   = VALUE(FLOAT, "Reference Density");
    /* Mat law 2 (PLAS_JOHNS) attributes */
    // Single values
    MAT_E                       = VALUE(FLOAT, "Young's Modulus"); 
    MAT_NU                      = VALUE(FLOAT, "Poisson's Ratio"); 
    MAT_Iflag                   = VALUE(INT,   "Flag for Input Type");  
    MAT_VP                      = VALUE(INT,   "Strain Rate dependency formulation Flag"); 
    //
    MAT_SIG2_yc                 = VALUE(FLOAT, "Yield Stress"); 
    MAT_UTS                     = VALUE(FLOAT, "UTS (Engineering Stress)");  
    MAT_EUTS                     = VALUE(FLOAT, "Strain at EUTS"); 
    MAT_SIGY                    = VALUE(FLOAT, "Plasticity Yield Stress");  
    MAT_BETA                    = VALUE(FLOAT, "Plasticity Hardening Parameter");
    MAT_HARD                    = VALUE(FLOAT, "Plasticity Hardening Exponent"); 
    MAT_EPS                     = VALUE(FLOAT, "Failure Plastic Strain"); 
    MAT_SIG                     = VALUE(FLOAT, "Plasticity Maximum Stress");  
    //
    MAT_SRC                     = VALUE(FLOAT, "Strain Rate Coefficient");  
    MAT_SRP                     = VALUE(FLOAT, "Reference Strain Rate");  
    STRFLAG                     = VALUE(INT,   "Strain Rate Computation Flag");  
    Fsmooth                     = VALUE(INT,   "Smooth Strain Rate Flag"); 
    Fcut                        = VALUE(FLOAT, "Cutoff Frequency for Strain Rate Filtering");   
    MAT_CHARD                   = VALUE(FLOAT, "Hardening Coefficient(Unloading)");  
    //
    MAT_M                       = VALUE(FLOAT, "Temperature Exponent");   
    MAT_TMELT                   = VALUE(FLOAT, "Melting Temperature");  
    MAT_SPHEAT                  = VALUE(FLOAT, "Specific Heat Per Unit of Volume"); 
    MAT_TMAX                    = VALUE(FLOAT, "Room Temperature");   

}

// Possible parameters for MPARAMETERS
PARAMETERS(PARAMETERS) {
    MAT_RHO                     = INPUT_SCALAR(MAT_RHO,"Initial Density");   
    //
    MAT_E                       = INPUT_SCALAR(MAT_E,"Young modulus"); 
    MAT_NU                      = INPUT_SCALAR(MAT_NU,"Poisson ratio"); 
    //
    MAT_SIGY                    = INPUT_SCALAR(MAT_SIGY, "Yield stress");
    MAT_BETA                    = INPUT_SCALAR(MAT_BETA, "Hardening param.");
    MAT_HARD                    = INPUT_SCALAR(MAT_HARD, "Hardening exponent");
    MAT_EPS                     = INPUT_SCALAR(MAT_EPS, "Failure plastic strain");
    MAT_SIG                     = INPUT_SCALAR(MAT_SIG, "Maximum stress");
    //
    MAT_SRC                     = INPUT_SCALAR(MAT_SRC, "Strain rate coeff");
    MAT_SRP                     = INPUT_SCALAR(MAT_SRP, "Reference strain rate");
    Fcut                        = INPUT_SCALAR(Fcut, "Cutoff frequency for smoothing");
    //
    MAT_M                       = INPUT_SCALAR(MAT_M, "Temperature exponent");
    MAT_TMELT                   = INPUT_SCALAR(MAT_TMELT, "Melting temperature");
    MAT_SPHEAT                  = INPUT_SCALAR(MAT_SPHEAT, "Specific heat/volume");
    MAT_TMAX                    = INPUT_SCALAR(MAT_TMAX, "Initial temperature");

}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                 = 9000;
    Fcut                        = 5356;
    Fsmooth                     = 5355;
    MAT_BETA                    = 148;
    MAT_CHARD                   = 4049;
    MAT_E                       = 119;
    MAT_EPS                     = 195;
    MAT_EUTS                    = 1511;
    MAT_HARD                    = 71;
    MAT_Iflag                   = 6002;
    MAT_M                       = 314;
    MAT_NU                      = 120;
    MAT_REFRHO_Option           = 4285;
    MAT_RHO                     = 118;
    MAT_SIG                     = 5038;
    MAT_SIG2_yc                 = 6028;
    MAT_SIGY                    = 152;
    MAT_SPHEAT                  = 318;
    MAT_SRC                     = 155;
    MAT_SRP                     = 156;
    MAT_TMAX                    = 316;
    MAT_TMELT                   = 315;
    MAT_UTS                     = 1510;
    DUMMY                       = -1;
    Refer_Rho                   = 4229;
    STRFLAG                     = 5039;
}

DEFAULTS(COMMON)
{
    Fcut                        = 1.0e30;
    Fsmooth                     = 0;
    MAT_EPS                     = 1.0e30;
    MAT_HARD                    = 1.0;
    MAT_M                       = 1.0;
    MAT_SRC                     = 0.00;
    MAT_SIG                     = 1.0e30;
    MAT_TMELT                   = 1.0e30;
    STRFLAG                     = 1;

}

DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY   = SCALAR(MAT_RHO);
    YOUNG_MODULUS     = SCALAR(MAT_E);
    POISSON_RATIO     = SCALAR(MAT_NU);
public:
    SOUND_SPEED       = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}

CHECK(COMMON) {
    Fcut                        >=0.0;
    MAT_BETA                    >=0.0;
    MAT_CHARD                   >=0;
    MAT_CHARD                   <=1.0;
    MAT_E                       >0.0;
    MAT_EPS                     >=0.0;
    MAT_HARD                    >=0.0;
    MAT_HARD                    <=1.0;
    MAT_NU                      >=0.0;
    MAT_NU                      <0.5;
    MAT_RHO                     >0.0;
    MAT_SIG                     >=0.0;
    MAT_SIGY                    >0;
    MAT_SPHEAT                  >=0.0;
    //HEAT_RHO0_CP              >=0.0;
    MAT_SRP                     >=0.0;
}

GUI(COMMON) {
    ASSIGN(KEYWORD_STR, "/MAT");
    ASSIGN(KEYWORD_STR, "/PLAS_JOHNS/");

    FLAG(MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho)      { DIMENSION="density";                  }
    }
mandatory:
    SCALAR(MAT_RHO)         { DIMENSION="density";                  }
    //
mandatory:
    SCALAR(MAT_E)           { DIMENSION="pressure";                      }
optional:
    SCALAR(MAT_NU)          { DIMENSION="DIMENSIONLESS";                 }
    //
optional:

    RADIO(MAT_Iflag)
    {
        ADD(0, "Classic Input for Johnson-Cook Parameter a,b,n is Active (Default)");
        ADD(1, "New, Simplified Input Type is Active: Yield Stress, UTS (Engineering Stress), or Strain at UTS");
    }
    if(MAT_Iflag == 1)
    {
mandatory:
        SCALAR(MAT_SIG2_yc) { DIMENSION="pressure";                   }
optional:
        SCALAR(MAT_UTS)     { DIMENSION="pressure";                   }
        SCALAR(MAT_EUTS)    { DIMENSION="DIMENSIONLESS";              }
    }
    else
    {
mandatory:
        SCALAR(MAT_SIGY)    { DIMENSION="pressure";                   }
optional:
        SCALAR(MAT_BETA)    { DIMENSION="pressure";                   }
        SCALAR(MAT_HARD)    { DIMENSION="DIMENSIONLESS";              }
    }

    SCALAR(MAT_EPS)         { DIMENSION="DIMENSIONLESS";                 }
    SCALAR(MAT_SIG)         { DIMENSION="pressure";                      }
    //
    SCALAR(MAT_SRC)         { DIMENSION="DIMENSIONLESS";                 }
    SCALAR(MAT_SRP)         { DIMENSION="f";                     }
    //
optional:
    RADIO(STRFLAG,"Strain rate computation") {
        ADD(0, "0: Default Set to 1");
        ADD(1, "1: Strain Rate Effect on SIG_max");
        ADD(2, "2: No Strain Rate Effect on SIG_max");
    }
    RADIO(Fsmooth,"Strain rate Smoothing"){
        ADD(0, "0: Strain Rate Smoothing is Inactive");
        ADD(1, "1: Strain Rate Smoothing is Active"); 
    }
    SCALAR(Fcut)            { DIMENSION="f";                     }
    SCALAR(MAT_CHARD)       { DIMENSION="DIMENSIONLESS";                 }

    //
    SCALAR(MAT_M)           { DIMENSION="DIMENSIONLESS";                 }
    SCALAR(MAT_TMELT)       { DIMENSION="k";     }
    SCALAR(MAT_SPHEAT)      { DIMENSION="specific_heat_per_unit_volume"; }
    SCALAR(MAT_TMAX)        { DIMENSION="k";     }
}


FORMAT(radioss2023) {
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    //
           //#---1----|----2----|----3----|----4----|----5----|----6----|----7----|----8----|----9----|---10----|
    COMMENT("#                  E                  Nu     Iflag    flagVP");
    CARD("%20lg%20lg%10d%10d",MAT_E,MAT_NU,MAT_Iflag,MAT_VP);
    //
    if(MAT_Iflag==1)
    {  
        COMMENT("#              SIG_Y                 UTS                EUTS           EPS_p_max            SIG_max0");
        CARD("%20lg%20lg%20lg%20lg%20lg",MAT_SIG2_yc,MAT_UTS,MAT_EUTS,MAT_EPS,MAT_SIG);
    }
    else
    {
        COMMENT("#                  a                   b                   n           EPS_p_max            SIG_max0");
        CARD("%20lg%20lg%20lg%20lg%20lg",MAT_SIGY,MAT_BETA,MAT_HARD,MAT_EPS,MAT_SIG);
    }
    //
    COMMENT("#                  c           EPS_DOT_0       ICC   Fsmooth               F_cut               Chard");
    CARD("%20lg%20lg%10d%10d%20lg%20lg",MAT_SRC,MAT_SRP,STRFLAG,Fsmooth,Fcut,MAT_CHARD);
    //
    COMMENT("#                  m              T_melt              rhoC_p                 T_r");
    CARD("%20lg%20lg%20lg%20lg",MAT_M,MAT_TMELT,MAT_SPHEAT,MAT_TMAX); 
}

FORMAT(radioss140) {
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    //
    COMMENT("#                  E                  Nu     Iflag");
    CARD("%20lg%20lg%10d",MAT_E,MAT_NU,MAT_Iflag);
    //
    if(MAT_Iflag==1)
    {  
        COMMENT("#              SIG_Y                 UTS                EUTS           EPS_p_max            SIG_max0");
        CARD("%20lg%20lg%20lg%20lg%20lg",MAT_SIG2_yc,MAT_UTS,MAT_EUTS,MAT_EPS,MAT_SIG);
    }
    else
    {
        COMMENT("#                  a                   b                   n           EPS_p_max            SIG_max0");
        CARD("%20lg%20lg%20lg%20lg%20lg",MAT_SIGY,MAT_BETA,MAT_HARD,MAT_EPS,MAT_SIG);
    }
    //
    COMMENT("#                  c           EPS_DOT_0       ICC   Fsmooth               F_cut               Chard");
    CARD("%20lg%20lg%10d%10d%20lg%20lg",MAT_SRC,MAT_SRP,STRFLAG,Fsmooth,Fcut,MAT_CHARD);
    //
    COMMENT("#                  m              T_melt              rhoC_p                 T_r");
    CARD("%20lg%20lg%20lg%20lg",MAT_M,MAT_TMELT,MAT_SPHEAT,MAT_TMAX); 
}

FORMAT(radioss100) {
    CARD_PREREAD("          %10s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    //
    COMMENT("#                  E                  Nu");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    //
    COMMENT("#                  a                   b                   n           EPS_p_max            SIG_max0");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_SIGY,MAT_BETA,MAT_HARD,MAT_EPS,MAT_SIG);
    //
    COMMENT("#                  c           EPS_DOT_0       ICC   Fsmooth               F_cut");
    CARD("%20lg%20lg%10d%10d%20lg%20lg",MAT_SRC,MAT_SRP,STRFLAG,Fsmooth,Fcut,MAT_CHARD);
    //
    COMMENT("#                  m              T_melt              rhoC_p                 T_r");
    CARD("%20lg%20lg%20lg%20lg",MAT_M,MAT_TMELT,MAT_SPHEAT,MAT_TMAX); 
}

FORMAT(radioss51) {
    CARD_PREREAD("          %10s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    //
    COMMENT("#                  E                  Nu");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    //
    COMMENT("#                  a                   b                   n           EPS_p_max            SIG_max0");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_SIGY,MAT_BETA,MAT_HARD,MAT_EPS,MAT_SIG);
    //
    COMMENT("#                  c           EPS_DOT_0       ICC   Fsmooth               F_cut");
    CARD("%20lg%20lg%10d%10d%20lg",MAT_SRC,MAT_SRP,STRFLAG,Fsmooth,Fcut);
    //
    COMMENT("#                  m              T_melt              rhoC_p                 T_r");
    CARD("%20lg%20lg%20lg%20lg",MAT_M,MAT_TMELT,MAT_SPHEAT,MAT_TMAX); 
}


FORMAT(radioss42) {

    COMMENT("#          RHO_I");
    CARD("%16lg",MAT_RHO);
    //
    COMMENT("#              E              Nu");
    CARD("%16lg%16lg",MAT_E,MAT_NU);
    //
    COMMENT("#              a               b               n       EPS_p_max        SIG_max0");
    CARD("%16lg%16lg%16lg%16lg%16lg",MAT_SIGY,MAT_BETA,MAT_HARD,MAT_EPS,MAT_SIG);
    //
    COMMENT("#              c       EPS_DOT_0     ICC Fsmooth           F_cut");
    CARD("%16lg%16lg%8d%8d%16lg",MAT_SRC,MAT_SRP,STRFLAG,Fsmooth,Fcut);
    //
    COMMENT("#                  m              T_melt              rhoC_p                 T_r");
    CARD("%16lg%16lg%16lg%16lg",MAT_M,MAT_TMELT,MAT_SPHEAT,MAT_TMAX); 
}

FORMAT(radioss41) {

    COMMENT("#          RHO_I");
    CARD("%16lg",MAT_RHO);
    //
    COMMENT("#              E              Nu");
    CARD("%16lg%16lg",MAT_E,MAT_NU);
    //
    COMMENT("#              a               b               n       EPS_p_max        SIG_max0");
    CARD("%16lg%16lg%16lg%16lg%16lg",MAT_SIGY,MAT_BETA,MAT_HARD,MAT_EPS,MAT_SIG);
    //
    COMMENT("#              c       EPS_DOT_0     ICC");
    CARD("%16lg%16lg%8d",MAT_SRC,MAT_SRP,STRFLAG);
    //
    COMMENT("#              m          T_melt          rhoC_p             T_r");
    CARD("%16lg%16lg%16lg%16lg",MAT_M,MAT_TMELT,MAT_SPHEAT,MAT_TMAX); 
}