//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Material law124 - CDPM2
ATTRIBUTES(COMMON)
{
    KEYWORD_STR                = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS               = SIZE("NUM_COMMENTS");
    COMMENTS                   = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField           = VALUE(INT,   "User Comments");
    MAT_RHO                    = VALUE(FLOAT, "Initial Density");
    DUMMY                      = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    //
    MAT_E                      = VALUE(FLOAT, "Young's Modulus");
    MAT_NU                     = VALUE(FLOAT, "Poisson's Ratio");
    IDEL                       = VALUE(INT,   "Element deletion flag");
    IRATE                      = VALUE(INT,   "Strain rate effect flag");
    FCUT                       = VALUE(FLOAT, "Strain rate filtering cutoff frequency");
    //
    MAT_ECC                    = VALUE(FLOAT, "Eccentricity");
    MAT_QH0                    = VALUE(FLOAT, "Initial hardening");
    MAT_FT                     = VALUE(FLOAT, "Uniaxial tension strength");
    MAT_FC                     = VALUE(FLOAT, "Uniaxial compression strength");
    MAT_HP                     = VALUE(FLOAT, "Hardening modulus");
    //
    MAT_AH                     = VALUE(FLOAT, "Hardening ductility measure");
    MAT_BH                     = VALUE(FLOAT, "Hardening ductility measure");
    MAT_CH                     = VALUE(FLOAT, "Hardening ductility measure");   
    MAT_DH                     = VALUE(FLOAT, "Hardening ductility measure");
    //
    MAT_AS                     = VALUE(FLOAT, "Damage ductility measure");
    MAT_BS                     = VALUE(FLOAT, "Damage ductility parameter");
    MAT_DF                     = VALUE(FLOAT, "Dilation constant");
    DFLAG                      = VALUE(INT,   "Damage coupling type");
    DTYPE                      = VALUE(INT,   "Tensile damage shape");
    IREG                       = VALUE(INT,   "Element length regularization flag");
    //
    MAT_WF                     = VALUE(FLOAT, "Damage displacement threshold 0");
    MAT_WF1                    = VALUE(FLOAT, "Damage displacement threshold 1");
    MAT_FT1                    = VALUE(FLOAT, "Damage stress threshold");   
    MAT_EFC                    = VALUE(FLOAT, "Strain threshold in compression");
    //
    IO_FLAG                    = VALUE(INT, "");
    LAW_NO                     = VALUE(STRING, "");
    Mat_Name_OR_LawNo          = VALUE(INT,  "RADIOSS_COMMENT_FLAG");
    TITLE                      = VALUE(STRING,"");
    Heat_Inp_opt               = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT            = VALUE(SUBOBJECT, "");
    THERM_STRESS               = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS        = VALUE(SUBOBJECT, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                = 9000;
    COMMENTS                   = 5109;
    CommentEnumField           = 7951;
    NUM_COMMENTS               = 5110;
    MAT_RHO                    = 118;
    DUMMY                      = -1;
    //
    MAT_E                      = 119;
    MAT_NU                     = 120;  
    IDEL                       = -1;
    IRATE                      = -1;
    FCUT                       = -1;
    //
    MAT_ECC                    = -1;
    MAT_QH0                    = -1;
    MAT_FT                     = -1;
    MAT_FC                     = -1;
    MAT_HP                     = -1;
    //
    MAT_AH                     = -1;
    MAT_BH                     = -1;
    MAT_CH                     = -1;
    MAT_DH                     = -1;
    //
    MAT_AS                     = -1;
    MAT_BS                     = -1;
    MAT_DF                     = -1;
    DFLAG                      = -1;
    DTYPE                      = -1;
    IREG                       = -1;
    //
    MAT_WF                     = -1;
    MAT_WF1                    = -1;
    MAT_FT1                    = -1;  
    MAT_EFC                    = -1;
    //
    LAW_NO                     = -1;
    Mat_Name_OR_LawNo          = 4538;
    IO_FLAG                    = -1;
    TITLE                      = -1;
    Heat_Inp_opt               = 4346;
    SUBGRP_HEAT_MAT            = -1;
    THERM_STRESS               = 4555;
    SUBGRP_THERM_STRESS        = -1;
}

DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY            = SCALAR(MAT_RHO);
    YOUNG_MODULUS              = SCALAR(MAT_E);
    POISSON_RATIO              = SCALAR(MAT_NU);
public:
    SOUND_SPEED                = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                          = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                         = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID          = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}

CHECK(COMMON)
{
    MAT_RHO                     >0.0;
}

DEFAULTS(COMMON)
{
    Mat_Name_OR_LawNo           = 0;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if( CommentEnumField == 2)
    {
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }
    if( Mat_Name_OR_LawNo == 1)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/CDPM2/");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW124/");
    }
mandatory:
    SCALAR(MAT_RHO)                                { DIMENSION = "density";}
    SCALAR(MAT_E)                                  { DIMENSION = "pressure";}
    SCALAR(MAT_NU)                                 { DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_FT)                                 { DIMENSION = "pressure";}
    SCALAR(MAT_FC)                                 { DIMENSION = "pressure";}
    RADIO(DFLAG)
    {
        ADD(1, "1: Standard model with two damage parameters: tension and compression");
        ADD(2, "2: Isotropic model with one damage parameters: tension");
        ADD(3, "3: Multiplicative model with two damage parameters: tension and compression");
        ADD(4, "4: No damage effect");
    }
    RADIO(DTYPE)
    {
        ADD(1, "1: Linear softening");
        ADD(2, "2: Bilinear softening");
        ADD(3, "3: Exponential softening");
    }
    RADIO(IREG)
    {
        ADD(1, "1: No element length regularization");
        ADD(2, "2: Element length regularization activated");
    }
    RADIO(IDEL)
    {
        ADD(1, "1: No element deletion");
        ADD(2, "2: Element deletion activated");
    }
    RADIO(IRATE)
    {
        ADD(1, "1: No strain rate effect");
        ADD(2, "2: Strain rate effect activated");
    }
    if (IREG == 2) {
      SCALAR(MAT_WF)                               { DIMENSION = "l";}
      SCALAR(MAT_WF1)                              { DIMENSION = "l";}
    } else {
      SCALAR(MAT_WF)                               { DIMENSION = "DIMENSIONLESS";}
      SCALAR(MAT_WF1)                              { DIMENSION = "DIMENSIONLESS";}
    }
optional:
    SCALAR(FCUT)                                   { DIMENSION = "f";}
    SCALAR(MAT_ECC)                                { DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_QH0)                                { DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_HP)                                 { DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_AH)                                 { DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_BH)                                 { DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_CH)                                 { DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_DH)                                 { DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_AS)                                 { DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_BS)                                 { DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_DF)                                 { DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_FT1)                                { DIMENSION = "pressure";}
    SCALAR(MAT_EFC)                                { DIMENSION = "DIMENSIONLESS";}
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
}

//
FORMAT(radioss2023) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW124/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/CDPM2/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    COMMENT("#              RHO_I");
    CARD("%20lg",MAT_RHO);
    COMMENT("#                  E                  NU                IDEL               IRATE                FCUT");
    CARD("%20lg%20lg%10s%10d%10s%10d%20lg",MAT_E,MAT_NU,_BLANK_,IDEL,_BLANK_,IRATE,FCUT); 
    COMMENT("#                ECC                 QH0                  FT                  FC                  HP");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_ECC,MAT_QH0,MAT_FT,MAT_FC,MAT_HP);
    COMMENT("#                 AH                  BH                  CH                  DH");
    CARD("%20lg%20lg%20lg%20lg",MAT_AH,MAT_BH,MAT_CH,MAT_DH);
    COMMENT("#                 AS                  BS                  DF               DFLAG     DTYPE      IREG");
    CARD("%20lg%20lg%20lg%10s%10d%10d%10d",MAT_AS,MAT_BS,MAT_DF,_BLANK_,DFLAG,DTYPE,IREG);    
    COMMENT("#                 WF                 WF1                 FT1                 EFC");
    CARD("%20lg%20lg%20lg%20lg",MAT_WF,MAT_WF1,MAT_FT1,MAT_EFC);
    if (Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}

//
FORMAT(radioss2022) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW124/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/CDPM2/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    COMMENT("#              RHO_I");
    CARD("%20lg",MAT_RHO);
    COMMENT("#                  E                  NU                                   IRATE                FCUT");
    CARD("%20lg%20lg%30s%10d%20lg",MAT_E,MAT_NU,_BLANK_,IRATE,FCUT); 
    COMMENT("#                ECC                 QH0                  FT                  FC                  HP");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_ECC,MAT_QH0,MAT_FT,MAT_FC,MAT_HP);
    COMMENT("#                 AH                  BH                  CH                  DH");
    CARD("%20lg%20lg%20lg%20lg",MAT_AH,MAT_BH,MAT_CH,MAT_DH);
    COMMENT("#                 AS                  BS                  DF               DFLAG     DTYPE      IREG");
    CARD("%20lg%20lg%20lg%10s%10d%10d%10d",MAT_AS,MAT_BS,MAT_DF,_BLANK_,DFLAG,DTYPE,IREG);    
    COMMENT("#                 WF                 WF1                 FT1                 EFC");
    CARD("%20lg%20lg%20lg%20lg",MAT_WF,MAT_WF1,MAT_FT1,MAT_EFC);
    if (Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}