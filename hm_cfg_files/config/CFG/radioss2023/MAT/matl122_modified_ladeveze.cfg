//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//MATERIAL LAW122

ATTRIBUTES(COMMON) {
    KEYWORD_STR             = VALUE(STRING,"Solver Keyword");
    NUM_COMMENTS            = SIZE("No. of Comment Lines");
    COMMENTS                = ARRAY[NUM_COMMENTS](STRING, "Entity_Comments");
    CommentEnumField        = VALUE(INT,  "User Comments");

    // Elastic parameters
    MAT_RHO                 = VALUE(FLOAT,"Initial density");
    MAT_E1                  = VALUE(FLOAT,"Young's modulus for tension in fiber direction 1");
    MAT_E2                  = VALUE(FLOAT,"Young's modulus in matrix direction 2");
    MAT_E3                  = VALUE(FLOAT,"Young's modulus in matrix direction 3");
    MAT_G12                 = VALUE(FLOAT,"Shear modulus in plane 12");
    MAT_G23                 = VALUE(FLOAT,"Shear modulus in plane 23");
    MAT_G31                 = VALUE(FLOAT,"Shear modulus in plane 13");
    MAT_NU12                = VALUE(FLOAT,"Poisson's ratio in plane 12");
    MAT_NU23                = VALUE(FLOAT,"Poisson's ratio in plane 23");
    MAT_NU31                = VALUE(FLOAT,"Poisson's ratio in plane 31");
    MAT_E1C                 = VALUE(FLOAT,"Compressive Young's modulus in fiber direction 1");
    MAT_GAMMA               = VALUE(FLOAT,"Compressive factor of the modulus correction");
    ISH                     = VALUE(INT  ,"Shear damage evolution shape flag");
    ITR                     = VALUE(INT  ,"Transverse damage evolution shape flag");
    IRES                    = VALUE(INT  ,"Return mapping flag");   
    MAT_SIGY0               = VALUE(FLOAT,"Initial yield stress");
    MAT_BETA                = VALUE(FLOAT,"Hardening modulus");
    MAT_M                   = VALUE(FLOAT,"Hardening exponent");
    MAT_A                   = VALUE(FLOAT,"Shear and transverse plasticity coupling factor");
    MAT_EFTI                = VALUE(FLOAT,"Tensile initial damage strain in fiber direction 1");
    MAT_EFTU                = VALUE(FLOAT,"Tensile ultimate damage strain in fiber direction 1");
    MAT_DFTU                = VALUE(FLOAT,"Tensile ultimate damage in fiber direction 1");
    MAT_EFCI                = VALUE(FLOAT,"Compression initial damage strain in fiber direction 1");
    MAT_EFCU                = VALUE(FLOAT,"Compression ultimate damage strain in fiber direction 1");
    MAT_DFCU                = VALUE(FLOAT,"Compression ultimate damage in fiber direction 1");
    IBUCK                   = VALUE(INT  ,"Flag for buckling damage matrix on fiber in compression"); 
    IFUNCD1                 = VALUE(FUNCT,"Damage tabulated function for shear");
    MAT_DSAT1               = VALUE(FLOAT,"Damage saturation for shear");
    MAT_Y0                  = VALUE(FLOAT,"Initial shear damage threshold");
    MAT_YC                  = VALUE(FLOAT,"Critical shear damage limit");
    MAT_B                   = VALUE(FLOAT,"Shear/transverse damage coupling factor");
    MAT_DMAX                = VALUE(FLOAT,"Damage maximal allowed value");
    MAT_YR                  = VALUE(FLOAT,"Elementary shear damage value");
    MAT_YSP                 = VALUE(FLOAT,"Brittle damage limit for fiber-matrix interface");
    IFUNCD2                 = VALUE(FUNCT,"Tensile damage function for transverse loadings");
    MAT_DSAT2               = VALUE(FLOAT,"Damage saturation for tensile transverse damage");
    MAT_Y0P                 = VALUE(FLOAT,"Initial transverse damage threshold");
    MAT_YCP                 = VALUE(FLOAT,"Critical transverse damage limit");
    IFUNCD2C                = VALUE(FUNCT,"Compression damage function for transverse loadings");
    MAT_DSAT2C              = VALUE(FLOAT,"Damage saturation for compression transverse damage");
    MAT_Y0PC                = VALUE(FLOAT,"Initial transverse damage threshold in compression");
    MAT_YCPC                = VALUE(FLOAT,"Critical transverse damage limit in compression");
    MAT_EPSD11              = VALUE(FLOAT,"Reference strain rate for fiber direction 1");
    MAT_D11                 = VALUE(FLOAT,"First parameter for Young modulus strain rate dependency in fiber direction 1");
    MAT_N11                 = VALUE(FLOAT,"Second parameter for Young modulus strain rate dependency in fiber direction 1");
    MAT_D11U                = VALUE(FLOAT,"First parameter for rupture strain rate dependency in fiber direction 1");
    MAT_N11U                = VALUE(FLOAT,"Second parameter for rupture strain rate dependency in fiber direction 1");
    MAT_EPSD12              = VALUE(FLOAT,"Reference strain rate for shear and transverse directions");
    MAT_D22                 = VALUE(FLOAT,"First parameter for Young modulus strain rate dependency in matrix transverse direction 2");
    MAT_N22                 = VALUE(FLOAT,"Second parameter for Young modulus strain rate dependency in matrix transverse direction 2");
    MAT_D12                 = VALUE(FLOAT,"First parameter for shear modulus strain rate dependency in plane 12");
    MAT_N12                 = VALUE(FLOAT,"Second parameter for shear modulus strain rate dependency in plane 12");
    MAT_EPSDR0              = VALUE(FLOAT,"Reference strain rate for initial yield stress");
    MAT_DR0                 = VALUE(FLOAT,"First parameter for initial yield stress strain rate dependency");
    MAT_NR0                 = VALUE(FLOAT,"Second parameter for initial yield stress strain rate dependency");
    LTYPE11                 = VALUE(INT  ,"Type of strain rate dependency law for fiber direction 1"); 
    LTYPE12                 = VALUE(INT  ,"Type of strain rate dependency law for shear and transverse directions"); 
    LTYPER0                 = VALUE(INT  ,"Type of strain rate dependency law for initial yield stress");
    FCUT                    = VALUE(FLOAT,"Equivalent strain rate cutoff frequency");
    // HEAT
    Heat_Inp_opt            = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT         = VALUE(SUBOBJECT, "");
    // THERM_STRESS
    THERM_STRESS            = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS     = VALUE(SUBOBJECT, "");

    TITLE                   = VALUE(STRING,"");
    IO_FLAG                 = VALUE(INT, "");
    Mat_Name_OR_LawNo       = VALUE(INT,  "RADIOSS_COMMENT_FLAG");
    LAW_NO                  = VALUE(STRING, "");
}   

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR             = 9000;
    NUM_COMMENTS            = 5110;
    COMMENTS                = 5109;
    CommentEnumField        = 7951;

    MAT_RHO                 = -1;
    MAT_E1                  = -1;
    MAT_E2                  = -1; 
    MAT_E3                  = -1; 
    MAT_G12                 = -1; 
    MAT_G23                 = -1; 
    MAT_G31                 = -1; 
    MAT_NU12                = -1; 
    MAT_NU23                = -1; 
    MAT_NU31                = -1; 
    MAT_E1C                 = -1; 
    MAT_GAMMA               = -1; 
    ISH                     = -1; 
    ITR                     = -1; 
    IRES                    = -1; 
    MAT_SIGY0               = -1; 
    MAT_BETA                = -1; 
    MAT_M                   = -1; 
    MAT_A                   = -1; 
    MAT_EFTI                = -1; 
    MAT_EFTU                = -1; 
    MAT_DFTU                = -1; 
    MAT_EFCI                = -1; 
    MAT_EFCU                = -1; 
    MAT_DFCU                = -1; 
    IBUCK                   = -1; 
    IFUNCD1                 = -1; 
    MAT_DSAT1               = -1; 
    MAT_Y0                  = -1; 
    MAT_YC                  = -1; 
    MAT_B                   = -1; 
    MAT_DMAX                = -1; 
    MAT_YR                  = -1; 
    MAT_YSP                 = -1; 
    IFUNCD2                 = -1; 
    MAT_DSAT2               = -1; 
    MAT_Y0P                 = -1; 
    MAT_YCP                 = -1; 
    IFUNCD2C                = -1; 
    MAT_DSAT2C              = -1; 
    MAT_Y0PC                = -1; 
    MAT_YCPC                = -1; 
    MAT_EPSD11              = -1;
    MAT_D11                 = -1;
    MAT_N11                 = -1;
    MAT_D11U                = -1;
    MAT_N11U                = -1;
    MAT_EPSD12              = -1;
    MAT_D22                 = -1;
    MAT_N22                 = -1;
    MAT_D12                 = -1;
    MAT_N12                 = -1;
    MAT_EPSDR0              = -1;
    MAT_DR0                 = -1;
    MAT_NR0                 = -1;
    LTYPE11                 = -1;
    LTYPE12                 = -1;
    LTYPER0                 = -1;
    FCUT                    = -1;
    //HEAT
    Heat_Inp_opt            = 4346;
    SUBGRP_HEAT_MAT         = -1;
    // THERM_STRESS
    THERM_STRESS            = 4555;
    SUBGRP_THERM_STRESS     = -1;

    TITLE                   = -1;
    IO_FLAG                 = -1;
    Mat_Name_OR_LawNo       = -1;
    LAW_NO                  = -1;
}

DEFAULTS(COMMON) {
}

GUI(COMMON)    
{
    RADIO(CommentEnumField)   
    {

        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if( CommentEnumField == 2 )
    {
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }
    if(Mat_Name_OR_LawNo == 2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW122/");
    }
    else 
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/MODIFIED_LADEVEZE/");
    }

    SCALAR(MAT_RHO)         { DIMENSION="density";       } 
    SCALAR(MAT_E1)          { DIMENSION="pressure";      }
    SCALAR(MAT_E2)          { DIMENSION="pressure";      }
    SCALAR(MAT_E3)          { DIMENSION="pressure";      }
    SCALAR(MAT_G12)         { DIMENSION="pressure";      }
    SCALAR(MAT_G23)         { DIMENSION="pressure";      }
    SCALAR(MAT_G31)         { DIMENSION="pressure";      }
    SCALAR(MAT_NU12)        { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_NU23)        { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_NU31)        { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_E1C)         { DIMENSION="pressure";      }
    SCALAR(MAT_GAMMA)       { DIMENSION="inverse_of_pressure";}
    RADIO(ISH)   
    {
        ADD(0, "1: Linear function");
        ADD(1, "2: Exponential function");
        ADD(2, "3: Tabulated function");
    } 
    RADIO(ITR)   
    {
        ADD(0, "1: Linear function");
        ADD(1, "2: Exponential function");
        ADD(2, "3: Tabulated function");
    } 
    RADIO(IRES)   
    {
        ADD(0, "0: Set to 1");
        ADD(1, "1: NICE (Next Increment Correct Error) explicit method");
        ADD(2, "2: Cutting plane semi-implicit method (Newton iterations)");
    } 
    SCALAR(MAT_SIGY0)       { DIMENSION="pressure";      }
    SCALAR(MAT_BETA)        { DIMENSION="pressure";      }
    SCALAR(MAT_M)           { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_A)           { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_EFTI)        { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_EFTU)        { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_DFTU)        { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_EFCI)        { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_EFCU)        { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_DFCU)        { DIMENSION="DIMENSIONLESS"; }
    RADIO(IBUCK)   
    {
        ADD(0, "1: Buckling effect deactivated");
        ADD(1, "2: Buckling effect activated");
    } 
    SCALAR(MAT_DSAT1)       { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_Y0)          { DIMENSION="root_of_pressure";}
    SCALAR(MAT_YC)          { DIMENSION="root_of_pressure";}
    SCALAR(MAT_B)           { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_DMAX)        { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_YR)          { DIMENSION="root_of_pressure";}
    SCALAR(MAT_YSP)         { DIMENSION="root_of_pressure";}
    SCALAR(MAT_DSAT2)       { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_Y0P)         { DIMENSION="root_of_pressure";}
    SCALAR(MAT_YCP)         { DIMENSION="root_of_pressure";}
    SCALAR(MAT_DSAT2C)      { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_Y0PC)        { DIMENSION="root_of_pressure";}
    SCALAR(MAT_YCPC)        { DIMENSION="root_of_pressure";}
    SCALAR(MAT_EPSD11)      { DIMENSION="f";}
    SCALAR(MAT_D11)         { DIMENSION="DIMENSIONLESS";}
    SCALAR(MAT_N11)         { DIMENSION="DIMENSIONLESS";}
    SCALAR(MAT_D11U)        { DIMENSION="DIMENSIONLESS";}
    SCALAR(MAT_N11U)        { DIMENSION="DIMENSIONLESS";}
    SCALAR(MAT_EPSD12)      { DIMENSION="f";}
    SCALAR(MAT_D22)         { DIMENSION="DIMENSIONLESS";}
    SCALAR(MAT_N22)         { DIMENSION="DIMENSIONLESS";}
    SCALAR(MAT_D12)         { DIMENSION="DIMENSIONLESS";}
    SCALAR(MAT_N12)         { DIMENSION="DIMENSIONLESS";}
    SCALAR(MAT_EPSDR0)      { DIMENSION="f";}
    SCALAR(MAT_DR0)         { DIMENSION="DIMENSIONLESS";}
    SCALAR(MAT_NR0)         { DIMENSION="DIMENSIONLESS";}
    RADIO(LTYPE11)   
    {
        ADD(0, "1: Power law");
        ADD(1, "2: Linear law");
        ADD(2, "3: Logarithmic law");
        ADD(3, "4: Tangent hyperbolic law");
    } 
    RADIO(LTYPE12)   
    {
        ADD(0, "1: Power law");
        ADD(1, "2: Linear law");
        ADD(2, "3: Logarithmic law");
        ADD(3, "4: Tangent hyperbolic law");
    } 
    RADIO(LTYPER0)   
    {
        ADD(0, "1: Power law");
        ADD(1, "2: Linear law");
        ADD(2, "3: Logarithmic law");
        ADD(3, "4: Tangent hyperbolic law");
    } 
    SCALAR(FCUT)      { DIMENSION="f";}
    // HEAT data
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }

}
//file format
FORMAT(radioss2023) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW122/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/MODIFIED_LADEVEZE/%d",_ID_);
        CARD("%-100s", TITLE);
    }    
    COMMENT("#        Init. dens.");
    CARD("%20lg",MAT_RHO);
    COMMENT("#                 E1                  E2                  E3                 G12                 G23");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_E1,MAT_E2,MAT_E3,MAT_G12,MAT_G23);
    COMMENT("#                G31                NU12                NU23                NU31");
    CARD("%20lg%20lg%20lg%20lg",MAT_G31,MAT_NU12,MAT_NU23,MAT_NU31);
    COMMENT("#                E1C               GAMMA                 ISH                 ITR                IRES");
    CARD("%20lg%20lg%10s%10d%10s%10d%10s%10d",MAT_E1C,MAT_GAMMA,_BLANK_,ISH,_BLANK_,ITR,_BLANK_,IRES);
    COMMENT("#              SIGY0                BETA                   M                   A");
    CARD("%20lg%20lg%20lg%20lg",MAT_SIGY0,MAT_BETA,MAT_M,MAT_A);
    COMMENT("#            EPS_FTI             EPS_FTU                DFTU");
    CARD("%20lg%20lg%20lg",MAT_EFTI,MAT_EFTU,MAT_DFTU);
    COMMENT("#            EPS_FCI             EPS_FCU                DCFU               IBUCK");
    CARD("%20lg%20lg%20lg%10s%10d",MAT_EFCI,MAT_EFCU,MAT_DFCU,_BLANK_,IBUCK);
    COMMENT("#            IFUNCD1               DSAT1                  Y0                  YC                   B");
    CARD("%10s%10d%20lg%20lg%20lg%20lg",_BLANK_,IFUNCD1,MAT_DSAT1,MAT_Y0,MAT_YC,MAT_B);
    COMMENT("#               DMAX                  YR                 YSP");
    CARD("%20lg%20lg%20lg",MAT_DMAX,MAT_YR,MAT_YSP);
    COMMENT("#            IFUNCD2               DSAT2                 Y0P                 YCP");
    CARD("%10s%10d%20lg%20lg%20lg",_BLANK_,IFUNCD2,MAT_DSAT2,MAT_Y0P,MAT_YCP);
    COMMENT("#           IFUNCD2C              DSAT2C                Y0PC                YCPC");
    CARD("%10s%10d%20lg%20lg%20lg",_BLANK_,IFUNCD2C,MAT_DSAT2C,MAT_Y0PC,MAT_YCPC);
    COMMENT("#             EPSD11                 D11                 N11                D11U                N11U");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_EPSD11,MAT_D11,MAT_N11,MAT_D11U,MAT_N11U);
    COMMENT("#             EPSD12                 D22                 N22                 D12                 N12");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_EPSD12,MAT_D22,MAT_N22,MAT_D12,MAT_N12);
    COMMENT("#             EPSDR0                 DR0                 NR0             LTYPE11   LTYPE12   LTYPER0");
    CARD("%20lg%20lg%20lg%10s%10d%10d%10d",MAT_EPSDR0,MAT_DR0,MAT_NR0,_BLANK_,LTYPE11,LTYPE12,LTYPER0);
    COMMENT("#               FCUT");
    CARD("%20lg",FCUT);
    //
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
