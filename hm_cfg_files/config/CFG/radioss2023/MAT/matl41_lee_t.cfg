//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 41 (LEE_T) Setup File
// 
//This law describes the Lee-Tarver material.
//Enhanced to generic page support, venkatk, RFE11336, 03-03-2009

ATTRIBUTES(COMMON) {
    // Support
    // NB_PARTS                     = SIZE("Number of Connected Parts"); 
    //COMPONENT                     = ARRAY[NB_PARTS](COMPONENT,"Connected Parts");
    KEYWORD_STR                     = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                    = SIZE("NUM_COMMENTS");
    CommentEnumField                = VALUE(INT,"User Comments");
    COMMENTS                        = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    // Initial and reference densities
    MAT_RHO                         = VALUE(FLOAT,"Initial Density");
    Refer_Rho                       = VALUE(FLOAT,"Reference Density (for lower than 14.0 version)");
    DUMMY                           = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    MAT_REFRHO_Option               = VALUE(INT, "RefRho_Option");
    // Other values
    Ireac                           = VALUE(INT,"Ignition and Growth");
    a_r                             = VALUE(FLOAT,"ar Reagents Coefficient (JWL Equation of State)");
    b_r                             = VALUE(FLOAT,"br Reagents Coefficient (JWL Equation of State)");
    r_1r                            = VALUE(FLOAT,"r1r Reagents Coefficient (JWL Equation of State)");
    r_2r                            = VALUE(FLOAT,"r2r Reagents Coefficient (JWL Equation of State)");
    r_3r                            = VALUE(FLOAT,"r3r Reagents Coefficient (JWL Equation of State)");
    //
    a_p                             = VALUE(FLOAT,"ap Product Coefficient (JWL Equation of State)");
    b_p                             = VALUE(FLOAT,"bp Product Coefficient (JWL Equation of State)");
    r_1p                            = VALUE(FLOAT,"r1p Product Coefficient (JWL Equation of State)");
    r_2p                            = VALUE(FLOAT,"r2p Product Coefficient (JWL Equation of State)");
    r_3p                            = VALUE(FLOAT,"r3p Product Coefficient (JWL Equation of State)");
    //
    C_vr                            = VALUE(FLOAT,"Heat Capacity Reagent");
    C_vp                            = VALUE(FLOAT,"Heat Capacity Product");
    enq                             = VALUE(FLOAT,"Heat Reaction");
    //
    NITRS                           = VALUE(INT,"Maximum Number of Iterations for the Mixing Law");
    //NITRS                         = SIZE("Max Number of iter. for the mixing law");
    Epsilon_0                       = VALUE(FLOAT,"Precision on Hydrodynamic Balance");
    ftol                            = VALUE(FLOAT,"Limiter of the Massic Fraction of Products");
    //
    I_                              = VALUE(FLOAT,"I Chemical Kinetic Coefficient of the Starting Phase (Lee-Tarver & Dyna-2D)");
    b_                              = VALUE(FLOAT,"b Chemical Kinetic Coefficient of the Starting Phase (Lee-Tarver & Dyna-2D)");
    x_                              = VALUE(FLOAT,"x Chemical Kinetic Coefficient of the Starting Phase (Lee-Tarver & Dyna-2D)");
    //
    g1                              = VALUE(FLOAT,"G1 Chemical Kinetic Coefficient of the Growing Phase (Lee-Tarver & Dyna-2D)");
    d_                              = VALUE(FLOAT,"d Chemical Kinetic Coefficient of the Growing Phase (Lee-Tarver & Dyna-2D)");
    y_                              = VALUE(FLOAT,"y Chemical Kinetic Coefficient of the Growing Phase (Lee-Tarver & Dyna-2D)");
    c_                              = VALUE(FLOAT,"c Chemical Kinetic Coefficient of the Growing Phase (Dyna-2D)");
    //
    Kn                              = VALUE(FLOAT,"Numerical Limiters Coefficient (Lee-Tarver & Dyna-2D)");
    chi                             = VALUE(FLOAT,"Numerical Limiters Coefficient (Dyna-2D)");
    MAT_Tol                         = VALUE(FLOAT,"Numerical Limiters Coefficient (Dyna-2D)");
    //
    g2                              = VALUE(FLOAT,"G2 Growing Phase 2 Coefficient (Dyna-2D)");
    e_                              = VALUE(FLOAT,"e Growing Phase 2 Coefficient (Dyna-2D)");
    g_                              = VALUE(FLOAT,"g Growing Phase 2 Coefficient (Dyna-2D)");
    z_                              = VALUE(FLOAT,"z Growing Phase 2 Coefficient (Dyna-2D)");
    //
    ccrit                           = VALUE(FLOAT,"Starting Threshold (for compression) (Dyna-2D)");
    figmax                          = VALUE(FLOAT,"Starting Threshold (massic fraction) (Dyna-2D)");
    fg1max                          = VALUE(FLOAT,"Coefficient (Dyna-2D)");
    fg2min                          = VALUE(FLOAT,"Coefficient (Dyna-2D)");
    //
    MAT_G0                          = VALUE(FLOAT,"Shear Modulus");
    T_Initial                       = VALUE(FLOAT,"Initial Temperature (K)");
    // HEAT
    Heat_Inp_opt                    = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT                 = VALUE(SUBOBJECT, "");
    // THERM_STRESS
    THERM_STRESS                    = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS             = VALUE(SUBOBJECT, "");
    ALE_Form                        = VALUE(INT, "Flag for Heat Transfer Formulation");
    SUBGRP_ALE_MAT                  = VALUE(SUBOBJECT, "");
    SUBGRP_EULER_MAT                = VALUE(SUBOBJECT, "");
    //
    IO_FLAG                         = VALUE(INT, "");
    LAW_NO                          = VALUE(STRING, "");
    Mat_Name_OR_LawNo               = VALUE(INT,  "RADIOSS_COMMENT_FLAG");
    TITLE                           = VALUE(STRING,"");
}


SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                     = 9000;
    COMMENTS                        = 5109;
    CommentEnumField                = 7951;
    MAT_REFRHO_Option               = 4285;
    MAT_RHO                         = 118;
    Refer_Rho                       = 4229;
    DUMMY                           = -1;
    C_vp                            = 4401;
    C_vr                            = 4400;
    Epsilon_0                       = 4198;
    Ireac                           = 4389;
    Kn                              = 843;
    MAT_G0                          = 304;
    MAT_Tol                         = 4102;
    NITRS                           = 7250;
    T_Initial                       = 4113;
    a_p                             = 4395;
    a_r                             = 4390;
    b_p                             = 4396;
    b_r                             = 4391;
    ccrit                           = 4416;
    ftol                            = 4403;
    chi                             = 4411;
    enq                             = 4402;
    b_                              = 4405;
    c_                              = 4410;
    e_                              = 4413;
    fg2min                          = 4419;
    fg1max                          = 4418;
    figmax                          = 4417;
    g2                              = 4412;
    r_1p                            = 4397;
    r_1r                            = 4392;
    r_2p                            = 4398;
    r_2r                            = 4393;
    r_3p                            = 4399;
    r_3r                            = 4394;
    x_                              = 4406;
    g1                              = 4407;
    I_                              = 4404;
    d_                              = 4408;
    g_                              = 4414;
    y_                              = 4409;
    z_                              = 4415;
    NUM_COMMENTS                           = 5110;
    //HEAT
    Heat_Inp_opt                    = 4346;
    SUBGRP_HEAT_MAT                        = -1;
    // THERM_STRESS
    THERM_STRESS                    = 4555;
    SUBGRP_THERM_STRESS                    = -1;
    ALE_Form                               = 4336;
    SUBGRP_ALE_MAT                         = -1;
    SUBGRP_EULER_MAT                       = -1;
    LAW_NO                                 = -1;
    Mat_Name_OR_LawNo                      = 4538;
    IO_FLAG                                = -1;
    TITLE                                  = -1;
}

DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY                         = SCALAR(MAT_RHO);
}

CHECK(COMMON)
{
    MAT_RHO                         > 0.0;
}

DEFAULTS(COMMON) {
    Ireac                           = 1;
    c_                              = 0.0;
    MAT_Tol                         = 0.0;
    g2                              = 0.0;
    e_                              = 0.0;
    g_                              = 0.0;
    z_                              = 0.0;
    ccrit                           = 0.0;
    figmax                          = 0.0;
    Heat_Inp_opt                    = 0;
    Epsilon_0                       = 1e-03;
    Kn                              = 99.0;
    NITRS                           = 80;
    ftol                            = 1e-05;
    chi                             = 99.0;
}

GUI(COMMON) {
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if(Mat_Name_OR_LawNo == 2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW41/");
    }
    else 
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LEE_TARVER/");
    }
    FLAG(MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho)      { DIMENSION="density";       }
    }
    mandatory:
    SCALAR(MAT_RHO)      { DIMENSION="density";            }

    optional:
    RADIO(Ireac) {
            ADD(1, "1: For Lee-Tarver");
            ADD(2, "2: For Dyna");
        }

        SEPARATOR("Reagents coefficients (JWL equation of state)");
    SCALAR(a_r)         { DIMENSION="pressure"; }
    SCALAR(b_r)         { DIMENSION="pressure"; }
    SCALAR(r_1r)        { DIMENSION="DIMENSIONLESS"; }
    SCALAR(r_2r)        { DIMENSION="DIMENSIONLESS"; }
    SCALAR(r_3r)        { DIMENSION="specificheat"; }
        SEPARATOR();
    //
        SEPARATOR("Product coefficients (JWL equation of state)");
    SCALAR(a_p)         { DIMENSION="pressure"; }
    SCALAR(b_p)         { DIMENSION="pressure"; }
    SCALAR(r_1p)        { DIMENSION="DIMENSIONLESS"; }
    SCALAR(r_2p)        { DIMENSION="DIMENSIONLESS"; }
    SCALAR(r_3p)        { DIMENSION="specificheat"; }
    SEPARATOR();
    //
    SCALAR(C_vr)        { DIMENSION="specificheat"; }
    SCALAR(C_vp)        { DIMENSION="specificheat"; }
    SCALAR(enq)         { DIMENSION="pressure"; }
    //
    SCALAR(NITRS)       { DIMENSION="DIMENSIONLESS"; }
    //SIZE(NITRS);
    SCALAR(Epsilon_0)   { DIMENSION="DIMENSIONLESS"; }
    SCALAR(ftol)        { DIMENSION="DIMENSIONLESS"; }
    //
        SEPARATOR("Chemical kinetic coeff. of the starting phase (Lee-T and Dyna-2D)");
    SCALAR(I_)      { DIMENSION="f"; }
    SCALAR(b_)      { DIMENSION="DIMENSIONLESS"; }
    SCALAR(x_)      { DIMENSION="DIMENSIONLESS"; }
        SEPARATOR();
    //
        SEPARATOR("Chemical kinetic coeff. of the growing phase (Lee-T and Dyna-2D)");
    SCALAR(g1)      { DIMENSION="CUSTOM_DIM_3<y_>"; }
    SCALAR(d_)      { DIMENSION="DIMENSIONLESS"; }
    SCALAR(y_)      { DIMENSION="DIMENSIONLESS"; }
        SEPARATOR();
    SCALAR(c_)     { DIMENSION="DIMENSIONLESS"; }
    //
    SCALAR(Kn)      { DIMENSION="DIMENSIONLESS"; }
    SCALAR(chi)     { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_Tol) { DIMENSION="DIMENSIONLESS"; }
    //
        SEPARATOR("Growing phase 2 coefficients (Dyna-2D)");
    SCALAR(g2)     { DIMENSION="CUSTOM_DIM_2<z_>"; }
    SCALAR(e_)     { DIMENSION="DIMENSIONLESS"; }
    SCALAR(g_)    { DIMENSION="DIMENSIONLESS"; }
    SCALAR(z_)    { DIMENSION="DIMENSIONLESS"; }
        SEPARATOR();
    //
    SCALAR(ccrit)    { DIMENSION="DIMENSIONLESS"; }
    SCALAR(figmax)   { DIMENSION="DIMENSIONLESS"; }
    SCALAR(fg1max)   { DIMENSION="DIMENSIONLESS"; }
    SCALAR(fg2min)   { DIMENSION="DIMENSIONLESS"; }

    //
    SCALAR(MAT_G0)    { DIMENSION="pressure"; }
    SCALAR(T_Initial) { DIMENSION="k"; }
        // HEAT data
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
            SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
        }

    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
            SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
        }
    /*
    graphical SUPPORT("Support") {
    OBJECTS=(/PART/QUAD,/PART/BRICK,/PART/TETRA4);
    ADD(PART,"Parts");
    }
    */
}

GUI(ALE) {
optional:
    graphical RADIO(ALE_Form) 
    {
        ADD(1,"NONE") ;
        ADD(2,"ALE") ;
        ADD(3,"EULER");
    }
    if(ALE_Form == 2)
    {
        SUBOBJECT(SUBGRP_ALE_MAT) {SUBTYPES = (/SUBOBJECT/ALE_MAT);}
    }
    else if(ALE_Form == 3)
    {
        SUBOBJECT(SUBGRP_EULER_MAT) {SUBTYPES = (/SUBOBJECT/EULER);}
    }
}



// File format
FORMAT(radioss2023) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW41/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/LEE_TARVER/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    //
    COMMENT("#    Ireac");
    CARD("%10d",Ireac);
    //
    COMMENT("#                 Ar                  Br                 R1r                 R2r                 R3r");
    CARD("%20lg%20lg%20lg%20lg%20lg", a_r, b_r, r_1r, r_2r, r_3r);
    //
    COMMENT("#                 Ap                  Bp                 R1p                 R2p                 R3p");
    CARD("%20lg%20lg%20lg%20lg%20lg", a_p, b_p, r_1p, r_2p, r_3p);
    //
    COMMENT("#                Cvr                 Cvp                 enq");
    CARD("%20lg%20lg%20lg", C_vr, C_vp, enq);
    //
    COMMENT("#     iter                           eps                Ftol");
    CARD("%10d          %20lg%20lg", NITRS, Epsilon_0, ftol);
    //
    COMMENT("#                  I                   b                   x");
    CARD("%20lg%20lg%20lg", I_, b_, x_);
    //
    COMMENT("#                 G1                   d                   y                   c");
    CARD("%20lg%20lg%20lg%20lg", g1, d_, y_, c_);
    //
    COMMENT("#              kappa                 khi                 tol");
    CARD("%20lg%20lg%20lg", Kn, chi, MAT_Tol);
    //
    COMMENT("#                 G2                   e                   g                   z");
    CARD("%20lg%20lg%20lg%20lg", g2, e_, g_, z_);
    //
    COMMENT("#                  a              Figmax              FG1max              FG2min");
    CARD("%20lg%20lg%20lg%20lg", ccrit, figmax, fg1max, fg2min);
    //
    COMMENT("#                  G                  Ti");
    CARD("%20lg%20lg", MAT_G0, T_Initial);
    //
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
    if(ALE_Form == 2)
    {
        SUBOBJECTS(SUBGRP_ALE_MAT,/SUBOBJECT/ALE_MAT);
    }
    else if(ALE_Form == 3)
    {
        SUBOBJECTS(SUBGRP_EULER_MAT,/SUBOBJECT/EULER);
    }
}
FORMAT(radioss100) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW41/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/LEE_TARVER/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    //
    COMMENT("#    Ireac");
    CARD("%10d",Ireac);
    //
    COMMENT("#                 Ar                  Br                 r1r                 r2r                 r3r");
    CARD("%20lg%20lg%20lg%20lg%20lg", a_r, b_r, r_1r, r_2r, r_3r);
    //
    COMMENT("#                 Ap                  bp                 r1p                 r2p                 r3p");
    CARD("%20lg%20lg%20lg%20lg%20lg", a_p, b_p, r_1p, r_2p, r_3p);
    //
    COMMENT("#                Cvr                 Cvp                 enq");
    CARD("%20lg%20lg%20lg", C_vr, C_vp, enq);
    //
    COMMENT("#     iter                           EPS               check");
    CARD("%10d          %20lg%20lg", NITRS, Epsilon_0, ftol);
    //
    COMMENT("#                rki                  ex                  ri");
    CARD("%20lg%20lg%20lg", I_, b_, x_);
    //
    COMMENT("#                rkg                  yg                  zg                 ex1");
    CARD("%20lg%20lg%20lg%20lg", g1, d_, y_, c_);
    //
    COMMENT("#                  k                   x                 tol");
    CARD("%20lg%20lg%20lg", Kn, chi, MAT_Tol);
    //
    COMMENT("#              grow2                 ex2                 yg2                 zg2");
    CARD("%20lg%20lg%20lg%20lg", g2, e_, g_, z_);
    //
    COMMENT("#              ccrit               fmxig               fmxgr               fmngr");
    CARD("%20lg%20lg%20lg%20lg", ccrit, figmax, fg1max, fg2min);
    //
    COMMENT("#                  G                  Ti");
    CARD("%20lg%20lg", MAT_G0, T_Initial);
    //
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
    if(ALE_Form == 2)
    {
        SUBOBJECTS(SUBGRP_ALE_MAT,/SUBOBJECT/ALE_MAT);
    }
    else if(ALE_Form == 3)
    {
        SUBOBJECTS(SUBGRP_EULER_MAT,/SUBOBJECT/EULER);
    }
}

FORMAT(radioss51) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#        Init. dens.          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#        Init. dens.");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#    IREAC");
    CARD("%10d",Ireac);
    //
    COMMENT("#                 AR                  BR                 R1R                 R2R                 R3R");
    CARD("%20lg%20lg%20lg%20lg%20lg", a_r, b_r, r_1r, r_2r, r_3r);
    //
    COMMENT("#                 AP                  BP                 R1P                 R2P                 R3P");
    CARD("%20lg%20lg%20lg%20lg%20lg", a_p, b_p, r_1p, r_2p, r_3p);
    //
    COMMENT("#                CVR                 CVP                 ENQ");
    CARD("%20lg%20lg%20lg", C_vr, C_vp, enq);
    //
    COMMENT("#     ITER                           EPS               CHECK");
    CARD("%10d          %20lg%20lg", NITRS, Epsilon_0, ftol);
    //
    COMMENT("#                RKI                  EX                  RI");
    CARD("%20lg%20lg%20lg", I_, b_, x_);
    //
    COMMENT("#                RKG                  YG                  ZG                 EX1");
    CARD("%20lg%20lg%20lg%20lg", g1, d_, y_, c_);
    //
    COMMENT("#                  K                  XI                 TOL");
    CARD("%20lg%20lg%20lg", Kn, chi, MAT_Tol);
    //
    COMMENT("#              GROW2                 EX2                 YG2                 ZG2");
    CARD("%20lg%20lg%20lg%20lg", g2, e_, g_, z_);
    //
    COMMENT("#              CCRIT               FMXIG               FMXGR               FMNGR");
    CARD("%20lg%20lg%20lg%20lg", ccrit, figmax, fg1max, fg2min);
    //
    COMMENT("#                  G                  TI");
    CARD("%20lg%20lg", MAT_G0, T_Initial);
    //
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
    if(ALE_Form == 2)
    {
        SUBOBJECTS(SUBGRP_ALE_MAT,/SUBOBJECT/ALE_MAT);
    }
    else if(ALE_Form == 3)
    {
        SUBOBJECTS(SUBGRP_EULER_MAT,/SUBOBJECT/EULER);
    }
}
