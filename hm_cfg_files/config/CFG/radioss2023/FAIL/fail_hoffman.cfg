//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//FAIL/HOFFMAN
//


ATTRIBUTES(COMMON){ 

    _HMCOMMENTSFLAG         = VALUE(INT, "Write HM Comments");
	  id   		                = VALUE(INT, "Id of this Card") ;
	  mat_id           		    = VALUE(MAT, "Material");

    SIGMA_1T                = VALUE( FLOAT, "Longitudinal tensile strength") ;
    SIGMA_2T                = VALUE( FLOAT, "Transverse tensile strength") ;
    SIGMA_1C                = VALUE( FLOAT, "Longitudinal compressive strength") ;
    SIGMA_2C                = VALUE( FLOAT, "Transverse compressive strength") ;
    SIGMA_12                = VALUE( FLOAT, "Shear strength") ;
    
    TAU_MAX                 = VALUE( FLOAT, "Dynamic time relaxation") ;
    FCUT                    = VALUE( FLOAT, "Cutoff frequency for stress tensor");
    IFAIL_SH                = VALUE( INT,   "Flag for shell failure model") ;
    IFAIL_SO                = VALUE( INT,   "Flag for solid failure model") ;
  
    ID_CARD_EXIST           = VALUE(BOOL, "Give an Id");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    _HMCOMMENTSFLAG=-1;
}

GUI(COMMON){ 
mandatory:
  SCALAR (SIGMA_1T)      {DIMENSION="pressure"; }
  SCALAR (SIGMA_2T)      {DIMENSION="pressure"; }
  SCALAR (SIGMA_12)      {DIMENSION="pressure"; }
  SCALAR (SIGMA_1C)      {DIMENSION="pressure"; }
  SCALAR (SIGMA_2C)      {DIMENSION="pressure"; }
  SCALAR (TAU_MAX)       {DIMENSION="t"; }
  SCALAR (FCUT)          {DIMENSION="f"; }
optional:
  RADIO(IFAIL_SH){
    ADD(1,"Shell deleted, if damage is reached for one layer")  ;
    ADD(2,"Shell deleted, if damage is reached for all layers") ;
    ADD(3,"Shell not deleted") ;
  }
  RADIO(IFAIL_SO){
    ADD(1,"Solid deleted, if damage is reached for one integration point") ;
    ADD(2,"Solid deleted, if damage is reached for all integration point") ;
    ADD(3,"Solid not deleted") ;
  }
  FLAG(ID_CARD_EXIST);
}


FORMAT(radioss2023) { 
    HEADER("/FAIL/HOFFMAN/%d",mat_id);
    COMMENT("#           SIGMA_1T            SIGMA_2T            SIGMA_1C            SIGMA_2C            SIGMA_12") ;
    CARD("%20lg%20lg%20lg%20lg%20lg",SIGMA_1T,SIGMA_2T,SIGMA_1C,SIGMA_2C,SIGMA_12);
    COMMENT("#           TAU_MAX                FCUT                                           IFAIL_SH  IFAIL_SO") ;
    CARD("%20lg%20lg%40s%10d%10d",TAU_MAX,FCUT,_BLANK_,IFAIL_SH,IFAIL_SO);   
    if (ID_CARD_EXIST==TRUE)
    {
     COMMENT("#   FAIL_ID") ;
    }
    FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);
} 