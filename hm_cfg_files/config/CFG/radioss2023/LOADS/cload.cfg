//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Concentrated load Setup File
// 

ATTRIBUTES(COMMON) {
  // Data
  collector        = VALUE(LOADCOL, "SID");
  rad_dir          = VALUE(STRING,   "Direction of load"); 
  inputsystem      = VALUE(SYSTEM,  "Skew");
  curveid          = VALUE(FUNCT, "Time function");
  rad_sensor_id    = VALUE(SENSOR,"Sensor");
  xscale           = VALUE(FLOAT, "X-Scale factor");
  magnitude        = VALUE(FLOAT, "Y-Scale factor");
  displayname            = VALUE(STRING, "Title");
  // Support
  entityid         = VALUE(SETS, "Node group to which the concentrated loads are applied") { SUBTYPES = (/SETS/GRNOD); }
  //NB_NODES       = SIZE("Number of additional nodes");
  //NODE           = ARRAY[NB_NODES](NODE,"Additional nodes");
   crash_dir_flag  = VALUE(UINT, "Direction component selection");
   vector_X        = VALUE(FLOAT, "N1"); 
   vector_Y        = VALUE(FLOAT, "N2"); 
   vector_Z        = VALUE(FLOAT, "N3"); 
   MAX_ID_FLAG     = VALUE(INT, "Max available id flag");
   MAX_ID_AVAIL    = VALUE(INT, "Max Available Id");
   LOCAL_MAGNITUDE = VALUE(FLOAT, "Local Variable for magnitude");
   functype        = VALUE(INT, "Function type abscisa");
}

DEFINITIONS(COMMON) {
  //MAINS=(NODE);
 _TRIPLE           = (vector_X);
}
SKEYWORDS_IDENTIFIER(COMMON)
{
  MAX_ID_FLAG = -1;
}
PARAMETERS(PARAMETERS) {
  magnitude = INPUT_SCALAR(magnitude,"Scale factor");   
}

DEFAULTS(COMMON) {
  rad_dir    = "X";
  xscale     = 1.;
  magnitude  = 1.;
  functype   = 1;
}

GUI(COMMON) {
 mandatory:
  RADIO(rad_dir) {
    ADD("X",  "X  (force)");
    ADD("Y",  "Y  (force)");
    ADD("Z",  "Z  (force)");
    ADD("XX", "XX (moment)");
    ADD("YY", "YY (moment)");
    ADD("ZZ", "ZZ (moment)");
  }
 
  // workaround to fix evaluation of conditions
  RADIO(crash_dir_flag) {
    ADD(0, "Export Y-Scale factor");
    ADD(1, "Export local magnitude");
  }

  //SCALAR(xscale)          { DIMENSION = "t"; }
  
  if(functype == 1)
  {
    SCALAR(xscale)          { DIMENSION = "t"; }
  }
  else if(functype == 2)
  {
    SCALAR(xscale)          { DIMENSION = "l"; }
  }
  else if(functype == 3)
  {
    SCALAR(xscale)          { DIMENSION = "velocity"; }
  }
  
  SCALAR(magnitude) {  
      if(rad_dir == "X" || rad_dir == "Y" || rad_dir == "Z") {DIMENSION = "force"; }  
      else {DIMENSION = "moment"; }
  }
  FUNCTION(curveid) {    
     X_TITLE = "Time";
     
     if(rad_dir == "X" || rad_dir == "Y" || rad_dir == "Z") {    
       TITLE = "Force"; 
       Y_TITLE = "Force";
     } else {
       TITLE = "Moment"; 
       Y_TITLE = "Moment";
     }       
       
     X_SCALING(xscale);    Y_SCALING(magnitude);
     X_CAN_BE_NEGATIVE = FALSE;
  }  
/*
  //
 optional:
  graphical TOOL(inputsystem);
  TOOL(rad_sensor_id);
*/
 
 //mandatory:
 // graphical SUPPORT("Support") {
 //   OBJECTS=(NODE,ELEMENTS,COMPONENT);
 //   ADD(entityid, "Node group");
 //   ADD(NODE   ,"Additional nodes");
 // }
}

FORMAT(radioss2023) {
  ASSIGN(MAX_ID_FLAG, 0, EXPORT);
  if(crash_dir_flag == 0)
  {
    HEADER("/CLOAD/%-d",_ID_);
    CARD("%-100s", displayname);
    COMMENT("#funct_IDT       Dir   skew_ID sensor_ID  grnod_ID   Itypfun             Ascalex             Fscaley");
    CARD("%10d%10s%10d%10d%10d%10d%20lg%20lg",curveid,rad_dir,inputsystem,rad_sensor_id,entityid,functype,xscale,magnitude);
  }
  if(crash_dir_flag == 1 && vector_X != 0)
  {
    HEADER("/CLOAD/%-d",_ID_);
	  CARD("%-100s", displayname);
	  ASSIGN(MAX_ID_FLAG, 1 , EXPORT);
	  ASSIGN(LOCAL_MAGNITUDE, _MUL(vector_X,magnitude), EXPORT);
	  COMMENT("#funct_IDT       Dir   skew_ID sensor_ID  grnod_ID   Itypfun             Ascalex             Fscaley");
    CARD("%10d         X%10d%10d%10d%10d%20lg%20lg",curveid,inputsystem,rad_sensor_id,entityid,functype,xscale,LOCAL_MAGNITUDE);
  }
  if(crash_dir_flag == 1 && vector_Y != 0 && MAX_ID_FLAG == 0)
  {
    HEADER("/CLOAD/%-d",_ID_);
	  CARD("%-100s", displayname);
    ASSIGN(MAX_ID_FLAG, 1 , EXPORT);
	  ASSIGN(LOCAL_MAGNITUDE, _MUL(vector_Y,magnitude), EXPORT);
	  COMMENT("#funct_IDT       Dir   skew_ID sensor_ID  grnod_ID   Itypfun             Ascalex             Fscaley");
    CARD("%10d         Y%10d%10d%10d%10d%20lg%20lg",curveid,inputsystem,rad_sensor_id,entityid,functype,xscale,LOCAL_MAGNITUDE);
  }
  else if(crash_dir_flag == 1 && vector_Y != 0 && MAX_ID_FLAG == 1)
  {
    ASSIGN(MAX_ID_AVAIL ,_GET_NEXT_MAX_AVAILABLE_ID(), EXPORT);
    HEADER("/CLOAD/%-d",MAX_ID_AVAIL);
    ASSIGN(MAX_ID_FLAG, 1 , EXPORT);
	  CARD("%-100s", displayname);
	  ASSIGN(LOCAL_MAGNITUDE, _MUL(vector_Y,magnitude), EXPORT);
	  COMMENT("#funct_IDT       Dir   skew_ID sensor_ID  grnod_ID   Itypfun             Ascalex             Fscaley");
    CARD("%10d         Y%10d%10d%10d%10d%20lg%20lg",curveid,inputsystem,rad_sensor_id,entityid,functype,xscale,LOCAL_MAGNITUDE);
  }
  if(crash_dir_flag == 1 && vector_Z != 0 && MAX_ID_FLAG == 0)
  {
    HEADER("/CLOAD/%-d",_ID_);
	  CARD("%-100s", displayname);
    ASSIGN(MAX_ID_FLAG, 1 , EXPORT);
	  ASSIGN(LOCAL_MAGNITUDE, _MUL(vector_Z,magnitude), EXPORT);
	  COMMENT("#funct_IDT       Dir   skew_ID sensor_ID  grnod_ID   Itypfun             Ascalex             Fscaley");
    CARD("%10d         Z%10d%10d%10d%10d%20lg%20lg",curveid,inputsystem,rad_sensor_id,entityid,functype,xscale,LOCAL_MAGNITUDE);
  }
  else if(crash_dir_flag == 1 && vector_Z != 0 && MAX_ID_FLAG == 1)
  {
    ASSIGN(MAX_ID_AVAIL ,_GET_NEXT_MAX_AVAILABLE_ID(), EXPORT);
    HEADER("/CLOAD/%-d",MAX_ID_AVAIL);
    ASSIGN(MAX_ID_FLAG, 1 , EXPORT);
	  CARD("%-100s", displayname);
	  ASSIGN(LOCAL_MAGNITUDE, _MUL(vector_Z,magnitude), EXPORT);
	  COMMENT("#funct_IDT       Dir   skew_ID sensor_ID  grnod_ID   Itypfun             Ascalex             Fscaley");
    CARD("%10d         Z%10d%10d%10d%10d%20lg%20lg",curveid,inputsystem,rad_sensor_id,entityid,functype,xscale,LOCAL_MAGNITUDE);
  }
}

FORMAT(radioss51) {
  
  ASSIGN(MAX_ID_FLAG, 0, EXPORT);
  if(crash_dir_flag == 0)
  {
    HEADER("/CLOAD/%-d",_ID_);
    CARD("%-100s", displayname);
    COMMENT("#funct_IDT       Dir   skew_ID sensor_ID  grnod_ID                       Ascalex             Fscaley");
    CARD("%10d%10s%10d%10d%10d          %20lg%20lg",curveid,rad_dir,inputsystem,rad_sensor_id,entityid,xscale,magnitude);
  }
  if(crash_dir_flag == 1 && vector_X != 0)
  {
    HEADER("/CLOAD/%-d",_ID_);
	CARD("%-100s", displayname);
	ASSIGN(MAX_ID_FLAG, 1 , EXPORT);
	ASSIGN(LOCAL_MAGNITUDE, _MUL(vector_X,magnitude), EXPORT);
	COMMENT("#funct_IDT       Dir   skew_ID sensor_ID  grnod_ID                       Ascalex             Fscaley");
    CARD("%10d         X%10d%10d%10d          %20lg%20lg",curveid,inputsystem,rad_sensor_id,entityid,xscale,LOCAL_MAGNITUDE);
  }
  if(crash_dir_flag == 1 && vector_Y != 0 && MAX_ID_FLAG == 0)
  {
    HEADER("/CLOAD/%-d",_ID_);
	CARD("%-100s", displayname);
    ASSIGN(MAX_ID_FLAG, 1 , EXPORT);
	ASSIGN(LOCAL_MAGNITUDE, _MUL(vector_Y,magnitude), EXPORT);
	COMMENT("#funct_IDT       Dir   skew_ID sensor_ID  grnod_ID                       Ascalex             Fscaley");
    CARD("%10d         Y%10d%10d%10d          %20lg%20lg",curveid,inputsystem,rad_sensor_id,entityid,xscale,LOCAL_MAGNITUDE);
  }
  else if(crash_dir_flag == 1 && vector_Y != 0 && MAX_ID_FLAG == 1)
  {
    ASSIGN(MAX_ID_AVAIL ,_GET_NEXT_MAX_AVAILABLE_ID(), EXPORT);
    HEADER("/CLOAD/%-d",MAX_ID_AVAIL);
    ASSIGN(MAX_ID_FLAG, 1 , EXPORT);
	CARD("%-100s", displayname);
	ASSIGN(LOCAL_MAGNITUDE, _MUL(vector_Y,magnitude), EXPORT);
	COMMENT("#funct_IDT       Dir   skew_ID sensor_ID  grnod_ID                       Ascalex             Fscaley");
    CARD("%10d         Y%10d%10d%10d          %20lg%20lg",curveid,inputsystem,rad_sensor_id,entityid,xscale,LOCAL_MAGNITUDE);
  }
  if(crash_dir_flag == 1 && vector_Z != 0 && MAX_ID_FLAG == 0)
  {
    HEADER("/CLOAD/%-d",_ID_);
	CARD("%-100s", displayname);
    ASSIGN(MAX_ID_FLAG, 1 , EXPORT);
	ASSIGN(LOCAL_MAGNITUDE, _MUL(vector_Z,magnitude), EXPORT);
	COMMENT("#funct_IDT       Dir   skew_ID sensor_ID  grnod_ID                       Ascalex             Fscaley");
    CARD("%10d         Z%10d%10d%10d          %20lg%20lg",curveid,inputsystem,rad_sensor_id,entityid,xscale,LOCAL_MAGNITUDE);
  }
  else if(crash_dir_flag == 1 && vector_Z != 0 && MAX_ID_FLAG == 1)
  {
    ASSIGN(MAX_ID_AVAIL ,_GET_NEXT_MAX_AVAILABLE_ID(), EXPORT);
    HEADER("/CLOAD/%-d",MAX_ID_AVAIL);
    ASSIGN(MAX_ID_FLAG, 1 , EXPORT);
	CARD("%-100s", displayname);
	ASSIGN(LOCAL_MAGNITUDE, _MUL(vector_Z,magnitude), EXPORT);
	COMMENT("#funct_IDT       Dir   skew_ID sensor_ID  grnod_ID                       Ascalex             Fscaley");
    CARD("%10d         Z%10d%10d%10d          %20lg%20lg",curveid,inputsystem,rad_sensor_id,entityid,xscale,LOCAL_MAGNITUDE);
  }
}

FORMAT(radioss41) {
  HEADER("/CLOAD/%-10d/%-40s",_ID_, displayname);
  COMMENT("# Ifunct     DIR   Iskew Isensor           Scale Gnod_id");
  CARD("%8d%8s%8d%8d%16lg%8d",curveid,rad_dir,inputsystem,rad_sensor_id,magnitude,entityid);

}
