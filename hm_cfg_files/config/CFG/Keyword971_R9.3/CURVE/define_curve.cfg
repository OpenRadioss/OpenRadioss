//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//  DEFINE_CURVE
// 

//LSD_SIDR LSD_SFA LSD_SFO LSD_OFFA LSD_OFFO LSD_DATTYP LSD_LCINT 
ATTRIBUTES(COMMON) 
{
    TITLE            = VALUE(STRING,"Title");
    LSD_SIDR         = VALUE(INT,"Stress init. by dynamic relax.");
    LSD_SFA          = VALUE(FLOAT,"Scale factor for abscissa value");
    LSD_SFO          = VALUE(FLOAT,"Scale factor for ordinate value (function)");
    LSD_OFFA         = VALUE(FLOAT,"Offset for abscissa values");
    LSD_OFFO         = VALUE(FLOAT,"Offset for ordinate values (function)");
    LSD_DATTYP       = VALUE(INT,"Data type");
    LSD_LCINT        = VALUE(INT,"The number of discretization intervals to use for this curve");
    numberofpoints   = SIZE("Number of points");  
    points           = ARRAY[numberofpoints](FLOAT, "X value");
    LSD_TitleOpt     = VALUE(INT,"Title option");

    // HM INTERNAL
    KEYWORD_STR = VALUE(STRING, "Solver Keyword");
    IO_FLAG     = VALUE(INT, "IO Flag");
}

//510 511 512 513 514 515 2249
SKEYWORDS_IDENTIFIER(COMMON)
{
    LSD_SIDR       = 510;
    LSD_SFA        = 511;
    LSD_SFO        = 512;
    LSD_OFFA       = 513;
    LSD_OFFO       = 514;
    LSD_DATTYP     = 515;
    LSD_LCINT      = 2249;
    LSD_TitleOpt   = 90;

    KEYWORD_STR  = -1;
    IO_FLAG      = -1;
}
DEFAULTS(COMMON)
{
    LSD_SFA    = 1.0;
    LSD_SFO    = 1.0;
}

GUI(COMMON) 
{
    FLAG(LSD_TitleOpt,"");
    if(LSD_TitleOpt == 0) 
    {
        ASSIGN(KEYWORD_STR,"DEFINE_CURVE");
    }
    else
    {
        ASSIGN(KEYWORD_STR,"DEFINE_CURVE_TITLE");
    }
    
    SCALAR(LSD_SIDR);
    SCALAR(LSD_SFA);
    SCALAR(LSD_SFO);
    SCALAR(LSD_OFFA);
    SCALAR(LSD_OFFO);
    SCALAR(LSD_DATTYP);
}

// File format
FORMAT(Keyword971_R9.3) 
{
    ASSIGN(IO_FLAG, 0, IMPORT);
    ASSIGN(IO_FLAG, 1, EXPORT);

    if(IO_FLAG==1)
    {
        if(LSD_TitleOpt == 1)
        {
            HEADER("*DEFINE_CURVE_TITLE");
            CARD("%-80s",TITLE);
        }
        else
        {
            HEADER("*DEFINE_CURVE");
        }
    }

    COMMENT("$     LCID      SIDR       SFA       SFO      OFFA      OFFO    DATTYP     LCINT");
    CARD("%10d%10d%10lg%10lg%10lg%10lg%10d%10d",_ID_,LSD_SIDR,LSD_SFA,LSD_SFO,LSD_OFFA,LSD_OFFO,LSD_DATTYP,LSD_LCINT);
    COMMENT("$                 A1                  O1");
    FREE_CARD_LIST(numberofpoints)
    {
        CARD("%20lg",CELL_PAIR(points));
    }
}

FORMAT(Keyword971_R6.1)
{
    ASSIGN(IO_FLAG, 0, IMPORT);
    ASSIGN(IO_FLAG, 1, EXPORT);

    if(IO_FLAG==1)
    {
        if(LSD_TitleOpt == 1)
        {
            HEADER("*DEFINE_CURVE_TITLE");
            CARD("%-80s",TITLE);
        }
        else
        {
            HEADER("*DEFINE_CURVE");
        }
    }

    COMMENT("$     LCID      SIDR       SFA       SFO      OFFA      OFFO    DATTYP");
    CARD("%10d%10d%10lg%10lg%10lg%10lg%10d",_ID_,LSD_SIDR,LSD_SFA,LSD_SFO,LSD_OFFA,LSD_OFFO,LSD_DATTYP);
    FREE_CARD_LIST(numberofpoints)
    {
        CARD("%20lg",CELL_PAIR(points));
    }
}