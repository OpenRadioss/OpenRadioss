//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- control_implicit_solution.cfg ---
//		control cards	control_implicit_solution	3141	9.3
//		 07/04/2020

// CONTROL_IMPLICIT_SOLUTION - CONTROL_IMPLICIT_SOLUTION_DYN - CONTROL_IMPLICIT_SOLUTION_SPR

ATTRIBUTES(COMMON)
{
    // INPUT ATTRIBUTES
    // First card
    LSD_LSOLVR                              = VALUE(INT,    "Solution method for implicit analysis");
    LSD_ILIMIT                              = VALUE(INT,    "Iteration limit between automatic stiffness reformations");
    LSD_MAXREF                              = VALUE(INT,    "Stiffness reformation limit per time step");
    LSD_DCTOL                               = VALUE(FLOAT,  "Displacement relative convergence tolerance");
    LSD_ECTOL                               = VALUE(FLOAT,  "Energy relative convergence tolerance");
    LSD_RCTOL                               = VALUE(FLOAT,  "Residual (force) relative convergence tolerance");
    LSD_LSTOL                               = VALUE(FLOAT,  "Line search convergence tolerance");
    LSD_ABSTOL                              = VALUE(FLOAT,  "Absolute convergence tolerance");

    // Optional card 2
    LSD_DNORM                               = VALUE(INT,    "Displacement norm for convergence test");
    LSD_DIVERG                              = VALUE(INT,    "Divergence flag (force imbalance increase during equilibrium iterations)");
    LSD_ISTIF                               = VALUE(INT,    "Initial stiffness formation flag");
    LSD_NLPRINT                             = VALUE(INT,    "Nonlinear solver print flag");
    LSD_NLNORM                              = VALUE(INT,    "Nonlinear convergence norm type");
    LSD_NLNORM2                             = VALUE(FLOAT,  "Nonlinear convergence norm type");
    LSD_D3ITCTL                             = VALUE(INT,    "Control D3ITER database");
    LSD_CPCHK                               = VALUE(INT,    "Contact penetration check flag");

    // Optional card 3
    LSD_ARCCTL                              = VALUE(INT,    "Arc length controlling node ID");
    LSD_ARCDIR                              = VALUE(INT,    "Arc length controlling node direction");
    LSD_ARCLEN                              = VALUE(FLOAT,  "Relative arc length size");
    LSD_ARCMTH                              = VALUE(INT,    "Arc length method");
    LSD_ARCDMP                              = VALUE(INT,    "Arc length damping option");
    LSD_ARCPSI                              = VALUE(FLOAT,  "Relative influence of load/time parameter in spherical arclength constraint");
    LSD_ARCALF                              = VALUE(FLOAT,  "Relative influence of predictor step direction for positioning of the arc center");
    LSD_ARCTIM                              = VALUE(FLOAT,  "Optional time when arclength method is initiated");

    // Optional card 4
    LSD_LSTMD                               = VALUE(INT,    "Line search convergence method");
    LSD_LSDIR                               = VALUE(INT,    "Line search direction method");
    LSD_IRAD                                = VALUE(FLOAT,  "Normalized curvature factor for curved line search, where 0 indicates a straight line search and 1 indicates full curved line search");
    LSD_SRAD                                = VALUE(FLOAT,  "Radius of influence for determining curve in curved line search");
    LSD_AWGT                                = VALUE(FLOAT,  "Adaptive line search weight factor between 0 and 1");
    LSD_SRED                                = VALUE(FLOAT,  "Initial step reduction between 0 and 1 for adaptive line search");
    
    // HM INTERNAL
    Option1                                 = VALUE(INT,    "Options");
    ImpSolnOptCard2                         = VALUE(INT,    "OptionalCard2");
    ImpSolnOptCard3                         = VALUE(INT,    "OptionalCard3");
    ImpSolnOptCard4                         = VALUE(INT,    "OptionalCard4");
    LSD_NEG_NLNORM                          = VALUE(INT,    "Negative_NLNORM");

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    _HAS_HEADER                             = VALUE(BOOL,   "");
    IOFLAG                                  = VALUE(INT,    "Import/Export flag");
    option                                  = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    // First card
    LSD_LSOLVR                              = 3153;
    LSD_ILIMIT                              = 3157;
    LSD_MAXREF                              = 3158;
    LSD_DCTOL                               = 3159;
    LSD_ECTOL                               = 3160;
    LSD_RCTOL                               = 4472;
    LSD_LSTOL                               = 3161;
    LSD_ABSTOL                              = 2253;

    // Optional card 2
    LSD_DNORM                               = 3163;
    LSD_DIVERG                              = 3164;
    LSD_ISTIF                               = 3165;
    LSD_NLPRINT                             = 3166;
    LSD_NLNORM                              = 4557;
    LSD_NLNORM2                             = 1910;
    LSD_D3ITCTL                             = 2260;
    LSD_CPCHK                               = 885;

    // Optional card 3
    LSD_ARCCTL                              = 3167;
    LSD_ARCDIR                              = 3168;
    LSD_ARCLEN                              = 3169;
    LSD_ARCMTH                              = 3170;
    LSD_ARCDMP                              = 3171;
    LSD_ARCPSI                              = 886;
    LSD_ARCALF                              = 887;
    LSD_ARCTIM                              = 888;

    // Optional card 4
    LSD_LSTMD                               = 2262;
    LSD_LSDIR                               = 2263;
    LSD_IRAD                                = 2264;
    LSD_SRAD                                = 2265;
    LSD_AWGT                                = 2266;
    LSD_SRED                                = 2267;

    // HM INTERNAL
    Option1                                 = 686;
    ImpSolnOptCard2                         = 4127;
    ImpSolnOptCard3                         = 4128;
    ImpSolnOptCard4                         = 2261;
    LSD_NEG_NLNORM                          = 1908;
    
    KEYWORD_STR                             = 9000;
    _HAS_HEADER                             = -1;
    IOFLAG                                  = -1;
    option                                  = -1;
}

CHECK(COMMON)
{
    LSD_IRAD                                  >=0.0;
    LSD_IRAD                                  <=1.0;

    LSD_AWGT                                  >=0.0;
    LSD_AWGT                                  <=1.0;
    
    LSD_SRED                                  >=0.0;
    LSD_SRED                                  <=1.0;

    LSD_NLNORM2                               < 0.0;
}

DEFAULTS(COMMON)
{
    LSD_LSOLVR      = 2;
    LSD_ILIMIT      = 11;
    LSD_MAXREF      = 15;
    LSD_DCTOL       = 0.001;
    LSD_ECTOL       = 0.01;
    LSD_RCTOL       = 1.0E+10;
    LSD_LSTOL       = 0.90;
    LSD_ABSTOL      = 10e-11;

    LSD_DNORM       = 2;
    LSD_DIVERG      = 1;
    LSD_ISTIF       = 1;
    LSD_NLPRINT     = 0;
    LSD_NLNORM      = 2;
    LSD_D3ITCTL     = 0;
    LSD_CPCHK       = 0;

    LSD_ARCCTL      = 0;
    LSD_ARCLEN      = 0;
    LSD_ARCMTH      = 1;
    LSD_ARCDMP      = 2;
    LSD_ARCPSI      = 0.0;
    LSD_ARCALF      = 0.0;
    LSD_ARCTIM      = 0.0;
    
    LSD_LSTMD       = 1;
    LSD_LSDIR       = 2;
    LSD_IRAD        = 0.0;
    LSD_SRAD        = 0.0;
    LSD_AWGT        = 0.0;
    LSD_SRED        = 0.0;

    _HAS_HEADER     = TRUE;
}

GUI(COMMON)
{
mandatory:
    RADIO(Option1)
    {
        ADD(1, "BLANK");
        ADD(2, "DYN");
        ADD(3, "SPR");
    }
optional:
    if (Option1 == 1)
    {
        ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_SOLUTION");
    } else if (Option1 == 2) {
        ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_SOLUTION_DYN");
    } else if (Option1 == 3) {
        ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_SOLUTION_SPR");
    }

    RADIO(LSD_LSOLVR, "NSOLVR")
    {
        ADD(1, "1: Linear");
        ADD(12, "12: Nonlinear with BFGS updates + optional arclength, (default) incorporating different line search and integration schemes compared to solver 2");
        ADD(2, "2: Nonlinear with BFGS updates (obsolete)");
        ADD(3, "3: Nonlinear with Broyden updates");
        ADD(4, "4: Nonlinear with DFP updates");
        ADD(5, "5: Nonlinear with Davidon updates");
        ADD(6, "6: Nonlinear with BFGS updates + arclength");
        ADD(7, "7: Nonlinear with Broyden updates + arclength");
        ADD(8, "8: Nonlinear with DFP updates + arclength");
        ADD(9, "9: Nonlinear with Davidon updates + arclength");
    }
    SCALAR(LSD_ILIMIT, "ILIMIT") {DIMENSION ="DIMENSIONLESS";}
    SCALAR(LSD_MAXREF, "MAXREF") {DIMENSION ="DIMENSIONLESS";}
    SCALAR(LSD_DCTOL,  "DCTOL")  {DIMENSION ="DIMENSIONLESS";}
    SCALAR(LSD_ECTOL,  "ECTOL")  {DIMENSION ="DIMENSIONLESS";}
    SCALAR(LSD_RCTOL,  "RCTOL")  {DIMENSION ="DIMENSIONLESS";}
    SCALAR(LSD_LSTOL,  "LSTOL")  {DIMENSION ="DIMENSIONLESS";}
    SCALAR(LSD_ABSTOL, "ABSTOL") {DIMENSION ="DIMENSIONLESS";}

    FLAG(ImpSolnOptCard2);

    if (ImpSolnOptCard2 != FALSE)
    {
        SEPARATOR("OptionalCard2");

        RADIO(LSD_DNORM, "DNORM")
        {
            ADD(1, "1: Increment vs. displacement over current step");
            ADD(2, "2: Increment vs. total displacement (default)");
        }
        RADIO(LSD_DIVERG, "DIVERG")
        {
            ADD(1, "1: reform stiffness if divergence detected (default)");
            ADD(2, "2: ignore divergence");
        }
        SCALAR(LSD_ISTIF, "ISTIF") {DIMENSION ="DIMENSIONLESS";}
        RADIO(LSD_NLPRINT, "NLPRINT")
        {
            ADD(0, "0: no nonlinear iteration information printed (new v970 default)");
            ADD(1, "1: print iteration information to screen, message, d3hsp files");
            ADD(2, "2: print extra norm information (NLNORM=1)");
            ADD(3, "3: same as 2, but also print information from line search");
        }

        FLAG(LSD_NEG_NLNORM);
    }    
    
    if (ImpSolnOptCard2 != FALSE && LSD_NEG_NLNORM == 0)
    {
        RADIO(LSD_NLNORM, "NLNORM")
        {
            ADD(1, "1: consider translational and rotational degrees of freedom");
            ADD(2, "2: consider translational degrees of freedom only (default)");
            ADD(4, "4: consider sum of translational and rotational degrees of freedom, i.e., no separate treatment");
        }
    } else if (ImpSolnOptCard2 != FALSE && LSD_NEG_NLNORM == 1)
    {
        SCALAR(LSD_NLNORM2, "NLNORM") {DIMENSION ="DIMENSIONLESS";}
    }

    if (ImpSolnOptCard2 != FALSE)
    {
        SCALAR(LSD_D3ITCTL, "D3ITCTL") {DIMENSION="DIMENSIONLESS";}
        RADIO(LSD_CPCHK, "CPCHK")
        {
            ADD(0, "0: no contact penetration is performed (default)");
            ADD(1, "1: check for contact penetration during the nonlinear solution procedure");
        }
    }

    if((ImpSolnOptCard2 != FALSE) && (((LSD_LSOLVR >= 6) && (LSD_LSOLVR <= 9)) || (LSD_LSOLVR == 12)))
    {
        FLAG(ImpSolnOptCard3);
    } 
    
    if((ImpSolnOptCard2 != FALSE) && (ImpSolnOptCard3 != FALSE) && (((LSD_LSOLVR >= 6) && (LSD_LSOLVR <= 9)) || (LSD_LSOLVR == 12)))
    {  
        SEPARATOR("OptionalCard3");

        SCALAR(LSD_ARCCTL, "ARCCTL") {DIMENSION ="DIMENSIONLESS";}
        RADIO(LSD_ARCDIR, "ARCDIR")
        {
            ADD(1, "1: global X-translation");
            ADD(2, "2: global Y-translation");
            ADD(3, "3: global Z-translation");
        }
        SCALAR(LSD_ARCLEN, "ARCLEN") {DIMENSION ="DIMENSIONLESS";}
    }

    if((ImpSolnOptCard2 != FALSE) && (ImpSolnOptCard3 != FALSE) && (LSD_LSOLVR == 12))
    {
        RADIO(LSD_ARCMTH, "ARCMTH")
        {
            ADD(1, "1: Crisfield (default)");
            ADD(2, "2: Ramm");
            ADD(3, "3: Modified Crisfield (used with NSOLVR=12 only)");
        }
    }
    if((ImpSolnOptCard2 != FALSE) && (ImpSolnOptCard3 != FALSE) && ((LSD_LSOLVR >= 6) && (LSD_LSOLVR <= 9)))
    {
        RADIO(LSD_ARCMTH, "ARCMTH")
        {
            ADD(1, "1: Crisfield (default)");
            ADD(2, "2: Ramm");
        }
    }
    
    if((ImpSolnOptCard2 != FALSE) && (ImpSolnOptCard3 != FALSE) && (((LSD_LSOLVR >= 6) && (LSD_LSOLVR <= 9)) || (LSD_LSOLVR == 12)))
    {
        RADIO(LSD_ARCDMP, "ARCDMP")
        {
            ADD(2, "2: off (default)");
            ADD(1, "1: on, oscillations in static solution are suppressed");
        }
        SCALAR(LSD_ARCPSI, "ARCPSI") {DIMENSION ="DIMENSIONLESS";}
        SCALAR(LSD_ARCALF, "ARCALF") {DIMENSION ="DIMENSIONLESS";}
        SCALAR(LSD_ARCTIM, "ARCTIM") {DIMENSION="t";}

        FLAG(ImpSolnOptCard4);
    }
    
    if((ImpSolnOptCard2 != FALSE) && (ImpSolnOptCard3 != FALSE) && (ImpSolnOptCard4 != FALSE) && (((LSD_LSOLVR >= 6) && (LSD_LSOLVR <= 9)) || (LSD_LSOLVR == 12)))
    {
        SEPARATOR("OptionalCard4");
        RADIO(LSD_LSTMD, "LSTMD")
        {
            ADD(1, "1: Energy method using only translational variables");
            ADD(2, "2: Residual method");
            ADD(3, "3: Energy method using both translational and rotational variables");
            ADD(4, "4: Energy method using sum of translational and rotational degrees of freedom (default), i.e., no separate treatment");
            ADD(5, "5: Same as 4, but account for residual norm growth to be extra conservative in step length");
            ADD(6, "6: Same as 5, but minimizes the residual norm whenever convenient");
        }
        RADIO(LSD_LSDIR, "LSDIR")
        {
            ADD(1, "1: Search on all variables (traditional approach used in versions prior to 971)");
            ADD(2, "2: Search only on the independent (unconstrained) variables");
            ADD(3, "3: Use adaptive line search");
            ADD(4, "4: Use curved line search");
        }
        SCALAR(LSD_IRAD, "IRAD") {DIMENSION ="DIMENSIONLESS";}
        SCALAR(LSD_SRAD, "SRAD") {DIMENSION ="DIMENSIONLESS";}
        SCALAR(LSD_AWGT, "AWGT") {DIMENSION ="DIMENSIONLESS";}
        SCALAR(LSD_SRED, "SRED") {DIMENSION ="DIMENSIONLESS";}
        
        SEPARATOR(); //4
    }

    if(ImpSolnOptCard2 != FALSE && ImpSolnOptCard3 != FALSE && (((LSD_LSOLVR >= 6) && (LSD_LSOLVR <= 9)) || (LSD_LSOLVR == 12)))
    {
        SEPARATOR(); //3
    }
    if (ImpSolnOptCard2 != FALSE)
    {
        SEPARATOR(); //2
    }
}

// File format
FORMAT(Keyword971_R6.1)
{
    HEADER("*CONTROL_IMPLICIT_SOLUTION");

    COMMENT("$   NSOLVR    ILIMIT    MAXREF     DCTOL     ECTOL     RCTOL     LSTOL    ABSTOL");
    CARD("%10d%10d%10d%10lg%10lg%10lg%10lg%10lg",LSD_LSOLVR,LSD_ILIMIT,LSD_MAXREF,LSD_DCTOL,LSD_ECTOL,LSD_RCTOL,LSD_LSTOL,LSD_ABSTOL);

    if (ImpSolnOptCard2 == 1)
        COMMENT("$    DNORM    DIVERG     ISTIF   NLPRINT    NLNORM   D3ITCTL     CPCHK");
    FREE_CARD(ImpSolnOptCard2,"%10d%10d%10d%10d%10d%10d%10d",LSD_DNORM,LSD_DIVERG,LSD_ISTIF,LSD_NLPRINT,LSD_NLNORM,LSD_D3ITCTL,LSD_CPCHK);

    if (ImpSolnOptCard2 == 1)
        COMMENT("$   ARCCTL    ARCDIR    ARCLEN    ARCMTH    ARCDMP    ARCPSI    ARCALF    ARCTIM");
        FREE_CARD(ImpSolnOptCard3,"%10d%10d%10lg%10d%10d%10lg%10lg%10lg",LSD_ARCCTL,LSD_ARCDIR,LSD_ARCLEN,LSD_ARCMTH,LSD_ARCDMP,LSD_ARCPSI,LSD_ARCALF,LSD_ARCTIM);
    if (ImpSolnOptCard2 == 1 && ImpSolnOptCard3 == 1)
        COMMENT("$    LSMTD     LSDIR      IRAD      SRAD      AWGT      SRED");
        FREE_CARD(ImpSolnOptCard4,"%10d%10d%10lg%10lg%10lg%10lg",LSD_LSTMD,LSD_LSDIR,LSD_IRAD,LSD_SRAD,LSD_AWGT,LSD_SRED);
}

FORMAT(Keyword971_R7.1)
{
    ASSIGN(IOFLAG,1,IMPORT);
    ASSIGN(IOFLAG,0,EXPORT);

    if (IOFLAG == 0) {
        if (Option1 == 1) {
            HEADER("*CONTROL_IMPLICIT_SOLUTION");
        } else if (Option1 == 2) {
            HEADER("*CONTROL_IMPLICIT_SOLUTION_DYN");
        } else if (Option1 == 3) {
            HEADER("*CONTROL_IMPLICIT_SOLUTION_SPR");
        }
    } else {
        // IMPORT
        HEADER("*CONTROL_IMPLICIT_SOLUTION%s",option);
        if (option == "") {
            ASSIGN(Option1,1,IMPORT);
        } else if (option == "_DYN") {
            ASSIGN(Option1,2,IMPORT);
        } else if (option == "_SPR") {
            ASSIGN(Option1,3,IMPORT);
        }
    }
    
    COMMENT("$   NSOLVR    ILIMIT    MAXREF     DCTOL     ECTOL     RCTOL     LSTOL    ABSTOL");
    CARD("%10d%10d%10d%10lg%10lg%10lg%10lg%10lg",LSD_LSOLVR,LSD_ILIMIT,LSD_MAXREF,LSD_DCTOL,LSD_ECTOL,LSD_RCTOL,LSD_LSTOL,LSD_ABSTOL);
    
    if (ImpSolnOptCard2 == 1)
        COMMENT("$$   DNORM    DIVERG     ISTIF   NLPRINT    NLNORM   D3ITCTL     CPCHK");
    FREE_CARD(ImpSolnOptCard2,"%10d%10d%10d%10d%10d%10d%10d",LSD_DNORM,LSD_DIVERG,LSD_ISTIF,LSD_NLPRINT,LSD_NLNORM,LSD_D3ITCTL,LSD_CPCHK);

    if (ImpSolnOptCard2 == 1)
        COMMENT("$   ARCCTL    ARCDIR    ARCLEN    ARCMTH    ARCDMP    ARCPSI    ARCALF    ARCTIM");
        FREE_CARD(ImpSolnOptCard3,"%10d%10d%10lg%10d%10d%10lg%10lg%10lg",LSD_ARCCTL,LSD_ARCDIR,LSD_ARCLEN,LSD_ARCMTH,LSD_ARCDMP,LSD_ARCPSI,LSD_ARCALF,LSD_ARCTIM);
    if (ImpSolnOptCard2 == 1 && ImpSolnOptCard3 == 1)
        COMMENT("$    LSMTD     LSDIR      IRAD      SRAD      AWGT      SRED");
        FREE_CARD(ImpSolnOptCard4,"%10d%10d%10lg%10lg%10lg%10lg",LSD_LSTMD,LSD_LSDIR,LSD_IRAD,LSD_SRAD,LSD_AWGT,LSD_SRED);
}

FORMAT(Keyword971_R9.3)
{
    ASSIGN(IOFLAG,1,IMPORT);
    ASSIGN(IOFLAG,0,EXPORT);

    if (IOFLAG == 0) {
        if (Option1 == 1) {
            HEADER("*CONTROL_IMPLICIT_SOLUTION");
        } else if (Option1 == 2) {
            HEADER("*CONTROL_IMPLICIT_SOLUTION_DYN");
        } else if (Option1 == 3) {
            HEADER("*CONTROL_IMPLICIT_SOLUTION_SPR");
        }
    } else {
        // IMPORT
        HEADER("*CONTROL_IMPLICIT_SOLUTION%s",option);
        if (option == "") {
            ASSIGN(Option1,1,IMPORT);
        } else if (option == "_DYN") {
            ASSIGN(Option1,2,IMPORT);
        } else if (option == "_SPR") {
            ASSIGN(Option1,3,IMPORT);
        }
    }
    
    COMMENT("$   NSOLVR    ILIMIT    MAXREF     DCTOL     ECTOL     RCTOL     LSTOL    ABSTOL");
    CARD("%10d%10d%10d%10lg%10lg%10lg%10lg%10lg",LSD_LSOLVR,LSD_ILIMIT,LSD_MAXREF,LSD_DCTOL,LSD_ECTOL,LSD_RCTOL,LSD_LSTOL,LSD_ABSTOL);
    
    if (ImpSolnOptCard2 == 1)
        COMMENT("$$   DNORM    DIVERG     ISTIF   NLPRINT    NLNORM   D3ITCTL     CPCHK");
    if (IOFLAG == 0 && LSD_NEG_NLNORM == 0)
    {
        FREE_CARD(ImpSolnOptCard2,"%10d%10d%10d%10d%10d%10d%10d",LSD_DNORM,LSD_DIVERG,LSD_ISTIF,LSD_NLPRINT,LSD_NLNORM,LSD_D3ITCTL,LSD_CPCHK);
    }
    else if (IOFLAG == 0 && LSD_NEG_NLNORM == 1)
    {        
        FREE_CARD(ImpSolnOptCard2,"%10d%10d%10d%10d%10lg%10d%10d",LSD_DNORM,LSD_DIVERG,LSD_ISTIF,LSD_NLPRINT,LSD_NLNORM2,LSD_D3ITCTL,LSD_CPCHK);
    }
    
    if (IOFLAG == 1)
        CARD_PREREAD("                                        %10lg",LSD_NLNORM2);
    if (IOFLAG == 1 && LSD_NLNORM2 >= 0.0) 
    {
        FREE_CARD(ImpSolnOptCard2,"%10d%10d%10d%10d%10d%10d%10d",LSD_DNORM,LSD_DIVERG,LSD_ISTIF,LSD_NLPRINT,LSD_NLNORM,LSD_D3ITCTL,LSD_CPCHK);
        ASSIGN(LSD_NEG_NLNORM, 0, IMPORT);
    }
        
    else if (IOFLAG == 1 && LSD_NLNORM2 < 0.0)
    {
        FREE_CARD(ImpSolnOptCard2,"%10d%10d%10d%10d%10lg%10d%10d",LSD_DNORM,LSD_DIVERG,LSD_ISTIF,LSD_NLPRINT,LSD_NLNORM2,LSD_D3ITCTL,LSD_CPCHK);
        ASSIGN(LSD_NEG_NLNORM, 1, IMPORT);
    }

    if (ImpSolnOptCard2 == 1)
        COMMENT("$   ARCCTL    ARCDIR    ARCLEN    ARCMTH    ARCDMP    ARCPSI    ARCALF    ARCTIM");
        FREE_CARD(ImpSolnOptCard3,"%10d%10d%10lg%10d%10d%10lg%10lg%10lg",LSD_ARCCTL,LSD_ARCDIR,LSD_ARCLEN,LSD_ARCMTH,LSD_ARCDMP,LSD_ARCPSI,LSD_ARCALF,LSD_ARCTIM);
    if (ImpSolnOptCard2 == 1 && ImpSolnOptCard3 == 1)
        COMMENT("$    LSMTD     LSDIR      IRAD      SRAD      AWGT      SRED");
        FREE_CARD(ImpSolnOptCard4,"%10d%10d%10lg%10lg%10lg%10lg",LSD_LSTMD,LSD_LSDIR,LSD_IRAD,LSD_SRAD,LSD_AWGT,LSD_SRED);
}