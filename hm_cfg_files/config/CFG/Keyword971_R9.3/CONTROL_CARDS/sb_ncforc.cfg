//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- sub_database_ncforc.cfg ---
//  DATABASE database_option_abstat 5896   9.10
//   02/03/2020

ATTRIBUTES(COMMON)
{
    // INPUT ATTRIBUTES
    LSD_NCFORC = VALUE(FLOAT, "Time interval between outputs. If DT is zero, no output is printed");
    LSD_NCFORCBinaryOpt = VALUE(STRING, "Flag for binary output");
    LSD_NCFORC_LCUR = VALUE(CURVE,  "Optional curve ID specifying time interval between dumps");
    LSD_NCFORC_IOPT = VALUE(INT,"Flag to govern behavior of the plot frequency load curve defined by LCUR");
    NCFORC_Opt2 = VALUE(INT,"This option uses a Butterworth filter for the forward,single pass filtering and the backward, double pass filtering options");
    LSD_NCFORC_RATE = VALUE(FLOAT,"Time interval T between filter sampling");
    LSD_NCFORC_CUTOFF = VALUE(FLOAT,"Frequency cut-off C in Hz");
    LSD_NCFORC_WINDOW = VALUE(FLOAT,"The width of the window W in units of time for storing the single,forward filtering required for the TYPE = 2 filter option");
    LSD_NCFORC_TYPE = VALUE(INT,"Flag for filtering options");

    // HM INTERNAL
    KEYWORD_STR = VALUE(STRING, "Solver Keyword");
    IO_FLAG  = VALUE(INT, "");
    _opt = VALUE(STRING,"option");
}


SKEYWORDS_IDENTIFIER(COMMON)
{
    LSD_NCFORC = 2196;
    LSD_NCFORCBinaryOpt = 5953;
    LSD_NCFORC_LCUR = 5954;
    LSD_NCFORC_IOPT = 5955;
    NCFORC_Opt2 = 8297;
    LSD_NCFORC_RATE=8298;
    LSD_NCFORC_CUTOFF=8299;
    LSD_NCFORC_WINDOW=8300;
    LSD_NCFORC_TYPE=8301;

    KEYWORD_STR = 9000;
    IO_FLAG = -1;
    _opt = -1;
}

DEFAULTS(COMMON)
{
    LSD_NCFORC  = 0;
    LSD_NCFORC_IOPT = 0;
    LSD_NCFORC_TYPE = 0;
}

GUI(COMMON)
{
    SCALAR(LSD_NCFORC,"DT");
    RADIO(LSD_NCFORCBinaryOpt,"BINARY")
    {
        ADD("0","DEFAULT");
        ADD("1","ASCII");
        ADD("2","BINARY");
        ADD("3","ASCII-BINARY");
    }
    DATA(LSD_NCFORC_LCUR,"LCUR");

    RADIO(LSD_NCFORC_IOPT,"IOPT")
    {
        ADD(1,"1: At the time each plot is generated, the load curve value is added to the current time to determine the next plot time");
        ADD(2,"2: At the time each plot is generated, the next plot time, t, is computed so that t = the current time + LCUR(t)");
        ADD(3,"3: A plot is generated for each abscissa point in the load curve definition. The actual value of the load curve is ignored");
    }

    FLAG(NCFORC_Opt2);
    if(NCFORC_Opt2 == TRUE)
    {
        SCALAR(LSD_NCFORC_RATE) {DIMENSION="t";}
        SCALAR(LSD_NCFORC_CUTOFF) {DIMENSION="f";}
        SCALAR(LSD_NCFORC_WINDOW) {DIMENSION="t";}
        RADIO(LSD_NCFORC_TYPE,"FILTER")
        {
            ADD(0,"0: No filtering");
            ADD(1,"1: Single pass, forward Butterworth filtering");
            ADD(2,"2: Two pass filtering over the specified time window");
        }
    }
}

// File format
FORMAT(Keyword971_R9.3)
{
    ASSIGN(IO_FLAG,0,IMPORT);
    ASSIGN(IO_FLAG,1,EXPORT);
    if(IO_FLAG == 1) 
    {
        if(NCFORC_Opt2 == 1)
        {
            HEADER("*DATABASE_NCFORC_FILTER");
        }
        else
        {
            HEADER("*DATABASE_NCFORC");
        }
        
        if (LSD_NCFORCBinaryOpt == "DEFAULT")
        {
            ASSIGN(LSD_NCFORCBinaryOpt,0,EXPORT);
        }
        else if(LSD_NCFORCBinaryOpt == "ASCII")
        {
            ASSIGN(LSD_NCFORCBinaryOpt,1,EXPORT);
        }
        else if(LSD_NCFORCBinaryOpt == "BINARY")
        {
            ASSIGN(LSD_NCFORCBinaryOpt,2,EXPORT);
        }
        else if(LSD_NCFORCBinaryOpt == "ASCII-BINARY")
        {
            ASSIGN(LSD_NCFORCBinaryOpt,3,EXPORT);
        }
    }
    else //IMPORT
    {
        HEADER("DATABASE_NFORC%s",_opt);
        if (_opt == "FILTER")
        {
            ASSIGN(NCFORC_Opt2,1,IMPORT);
        }
        else
        {
            ASSIGN(NCFORC_Opt2,0,IMPORT);
        }
    }
    
    COMMENT("$       DT    BINARY      LCUR     IOOPT");
    CARD("%10lg%10s%10d%10d",LSD_NCFORC,LSD_NCFORCBinaryOpt,LSD_NCFORC_LCUR,LSD_NCFORC_IOPT);

    COMMENT("$     RATE    CUTOFF    WINDOW      TYPE");
    FREE_CARD(NCFORC_Opt2,"%10lg%10lg%10lg%10d",LSD_NCFORC_RATE,LSD_NCFORC_CUTOFF,LSD_NCFORC_WINDOW,LSD_NCFORC_TYPE);
}

FORMAT(Keyword971)
{
    ASSIGN(IO_FLAG,0,IMPORT);
    ASSIGN(IO_FLAG,1,EXPORT);
    if(IO_FLAG == 1)
    {
        HEADER("*DATABASE_NCFORC");
        if (LSD_NCFORCBinaryOpt == "DEFAULT")
        {
            ASSIGN(LSD_NCFORCBinaryOpt,0,EXPORT);
        }
        else if(LSD_NCFORCBinaryOpt == "ASCII")
        {
            ASSIGN(LSD_NCFORCBinaryOpt,1,EXPORT);
        }
        else if(LSD_NCFORCBinaryOpt == "BINARY")
        {
            ASSIGN(LSD_NCFORCBinaryOpt,2,EXPORT);
        }
        else if(LSD_NCFORCBinaryOpt == "ASCII-BINARY")
        {
            ASSIGN(LSD_NCFORCBinaryOpt,3,EXPORT);
        }
    }
    COMMENT("$       DT    BINARY      LCUR     IOOPT");
    CARD("%10lg%10s%10d%10d",LSD_NCFORC,LSD_NCFORCBinaryOpt,LSD_NCFORC_LCUR,LSD_NCFORC_IOPT);
}

