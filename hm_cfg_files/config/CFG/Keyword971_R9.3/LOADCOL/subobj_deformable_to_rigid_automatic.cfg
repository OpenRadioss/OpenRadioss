//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- subobj_deformable_to_rigid_automatic.cfg ---

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES

    //Card 1
    LSD_SWSET                               = VALUE(INT,                      "Set number for this automatic switch set");
    LSD_CODE                                = VALUE(INT,                      "Activation switch code");
    LSD_TIME1                               = VALUE(FLOAT,                    "Switch will not take place before this time");
    LSD_TIME2                               = VALUE(FLOAT,                    "Switch will not take place after this time");
    LSD_TIME3                               = VALUE(FLOAT,                    "Delay period");
    LSD_ENTNO                               = VALUE(INT,                      "Rigid wall / contact surface number for switch codes 1, 2, 3, 4");
    LSD_RELSW                               = VALUE(INT,                      "Related switch set");
    LSD_PAIRED                              = VALUE(INT,                      "Define a pair of related switches");

    //Card 2
    LSD_NRBF                                = VALUE(INT,                      "Nodal rigid body flag");
    LSD_NCSF                                = VALUE(INT,                      "Nodal constraint set flag");
    LSD_RWF                                 = VALUE(INT,                      "Flag to delete or activate rigid walls");
    LSD_DTMAX                               = VALUE(FLOAT,                    "Maximum permitted time step size after switch");
    ArrayCountAuto                          = SIZE(                           "Number of deformable parts to be switched to rigid plus number of rigid parts for which new main/secondary rigid body combinations will be defined");
    ArrayCountAuto2                         = SIZE(                           "Number of rigid parts to be switched to deformable");
    LSD_D2R_OFFSET                          = VALUE(FLOAT,                    "Optional contact thickness for switch to deformable");

    //D2R & R2D
    PTYPEArrayAuto                          = ARRAY[ArrayCountAuto] (STRING,  "Type of PID");
    PTYPEArrayAuto2                         = ARRAY[ArrayCountAuto2](STRING,  "Type of PID");
    PartSetArrayAuto                        = ARRAY[ArrayCountAuto](SETS,     "Part set ID of the part set which is switched to a rigid material"){ SUBTYPES = (/SETS/SET_PART_IDPOOL) ; }
    PartIdArrayAuto                         = ARRAY[ArrayCountAuto](COMPONENT,"Part ID of the main rigid body to which part PID is merged");
    PartTypeArrayAuto                       = ARRAY[ArrayCountAuto](STRING,   "Type of PID");
    PSID_array                              = ARRAY[ArrayCountAuto2](SETS,    "Part set ID of the part set which is switched to a rigid material"){ SUBTYPES = (/SETS/SET_PART_IDPOOL) ; }
    PartTypeArrayAuto2                      = ARRAY[ArrayCountAuto2](STRING,  "Type of PID");
    PartArrayAuto                           = ARRAY[ArrayCountAuto] (COMPONENT,"Part ID of the part which is switched to a rigid material");
    PID_array                               = ARRAY[ArrayCountAuto2](COMPONENT,"Part ID of the part which is switched to a rigid material");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING,                   "Solver Keyword");

    IO_FLAG                                 = VALUE(INT,                      "IO_FLAG");
    _entity_field                           = ARRAY[ArrayCountAuto](MULTIOBJECT,"PID or PSID")                { SUBTYPES = (/COMPONENT , /SETS/SET_PART_IDPOOL) ; }

    _entity_field2                          = ARRAY[ArrayCountAuto2](MULTIOBJECT,"PID or PSID")               { SUBTYPES = (/COMPONENT , /SETS/SET_PART_IDPOOL) ; }
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES

    //Card 1
    LSD_SWSET                               = 3018;
    LSD_CODE                                = 3019;
    LSD_TIME1                               = 3020;
    LSD_TIME2                               = 3021;
    LSD_TIME3                               = 3022;
    LSD_ENTNO                               = 3023;
    LSD_RELSW                               = 3024;
    LSD_PAIRED                              = 3025;

    //Card 2
    LSD_NRBF                                = 3026;
    LSD_NCSF                                = 3027;
    LSD_RWF                                 = 3028;
    LSD_DTMAX                               = 3029;
    ArrayCountAuto                          = 4136;
    ArrayCountAuto2                         = 8795;
    LSD_D2R_OFFSET                          = 1192;

    //D2R & R2D
    PTYPEArrayAuto                          = 8798;
    PTYPEArrayAuto2                         = 8799;
    PartSetArrayAuto                        = 4134;
    PartIdArrayAuto                         = 4135;
    PartTypeArrayAuto                       = 8800;
    PSID_array                              = 8797;
    PartTypeArrayAuto2                      = 8801;
    PartArrayAuto                           = 8796;
    PID_array                               = 4338;

    //HM INTERNAL
    KEYWORD_STR                             = 9000;

    IO_FLAG                                 = -1;
    _entity_field                           = -1;
    _entity_field2                          = -1;

}

DEFAULTS(COMMON)
{
    //Card 1
    LSD_CODE                                = 0;
    LSD_TIME1                               = 0.0;
    LSD_TIME2                               = 10E20;
    LSD_TIME3                               = 0.0;
    LSD_ENTNO                               = 0.0;
    LSD_RELSW                               = 0;
    LSD_PAIRED                              = 0;

    //Card 2
    LSD_NRBF                                = 0;
    LSD_NCSF                                = 0;
    LSD_RWF                                 = 0;
    LSD_DTMAX                               = 0.0;
    ArrayCountAuto                          = 0;
    ArrayCountAuto2                         = 0;
    LSD_D2R_OFFSET                          = 0;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR,"*DEFORMABLE_TO_RIGID_AUTOMATIC");

    SCALAR(LSD_SWSET, "SWSET")              { DIMENSION = "DIMENSIONLESS" ; }
    RADIO(LSD_CODE,   "CODE")
    {
        ADD(0, "0: Switch takes place at time 1");
        ADD(1, "1: Switch takes place between time 1 and time 2 if rigid wall force (specified below) is zero");
        ADD(2, "2: Switch takes place between time 1 and time 2 if contact surface force (specified below) is zero");
        ADD(3, "3: Switch takes place between time 1 and time 2 if rigid wall force (specified below) is non-zero");
        ADD(4, "4: Switch takes place between time 1 and time 2 if contact surface force (specified below) is non-zero");
        ADD(5, "5: Switch is controlled by *SENSOR_CONTROL with TYPE = DEF2RIG");
    }
    SCALAR(LSD_TIME1, "TIME1")              { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_TIME2, "TIME2")              { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_TIME3, "TIME3")              { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_ENTNO, "ENTNO")              { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_RELSW, "RELSW")              { DIMENSION = "DIMENSIONLESS" ; }
    RADIO(LSD_PAIRED, "PAIRED")
    {
        ADD(0,  "0: Not paired");
        ADD(1,  "1: Paired with switch set RELSW and is the Main switch");
        ADD(-1, "-1: Paired with switch set RELSW and is the Secondary switch");
    }
    RADIO(LSD_NRBF, "NRBF")
    {
        ADD(0, "0: No further action");
        ADD(1, "1: Delete all remaining nodal rigid bodies, that is, delete those nodal rigid bodies that do not share any nodes with a rigid body created by deformable-to-rigid switching");
        ADD(2, "2: Activate nodal rigid bodies");
    }
    RADIO(LSD_NCSF, "NCSF")
    {
        ADD(0, "0: No change");
        ADD(1, "1: Delete");
        ADD(2, "2: Activate");
    }
    RADIO(LSD_RWF, "RWF")
    {
        ADD(0, "0: No change");
        ADD(1, "1: Delete");
        ADD(2, "2: Activate");
    }
    SCALAR(LSD_DTMAX, "DTMAX")              { DIMENSION = "DIMENSIONLESS" ; }

    SIZE(ArrayCountAuto,  "D2R");
    SIZE(ArrayCountAuto2, "R2D");
    SCALAR(LSD_D2R_OFFSET,"OFFSET")         { DIMENSION = "DIMENSIONLESS" ; }

    ARRAY(ArrayCountAuto, "D2R")
    {
//        SEPARATOR("Dform2Rigid");
            RADIO(PTYPEArrayAuto, "PTYPEOpt")
            {
                ADD("PID",  "PID is a part ID");
                ADD("PSID", "PID is a part set ID");
            }
            if(PTYPEArrayAuto == "PSID")
            {
                ASSIGN(PartTypeArrayAuto, "PSET");

                DATA(PartSetArrayAuto, "PSID");
                DATA(PartIdArrayAuto,  "MRB");
            }
            else if(PTYPEArrayAuto == "PID")
            {
                ASSIGN(PartTypeArrayAuto, "PART");

                DATA(PartArrayAuto,    "PID");
                DATA(PartIdArrayAuto,  "MRB");
            }
     //   SEPARATOR();
    }

    ARRAY(ArrayCountAuto2, "R2D")
    {
//        SEPARATOR("Dform2Rigid2");
            RADIO(PTYPEArrayAuto2, "PTYPEOpt")
            {
                ADD("PID", "PID is a part ID");
                ADD("PSID", "PID is a part set ID");
            }
            if(PTYPEArrayAuto2 == "PSID")
            {
                ASSIGN(PartTypeArrayAuto2, "PSET");  //PTYPE

                DATA(PSID_array, "PSID");
            }
            else if(PTYPEArrayAuto2 == "PID")
            {
                ASSIGN(PartTypeArrayAuto2, "PART");  //PTYPE

                DATA(PID_array, "PID");
            }
     //   SEPARATOR();
    }
}

FORMAT(Keyword971_R6.1)
{
    //Card 1
    COMMENT("$    SWSET      CODE     TIME1     TIME2     TIME3     ENTNO     RELSW    PAIRED");
    CARD("%10d%10d%10lg%10lg%10lg%10d%10d%10d",LSD_SWSET,LSD_CODE,LSD_TIME1,LSD_TIME2,LSD_TIME3,LSD_ENTNO,LSD_RELSW,LSD_PAIRED);

    //Card 2
    COMMENT("$     NRBF      NCSF       RWF     DTMAX       D2R       R2D    OFFSET");
    CARD("%10d%10d%10d%10lg%10d%10d%10lg",LSD_NRBF,LSD_NCSF,LSD_RWF,LSD_DTMAX,ArrayCountAuto,ArrayCountAuto2,LSD_D2R_OFFSET);

    //D2R
    CARD_LIST(ArrayCountAuto)
    {
        COMMENT("$      PID       MRB");
        CARD("%10d%10d", PartArrayAuto, PartIdArrayAuto);
    }

    //R2D
    CARD_LIST(ArrayCountAuto2)
    {
        COMMENT("$      PID");
        CARD("%10d", PID_array);
    }
}

FORMAT(Keyword971_R9.3)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);

    //Card 1
    COMMENT("$    SWSET      CODE     TIME1     TIME2     TIME3     ENTNO     RELSW    PAIRED");
    CARD("%10d%10d%10lg%10lg%10lg%10d%10d%10d",LSD_SWSET,LSD_CODE,LSD_TIME1,LSD_TIME2,LSD_TIME3,LSD_ENTNO,LSD_RELSW,LSD_PAIRED);

    //Card 2
    COMMENT("$     NRBF      NCSF       RWF     DTMAX       D2R       R2D    OFFSET");
    CARD("%10d%10d%10d%10lg%10d%10d%10lg",LSD_NRBF,LSD_NCSF,LSD_RWF,LSD_DTMAX,ArrayCountAuto,ArrayCountAuto2,LSD_D2R_OFFSET);

    if(IO_FLAG == 0)
    {
        //D2R
        CARD_LIST(ArrayCountAuto)
        {
            if(PartTypeArrayAuto == "PART")
            {
                COMMENT("$      PID       MRB     PTYPE");
                CARD("%10d%10d%10s", PartArrayAuto, PartIdArrayAuto, PartTypeArrayAuto);
            }
            else if(PartTypeArrayAuto == "PSET")
            {
                COMMENT("$     PSID       MRB     PTYPE");
                CARD("%10d%10d%10s", PartSetArrayAuto, PartIdArrayAuto, PartTypeArrayAuto);
            }
        }
        //R2D
        CARD_LIST(ArrayCountAuto2)
        {
            if(PartTypeArrayAuto2 == "PART")
            {
                COMMENT("$      PID     PTYPE");
                CARD("%10d%10s", PID_array, PartTypeArrayAuto2);
            }
            else if(PartTypeArrayAuto2 == "PSET")
            {
                COMMENT("$     PSID     PTYPE");
                CARD("%10d%10s", PSID_array, PartTypeArrayAuto2);
            }
        }
    }
    else //IMPORT
    {
        //D2R
        CARD_LIST(ArrayCountAuto)
        {
            CARD("%10d%10d%10s", _entity_field, PartIdArrayAuto, PartTypeArrayAuto);

            if(PartTypeArrayAuto == "PART")
            {
                ASSIGN(PTYPEArrayAuto, "PID", IMPORT);
                ASSIGN(PartArrayAuto, _entity_field, IMPORT);
            }
            else if(PartTypeArrayAuto == "PSET")
            {
                ASSIGN(PTYPEArrayAuto, "PSID", IMPORT);
                ASSIGN(PartSetArrayAuto, _entity_field, IMPORT);
            }
        }
        //R2D
        CARD_LIST(ArrayCountAuto2)
        {
            CARD("%10d%10s", _entity_field2, PartTypeArrayAuto2);

            if(PartTypeArrayAuto2 == "PART")
            {
                ASSIGN(PTYPEArrayAuto2, "PID", IMPORT);
                ASSIGN(PID_array, _entity_field2, IMPORT);
            }
            else if(PartTypeArrayAuto2 == "PSET")
            {
                ASSIGN(PTYPEArrayAuto2, "PSID", IMPORT);
                ASSIGN(PSID_array, _entity_field2, IMPORT);
            }
        }
    }
}
