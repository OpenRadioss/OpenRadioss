//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// INTERFACE_LINKING_NODE

ATTRIBUTES(COMMON) {

    IO_FLAG             =   VALUE(INT, "Import/Export flag");
    _HMCOMMENTSFLAG     =   VALUE(INT, "Write HM Comments");
    _HWCOLOR            =   VALUE(INT, "Entity Color");  
    TITLE               =   VALUE(STRING, "Title");
    DISC_TYPE           =   VALUE(STRING, "TYPE_DISC_STR");
  
    entityid            =   VALUE(MULTIOBJECT,"NID/NSID") { SUBTYPES = (/SETS/SET_NODE_IDPOOL,  /NODE  ) ; } 
    entityid_type       =   VALUE(STRING, "Type of multi object");
    interfaceid         =   VALUE(INT,"Interface ID in interface file");
    localflag           =   VALUE(BOOL, "Local Flag");
    fx                  =   VALUE(FUNCT,"The ID of a *DEFINE_FUNCTION which determines x direction displacement scale factor");
    fy                  =   VALUE(FUNCT,"The ID of a *DEFINE_FUNCTION which determines y direction displacement scale factor");
    fz                  =   VALUE(FUNCT,"The ID of a *DEFINE_FUNCTION which determines z direction displacement scale factor");
    locsystem           =   VALUE(SYSTEM, "Local coordinate system ID for transforming displacements");
    locnode             =   VALUE(NODE, "Local node ID for transforming displacements");
    usecordinate        =   VALUE(INT, "Flag to indicate the use of the coordinate system in the linking file");
    usenode             =   VALUE(INT, "Flag to indicate the use of the node displacement in the linking");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    IO_FLAG           = -1;
    _HMCOMMENTSFLAG   = -1;
    _HWCOLOR          = -1;
    TITLE             = -1;
    DISC_TYPE         = -1;
    entityid_type     = -1;
}

DEFAULTS(COMMON) 
{
    IO_FLAG = 0;
    _HMCOMMENTSFLAG = 0;
    entityid_type = "SETS/SET_NODE_IDPOOL";
}

GUI(COMMON) {
   //DATA(entityid) { SUBTYPES = ( /NODE , /SETS/SET_NODE_IDPOOL ) ;  }
}

FORMAT(Keyword971_R6.1) {
 
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    if(IO_FLAG == 1)
    {
        HEADER("*INTERFACE_LINKING_NODE_%10s", DISC_TYPE);
    }
    else if(IO_FLAG == 1 && DISC_TYPE == "SET")
    {
        ASSIGN(entityid_type, /SETS/SET_NODE_IDPOOL, IMPORT); 
        ASSIGN(entityid, 0, IMPORT); 
    }
    else if(IO_FLAG == 1)
    {
        ASSIGN(entityid_type, NODE, IMPORT); 
        ASSIGN(entityid, 0, IMPORT); 
    }
  
    //WRITE HEADER 
    if(IO_FLAG == 2 && (entityid_type == "/SETS/SET_NODE_IDPOOL" || entityid_type == "set"))
    {
        HEADER("*INTERFACE_LINKING_NODE_SET");
    }
    else if(IO_FLAG == 2 && (entityid_type == "NODE" || entityid_type == "node"))
    {
        HEADER("*INTERFACE_LINKING_NODE_NODE");
    }

    if(IO_FLAG == 2 && (entityid_type == "/SETS/SET_NODE_IDPOOL" || entityid_type == "set"))
    {
        COMMENT("$     NSID      IFID        FX        FY        FZ");
    }
    else if(IO_FLAG == 2 && (entityid_type == "NODE" || entityid_type == "node"))
    {
        COMMENT("$      NID      IFID        FX        FY        FZ");
    }  
   
    CARD("%10d%10d%10d%10d%10d",entityid, interfaceid,fx,fy,fz);
}

FORMAT(Keyword971_R9.3) {
 
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    if(IO_FLAG == 1)
    {
        HEADER("*INTERFACE_LINKING_NODE_%10s", DISC_TYPE);
    }
    if(IO_FLAG == 1 && DISC_TYPE == "SET_LOCAL")
    {
        ASSIGN(entityid_type, /SETS/SET_NODE_IDPOOL, IMPORT); 
        ASSIGN(entityid, 0, IMPORT);
        ASSIGN(localflag,1,IMPORT);
    }
    else if(IO_FLAG == 1 && DISC_TYPE == "SET")
    {
        ASSIGN(entityid_type, /SETS/SET_NODE_IDPOOL, IMPORT); 
        ASSIGN(entityid, 0, IMPORT); 
        ASSIGN(localflag,0,IMPORT);
    }
    else if(IO_FLAG == 1 && DISC_TYPE == "LOCAL")
    {
        ASSIGN(entityid_type, NODE, IMPORT); 
        ASSIGN(entityid, 0, IMPORT);
        ASSIGN(localflag,1,IMPORT);
    }
    else if(IO_FLAG == 1)
    {
        ASSIGN(entityid_type, NODE, IMPORT); 
        ASSIGN(entityid, 0, IMPORT); 
        ASSIGN(localflag,0,IMPORT);
    }
  
    //WRITE HEADER 
    if(IO_FLAG == 2 && (entityid_type == "/SETS/SET_NODE_IDPOOL" || entityid_type == "set") && localflag == 0)
    {
        HEADER("*INTERFACE_LINKING_NODE_SET");
    }
    else if(IO_FLAG == 2 && (entityid_type == "NODE" || entityid_type == "node") && localflag == 0)
    {
        HEADER("*INTERFACE_LINKING_NODE_NODE");
    }  
    else if(IO_FLAG == 2 && (entityid_type == "/SETS/SET_NODE_IDPOOL" || entityid_type == "set") && localflag == 1)
    {
        HEADER("*INTERFACE_LINKING_NODE_SET_LOCAL");
    }
    else if(IO_FLAG == 2 && (entityid_type == "NODE" || entityid_type == "node") && localflag == 1)
    {
        HEADER("*INTERFACE_LINKING_NODE_LOCAL");
    }  

    if(IO_FLAG == 2 && (entityid_type == "/SETS/SET_NODE_IDPOOL" || entityid_type == "set"))
    {
        COMMENT("$     NSID      IFID        FX        FY        FZ");
    }
    else if(IO_FLAG == 2 && (entityid_type == "NODE" || entityid_type == "node"))
    {
        COMMENT("$      NID      IFID        FX        FY        FZ");
    }  
   
    CARD("%10d%10d%10d%10d%10d",entityid, interfaceid,fx,fy,fz);
  
    if(IO_FLAG == 2 && localflag == 1)
    {
        COMMENT("$     LCID      LNID      USEC      USEN");
    }
    if(localflag == 1)
    {
        CARD("%10d%10d%10d%10d", locsystem, locnode, usecordinate, usenode);
    }
}
