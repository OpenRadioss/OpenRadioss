//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
ATTRIBUTES(COMMON) {

    //Attributes for HM usage 
    IO_FLAG                             = VALUE(INT, "Import/Export flag");
    _HMCOMMENTSFLAG                     = VALUE(INT, "Write HM Comments");
    _HWCOLOR                            = VALUE(INT, "Entity Color");
    _HAS_HEADER                         = VALUE(BOOL,"Has Header Card");
    TITLE                               = VALUE(STRING, "TITLE");
    solverkeyword                       = VALUE(STRING, "Solver Keyword");
    bemoptions                          = VALUE(INT,"BEM options","OPTION");
    Type                                = VALUE(STRING, "");

    // Solver fields
    r0                                   = VALUE(FLOAT,"Fluid density");
    c                                    = VALUE(FLOAT,"Sound speed of the fluid");
    c_negflag                            = VALUE(BOOL,"Flag specifying C options","C_FLAG");
    c_freq                               = VALUE(FREQUENCIES,"Sound speed of the fluid","C_FREQ") { SUBTYPES = (/FREQUENCY/FREQUENCY_DOMAIN_ACOUSTIC_SOUND_SPEED);  }
    fmin                                 = VALUE(FLOAT,"Minimum value of output frequencies");
    fmax                                 = VALUE(FLOAT,"Maximum value of output frequencies");
    nfreq                                = VALUE(INT,"Number of output frequencies");
    dtout                                = VALUE(FLOAT,"Time interval between writing velocity or acceleration, and pressure at boundary elements in the binary file, to be proceeded at the end of LSDYNA simulation");
    tstart                               = VALUE(FLOAT, "Start time for recording velocity or acceleration in LS-DYNA simulation");
    pref                                 = VALUE(FLOAT,"Reference pressure to be used to output pressure in dB, in the file Press_dB");
    typext                               = VALUE(INT,"Output exterior field point type");
    nsidext                              = VALUE(MULTIOBJECT,"Node or segment set ID of output exterior field points") { SUBTYPES = ( /SETS/SET_NODE_IDPOOL,  /SETS/SET_SEGMENT_GENERAL_IDPOOL, /NODE ) ; }
    typint                               = VALUE(INT,"Output interior field point type");
    nsidint                              = VALUE(MULTIOBJECT,"Node or segment set ID of output interior field points") { SUBTYPES = ( /SETS/SET_NODE_IDPOOL,  /SETS/SET_SEGMENT_GENERAL_IDPOOL, /NODE ) ; }
    fftwin                               = VALUE(INT,"FFT windows");
    trslt                                = VALUE(INT,"Request time domain results");
    ipfile                               = VALUE(INT,"Flag for output files");
    iunits                               = VALUE(INT,"Flag for unit changes");
    t_hold                               = VALUE(FLOAT,"Hold-off period before the exponential window");
    decay                                = VALUE(FLOAT,"Decay ratio at the end of capture duration");
    method                               = VALUE(INT,"Method used in acoustic analysis");
    maxit                                = VALUE(INT,"Maximum number of iterations for iterative solver");
    tolitr                               = VALUE(FLOAT,"Tolerance for the iterative solver");
    ndd                                  = VALUE(INT,"Number of domain decomposition, used for memory saving");
    tollr                                = VALUE(FLOAT,"Tolerance for low rank approximation of dense matrix");
    tolfct                               = VALUE(FLOAT,"Tolerance in factorization of the low rank matrix");
    ibdim                                = VALUE(INT,"Inner iteration limit in GMRES iterative solver");
    npg                                  = VALUE(INT,"Number of Gauss integration points");
    nbc                                  = SIZE("Number of boundary condition cards");
    restrt                               = VALUE(INT,"This flag is used to save an LS-DYNA analysis if the binary output file in the (bem=filename) option has not been changed");
    iedge                                = VALUE(INT,"Free edge and multi-connection constraints option");
    noel                                 = VALUE(INT,"Location where normal velocity or acceleration is taken");
    nfrup                                = VALUE(INT,"Preconditioner update option");
    velout                               = VALUE(INT,"Flag for writing out nodal or elemental velocity data");
    dba                                  = VALUE(INT,"Flag for writing out weighted SPL files with different weighting options");
    planeid                              = VALUE(INT,"Plane ID for defining the half-space problem, see keyword *DEFINE_PLANE");
    nsidpc                               = VALUE(SETS,"Node set ID for the field points where panel contributions to SPL (Sound Pressure Level) are requested") { SUBTYPES = (/SETS/SET_NODE_IDPOOL) ; }
    sstypes                              = ARRAY[nbc](INT,"Boundary element type");
    ssids                                = ARRAY[nbc](SETS, "Segment Set ID", "SSIDS") { SUBTYPES = (/SETS/SET_SEGMENT_GENERAL_IDPOOL);  }
    pids                                 = ARRAY[nbc](COMPONENT, "Part ID", "PIDS");
    psids                                = ARRAY[nbc](SETS, "Part Set ID", "PSIDS") { SUBTYPES = (/SETS/SET_PART_IDPOOL) ;  }
    norms                                = ARRAY[nbc](INT,"NORM should be set such that the normal vectors point away from the fluid");
    bemtyp_option                        = ARRAY[nbc](BOOL, "Flag specifying BEMTYP options","BEMTYP_FLAG");
    bemtyp                               = ARRAY[nbc](INT, "Type of input boundary values in BEM analysis");
    bemtyp_curve                         = ARRAY[nbc](FUNCT, "Type of input boundary values in BEM analysis","BEMTYP_CURVE");
    lc1                                  = ARRAY[nbc](FUNCT, "Load curve ID for defining real part of pressure, normal velocity or impedance","LC1");
    lc2                                  = ARRAY[nbc](FUNCT, "Load curve ID for defining imaginary part of pressure, normal velocity or impedance");
    DUMMY_SSTYPES                        = VALUE(INT, "SSTYPES");
    DUMMY_BEMTYP                         = VALUE(INT, "BEMTYP");
    DUMMY_TYPEXT                         = VALUE(INT, "TYPEXT");
    DUMMY_TYPINT                         = VALUE(INT, "TYPINT");
    empty_string                         = VALUE(STRING, "empty string");
    nsidext_type                         = VALUE(STRING, "Type of multi object");
    nsidint_type                         = VALUE(STRING, "Type of multi object");
    display_status                       = VALUE(INT, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    IO_FLAG                            =-1;
    _HMCOMMENTSFLAG                    =-1;
    _HWCOLOR                           =-1;
    _HAS_HEADER                        = -1;
    TITLE                              =-1;
    solverkeyword                      = -1;
    DUMMY_SSTYPES                      = -1;
    DUMMY_BEMTYP                       = -1;
    empty_string                       = -1;
    Type                               = -1;
    nsidext_type                       = -1;
    nsidint_type                       = -1;
    DUMMY_TYPEXT                       = -1;
    DUMMY_TYPINT                       = -1;
    display_status                     = -1;
}

DEFAULTS(COMMON)
{
    nfreq                                = 0;
    dtout                                = 0.0;
    tstart                               = 0.0;
    pref                                 = 0.0;
    typext                               = 0;
    typint                               = 0;
    fftwin                               = 0;
    trslt                                = 0;
    ipfile                               = 0;
    iunits                               = 0;
    maxit                                = 100;
    tolitr                               = 10e-4;
    ndd                                  = 1;
    tollr                                = 10e-6;
    tolfct                               = 10e-6;
    ibdim                                = 1000;
    npg                                  = 2;
    nbc                                  = 1;
    restrt                               = 0;
    iedge                                = 0;
    noel                                 = 0;
    nfrup                                = 0;
    velout                               = 0;
    sstypes                              = 0;
    norms                                = 0;
    bemtyp                               = 0;
    planeid                              = 0;
    bemoptions                           = 0;
    nsidext_type                         = "/NODE";
    nsidint_type                         = "/NODE";
    t_hold                               = 0.0;
    decay                                = 0.02;
    dba                                  = 0;
}

CHECK(COMMON)
{
    nbc                                  > 0;
}

GUI(COMMON)
{
    RADIO(bemoptions)
    {
        ADD(0,"NONE");
        ADD(3,"ATV");
        ADD(1,"HALF_SPACE");
        ADD(4,"MATV");
        ADD(2,"PANEL_CONTRIBUTION");
    } { PARAMETERIZED = FALSE; DISPLAY_STATUS=ALWAYS_ON;}
    if(bemoptions == 1)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_ACOUSTIC_BEM_HALF_SPACE);
    }
    else if(bemoptions == 2)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_ACOUSTIC_BEM_PANEL_CONTRIBUTION);
    }
    else if(bemoptions == 3)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_ACOUSTIC_BEM_ATV);
    }
    else if(bemoptions == 4)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_ACOUSTIC_BEM_MATV);
    }
    else
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_ACOUSTIC_BEM);
    }
    
    // Card 1
    SCALAR(r0) { DIMENSION = "density"; }
    FLAG(c_negflag);
    if(c_negflag == TRUE)
    {
        DATA(c_freq) {/FILTER/config/106/EQ;}
    }
    else
    {
        SCALAR(c) { DIMENSION = "velocity"; }
    }
    SCALAR(fmin) { DIMENSION = "f"; }
    SCALAR(fmax) { DIMENSION = "f"; }
    SCALAR(nfreq);
    SCALAR(dtout) { DIMENSION = "t"; }
    SCALAR(tstart) { DIMENSION = "t"; }
    SCALAR(pref) { DIMENSION = "pressure"; }
    
    // Card 2
    RADIO(typext)
    {
        ADD(0,"0:Node ID");
        ADD(1,"1:Node set ID");
        ADD(2,"2:Segment set ID");
    }
    if(typext == 0)
    {
        DATA(nsidext) { SUBTYPES = ( /NODE ) ;  }
    }
    else if(typext == 1)
    {
        DATA(nsidext) { SUBTYPES = ( /SETS/SET_NODE_IDPOOL ) ;  }
    }
    else if(typext == 2)
    {
        DATA(nsidext) { SUBTYPES = ( /SETS/SET_SEGMENT_GENERAL_IDPOOL ) ;  }
    }
    RADIO(typint)
    {
        ADD(0,"0:Node ID");
        ADD(1,"1:Node set ID");
        ADD(2,"2:Segment set ID");
    }
    if(typint == 0)
    {
        DATA(nsidint) { SUBTYPES = ( /NODE ) ;  }
    }
    else if(typint == 1)
    {
        DATA(nsidint) { SUBTYPES = ( /SETS/SET_NODE_IDPOOL ) ;  }
    }
    else if(typint == 2)
    {
        DATA(nsidint) { SUBTYPES = ( /SETS/SET_SEGMENT_GENERAL_IDPOOL ) ;  }
    }
    RADIO(fftwin)
    {
        ADD(0,"0: Rectangular window");
        ADD(1,"1: Hanning window");
        ADD(2,"2: Hamming window");
        ADD(3,"3: Blackman window");
        ADD(4,"4: Raised cosine window");
        ADD(5,"5: Exponential window");
    }
    RADIO(trslt)
    {
        ADD(0,"0:No time domain results are requested");
        ADD(1,"1:Time domain results are requested (Press_Pa_t gives absolute value pressure as a function of time)");
        ADD(2,"2:Time domain results are requested (Press_Pa_t gives real value pressure vs. time)");
    }
    RADIO(ipfile)
    {
        ADD(0,"0:Press_Pa , Press_dB and bepres(ASCII database file for LS - Prepost) are provided");
        ADD(1,"1:Press_Pa_real and Press_Pa_imag are provided, in addition to Press_Pa, Press_dBand bepres");
        ADD(10,"10:Files for IPFILE = 0, and fringe files for acoustic pressure");
        ADD(11,"11:Files for IPFILE = 1, and fringe files for acoustic pressure");
        ADD(20,"20:Files for IPFILE = 0, and fringe files for sound pressure level");
        ADD(21,"21:Files for IPFILE = 1, and fringe files for sound pressure level");
        ADD(31,"31:Files for IPFILE = 1, and fringe files for acoustic pressure (real part)");
        ADD(41,"41:Files for IPFILE = 1, and fringe files for acoustic pressure (imaginary part)");
    }
    RADIO(iunits)
    {
        ADD(0,"0:Do not apply unit change");
        ADD(1,"1:MKS units are used, no change needed");
        ADD(2,"2:Units: lbf × s2/in, inch, s, lbf, psi, etc. are used, changed to MKS in BEM Acoustic computation");
        ADD(3,"3:Units: kg, mm, ms, kN, GPa, etc. are used, changed to MKS in BEM acoustic computation");
        ADD(4,"4:Units: ton, mm, s, N, MPa, etc. are used, changed to MKS in BEM acoustic computation");
    }
    
    // Card 2a
    if(fftwin == 5)
    {
        SCALAR(t_hold);
        SCALAR(decay);
    }

    // Card 3
    RADIO(method)
    {
        ADD(0,"0:Rayleigh method");
        ADD(1,"1:Kirchhoff method coupled to FEM for acoustics");
        ADD(2,"2:Variational Indirect BEM");
        ADD(3,"3:Collocation BEM");
        ADD(4,"4:Collocation BEM with Burton-Miller formulation for exterior problems");
    }
    SCALAR(maxit);
    SCALAR(tolitr);
    SCALAR(ndd);
    SCALAR(tollr);
    SCALAR(tolfct);
    SCALAR(ibdim);
    SCALAR(npg);
    
    // Card 4
    SIZE(nbc);

    // Card 5 Category
    ARRAY(nbc, "")
    {
        RADIO(sstypes)
        {
            ADD(0, "0:Part set ID");
            ADD(1, "1:Part ID");
            ADD(2, "2:Segment set ID");
        }
        if(sstypes == 0)
        {
            DATA(psids);
        }
        else if(sstypes == 1)
        {
            DATA(pids);
        }
        else
        {
            DATA(ssids);
        }
        RADIO(norms)
        {
            ADD(0, "0:Normal vectors are not inverted (default).");
            ADD(1, "1:Normal vectors are inverted");
        }
    
        FLAG(bemtyp_option);
        if(bemtyp_option == TRUE)
        {
            FUNCTION(bemtyp_curve) {/FILTER/curveoption/0/EQ;}
        }
        else
        {
            RADIO(bemtyp)
            {
                ADD(0, "0:Boundary velocity will be processed in BEM analysis");
                ADD(1, "1:Boundary acceleration will be processed in BEM analysis.");
                ADD(2, "2:Pressure is prescribed and the real and imaginary parts are given by LC1 and LC2.");
                ADD(3, "3:Normal velocity is prescribed and the real and imaginary parts are given by LC1 and LC2");
                ADD(4, "4:Impedance is prescribed and the real and imaginary parts are given by LC1 and LC2");
            }
        }
        FUNCTION(lc1) {/FILTER/curveoption/0/EQ;}
        FUNCTION(lc2) {/FILTER/curveoption/0/EQ;}
    }

    RADIO(restrt)
    {
        ADD(0,"0:LS-DYNA time domain analysis is processed and generates a new binary file");
        ADD(1,"1:LS-DYNA time domain analysis is not processed. The binary files from previous run are used");
        ADD(2,"2:LS-DYNA restarts from d3dump file by using R= command line parameter");
        ADD(3,"3:LS-DYNA reads in user provided velocity history saved in an ASCII file, bevel");
        ADD(4,"4:Run acoustic computation on a boundary element mesh with velocity information given with a denser finite element mesh in last run");
        ADD(5,"5:LS-DYNA time domain analysis is not processed. The binary file filename from previous run is used.An FFT is performed to get the new frequency domain boundary velocity and the results are saved in bin_velfreq");
    }
    RADIO(iedge)
    {
        ADD(0,"0:Free edge and multi-connection constraints not considered");
        ADD(1,"1:Free edge and multi-connection constraints considered");
        ADD(2,"2:Only free edge constraints are considered");
        ADD(3,"3:Only multi-connection constraints are considered");
    }
    RADIO(noel)
    {
        ADD(0,"0:Elements or Segments");
        ADD(1,"1:Nodes");
    }
    SCALAR(nfrup);
    RADIO(velout)
    {
        ADD(0,"0:No writing out velocity data");
        ADD(1,"1:Write out time domain velocity data");
        ADD(2,"2:Write out frequency domain velocity data");
    }
    RADIO(dba)
    {
        ADD(0,"0:No writing out weighted SPL files");
        ADD(1,"1:Write out Press_dB(A) by using A-weighting");
        ADD(2,"2:Write out Press_dB(B) by using B-weighting");
        ADD(3,"3:Write out Press_dB(C) by using C-weighting");
        ADD(4,"4:Write out Press_dB(D) by using D-weighting");
    }
    
    // Card 5 is category type
    
    // Card 6a
    if(bemoptions == 1)
    {
        SCALAR(planeid);
    }
    
    // Card 6b
    if(bemoptions == 2)
    {
        DATA(nsidpc) { SUBTYPES = ( /SETS/SET_NODE_IDPOOL ) ;  }
    }

}

// File format
FORMAT(Keyword971_R9.3) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    if (IO_FLAG == 0)
    {
        if(bemoptions == 1)
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_BEM_HALF_SPACE");
        }
        else if(bemoptions == 2)
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_BEM_PANEL_CONTRIBUTION");
        }
        else if(bemoptions == 3)
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_BEM_ATV");
        }
        else if(bemoptions == 4)
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_BEM_MATV");
        }
        else
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_BEM");
        }
    }
    
    if(IO_FLAG == 1)
    {
        HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_BEM%4s",Type);
        if(Type == "_HAL")
        {
            ASSIGN(bemoptions,1);
        }
        else if(Type == "_PAN")
        {
            ASSIGN(bemoptions,2);
        }
        else if(Type == "_ATV")
        {
            ASSIGN(bemoptions,3);
        }
        else if(Type == "_MAT")
        {
            ASSIGN(bemoptions,4);
        }
        else
        {
            ASSIGN(bemoptions,0);
        }
    }
    
    COMMENT("$       R0         C      FMIN      FMAX     NFREQ     DTOUT    TSTART      PREF");
    CARD("%10lg%10lg%10lg%10lg%10d%10lg%10lg%10lg",r0,SCALAR_OR_OBJECT(c_negflag,c,c_freq),fmin,fmax,nfreq,dtout,tstart,pref);
    
    if(IO_FLAG == 1)
    {
        CARD_PREREAD("%10s%10d%10s%10d%10s%10s%10s%10s",empty_string,DUMMY_TYPEXT,empty_string,DUMMY_TYPINT,empty_string,empty_string,empty_string,empty_string);
    }
    
    if(IO_FLAG == 1 && DUMMY_TYPEXT == 1)
    {
        ASSIGN(nsidext_type, /SETS/SET_NODE_IDPOOL, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_TYPEXT == 2)
    {
        ASSIGN(nsidext_type, /SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_TYPEXT == 0)
    {
        ASSIGN(nsidext_type, /NODE, IMPORT); 
    }
    if(IO_FLAG == 1 && DUMMY_TYPINT == 1)
    {
        ASSIGN(nsidint_type, /SETS/SET_NODE_IDPOOL, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_TYPINT == 2)
    {
        ASSIGN(nsidint_type, /SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_TYPINT == 0)
    {
        ASSIGN(nsidint_type, /NODE, IMPORT); 
    }
    
    COMMENT("$  NSIDEXT    TYPEXT   NSIDINT    TYPINT    FFTWIN     TRSLT    IPFILE    IUNITS");
    CARD("%10d%10d%10d%10d%10d%10d%10d%10d",nsidext,typext,nsidint,typint,fftwin,trslt,ipfile,iunits);
    
    if(fftwin == 5)
    {
        COMMENT("$   T_HOLD     DECAY");
        CARD("%10lg%10lg",t_hold,decay);
    }
    
    COMMENT("$   METHOD     MAXIT    TOLITR       NDD     TOLLR    TOLFCT     IBDIM       NPG");
    CARD("%10d%10d%10lg%10d%10lg%10lg%10d%10d",method,maxit,tolitr,ndd,tollr,tolfct,ibdim,npg);
    
    COMMENT("$                NBC    RESTRT     IEDGE      NOEL     NFRUP    VELOUT       DBA");
    CARD("          %10d%10d%10d%10d%10d%10d%10d",nbc,restrt,iedge,noel,nfrup,velout,dba);
    
    
    if (IO_FLAG == 0)
    {
        COMMENT("$     SSID    SSTYPE      NORM    BEMTYP       LC1       LC2                    ");
        CARD_LIST(nbc)
        {
            CARD("%10d%10d%10d%10d%10d%10d", CELL_COND( if (sstypes == 0)  
                                                                psids;
                                                        else if (sstypes == 1)  
                                                                pids;
                                                        else if (sstypes == 2)  
                                                                ssids;),sstypes, norms,SCALAR_OR_OBJECT(bemtyp_option,bemtyp,bemtyp_curve), lc1, lc2);
        }
    }
    else
    {
        // Set NBC to value 1 if BLANK or 0 is read
        ASSIGN(display_status, _GET_DISPLAY_STATUS(nbc), IMPORT);
        if (display_status == 0 || nbc == 0)
        {
            ASSIGN(nbc, 1, IMPORT);
        }
        
        CARD_LIST(nbc)
        { 
            CARD_PREREAD("%10s%10d%10s%10d%10s%10s",empty_string,DUMMY_SSTYPES,empty_string,DUMMY_BEMTYP,empty_string,empty_string);
            CARD("%10d%10d%10d%10d%10d%10d", CELL_COND( if(DUMMY_SSTYPES == 0)
                                                                        psids;
                                                                else if(DUMMY_SSTYPES == 1)
                                                                        pids;
                                                                else if(DUMMY_SSTYPES == 2)
                                                                        ssids;), sstypes , norms, SCALAR_OR_OBJECT(bemtyp_option,bemtyp,bemtyp_curve),lc1, lc2); 
                                                                    
            if(DUMMY_SSTYPES == 0)
            {
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(pids, 0, IMPORT);
            }
            else if(DUMMY_SSTYPES == 1)
            {
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            else if(DUMMY_SSTYPES == 2)
            {
                ASSIGN(pids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            if(DUMMY_BEMTYP >= 0)
            {
                ASSIGN(bemtyp_option, 0, IMPORT);
                ASSIGN(bemtyp_curve, 0, IMPORT);
            }
            else
            {
                ASSIGN(bemtyp_option, 1, IMPORT);
                ASSIGN(bemtyp, 0, IMPORT);
            }
        }
    }
    if(bemoptions == 1)
    {
            COMMENT("$      PID");
            CARD("%10d",planeid);
    }
    else if(bemoptions == 2)
    {
            COMMENT("$   NSIDPC");
            CARD("%10d",nsidpc);
    }
}

// File format
FORMAT(Keyword971_R8.0) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    if (IO_FLAG == 0)
    {
        if(bemoptions == 1)
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_BEM_HALF_SPACE");
        }
        else if(bemoptions == 2)
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_BEM_PANEL_CONTRIBUTION");
        }
        else if(bemoptions == 3)
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_BEM_ATV");
        }
        else if(bemoptions == 4)
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_BEM_MATV");
        }
        else
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_BEM");
        }
    }
    
    if(IO_FLAG == 1)
    {
        HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_BEM%4s",Type);
        if(Type == "_HAL")
        {
            ASSIGN(bemoptions,1);
        }
        else if(Type == "_PAN")
        {
            ASSIGN(bemoptions,2);
        }
        else if(Type == "_ATV")
        {
            ASSIGN(bemoptions,3);
        }
        else if(Type == "_MAT")
        {
            ASSIGN(bemoptions,4);
        }
        else
        {
            ASSIGN(bemoptions,0);
        }
    }
    
    COMMENT("$       R0         C      FMIN      FMAX     NFREQ     DTOUT    TSTART      PREF");
    CARD("%10lg%10lg%10lg%10lg%10d%10lg%10lg%10lg",r0,SCALAR_OR_OBJECT(c_negflag,c,c_freq),fmin,fmax,nfreq,dtout,tstart,pref);
    
    if(IO_FLAG == 1)
    {
        CARD_PREREAD("%10s%10d%10s%10d%10s%10s%10s%10s",empty_string,DUMMY_TYPEXT,empty_string,DUMMY_TYPINT,empty_string,empty_string,empty_string,empty_string);
    }
    
    if(IO_FLAG == 1 && DUMMY_TYPEXT == 1)
    {
        ASSIGN(nsidext_type, /SETS/SET_NODE_IDPOOL, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_TYPEXT == 2)
    {
        ASSIGN(nsidext_type, /SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_TYPEXT == 0)
    {
        ASSIGN(nsidext_type, /NODE, IMPORT); 
    }
    if(IO_FLAG == 1 && DUMMY_TYPINT == 1)
    {
        ASSIGN(nsidint_type, /SETS/SET_NODE_IDPOOL, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_TYPINT == 2)
    {
        ASSIGN(nsidint_type, /SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_TYPINT == 0)
    {
        ASSIGN(nsidint_type, /NODE, IMPORT); 
    }
    
    COMMENT("$  NSIDEXT    TYPEXT   NSIDINT    TYPINT    FFTWIN     TRSLT    IPFILE    IUNITS");
    CARD("%10d%10d%10d%10d%10d%10d%10d%10d",nsidext,typext,nsidint,typint,fftwin,trslt,ipfile,iunits);
    
    COMMENT("$   METHOD     MAXIT    TOLITR       NDD     TOLLR    TOLFCT     IBDIM       NPG");
    CARD("%10d%10d%10lg%10d%10lg%10lg%10d%10d",method,maxit,tolitr,ndd,tollr,tolfct,ibdim,npg);
    
    COMMENT("$                NBC    RESTRT     IEDGE      NOEL     NFRUP    VELOUT          ");
    CARD("          %10d%10d%10d%10d%10d%10d",nbc,restrt,iedge,noel,nfrup,velout);
    
    
    if (IO_FLAG == 0)
    {
        COMMENT("$     SSID    SSTYPE      NORM    BEMTYP       LC1       LC2                    ");
        CARD_LIST(nbc)
        {
            CARD("%10d%10d%10d%10d%10d%10d", CELL_COND( if (sstypes == 0)  
                                                                psids;
                                                        else if (sstypes == 1)  
                                                                pids;
                                                        else if (sstypes == 2)  
                                                                ssids;),sstypes, norms,SCALAR_OR_OBJECT(bemtyp_option,bemtyp,bemtyp_curve), lc1, lc2);
        }
    }
    else
    {
    
        // Set NBC to value 1 if BLANK or 0 is read
        ASSIGN(display_status, _GET_DISPLAY_STATUS(nbc), IMPORT);
        if (display_status == 0 || nbc == 0)
        {
            ASSIGN(nbc, 1, IMPORT);
        }
        
        CARD_LIST(nbc)
        { 
            CARD_PREREAD("%10s%10d%10s%10d%10s%10s",empty_string,DUMMY_SSTYPES,empty_string,DUMMY_BEMTYP,empty_string,empty_string);
            CARD("%10d%10d%10d%10d%10d%10d", CELL_COND( if(DUMMY_SSTYPES == 0)
                                                                        psids;
                                                                else if(DUMMY_SSTYPES == 1)
                                                                        pids;
                                                                else if(DUMMY_SSTYPES == 2)
                                                                        ssids;), sstypes , norms, SCALAR_OR_OBJECT(bemtyp_option,bemtyp,bemtyp_curve),lc1, lc2); 
                                                                    
            if(DUMMY_SSTYPES == 0)
            {
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(pids, 0, IMPORT);
            }
            else if(DUMMY_SSTYPES == 1)
            {
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            else if(DUMMY_SSTYPES == 2)
            {
                ASSIGN(pids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            if(DUMMY_BEMTYP >= 0)
            {
                ASSIGN(bemtyp_option, 0, IMPORT);
                ASSIGN(bemtyp_curve, 0, IMPORT);
            }
            else
            {
                ASSIGN(bemtyp_option, 1, IMPORT);
                ASSIGN(bemtyp, 0, IMPORT);
            }
        }
    }
    if(bemoptions == 1)
    {
            COMMENT("$      PID");
            CARD("%10d",planeid);
    }
    else if(bemoptions == 2)
    {
            COMMENT("$   NSIDPC");
            CARD("%10d",nsidpc);
    }
}

// File format
FORMAT(Keyword971_R7.1) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    if (IO_FLAG == 0)
    {
        if(bemoptions == 1)
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_BEM_HALF_SPACE");
        }
        else if(bemoptions == 2)
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_BEM_PANEL_CONTRIBUTION");
        }
        else if(bemoptions == 3)
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_BEM_ATV");
        }
        else
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_BEM");
        }
    }
    
    if(IO_FLAG == 1)
    {
        HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_BEM%4s",Type);
        if(Type == "_HAL")
        {
            ASSIGN(bemoptions,1);
        }
        else if(Type == "_PAN")
        {
            ASSIGN(bemoptions,2);
        }
        else if(Type == "_ATV")
        {
            ASSIGN(bemoptions,3);
        }
        else
        {
            ASSIGN(bemoptions,0);
        }
    }
    
    COMMENT("$       R0         C      FMIN      FMAX     NFREQ     DTOUT    TSTART      PREF");
    CARD("%10lg%10lg%10lg%10lg%10d%10lg%10lg%10lg",r0,c,fmin,fmax,nfreq,dtout,tstart,pref);
    
    if(IO_FLAG == 1)
    {
        CARD_PREREAD("%10s%10d%10s%10d%10s%10s%10s%10s",empty_string,DUMMY_TYPEXT,empty_string,DUMMY_TYPINT,empty_string,empty_string,empty_string,empty_string);
    }
    
    if(IO_FLAG == 1 && DUMMY_TYPEXT == 1)
    {
        ASSIGN(nsidext_type, /SETS/SET_NODE_IDPOOL, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_TYPEXT == 2)
    {
        ASSIGN(nsidext_type, /SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_TYPEXT == 0)
    {
        ASSIGN(nsidext_type, /NODE, IMPORT); 
    }
    if(IO_FLAG == 1 && DUMMY_TYPINT == 1)
    {
        ASSIGN(nsidint_type, /SETS/SET_NODE_IDPOOL, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_TYPINT == 2)
    {
        ASSIGN(nsidint_type, /SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_TYPINT == 0)
    {
        ASSIGN(nsidint_type, /NODE, IMPORT); 
    }
    
    COMMENT("$  NSIDEXT    TYPEXT   NSIDINT    TYPINT    FFTWIN     TRSLT    IPFILE    IUNITS");
    CARD("%10d%10d%10d%10d%10d%10d%10d%10d",nsidext,typext,nsidint,typint,fftwin,trslt,ipfile,iunits);
    
    COMMENT("$   METHOD     MAXIT    TOLITR       NDD     TOLLR    TOLFCT     IBDIM       NPG");
    CARD("%10d%10d%10lg%10d%10lg%10lg%10d%10d",method,maxit,tolitr,ndd,tollr,tolfct,ibdim,npg);
    
    COMMENT("$                NBC    RESTRT     IEDGE      NOEL     NFRUP    VELOUT          ");
    CARD("          %10d%10d%10d%10d%10d%10d",nbc,restrt,iedge,noel,nfrup,velout);
    
    
    if (IO_FLAG == 0)
    {
        COMMENT("$     SSID    SSTYPE      NORM    BEMTYP       LC1       LC2                    ");
        CARD_LIST(nbc)
        {
            CARD("%10d%10d%10d%10d%10d%10d", CELL_COND( if (sstypes == 0)  
                                                                psids;
                                                        else if (sstypes == 1)  
                                                                pids;
                                                        else if (sstypes == 2)  
                                                                ssids;),sstypes, norms,SCALAR_OR_OBJECT(bemtyp_option,bemtyp,bemtyp_curve), lc1, lc2);
        }
    }
    else
    {
        // Set NBC to value 1 if BLANK or 0 is read
        ASSIGN(display_status, _GET_DISPLAY_STATUS(nbc), IMPORT);
        if (display_status == 0 || nbc == 0)
        {
            ASSIGN(nbc, 1, IMPORT);
        }
        
        CARD_LIST(nbc)
        { 
            CARD_PREREAD("%10s%10d%10s%10d%10s%10s",empty_string,DUMMY_SSTYPES,empty_string,DUMMY_BEMTYP,empty_string,empty_string);
            CARD("%10d%10d%10d%10d%10d%10d", CELL_COND( if(DUMMY_SSTYPES == 0)
                                                                        psids;
                                                                else if(DUMMY_SSTYPES == 1)
                                                                        pids;
                                                                else if(DUMMY_SSTYPES == 2)
                                                                        ssids;), sstypes , norms, SCALAR_OR_OBJECT(bemtyp_option,bemtyp,bemtyp_curve),lc1, lc2); 
                                                                    
            if(DUMMY_SSTYPES == 0)
            {
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(pids, 0, IMPORT);
            }
            else if(DUMMY_SSTYPES == 1)
            {
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            else if(DUMMY_SSTYPES == 2)
            {
                ASSIGN(pids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            if(DUMMY_BEMTYP >= 0)
            {
                ASSIGN(bemtyp_option, 0, IMPORT);
                ASSIGN(bemtyp_curve, 0, IMPORT);
            }
            else
            {
                ASSIGN(bemtyp_option, 1, IMPORT);
                ASSIGN(bemtyp, 0, IMPORT);
            }
        }
    }
    if(bemoptions == 1)
    {
            COMMENT("$      PID");
            CARD("%10d",planeid);
    }
    else if(bemoptions == 2)
    {
            COMMENT("$   NSIDPC");
            CARD("%10d",nsidpc);
    }
}

// File format
FORMAT(Keyword971_R6.1) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    if (IO_FLAG == 0)
    {
        if(bemoptions == 1)
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_BEM_HALF_SPACE");
        }
        else if(bemoptions == 2)
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_BEM_PANEL_CONTRIBUTION");
        }
        else
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_BEM");
        }
    }
    
    if(IO_FLAG == 1)
    {
        HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_BEM%6s",Type);
        if(Type == "_HALF_")
        {
            ASSIGN(bemoptions,1);
        }
        else if(Type == "_PANEL")
        {
            ASSIGN(bemoptions,2);
        }
        else
        {
            ASSIGN(bemoptions,0);
        }
    }
    
    COMMENT("$       R0         C      FMIN      FMAX     NFREQ     DTOUT    TSTART      PREF");
    CARD("%10lg%10lg%10lg%10lg%10d%10lg%10lg%10lg",r0,c,fmin,fmax,nfreq,dtout,tstart,pref);
    
    if(IO_FLAG == 1)
    {
        CARD_PREREAD("%10s%10d%10s%10d%10s%10s%10s%10s",empty_string,DUMMY_TYPEXT,empty_string,DUMMY_TYPINT,empty_string,empty_string,empty_string,empty_string);
    }
    
    if(IO_FLAG == 1 && DUMMY_TYPEXT == 1)
    {
        ASSIGN(nsidext_type, /SETS/SET_NODE_IDPOOL, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_TYPEXT == 2)
    {
        ASSIGN(nsidext_type, /SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT); 
    }
    if(IO_FLAG == 1 && DUMMY_TYPINT == 1)
    {
        ASSIGN(nsidint_type, /SETS/SET_NODE_IDPOOL, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_TYPINT == 2)
    {
        ASSIGN(nsidint_type, /SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT); 
    }
    
    COMMENT("$  NSIDEXT    TYPEXT   NSIDINT    TYPINT    FFTWIN     TRSLT    IPFILE    IUNITS");
    CARD("%10d%10d%10d%10d%10d%10d%10d%10d",nsidext,typext,nsidint,typint,fftwin,trslt,ipfile,iunits);
    
    COMMENT("$   METHOD     MAXIT    TOLITR       NDD     TOLLR    TOLFCT     IBDIM       NPG");
    CARD("%10d%10d%10lg%10d%10lg%10lg%10d%10d",method,maxit,tolitr,ndd,tollr,tolfct,ibdim,npg);
    
    COMMENT("$                NBC    RESTRT     IEDGE      NOEL     NFRUP                    ");
    CARD("          %10d%10d%10d%10d%10d",nbc,restrt,iedge,noel,nfrup);
    
    
    if (IO_FLAG == 0)
    {
        COMMENT("$     SSID    SSTYPE      NORM    BEMTYP       LC1       LC2                    ");
        CARD_LIST(nbc)
        {
            CARD("%10d%10d%10d%10d%10d%10d", CELL_COND( if (sstypes == 0)  
                                                                psids;
                                                        else if (sstypes == 1)  
                                                                pids;
                                                        else if (sstypes == 2)  
                                                                ssids;),sstypes, norms,SCALAR_OR_OBJECT(bemtyp_option,bemtyp,bemtyp_curve), lc1, lc2);
        }
    }
    else
    {
        // Set NBC to value 1 if BLANK or 0 is read
        ASSIGN(display_status, _GET_DISPLAY_STATUS(nbc), IMPORT);
        if (display_status == 0 || nbc == 0)
        {
            ASSIGN(nbc, 1, IMPORT);
        }
        
        CARD_LIST(nbc)
        { 
            CARD_PREREAD("%10s%10d%10s%10d%10s%10s",empty_string,DUMMY_SSTYPES,empty_string,DUMMY_BEMTYP,empty_string,empty_string);
            CARD("%10d%10d%10d%10d%10d%10d", CELL_COND( if(DUMMY_SSTYPES == 0)
                                                                        psids;
                                                                else if(DUMMY_SSTYPES == 1)
                                                                        pids;
                                                                else if(DUMMY_SSTYPES == 2)
                                                                        ssids;), sstypes , norms, SCALAR_OR_OBJECT(bemtyp_option,bemtyp,bemtyp_curve),lc1, lc2); 
                                                                    
            if(DUMMY_SSTYPES == 0)
            {
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(pids, 0, IMPORT);
            }
            else if(DUMMY_SSTYPES == 1)
            {
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            else if(DUMMY_SSTYPES == 2)
            {
                ASSIGN(pids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            if(DUMMY_BEMTYP >= 0)
            {
                ASSIGN(bemtyp_option, 0, IMPORT);
                ASSIGN(bemtyp_curve, 0, IMPORT);
            }
            else
            {
                ASSIGN(bemtyp_option, 1, IMPORT);
                ASSIGN(bemtyp, 0, IMPORT);
            }
        }
    }
    if(bemoptions == 1)
    {
            COMMENT("$      PID");
            CARD("%10d",planeid);
    }
    else if(bemoptions == 2)
    {
            COMMENT("$   NSIDPC");
            CARD("%10d",nsidpc);
    }
}
