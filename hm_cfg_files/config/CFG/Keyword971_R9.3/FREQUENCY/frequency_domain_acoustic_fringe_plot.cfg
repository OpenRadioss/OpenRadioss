//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
ATTRIBUTES(COMMON) {

    //Attributes for HM usage 
    IO_FLAG                             = VALUE(INT, "Import/Export flag");
    _HMCOMMENTSFLAG                     = VALUE(INT, "Write HM Comments");
    _HWCOLOR                            = VALUE(INT, "Entity Color");
    _HAS_HEADER                         = VALUE(BOOL,"Has Header Card");
    TITLE                               = VALUE(STRING, "TITLE");
    solverkeyword                       = VALUE(STRING, "Solver Keyword");
    fringeplotoptions                   = VALUE(INT,"FRINGE PLOT options","OPTION");
    Type                                = VALUE(STRING, "");

    // Solver fields
    pid_sid                              = VALUE(MULTIOBJECT,"Part ID or part set ID or node set ID") { SUBTYPES = ( /SETS/SET_NODE_IDPOOL,  /SETS/SET_PART_IDPOOL, /COMPONENT ) ; }
    center                               = VALUE(INT,"Flag for defining the center point for the sphere");
    r                                    = VALUE(FLOAT,"Radius of the sphere");
    density                              = VALUE(INT,"Parameter to define how coarse or dense the created sphere mesh is");
    center_point_plate                   = ARRAY[3](FLOAT, "coordinates of the center","CENTER_POINT");
    center_point_sphere                  = ARRAY[3](FLOAT, "coordinates of the center","CENTER_POINT");
    norm                                 = VALUE(INT,"Norm direction of the plate");
    len_x                                = VALUE(FLOAT,"Length of longer side of the plate");
    len_y                                = VALUE(FLOAT,"Length of shorter side of the plate");
    nelm_x                               = VALUE(INT,"Number of elements on longer side of the plate","NELM_X");
    nelm_y                               = VALUE(INT,"Number of elements on shorter side of the plate","NELM_Y");
    empty_string                         = VALUE(STRING, "empty string");
    pid_sid_type                         = VALUE(STRING, "Type of multi object");
    DUMMY_TYPE                           = VALUE(INT, "FRINGEPLOT Option Type");
    DUMMY_CENTER                         = VALUE(INT, "CENTER");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    IO_FLAG                            =-1;
    _HMCOMMENTSFLAG                    =-1;
    _HWCOLOR                           =-1;
    _HAS_HEADER                        = -1;
    TITLE                              =-1;
    solverkeyword                      = -1;
    empty_string                       = -1;
    Type                               = -1;
    pid_sid_type                       = -1;
    DUMMY_TYPE                         = -1;
    DUMMY_CENTER                       = -1;
}

DEFAULTS(COMMON)
{
    center                               = 1;
    norm                                 = 1;
    nelm_x                               = 10;
    nelm_y                               = 10;
}

GUI(COMMON)
{
    RADIO(fringeplotoptions)
    {
        ADD(3,"NODE_SET");
        ADD(1,"PART");
        ADD(2,"PART_SET");
        ADD(5,"PLATE");
        ADD(4,"SPHERE");
    } { PARAMETERIZED = FALSE; DISPLAY_STATUS=ALWAYS_ON;}
    if(fringeplotoptions == 1)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_ACOUSTIC_FRINGE_PLOT_PART);
        DATA(pid_sid) { SUBTYPES = ( /COMPONENT ) ;  }
    }
    else if(fringeplotoptions == 2)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_ACOUSTIC_FRINGE_PLOT_PART_SET);
        DATA(pid_sid) { SUBTYPES = ( /SETS/SET_PART_IDPOOL ) ;  }
    }
    else if(fringeplotoptions == 3)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_ACOUSTIC_FRINGE_PLOT_NODE_SET);
        DATA(pid_sid) { SUBTYPES = ( /SETS/SET_NODE_IDPOOL ) ;  }
    }
    else if(fringeplotoptions == 4)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_ACOUSTIC_FRINGE_PLOT_SPHERE);
        RADIO(center)
        {
            ADD(1,"1:Mass center of the original structure");
            ADD(2,"2:Geometry center of the original structure");
            ADD(3,"3:Defined by (x, y, z)");
        }
        SCALAR(r) { DIMENSION = "l"; }
        SCALAR(density);
        if(center == 3)
        {
            TRIPLE(center_point_sphere) {  TYPE = VALUE_DIFFERENTIATOR_POSITION  ; DIMENSION = "l"; PARAMETERIZED = FALSE; }
        }
    }
    else if(fringeplotoptions == 5)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_ACOUSTIC_FRINGE_PLOT_PLATE);
        RADIO(norm)
        {
            ADD(1,"1:X-direction");
            ADD(2,"2:Y-direction");
            ADD(3,"3:Z-direction");
        }
        SCALAR(len_x) { DIMENSION = "l"; }
        SCALAR(len_y) { DIMENSION = "l"; }
        TRIPLE(center_point_plate) {  TYPE = VALUE_DIFFERENTIATOR_POSITION ; DIMENSION = "l"; PARAMETERIZED = FALSE;}
        SCALAR(nelm_x);
        SCALAR(nelm_y);
    }
}

// File format
FORMAT(Keyword971_R9.3) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    if (IO_FLAG == 0)
    {
        if(fringeplotoptions == 1)
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_FRINGE_PLOT_PART");
        }
        else if(fringeplotoptions == 2)
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_FRINGE_PLOT_PART_SET");
        }
        else if(fringeplotoptions == 3)
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_FRINGE_PLOT_NODE_SET");
        }
        else if(fringeplotoptions == 4)
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_FRINGE_PLOT_SPHERE");
        }
        else if(fringeplotoptions == 5)
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_FRINGE_PLOT_PLATE");
        }
    }
    
    if(IO_FLAG == 1)
    {
        HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_FRINGE_PLOT%5s",Type);
        if(Type == "_PART")
        {
            HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_FRINGE_PLOT_PART%4s",Type);
            if(Type == "_SET")
            {
                ASSIGN(fringeplotoptions,2);
            }
            else
            {
                ASSIGN(fringeplotoptions,1);
            }
        }
        else if(Type == "_NODE")
        {
            ASSIGN(fringeplotoptions,3);
        }
        else if(Type == "_SPHE")
        {
            ASSIGN(fringeplotoptions,4);
        }
        else if(Type == "_PLAT")
        {
            ASSIGN(fringeplotoptions,5);
        }
    }
    
    if(fringeplotoptions == 1 || fringeplotoptions == 2 || fringeplotoptions == 3)
    {
        if(IO_FLAG == 1 && fringeplotoptions == 1)
        {
            ASSIGN(pid_sid_type, /COMPONENT, IMPORT); 
        }
        else if(IO_FLAG == 1 && fringeplotoptions == 2)
        {
            ASSIGN(pid_sid_type, /SETS/SET_PART_IDPOOL, IMPORT); 
        }
        else if(IO_FLAG == 1 && fringeplotoptions == 3)
        {
            ASSIGN(pid_sid_type, /SETS/SET_NODE_IDPOOL, IMPORT); 
        }
        
        COMMENT("$  PID/SID");
        CARD("%10d",pid_sid);
    }

    else if(fringeplotoptions == 4)
    {
        if (IO_FLAG == 0)
        {
            if(center == 3)
            {
                COMMENT("$   CENTER         R   DENSITY         X         Y         Z");
                CARD("%10d%10lg%10d%10lg",center,r,density,CELL_LIST(center_point_sphere));
            }
            else
            {
                COMMENT("$   CENTER         R   DENSITY");
                CARD("%10d%10lg%10d",center,r,density);
            }
        }
        else
        {
            CARD_PREREAD("%10d",DUMMY_CENTER);
            if(DUMMY_CENTER == 3)
            {
                CARD("%10d%10lg%10d%10lg",center,r,density,CELL_LIST(center_point_sphere));
            }
            else
            {
                CARD("%10d%10lg%10d",center,r,density);
            }
        }
    }
    
    else if(fringeplotoptions == 5)
    {
        COMMENT("$     NORM     LEN_X     LEN_Y         X         Y         Z    NELM_X    NELM_Y");
        CARD("%10d%10lg%10lg%10lg%10d%10d",norm,len_x,len_y,CELL_LIST(center_point_plate),nelm_x,nelm_y);
    }
}
