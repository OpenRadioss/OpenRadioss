//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
ATTRIBUTES(COMMON) {

    //Attributes for HM usage 
    IO_FLAG                             = VALUE(INT, "Import/Export flag");
    _HMCOMMENTSFLAG                     = VALUE(INT, "Write HM Comments");
    _HWCOLOR                            = VALUE(INT, "Entity Color");
    _HAS_HEADER                         = VALUE(BOOL,"Has Header Card");
    TITLE                               = VALUE(STRING, "TITLE");
    solverkeyword                       = VALUE(STRING, "Solver Keyword");
    fatigue                             = VALUE(INT,"FATIGUE option","OPTION");
    Nftg_negflag                        = VALUE(BOOL,"NFTG option","NFTG_FLAG");
    Type                                = VALUE(STRING, "");

    // Solver fields
    mdmin                                = VALUE(INT,"The first mode in modal superposition method");
    mdmax                                = VALUE(INT,"The last mode in modal superposition method");
    fnmin                                = VALUE(FLOAT,"The minimum natural frequency in modal superposition Method");
    fnmax                                = VALUE(FLOAT,"The maximum natural frequency in modal superposition method");
    restrt                               = VALUE(INT,"Restart option");
    restrm                               = VALUE(INT,"Restart option when different types of loads are present");
    dampf                                = VALUE(FLOAT,"Modal damping coefficient");
    lcdam                                = VALUE(FUNCT, "Load Curve ID defining mode dependent modal damping coefficient");
    lctyp                                = VALUE(INT,"Type of load curve defining modal damping coefficient");
    dmpmas                               = VALUE(FLOAT,"Mass proportional damping constant alpha, in Rayleigh damping");
    dmpstf                               = VALUE(FLOAT,"Stiffness proportional damping constant beta, in Rayleigh damping");
    dmptyp                               = VALUE(INT,"Type of damping");
    vaflag                               = VALUE(INT,"Loading type");
    method                               = VALUE(INT,"Method for modal response analysis");
    unit                                 = VALUE(INT,"Flag for acceleration unit conversion");
    umlt                                 = VALUE(FLOAT,"Multiplier for converting g to [length unit]/[time unit]2");
    vapsd                                = VALUE(INT,"Flag for PSD output");
    varms                                = VALUE(INT,"Flag for RMS output");
    napsd                                = SIZE("Number of auto PSD load definition");
    ncpsd                                = SIZE("Number of cross PSD load definition");
    ldtyp                                = VALUE(INT,"Excitation load");
    ipanelu                              = VALUE(INT,"Number of strips in U direction");
    ipanelv                              = VALUE(INT,"Number of strips in V direction");
    temper                               = VALUE(FLOAT,"Temperature");
    ldflag                               = VALUE(INT,"Type of loading curves");
    stype                                = ARRAY[napsd](INT,"Flag specifying meaning of SID");
    nids                                 = ARRAY[napsd](NODE, "Node ID","NIDS");
    nsids                                = ARRAY[napsd](SETS, "Node Set ID","NSIDS") { SUBTYPES = (/SETS/SET_NODE_IDPOOL);  }
    ssids                                = ARRAY[napsd](SETS, "Segment Set ID","SSIDS") { SUBTYPES = (/SETS/SET_SEGMENT_GENERAL_IDPOOL);  }
    pids                                 = ARRAY[napsd](COMPONENT, "Part ID","PIDS");
    psids                                = ARRAY[napsd](SETS, "Part Set ID","PSIDS") { SUBTYPES = (/SETS/SET_PART_IDPOOL) ;  }
    stype_neg                            = ARRAY[napsd](INT,"|STYPE| is the ID of the load cases");
    sids                                 = ARRAY[napsd](INT,"|SID| is the ID of the load cases","SIDS");
    dof                                  = ARRAY[napsd](INT,"Applicable degrees-of-freedom for nodal force excitation or base acceleration or wave direction");
    ldpsd                                = ARRAY[napsd](FUNCT, "Load curve for PSD, SPL, or time history excitation");
    ldvel                                = ARRAY[napsd](FUNCT, "Load curve for phase velocity");
    ldflw                                = ARRAY[napsd](FUNCT, "Load curve for exponential decay for TBL in flow-wise direction");
    ldspn                                = ARRAY[napsd](FUNCT, "Load curve for exponential decay for TBL in span-wise direction");
    cid                                  = ARRAY[napsd](VECTOR, "Vector ID for defining load direction for nodal force, or base excitation");
    systemid                             = ARRAY[napsd](SYSTEM, "Coordinate system ID for defining wave direction");
    load_i                               = ARRAY[ncpsd](INT,"ID of load i for cross PSD");
    load_j                               = ARRAY[ncpsd](INT,"ID of load j for cross PSD");
    lctyp2                               = ARRAY[ncpsd](INT,"Type of load curves (LDPSD1 and LDPSD2) for defining cross PSD");
    ldpsd1                               = ARRAY[ncpsd](FUNCT, "Load curve for real part or magnitude of cross PSD");
    ldpsd2                               = ARRAY[ncpsd](FUNCT, "Load curve for imaginary part or phase angle of cross PSD");
    mftg                                 = VALUE(INT,"Method for random fatigue analysis");
    nftg                                 = SIZE("Field specifying the number of S - N curves to be defined");
    nftg_negative                        = VALUE(INT,"Field specifying the number of S - N curves to be defined");
    sntype                               = VALUE(INT,"Stress type of S - N curve in fatigue analysis");
    texpos                               = VALUE(FLOAT,"Exposure time");
    strsf                                = VALUE(FLOAT,"Stress scale factor to accommodate different ordinates in S - N curve");
    inftg                                = SIZE("Flag for including initial damage ratio");
    ptype                                = ARRAY[nftg](INT,"Type of PID");
    partid                               = ARRAY[nftg](COMPONENT, "Part ID", "PIDS2");
    partsetid                            = ARRAY[nftg](SETS, "Part Set ID", "PSIDS2") { SUBTYPES = (/SETS/SET_PART_IDPOOL) ;  }
    solidsetid                           = ARRAY[nftg](SETS, "Solid Set ID", "SOLIDSID") { SUBTYPES = (/SETS/SET_SOLID_IDPOOL) ;  }
    beamsetid                            = ARRAY[nftg](SETS, "Beam Set ID", "BEAMSID") { SUBTYPES = (/SETS/SET_BEAM_IDPOOL) ;  }
    shellsetid                           = ARRAY[nftg](SETS, "Shell Set ID", "SHELLSID") { SUBTYPES = (/SETS/SET_SHELL_IDPOOL) ;  }
    thickshellsetid                      = ARRAY[nftg](SETS, "Thick Shell Set ID", "THICKSHELLSID") { SUBTYPES = (/SETS/SET_TSHELL_IDPOOL) ;  }
    lcid_curve                           = ARRAY[nftg](FUNCT, "S - N fatigue curve ID");
    lcid_negative                        = ARRAY[nftg](INT,"S - N fatigue curve Negative values");
    ltype                                = ARRAY[nftg](INT,"Type of LCID");
    a                                    = ARRAY[nftg](FLOAT,"Material parameter a in S - N fatigue equation");
    b                                    = ARRAY[nftg](FLOAT,"Material parameter b in S - N fatigue equation");
    sthres                               = ARRAY[nftg](FLOAT,"Fatigue threshold");
    snlimt                               = ARRAY[nftg](INT,"Flag setting algorithm used when stress is lower than the lowest stress on S - N curve or lower than STHRES");
    filenames                            = ARRAY[inftg](STRING,"Path and name of existing binary database for fatigue information");
    DUMMY_SID                            = VALUE(INT, "SID");
    DUMMY_STYPE                          = VALUE(INT, "STYPE");
    DUMMY_PTYPE                          = VALUE(INT, "PTYPE");
    DUMMY_LCID                           = VALUE(INT, "LCID");
    DUMMY_NFTG                           = VALUE(INT, "NFTG");
    empty_string                         = VALUE(STRING, "empty string");
    stype_option                         = ARRAY[napsd](BOOL,"Flag specifying STYPE option","STYPE_OPTIONS");
    lcid_option                          = ARRAY[nftg](BOOL,"Flag specifying LCID options","LCID_FLAG");
    DUMMY_BLANK                          = VALUE(INT, "DUMMY_BLANK");
    display_status                       = VALUE(INT, "");
 
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    IO_FLAG                            =-1;
    _HMCOMMENTSFLAG                    =-1;
    _HWCOLOR                           =-1;
    _HAS_HEADER                        = -1;
    TITLE                              =-1;
    solverkeyword                      = -1;
    DUMMY_SID                          = -1;
    DUMMY_STYPE                        = -1;
    DUMMY_PTYPE                        = -1;
    DUMMY_LCID                         = -1;
    DUMMY_NFTG                         = -1;
    empty_string                       = -1;
    Type                               = -1;
    DUMMY_BLANK                        = -1;
    display_status                     = -1;
}

CHECK(COMMON)
{
    stype_neg                               <     0;
    sids                                    <     0;
    inftg                                   <=    10;
    napsd                                   >      0;
    nftg                                    >      0;
    ncpsd                                   >=     0;
    inftg                                   >=     0;
}

DEFAULTS(COMMON)
{
    mdmin                                = 1;
    fnmin                                = 0.0;
    restrt                               = 0;
    restrm                               = 0;
    dampf                                = 0.0;
    lctyp                                = 0;
    dmpmas                               = 0.0;
    dmpstf                               = 0.0;
    dmptyp                               = 0;
    method                               = 0;
    napsd                                = 1;
    ncpsd                                = 0;
    temper                               = 0.0;
    ldflag                               = 0;
    lctyp2                               = 0;
    mftg                                 = 0;
    nftg                                 = 1;
    sntype                               = 0;
    texpos                               = 0.0;
    strsf                                = 1.0;
    inftg                                = 0;
    ptype                                = 0;
    ltype                                = 0;
    sthres                               = 0.0;
    snlimt                               = 0;
    nftg_negative                        = -999;
    filenames                            = "d3ftg";  // To be checked
}

GUI(COMMON)
{
    RADIO(fatigue)
    {
        ADD(0,"NONE");
        ADD(1,"FATIGUE");
    } { PARAMETERIZED = FALSE; DISPLAY_STATUS=ALWAYS_ON;}
    
    if(fatigue == 1)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_RANDOM_VIBRATION_FATIGUE);
    }
    else
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_RANDOM_VIBRATION);
    }
    
    // Card 1
    SCALAR(mdmin);
    SCALAR(mdmax);
    SCALAR(fnmin) { DIMENSION = "f"; }
    SCALAR(fnmax) { DIMENSION = "f"; }
    RADIO(restrt)
    {
        ADD(0,"0:A new modal analysis is performed");
        ADD(1,"1:Restart with d3eigv");
    }
    RADIO(restrm)
    {
        ADD(0, "0: Don't read the dump file for PSD and RMS");
        ADD(1, "1: Read in PSD and RMS values from the dump file and add them to the values computed in the current load case");
    }
    
    // Card 2
    SCALAR(dampf);
    FUNCTION(lcdam) {/FILTER/curveoption/0/EQ;}
    RADIO(lctyp)
    {
        ADD(0,"0:Abscissa value defines frequency");
        ADD(1,"1:Abscissa value defines mode number");
    }
    SCALAR(dmpmas);
    SCALAR(dmpstf);
    RADIO(dmptyp)
    {
        ADD(0,"0:Modal damping");
        ADD(1,"1:Broadband damping");
    }
    
    // Card 3
    RADIO(vaflag)
    {
        ADD(0,"0:No random vibration analysis");
        ADD(1,"1:Base acceleration");
        ADD(2,"2:Random pressure");
        ADD(3,"3:Plane wave");
        ADD(4,"4:Shock wave");
        ADD(5,"5:Progressive wave");
        ADD(6,"6:Reverberant wave");
        ADD(7,"7:Turbulent boundary layer wave");
        ADD(8,"8:Nodal force");
    }
    RADIO(method)
    {
        ADD(0,"0:Method set automatically by LS-DYNA (recommended)");
        ADD(1,"1:Modal superposition method");
        ADD(2,"2:Modal acceleration method");
        ADD(3,"3:Modal truncation augmentation method");
    }
    RADIO(unit)
    {
        ADD(0,"0:Use [length unit]/[time unit]2 as unit of acceleration");
        ADD(1,"1:Use g as unit for acceleration, and SI units (Newton, kg, meter, second, etc) elsewhere");
        ADD(2,"2:Use g as unit for acceleration, and Engineering units (lbf,lbf × second2/inch, inch, second, etc) elsewhere");
        ADD(3,"3:Use g as unit for acceleration, and units (kN, kg, mm, ms, GPa, etc.) elsewhere");
        ADD(-1,"-1:Use g as unit for acceleration and provide the multiplier for converting g to length unit divided by square of time unit");
    }
    SCALAR(umlt);
    RADIO(vapsd)
    {
        ADD(0,"0:Absolute PSD output is requested");
        ADD(1,"1:Relative PSD output is requested");
    }
    RADIO(varms)
    {
        ADD(0,"0:Absolute RMS output is requested");
        ADD(1,"1:Relative RMS output is requested");
    }
    SIZE(napsd);
    ARRAY(napsd, "napsd")
    {
        FLAG(stype_option);
        if(stype_option == FALSE)
        {
            RADIO(stype)
            {
                ADD(0, "0: Node");
                ADD(1, "1: Node Set");
                ADD(2, "2: Segment Set");
                ADD(3, "3: Part");
                ADD(4, "4: Part Set");
            }
        }

        if (stype_option == FALSE && stype == 0)  
        {
           DATA(nids);
        }
        else if (stype_option == FALSE && stype == 1)  
        {
           DATA(nsids);
        }
        else if (stype_option == FALSE && stype == 2)  
        {
           DATA(ssids);
        }
        else if (stype_option == FALSE && stype == 3)  
        {
           DATA(pids);
        }
        else if (stype_option == FALSE && stype == 4)  
        {
           DATA(psids);
        }
        else           
        {
           SCALAR(sids);
        }

        if (stype_option == TRUE)
        {
           SCALAR(stype_neg); 
        }
            
        RADIO(dof)
        {
            ADD(0, "0: Translational movement in direction given by vector VID");
            ADD(1, "1: X-translational degree-of-freedom");
            ADD(2, "2: Y-translational degree-of-freedom");
            ADD(3, "3: Z-translational degree-of-freedom");
            ADD(-1, "-1: X-translational degree-of-freedom");
            ADD(-2, "-2: Y-translational degree-of-freedom");
            ADD(-3, "-3: Z-translational degree-of-freedom");
        }
        FUNCTION(ldpsd) {/FILTER/curveoption/0/EQ;}
        FUNCTION(ldvel) {/FILTER/curveoption/0/EQ;}
        FUNCTION(ldflw) {/FILTER/curveoption/0/EQ;}
        FUNCTION(ldspn) {/FILTER/curveoption/0/EQ;}
        if (vaflag == 5 || vaflag == 6 || vaflag == 7)  
        {
          DATA(systemid); 
        }
        else               
        {
          DATA(cid);
        }
    }

    SIZE(ncpsd);
    ARRAY(ncpsd,"")
    {
        SCALAR(load_i);
        SCALAR(load_j);
        RADIO(lctyp2)
        {
            ADD(0,"0:LDPSD1 defines real part and LDPSD2 defines imaginary part");
            ADD(1,"1:LDPSD1 defines magnitude and LDPSD2 defines phase angle");
        }
        FUNCTION(ldpsd1) {/FILTER/curveoption/0/EQ;}
        FUNCTION(ldpsd2) {/FILTER/curveoption/0/EQ;}
    }
    
    // Card 4
    RADIO(ldtyp)
    {
        ADD(0,"0:PSD");
        ADD(1,"1:SPL (for plane wave only)");
        ADD(2,"2:Time history load");
    }
    SCALAR(ipanelu);
    SCALAR(ipanelv);
    SCALAR(temper) { DIMENSION = "k"; }
    RADIO(ldflag)
    {
        ADD(0,"0:Log-Log interpolation");
        ADD(1,"1:Semi-Log interpolation");
        ADD(2,"2:Linear-Linear interpolation");
    }

    // Card 6 only for Fatigue option
    if(fatigue == 1)
    {
        RADIO(mftg)
        {
            ADD(0,"0:No fatigue analysis");
            ADD(1,"1:Steinberg's three-band method");
            ADD(2,"2:Dirlik method");
            ADD(3,"3:Narrow band method");
            ADD(4,"4:Wirsching method");
            ADD(5,"5:Chaudhury and Dover method");
            ADD(6,"6:Tunna method");
            ADD(7,"7:Hancock method");
        }
        FLAG(Nftg_negflag);
        if(Nftg_negflag == TRUE)
        {
            SCALAR(nftg_negative);
        }
        else
        {
            SIZE(nftg);
            ARRAY(nftg, "nftg")
            {
                RADIO(ptype)
                {
                    ADD(0, "0: Part");
                    ADD(1, "1: Part Set");
                    ADD(2, "2: SET_SOLID");
                    ADD(3, "3: SET_BEAM");
                    ADD(4, "4: SET_SHELL");
                    ADD(5, "5: SET_TSHELL");
                }

                if (ptype == 0)  
                {
                   DATA(partid);
                }
                else if (ptype == 1)  
                {
                   DATA(partsetid);
                }
                else if (ptype == 2)  
                {
                   DATA(solidsetid);
                }
                else if (ptype == 3)  
                {
                   DATA(beamsetid);
                }
                else if (ptype == 4)  
                {
                   DATA(shellsetid);
                }
                else
                {
                   DATA(thickshellsetid);
                }

                FLAG(lcid_option);
                if(lcid_option == TRUE)
                {
                    RADIO(lcid_negative)
                    {
                        ADD(-1, "-1: S - N fatigue curve uses equation NS^b = a");
                        ADD(-2, "-2: S - N fatigue curve uses equation log(S) = a - b*log(N)");
                        ADD(-3, "-3: S - N fatigue curve uses equation S = a*N^b");
                    }
                }
                else
                {
                    FUNCTION(lcid_curve) {/FILTER/curveoption/0/EQ;}
                }
                RADIO(ltype)
                {
                    ADD(0, "0: Semi-log interpolation (default)");
                    ADD(1, "1: Log-Log interpolation");
                    ADD(2, "2: Linear-Linear interpolation");
                }
                SCALAR(a);
                SCALAR(b);
                if(lcid_option == TRUE) // STHRES is available only if LCID < 0
                {
                    SCALAR(sthres);
                }
                RADIO(snlimt)
                {
                    ADD(0, "0: If LCID > 0 , use the life at the last point on S - N curve. If LCID < 0 , use the life at STHRES");
                    ADD(1, "1: If LCID > 0 , extrapolation from the last two points on S - N curve. If LCID < 0 , Ignored");
                    ADD(2, "2: If LCID > 0 or LCID < 0 , Ignored");
                }
            }
        }
        SCALAR(sntype);
        SCALAR(texpos) { DIMENSION = "t"; }
        RADIO(strsf)
        {
            ADD(1.0, "1.0: Used if the ordinate in S - N curve is stress range");
            ADD(2.0, "2.0: Used if the ordinate in S - N curve is stress amplitude");
        }
        SIZE(inftg);
        ARRAY(inftg, "inftg")
        {
            SCALAR(filenames);
        }
    }
}

// File format
FORMAT(Keyword971_R10.1) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    if (IO_FLAG == 0)
    {
        if(fatigue == 1)
        {
            HEADER("*FREQUENCY_DOMAIN_RANDOM_VIBRATION_FATIGUE");
        }
        else
        {
            HEADER("*FREQUENCY_DOMAIN_RANDOM_VIBRATION");
        }
    }
    
    if(IO_FLAG == 1)
    {
        HEADER("*FREQUENCY_DOMAIN_RANDOM_VIBRATION%8s",Type);
        if(Type == "_FATIGUE")
        {
            ASSIGN(fatigue,1);
        }
        else
        {
            ASSIGN(fatigue,0);
        }
    }
    

    COMMENT("$    MDMIN     MDMAX     FNMIN     FNMAX    RESTRT              RESTRM          ");
    CARD("%10d%10d%10lg%10lg%10d          %10d",mdmin,mdmax,fnmin,fnmax,restrt,restrm);
    
    COMMENT("$    DAMPF     LCDAM     LCTYP    DMPMAS    DMPSTF    DMPTYP                    ");
    CARD("%10lg%10d%10d%10lg%10lg%10d",dampf,lcdam,lctyp,dmpmas,dmpstf,dmptyp);
    
    COMMENT("$   VAFLAG    METHOD      UNIT      UMLT     VAPSD     VARMS     NAPSD     NCPSD");
    CARD("%10d%10d%10d%10lg%10d%10d%10d%10d",vaflag,method,unit,umlt,vapsd,varms,napsd,ncpsd);
    
    COMMENT("$    LDTYP   IPANELU   IPANELV    TEMPER              LDFLAG                    ");
    CARD("%10d%10d%10d%10lg          %10d",ldtyp,ipanelu,ipanelv,temper,ldflag);
    
    
    if (IO_FLAG == 0)
    {
        if (napsd >= 1)
            COMMENT("$      SID     STYPE       DOF     LDPSD     LDVEL     LDFLW     LDSPN   CID/VID");
        CARD_LIST(napsd)
        {
            CARD("%10d%10d%10d%10d%10d%10d%10d%10d", CELL_COND( if (stype_option == FALSE && stype == 0)  
                                                                    nids;
                                                                else if (stype_option == FALSE && stype == 1)  
                                                                    nsids;
                                                                else if (stype_option == FALSE && stype == 2)  
                                                                    ssids;
                                                                else if (stype_option == FALSE && stype == 3)  
                                                                    pids;
                                                                else if (stype_option == FALSE && stype == 4)  
                                                                    psids;
                                                                else           sids; ),
                                                     CELL_COND( if (stype_option == FALSE)  stype; 
                                                                    else               stype_neg; ),dof, ldpsd, ldvel, ldflw, ldspn, 
                                                     CELL_COND( if (vaflag == 5 || vaflag == 6 || vaflag == 7)  systemid; 
                                                                    else               cid; ));
        }
    }
    else
    {
        // Set NAPSD to value 1 if BLANK or 0 is read
        ASSIGN(display_status, _GET_DISPLAY_STATUS(napsd), IMPORT);
        if (display_status == 0 || napsd == 0)
        {
            ASSIGN(napsd, 1, IMPORT);
        }
        
        CARD_LIST(napsd)
        { 
            ASSIGN(stype_option, 0, IMPORT);
            ASSIGN(stype_neg, -1, IMPORT);
            ASSIGN(stype, 0, IMPORT);
            ASSIGN(sids, -1, IMPORT);
            ASSIGN(nids, 0, IMPORT);
            ASSIGN(nsids, 0, IMPORT);
            ASSIGN(ssids, 0, IMPORT);
            ASSIGN(pids, 0, IMPORT);
            ASSIGN(psids, 0, IMPORT);
            CARD_PREREAD("%10d%10d%10s%10s%10s%10s%10s%10s",DUMMY_SID,DUMMY_STYPE,empty_string,empty_string,empty_string,empty_string,empty_string,empty_string);
            CARD("%10d%10d%10d%10d%10d%10d%10d%10d", CELL_COND( if (DUMMY_SID < 0)  sids; 
                                                                    else if(DUMMY_SID >= 0 && DUMMY_STYPE == 0)
                                                                            nids;
                                                                    else if(DUMMY_SID >= 0 && DUMMY_STYPE == 1)
                                                                            nsids;
                                                                    else if(DUMMY_SID >= 0 && DUMMY_STYPE == 2)
                                                                            ssids;
                                                                    else if(DUMMY_SID >= 0 && DUMMY_STYPE == 3)
                                                                            pids;
                                                                    else if(DUMMY_SID >= 0 && DUMMY_STYPE == 4)
                                                                            psids;), 
                                                         CELL_COND( if (DUMMY_STYPE < 0)  stype_neg; 
                                                                    else                  stype; ), dof, ldpsd, ldvel, ldflw, ldspn,
                                                         CELL_COND( if (vaflag == 5 || vaflag == 6 || vaflag == 7)  systemid; 
                                                                    else                  cid; )); 
                                                                    
            if(DUMMY_STYPE < 0)
            {
                ASSIGN(stype_option, 1, IMPORT);
            }
        }
    }
    
    if (ncpsd >= 1)
        COMMENT("$   LOAD_I    LOAD_J    LCTYP2    LDPSD1    LDPSD2                              ");
    CARD_LIST(ncpsd)
    {
        CARD("%10d%10d%10d%10d%10d",load_i,load_j,lctyp2,ldpsd1,ldpsd2);
    }
    
    if(fatigue == 1)
    {
        if (IO_FLAG == 0)
        {
            COMMENT("$     MFTG      NFTG    SNTYPE    TEXPOS     STRSF     INFTG                    ");
            CARD("%10d%10d%10d%10lg%10lg%10d",mftg,CELL_COND( if (Nftg_negflag == TRUE)
                                                                  nftg_negative;
                                                              else
                                                                  nftg;),sntype,texpos,strsf,inftg);
        }
        else
        {
            CARD_PREREAD("%10s%10d%10s%10s%10s%10s",empty_string,DUMMY_NFTG,empty_string,empty_string,empty_string,empty_string);
            CARD("%10d%10d%10d%10lg%10lg%10d",mftg,CELL_COND( if (DUMMY_NFTG == -999)
                                                                  nftg_negative;
                                                              else
                                                                  nftg;),sntype,texpos,strsf,inftg);
                                                                  
            if(DUMMY_NFTG == -999)
            {
                ASSIGN(Nftg_negflag,1);
            }
            else
            {
                ASSIGN(Nftg_negflag,0);
            }
        }
        
        if (Nftg_negflag == FALSE)
        {
            if (IO_FLAG == 0)
            {
                if (nftg >= 1)
                    COMMENT("$      PID      LCID     PTYPE     LTYPE         A         B    STHRES    SNLIMT");
                CARD_LIST(nftg)
                {
                    CARD("%10d%10d%10d%10d%10lg%10lg%10lg%10d", CELL_COND( if (ptype == 0)          partid; 
                                                                           else if (ptype == 1)     partsetid;
                                                                           else if (ptype == 2)     solidsetid;
                                                                           else if (ptype == 3)     beamsetid;
                                                                           else if (ptype == 4)     shellsetid;
                                                                           else if (ptype == 5)     thickshellsetid;), 
                                                                 CELL_COND( if (lcid_option == FALSE)    lcid_curve;
                                                                            else    lcid_negative;), ptype, ltype, a, b,
                                                                 CELL_COND( if (lcid_option == FALSE)    DUMMY_BLANK;
                                                                            else    sthres;), 
                                                                            snlimt);
                }
            }
            else
            {
                // Set NFTG to value 1 if BLANK or 0 is read
                ASSIGN(display_status, _GET_DISPLAY_STATUS(nftg), IMPORT);
                if (display_status == 0 || nftg == 0)
                {
                    ASSIGN(nftg, 1, IMPORT);
                }
                
                CARD_LIST(nftg)
                { 
                    ASSIGN(partid, 0, IMPORT);
                    ASSIGN(partsetid, 0, IMPORT);
                    ASSIGN(solidsetid, 0, IMPORT);
                    ASSIGN(beamsetid, 0, IMPORT);
                    ASSIGN(shellsetid, 0, IMPORT);
                    ASSIGN(thickshellsetid, 0, IMPORT);
                    ASSIGN(lcid_option, 0, IMPORT);
                    ASSIGN(lcid_curve, 0, IMPORT);
                    ASSIGN(lcid_negative, 0, IMPORT);
                    ASSIGN(sthres, 0, IMPORT);
                    CARD_PREREAD("%10s%10d%10d%10s%10s%10s%10s%10s",empty_string,DUMMY_LCID,DUMMY_PTYPE,empty_string,empty_string,empty_string,empty_string,empty_string);
                    CARD("%10d%10d%10d%10d%10lg%10lg%10lg%10d", CELL_COND( if (DUMMY_PTYPE == 0)  partid; 
                                                                            else if (DUMMY_PTYPE == 1)  partsetid;
                                                                            else if (DUMMY_PTYPE == 2)  solidsetid;
                                                                            else if (DUMMY_PTYPE == 3)  beamsetid;
                                                                            else if (DUMMY_PTYPE == 4)  shellsetid;
                                                                            else if (DUMMY_PTYPE == 5)  thickshellsetid;), 
                                                                 CELL_COND( if (DUMMY_LCID < 0)  lcid_negative; 
                                                                            else                  lcid_curve; ), ptype, ltype, a, b, 
                                                                 CELL_COND( if (DUMMY_LCID < 0)   sthres; 
                                                                            else                  DUMMY_BLANK; ), 
                                                                            snlimt); 
                    if(DUMMY_LCID < 0)
                    {
                        ASSIGN(lcid_option, 1, IMPORT);
                    }
                }
            }
        }
        if (inftg >= 1)
            COMMENT("$                                  FILENAME                                  ");
        CARD_LIST(inftg)
        {
                CARD("%-80s",filenames);
        }
    }
}
