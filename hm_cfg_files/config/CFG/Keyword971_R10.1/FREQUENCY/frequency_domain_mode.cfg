//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
ATTRIBUTES(COMMON) {

    //Attributes for HM usage 
    IO_FLAG                             = VALUE(INT, "Import/Export flag");
    _HMCOMMENTSFLAG                     = VALUE(INT, "Write HM Comments");
    _HWCOLOR                            = VALUE(INT, "Entity Color");
    _HAS_HEADER                         = VALUE(BOOL,"Has Header Card");
    TITLE                               = VALUE(STRING, "TITLE");
    solverkeyword                       = VALUE(STRING, "Solver Keyword");
    Type                                = VALUE(STRING, "");
    nmid                                = SIZE("No of Mode ID Cards","No_Mode_ID");
    nmbegend                            = SIZE("No of Mode Block Cards","No_Mode_Range");
    modeoptions                         = VALUE(INT,"MODE Options","OPTION1");
    exclude                             = VALUE(INT,"EXCLUDE Option","OPTION2");

    // Solver fields
    mid                                  = ARRAY[nmid](INT,"Mode ID");
    mbeg                                 = ARRAY[nmbegend](INT,"First mode ID in block n");
    mend                                 = ARRAY[nmbegend](INT,"Last mode ID in block n");
    mode_sid                             = VALUE(SETS,"Mode set identification"){ SUBTYPES = (/SETS/SET_MODE_IDPOOL) ;}
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    IO_FLAG                            = -1;
    _HMCOMMENTSFLAG                    = -1;
    _HWCOLOR                           = -1;
    _HAS_HEADER                        = -1;
    TITLE                              = -1;
    solverkeyword                      = -1;
    Type                               = -1;
}

DEFAULTS(COMMON)
{
    modeoptions                           = 0;
    nmid                                  = 0;
    nmbegend                              = 0;
}

CHECK(COMMON)
{
    nmid                                 >= 0;
    nmbegend                             >= 0;
}

GUI(COMMON)
{
    RADIO(modeoptions)
    {
        ADD(2,"GENERATE");
        ADD(1,"LIST");
        ADD(3,"SET");
    } { PARAMETERIZED = FALSE; DISPLAY_STATUS=ALWAYS_ON;}
    RADIO(exclude)
    {
        ADD(0,"NONE");
        ADD(1,"EXCLUDE");
    } { PARAMETERIZED = FALSE; DISPLAY_STATUS=ALWAYS_ON;}
    if(modeoptions == 1 && exclude == 0)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_MODE_LIST);
    }
    else if(modeoptions == 1 && exclude == 1)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_MODE_LIST_EXCLUDE);
    }
    else if(modeoptions == 2 && exclude == 0)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_MODE_GENERATE);
    }
    else if(modeoptions == 2 && exclude == 1)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_MODE_GENERATE_EXCLUDE);
    }
    else if(modeoptions == 3 && exclude == 0)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_MODE_SET);
    }
    else if(modeoptions == 3 && exclude == 1)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_MODE_SET_EXCLUDE);
    }
    
    // Mode ID Cards
    if(modeoptions == 1)
    {
        SIZE(nmid);
        ARRAY(nmid,"")
        {
            SCALAR(mid);
        }
    }
    //Mode Block Cards
    if(modeoptions == 2)
    {
        SIZE(nmbegend);
        ARRAY(nmbegend,"")
        {
            SCALAR(mbeg);
            SCALAR(mend);
        }
    }
    // Mode Set Card
    if(modeoptions == 3)
    {
        DATA(mode_sid) { SUBTYPES = (/SETS/SET_MODE_IDPOOL) ;}
    }
}

// File format
FORMAT(Keyword971_R10.1) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    if (IO_FLAG == 0)
    {
        if(modeoptions == 1 && exclude == 0)
        {
            HEADER("*FREQUENCY_DOMAIN_MODE_LIST");
        }
        else if(modeoptions == 1 && exclude == 1)
        {
            HEADER("*FREQUENCY_DOMAIN_MODE_LIST_EXCLUDE");
        }
        else if(modeoptions == 2 && exclude == 0)
        {
            HEADER("*FREQUENCY_DOMAIN_MODE_GENERATE");
        }
        else if(modeoptions == 2 && exclude == 1)
        {
            HEADER("*FREQUENCY_DOMAIN_MODE_GENERATE_EXCLUDE");
        }
        else if(modeoptions == 3 && exclude == 0)
        {
            HEADER("*FREQUENCY_DOMAIN_MODE_SET");
        }
        else if(modeoptions == 3 && exclude == 1)
        {
            HEADER("*FREQUENCY_DOMAIN_MODE_SET_EXCLUDE");
        }
    }
    
    if(IO_FLAG == 1)
    {
        HEADER("*FREQUENCY_DOMAIN_MODE_%3s",Type);
        if(Type == "LIS")
        {
            ASSIGN(modeoptions,1);
            HEADER("*FREQUENCY_DOMAIN_MODE_LIST_%7s",Type);
            if(Type == "EXCLUDE")
            {
                ASSIGN(exclude,1);
            }
            else
            {
                ASSIGN(exclude,0);
            }
        }
        else if(Type == "GEN")
        {
            ASSIGN(modeoptions,2);
            HEADER("*FREQUENCY_DOMAIN_MODE_GENERATE_%7s",Type);
            if(Type == "EXCLUDE")
            {
                ASSIGN(exclude,1);
            }
            else
            {
                ASSIGN(exclude,0);
            }
        }
        else if(Type == "SET")
        {
            ASSIGN(modeoptions,3);
            HEADER("*FREQUENCY_DOMAIN_MODE_SET_%7s",Type);
            if(Type == "EXCLUDE")
            {
                ASSIGN(exclude,1);
            }
            else
            {
                ASSIGN(exclude,0);
            }
        }
    }
    
    if(modeoptions == 1)
    {
         COMMENT("$     MID1      MID2      MID3      MID4      MID5      MID6      MID7      MID8");
         FREE_CELL_LIST(nmid,"%10d",mid,80);
    }
    
    if(modeoptions == 2)
    {
         COMMENT("$    M1BEG     M1END     M2BEG     M2END     M3BEG     M3END     M4BEG     M5END");
         FREE_CELL_LIST(nmbegend,"%10d%10d",mbeg,mend,80);
    }
    
    if(modeoptions == 3)
    {
        COMMENT("$      SID");
        CARD("%10d",mode_sid);
    }
}

// File format
FORMAT(Keyword971_R7.1) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    if (IO_FLAG == 0)
    {
        if(modeoptions == 1)
        {
            HEADER("*FREQUENCY_DOMAIN_MODE_LIST");
        }
        else if(modeoptions == 2)
        {
            HEADER("*FREQUENCY_DOMAIN_MODE_GENERATE");
        }
        else if(modeoptions == 3)
        {
            HEADER("*FREQUENCY_DOMAIN_MODE_SET");
        }
    }
    
    if(IO_FLAG == 1)
    {
        HEADER("*FREQUENCY_DOMAIN_MODE_%3s",Type);
        if(Type == "LIS")
        {
            ASSIGN(modeoptions,1);
        }
        else if(Type == "GEN")
        {
            ASSIGN(modeoptions,2);
        }
        else if(Type == "SET")
        {
            ASSIGN(modeoptions,3);
        }
    }
    
    if(modeoptions == 1)
    {
         COMMENT("$     MID1      MID2      MID3      MID4      MID5      MID6      MID7      MID8");
         FREE_CELL_LIST(nmid,"%10d",mid,80);
    }
    
    if(modeoptions == 2)
    {
         COMMENT("$    M1BEG     M1END     M2BEG     M2END     M3BEG     M3END     M4BEG     M5END");
         FREE_CELL_LIST(nmbegend,"%10d%10d",mbeg,mend,80);
    }
    
    if(modeoptions == 3)
    {
        COMMENT("$      SID");
        CARD("%10d",mode_sid);
    }
}
