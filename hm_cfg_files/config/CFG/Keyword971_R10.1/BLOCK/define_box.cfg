//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// define_box.cfg
//

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES

//*******************************************************************COMMON****************************************************************************

    localmin                                = VALUE(NODE,      "Minimum x-y-z-coordinates");
        //x-coordinate
        mini                                = VALUE(FLOAT,     "Minimum x-coordinate");
        //y-coordinate
        minj                                = VALUE(FLOAT,     "Minimum y-coordinate");
        //z-coordinate
        mink                                = VALUE(FLOAT,     "Minimum z-coordinate");

    localmax                                = VALUE(NODE,      "Maximum x-y-z-coordinates");
        //x-coordinate
        maxi                                = VALUE(FLOAT,     "Maximum x-coordinate");
        //y-coordinate
        maxj                                = VALUE(FLOAT,     "Maximum y-coordinate");
        //z-coordinate
        maxk                                = VALUE(FLOAT,     "Maximum z-coordinate");

//*******************************************************************COMMON****************************************************************************

    //COARSEN
    LSD_iFlag                               = VALUE(INT,       "Flag for protecting elements inside or outside of box");

    //ADAPTIVE
    LSD_PID                                 = VALUE(COMPONENT, "Part ID");
    LSD_LEVEL                               = VALUE(INT,       "Maximum number of refinement levels for elements that are contained in the box");

    LSD_LCH                                 = VALUE(CURVE,     "Load curve ID. Define adaptive box movement (displacement vs. time) in global X axis");
    NID                                     = VALUE(NODE,      "Node ID, whose translation will be followed by the moving adaptive box");

    LSD_LCID3                               = VALUE(CURVE,     "Load curve ID. Define adaptive box movement (displacement vs. time) in global Y axis");
    LSD_LCID2                               = VALUE(CURVE,     "Load curve ID. Define adaptive box movement (displacement vs. time) in global Z axis");
    LSD_BRMIN                               = VALUE(FLOAT,     "Minimum mesh size in 3D tetrahedron adaptivity");
    LSD_BRMAX                               = VALUE(FLOAT,     "Maximum mesh size in 3D tetrahedron adaptivity");

    //DRAWBEAD
    LSD_Type                                = VALUE(INT,       "Set type");

    LSD_PSID                                = VALUE(SETS,      "Part set ID") { SUBTYPES = (/SETS/SET_PART_IDPOOL) ; }
    LSD_PID2                                = VALUE(COMPONENT, "Part ID");
    LSD_NSID                                = VALUE(SETS,      "Node Set ID") { SUBTYPES = (/SETS/SET_NODE_IDPOOL) ; }

    LSD_DIR                                 = VALUE(INT,       "Direction of tooling movement");
    LSD_R                                   = VALUE(FLOAT,     "The radius of the tube, which is centered around the draw bead");
    LSD_CID                                 = VALUE(SYSTEM,    "Optional coordinate system ID");

    //Local Card 1
    LSD_XX                                  = VALUE(FLOAT,     "Minimum x-coordinate");
    LSD_YX                                  = VALUE(FLOAT,     "Maximum x-coordinate");
    LSD_ZX                                  = VALUE(FLOAT,     "Minimum y-coordinate");
    LSD_XV                                  = VALUE(FLOAT,     "Maximum y-coordinate");
    LSD_YV                                  = VALUE(FLOAT,     "Minimum z-coordinate");
    LSD_ZV                                  = VALUE(FLOAT,     "Maximum z-coordinate");

    //Local Card 2
    LSD_CX                                  = VALUE(FLOAT,     "X-global coordinate of offset vector to origin of local system");
    LSD_CY                                  = VALUE(FLOAT,     "Y-global coordinate of offset vector to origin of local system");
    LSD_CZ                                  = VALUE(FLOAT,     "Z-global coordinate of offset vector to origin of local system");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING,    "Solver Keyword");
    LSD_TitleOpt                            = VALUE(INT,       "Title Option");
    LSD_defBoxOpt                           = VALUE(INT,       "Box Options");
    LSD_NEGATIVEOpt                         = VALUE(INT,       "Node Option");
    cardimage                               = VALUE(STRING,    "Card Image");

    IOFLAG                                  = VALUE(INT,       "IOFLAG");
    _opt                                    = VALUE(STRING,    "Option");
    _dummy_keyword                          = VALUE(STRING,    "Header Option");
    _dummy                                  = VALUE(INT,       "Dummy Option");
    _dummy_LCH                              = VALUE(INT,       "LCH int value");
    TITLE                                   = VALUE(STRING,    "TITLE");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES

    //COARSEN
    LSD_iFlag                               = 4869;

    //ADAPTIVE
    LSD_PID                                 = 149;
    LSD_LEVEL                               = 4871;

    LSD_LCH                                 = 581;
    NID                                     = 2773;

    LSD_LCID3                               = 170;
    LSD_LCID2                               = 168;
    LSD_BRMIN                               = 8872;
    LSD_BRMAX                               = 8873;

    //DRAWBEAD
    LSD_Type                                = 4358;

    LSD_PSID                                = 768;
    LSD_PID2                                = 150;
    LSD_NSID                                = 745;

    LSD_DIR                                 = 5006;
    LSD_R                                   = 1166;
    LSD_CID                                 = 412;

    //Local Card 1
    LSD_XX                                  = 7856;
    LSD_YX                                  = 7857;
    LSD_ZX                                  = 7858;
    LSD_XV                                  = 7859;
    LSD_YV                                  = 7860;
    LSD_ZV                                  = 7861;

    //Local Card 2
    LSD_CX                                  = 7862;
    LSD_CY                                  = 7863;
    LSD_CZ                                  = 7864;

    //HM INTERNAL
    KEYWORD_STR                             = 9000;
    LSD_TitleOpt                            = 90;
    LSD_defBoxOpt                           = 4868;
    LSD_NEGATIVEOpt                         = 8122;

    IOFLAG                                  = -1;
    _opt                                    = -1;
    _dummy_keyword                          = -1;
    _dummy                                  = -1;
    _dummy_LCH                              = -1;
    TITLE                                   = -1;
}

DEFAULTS(COMMON)
{
    //COARSEN
    LSD_iFlag                               = 0;

    //ADAPTIVE
    LSD_LEVEL                               = 1;
    LSD_BRMIN                               = 0.0;
    LSD_BRMAX                               = 0.0;

    //DRAWBEAD
    LSD_Type                                = 4;

    LSD_DIR                                 = 0.0;
    LSD_R                                   = 0.0;

    //Local Card 1
    LSD_XX                                  = 0.0;
    LSD_YX                                  = 0.0;
    LSD_ZX                                  = 0.0;
    LSD_XV                                  = 0.0;
    LSD_YV                                  = 0.0;
    LSD_ZV                                  = 0.0;

    //Local Card 2
    LSD_CX                                  = 0.0;
    LSD_CY                                  = 0.0;
    LSD_CZ                                  = 0.0;
}

GUI(COMMON)
{
    RADIO(cardimage, "Card Image")
    {
       ADD("DefineBox",      "DefineBox");
       ADD("DefineBoxLocal", "DefineBoxLocal");
    }

    RADIO(LSD_defBoxOpt, "Box Option")
    {
       ADD(1, "1: None");
       ADD(2, "2: Coarsen");
       ADD(3, "3: Adaptive");
       ADD(5, "5: Drawbead");
    }

    // start of KEYWORD_STR
    ASSIGN(KEYWORD_STR, "*DEFINE_BOX");

    if(LSD_defBoxOpt == 2)
    {
        ASSIGN(KEYWORD_STR, "_COARSEN");
    }
    else if(LSD_defBoxOpt == 3)
    {
        ASSIGN(KEYWORD_STR, "_ADAPTIVE");
    }
    else if(LSD_defBoxOpt == 5)
    {
        ASSIGN(KEYWORD_STR, "_DRAWBEAD");
    }

    if(cardimage == "DefineBoxLocal")
    {
        ASSIGN(KEYWORD_STR, "_LOCAL");
    }

    FLAG(LSD_TitleOpt, "Title Option");
    if(LSD_TitleOpt == 1)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    }
    // end of KEYWORD_STR

    if(LSD_defBoxOpt != 5)
    {
        DATA(localmin);
        DATA(localmax);
    }

    if(LSD_defBoxOpt == 2)
    {
        RADIO(LSD_iFlag, "IFLAG")
        {
            ADD(0, "0: Elements inside the box cannot be coarsened");
            ADD(1, "1: Elements outside the box cannot be coarsened");
        }
    }

    if(LSD_defBoxOpt == 3)
    {
        DATA(LSD_PID, "PID");
        SCALAR(LSD_LEVEL, "LEVEL")             { DIMENSION = "DIMENSIONLESS" ; }
        FLAG(LSD_NEGATIVEOpt, "Node Option");
    }
    if(LSD_defBoxOpt == 3 && LSD_NEGATIVEOpt == 0)
    {
        DATA(LSD_LCH, "LIDX");
    }
    else if(LSD_defBoxOpt == 3 && LSD_NEGATIVEOpt == 1)
    {
        DATA(NID, "NDID");
    }
    if(LSD_defBoxOpt == 3)
    {
        DATA(LSD_LCID3, "LIDY");
        DATA(LSD_LCID2, "LIDZ");
        SCALAR(LSD_BRMIN, "BRMIN")             { DIMENSION = "DIMENSIONLESS" ; }
        SCALAR(LSD_BRMAX, "BRMAX")             { DIMENSION = "DIMENSIONLESS" ; }
    }

    if(LSD_defBoxOpt == 5)
    {
        DATA(LSD_PID, "PID");

        mandatory:
        RADIO(LSD_Type, "STYPE")
        {
            ADD(2, "2: part set ID");
            ADD(3, "3: part ID");
            ADD(4, "4: node set ID");
        }
        optional:
        if(LSD_Type == 1)
        {
            DATA(LSD_PSID, "SID");  //Part Set ID
        }
        else if(LSD_Type == 2)
        {
            DATA(LSD_PID2, "SID");  //Part ID
        }
        else if(LSD_Type == 3)
        {
            DATA(LSD_NSID, "SID");  //Node Set ID
        }

        RADIO(LSD_DIR, "IDIR")
        {
            ADD(0, "1: tooling moves in x-direction");
            ADD(1, "2: tooling moves in y-direction");
            ADD(2, "3: tooling moves in z-direction");
        }

        SCALAR(LSD_R, "RADIUS") {DIMENSION="l";}
        DATA(LSD_CID, "CID");
    }

    // _LOCAL attributes
    if(cardimage == "DefineBoxLocal")
    {
        SCALAR(LSD_CX, "CX")                   { DIMENSION = "l" ; }
        SCALAR(LSD_CY, "CY")                   { DIMENSION = "l" ; }
        SCALAR(LSD_CZ, "CZ")                   { DIMENSION = "l" ; }

        SCALAR(LSD_XX, "XX")                   { DIMENSION = "l" ; }
        SCALAR(LSD_YX, "YX")                   { DIMENSION = "l" ; }
        SCALAR(LSD_ZX, "ZX")                   { DIMENSION = "l" ; }
        SCALAR(LSD_XV, "XV")                   { DIMENSION = "l" ; }
        SCALAR(LSD_YV, "YV")                   { DIMENSION = "l" ; }
        SCALAR(LSD_ZV, "ZV")                   { DIMENSION = "l" ; }
    }
}

// File format
FORMAT(Keyword971_R6.1)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        ASSIGN(KEYWORD_STR, *DEFINE_BOX, EXPORT);

        if(LSD_defBoxOpt == 2)
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_COARSEN"),  EXPORT);
        }
        else if(LSD_defBoxOpt == 3)
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_ADAPTIVE"), EXPORT);
        }
        else if(LSD_defBoxOpt == 5)
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_DRAWBEAD"), EXPORT);
        }

        if(cardimage == "DefineBoxLocal" && LSD_defBoxOpt != 5)
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_LOCAL"),    EXPORT);
        }

        if(LSD_TitleOpt == 1)
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_TITLE"),    EXPORT);
        }

        ASSIGN(KEYWORD_STR, _COMBINE(KEYWORD_STR, _dummy_keyword),        EXPORT);
        CARD("%-s", KEYWORD_STR);
    }
    else //IMPORT
    {
        HEADER("*DEFINE_BOX%-40s", _opt);

        ASSIGN(_dummy, _FIND(_opt, "_DRAWBEAD"),        IMPORT);
        if(_dummy == 1)
        {
            ASSIGN(LSD_defBoxOpt, 5,                    IMPORT);
            ASSIGN(cardimage, DefineBox,                IMPORT);
        }
        else
        {
            ASSIGN(_dummy, _FIND(_opt, "_ADAPTIVE"),    IMPORT);
            if(_dummy == 1)
            {
                ASSIGN(LSD_defBoxOpt, 3,                IMPORT);
            }
            else
            {
                ASSIGN(_dummy, _FIND(_opt, "_COARSEN"), IMPORT);
                if(_dummy == 1)
                {
                    ASSIGN(LSD_defBoxOpt, 2,            IMPORT);
                }
                else
                {
                    // currently _SPH is not managed, so it can be "None" only
                    ASSIGN(LSD_defBoxOpt, 1,            IMPORT);
                }
            }

            // _LOCAL is not available for _DRAWBEAD
            ASSIGN(_dummy, _FIND(_opt, "_LOCAL"),       IMPORT);
            if(_dummy == 1)
            {
                ASSIGN(cardimage, DefineBoxLocal,       IMPORT);
            }
            else
            {
                ASSIGN(cardimage, DefineBox,            IMPORT);
            }
        }
        ASSIGN(LSD_TitleOpt, _FIND(_opt, "_TITLE"),     IMPORT);
    }

    if(IOFLAG == 0 && LSD_TitleOpt == 1)
    {
        //Title Card
        COMMENT("$NAME                                                                 ");
        CARD("%-70s", TITLE);
    }

    if(LSD_defBoxOpt == 1)
    {
        //Card 1
        COMMENT("$    BOXID       XMN       XMX       YMN       YMX       ZMN       ZMX");
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg", _ID_, mini, maxi, minj, maxj, mink, maxk);
    }
    else if(LSD_defBoxOpt == 2)
    {
        //Card 1
        COMMENT("$    BOXID       XMN       XMX       YMN       YMX       ZMN       ZMX     IFLAG");
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10d", _ID_, mini, maxi, minj, maxj, mink, maxk, LSD_iFlag);
    }
    else if(LSD_defBoxOpt == 3)
    {
        //Card 1
        COMMENT("$    BOXID       XMN       XMX       YMN       YMX       ZMN       ZMX");
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg", _ID_, mini, maxi, minj, maxj, mink, maxk);

        //Card 2
        COMMENT("$      PID     LEVEL");
        CARD("%10d%10d", LSD_PID, LSD_LEVEL);
    }
    else if(LSD_defBoxOpt == 5)
    {
        CARD_PREREAD("%40s%10d", _BLANK_, LSD_Type);

        //Card 1

        //Part set ID
        if(LSD_Type == 2)
        {
            COMMENT("$    BOXID       PID      PSID      IDIR     STYPE    RADIUS       CID");
            CARD("%10d%10d%10d%10d%10d%10lg%10d", _ID_, LSD_PID, LSD_PSID, LSD_DIR, LSD_Type, LSD_R, LSD_CID);
        }
        //Part ID
        else if(LSD_Type == 3)
        {
            COMMENT("$    BOXID       PID      PID2      IDIR     STYPE    RADIUS       CID");
            CARD("%10d%10d%10d%10d%10d%10lg%10d", _ID_, LSD_PID, LSD_PID2, LSD_DIR, LSD_Type, LSD_R, LSD_CID);
        }
        //Node Set ID
        else if(LSD_Type == 4)
        {
            COMMENT("$    BOXID       PID      NSID      IDIR     STYPE    RADIUS       CID");
            CARD("%10d%10d%10d%10d%10d%10lg%10d", _ID_, LSD_PID, LSD_NSID, LSD_DIR, LSD_Type, LSD_R, LSD_CID);
        }
    }

    if(cardimage == "DefineBoxLocal" && LSD_defBoxOpt != 5)
    {
        //Local Card 1
        COMMENT("$       XX        YX        ZX        XV        YV        ZV");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg", LSD_XX, LSD_YX, LSD_ZX, LSD_XV, LSD_YV, LSD_ZV);

        //Local Card 2
        COMMENT("$       CX        CY        CZ");
        CARD("%10lg%10lg%10lg", LSD_CX, LSD_CY, LSD_CZ);
    }
}

FORMAT(Keyword971_R10.1)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        ASSIGN(KEYWORD_STR, *DEFINE_BOX, EXPORT);

        if(LSD_defBoxOpt == 2)
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_COARSEN"),  EXPORT);
        }
        else if(LSD_defBoxOpt == 3)
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_ADAPTIVE"), EXPORT);
        }
        else if(LSD_defBoxOpt == 5)
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_DRAWBEAD"), EXPORT);
        }

        if(cardimage == "DefineBoxLocal" && LSD_defBoxOpt != 5)
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_LOCAL"),    EXPORT);
        }

        if(LSD_TitleOpt == 1)
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_TITLE"),    EXPORT);
        }

        ASSIGN(KEYWORD_STR, _COMBINE(KEYWORD_STR, _dummy_keyword),        EXPORT);
        CARD("%-s", KEYWORD_STR);
    }
    else //IMPORT
    {
        HEADER("*DEFINE_BOX%-40s", _opt);

        ASSIGN(_dummy, _FIND(_opt, "_DRAWBEAD"),        IMPORT);
        if(_dummy == 1)
        {
            ASSIGN(LSD_defBoxOpt, 5,                    IMPORT);
            ASSIGN(cardimage, DefineBox,                IMPORT);
        }
        else
        {
            ASSIGN(_dummy, _FIND(_opt, "_ADAPTIVE"),    IMPORT);
            if(_dummy == 1)
            {
                ASSIGN(LSD_defBoxOpt, 3,                IMPORT);
            }
            else
            {
                ASSIGN(_dummy, _FIND(_opt, "_COARSEN"), IMPORT);
                if(_dummy == 1)
                {
                    ASSIGN(LSD_defBoxOpt, 2,            IMPORT);
                }
                else
                {
                    // currently _SPH is not managed, so it can be "None" only
                    ASSIGN(LSD_defBoxOpt, 1,            IMPORT);
                }
            }

            // _LOCAL is not available for _DRAWBEAD
            ASSIGN(_dummy, _FIND(_opt, "_LOCAL"),       IMPORT);
            if(_dummy == 1)
            {
                ASSIGN(cardimage, DefineBoxLocal,       IMPORT);
            }
            else
            {
                ASSIGN(cardimage, DefineBox,            IMPORT);
            }
        }
        ASSIGN(LSD_TitleOpt, _FIND(_opt, "_TITLE"),     IMPORT);
    }

    if(IOFLAG == 0 && LSD_TitleOpt == 1)
    {
        //Title Card
        COMMENT("$NAME                                                                 ");
        CARD("%-70s", TITLE);
    }

    if(LSD_defBoxOpt == 1)
    {
        //Card 1
        COMMENT("$    BOXID       XMN       XMX       YMN       YMX       ZMN       ZMX");
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg", _ID_, mini, maxi, minj, maxj, mink, maxk);
    }
    else if(LSD_defBoxOpt == 2)
    {
        //Card 1
        COMMENT("$    BOXID       XMN       XMX       YMN       YMX       ZMN       ZMX     IFLAG");
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10d", _ID_, mini, maxi, minj, maxj, mink, maxk, LSD_iFlag);
    }
    else if(LSD_defBoxOpt == 3)
    {
        //Card 1
        COMMENT("$    BOXID       XMN       XMX       YMN       YMX       ZMN       ZMX");
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg", _ID_, mini, maxi, minj, maxj, mink, maxk);

        ASSIGN(_dummy_LCH, _GET_ENTITY_VALUE(LSD_LCH), EXPORT);

        //Card 2
        COMMENT("$      PID     LEVEL LIDX/NDID      LIDY      LIDZ     BRMIN     BRMAX");
        CARD("%10d%10d%10d%10d%10d%10lg%10lg", LSD_PID, LSD_LEVEL, SCALAR_OR_OBJECT(LSD_NEGATIVEOpt, _dummy_LCH, NID), LSD_LCID3, LSD_LCID2, LSD_BRMIN, LSD_BRMAX);
        ASSIGN(LSD_LCH, _dummy_LCH, IMPORT);
    }
    else if(LSD_defBoxOpt == 5)
    {
        CARD_PREREAD("%40s%10d", _BLANK_, LSD_Type);

        //Card 1

        //Part set ID
        if(LSD_Type == 2)
        {
            COMMENT("$    BOXID       PID      PSID      IDIR     STYPE    RADIUS       CID");
            CARD("%10d%10d%10d%10d%10d%10lg%10d", _ID_, LSD_PID, LSD_PSID, LSD_DIR, LSD_Type, LSD_R, LSD_CID);
        }
        //Part ID
        else if(LSD_Type == 3)
        {
            COMMENT("$    BOXID       PID      PID2      IDIR     STYPE    RADIUS       CID");
            CARD("%10d%10d%10d%10d%10d%10lg%10d", _ID_, LSD_PID, LSD_PID2, LSD_DIR, LSD_Type, LSD_R, LSD_CID);
        }
        //Node Set ID
        else if(LSD_Type == 4)
        {
            COMMENT("$    BOXID       PID      NSID      IDIR     STYPE    RADIUS       CID");
            CARD("%10d%10d%10d%10d%10d%10lg%10d", _ID_, LSD_PID, LSD_NSID, LSD_DIR, LSD_Type, LSD_R, LSD_CID);
        }
    }

    if(cardimage == "DefineBoxLocal" && LSD_defBoxOpt != 5)
    {
        //Local Card 1
        COMMENT("$       XX        YX        ZX        XV        YV        ZV");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg", LSD_XX, LSD_YX, LSD_ZX, LSD_XV, LSD_YV, LSD_ZV);

        //Local Card 2
        COMMENT("$       CX        CY        CZ");
        CARD("%10lg%10lg%10lg", LSD_CX, LSD_CY, LSD_CZ);
    }
}
