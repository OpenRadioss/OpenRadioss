//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 037
// 


 ATTRIBUTES(COMMON) 
 
 {
  TITLE                             = VALUE(STRING, "Title");
  
  // Initial and reference densities
  KEYWORD_STR                       = VALUE(STRING, "Solver Keyword");
  LSD_TitleOpt                      = VALUE(INT, "Title");
  CommentEnumField                  = VALUE(INT, "User Comments");
  Num_Comments                      = SIZE("No. of comment lines");
  Comments                          = ARRAY[Num_Comments](STRING, "Entity Comments");
  Rho                               = VALUE(FLOAT, "Mass density");
  _HAS_HEADER                       = VALUE(BOOL,"Has Header Card");  
  E                                 = VALUE(FLOAT, "Youngs modulus");
  Nu                                = VALUE(FLOAT, "Poissons ratio");
  LSDYNA_SIGY                       = VALUE(FLOAT, "Yield stress");
  LSDYNA_ETAN                       = VALUE(FLOAT, "Plastic hardening modulus");
  LSD_R                             = VALUE(FLOAT, "Anisotropic parameter");
  LSD_LCID                          = VALUE(FUNCT, "eff. yield stress VS eff. plastic strain in uniaxial tension");
  ECHANGE_OPTION                    = VALUE(INT,   "Echange_Option");
  LSD_IDSCALE                       = VALUE(FUNCT, "scale factor for the Youngs modulus as VS effective strain");
  LSDYNA_EA                         = VALUE(FLOAT, "Coef. defining the Youngs modulus WRT eff. strain");
  LSD_COE                           = VALUE(FLOAT, "Coef. defining the Youngs modulus WRT eff. strain");
  MAT37_ICFLD                       = VALUE(FUNCT, "Forming Limit Diagram under linear strain paths");
  MAT37_STRAINLT                    = VALUE(FLOAT, "Critical strain value at which strain averaging is activated");
  HAS_TITLE                         = VALUE(STRING, "Check for Title");
  HAS_ECHANGE_OPTION                = VALUE(STRING, "Check for MAT OPTION");
  IO_FLAG                           = VALUE(INT, "IO");
  //empty_string                      = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
  KEYWORD_STR                   = 9000;
  CommentEnumField              = 3220;
  Num_Comments                  = 3101;
  LSD_TitleOpt                  = 90;
  Comments                      = 3100;
  Rho                           = 118;
  E                             = 119;
  Nu                            = 120;
  LSDYNA_SIGY                   = 152;  
  LSDYNA_ETAN                   = 153;
  LSD_R                         = 1166;
  LSD_LCID                      = 45;
  ECHANGE_OPTION                = 807;
  MAT37_ICFLD                   = 1497;
  LSD_IDSCALE                   = 808;
  LSDYNA_EA                     = 126;
  LSD_COE                       = 809;
  MAT37_STRAINLT                = 1297;
  HAS_ECHANGE_OPTION            = -1;
  HAS_TITLE                     = -1;
  _HAS_HEADER                   = -1;
  IO_FLAG                       = -1;
  //empty_string                  = -1;
}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  YOUNG_MODULUS=SCALAR(E);
  POISSON_RATIO=SCALAR(Nu);
  YIELD_STRESS=SCALAR(LSDYNA_SIGY);
  PLASTIC_HARDENING_MODULUS=SCALAR(LSDYNA_ETAN);
  ANISOTROPIC_HARDENING_PARAMETER=SCALAR(LSD_R);
 public:
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

DEFAULTS(COMMON) {
    _HAS_HEADER = TRUE;
}

GUI(COMMON) 

{


     ASSIGN(KEYWORD_STR, "*MAT_TRANSVERSELY_ANISOTROPIC_ELASTIC_PLASTIC");
     RADIO(CommentEnumField)
     {
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }    
     RADIO(ECHANGE_OPTION)
     {
        ADD(1, "None");
        ADD(2, "ECHANGE");
        ADD(3, "NLP_FAILURE");
        ADD(4, "NLP2");
     }
     if(ECHANGE_OPTION == 2)
     {
        ASSIGN(KEYWORD_STR, "_ECHANGE");
     }
     if(ECHANGE_OPTION == 3)
     {
        ASSIGN(KEYWORD_STR, "_NLP_FAILURE");
     }

     if(ECHANGE_OPTION == 4)
     {
        ASSIGN(KEYWORD_STR, "_NLP2");
     }

     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
       {
             ASSIGN(KEYWORD_STR, "_TITLE");
       } 
mandatory:
     SCALAR(Rho)                        { DIMENSION="density";}
     SCALAR(E)                          {DIMENSION="pressure";}
 optional:
     SCALAR(Nu)                         {DIMENSION="DIMENSIONLESS";}
 mandatory:
     SCALAR(LSDYNA_SIGY)                {DIMENSION="pressure";}
 optional:
     SCALAR(LSDYNA_ETAN)                {DIMENSION="pressure";}
     SCALAR(LSD_R)                      {DIMENSION="DIMENSIONLESS";}
    FUNCTION(LSD_LCID)
    {
      X_TITLE = "Plastic strain"; X_DIMENSION = "DIMENSIONLESS";
      Y_TITLE = "Stresses"; Y_DIMENSION = "pressure";
    }
     if(ECHANGE_OPTION > 1)
     {
        FUNCTION(LSD_IDSCALE)
        {
          X_TITLE = "Plastic strain"; X_DIMENSION = "DIMENSIONLESS";
          Y_TITLE = "Young modulus scale factor"; Y_DIMENSION = "DIMENSIONLESS";
        }
        SCALAR(LSDYNA_EA)               {DIMENSION="pressure";}
        SCALAR(LSD_COE)                 {DIMENSION="DIMENSIONLESS";}
        DATA(MAT37_ICFLD);
        SCALAR(MAT37_STRAINLT);
     }     
/*
 optional:
   graphical SUPPORT("Part(s) to which material is applied") {
     OBJECTS=(/PART/SHELL,/PART/TSHELL);
     ADD(PART,"Parts");
   }
*/
}

// File format
FORMAT(Keyword971) 
{
        //
        ASSIGN(IO_FLAG, 1, IMPORT);
        ASSIGN(IO_FLAG, 2, EXPORT);
        //

        // export time
        if(IO_FLAG == 2 && ECHANGE_OPTION == 1 && LSD_TitleOpt == 0)
        {
           HEADER("*MAT_TRANSVERSELY_ANISOTROPIC_ELASTIC_PLASTIC_NLP_FAILURE");
        }  
        else if(IO_FLAG == 2 && ECHANGE_OPTION == 1 && LSD_TitleOpt == 1)
        {
           HEADER("*MAT_TRANSVERSELY_ANISOTROPIC_ELASTIC_PLASTIC_NLP_FAILURE_TITLE");
        }
        else if(IO_FLAG == 2 && LSD_TitleOpt == 0)
        {
           HEADER("*MAT_TRANSVERSELY_ANISOTROPIC_ELASTIC_PLASTIC");
        }
        else if(IO_FLAG == 2 && LSD_TitleOpt == 1)
        {
           HEADER("*MAT_TRANSVERSELY_ANISOTROPIC_ELASTIC_PLASTIC_TITLE");
        }


        // import time
        if(IO_FLAG == 1)
        {
           HEADER("*MAT_TRANSVERSELY_ANISOTROPIC_ELASTIC_PLASTIC%18s", HAS_ECHANGE_OPTION);
        }
        if(IO_FLAG == 1 && HAS_ECHANGE_OPTION == "")
        {
           ASSIGN(ECHANGE_OPTION, 0);
           ASSIGN(LSD_TitleOpt, 0);
        }
        else if(IO_FLAG == 1 && HAS_ECHANGE_OPTION == "_TITLE")
        {
           ASSIGN(ECHANGE_OPTION, 0);
           ASSIGN(LSD_TitleOpt, 1);
        }
        else if(IO_FLAG == 1 && HAS_ECHANGE_OPTION == "_NLP_FAILURE")
        {
           ASSIGN(ECHANGE_OPTION, 1);
           ASSIGN(LSD_TitleOpt, 0);
        }
        else if(IO_FLAG == 1 && HAS_ECHANGE_OPTION == "_NLP_FAILURE_TITLE")
        {
           ASSIGN(ECHANGE_OPTION, 1);
           ASSIGN(LSD_TitleOpt, 1);
        }   

        if(LSD_TitleOpt==1)  
        {
           CARD("%-80s", TITLE);
        }
        //
        COMMENT("$      MID        RO         E        PR      SIGY      ETAN         R     HLCID");
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,LSDYNA_SIGY,LSDYNA_ETAN,LSD_R,LSD_LCID);
        //
        if(ECHANGE_OPTION == TRUE)
        {
            //
            COMMENT("$  IDSCALE        EA       COE");
            CARD("%10d%10lg%10lg",LSD_IDSCALE,LSDYNA_EA,LSD_COE);
            //
        }
}

FORMAT(Keyword971_R6.1) 
{
        //
        ASSIGN(IO_FLAG, 1, IMPORT);
        ASSIGN(IO_FLAG, 2, EXPORT);
        //
        // import time
      if(IO_FLAG == 1)
        {
            HEADER("*MAT_037%18s", HAS_ECHANGE_OPTION);                    
            if(HAS_ECHANGE_OPTION != "_TITLE" || HAS_ECHANGE_OPTION != "_ECHANGE" || HAS_ECHANGE_OPTION != "_ECHANGE_TITLE" ||
                                        HAS_ECHANGE_OPTION != "_NLP_FAILURE" || HAS_ECHANGE_OPTION != "_NLP_FAILURE_TITLE")
            {
                HEADER("*MAT_TRANSVERSELY_ANISOTROPIC_ELASTIC_PLASTIC%18s", HAS_ECHANGE_OPTION);
            }
        }
        if(IO_FLAG == 1 && HAS_ECHANGE_OPTION == "")
        {
           ASSIGN(ECHANGE_OPTION, 1);
           ASSIGN(LSD_TitleOpt, 0);
        }
        else if(IO_FLAG == 1 && HAS_ECHANGE_OPTION == "_TITLE")
        {
           ASSIGN(ECHANGE_OPTION, 1);
           ASSIGN(LSD_TitleOpt, 1);
        }
        else if(IO_FLAG == 1 && HAS_ECHANGE_OPTION == "_ECHANGE")
        {
           ASSIGN(ECHANGE_OPTION, 2);
           ASSIGN(LSD_TitleOpt, 0);
        }
        else if(IO_FLAG == 1 && HAS_ECHANGE_OPTION == "_ECHANGE_TITLE")
        {
           ASSIGN(ECHANGE_OPTION, 2);
           ASSIGN(LSD_TitleOpt, 1);
        }   
        else if(IO_FLAG == 1 && HAS_ECHANGE_OPTION == "_NLP_FAILURE")
        {
           ASSIGN(ECHANGE_OPTION, 3);
           ASSIGN(LSD_TitleOpt, 0);
        }
        else if(IO_FLAG == 1 && HAS_ECHANGE_OPTION == "_NLP_FAILURE_TITLE")
        {
           ASSIGN(ECHANGE_OPTION, 3);
           ASSIGN(LSD_TitleOpt, 1);
		   }

        
        // export time
 
        if(IO_FLAG == 2 && ECHANGE_OPTION == 3 && LSD_TitleOpt == FALSE)
        {
           HEADER("*MAT_TRANSVERSELY_ANISOTROPIC_ELASTIC_PLASTIC_NLP_FAILURE");
        }  
        else if(IO_FLAG == 2 && ECHANGE_OPTION == 3 && LSD_TitleOpt == TRUE)
        {
           HEADER("*MAT_TRANSVERSELY_ANISOTROPIC_ELASTIC_PLASTIC_NLP_FAILURE_TITLE");
           CARD("%-80s", TITLE);
        }  
        else if(IO_FLAG == 2 && ECHANGE_OPTION == 2 && LSD_TitleOpt == FALSE)
        {
           HEADER("*MAT_TRANSVERSELY_ANISOTROPIC_ELASTIC_PLASTIC_ECHANGE");
        }  
        else if(IO_FLAG == 2 && ECHANGE_OPTION == 2 && LSD_TitleOpt == TRUE)
        {
           HEADER("*MAT_TRANSVERSELY_ANISOTROPIC_ELASTIC_PLASTIC_ECHANGE_TITLE");
           CARD("%-80s", TITLE);
        }
        else if(IO_FLAG == 2 && LSD_TitleOpt == FALSE)
        {
           HEADER("*MAT_TRANSVERSELY_ANISOTROPIC_ELASTIC_PLASTIC");
        }  
        else if(IO_FLAG == 2 && LSD_TitleOpt == TRUE)
        {
           HEADER("*MAT_TRANSVERSELY_ANISOTROPIC_ELASTIC_PLASTIC_TITLE");
           CARD("%-80s", TITLE);
        }
        
        //
        COMMENT("$      MID        RO         E        PR      SIGY      ETAN         R     HLCID");
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10d",_ID_,Rho,E,Nu,LSDYNA_SIGY,LSDYNA_ETAN,LSD_R,LSD_LCID);
        //
        if(ECHANGE_OPTION > 1)
        {
            //
            COMMENT("$  IDSCALE        EA       COE     ICFLD            STRAINLT");
            CARD("%10d%10lg%10lg%10d%10s%10lg",LSD_IDSCALE,LSDYNA_EA,LSD_COE,MAT37_ICFLD,_BLANK_,MAT37_STRAINLT);
            //
        }
}

FORMAT(Keyword971_R10.1) 
{
        //
        ASSIGN(IO_FLAG, 1, IMPORT);
        ASSIGN(IO_FLAG, 2, EXPORT);
        //
        // import time
      if(IO_FLAG == 1)
        {
            HEADER("*MAT_037%18s", HAS_ECHANGE_OPTION);                    
            if(HAS_ECHANGE_OPTION != "_TITLE" || HAS_ECHANGE_OPTION != "_ECHANGE" || HAS_ECHANGE_OPTION != "_ECHANGE_TITLE" ||
              HAS_ECHANGE_OPTION != "_NLP_FAILURE" || HAS_ECHANGE_OPTION != "_NLP_FAILURE_TITLE" || 
			  HAS_ECHANGE_OPTION != "_NLP2" || HAS_ECHANGE_OPTION != "_NLP2_TITLE")
            {
                HEADER("*MAT_TRANSVERSELY_ANISOTROPIC_ELASTIC_PLASTIC%18s", HAS_ECHANGE_OPTION);
            }
        }
        if(IO_FLAG == 1 && HAS_ECHANGE_OPTION == "")
        {
           ASSIGN(ECHANGE_OPTION, 1);
           ASSIGN(LSD_TitleOpt, 0);
        }
        else if(IO_FLAG == 1 && HAS_ECHANGE_OPTION == "_TITLE")
        {
           ASSIGN(ECHANGE_OPTION, 1);
           ASSIGN(LSD_TitleOpt, 1);
        }
        else if(IO_FLAG == 1 && HAS_ECHANGE_OPTION == "_ECHANGE")
        {
           ASSIGN(ECHANGE_OPTION, 2);
           ASSIGN(LSD_TitleOpt, 0);
        }
        else if(IO_FLAG == 1 && HAS_ECHANGE_OPTION == "_ECHANGE_TITLE")
        {
           ASSIGN(ECHANGE_OPTION, 2);
           ASSIGN(LSD_TitleOpt, 1);
        }   
        else if(IO_FLAG == 1 && HAS_ECHANGE_OPTION == "_NLP_FAILURE")
        {
           ASSIGN(ECHANGE_OPTION, 3);
           ASSIGN(LSD_TitleOpt, 0);
        }
        else if(IO_FLAG == 1 && HAS_ECHANGE_OPTION == "_NLP_FAILURE_TITLE")
        {
           ASSIGN(ECHANGE_OPTION, 3);
           ASSIGN(LSD_TitleOpt, 1);
		   }
        else if(IO_FLAG == 1 && HAS_ECHANGE_OPTION == "_NLP2")
        {
           ASSIGN(ECHANGE_OPTION, 4);
           ASSIGN(LSD_TitleOpt, 0);
        }
        else if(IO_FLAG == 1 && HAS_ECHANGE_OPTION == "_NLP2_TITLE")
        {
           ASSIGN(ECHANGE_OPTION, 4);
           ASSIGN(LSD_TitleOpt, 1);
		   }

        
        // export time
 
        if(IO_FLAG == 2 && ECHANGE_OPTION == 3 && LSD_TitleOpt == FALSE)
        {
           HEADER("*MAT_TRANSVERSELY_ANISOTROPIC_ELASTIC_PLASTIC_NLP_FAILURE");
        }  
        else if(IO_FLAG == 2 && ECHANGE_OPTION == 3 && LSD_TitleOpt == TRUE)
        {
           HEADER("*MAT_TRANSVERSELY_ANISOTROPIC_ELASTIC_PLASTIC_NLP_FAILURE_TITLE");
           CARD("%-80s", TITLE);
        }
        else if(IO_FLAG == 2 && ECHANGE_OPTION == 4 && LSD_TitleOpt == FALSE)
        {
           HEADER("*MAT_TRANSVERSELY_ANISOTROPIC_ELASTIC_PLASTIC_NLP2");
        }  
        else if(IO_FLAG == 2 && ECHANGE_OPTION == 4 && LSD_TitleOpt == TRUE)
        {
           HEADER("*MAT_TRANSVERSELY_ANISOTROPIC_ELASTIC_PLASTIC_NLP2_TITLE");
           CARD("%-80s", TITLE);
        }
        else if(IO_FLAG == 2 && ECHANGE_OPTION == 2 && LSD_TitleOpt == FALSE)
        {
           HEADER("*MAT_TRANSVERSELY_ANISOTROPIC_ELASTIC_PLASTIC_ECHANGE");
        }  
        else if(IO_FLAG == 2 && ECHANGE_OPTION == 2 && LSD_TitleOpt == TRUE)
        {
           HEADER("*MAT_TRANSVERSELY_ANISOTROPIC_ELASTIC_PLASTIC_ECHANGE_TITLE");
           CARD("%-80s", TITLE);
        }
        else if(IO_FLAG == 2 && LSD_TitleOpt == FALSE)
        {
           HEADER("*MAT_TRANSVERSELY_ANISOTROPIC_ELASTIC_PLASTIC");
        }  
        else if(IO_FLAG == 2 && LSD_TitleOpt == TRUE)
        {
           HEADER("*MAT_TRANSVERSELY_ANISOTROPIC_ELASTIC_PLASTIC_TITLE");
           CARD("%-80s", TITLE);
        }
        
        //
        COMMENT("$      MID        RO         E        PR      SIGY      ETAN         R     HLCID");
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10d",_ID_,Rho,E,Nu,LSDYNA_SIGY,LSDYNA_ETAN,LSD_R,LSD_LCID);
        //
        if(ECHANGE_OPTION > 1 && ECHANGE_OPTION < 4)
        {
            //
            COMMENT("$  IDSCALE        EA       COE     ICFLD            STRAINLT");
            CARD("%10d%10lg%10lg%10d%10s%10lg",LSD_IDSCALE,LSDYNA_EA,LSD_COE,MAT37_ICFLD,_BLANK_,MAT37_STRAINLT);
            //
        }
}