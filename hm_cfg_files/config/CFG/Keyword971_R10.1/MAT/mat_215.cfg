//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 215
//

ATTRIBUTES(COMMON)
{
    KEYWORD_STR                     = VALUE(STRING, "Solver Keyword");
    CommentEnumField                = VALUE(INT,  "User Comments");
    Num_Comments                    = SIZE("No. of comment lines");
    Comments                        = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    LSD_TitleOpt                    = VALUE(INT, "Title");
    LSD_MAT_215_MMOPT               = VALUE(FLOAT,"Option to define micromechanical material behavior");
    LSD_MAT_215_BUPD                = VALUE(FLOAT,"Tolerance for update of Strain-Concentration Tensor");
    Neg_OPTION                      = VALUE(INT,"Option for negative failure");
    LSD_MAT_EQUIVALENT_FAILM        = VALUE(FLOAT,"Option for matrix failure");
    LSD_MAT_215_FAILM               = VALUE(FLOAT,"Effective plastic matrix strain at failure");
    LSD_MAT_215_FAILF               = VALUE(FLOAT,"Option for fiber failure");
    LSD_MAT_215_NUMINT              = VALUE(FLOAT,"Number of failed integration points prior to element deletion");
    axisOptFlag                     = VALUE(INT,"Anisotropy axis definition");
    AOPT_SKEW_FLAG                  = VALUE(INT,  "Flag for defining coordinate system ID number");
    LSD_SYSTEM                      = VALUE(SYSTEM, "Material axes option");
    LSD_MAT_USER_DEF_MACF           = VALUE(INT,"Material axes change flag for solid elements");
    LSD_NODE1                       = VALUE(NODE,"Node 1");
    LSD_NODE3                       = VALUE(NODE,"Node 1");
    LSD_NODE4                       = VALUE(NODE,"Node 2");
    LSD_NODE5                       = VALUE(NODE,"Node 1");
    LSD_NODE6                       = VALUE(NODE,"Node 2");
    LSD_NODE7                       = VALUE(NODE,"Node 1");
    LSD_NODE8                       = VALUE(NODE,"Node 2");
    LSDYNA_XP                       = VALUE(FLOAT,"XP");
    LSDYNA_YP                       = VALUE(FLOAT,"YP");
    LSDYNA_ZP                       = VALUE(FLOAT,"ZP");
    LSDYNA_A1                       = VALUE(FLOAT, "Define components of vector a");
    LSDYNA_A2                       = VALUE(FLOAT, "Define components of vector a");
    LSDYNA_A3                       = VALUE(FLOAT, "Define components of vector a");
    LSDYNA_D1                       = VALUE(FLOAT, "Define components of vector d");
    LSDYNA_D2                       = VALUE(FLOAT, "Define components of vector d");
    LSDYNA_D3                       = VALUE(FLOAT, "Define components of vector d");
    LSDYNA_V1                       = VALUE(FLOAT, "Define components of vector v");
    LSDYNA_V2                       = VALUE(FLOAT, "Define components of vector v");
    LSDYNA_V3                       = VALUE(FLOAT, "Define components of vector v");
    LSDYNA_BETA                     = VALUE(FLOAT, "BETA");
    LSD_MAT_215_FVF                 = VALUE(FLOAT, "Fiber volume fraction");
    LSD_MAT_215_FL                  = VALUE(FLOAT, "Fiber length");
    LSD_MAT_215_FD                  = VALUE(FLOAT, "Fiber Diameter");
    LSD_A11                         = VALUE(FLOAT,"Value of first principal fiber orientation");
    LSD_A22                         = VALUE(FLOAT,"Value of second principal fiber orientation");
    LSD_MAT_215_ROF                 = VALUE(FLOAT,"Mass Density of fiber");
    LSD_MAT_215_EL                  = VALUE(FLOAT,"Young's modulus of fiber- longitudinal direction");
    LSD_MAT_215_ET                  = VALUE(FLOAT,"Young's modulus of fiber- transverse direction");
    LSD_GLT                         = VALUE(FLOAT,"Shear modulus LT");
    LSD_MAT_215_PRTL                = VALUE(FLOAT,"Poisson's ratio TL");
    LSD_MAT_215_PRTT                = VALUE(FLOAT,"Poisson's ration TT");
    LSD_MAT_XT                      = VALUE(FLOAT,"Fiber tensile strength");
    LSD_MAT_SLIMXT                  = VALUE(FLOAT,"Factor to determine the minimum stress limit in the fiber after stress maximum");
    LSD_MAT_215_ETANT               = VALUE(FLOAT,"Tangent modulus of matrix in tension");
    LSD_EPS0                        = VALUE(FLOAT,"Quasi static threshold strain rate for bi-linear hardening");
    LSD_MATL85_C                    = VALUE(FLOAT,"Johnson Cook constant for bi-linear hardening");
    LSD_LCID2                       = VALUE(FUNCT,"Load Curve ID");
    LSD_LCID                        = VALUE(FUNCT,"Load curve ID");
    optionUPF                       = VALUE(INT,"Option flag for Plastic dispacement at failure");
    LSD_MAT_215_UPF                 = VALUE(FLOAT,"Plastic dispacement at failure");
    LSD_LCUPF                       = VALUE(FUNCT,"Curve ID");
    LSD_MAT_NCYRED                  = VALUE(FLOAT, "Number of cycles for stress reduction from from max to min");
    LSD_MAT_215_ROM                 = VALUE(FLOAT, "Mass density of matrix");
    E                               = VALUE(FLOAT, "Young's modulus");
    Nu                              = VALUE(FLOAT, "Poisson's ratio");
    LSD_MAT_215_SIGYT               = VALUE(FLOAT, "Yield stress of matrix in failure");
    LOC_AOPT                        = VALUE(FLOAT, "Flag for material properties initialization");
    IO_FLAG                         = VALUE(INT, "io flag");
    //empty_string               = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Num_Comments                            = 3101;
    Comments                                = 3100;
    LSD_TitleOpt                            = 90;
    LSD_MAT_215_MMOPT                       = 8882;
    LSD_MAT_215_BUPD                        = 8883;
    Neg_OPTION                              = 8884;
    LSD_MAT_EQUIVALENT_FAILM                = 8885;
    LSD_MAT_215_FAILM                       = 8886;
    LSD_MAT_215_FAILF                       = 8887;
    LSD_MAT_215_NUMINT                      = 8888;
    axisOptFlag                             = 4946;
    AOPT_SKEW_FLAG                          = -1;
    LSD_MAT_USER_DEF_MACF                   = 1296;
    LSD_NODE1                               = 8260;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_NODE7                               = 5080;
    LSD_NODE8                               = 5081;
    LSDYNA_XP                               = 136;
    LSDYNA_YP                               = 137;
    LSDYNA_ZP                               = 138;
    LSDYNA_A1                               = 139;
    LSDYNA_A2                               = 140;
    LSDYNA_A3                               = 141;

    LSDYNA_V1                               = 142;
    LSDYNA_V2                               = 143;
    LSDYNA_V3                               = 144;
    
    LSDYNA_D1                               = 145;
    LSDYNA_D2                               = 146;
    LSDYNA_D3                               = 147;
    LSDYNA_BETA                             = 148;
    LSD_MAT_215_FVF                         = 8889;
    LSD_MAT_215_FL                          = 8890;
    LSD_MAT_215_FD                          = 8891;
    LSD_A11                                 = 1526;
    LSD_A22                                 = 1531;
    LSD_MAT_215_ROF                         = 8892;
    LSD_MAT_215_EL                          = 8893;
    LSD_MAT_215_ET                          = 8894;
    LSD_GLT                                 = 5541;
    LSD_MAT_215_PRTL                        = 8895;
    LSD_MAT_215_PRTT                        = 8896;
    LSD_MAT_XT                              = 346;
    LSD_MAT_NCYRED                          = 5856;
    LSD_MAT_SLIMXT                          = 8897;
    LSD_MAT_215_ETANT                       = 8900;
    LSD_EPS0                                = 2860;
    LSD_MATL85_C                            = 2808;
    LSD_LCID2                               = 168;
    LSD_LCID                                = 45;
    optionUPF                               = 8903;
    LSD_MAT_215_UPF                         = 8901;
    LSD_MAT_215_ROM                         = 8898;
    E                                       = 119;
    Nu                                      = 120;
    LSD_MAT_215_SIGYT                       = 8899;
    LSD_LCUPF                               = 8902;
    LSD_SYSTEM                              = 184;
    LOC_AOPT                                = -1;
    IO_FLAG                                 = -1;
    //empty_string                       = -1;
}

DRAWABLES(COMMON) {
MASS_DENSITY=SCALAR(LSD_MAT_215_ROF);
YOUNG_MODULUS=SCALAR(E);
  POISSON_RATIO=SCALAR(Nu);
  SHEAR_MODULUS=SCALAR(LSD_GLT);
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*MAT_4A_MICROMEC");
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
    }     
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    }  
 mandatory:
     
 optional:
    RADIO(LSD_MAT_215_MMOPT)
    {
        ADD(0.0, "0.0: Elastic");
        ADD(1.0, "1.0: Elastic-Plastic");
    }
    SCALAR(LSD_MAT_215_BUPD)                {DIMENSION="DIMENSIONLESS";}
    FLAG(Neg_OPTION);
    if(Neg_OPTION == 0)
    {
        RADIO(LSD_MAT_EQUIVALENT_FAILM)
        {
            ADD(0.0, "0.0: Only visualization");
            ADD(1.0, "1.0: Active DIEM");
            ADD(10.0, "10.0: Only visualization");
            ADD(11.0, "11.0: Active DIEM");
        }
    }
    else if(Neg_OPTION == 1)
    {
        SCALAR(LSD_MAT_215_FAILM)           {DIMENSION="DIMENSIONLESS";}
    }
    RADIO(LSD_MAT_215_FAILF)
    {
        ADD(0.0, "0.0 Only visualization");
        ADD(1.0, "1.0: Active");
    }
    SCALAR(LSD_MAT_215_NUMINT)              {DIMENSION="DIMENSIONLESS";}
    RADIO(LSD_MAT_USER_DEF_MACF)
    {
        ADD(1.0, "1.0: No change default");
        ADD(2.0, "2.0: Switch material axes a and b");
        ADD(3.0, "3.0: Switch material axes a and c");
        ADD(4.0, "4.0: Switch material axes b and c");
    }
    SCALAR(LSD_MAT_215_FVF)                 {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_215_FL)                  {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_215_FD)                  {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_A11)                         {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_A22)                         {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_215_ROF)                 {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_215_EL)                  {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_215_ET)                  {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_GLT)                         {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_215_PRTL)                {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_215_PRTT)                {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_XT)                      {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_SLIMXT)                  {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_NCYRED)                  {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_215_ROM)                 {DIMENSION="DIMENSIONLESS";}
    SCALAR(E)                               {DIMENSION="pressure";}
    SCALAR(Nu)                              {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_215_SIGYT)               {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_215_ETANT)               {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_EPS0)                        {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MATL85_C)                    {DIMENSION="DIMENSIONLESS";}
    DATA(LSD_LCID2);                         
    DATA(LSD_LCID);
    FLAG(optionUPF);
    if(optionUPF == 0)
    {
        SCALAR(LSD_MAT_215_UPF)             {DIMENSION="DIMENSIONLESS";}
    }
    else if (optionUPF == 1)
    {
        DATA(LSD_LCUPF);
    }

    RADIO(axisOptFlag)
    {
        ADD(1, "0.0: Locally orthotropic: axis given by nodes 1,2 and 4");
        ADD(2, "1.0: A direction given by a point and global location of element center");
        ADD(3, "2.0: Axis given by vectors");
        ADD(4, "3.0: Axis given by rotating the material axes by an angle BETA");
        ADD(5, "4.0: Cylindrical coordinate given by vector v and point p");
        ADD(6, "By System");
    }
    if(axisOptFlag == 6)
    {
        DATA(LSD_SYSTEM);
    }
    if(axisOptFlag == 2 || axisOptFlag == 5)
    {
        DATA(LSD_NODE1);
        SCALAR(LSDYNA_XP) {DIMENSION="l";}
        SCALAR(LSDYNA_YP) {DIMENSION="l";}
        SCALAR(LSDYNA_ZP) {DIMENSION="l";}
    }
    if(axisOptFlag == 3)
    {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],FALSE);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],FALSE);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],FALSE);
        DATA(LSD_NODE7);                
        DATA(LSD_NODE8);                
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],FALSE);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],FALSE);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],FALSE);
    }
    if(axisOptFlag == 4 || axisOptFlag == 5)
    {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],FALSE);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],FALSE);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],FALSE);
    }
    if(axisOptFlag == 4)
    {
        SCALAR(LSDYNA_BETA);
    } 
}

// File format
FORMAT(Keyword971_R10.1) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);

    //
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE8 != NONE && LSD_NODE7 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    
    
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 5 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,4.0,EXPORT);
    }

    
    COMMENT("$      MID     MMOPT      BUPD                         FAILM     FAILF    NUMINT");
    CARD("%10lg%10lg%10lg%10s%10s%10lg%10lg%10lg", _ID_, LSD_MAT_215_MMOPT,LSD_MAT_215_BUPD,_BLANK_,_BLANK_,CELL_COND(if(Neg_OPTION == 0) LSD_MAT_EQUIVALENT_FAILM;else if(Neg_OPTION == 1) LSD_MAT_215_FAILM;),LSD_MAT_215_FAILF,LSD_MAT_215_NUMINT);
    
    COMMENT("$     AOPT      MACF        XP        YP        ZP        A1        A2        A3");
    CARD_PREREAD("%10lg",LOC_AOPT);
    if(IO_FLAG == 2)
    {
        if(axisOptFlag == 2 || axisOptFlag == 5)
        {
            CARD("%10lg%10d%10lg%10lg%10lg",LOC_AOPT,LSD_MAT_USER_DEF_MACF,LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP);
        }
        else if(axisOptFlag == 3)
        {
            CARD("%10lg%10d%10s%10s%10s%10lg%10lg%10lg",LOC_AOPT,LSD_MAT_USER_DEF_MACF,_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
        }
        else if(axisOptFlag == 1 || axisOptFlag == 4)
        {
            CARD("%10lg%10d",LOC_AOPT,LSD_MAT_USER_DEF_MACF);
        }
        else
        {
            CARD("%10lg%10d",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM),LSD_MAT_USER_DEF_MACF);
        }
    }
    
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,4,IMPORT);
    }
    else if(LOC_AOPT == 4.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,5,IMPORT);
    }

    
    if(IO_FLAG == 1)
    {
        if(axisOptFlag == 2 || axisOptFlag == 5)
        {
            CARD("%10lg%10d%10lg%10lg%10lg",LOC_AOPT,LSD_MAT_USER_DEF_MACF,LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP);
        }
        else if(axisOptFlag == 3)
        {
            CARD("%10lg%10d%10s%10s%10s%10lg%10lg%10lg",LOC_AOPT,LSD_MAT_USER_DEF_MACF,_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
        }
        else if(axisOptFlag == 1 || axisOptFlag == 4)
        {
            CARD("%10lg%10d",LOC_AOPT,LSD_MAT_USER_DEF_MACF);
        }
        else
        {  
            ASSIGN(axisOptFlag,6,IMPORT);
            CARD("%10lg%10d",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM),LSD_MAT_USER_DEF_MACF);
        }
    }
    
    COMMENT("$       V1        V2        V3        D1        D2        D3      BETA");
    if(axisOptFlag == 4)
    {
        CARD("%10lg%10lg%10lg%10s%10s%10s%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,LSDYNA_BETA);
    }
    else if(axisOptFlag == 5)
    {
        CARD("%10lg%10lg%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3);
    }
    else if(axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
    }
    else
    {
        BLANK;
    }

    COMMENT("$      FVF                  FL        FD                 A11       A22");
    CARD("%10lg%10s%10lg%10lg%10s%10lg%10lg",LSD_MAT_215_FVF,_BLANK_,LSD_MAT_215_FL,LSD_MAT_215_FD,_BLANK_,LSD_A11,LSD_A22);

    COMMENT("$      ROF        EL        ET       GLT      PRTL      PRTT");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_215_ROF,LSD_MAT_215_EL,LSD_MAT_215_ET,LSD_GLT,LSD_MAT_215_PRTL,LSD_MAT_215_PRTT);

    COMMENT("$       XT                                                      SLIMXT    NCYRED");
    CARD("%10lg%10s%10s%10s%10s%10s%10lg%10lg",LSD_MAT_XT,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_, LSD_MAT_SLIMXT,LSD_MAT_NCYRED);

    COMMENT("$      ROM         E        PR");
    CARD("%10lg%10lg%10lg",LSD_MAT_215_ROM,E,Nu);

    COMMENT("$    SIGYT     ETANT                          EPS0         C");
    CARD("%10lg%10lg%10s%10s%10lg%10lg",LSD_MAT_215_SIGYT,LSD_MAT_215_ETANT,_BLANK_,_BLANK_,LSD_EPS0,LSD_MATL85_C);

    COMMENT("$    LCIDT                                    LCDI       UPF");
    CARD("%10lg%10s%10s%10s%10lg%10lg",LSD_LCID2,_BLANK_,_BLANK_,_BLANK_,LSD_LCID,SCALAR_OR_FUNCTION(optionUPF, LSD_MAT_215_UPF,LSD_LCUPF));
}
