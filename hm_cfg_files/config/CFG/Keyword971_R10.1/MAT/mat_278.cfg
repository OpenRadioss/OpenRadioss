//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//Material law 278 (MAT_CF_MICROMECHANICS) Setup File
//


ATTRIBUTES(COMMON)
{
    KEYWORD_STR         = VALUE(STRING, "Solver Keyword");
    LSD_TitleOpt        = VALUE(INT, "Title");
    CommentEnumField    = VALUE(INT, "User Comments");
    Num_Comments        = SIZE("No. of comment lines");
    Comments            = ARRAY[Num_Comments](STRING, "Entity Comments");

    //Card1 of LS-Dyna manual
    Rho                                     = VALUE(FLOAT, "Mass density");
    MATL234_E1                              = VALUE(FLOAT,"Young’s modulus in the yarn’s axial direction");
    MATL234_E2                              = VALUE(FLOAT,"Young’s modulus in the yarn’s transverse direction");
    MATL234_G12                             = VALUE(FLOAT,"Shear modulus of the yarns");
    MATL234_G23                             = VALUE(FLOAT,"Transverse shear modulus");
    MATL234_EU                              = VALUE(FLOAT,"Ultimate strain at failure");
    MATL234_C                               = VALUE(FLOAT,"Coefficient of friction between the fibers");

    //Card2 of LS-Dyna manual
    MATL234_EKA                             = VALUE(FLOAT,"Elastic constant of element");
    MATL234_EUA                             = VALUE(FLOAT,"Ultimate strain of element");
    MATL234_VMB                             = VALUE(FLOAT,"Damping coefficient of element");
    MATL234_EKB                             = VALUE(FLOAT,"Elastic constant of element");
    MATL234_THL                             = VALUE(FLOAT,"Yarn locking angle");
    MATL234_TA                              = VALUE(FLOAT,"Transition angle of locking");
    LSD_THI1                                = VALUE(FLOAT, "Initial braid angle 1");
    LSD_THI2                                = VALUE(FLOAT, "Initial braid angle 2");

    //Card3 of LS-Dyna manual
    MATL234_W                               = VALUE(FLOAT, "Fiber width");
    LSD_SPAN                                = VALUE(FLOAT, "Span between the fibers");
    LSD_THICK                               = VALUE(FLOAT, "Real fiber thickness");
    MATL234_H                               = VALUE(FLOAT, "Effective fiber thickness");
    LSD_MAT278_AREA                         = VALUE(FLOAT, "Fiber cross-sectional area");

    //Card4,5 of LS-Dyna manual
    axisOptFlag                             = VALUE(INT,  "Anisotropy axis definition");
    LSD_SYSTEM                              = VALUE(SYSTEM,  "coordinate system ID number");
    LSDYNA_A1                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A2                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A3                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_D1                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D2                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D3                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_V1                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V2                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V3                               = VALUE(FLOAT,  "Components of vector v");
    LSD_NODE3                               = VALUE(NODE,  "Node1");
    LSD_NODE4                               = VALUE(NODE,  "Node2");
    LSD_NODE5                               = VALUE(NODE,  "Node1");
    LSD_NODE6                               = VALUE(NODE,  "Node2");
    LSD_NODE7                               = VALUE(NODE,  "Node1");
    LSD_NODE8                               = VALUE(NODE,  "Node2");

    //Card6 of LS-Dyna manual
    LSD_VYARN                               = VALUE(FLOAT, "Volume fraction of yarn");

    //Card7 of LS-Dyna manual
    LSD_K1                                  = VALUE(FLOAT, "Parameter k1 for Kamal model");
    LSD_K2                                  = VALUE(FLOAT, "Parameter k2 for Kamal model");
    LSD_MAT_C1                              = VALUE(FLOAT, "Parameter c1 for Kamal model");
    LSD_MAT_C2                              = VALUE(FLOAT, "Parameter c2 for Kamal model");
    LSDYNA_MAT_M                            = VALUE(FLOAT, "Exponent m for Kamal model");
    LSDYNA_MAT_N                            = VALUE(FLOAT, "Exponent n for Kamal model");

    //Card8 of LS-Dyna manual
    LSD_CHEXP1                              = VALUE(FLOAT, "Quadratic parameter gamma2 for chemical shrinkage");
    LSD_CHEXP2                              = VALUE(FLOAT, "Quadratic parameter gamma1 for chemical shrinkage");
    LSD_CHEXP3                              = VALUE(FLOAT, "Quadratic parameter gamma0 for chemical shrinkage");
    LSD_LCID                                = VALUE(CURVE, "Load curve ID to define the coefficient for chemical shrinkage");
    LSD_LCID2                               = VALUE(CURVE, "Load curve ID or table ID defining the instantaneous coefficient of thermal expansion");
    LSD_MAT_R                               = VALUE(FLOAT, "Gas constant R for Kamal model");
    LSD_TREFEXP                             = VALUE(FLOAT, "Reference temperature T0 for secant form of thermal expansion");
    LSD_DOCREFEXP                           = VALUE(FLOAT, "Reference degree of cure alpha0 for sequential form of chemical expansion");

    //Card9 of LS-Dyna manual
    LSD_WLFTREF                             = VALUE(FLOAT, "Reference temperature for WLF shift function");
    LSD_WLFA                                = VALUE(FLOAT, "Parameter A for WLF shift function");
    LSD_WLFB                                = VALUE(FLOAT, "Parameter B for WLF shift function");
    LSD_LCID3                               = VALUE(CURVE, "Load curve ID defining the instantaneous shear modulus G0 as a function of state of cure");
    LSD_LCID4                               = VALUE(CURVE, "Load curve ID defining the instantaneous bulk modulus K0 as a function of state of cure");
    LSD_IDOC                                = VALUE(FLOAT, "Initial degree of cure");
    LSD_INCR                                = VALUE(INT, "Flag for stress formulation");

    //Additional cards
    ArrayCount                              = SIZE("ArrayCount");
    LSD_MAT76_GI                            = ARRAY[ArrayCount](FLOAT, "Shear relaxation modulus");
    LSD_MAT76_BETAI                         = ARRAY[ArrayCount](FLOAT, "Shear decay constant");
    LSD_MAT76_KI                            = ARRAY[ArrayCount](FLOAT, "Bulk relaxation modulus");
    LSD_MAT76_BETAKI                        = ARRAY[ArrayCount](FLOAT, "Bulk decay constant");

    IO_FLAG                                 = VALUE(INT, "io flag");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    LOC_AOPT                                = VALUE(FLOAT, "");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR         = 9000;
    CommentEnumField    = 3220;
    Num_Comments        = 3101;
    LSD_TitleOpt        = 90;
    Comments            = 3100;

    Rho                 = 118;
    MATL234_E1          = 6433;
    MATL234_E2          = 6434;
    MATL234_G12         = 6435;
    MATL234_G23         = 6449;
    MATL234_EU          = 6436;
    MATL234_C           = 6448;
    MATL234_EKA         = 6445;
    MATL234_EUA         = 6446;
    MATL234_VMB         = 6447;
    MATL234_EKB         = 6450;
    MATL234_THL         = 6437;
    MATL234_TA          = 6439;
    LSD_THI1            = 11018;
    LSD_THI2            = 11019;
    MATL234_W           = 6440;
    LSD_SPAN            = 11024;
    LSD_THICK           = 7976;
    MATL234_H           = 6443;
    LSD_MAT278_AREA     = 11021;
    axisOptFlag                             = 4946;
    LSD_SYSTEM                              = 184;
    LSDYNA_A1                               = 139;
    LSDYNA_A2                               = 140;
    LSDYNA_A3                               = 141;
    LSDYNA_D1                               = 145;
    LSDYNA_D2                               = 146;
    LSDYNA_D3                               = 147;
    LSDYNA_V1                               = 142;
    LSDYNA_V2                               = 143;
    LSDYNA_V3                               = 144;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_NODE7                               = 5080;
    LSD_NODE8                               = 5081;
    LSD_VYARN           = 11020;
    LSD_K1              = 1593;
    LSD_K2              = 1594;
    LSD_MAT_C1          = 1139;
    LSD_MAT_C2          = 1140;
    LSDYNA_MAT_M        = 4921;
    LSDYNA_MAT_N        = 4922;
    LSD_CHEXP1          = 8203;
    LSD_CHEXP2          = 8204;
    LSD_CHEXP3          = 8205;
    LSD_LCID            = 45;
    LSD_LCID2           = 168;
    LSD_MAT_R           = 1134;
    LSD_TREFEXP         = 8206;
    LSD_DOCREFEXP       = 8207;
    LSD_WLFTREF         = 8208;
    LSD_WLFA            = 8209;
    LSD_WLFB            = 8210;
    LSD_LCID3           = 170;
    LSD_LCID4           = 171;
    LSD_IDOC            = 8211;
    LSD_INCR            = 8212;
    ArrayCount          = 2246;
    LSD_MAT76_GI        = 4380;
    LSD_MAT76_BETAI     = 4381;
    LSD_MAT76_KI        = 4382;
    LSD_MAT76_BETAKI    = 4383;

    AOPT_SKEW_FLAG                          = -1;
    LOC_AOPT                                = -1;
    IO_FLAG                                 = -1;
    //empty_string                       = -1;
}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY=SCALAR(Rho);
    E1 = SCALAR(MATL234_E1);
    E2 = SCALAR(MATL234_E2);
    YOUNG_MODULUS = MAX(E1,E2);
    G12 = SCALAR(MATL234_G12);
    G23 = SCALAR(MATL234_G23);
    SHEAR_MODULUS = MAX(G12,G23);
    BULK_MODULUS=EVAL(YOUNG_MODULUS/(3*0.074));
    POISSON_RATIO     = EVAL((3.*BULK_MODULUS-2.*SHEAR_MODULUS)/(6.*BULK_MODULUS+2.*SHEAR_MODULUS));
     //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);

  SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+BULK_MODULUS)/MASS_DENSITY)^0.5);
}

GUI(COMMON){
    ASSIGN(KEYWORD_STR, "*MAT_CF_MICROMECHANICS");
    RADIO(CommentEnumField)
    {
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
    {
        SCALAR(Comments);
    }
    }     
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    }
  mandatory:
    SCALAR(Rho)             {DIMENSION="density";}
  optional:
    SCALAR(MATL234_E1)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(MATL234_E2)      {DIMENSION="k";}
    SCALAR(MATL234_G12)     {DIMENSION="DIMENSIONLESS";}
    SCALAR(MATL234_G23)     {DIMENSION="DIMENSIONLESS";}
    SCALAR(MATL234_EU)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(MATL234_C)       {DIMENSION="DIMENSIONLESS";}
    SCALAR(MATL234_EKA)     {DIMENSION="DIMENSIONLESS";}
    SCALAR(MATL234_EUA)     {DIMENSION="DIMENSIONLESS";}
    SCALAR(MATL234_VMB)     {DIMENSION="DIMENSIONLESS";}
    SCALAR(MATL234_EKB)     {DIMENSION="DIMENSIONLESS";}
    SCALAR(MATL234_THL)     {DIMENSION="DIMENSIONLESS";}
    SCALAR(MATL234_TA)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_THI1)        {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_THI2)        {DIMENSION="pressure";}
    SCALAR(MATL234_W)       {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_SPAN)        {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_THICK)       {DIMENSION="DIMENSIONLESS";}
    SCALAR(MATL234_H)       {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT278_AREA) {DIMENSION="DIMENSIONLESS";}

    RADIO(axisOptFlag)
    {
       ADD(1, "0.0: locally orthotropic with material axes determined by nodes 1,2 and 4");
       ADD(2, "1.0: A-direction given by a point and global location of element centre");
       ADD(3, "2.0: Axis given by vectors");
       ADD(4, "3.0: Axis given by rotating the material axes by an angle BETA");
       ADD(5, "4.0: Axis given by rotating the material axes by an angle BETA");
       ADD(6, "By system");
    }
    if(axisOptFlag == 3)
    {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],FALSE);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],FALSE);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],FALSE);
        DATA(LSD_NODE7);
        DATA(LSD_NODE8);
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],FALSE);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],FALSE);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],FALSE);
    }
    if(axisOptFlag == 4 || axisOptFlag == 5)
    {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],FALSE);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],FALSE);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],FALSE);
    }
    if(axisOptFlag == 6)
    {
        DATA(LSD_SYSTEM);
    }
    SCALAR(LSD_VYARN)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_K1)      {DIMENSION="k";}
    SCALAR(LSD_K2)     {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_C1)     {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_C2)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_MAT_M)       {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_MAT_N)     {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_CHEXP1)     {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_CHEXP2)     {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_CHEXP3)     {DIMENSION="DIMENSIONLESS";}
    DATA(LSD_LCID);
    DATA(LSD_LCID2);
    SCALAR(LSD_MAT_R)     {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_TREFEXP)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_DOCREFEXP)        {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_WLFTREF)        {DIMENSION="pressure";}
    SCALAR(LSD_WLFA)       {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_WLFB)        {DIMENSION="DIMENSIONLESS";}
    DATA(LSD_LCID3);
    DATA(LSD_LCID4);
    SCALAR(LSD_IDOC)       {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_INCR)       {DIMENSION="DIMENSIONLESS";}

    SIZE_RADIO(ArrayCount)
     {
        ADD(0,"OFF");
        ADD(0," 0");
        ADD(1," 1");
        ADD(2," 2");
        ADD(3," 3");
        ADD(4," 4");
        ADD(5," 5");
        ADD(6," 6");
        ADD(7," 7");
        ADD(8," 8");
        ADD(9," 9");
        ADD(10," 10");
        ADD(11," 11");
        ADD(12," 12");
        ADD(13," 13");
        ADD(14," 14");
     }
     if(ArrayCount > 0)
     {
        ARRAY(ArrayCount,"")
        {
           SCALAR(LSD_MAT76_GI)           {DIMENSION="pressure";}
           SCALAR(LSD_MAT76_BETAI)        {DIMENSION="DIMENSIONLESS";}
           SCALAR(LSD_MAT76_KI)           {DIMENSION="pressure";}
           SCALAR(LSD_MAT76_BETAKI)       {DIMENSION="DIMENSIONLESS";}
        }
     }
}

FORMAT(Keyword971_R10.1)
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);

    //Card1
    COMMENT("$      MID        RO        E1        E2       G12       G23        EU         C");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,MATL234_E1,MATL234_E2,MATL234_G12,MATL234_G23,MATL234_EU,MATL234_C);

    //Card2
    COMMENT("$      EKA       EUA       VMB       EKB       THL        TA      THI1      THI2");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",MATL234_EKA,MATL234_EUA,MATL234_VMB,MATL234_EKB,MATL234_THL,MATL234_TA,LSD_THI1,LSD_THI2);

    //Card3
    COMMENT("$        W      SPAN     THICK         H      AREA");
    CARD("%10lg%10lg%10lg%10lg%10lg",MATL234_W,LSD_SPAN,LSD_THICK,MATL234_H,LSD_MAT278_AREA);

    //Handling of card 4 and 5
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    if(LSD_NODE8 != NONE && LSD_NODE7 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }

    //Import handling
    CARD_PREREAD("%10lg",LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,4,IMPORT);
    }
    else if(LOC_AOPT == 4.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,5,IMPORT);
    }
    else if(IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,6,IMPORT);
    }

    //Export handling
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 5 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,4.0,EXPORT);
    }

    //Card4,5
    COMMENT("$     AOPT        A1        A2        A3");
    if(axisOptFlag == 3)
    {
        CARD("%10lg%10lg%10lg%10lg",LOC_AOPT,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);

        COMMENT("$       V1        V2        V3        D1        D2        D3");
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
    }
    else if(axisOptFlag == 4 || axisOptFlag == 5)
    {
        CARD("%10lg",LOC_AOPT);

        COMMENT("$       V1        V2        V3        D1        D2        D3");
        CARD("%10lg%10lg%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3);
    }
    else if(axisOptFlag == 6)
    {
        CARD("%10lg",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM));

        COMMENT("$       V1        V2        V3        D1        D2        D3");
        BLANK;
    }
    else
    {
        CARD("%10lg",LOC_AOPT);

        COMMENT("$       V1        V2        V3        D1        D2        D3");
        BLANK;
    }

    //Card6
    COMMENT("$    VYARN");
    CARD("%10lg",LSD_VYARN);

    //Card7
    COMMENT("$       K1        K2        C1        C2         M         N");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_K1,LSD_K2,LSD_MAT_C1,LSD_MAT_C2,LSDYNA_MAT_M,LSDYNA_MAT_N);

    //Card8
    COMMENT("$   CHEXP1    CHEXP2    CHEXP3   LCCHEXP   LCTHEXP         R      TREF    DOCREF");
    CARD("%10lg%10lg%10lg%10d%10d%10lg%10lg%10lg",LSD_CHEXP1,LSD_CHEXP2,LSD_CHEXP3,LSD_LCID,LSD_LCID2,LSD_MAT_R,LSD_TREFEXP,LSD_DOCREFEXP);

    //Card9
    COMMENT("$  WLFTREF      WLFA      WLFB      LCG0      LCK0      IDOC      INCR");
    CARD("%10lg%10lg%10lg%10d%10d%10lg%10d",LSD_WLFTREF,LSD_WLFA,LSD_WLFB,LSD_LCID3,LSD_LCID4,LSD_IDOC,LSD_INCR);

    //Additional cards
    FREE_CARD_LIST(ArrayCount)
    {
        COMMENT("$       GI     BETAI        KI    BETAKI");
        CARD("%10lg%10lg%10lg%10lg",LSD_MAT76_GI,LSD_MAT76_BETAI,LSD_MAT76_KI,LSD_MAT76_BETAKI);
    }
}
