//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//Material law 36E (MAT_EXTENDED_3-PARAMETER_BARLAT) Setup File
//


ATTRIBUTES(COMMON)
{
    KEYWORD_STR         = VALUE(STRING, "Solver Keyword");
    LSD_TitleOpt        = VALUE(INT, "Title");
    CommentEnumField    = VALUE(INT, "User Comments");
    Num_Comments        = SIZE("No. of comment lines");
    Comments            = ARRAY[Num_Comments](STRING, "Entity Comments");
    
    Rho                 = VALUE(FLOAT, "Mass density");
    E                   = VALUE(FLOAT,"Young's Modulus");
    Nu                  = VALUE(FLOAT,"Poisson's ratio");
    axisOptFlag         = VALUE(INT, "Material axes option");
    LSD_SYSTEM          = VALUE(SYSTEM, "coordinate system ID");
    LSD_LCH00           = VALUE(FUNCT,"Load curve defining uniaxial stress vs uniaxial strain in the given direction 00");
    LSD_LCH45           = VALUE(FUNCT,"Load curve defining uniaxial stress vs uniaxial strain in the given direction 45");
    LSD_LCH90           = VALUE(FUNCT,"Load curve defining uniaxial stress vs uniaxial strain in the given direction 90");
    LSD_LCHBI           = VALUE(FUNCT,"Load curve defining biaxial stress vs biaxial strain");
    LSD_LCHSH           = VALUE(FUNCT,"Load curve defining shear stress vs shear strain");
    LSD_LCR00           = VALUE(FUNCT,"Load curve defining standard R-value vs uniaxial strain in the given direction00");
    LSD_LCR45           = VALUE(FUNCT,"Load curve defining standard R-value vs uniaxial strain in the given direction45");
    LSD_LCR90           = VALUE(FUNCT,"Load curve defining standard R-value vs uniaxial strain in the given direction90");
    LSD_LCRBI           = VALUE(FUNCT,"Load curve defining biaxial R-value vs biaxial strain");
    LSD_LCRSH           = VALUE(FUNCT,"Load curve defining shear R-value vs shear strain");
    LSD_MAT_M           = VALUE(FLOAT,"m, exponent in Barlat's yield surface");
    LSD_NODE3           = VALUE(NODE,"Node 1");
    LSD_NODE4           = VALUE(NODE,"Node 2");
    LSDYNA_A1           = VALUE(FLOAT,"Define components of vector a");
    LSDYNA_A2           = VALUE(FLOAT,"Define components of vector a");
    LSDYNA_A3           = VALUE(FLOAT,"Define components of vector a");
    LSD_NODE7           = VALUE(NODE,"Node 1");
    LSD_NODE8           = VALUE(NODE,"Node 2");
    LSDYNA_D1           = VALUE(FLOAT,"Define components of vector d");
    LSDYNA_D2           = VALUE(FLOAT,"Define components of vector d");
    LSDYNA_D3           = VALUE(FLOAT,"Define components of vector d");
    LSD_NODE5           = VALUE(NODE,"Node 1");
    LSD_NODE6           = VALUE(NODE,"Node 2");
    LSDYNA_V1           = VALUE(FLOAT,"Define components of vector v");
    LSDYNA_V2           = VALUE(FLOAT,"Define components of vector v");
    LSDYNA_V3           = VALUE(FLOAT,"Define components of vector v");
    AOPT_SKEW_FLAG      = VALUE(INT,"Flag for defining coordinate system ID number");
    LSD_MAT_BETA        = VALUE(FLOAT,"Material angle");
    LOC_AOPT            = VALUE(FLOAT, "Flag for material properties initialization");
    IO_FLAG             = VALUE(INT, "io flag");
    //empty_string   = VALUE(STRING, "Used as a local variable for free format case"); 
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR         = 9000;
    CommentEnumField    = 3220;
    Num_Comments        = 3101;
    LSD_TitleOpt        = 90;
    Comments            = 3100;

    Rho                 = 118;
    Nu                  = 120;
    E                   = 119;
    axisOptFlag         = 4946;
    LSD_SYSTEM          = 184;
    
    LSD_LCH00           = 11031;
    LSD_LCH45           = 11032;
    LSD_LCH90           = 11052;
    LSD_LCHBI           = 11040;
    LSD_LCHSH           = 11041;
    
    LSD_LCR00           = 11042;
    LSD_LCR45           = 11043;
    LSD_LCR90           = 11044;
    LSD_LCRBI           = 11034;
    LSD_LCRSH           = 11046;
    LSD_MAT_M           = 314;
    
    LOC_AOPT            = -1;
    
    LSD_NODE3           = 2802;
    LSD_NODE4           = 2803;
    LSDYNA_A1           = 139;
    LSDYNA_A2           = 140;
    LSDYNA_A3           = 141;
    
    LSD_NODE7           = 5080;
    LSD_NODE8           = 5081;
    LSDYNA_D1           = 145;
    LSDYNA_D2           = 146;
    LSDYNA_D3           = 147;
    LSD_NODE5           = 5078;
    LSD_NODE6           = 5079;
    LSDYNA_V1           = 142;
    LSDYNA_V2           = 143;
    LSDYNA_V3           = 144;
    LSD_MAT_BETA        = 306;
    AOPT_SKEW_FLAG      = -1;        
    IO_FLAG             = -1;                             
    //empty_string   = -1;          
}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY=SCALAR(Rho);
    YOUNG_MODULUS = SCALAR(E);
    POISSON_RATIO = SCALAR(Nu);
                   //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON) 
{
    ASSIGN(KEYWORD_STR, "*MAT_EXTENDED_3-PARAMETER_BARLAT");
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
    }     
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    } 
  mandatory:
    SCALAR(Rho){DIMENSION="density";}
  optional:
    SCALAR(E)                               {DIMENSION="pressure";}
    SCALAR(Nu)                              {DIMENSION="DIMENSIONLESS";}
    DATA(LSD_LCH00);
    DATA(LSD_LCH45);
    DATA(LSD_LCH90);
    DATA(LSD_LCHBI);
    DATA(LSD_LCHSH);
    DATA(LSD_LCR00);
    DATA(LSD_LCR45);
    DATA(LSD_LCR90);
    DATA(LSD_LCRBI);
    DATA(LSD_LCRSH);
    SCALAR(LSD_MAT_M)                       {DIMENSION="DIMENSIONLESS";}
    RADIO(axisOptFlag)
    {
        ADD(1, "0: Locally orthotropic: axis given by nodes 1,2 and 4");
        ADD(2, "2: Globally orthotropic: axis given by vectors");
        ADD(3, "3: Locally orthotropic: axis given by rotating the material axes by an angle BETA");
        ADD(4, "By System");
    }
    if(axisOptFlag == 6)
    {
        DATA(LSD_SYSTEM);
    }
    if(axisOptFlag == 2)
    {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],FALSE);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],FALSE);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],FALSE);
        DATA(LSD_NODE7);                
        DATA(LSD_NODE8);                
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],FALSE);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],FALSE);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],FALSE);
    }
     if(axisOptFlag == 3)
    {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],FALSE);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],FALSE);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],FALSE);
    }     
     if(axisOptFlag == 3 && axisOptFlag == 1)
    {
        SCALAR(LSD_MAT_BETA)             {DIMENSION="a";}
    }
    

}

FORMAT(Keyword971_R10.1)
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);
    
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }

    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    if(LSD_NODE7 != NONE && LSD_NODE8 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    
    //Card 1
    COMMENT("$      MID        RO         E        PR");
    CARD("%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu);
    
    //Card2
    COMMENT("$    LCH00     LCH45     LCH90     LCHBI     LCHSH");
    CARD("%10lg%10lg%10lg%10lg%10lg",LSD_LCH00,LSD_LCH45,LSD_LCH90,LSD_LCHBI,LSD_LCHSH);
    
    //Card 3
    COMMENT("$    LCR00     LCR45     LCR90     LCRBI     LCRSH         M");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_LCR00,LSD_LCR45,LSD_LCR90,LSD_LCRBI,LSD_LCRSH,LSD_MAT_M);
    
    //Card 4
    COMMENT("$     AOPT");
    CARD_PREREAD("%10lg",LOC_AOPT);
    if(IO_FLAG == 2)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 4)
        {
            CARD("%10lg",LOC_AOPT);
        }
        else 
        {
            CARD("%10lg",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM));
        }
    }
    
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    if(IO_FLAG == 1)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 4)
        {
            CARD("%10lg",LOC_AOPT);
        }
        else 
        {
            CARD("%10lg",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM));
        }
    }
    
    //Card 5
    COMMENT("$                           A1        A2        A3");
    if(axisOptFlag == 2)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
    }
    else
    {
        BLANK;
    }
    
    //Card 6
    COMMENT("$       V1        V2        V3        D1        D2        D3      BETA");
    if(axisOptFlag == 3)
    {
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3,LSD_MAT_BETA);
    }
    else if(axisOptFlag == 2)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
    }
    else if(axisOptFlag == 1)
    {
        CARD("%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_MAT_BETA);
    }
    else 
    {
        BLANK;
    }
}

