//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- control_solid.cfg ---
//		GROUP	CONTROL_SOLID	4628	6.1
//		 04/02/2020

ATTRIBUTES(COMMON)
{

    KEYWORD_STR = VALUE(STRING, "*CONTROL_SOLID");
    
    LSD_ESORT = VALUE(INT, "Automatic sorting of tetrahedron and pentahedron elements to treat degenerate tetrahedron and pentahedron elements as tetrahedron (formulation 10) and pentahedron (formulation 15) solids, respectively");
    LSD_FMATRIX = VALUE(INT, "Default method used in the calculation of the deformation gradient matrix");
    LSD_NIPTETS = VALUE(INT, "Number of integration points used in the quadratic tetrahedron elements. Either 4 or 5 can be specified. This option applies to the types 4, 16, and 17 tetrahedron element");
    CSD_SWLOCL = VALUE(INT, "Output option for stresses in solid elements used as spot welds with material *MAT_SPOTWELD");
    LSD_PSFAIL = VALUE(SETS, "Optional solid part set ID specifying which part ID's are checked for negative volumes prior to element processing") { SUBTYPES = (/SETS/SET_PART_IDPOOL); }
    LSD_T10JTOL = VALUE(FLOAT, "Tolerance for jacobian in 4-point 10-noded quadratic tetrahedra (type 16)");
    LSD_ICOHED = VALUE(INT, "Global flag for cohesive element options, interpreted digit-wise as follows: ICOH = [LK] = K + 10 x L");
    LSD_TET13K = VALUE(INT, "Consistent tangent stiffness matrix for the pressure averaged tetrahedron (type 13)"); // tooltip from ML- TOO long in User Manual
    CSD_OptCard = VALUE(INT, "OptionalCard");
    CSD_PM1  = VALUE(INT, "PM1-Components of a permutation vector for nodes that define the 10-node tetrahedron");    
    CSD_PM2  = VALUE(INT, "PM2-Components of a permutation vector for nodes that define the 10-node tetrahedron");
    CSD_PM3  = VALUE(INT, "PM3-Components of a permutation vector for nodes that define the 10-node tetrahedron");
    CSD_PM4  = VALUE(INT, "PM4-Components of a permutation vector for nodes that define the 10-node tetrahedron");
    CSD_PM5  = VALUE(INT, "PM5-Components of a permutation vector for nodes that define the 10-node tetrahedron");
    CSD_PM6  = VALUE(INT, "PM6-Components of a permutation vector for nodes that define the 10-node tetrahedron");
    CSD_PM7  = VALUE(INT, "PM7-Components of a permutation vector for nodes that define the 10-node tetrahedron");
    CSD_PM8  = VALUE(INT, "PM8-Components of a permutation vector for nodes that define the 10-node tetrahedron");
    CSD_PM9  = VALUE(INT, "PM9-Components of a permutation vector for nodes that define the 10-node tetrahedron");
    CSD_PM10 = VALUE(INT, "PM10-Components of a permutation vector for nodes that define the 10-node tetrahedron");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR = 9000;
    CSD_OptCard = 770;
    CSD_PM1 = 771;
    CSD_PM10 = 780;
    CSD_PM2 = 772;
    CSD_PM3 = 773;
    CSD_PM4 = 774;
    CSD_PM5 = 775;
    CSD_PM6 = 776;
    CSD_PM7 = 777;
    CSD_PM8 = 778;
    CSD_PM9 = 779;
    CSD_SWLOCL = 781;
    LSD_ESORT = 4269;
    LSD_FMATRIX = 4492;
    LSD_NIPTETS = 4493;
    LSD_PSFAIL = 587;
    LSD_T10JTOL = 588;
    LSD_ICOHED = 8166;
    LSD_TET13K = 8849;
}

DEFAULTS(COMMON)
{
    CSD_SWLOCL = 2;
    LSD_ESORT = 0;
    LSD_FMATRIX = 0;
    LSD_NIPTETS = 4;
   
    LSD_T10JTOL = 0;
    LSD_ICOHED = 0;
}

CHECK(COMMON) 
{
    CSD_PM1 > 0;
    CSD_PM1 <= 10;

    CSD_PM2 > 0;
    CSD_PM2 <= 10;

    CSD_PM3 > 0;
    CSD_PM3 <= 10;

    CSD_PM4 > 0;
    CSD_PM4 <= 10;

    CSD_PM5 > 0;
    CSD_PM5 <= 10;

    CSD_PM6 > 0;
    CSD_PM6 <= 10;

    CSD_PM7 > 0;
    CSD_PM7 <= 10;

    CSD_PM8 > 0;
    CSD_PM8 <= 10;

    CSD_PM9 > 0;
    CSD_PM9 <= 10;
    
    CSD_PM10 > 0;
    CSD_PM10 <= 10;
}


GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*CONTROL_SOLID");
mandatory:
    RADIO(LSD_ESORT,"ESORT") 
    {
        ADD(0, "0: no sorting");
        ADD(1, "1: sort tetrahedron to type 10, pentahedron to type 15");
        ADD(2, "2: sort tetrahedron to type 10, 1-point integrated pentahedron to type 115, fully integrated pentahedron to type 15");
        ADD(3, "3: same as EQ.1 but also print switched elements in message file");
        ADD(4, "4: same as EQ.2 but also print switched elements in message file");
    }
    RADIO(LSD_FMATRIX)
    {
        ADD(1, "1: Update incrementally in time. This is the default for explicit");
        ADD(2, "2: Directly compute F. This is the default for implicit and implicit/explicit switching");
    }
    RADIO(LSD_NIPTETS)
    {
        ADD(4, "4: Four integration points used in the quadratic terahedin elements");
        ADD(5, "5: Five integration points used in the quadratic terahedin elements");
    }
    RADIO(CSD_SWLOCL)
    {
        ADD(1, "1: Global");
        ADD(2, "2: Local");
    }
optional:
    DATA(LSD_PSFAIL) { SUBTYPES = (/SETS/SET_PART_IDPOOL); }
    SCALAR(LSD_T10JTOL,"T10JTOL") { DIMENSION="DIMENSIONLESS"; }
    RADIO(LSD_ICOHED) /// IMPLEMENTED AS ML, User manual is TOTALLY different
    {
        ADD(0,"00: K=0 and L=0");
        ADD(1,"01: K=1 and L=0");
        ADD(10,"10: K=0 and L=1");
        ADD(11,"11: K=1 and L=1");
        ADD(20,"20: K=0 and L=2");
        ADD(21,"21: K=1 and L=2");
    }
    RADIO(LSD_TET13K)
    {        
        ADD(0, "0: Off");
        ADD(1, "1: On");
    }
    FLAG(CSD_OptCard);
    if(CSD_OptCard == 1)
    {
        SEPARATOR("Optional Card");
        SCALAR(CSD_PM1) { DIMENSION="DIMENSIONLESS"; }
        SCALAR(CSD_PM2) { DIMENSION="DIMENSIONLESS"; }
        SCALAR(CSD_PM3) { DIMENSION="DIMENSIONLESS"; }
        SCALAR(CSD_PM4) { DIMENSION="DIMENSIONLESS"; }
        SCALAR(CSD_PM5) { DIMENSION="DIMENSIONLESS"; }
        SCALAR(CSD_PM6) { DIMENSION="DIMENSIONLESS"; }
        SCALAR(CSD_PM7) { DIMENSION="DIMENSIONLESS"; }
        SCALAR(CSD_PM8) { DIMENSION="DIMENSIONLESS"; }
        SCALAR(CSD_PM9) { DIMENSION="DIMENSIONLESS"; }
        SCALAR(CSD_PM10){ DIMENSION="DIMENSIONLESS"; }
        SEPARATOR();
    }
}


// File format
FORMAT(Keyword971_R10.1)
{   
    HEADER("*CONTROL_SOLID");
    COMMENT("$    ESORT    FMATRX   NIPTETS    SWLOCL    PSFAIL   T10JTOL    ICOHED    TET13K");
    ///     1   2   3   4   5   6    7       1         2          3            4         5          6           7          8
    CARD("%10d%10d%10d%10d%10d%10lg%10d%10d",LSD_ESORT,LSD_FMATRIX,LSD_NIPTETS,CSD_SWLOCL,LSD_PSFAIL,LSD_T10JTOL,LSD_ICOHED,LSD_TET13K);
    if(CSD_OptCard == 1)
    {
        COMMENT("$    PM1     PM2     PM3     PM4     PM5     PM6     PM7     PM8     PM9    PM10");
    }    
    FREE_CARD(CSD_OptCard,"%8d%8d%8d%8d%8d%8d%8d%8d%8d%8d",CSD_PM1,CSD_PM2,CSD_PM3,CSD_PM4,CSD_PM5,CSD_PM6,CSD_PM7,CSD_PM8,CSD_PM9,CSD_PM10);

}
// File format
FORMAT(Keyword971_R9.3)
{   
    HEADER("*CONTROL_SOLID");
    COMMENT("$    ESORT    FMATRX   NIPTETS    SWLOCL    PSFAIL   T10JTOL    ICOHED");
    CARD("%10d%10d%10d%10d%10d%10lg%10d",LSD_ESORT,LSD_FMATRIX,LSD_NIPTETS,CSD_SWLOCL,LSD_PSFAIL,LSD_T10JTOL,LSD_ICOHED);
    if(CSD_OptCard == 1)
    {
        COMMENT("$    PM1     PM2     PM3     PM4     PM5     PM6     PM7     PM8     PM9    PM10");
    }    
    FREE_CARD(CSD_OptCard,"%8d%8d%8d%8d%8d%8d%8d%8d%8d%8d",CSD_PM1,CSD_PM2,CSD_PM3,CSD_PM4,CSD_PM5,CSD_PM6,CSD_PM7,CSD_PM8,CSD_PM9,CSD_PM10);
}
// File format
FORMAT(Keyword971_R6.1)
{   
    HEADER("*CONTROL_SOLID");

    COMMENT("$    ESORT    FMATRX   NIPTETS    SWLOCL    PSFAIL   T10JTOL");
    CARD("%10d%10d%10d%10d%10d%10lg",LSD_ESORT,LSD_FMATRIX,LSD_NIPTETS,CSD_SWLOCL,LSD_PSFAIL,LSD_T10JTOL);
    
    if(CSD_OptCard == 1)
    {
        COMMENT("$    PM1     PM2     PM3     PM4     PM5     PM6     PM7     PM8     PM9    PM10");
    }    
    FREE_CARD(CSD_OptCard,"%8d%8d%8d%8d%8d%8d%8d%8d%8d%8d",CSD_PM1,CSD_PM2,CSD_PM3,CSD_PM4,CSD_PM5,CSD_PM6,CSD_PM7,CSD_PM8,CSD_PM9,CSD_PM10);
}


FORMAT(Keyword971)
{   
    HEADER("*CONTROL_SOLID");

    COMMENT("$    ESORT    FMATRX   NIPTETS    SWLOCL    PSFAIL");
    CARD("%10d%10d%10d%10d%10d",LSD_ESORT,LSD_FMATRIX,LSD_NIPTETS,CSD_SWLOCL,LSD_PSFAIL);

    if(CSD_OptCard == 1)
    {
        COMMENT("$    PM1     PM2     PM3     PM4     PM5     PM6     PM7     PM8     PM9    PM10");
    }    
    FREE_CARD(CSD_OptCard,"%8d%8d%8d%8d%8d%8d%8d%8d%8d%8d",CSD_PM1,CSD_PM2,CSD_PM3,CSD_PM4,CSD_PM5,CSD_PM6,CSD_PM7,CSD_PM8,CSD_PM9,CSD_PM10);
}