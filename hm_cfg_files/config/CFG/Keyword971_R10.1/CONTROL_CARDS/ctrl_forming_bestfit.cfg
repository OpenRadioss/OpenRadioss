//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// *CONTROL_FORMING_BESTFIT
//

ATTRIBUTES(COMMON)
{

// INPUT ATTRIBUTES
    ControlFormBestFitVector                = VALUE(INT, "ControlFormBestFitVector");

    LSD_IFIT                                = VALUE(INT, "Best fit program activation flag");
    LSD_NSKIP                               = VALUE(INT, "Optional skipping scheme during bucket searching to aid the computational speed");
    LSD_GAPONLY                             = VALUE(INT, "Separation distance calculation flag");
    LSD_IFAST                               = VALUE(INT, "Computing performance optimization flag");
    IncludeExcludeNodeSet                   = VALUE(INT, "Define a node set to be included or excluded in the source mesh file for best fitting");
    LSD_FileName                            = VALUE(STRING, "Target mesh file in keyword format");
    
    LSD_NSID                                = VALUE(SETS, "The node set ID") { SUBTYPES = (/SETS/SET_NODE_IDPOOL); }
    LSD_NSID2                               = VALUE(SETS, "Node set ID of three nodes from the source mesh") { SUBTYPES = (/SETS/SET_NODE_IDPOOL); }
    PART_SENSOR_IDPOOL                      = VALUE(SETS, "Node set ID of three nodes from the target mesh") { SUBTYPES = (/SETS/SET_NODE_IDPOOL); }

// HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    IO_FLAG                                 = VALUE(INT, "");
    option                                  = VALUE(STRING, "");
    TMP_VAR                                 = VALUE(INT, "");
    
}

SKEYWORDS_IDENTIFIER(COMMON)
{

// INPUT ATTRIBUTES
    ControlFormBestFitVector                = 11011;

    LSD_IFIT                                = 11012;
    LSD_NSKIP                               = 11013;
    LSD_GAPONLY                             = 11014;
    LSD_IFAST                               = 11015;
    IncludeExcludeNodeSet                   = 11016; //ExcludeNodeSet
    LSD_FileName                            = 11017; //string

    LSD_NSID                                = 745;   //IFSET - entity
    LSD_NSID2                               = 7973;  //NSETS - entity
    PART_SENSOR_IDPOOL                      = 31;    //NSETT - PART SENSOR

// HM INTERNAL
    KEYWORD_STR                             = 9000;
    IO_FLAG                                 = -1;
    option                                  = -1;
    TMP_VAR                                 = -1;
}

CHECK(COMMON)
{

}

DEFAULTS(COMMON)
{

    LSD_IFIT = 0;
    LSD_NSKIP = -3;
    LSD_GAPONLY = 0;
    LSD_IFAST = 1;
    //LSD_NSID = 0;

}

GUI(COMMON)
{

    FLAG(ControlFormBestFitVector);
    if(ControlFormBestFitVector == 0)
    {
      ASSIGN(KEYWORD_STR, "*CONTROL_FORMING_BESTFIT");
    }
    else
    {
      ASSIGN(KEYWORD_STR, "*CONTROL_FORMING_BESTFIT_VECTOR");
    }

    RADIO(LSD_IFIT)
    {
       ADD(0, "0: Do not perform best-fit");
       ADD(1, "1: Activate the best-fit program");
    }
    SCALAR(LSD_NSKIP);
    RADIO(LSD_GAPONLY)
    {
       ADD(0, "0: Perform best-fit");
       ADD(1, "1: No best-fit");
       ADD(2, "2: User is responsible to move the parts closer in distance and orientation");
    }
    RADIO(LSD_IFAST)
    {
       ADD(0, "0: No computing speed optimization");
       ADD(1, "1: Activate computing speed optimization");
    }
    FLAG(IncludeExcludeNodeSet);
    
    // this -probably- is a bug: it doesn't work as intended,
    // but it generates a GUI similar to the one in ML
    if(IncludeExcludeNodeSet == 0)
    {
      SEPARATOR("IncludeNodeSet");
    }
    else
    {
      SEPARATOR("ExcludeNodeSet");
    }
    DATA(LSD_NSID) { SUBTYPES = (/SETS/SET_NODE_IDPOOL); }
    SEPARATOR("");

    DATA(LSD_NSID2) { SUBTYPES = (/SETS/SET_NODE_IDPOOL); }
    DATA(PART_SENSOR_IDPOOL) { SUBTYPES = (/SETS/SET_NODE_IDPOOL); }
    SCALAR(LSD_FileName) {DIMENSION="DIMENSIONLESS";}

}

// File format
FORMAT(Keyword971_R9.3)
{

  ASSIGN(IO_FLAG,0,IMPORT);
  ASSIGN(IO_FLAG,1,EXPORT);

  HEADER("*CONTROL_FORMING_BESTFIT");

  COMMENT("$     IFIT     NSKIP   GAPONLY     IFAST     IFSET     NSETS     NSETT");
  if(IO_FLAG == 1 && IncludeExcludeNodeSet == 0)
  {
    CARD("%10d%10d%10d%10d%10d%10d%10d",LSD_IFIT,LSD_NSKIP,LSD_GAPONLY,LSD_IFAST,LSD_NSID,LSD_NSID2,PART_SENSOR_IDPOOL);
  }
  else if (IO_FLAG == 1 && IncludeExcludeNodeSet == 1)
  {
    ASSIGN(TMP_VAR,-1*LSD_NSID,EXPORT);
    CARD("%10d%10d%10d%10d%10d%10d%10d",LSD_IFIT,LSD_NSKIP,LSD_GAPONLY,LSD_IFAST,TMP_VAR,LSD_NSID2,PART_SENSOR_IDPOOL);
  }
  COMMENT("$FILENAME                                                                       ");
  CARD("%-80s",LSD_FileName);

}

FORMAT(Keyword971_R10.1)
{

  ASSIGN(IO_FLAG,0,IMPORT);
  ASSIGN(IO_FLAG,1,EXPORT);

  if(IO_FLAG == 0)
  {
    HEADER("*CONTROL_FORMING_BESTFIT%s",option);
  }
  else if(IO_FLAG == 1 && ControlFormBestFitVector == 0)
  {
    HEADER("*CONTROL_FORMING_BESTFIT");
  }
  else if(IO_FLAG == 1 && ControlFormBestFitVector == 1)
  {
    HEADER("*CONTROL_FORMING_BESTFIT_VECTOR");
  }

  if(IO_FLAG == 0)
  {
    if(option == "")
    {
      ASSIGN(ControlFormBestFitVector,0);
    }
    else
    {
      // _VECTOR
      ASSIGN(ControlFormBestFitVector,1);
    }
  }

  COMMENT("$     IFIT     NSKIP   GAPONLY     IFAST     IFSET     NSETS     NSETT");
  if(IO_FLAG == 1 && IncludeExcludeNodeSet == 0)
  {
    CARD("%10d%10d%10d%10d%10d%10d%10d",LSD_IFIT,LSD_NSKIP,LSD_GAPONLY,LSD_IFAST,LSD_NSID,LSD_NSID2,PART_SENSOR_IDPOOL);
  }
  else if (IO_FLAG == 1 && IncludeExcludeNodeSet == 1)
  {
    ASSIGN(TMP_VAR,-1*LSD_NSID,EXPORT);
    CARD("%10d%10d%10d%10d%10d%10d%10d",LSD_IFIT,LSD_NSKIP,LSD_GAPONLY,LSD_IFAST,TMP_VAR,LSD_NSID2,PART_SENSOR_IDPOOL);
  }
  COMMENT("$FILENAME                                                                       ");
  CARD("%-80s",LSD_FileName);

}
