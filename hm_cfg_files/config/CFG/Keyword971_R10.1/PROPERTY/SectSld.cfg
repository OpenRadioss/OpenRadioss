//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Property
//

ATTRIBUTES(COMMON)
{
    // INPUT ATTRIBUTES
    LSD_AAFAC                               = VALUE(FLOAT,  "AAFAC");
    LSD_AET                                 = VALUE(INT,  "Ambient Element type");
    LSD_AFAC                                = VALUE(FLOAT,  "AFAC");
    LSD_BFAC                                = VALUE(FLOAT,  "BFAC");
    LSD_CFAC                                = VALUE(FLOAT,  "CFAC");
    LSD_CMID                                = VALUE(MAT,  "Cohesive material ID");
    LSD_DFAC                                = VALUE(FLOAT,  "DFAC");
    LSD_DS                                  = VALUE(FLOAT,  "Normalized support defined for computing the displacement jump in fracture analysis");
    LSD_DX                                  = VALUE(FLOAT,  "Normalized dilation parameters of the kernel function in x directions");
    LSD_DY                                  = VALUE(FLOAT,  "Normalized dilation parameters of the kernel function in y directions");
    LSD_DZ                                  = VALUE(FLOAT,  "Normalized dilation parameters of the kernel function in z directions");
    LSD_ECUT                                = VALUE(FLOAT,  "Define the minimum distance to the node that a crack surface can cut to the edge");
    LSD_ELFORM                              = VALUE(INT,  "Element formulation options");
    LSD_END                                 = VALUE(FLOAT,  "END");
    LSD_NIP                                 = SIZE("Number of integration points for user-defined solid");
    LSD_ETA                                 = ARRAY[LSD_NIP](FLOAT,  "Second isoparametric coordinate");
    LSD_IBR                                 = VALUE(INT,  "IBR");
    LSD_IDILA                               = VALUE(INT,  "Replace the choice for the normalized dilation parameter definition in *CONTROL_EFG");
    LSD_IEBT                                = VALUE(INT,  "Essential boundary condition treatment");
    LSD_IHGF                                = VALUE(INT,  "Flag for using hourglass stabilization");
    LSD_IKEN                                = VALUE(INT,  "IKEN");
    LSD_IPS                                 = VALUE(INT,  "IPS");
    LSD_ISPLINE                             = VALUE(INT,  "Replace the choice for the EFG kernel functions definition in *CONTROL_EFG which allows for different spline functions in different sections");
    LSD_ITAJ                                = VALUE(INT,  "Flag for setting up finite element matrices");
    LSD_LMC                                 = SIZE("Number of property parameters");
    LSD_NHSV                                = VALUE(INT,  "Number of history variables");
    LSD_NXDOF                               = VALUE(INT,  "Number of extra degrees of freedom per node for user-defined solid");
    LSD_OPT_CARD3                           = VALUE(INT,  "OptionalCard");
    LSD_SEC_IDIM                            = VALUE(INT,  "Domain integration method");
    LSD_SEC_P                               = ARRAY[LSD_LMC](FLOAT,  "P");
    LSD_SEC_STIME                           = VALUE(FLOAT,  "Time to switch from stabilized EFG to standard EFG formulation");
    LSD_SEC_WGT                             = ARRAY[LSD_NIP](FLOAT,  "Isoparametric weight");
    LSD_SF                                  = VALUE(FLOAT,  "Failure strain");
    LSD_START                               = VALUE(FLOAT,  "START");
    LSD_TOLDEF                              = VALUE(FLOAT,  "Deformation tolerance for the activation of adaptive EFG Semi-Lagrangian and Eulerian kernel");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    LSD_XI                                  = ARRAY[LSD_NIP](FLOAT,  "First isoparametric coordinate");
    LSD_ZETA                                = ARRAY[LSD_NIP](FLOAT,  "Third isoparametric coordinate");
    aleOption                               = VALUE(INT,  "Options");
    LSD_ELFORM2                             = VALUE(INT,  "Generalized user-defined solid element formulation");
    LSD_ELFORMOPT                           = VALUE(INT,  "GE1000");

    LSD_DX_SPG                              = VALUE(FLOAT,  "");
    LSD_DY_SPG                              = VALUE(FLOAT,  "");
    LSD_DZ_SPG                              = VALUE(FLOAT,  "");
    LSD_KERNEL                              = VALUE(INT,  "Type of kernel approximation");
    LSD_LSCALE                              = VALUE(FLOAT,  "Length scale for displacement regularization");
    LSD_SMSTEP                              = VALUE(INT,  "Interval of time steps to conduct displacement regularization");
    LSD_SWTIME                              = VALUE(FLOAT,  "Time to switch from updated Lagrangian kernel to Eulerian kernel");
    //opt SPG
    LSD_OPT_CARD_SPG                        = VALUE(INT,  "OptionalSPGCard");
    LSD_IDAM                                = VALUE(INT,  "Option of damage mechanism");
    LSD_FS                                  = VALUE(FLOAT,  "Failure effective plastic strain");
    LSD_STRETCH                             = VALUE(FLOAT,  "Stretching parameter");
    LSD_ITB                                 = VALUE(INT,  "Flag for using stabilization");
    // HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    IO_FLAG                                 = VALUE(INT,  "");
    _opt                                    = VALUE(STRING, "");
    TITLE                                   = VALUE(STRING, "");
    _HAS_HEADER                             = VALUE(BOOL,"");

}

SKEYWORDS_IDENTIFIER(COMMON)
{
    LSD_AAFAC                               = 451;
    LSD_AET                                 = 1650;
    LSD_AFAC                                = 445;
    LSD_BFAC                                = 446;
    LSD_CFAC                                = 447;
    LSD_CMID                                = 564;
    LSD_DFAC                                = 448;
    LSD_DS                                  = 566;
    LSD_DX                                  = 4678;
    LSD_DY                                  = 4679;
    LSD_DZ                                  = 4680;
    LSD_ECUT                                = 567;
    LSD_ELFORM                              = 399;
    LSD_ELFORM2                             = 8246;
    LSD_ELFORMOPT                           = 8247;
    LSD_END                                 = 450;
    LSD_ETA                                 = 6283;
    LSD_IBR                                 = 565;
    LSD_IDILA                               = 558;
    LSD_IEBT                                = 559;
    LSD_IHGF                                = 6277;
    LSD_IKEN                                = 562;
    LSD_IPS                                 = 561;
    LSD_ISPLINE                             = 557;
    LSD_ITAJ                                = 6278;
    LSD_LMC                                 = 6279;
    LSD_NHSV                                = 6280;
    LSD_NIP                                 = 427;
    LSD_NXDOF                               = 6275;
    LSD_OPT_CARD3                           = 6083;
    LSD_SEC_IDIM                            = 568;
    LSD_SEC_P                               = 6285;
    LSD_SEC_STIME                           = 569;
    LSD_SEC_WGT                             = 6284;
    LSD_SF                                  = 714;
    LSD_START                               = 449;
    LSD_TOLDEF                              = 560;
    LSD_TitleOpt                            = 90;
    LSD_XI                                  = 6282;
    LSD_ZETA                                = 599;
    aleOption                               = 4540;

    LSD_DX_SPG                              = 11313;
    LSD_DY_SPG                              = 11314;
    LSD_DZ_SPG                              = 11315;
    LSD_KERNEL                              = 11316;
    LSD_LSCALE                              = 11317;
    LSD_SMSTEP                              = 11318;
    LSD_SWTIME                              = 11319;
    
    LSD_OPT_CARD_SPG                        = 11320;
    LSD_IDAM                                = 6084;
    LSD_FS                                  = 3009;
    LSD_STRETCH                             = 7994;
    LSD_ITB                                 = 11321;

    KEYWORD_STR                             = 9000;
    IO_FLAG                                 = -1;
    _opt                                    = -1;
    TITLE                                   = -1;
    _HAS_HEADER                             = -1;
}

CHECK(COMMON)
{
    LSD_ELFORM2                             >= 1000;
}

DEFAULTS(COMMON)
{

    LSD_AET                 = 4;
    LSD_DS                  = 1.01;
    LSD_DX                  = 1.01;
    LSD_DY                  = 1.01;
    LSD_DZ                  = 1.01;
    LSD_ECUT                = 0.1;
    LSD_ELFORM              = 1;
    LSD_IEBT                = 1;
    LSD_IPS                 = 0;
    LSD_ISPLINE             = 0;
    LSD_SEC_IDIM            = 1;
    LSD_SEC_STIME           = 1.0e20;
    LSD_SF                  = 0.0;
    LSD_TOLDEF              = 0.01;
    LSD_DX_SPG              = 1.5;
    LSD_DY_SPG              = 1.5;
    LSD_DZ_SPG              = 1.5;
    LSD_KERNEL              = 3;
    LSD_SMSTEP              = 15;

    _HAS_HEADER             = TRUE;
}

GUI(COMMON)
{

    ASSIGN(KEYWORD_STR, "*SECTION_SOLID");
    RADIO(aleOption)
    {
       ADD(1, "NONE");
       ADD(3, "EFG");
       ADD(4, "SPG");
    }
    
    if(aleOption == 4)
    {
        ASSIGN(KEYWORD_STR, "_SPG");
    }
    if(aleOption == 3)
    {
        ASSIGN(KEYWORD_STR, "_EFG");
    }
    
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    }

    FLAG(LSD_ELFORMOPT);
    if(LSD_ELFORMOPT == FALSE)
    {
        RADIO(LSD_ELFORM)
        {
            ADD(-2,  "-2: Fully integrated S/R solid intended for elements with poor aspect ratio, accurate formulation");
            ADD(-1,  "-1: Fully integrated S/R solid intended for elements with poor aspect ratio, efficient formulation");
            ADD(0,   " 0: 1 point corotational for *MAT_MODIFIED_HONEYCOMB");
            ADD(1,   " 1: Constant stress solid element: default element type");
            ADD(2,   " 2: Fully integrated S/R solid");
            ADD(3,   " 3: Fully integrated quadratic 8 node element with nodal rotations");
            ADD(4,   " 4: S/R quadratic tetrahedron element with nodal rotations");
            ADD(5,   " 5: 1 point ALE");
            ADD(6,   " 6: 1 point Eulerian");
            ADD(7,   " 7: 1 point Eulerian ambient");
            ADD(8,   " 8: Acoustic");
            ADD(9,   " 9: 1 point corotational for *MAT_MODIFIED_HONEYCOMB");
            ADD(10,  " 10: 1 point tetrahedron");
            ADD(11,  " 11: 1 point ALE multi-material element");
            ADD(12,  " 12: 1 point integration with single material and void");
            ADD(13,  " 13: 1 point nodal pressure tetrahedron");
            ADD(14,  " 14: 8 point acoustic");
            ADD(15,  " 15: 2 point pentahedron element");
            ADD(16,  " 16: 4 or 5 point 10-noded tetrahedron");
            ADD(17,  " 17: 10-noded composite tetrahedron");
            ADD(18,  " 18: 8 point enhanced strain solid element for linear statics only");
            ADD(19,  " 19: 8-noded, 4 point cohesive element");
            ADD(20,  " 20: 8-noded, 4 point cohesive element with offsets for use with shells");
            ADD(21,  " 21: 6-noded, 1 point pentahedron cohesive element");
            ADD(22,  " 22: 6-noded, 1 point pentahedron cohesive element with offsets for use with shells");
            ADD(23,  " 23: 20-node solid formulation");
            ADD(41,  " 41: Mesh-free (EFG) solid formulation");
            ADD(42,  " 42: Adaptive 4-noded mesh-free (EFG) solid formulation");
            ADD(43,  " 43: Mesh-free enriched finite element");
            ADD(45,  " 45: Tied Mesh-free enriched finite element");
            ADD(47,  " 47: Smoothed particle Galerkin method");
            ADD(98,  " 98: Interpolation solid");
            ADD(99,  " 99: Simplified linear element for time-domain vibration studies");
            ADD(101, " 101: User defined solid");
            ADD(102, " 102: User defined solid");
            ADD(103, " 103: User defined solid");
            ADD(104, " 104: User defined solid");
            ADD(105, " 105: User defined solid");
            ADD(115, " 115: 1 point pentahedron element with hourglass control");
        }
    }
    if(LSD_ELFORMOPT == TRUE)
    {
        SCALAR(LSD_ELFORM2);
    }
    if(LSD_ELFORMOPT == FALSE && (LSD_ELFORM == 7 || LSD_ELFORM == 12 || LSD_ELFORM == 11))
    {
        RADIO(LSD_AET)
        {
            ADD(0, "0: Non-ambient");
            ADD(1, "1: Temperature");
            ADD(2, "2: Pressure and temperature");
            ADD(3, "3: Pressure outflow");
            ADD(4, "4: Pressure inflow/outflow");
            
        }
    }
    if(aleOption ==  3)
    {
        SCALAR(LSD_DX)                                      {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_DY)                                      {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_DZ)                                      {DIMENSION="DIMENSIONLESS";}
        RADIO(LSD_ISPLINE)
        {
            ADD(0, "0: Cubic spline function (default)");
            ADD(1, "1: Quadratic spline function");
            ADD(2, "2: Cubic spline function with circular shape");
        }
        RADIO(LSD_IDILA)
        {
            ADD(0, "0: Maximum distance based on the background elements");
            ADD(1, "1: Maximum distance based on surrounding nodes");
        }
        RADIO(LSD_IEBT)
        {
            ADD(-4, "-4: Fast transformation method (w/o transformation)");
            ADD(-1, "-1: Full transformation method (w/o transformation)");
            ADD(1,  " 1: Full transformation method");
            ADD(2,  " 2: Mixed transformation method");
            ADD(3,  " 3: Coupled FEM/EFG method");
            ADD(4,  " 4: Fast transformation method");
            ADD(5,  " 5: Fluid particle method for E.O.S and *MAT_ELASTIC_-FLUID materials");
            ADD(7,  " 7: Maximum entropy approximation");
        }
        RADIO(LSD_SEC_IDIM)
        {
            ADD(-1, "-1: Stabilized EFG integration method (for 6 and 8 noded cell)");
            ADD(1,  " 1: Local boundary integration");
            ADD(2,  " 2: Two-point Gauss integration");
            ADD(3,  " 3: Improved Gauss integration for IEBT = 4 or -4");
        }
        SCALAR(LSD_TOLDEF);
        FLAG(LSD_OPT_CARD3);
    }
    if(aleOption ==  3 && LSD_OPT_CARD3 == TRUE)
    {
        RADIO(LSD_IPS)
        {
            ADD(0, "0: No pressure smoothing");
            ADD(1, "1: Moving-least squared pressure recovery");
        }
        SCALAR(LSD_SEC_STIME)                               {DIMENSION="t";}
        RADIO(LSD_IKEN)
        {
            ADD(0, "0: Moving-least-square approximation");
            ADD(1, "1: Maximum Entropy approximation");
        }
        SCALAR(LSD_SF);
        DATA(LSD_CMID)                          {SUBTYPES=(/MAT/MAT_COHESIVE_TH);}
        RADIO(LSD_IBR)
        {
            ADD(0, "1: No branching allowed");
            ADD(1, "2: Branching is allowed");
        }
        SCALAR(LSD_DS);
        SCALAR(LSD_ECUT)                                     {DIMENSION="l";}
    }

    if(aleOption ==  4)
    {
        SCALAR(LSD_DX_SPG)                                      {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_DY_SPG)                                      {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_DZ_SPG)                                      {DIMENSION="DIMENSIONLESS";}
        RADIO(LSD_ISPLINE)
        {
            ADD(0, "0: Cubic spline function (default)");
            ADD(1, "1: Quadratic spline function");
            ADD(2, "2: Cubic spline function with circular shape");
        }
        RADIO(LSD_KERNEL)
        {
            ADD(0, "0: updated Lagrangian kernel");
            ADD(1, "1: Eulerian kernel");
            ADD(2, "2: Semi-pseudo Lagrangian kernel");
            ADD(3, "3: Pseudo-Lagrangian kernel");
        }
        SCALAR(LSD_LSCALE)                                      {DIMENSION="l";}
        SCALAR(LSD_SMSTEP)                                      {DIMENSION="t";}
        SCALAR(LSD_SWTIME)                                      {DIMENSION="t";}
        FLAG(LSD_OPT_CARD_SPG);
    }

    if(aleOption ==  4 && LSD_OPT_CARD_SPG == TRUE)
    {
        RADIO(LSD_IDAM)
        {
            ADD(0, "0: Continuum damage mechanics");
            ADD(1, "1: Phenomenological strain damage");
            ADD(2, "2: Maximum principal strain damage");
        }
        SCALAR(LSD_FS)                                          {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_STRETCH)                                     {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_ITB)                                         {DIMENSION="DIMENSIONLESS";}
    }


    if(LSD_ELFORMOPT == FALSE && (LSD_ELFORM >= 101 && LSD_ELFORM <= 105))
    {
        SIZE(LSD_NIP);        
    }
    if( LSD_ELFORMOPT == FALSE && (LSD_ELFORM >= 101 && LSD_ELFORM <= 105) && LSD_NIP < 0)
    {
        ARRAY(LSD_NIP,"")
        {
           SCALAR(LSD_XI);
           SCALAR(LSD_ETA);
           SCALAR(LSD_ZETA);
           SCALAR(LSD_SEC_WGT);
        }
    }
    if(LSD_ELFORMOPT == FALSE && (LSD_ELFORM >= 101 && LSD_ELFORM <= 105))
    {
        SCALAR(LSD_NXDOF);
        RADIO(LSD_IHGF)
        {
            ADD(0, "0: Hourglass stabilization is not used");
            ADD(1, "1: LS-DYNA hourglass stabilization is used");
            ADD(2, "2: User-defined hourglass stabilization is used");
            ADD(3, "3: Same as 2, but the resultant material tangent modulus is passed");
        }
        RADIO(LSD_ITAJ)
        {
            ADD(0, "0: Set up matrices wrt isoparametric domain");
            ADD(1, "1: Set up matrices wrt physical domain");
        }
        SIZE(LSD_LMC);
    }
    if( LSD_ELFORMOPT == FALSE && (LSD_ELFORM >= 101 && LSD_ELFORM <= 105) && LSD_LMC < 0)
    {
        ARRAY(LSD_LMC,"Property Parameters")
        {
           SCALAR(LSD_SEC_P);
        }
    }    
    if(LSD_ELFORMOPT == FALSE && (LSD_ELFORM >= 101 && LSD_ELFORM <= 105))
    {
        SCALAR(LSD_NHSV);
    }
}

// File format
FORMAT(Keyword971_R10.1)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if (IO_FLAG==1)
    {
        HEADER("*SECTION_SOLID%20s",_opt);
        if (_opt == "_SPG" || _opt == "_SPG_TITLE")
        {
            ASSIGN(aleOption,4,IMPORT);
        }
        else if(_opt == "_EFG" || _opt == "_EFG_TITLE")
        {
            ASSIGN(aleOption,3,IMPORT);
        }
        else if(_opt == "_ALE" || _opt == "_ALE_TITLE")
        {
            // _ALE is not supported for version >= 6.1
            // This is for back-compatibility only
            ASSIGN(aleOption,2,IMPORT);
        }
        else
        {
            ASSIGN(aleOption,1,IMPORT);
        }
        
        ASSIGN(LSD_TitleOpt,_FIND(_opt,"_TITLE"),IMPORT);
    }
    else
    {
        if (aleOption == 4)
        {
            ASSIGN(_opt,_SPG,EXPORT); 
        }
        if(aleOption ==  3)
        {
            ASSIGN(_opt,_EFG,EXPORT); 
        }
        else if(aleOption == 2)
        {
            ASSIGN(_opt,_ALE,EXPORT);
        }

        if(aleOption == 1 && LSD_TitleOpt == 0)
        {
            HEADER("*SECTION_SOLID");
        }
        if(aleOption == 1 && LSD_TitleOpt == 1)
        {
            HEADER("*SECTION_SOLID_TITLE");
        }
        if(aleOption == 3 && LSD_TitleOpt == 0)
        {
            HEADER("*SECTION_SOLID_EFG");
        }
        if(aleOption == 3 && LSD_TitleOpt == 1)
        {
            HEADER("*SECTION_SOLID_EFG_TITLE");
        }
        if(aleOption == 4 && LSD_TitleOpt == 0)
        {
            HEADER("*SECTION_SOLID_SPG");
        }
        if(aleOption == 4 && LSD_TitleOpt == 1)
        {
            HEADER("*SECTION_SOLID_SPG_TITLE");
        }
        if(aleOption == 2)
        {
            COMMENT("$SECTION_SOLID_ALE is not supported for Ls-dyna versions >= 6.1");
        }

        if(LSD_TitleOpt == 1 && aleOption != 2)
        {
            CARD("%-80s",TITLE);
        }
    }

    if(IO_FLAG == 1 || (IO_FLAG == 0 && aleOption != 2))
    {
        if (LSD_ELFORMOPT == 1)
        {
            ASSIGN(LSD_ELFORM, _ATTRIB(LSD_ELFORM2), EXPORT);
        }

        COMMENT("$    SECID    ELFORM       AET");
        CARD("%10d%10d%10d",_ID_,LSD_ELFORM,LSD_AET);

        if(LSD_ELFORM >= 1000)
        {
            ASSIGN(LSD_ELFORMOPT, 1,IMPORT);
            ASSIGN(LSD_ELFORM2, _ATTRIB(LSD_ELFORM), IMPORT);
        }

        if(aleOption ==  3)
        {
            COMMENT("$       DX        DY        DZ   ISPLINE     IDILA      IEBT      IDIM    TOLDEF");
            CARD("%10lg%10lg%10lg%10d%10d%10d%10d%10lg",LSD_DX,LSD_DY,LSD_DZ,LSD_ISPLINE,LSD_IDILA,LSD_IEBT,LSD_SEC_IDIM,LSD_TOLDEF);
        }

        if(aleOption ==  3 && LSD_OPT_CARD3 == 1 && IO_FLAG == 0)
        {
            COMMENT("$      IPS     STIME      IKEN        SF      CMID       IBR        DS      ECUT");
        }

        if(aleOption ==  3)
        {
            FREE_CARD(LSD_OPT_CARD3,"%10d%10lg%10d%10lg%10d%10d%10lg%10lg",LSD_IPS,LSD_SEC_STIME,LSD_IKEN,LSD_SF,LSD_CMID,LSD_IBR,LSD_DS,LSD_ECUT);
        }
        

        if(aleOption ==  4)
        {
            COMMENT("$       DX        DY        DZ   ISPLINE    KERNEL    LSCALE    SMSTEP    SWTIME");
            CARD("%10lg%10lg%10lg%10d%10d%10lg%10d%10lg",LSD_DX_SPG,LSD_DY_SPG,LSD_DZ_SPG,LSD_ISPLINE,LSD_KERNEL,LSD_LSCALE,LSD_SMSTEP,LSD_SWTIME);
        }

        if(aleOption ==  4 && LSD_OPT_CARD_SPG == 1 && IO_FLAG == 0)
        {
            COMMENT("$     IDAM        FS   STRETCH       ITB");
        }
        if(aleOption ==  4)
        {
            FREE_CARD(LSD_OPT_CARD_SPG,"%10d%10lg%10lg%10d",LSD_IDAM,LSD_FS,LSD_STRETCH,LSD_ITB);
        }

        if(LSD_ELFORMOPT == FALSE && (LSD_ELFORM >= 101 && LSD_ELFORM <= 105))
        {
            COMMENT("$      NIP     NXDOF      IHGF      ITAJ       LMC      NHSV");
            CARD("%10d%10d%10d%10d%10d%10d",LSD_NIP,LSD_NXDOF,LSD_IHGF,LSD_ITAJ,LSD_LMC,LSD_NHSV);
        }

        if( LSD_ELFORMOPT == FALSE && (LSD_ELFORM >= 101 && LSD_ELFORM <= 105) && LSD_NIP > 0)
        {
            CARD_LIST(LSD_NIP)
            {
                COMMENT("$       XI       ETA      ZETA       WGT");
                CARD("%10lg%10lg%10lg%10lg",LSD_XI,LSD_ETA,LSD_ZETA,LSD_SEC_WGT);
            }
        }
        
        if( LSD_ELFORMOPT == FALSE && (LSD_ELFORM >= 101 && LSD_ELFORM <= 105) && LSD_LMC > 0)
        {
            COMMENT("$       P1        P2        P3        P4        P5        P6        P7        P8") ;
            CELL_LIST(LSD_LMC,"%10lg",LSD_SEC_P,80) ;
        }
    }
}

FORMAT(Keyword971_R8.0) 
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if (IO_FLAG==1)
    {
        HEADER("*SECTION_SOLID%s",_opt);
        
        if (_opt == "_SPG" || _opt == "_SPG_TITLE")
        {
            ASSIGN(aleOption,4,IMPORT);
        }
        else if(_opt == "_EFG" || _opt == "_EFG_TITLE")
        {
            ASSIGN(aleOption,3,IMPORT);
        }
        else if(_opt == "_ALE" || _opt == "_ALE_TITLE")
        {
            // _ALE is not supported for version >= 6.1
            // This is for back-compatibility only
            ASSIGN(aleOption,2,IMPORT);
        }
        else
        {
            ASSIGN(aleOption,1,IMPORT);
        }

        ASSIGN(LSD_TitleOpt,_FIND(_opt,"TITLE"),IMPORT);
    }
    else
    {
        if (aleOption == 4)
        {
            ASSIGN(_opt,_SPG,EXPORT); 
        }
        else if(aleOption ==  3)
        {
            ASSIGN(_opt,_EFG,EXPORT); 
        }
        else if(aleOption == 2)
        {
            ASSIGN(_opt,_ALE,EXPORT);
        }

        if(aleOption == 1 && LSD_TitleOpt == 0)
        {
            HEADER("*SECTION_SOLID");
        }
        if(aleOption == 1 && LSD_TitleOpt == 1)
        {
            HEADER("*SECTION_SOLID_TITLE");
        }
        if(aleOption == 3 && LSD_TitleOpt == 0)
        {
            HEADER("*SECTION_SOLID_EFG");
        }
        if(aleOption == 3 && LSD_TitleOpt == 1)
        {
            HEADER("*SECTION_SOLID_EFG_TITLE");
        }
        if(aleOption == 4 && LSD_TitleOpt == 0)
        {
            HEADER("*SECTION_SOLID_SPG");
        }
        if(aleOption == 4 && LSD_TitleOpt == 1)
        {
            HEADER("*SECTION_SOLID_SPG_TITLE");
        }
        if(aleOption == 2)
        {
            COMMENT("$SECTION_SOLID_ALE is not supported for Ls-dyna versions >= 6.1");
        }

        if(LSD_TitleOpt == 1 && aleOption != 2) 
        {
            CARD("%-80s",TITLE);
        }
    }

    if(IO_FLAG == 1 || (IO_FLAG == 0 && aleOption != 2))
    {
        if (LSD_ELFORMOPT == 1)
        {
            ASSIGN(LSD_ELFORM, _ATTRIB(LSD_ELFORM2), EXPORT);
        }

        COMMENT("$    SECID    ELFORM       AET");
        CARD("%10d%10d%10d",_ID_,LSD_ELFORM,LSD_AET);


        if(LSD_ELFORM >= 1000)
        {
            ASSIGN(LSD_ELFORMOPT, 1,IMPORT);
            ASSIGN(LSD_ELFORM2, _ATTRIB(LSD_ELFORM), IMPORT);
        }

        if(aleOption ==  3)
        {
            COMMENT("$       DX        DY        DZ   ISPLINE     IDILA      IEBT      IDIM    TOLDEF");
            CARD("%10lg%10lg%10lg%10d%10d%10d%10d%10lg",LSD_DX,LSD_DY,LSD_DZ,LSD_ISPLINE,LSD_IDILA,LSD_IEBT,LSD_SEC_IDIM,LSD_TOLDEF);
        }

        if(aleOption ==  3 && LSD_OPT_CARD3 == 1 && IO_FLAG == 0)
        {
            COMMENT("$      IPS     STIME      IKEN        SF      CMID       IBR        DS      ECUT");
        }

        if(aleOption ==  3)
        {
            FREE_CARD(LSD_OPT_CARD3,"%10d%10lg%10d%10lg%10d%10d%10lg%10lg",LSD_IPS,LSD_SEC_STIME,LSD_IKEN,LSD_SF,LSD_CMID,LSD_IBR,LSD_DS,LSD_ECUT);
        }
        

        if(aleOption ==  4)
        {
            COMMENT("$       DX        DY        DZ   ISPLINE    KERNEL    LSCALE    SMSTEP    SWTIME");
            CARD("%10lg%10lg%10lg%10d%10d%10lg%10d%10lg",LSD_DX_SPG,LSD_DY_SPG,LSD_DZ_SPG,LSD_ISPLINE,LSD_KERNEL,LSD_LSCALE,LSD_SMSTEP,LSD_SWTIME);
        }

        if(aleOption ==  4 && LSD_OPT_CARD_SPG == 1 && IO_FLAG == 0)
        {
            COMMENT("$     IDAM        FS   STRETCH");
        }
        if(aleOption ==  4)
        {
            FREE_CARD(LSD_OPT_CARD_SPG,"%10d%10lg%10lg",LSD_IDAM,LSD_FS,LSD_STRETCH);
        }

        if(LSD_ELFORMOPT == FALSE && (LSD_ELFORM >= 101 && LSD_ELFORM <= 105))
        {
            COMMENT("$      NIP     NXDOF      IHGT      ITAJ       LMC      NHSV");
            CARD("%10d%10d%10d%10d%10d%10d",LSD_NIP,LSD_NXDOF,LSD_IHGF,LSD_ITAJ,LSD_LMC,LSD_NHSV);
        }

        if( LSD_ELFORMOPT == FALSE && (LSD_ELFORM >= 101 && LSD_ELFORM <= 105) && LSD_NIP > 0)
        {
            CARD_LIST(LSD_NIP)
            {
                COMMENT("$       XI       ETA      ZETA       WGT");
                CARD("%10lg%10lg%10lg%10lg",LSD_XI,LSD_ETA,LSD_ZETA,LSD_SEC_WGT);
            }
        }
        
        if( LSD_ELFORMOPT == FALSE && (LSD_ELFORM >= 101 && LSD_ELFORM <= 105) && LSD_LMC > 0)
        {
            COMMENT("$       P1        P2        P3        P4        P5        P6        P7        P8");
            CELL_LIST(LSD_LMC,"%10lg",LSD_SEC_P,80) ;
        }
    }
}

FORMAT(Keyword971)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if (IO_FLAG==1)
    {
        HEADER("*SECTION_SOLID%20s",_opt);
        if(_opt == "_EFG" || _opt == "_EFG_TITLE")
        {
            ASSIGN(aleOption,3,IMPORT);
        }
        else if(_opt == "_ALE" || _opt == "_ALE_TITLE")
        {
            // _ALE is not supported for version >= 6.1
            // This is for back-compatibility only
            ASSIGN(aleOption,2,IMPORT);
        }
        else
        {
            ASSIGN(aleOption,1,IMPORT);
        }
        
        ASSIGN(LSD_TitleOpt,_FIND(_opt,"TITLE"),IMPORT);
    }
    else
    {
        if(aleOption ==  3)
        {
            ASSIGN(_opt,_EFG,EXPORT); 
        }
        else if(aleOption == 2)
        {
            ASSIGN(_opt,_ALE,EXPORT);
        }

        if(aleOption == 1 && LSD_TitleOpt == 0)
        {
            HEADER("*SECTION_SOLID");
        }
        if(aleOption == 1 && LSD_TitleOpt == 1)
        {
            HEADER("*SECTION_SOLID_TITLE");
        }
        if(aleOption == 3 && LSD_TitleOpt == 0)
        {
            HEADER("*SECTION_SOLID_EFG");
        }
        if(aleOption == 3 && LSD_TitleOpt == 1)
        {
            HEADER("*SECTION_SOLID_EFG_TITLE");
        }
        if(aleOption == 2 )
        {
            COMMENT("$SECTION_SOLID_ALE is not supported for Ls-dyna versions >= 6.1");
        }

        if(LSD_TitleOpt == 1 && aleOption != 2)
        {
            CARD("%-80s",TITLE);
        }
    }
    if(IO_FLAG == 1 || (IO_FLAG == 0 && aleOption != 2))
    {
        if (LSD_ELFORMOPT == 1)
        {
            ASSIGN(LSD_ELFORM, _ATTRIB(LSD_ELFORM2), EXPORT);
        }

        COMMENT("$    SECID    ELFORM       AET");
        CARD("%10d%10d%10d",_ID_,LSD_ELFORM,LSD_AET);

        if(LSD_ELFORM >= 1000)
        {
            ASSIGN(LSD_ELFORMOPT, 1,IMPORT);
            ASSIGN(LSD_ELFORM2, _ATTRIB(LSD_ELFORM), IMPORT);
        }

        if(aleOption ==  3)
        {
            COMMENT("$       DX        DY        DZ   ISPLINE     IDILA      IEBT      IDIM    TOLDEF");
            CARD("%10lg%10lg%10lg%10d%10d%10d%10d%10lg",LSD_DX,LSD_DY,LSD_DZ,LSD_ISPLINE,LSD_IDILA,LSD_IEBT,LSD_SEC_IDIM,LSD_TOLDEF);
        }

        if(aleOption ==  3 && LSD_OPT_CARD3 == 1 && IO_FLAG == 0)
        {
            COMMENT("$      IPS     STIME      IKEN        SF      CMID       IBR        DS      ECUT");
        }

        if(aleOption ==  3)
        {
            FREE_CARD(LSD_OPT_CARD3,"%10d%10lg%10d%10lg%10d%10d%10lg%10lg",LSD_IPS,LSD_SEC_STIME,LSD_IKEN,LSD_SF,LSD_CMID,LSD_IBR,LSD_DS,LSD_ECUT);
        }
        
        if(LSD_ELFORMOPT == FALSE && (LSD_ELFORM >= 101 && LSD_ELFORM <= 105))
        {
            COMMENT("$      NIP     NXDOF      IHGF      ITAJ       LMC      NHSV");
            CARD("%10d%10d%10d%10d%10d%10d",LSD_NIP,LSD_NXDOF,LSD_IHGF,LSD_ITAJ,LSD_LMC,LSD_NHSV);
        }

        if( LSD_ELFORMOPT == FALSE && (LSD_ELFORM >= 101 && LSD_ELFORM <= 105) && LSD_NIP > 0)
        {
            CARD_LIST(LSD_NIP)
            {
                COMMENT("$       XI       ETA      ZETA       WGT");
                CARD("%10lg%10lg%10lg%10lg",LSD_XI,LSD_ETA,LSD_ZETA,LSD_SEC_WGT);
            }
        }
        
        if( LSD_ELFORMOPT == FALSE && (LSD_ELFORM >= 101 && LSD_ELFORM <= 105) && LSD_LMC > 0)
        {
            COMMENT("$       P1        P2        P3        P4        P5        P6        P7        P8");
            CELL_LIST(LSD_LMC,"%10lg",LSD_SEC_P,80) ;
        }
    }
}
