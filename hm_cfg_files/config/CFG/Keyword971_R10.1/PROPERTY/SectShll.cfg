//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// SECTION_SHELL
//

ATTRIBUTES(COMMON)
{
   //INPUT ATTRIBUTES
   //CARD 1
   LSD_ELFORM                              = VALUE(INT,  "Element formulation options");
   LSD_ELFORM2                             = VALUE(INT,  "Element formulation");
   LSD_SHRF                                = VALUE(FLOAT,  "Shear correction factor which scales the transverse shear stress");
   LSD_NIP                                 = SIZE("Number of through thickness integration points");
   LSD_PROPT                               = VALUE(FLOAT,  "Printout option");
   LSD_QR                                  = VALUE(FLOAT,  "Quadrature rule");
   LSD_IRID                                = VALUE(INTEGRATIONRULE,  "Integration rule ID");
   LSD_ICOMP                               = VALUE(INT,  "Flag for orthotropic/anisotropic layered composite material model");
   LSD_SETYP                               = VALUE(INT,  "SETYP");
   //CARD 2
   LSD_T1                                  = VALUE(FLOAT,  "Shell thickness at node n1");
   LSD_T2                                  = VALUE(FLOAT,  "Shell thickness at node n2");
   LSD_T3                                  = VALUE(FLOAT,  "Shell thickness at node n3");
   LSD_T4                                  = VALUE(FLOAT,  "Shell thickness at node n4");
   LSD_NLOC                                = VALUE(FLOAT,  "Location of reference surface (shell mid-thickness) for three dimensional shell elements");
   SectShell_MAREA                         = VALUE(FLOAT,  "Non-structural mass per unit area");
   LSD_IDOF                                = VALUE(FLOAT,  "Treatment of through thickness strain");
   LSD_IDOF2                               = VALUE(FLOAT,  "Treatment of through thickness strain");
   LSD_NSID                                = VALUE(SETS,  "Edge node set required for shell type seatbelts")     { SUBTYPES = (/SETS/SET_NODE_IDPOOL); }   
   //CARD 3
   LSD_B                                   = ARRAY[LSD_NIP](FLOAT,  "Material angle at specific integration point");
   //EFG CARD
   LSD_DX                                  = VALUE(FLOAT,  "Normalized dilation parameters of the kernel function in X direction");
   LSD_DY                                  = VALUE(FLOAT,  "Normalized dilation parameters of the kernel function in Y direction");
   LSD_ISPLINE                             = VALUE(INT,  "Replace the choice for the EFG kernel functions definition in *CONTROL_EFG");
   LSD_IDILA                               = VALUE(INT,  "Replace the choice for the normalized dilation parameter definition in *CONTROL_EFG");
   LSD_IEBT                                = VALUE(INT,  "Essential boundary condition treatment");
   LSD_SEC_IDIM                            = VALUE(INT,  "For mesh-free shell local approach");
   //Thermal Card
   LSD_ITHELFM                             = VALUE(INT,  "Thermal shell formulation");
   //XFEM Card
   LSD_SEC_CMID                            = VALUE(MATERIAL,  "Cohesive material ID");
   LSD_BASELM                              = VALUE(INT,  "Base element type for XFEM");
   LSD_DOMINT                              = VALUE(INT,  "Option for domain integration in XFEM");
   LSD_FAILCR                              = VALUE(INT,  "Option for different failure criteria");
   LSD_PROPCR                              = VALUE(INT,  "PROPCR");
   LSD_FS                                  = VALUE(FLOAT,  "Initial failure plastic strain or Failure strain/failure critical value");
   LSD_LS                                  = VALUE(INT,  "FS1 is the final failure plastic strain or LS is the length scale for strain regularization");
   LSD_FS1_S                               = VALUE(FLOAT,  "FS1 is the final failure plastic strain or LS is the length scale for strain regularization");
   LSD_NCI                                 = VALUE(INT,  "CL is the crack length at which the failure strain is FS1 or NC is the number of cracks allowed in the part");
   LSD_CL                                  = VALUE(FLOAT,  "CL is the crack length at which the failure strain is FS1 or NC is the number of cracks allowed in the part");
   LSD_LPRINT                              = VALUE(INT, "Debug printout option");
   //User Defined Element Card
   LSD_NIPP                                = SIZE("Number of in-plane integration points for user-defined shell");
   LSD_NXDOF                               = VALUE(INT,  "Number of extra degrees of freedom per node for user-defined shell");
   LSD_IUNF                                = VALUE(INT,  "Flag for using nodal fiber vectors in user-defined shell");
   LSD_IHGF                                = VALUE(INT,  "Flag for using hourglass stabilization");
   LSD_ITAJ                                = VALUE(INT,  "Flag for setting up finite element matrices");
   LSD_LMC                                 = SIZE("Number of property parameters");
   LSD_NHSV                                = VALUE(INT,  "Number of history variables");
   LSD_ILOC                                = VALUE(INT,  "Coordinate system option");
   //User Defined Element Integration Point Cards
   LSD_XI                                  = ARRAY[LSD_NIPP](FLOAT,  "First isoparametric coordinate");
   LSD_ETA                                 = ARRAY[LSD_NIPP](FLOAT,  "Second isoparametric coordinate");
   LSD_SEC_WGT                             = ARRAY[LSD_NIPP](FLOAT,  "Isoparametric weight");
   LSD_SEC_P                               = ARRAY[LSD_LMC](FLOAT,  "User defined element property");


   LSD_AAFAC                               = VALUE(FLOAT,  "AAFAC");
   LSD_AFAC                                = VALUE(FLOAT,  "AFAC");
   LSD_BFAC                                = VALUE(FLOAT,  "BFAC");
   LSD_CFAC                                = VALUE(FLOAT,  "CFAC");
   LSD_DFAC                                = VALUE(FLOAT,  "DFAC");
   LSD_EFAC                                = VALUE(FLOAT,  "EFAC");
   LSD_END                                 = VALUE(FLOAT,  "END");
   LSD_FAILCROPT                           = VALUE(INT,  "FAILCR_Opt");
   LSD_START                               = VALUE(FLOAT,  "START");
   //HM INTERNAL
   KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
   LSD_ELFORMOPT                           = VALUE(INT,  "GE1000");
   LSD_TitleOpt                            = VALUE(INT,  "TitleOpt");
   _dummy                                  = VALUE(INT, "");
   NonUniformOpt                           = VALUE(INT,  "NonUniformThickness");
   Option1                                 = VALUE(INT,  "NegativeIDOF");
   Sect_Option                             = VALUE(INT,  "Int_Rule_ID");
   aleOption                               = VALUE(INT,  "Options");
   IOFLAG                                  = VALUE(INT, "");
   _opt                                    = VALUE(STRING, "");
   TITLE                                   = VALUE(STRING,"TITLE");
   _HAS_HEADER                             = VALUE(BOOL,"Has Header Card");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
   //CARD 1
   LSD_ELFORM                              = 399;
   LSD_ELFORM2                             = 8246;
   LSD_SHRF                                = 402;
   LSD_NIP                                 = 427;
   LSD_PROPT                               = 428;
   LSD_QR                                  = 429;
   LSD_IRID                                = 1649;
   LSD_ICOMP                               = 430;
   LSD_SETYP                               = 4428;
   //CARD 2
   LSD_T1                                  = 431;
   LSD_T2                                  = 432;
   LSD_T3                                  = 433;
   LSD_T4                                  = 434;
   LSD_NLOC                                = 435;
   SectShell_MAREA                         = 4190;
   LSD_IDOF                                = 2015;
   LSD_IDOF2                               = 509;
   LSD_NSID                                = 745;
   //CARD 3
   LSD_B                                   = 436;
   //EFG CARD
   LSD_DX                                  = 4678;
   LSD_DY                                  = 4679;
   LSD_ISPLINE                             = 557;
   LSD_IDILA                               = 558;
   LSD_IEBT                                = 559;
   LSD_SEC_IDIM                            = 568;
   //Thermal Card
   LSD_ITHELFM                             = 6269;
   //XFEM Card
   LSD_SEC_CMID                            = 6286;
   LSD_BASELM                              = 6270;
   LSD_DOMINT                              = 6271;
   LSD_FAILCR                              = 6272;
   LSD_PROPCR                              = 6273;
   LSD_LS                                  = 11047;
   LSD_FS                                  = 3009;
   LSD_FS1_S                               = 7750;
   LSD_NCI                                 = 11048;
   LSD_CL                                  = 4667;
   LSD_LPRINT                              = 3154;
   //User Defined Element Card
   LSD_NIPP                                = 6274;
   LSD_NXDOF                               = 6275;
   LSD_IUNF                                = 6276;
   LSD_IHGF                                = 6277;
   LSD_ITAJ                                = 6278;
   LSD_LMC                                 = 6279;
   LSD_NHSV                                = 6280;
   LSD_ILOC                                = 6281;
   //User Defined Element Integration Point Cards
   LSD_XI                                  = 6282;
   LSD_ETA                                 = 6283;
   LSD_SEC_WGT                             = 6284;
   LSD_SEC_P                               = 6285;
   //ALE CARD
   LSD_AFAC                                = 445;
   LSD_BFAC                                = 446;
   LSD_CFAC                                = 447;
   LSD_DFAC                                = 448;
   LSD_EFAC                                = 3225;
   LSD_START                               = 449; 
   LSD_END                                 = 450;
   LSD_AAFAC                               = 451;

   LSD_TitleOpt                            = 90;
   aleOption                               = 4540;
   KEYWORD_STR                             = 9000;
   LSD_ELFORMOPT                           = 8247;
   Sect_Option                             = 458;
   NonUniformOpt                           = 457;
   Option1                                 = 686;
   LSD_FAILCROPT                           = 11045;
   TITLE                                   = -1;
   _dummy                                  = -1;
   _HAS_HEADER                             = -1;
}

CHECK(COMMON)
{
   LSD_ELFORM2                               >= 1000;
   LSD_FAILCR                                < -10;
   LSD_IDOF2                                 < 0.0;
   LSD_LS                                    > 0;
}

DEFAULTS(COMMON)
{
   //CARD 1
   LSD_SHRF                                  = 1.0;
   LSD_NIP                                   = 2;
   LSD_PROPT                                 = 0.0;
   LSD_QR                                    = 0.0;
   LSD_ICOMP                                 = 0;
   LSD_SETYP                                 = 1;
   //CARD 2
   LSD_T1                                    = 0.0;
   LSD_NLOC                                  = 0.0;
   SectShell_MAREA                           = 0.0;
   LSD_IDOF                                  = 0.0;
   //EFG CARD
   LSD_DX                                    = 1.1;
   LSD_DY                                    = 1.1;
   LSD_ISPLINE                               = 0;
   LSD_IDILA                                 = 0;
   //THERMAL CARD
   LSD_ITHELFM                               = 0;
   //XFEM CARD
   LSD_DOMINT                                = 0;
   LSD_FS                                    = 0.0;
   //User Defined Element Card
   LSD_NIPP                                  = 0;
   LSD_NXDOF                                 = 0;
   LSD_IUNF                                  = 0;
   LSD_IHGF                                  = 0;
   LSD_ITAJ                                  = 0;
   LSD_LMC                                   = 0;
   LSD_NHSV                                  = 0;
   LSD_ILOC                                  = 0;

   _HAS_HEADER                               = TRUE;
}

// GUI(COMMON)
// {
//    ASSIGN(KEYWORD_STR, "*SECTION_SHELL");
//    RADIO(aleOption)
//    {
//       ADD(1, "NONE");
//       ADD(2, "ALE");
//       ADD(3, "EFG");
//       ADD(4, "THERMAL");
//       ADD(5, "XFEM");
//    }
//    if(aleOption == 2)
//    {
//       ASSIGN(KEYWORD_STR, "_ALE");
//    }
//    if(aleOption == 3)
//    {
//       ASSIGN(KEYWORD_STR, "_EFG");
//    }
//    if(aleOption == 4)
//    {
//       ASSIGN(KEYWORD_STR, "_THERMAL");
//    }
//    if(aleOption == 5)
//    {
//       ASSIGN(KEYWORD_STR, "_XFEM");
//    }
//    FLAG(LSD_TitleOpt);
//    if(LSD_TitleOpt == TRUE)
//    {
//       ASSIGN(KEYWORD_STR, "_TITLE");
//    }
//    FLAG(LSD_ELFORMOPT);
//    if(LSD_ELFORMOPT == FALSE)
//    {
//       RADIO(LSD_ELFORM)
//       {
//          ADD(0,   "0: Default");
//          ADD(1,   "1: Hughes-Liu");
//          ADD(2,   "2: Belytschko-Tsay");
//          ADD(3,   "3: BCIZ triangular shell");
//          ADD(4,   "4: C0 triangular shell");
//          ADD(5,   "5: Belytschko-Tsay membrane");
//          ADD(6,   "6: S/R Hughes-Liu");
//          ADD(7,   "7: S/R co-rotational Hughes-Liu");
//          ADD(8,   "8: Belytschko-Leviathan shell");
//          ADD(9,   "9: Fully integrated Belytschko-Tsay membrane");
//          ADD(10,  "10: Belytschko-Wong-Chian");
//          ADD(11,  "11: Fast (co-rotational) Hughes-Liu");
//          ADD(12,  "12: Plane stress (x-y plane)");
//          ADD(13,  "13: Plane strain (x-y plane)");
//          ADD(14,  "14: Axisymmetric solid (y-axis of symmetry)");
//          ADD(15,  "15: Axisymmetric solid (y-axis of symmetry)");
//          ADD(16,  "16: Fully integrated shell element (very fast)");
//          ADD(-16, "-16: Fully integrated shell element modified for higher accuracy,");
//          ADD(17,  "17: Fully integrated DKT, triangular shell element");
//          ADD(18,  "18: Fully integrated linear DK quad./triang. shell");
//          ADD(20,  "20: Fully integrated linear assumed strain C0 shell");
//          ADD(21,  "21: Fully integrated linear assumed strain C0 shell");
//          ADD(22,  "22: Linear shear panel element");
//          ADD(23,  "23: 8-node quadratic quadrilateral shell");
//          ADD(24,  "24: 6-node quadratic triangular shell");
//          ADD(25,  "25: Belytschko-Tsay shell with thickness stretch");
//          ADD(26,  "26: Fully integrated shell with thickness stretch");
//          ADD(27,  "27: C0 triangular shell with thickness stretch");
//          ADD(29,  "29: Cohesive shell element for edge-to-edge shell connection");
//          ADD(41,  "41: Mesh-free shell local approach");
//          ADD(42,  "42: Mesh-free shell global approach");
//          ADD(43,  "43: Mesh-free plane strain formulation");
//          ADD(44,  "44: Mesh-free axisymmetric solid formulation (y-axis of symm.)");
//          ADD(46,  "46: Cohesive element for two-dimensional plane strain, plane stress, and area-weighted axisymmetric problems (type 14 shells)");
//          ADD(47,  "47: Cohesive element for two-dimensional volumeweighted axisymmetric problems (type 15 shells)");
//          ADD(52,  "52: Plane strain (x-y plane) XFEM, base element type 13");
//          ADD(54,  "54: Shell XFEM, base element type defined by BASELM (default 16)");
//          ADD(55,  "55: 8-node singular plane strain finite element");
//          ADD(98,  "98: Interpolation shell");
//          ADD(99,  "99: Simplified linear element for time-domain vibration studies");
//          ADD(101, "101: User defined shell");
//          ADD(102, "102: User defined shell");
//          ADD(103, "103: User defined shell");
//          ADD(104, "104: User defined shell");
//          ADD(105, "105: User defined shell");
//          ADD(201, "201: Isogeometric shells with NURBS");
//       }
//    }
//    if(LSD_ELFORMOPT == TRUE)
//    {
//       SCALAR(LSD_ELFORM2);
//    }
//    SCALAR(LSD_SHRF)                            {DIMENSION="DIMENSIONLESS";}
//    SIZE(LSD_NIP);
//    RADIO(LSD_PROPT)
//    {
//       ADD(0.0, "0.0: Default");
//       ADD(1.0, "1.0: Average resultants and fiber lengths");
//       ADD(2.0, "2.0: Resultants at plan points and fiber lengths");
//       ADD(3.0, "3.0: Resultants, stresses at all points, fiber lengths");
//    }
//    FLAG(Sect_Option);
//    if(Sect_Option == FALSE)
//    {
//       SCALAR(LSD_QR);
//    }
//    if(Sect_Option == TRUE)
//    {
//       DATA(LSD_IRID); //{SUBTYPE}
//    }
//    RADIO(LSD_ICOMP)
//    {
//       ADD(0, "0: Default");
//       ADD(1, "1: A material angle in degrees is defined for each through thickness integration point");
//    }
//    RADIO(LSD_SETYP)
//    {
//       ADD(1, "1");
//       ADD(2, "2");
//       ADD(3, "3");
//    }
//    FLAG(NonUniformOpt);
//    if(NonUniformOpt == FALSE || NonUniformOpt == TRUE)
//    {
//       SCALAR(LSD_T1)                          {DIMENSION="l";}
//    }
//    if(NonUniformOpt == TRUE)
//    {
//       SCALAR(LSD_T2)                          {DIMENSION="l";}
//       SCALAR(LSD_T3)                          {DIMENSION="l";}
//       SCALAR(LSD_T4)                          {DIMENSION="l";}
//    }

//    SCALAR(LSD_NLOC);
//    SCALAR(SectShell_MAREA)                     {DIMENSION="surfacic_mass";}
//    FLAG(Option1);
//    if(Option1 == FALSE)
//    {
//       RADIO(LSD_IDOF)
//       {
//          ADD(0.0, "0.0: Default");
//          ADD(1.0, "1.0: Continuous (metalforming)");
//          ADD(2.0, "2.0: Discontinuous (crashworthiness)");
//          ADD(3.0, "3.0: The thickness strain is governed by the contact stress");
//       }
//    }
//    if(Option1 == TRUE)
//    {
//       SCALAR(LSD_IDOF2);
//    }
//    DATA(LSD_NSID);
//    if(LSD_ICOMP == 1)
//    {
//       SIZE(LSD_NIP);
//       ARRAY(LSD_NIP,"Material angle at integration points")
//       {
//          SCALAR(LSD_B)                        {DIMENSION="a";}
//       }
//    }
//    if(aleOption == 2)
//    {
//       SCALAR(LSD_AFAC)                        {DIMENSION="DIMENSIONLESS";}
//       SCALAR(LSD_BFAC)                        {DIMENSION="DIMENSIONLESS";}
//       SCALAR(LSD_CFAC)                        {DIMENSION="DIMENSIONLESS";}
//       SCALAR(LSD_DFAC)                        {DIMENSION="DIMENSIONLESS";}
//       SCALAR(LSD_EFAC)                        {DIMENSION="DIMENSIONLESS";}
//       SCALAR(LSD_START)                       {DIMENSION="t";}
//       SCALAR(LSD_END)                         {DIMENSION="t";}
//       SCALAR(LSD_AAFAC)                       {DIMENSION="DIMENSIONLESS";}
//    }
//    if(aleOption == 3)
//    {
//       SCALAR(LSD_DX);
//       SCALAR(LSD_DY);
//       SCALAR(LSD_ISPLINE);
//       SCALAR(LSD_IDILA);
//       RADIO(LSD_IEBT)
//       {
//          ADD(-1, "-1: Without full transformation");
//          ADD( 1, " 1: Full transformation");
//          ADD( 3, " 3: Coupled FEM/EFG");
//          ADD( 7, " 7: Maximum entropy approximation");
//       }
//       RADIO(LSD_SEC_IDIM)
//       {
//          ADD(1, "1: First-kind local boundary condition method");
//          ADD(2, "2: Gauss integration/Second Method" );
//       }
//    }
//    if(aleOption == 4)
//    {
//       RADIO(LSD_ITHELFM)
//       {
//          ADD(0, "0: Default");
//          ADD(1, "1: Thick thermal shell");
//          ADD(2, "2: Thin thermal shell");
//       }
//    }
//    if(aleOption == 5)
//    {
//       DATA(LSD_SEC_CMID);
//       SCALAR(LSD_BASELM);
//       RADIO(LSD_DOMINT)
//       {
//          ADD(0, "0: Phantom element integration");
//          ADD(1, "1: Subdomain integration with triangular local boundary integration");
//       }
//       RADIO(LSD_FAILCR)
//       {
//          ADD(1, "1: Maximum tensile stress");
//          ADD(2, "2: Maximum shear stress");
//       }
//       SCALAR(LSD_PROPCR);
   
//    }
//    if(LSD_ELFORMOPT == FALSE && (LSD_ELFORM == 101 || LSD_ELFORM == 102 || LSD_ELFORM == 103 || LSD_ELFORM == 104 || LSD_ELFORM == 105))
//    {
//       SIZE(LSD_NIPP);
//    }
//    if(LSD_ELFORMOPT == FALSE && (LSD_ELFORM == 101 || LSD_ELFORM == 102 || LSD_ELFORM == 103 || LSD_ELFORM == 104 || LSD_ELFORM == 105) && LSD_NIPP > 0)
//    {
//       ARRAY(LSD_NIPP,"")
//       {
//          SCALAR(LSD_XI);
//          SCALAR(LSD_ETA);
//          SCALAR(LSD_SEC_WGT);
//       }
//    }
//    if(LSD_ELFORMOPT == FALSE && (LSD_ELFORM == 101 || LSD_ELFORM == 102 || LSD_ELFORM == 103 || LSD_ELFORM == 104 || LSD_ELFORM == 105))
//    {
//       SCALAR(LSD_NXDOF);
//       RADIO(LSD_IUNF)
//       {
//          ADD(0, "0: Nodal fiber vectors are not used");
//          ADD(1, "1: Nodal fiber vectors are used");
//       }
//       RADIO(LSD_IHGF)
//       {
//          ADD(0, "0: Hourglass stabilization is not used");
//          ADD(1, "1: LS-DYNA hourglass stabilization is used");
//          ADD(2, "2: User-defined hourglass stabilization is used");
//          ADD(3, "3: Same as 2, but the resultant material tangent moduli are passed");
//       }
      
//       RADIO(LSD_ITAJ)
//       {
//          ADD(0, "0: Set up matrices wrt isoparametric domain");
//          ADD(1, "1: Set up matrices wrt physical domain");        
//       }
//    }   
//    if(LSD_ELFORMOPT == FALSE && (LSD_ELFORM == 101 || LSD_ELFORM == 102 || LSD_ELFORM == 103 || LSD_ELFORM == 104 || LSD_ELFORM == 105))
//    {
//       SIZE(LSD_LMC);
//    }
//    if(LSD_ELFORMOPT == FALSE && (LSD_ELFORM == 101 || LSD_ELFORM == 102 || LSD_ELFORM == 103 || LSD_ELFORM == 104 || LSD_ELFORM == 105) && LSD_LMC > 0)
//    {
//       ARRAY(LSD_LMC,"")
//       {
//          SCALAR(LSD_SEC_P);
//       }
//    }    
//    if(LSD_ELFORMOPT == FALSE && (LSD_ELFORM == 101 || LSD_ELFORM == 102 || LSD_ELFORM == 103 || LSD_ELFORM == 104 || LSD_ELFORM == 105))
//    {
//       SCALAR(LSD_NHSV);
//       RADIO(LSD_ILOC)
//       {
//          ADD(0, "0: Pass all variables in LS-DYNA local coordinate system");
//          ADD(1, "1: Pass all variables in global coordinate system");
//       }
//    }             

/*
    graphical SUPPORT("Part(s) to which property is applied") {
      OBJECTS=(/COMPONENT/TETRA4,/COMPONENT/BRICK,/COMPONENT/LINEAR_3D,/COMPONENT/TETRA10);
      ADD(COMPONENT,"Parts");
    }

}
*/


// File format
FORMAT(Keyword971_R10.1)
{
   ASSIGN(IOFLAG,0,EXPORT);
   ASSIGN(IOFLAG,1,IMPORT); 

   if(IOFLAG == 0) 
   {
      if (aleOption < 2 && LSD_TitleOpt == 0)
      {
         HEADER("*SECTION_SHELL");
      }
      else if(aleOption == 3 && LSD_TitleOpt == 0)
      {
         HEADER("*SECTION_SHELL_EFG");
      }
      else if(aleOption == 4 && LSD_TitleOpt == 0)
      {
         HEADER("*SECTION_SHELL_THERMAL");
      }
      else if(aleOption == 5 && LSD_TitleOpt == 0)
      {
         HEADER("*SECTION_SHELL_XFEM");
      }
      else if (aleOption < 2 && LSD_TitleOpt == 1)
      {
         HEADER("*SECTION_SHELL_TITLE");
      }
      else if(aleOption == 3  && LSD_TitleOpt == 1)
      {
         HEADER("*SECTION_SHELL_EFG_TITLE");
      }
      else if(aleOption == 4 && LSD_TitleOpt == 1)
      {
         HEADER("*SECTION_SHELL_THERMAL_TITLE");
      }
      else if(aleOption == 5  && LSD_TitleOpt == 1)
      {
         HEADER("*SECTION_SHELL_XFEM_TITLE");
      }
      else if(aleOption == 2)
      {
         COMMENT("$SECTION_SHELL_ALE is not supported for Ls-dyna versions >= 6.1");
      }
   }
   else
   {
      HEADER("*SECTION_SHELL%s",_opt);

      ASSIGN(_dummy,_FIND(_opt,"_ALE"),IMPORT);
      if(_dummy == 1)
      {
         ASSIGN(aleOption,2,IMPORT);
      }
      else
      {
         ASSIGN(_dummy,_FIND(_opt,"_EFG"),IMPORT);
         if(_dummy == 1)
         {
            ASSIGN(aleOption,3,IMPORT);
         }
         else
         {
            ASSIGN(_dummy,_FIND(_opt,"_THERMAL"),IMPORT);
            if(_dummy == 1)
            {
               ASSIGN(aleOption,4,IMPORT);
            }
            else
            {
               ASSIGN(_dummy,_FIND(_opt,"_XFEM"),IMPORT);
               if(_dummy == 1)
               {
                  ASSIGN(aleOption,5,IMPORT);
               }
               else
               {
                   ASSIGN(aleOption,1,IMPORT);
               }
            }
         }
      }

      ASSIGN(LSD_TitleOpt,_FIND(_opt,"_TITLE"),IMPORT);
   }

   if(IOFLAG == 0 && LSD_TitleOpt == 1 && aleOption != 2)
   {
      COMMENT("$NAME                                                                           ");
      CARD("%-80s",TITLE);
   }

   if(IOFLAG == 0 && aleOption != 2)
   {
      if(LSD_ELFORMOPT == 1 && LSD_ELFORM2 >= 1000)
      {
         COMMENT("$    SECID    ELFORM      SHRF       NIP     PROPT   QR/IRID     ICOMP     SETYP");
         CARD("%10d%10d%10lg%10lg%10lg%10lg%10d%10d",_ID_,LSD_ELFORM2,LSD_SHRF,LSD_NIP,LSD_PROPT,SCALAR_OR_OBJECT(Sect_Option,LSD_QR,LSD_IRID),LSD_ICOMP,LSD_SETYP);
      }
      else
      {
         COMMENT("$    SECID    ELFORM      SHRF       NIP     PROPT   QR/IRID     ICOMP     SETYP");
         CARD("%10d%10d%10lg%10lg%10lg%10lg%10d%10d",_ID_,LSD_ELFORM,LSD_SHRF,LSD_NIP,LSD_PROPT,SCALAR_OR_OBJECT(Sect_Option,LSD_QR,LSD_IRID),LSD_ICOMP,LSD_SETYP);
      }

      //CARD 2
      if(Option1 == 1)
      {
         COMMENT("$       T1        T2        T3        T4      NLOC     MAREA      IDOF    EDGSET");
         CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10d",LSD_T1,LSD_T2,LSD_T3,LSD_T4,LSD_NLOC,SectShell_MAREA,LSD_IDOF2,LSD_NSID);
      }
      else
      {
         COMMENT("$       T1        T2        T3        T4      NLOC     MAREA      IDOF    EDGSET");
         CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10d",LSD_T1,LSD_T2,LSD_T3,LSD_T4,LSD_NLOC,SectShell_MAREA,LSD_IDOF,LSD_NSID);
      }

      if(LSD_NIP != 0 && LSD_ICOMP == 1)
      {
         //CARD 3
         COMMENT("$       B1        B2        B3        B4        B5        B6        B7        B8");
         CELL_LIST(LSD_NIP,"%10lg",LSD_B,80);
      }
      
      if(aleOption == 3)
      {
         //EFG CARD
         COMMENT("$       DX        DY   ISPLINE     IDILA      IEBT      IDIM");
         CARD("%10lg%10lg%10d%10d%10d%10d",LSD_DX,LSD_DY,LSD_ISPLINE,LSD_IDILA,LSD_IEBT,LSD_SEC_IDIM);
      }
      if(aleOption == 4)
      {
         //Thermal Card
         COMMENT("$  ITHELFM");
         CARD("%10d",LSD_ITHELFM);
      }
     
      if(aleOption == 5)
      {
         if(LSD_FAILCROPT == 0)
         {
            if(LSD_FAILCR == -2)
            {
               COMMENT("$     CMID    BASELM    DOMINT    FAILCR    PROPCR        FS       FS1        CL");
               CARD("%10d%10d%10d%10d%10d%10lg%10lg%10lg",LSD_SEC_CMID,LSD_BASELM,LSD_DOMINT,LSD_FAILCR,LSD_PROPCR,LSD_FS,LSD_FS1_S,LSD_CL);
            }
            else
            {
               COMMENT("$     CMID    BASELM    DOMINT    FAILCR    PROPCR        FS        LS        NC");
               CARD("%10d%10d%10d%10d%10d%10lg%10d%10d",LSD_SEC_CMID,LSD_BASELM,LSD_DOMINT,LSD_FAILCR,LSD_PROPCR,LSD_FS,LSD_LS,LSD_NCI);
            }
         } 
      }
      
      if(LSD_ELFORM == 101 || LSD_ELFORM == 102 || LSD_ELFORM == 103 || LSD_ELFORM == 104 || LSD_ELFORM == 105)
      {
         //User Defined Element Card
         COMMENT("$     NIPP     NXDOF      IUNF      IHGF      ITAJ       LMC      NHSV      ILOC");
         CARD("%10d%10d%10d%10d%10d%10d%10d%10d",LSD_NIPP,LSD_NXDOF,LSD_IUNF,LSD_IHGF,LSD_ITAJ,LSD_LMC,LSD_NHSV,LSD_ILOC);

         if(LSD_NIPP > 0)
         {
            //User Defined Element Integration Point Cards
            CARD_LIST(LSD_NIPP)
            {
               COMMENT("$       XI       ETA       WGT");
               CARD("%10lg%10lg%10lg",LSD_XI,LSD_ETA,LSD_SEC_WGT);
            }
         }
         if(LSD_LMC > 0)
         {
            //User Defined Element Property Cards
            COMMENT("$       P1        P2        P3        P4        P5        P6        P7        P8");
            CELL_LIST(LSD_LMC,"%10lg",LSD_SEC_P,80);
         }
      }
   }
   else if(IOFLAG == 1) // IMPORT
   {      
      //CARD 1
      CARD_PREREAD("%10s%10d",_BLANK_,LSD_ELFORM);
      if(LSD_ELFORM >= 1000)
      {
         CARD("%10d%10d%10lg%10lg%10lg%10lg%10d%10d",_ID_,LSD_ELFORM2,LSD_SHRF,LSD_NIP,LSD_PROPT,SCALAR_OR_OBJECT(Sect_Option,LSD_QR,LSD_IRID),LSD_ICOMP,LSD_SETYP);
         ASSIGN(LSD_ELFORMOPT,1,IMPORT);
      }
      else
      {
         CARD("%10d%10d%10lg%10lg%10lg%10lg%10d%10d",_ID_,LSD_ELFORM,LSD_SHRF,LSD_NIP,LSD_PROPT,SCALAR_OR_OBJECT(Sect_Option,LSD_QR,LSD_IRID),LSD_ICOMP,LSD_SETYP);
         ASSIGN(LSD_ELFORMOPT,0,IMPORT);
      }

      CARD_PREREAD("%10s%10lg%10lg%10lg",_BLANK_,LSD_T2,LSD_T3,LSD_T4);
      if(LSD_T2 != 0 || LSD_T3 != 0 || LSD_T4 != 0)
      {
         ASSIGN(NonUniformOpt,1,IMPORT);
      }
      else
      {
         ASSIGN(NonUniformOpt,0,IMPORT);
      }
      
      CARD_PREREAD("%60s%10lg",_BLANK_,LSD_IDOF);
      if(LSD_IDOF <= 0)
      {
         ASSIGN(Option1,0,IMPORT);
      }
      else
      {
         ASSIGN(Option1,1,IMPORT);
      }

      //CARD 2
      if(Option1 == 1)
      {
         CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10d",LSD_T1,LSD_T2,LSD_T3,LSD_T4,LSD_NLOC,SectShell_MAREA,LSD_IDOF2,LSD_NSID);
      }
      else
      {
         CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10d",LSD_T1,LSD_T2,LSD_T3,LSD_T4,LSD_NLOC,SectShell_MAREA,LSD_IDOF,LSD_NSID);
      }

      if(LSD_NIP != 0 && LSD_ICOMP == 1)
      {
         //CARD 3
         CELL_LIST(LSD_NIP,"%10lg",LSD_B,80);
      }

      if(aleOption == 3)
      {
         //EFG CARD
         CARD("%10lg%10lg%10d%10d%10d%10d",LSD_DX,LSD_DY,LSD_ISPLINE,LSD_IDILA,LSD_IEBT,LSD_SEC_IDIM);
      }

      if(aleOption == 4)
      {
         //THERMAL
         CARD("%10d",LSD_ITHELFM);
      }

      if(aleOption == 5)
      {
         if(LSD_FAILCROPT == 0)
         {
            if(LSD_FAILCR == -2)
            {
               CARD("%10d%10d%10d%10d%10d%10lg%10lg%10lg",LSD_SEC_CMID,LSD_BASELM,LSD_DOMINT,LSD_FAILCR,LSD_PROPCR,LSD_FS,LSD_FS1_S,LSD_CL);
            }
            else
            {
               CARD("%10d%10d%10d%10d%10d%10lg%10d%10d",LSD_SEC_CMID,LSD_BASELM,LSD_DOMINT,LSD_FAILCR,LSD_PROPCR,LSD_FS,LSD_LS,LSD_NCI);
            }
         } 
      }
      
      if(LSD_ELFORM == 101 || LSD_ELFORM == 102 || LSD_ELFORM == 103 || LSD_ELFORM == 104 || LSD_ELFORM == 105)
      {
         //User Defined Element Card
         CARD("%10d%10d%10d%10d%10d%10d%10d%10d",LSD_NIPP,LSD_NXDOF,LSD_IUNF,LSD_IHGF,LSD_ITAJ,LSD_LMC,LSD_NHSV,LSD_ILOC);

         if(LSD_NIPP > 0)
         {
            //User Defined Element Integration Point Cards
            CARD_LIST(LSD_NIPP)
            {
               CARD("%10lg%10lg%10lg",LSD_XI,LSD_ETA,LSD_SEC_WGT);
            }
         }
         if(LSD_LMC > 0)
         {
            //User Defined Element Property Cards
            CELL_LIST(LSD_LMC,"%10lg",LSD_SEC_P,80);
         }
      }
   }
}

// File format
FORMAT(Keyword971)
{
   ASSIGN(IOFLAG,0,EXPORT);
   ASSIGN(IOFLAG,1,IMPORT); 

   if(IOFLAG == 0) 
   {
      if (aleOption < 2 && LSD_TitleOpt == 0)
      {
         HEADER("*SECTION_SHELL");
      }
      else if(aleOption == 3 && LSD_TitleOpt == 0)
      {
         HEADER("*SECTION_SHELL_EFG");
      }
      else if(aleOption == 4 && LSD_TitleOpt == 0)
      {
         HEADER("*SECTION_SHELL_THERMAL");
      }
      else if(aleOption == 5 && LSD_TitleOpt == 0)
      {
         HEADER("*SECTION_SHELL_XFEM");
      }
      else if (aleOption < 2 && LSD_TitleOpt == 1)
      {
         HEADER("*SECTION_SHELL_TITLE");
      }
      else if(aleOption == 3  && LSD_TitleOpt == 1)
      {
         HEADER("*SECTION_SHELL_EFG_TITLE");
      }
      else if(aleOption == 4 && LSD_TitleOpt == 1)
      {
         HEADER("*SECTION_SHELL_THERMAL_TITLE");
      }
      else if(aleOption == 5  && LSD_TitleOpt == 1)
      {
         HEADER("*SECTION_SHELL_XFEM_TITLE");
      }
      else if(aleOption == 2)
      {
         COMMENT("$SECTION_SHELL_ALE is not supported for Ls-dyna versions >= 6.1");
      }
   }
   else
   {
      HEADER("*SECTION_SHELL%s",_opt);

      ASSIGN(_dummy,_FIND(_opt,"_ALE"),IMPORT);
      if(_dummy == 1)
      {
         ASSIGN(aleOption,2,IMPORT);
      }
      else
      {
         ASSIGN(_dummy,_FIND(_opt,"_EFG"),IMPORT);
         if(_dummy == 1)
         {
            ASSIGN(aleOption,3,IMPORT);
         }
         else
         {
            ASSIGN(_dummy,_FIND(_opt,"_THERMAL"),IMPORT);
            if(_dummy == 1)
            {
               ASSIGN(aleOption,4,IMPORT);
            }
            else
            {
               ASSIGN(_dummy,_FIND(_opt,"_XFEM"),IMPORT);
               if(_dummy == 1)
               {
                  ASSIGN(aleOption,5,IMPORT);
               }
               else
               {
                   ASSIGN(aleOption,1,IMPORT);
               }
            }
         }

         ASSIGN(LSD_TitleOpt,_FIND(_opt,"_TITLE"),IMPORT);
      }
   }

   if(IOFLAG == 0 && LSD_TitleOpt == 1 && aleOption != 2)
   {
      COMMENT("$NAME                                                                           ");
      CARD("%-80s",TITLE);
   }

   if(IOFLAG == 0 && aleOption != 2)
   {
      if(LSD_ELFORMOPT == 1 && LSD_ELFORM2 >= 1000)
      {
         COMMENT("$    SECID    ELFORM      SHRF       NIP     PROPT   QR/IRID     ICOMP     SETYP");
         CARD("%10d%10d%10lg%10lg%10lg%10lg%10d%10d",_ID_,LSD_ELFORM2,LSD_SHRF,LSD_NIP,LSD_PROPT,SCALAR_OR_OBJECT(Sect_Option,LSD_QR,LSD_IRID),LSD_ICOMP,LSD_SETYP);
      }
      else
      {
         COMMENT("$    SECID    ELFORM      SHRF       NIP     PROPT   QR/IRID     ICOMP     SETYP");
         CARD("%10d%10d%10lg%10lg%10lg%10lg%10d%10d",_ID_,LSD_ELFORM,LSD_SHRF,LSD_NIP,LSD_PROPT,SCALAR_OR_OBJECT(Sect_Option,LSD_QR,LSD_IRID),LSD_ICOMP,LSD_SETYP);
      }

      //CARD 2
      if(Option1 == 1)
      {
         COMMENT("$       T1        T2        T3        T4      NLOC     MAREA      IDOF    EDGSET");
         CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10d",LSD_T1,LSD_T2,LSD_T3,LSD_T4,LSD_NLOC,SectShell_MAREA,LSD_IDOF2,LSD_NSID);
      }
      else
      {
         COMMENT("$       T1        T2        T3        T4      NLOC     MAREA      IDOF    EDGSET");
         CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10d",LSD_T1,LSD_T2,LSD_T3,LSD_T4,LSD_NLOC,SectShell_MAREA,LSD_IDOF,LSD_NSID);
      }

      if(LSD_NIP != 0 && LSD_ICOMP == 1)
      {
         //CARD 3
         COMMENT("$       B1        B2        B3        B4        B5        B6        B7        B8");
         CELL_LIST(LSD_NIP,"%10lg",LSD_B,80);
      }
      
      if(aleOption == 3)
      {
         //EFG CARD
         COMMENT("$       DX        DY   ISPLINE     IDILA      IEBT      IDIM");
         CARD("%10lg%10lg%10d%10d%10d%10d",LSD_DX,LSD_DY,LSD_ISPLINE,LSD_IDILA,LSD_IEBT,LSD_SEC_IDIM);
      }
      if(aleOption == 4)
      {
         //Thermal Card
         COMMENT("$  ITHELFM");
         CARD("%10d",LSD_ITHELFM);
      }

      if(aleOption == 5)
      {
         //XFEM Card
         COMMENT("$     CMID    BASELM    DOMINT    FAILCR    PROPCR    LPRINT");
         CARD("%10d%10d%10d%10d%10d%10d",LSD_SEC_CMID,LSD_BASELM,LSD_DOMINT,LSD_FAILCR,LSD_PROPCR,LSD_LPRINT);           
      }
      
      if(LSD_ELFORM == 101 || LSD_ELFORM == 102 || LSD_ELFORM == 103 || LSD_ELFORM == 104 || LSD_ELFORM == 105)
      {
         //User Defined Element Card
         COMMENT("$     NIPP     NXDOF      IUNF      IHGF      ITAJ       LMC      NHSV      ILOC");
         CARD("%10d%10d%10d%10d%10d%10d%10d%10d",LSD_NIPP,LSD_NXDOF,LSD_IUNF,LSD_IHGF,LSD_ITAJ,LSD_LMC,LSD_NHSV,LSD_ILOC);

         if(LSD_NIPP > 0)
         {
            //User Defined Element Integration Point Cards
            CARD_LIST(LSD_NIPP)
            {
               COMMENT("$       XI       ETA       WGT");
               CARD("%10lg%10lg%10lg",LSD_XI,LSD_ETA,LSD_SEC_WGT);
            }
         }
         if(LSD_LMC > 0)
         {
            //User Defined Element Property Cards
            COMMENT("$       P1        P2        P3        P4        P5        P6        P7        P8");
            CELL_LIST(LSD_LMC,"%10lg",LSD_SEC_P,80);
         }
      }
   }
   else if( IOFLAG == 1) //IMPORT
   {
      //CARD 1
      CARD_PREREAD("%10s%10d",_BLANK_,LSD_ELFORM);
      if(LSD_ELFORM >= 1000)
      {
         CARD("%10d%10d%10lg%10lg%10lg%10lg%10d%10d",_ID_,LSD_ELFORM2,LSD_SHRF,LSD_NIP,LSD_PROPT,SCALAR_OR_OBJECT(Sect_Option,LSD_QR,LSD_IRID),LSD_ICOMP,LSD_SETYP);
         ASSIGN(LSD_ELFORMOPT,1,IMPORT);
      }
      else
      {
         CARD("%10d%10d%10lg%10lg%10lg%10lg%10d%10d",_ID_,LSD_ELFORM,LSD_SHRF,LSD_NIP,LSD_PROPT,SCALAR_OR_OBJECT(Sect_Option,LSD_QR,LSD_IRID),LSD_ICOMP,LSD_SETYP);
         ASSIGN(LSD_ELFORMOPT,0,IMPORT);
      }

      CARD_PREREAD("%10s%10lg%10lg%10lg",_BLANK_,LSD_T2,LSD_T3,LSD_T4);
      if(LSD_T2 != 0 || LSD_T3 != 0 || LSD_T4 != 0)
      {
         ASSIGN(NonUniformOpt,1,IMPORT);
      }
      else
      {
         ASSIGN(NonUniformOpt,0,IMPORT);
      }
      
      CARD_PREREAD("%60s%10lg",_BLANK_,LSD_IDOF);
      if(LSD_IDOF <= 0)
      {
         ASSIGN(Option1,0,IMPORT);
      }
      else
      {
         ASSIGN(Option1,1,IMPORT);
      }

      //CARD 2
      if(Option1 == 1)
      {
         CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10d",LSD_T1,LSD_T2,LSD_T3,LSD_T4,LSD_NLOC,SectShell_MAREA,LSD_IDOF2,LSD_NSID);
      }
      else
      {
         CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10d",LSD_T1,LSD_T2,LSD_T3,LSD_T4,LSD_NLOC,SectShell_MAREA,LSD_IDOF,LSD_NSID);
      }

      if(LSD_NIP != 0 && LSD_ICOMP == 1)
      {
         //CARD 3
         CELL_LIST(LSD_NIP,"%10lg",LSD_B,80);
      }

      ASSIGN(_dummy,_FIND(_opt,"_EFG"),IMPORT);
      if(_dummy != 0)
      {
         //EFG CARD
         CARD("%10lg%10lg%10d%10d%10d%10d",LSD_DX,LSD_DY,LSD_ISPLINE,LSD_IDILA,LSD_IEBT,LSD_SEC_IDIM);
         ASSIGN(aleOption,3,IMPORT);
      }

      ASSIGN(_dummy,_FIND(_opt,"_THERMAL"),IMPORT);
      if(_dummy != 0)
      {
         //THERMAL
         CARD("%10d",LSD_ITHELFM);
         ASSIGN(aleOption,4,IMPORT);
      }

      ASSIGN(_dummy,_FIND(_opt,"_XFEM"),IMPORT);
      if(_dummy != 0)
      {
         //XFEM
         ASSIGN(aleOption,5,IMPORT);
         CARD("%10d%10d%10d%10d%10d%10d",LSD_SEC_CMID,LSD_BASELM,LSD_DOMINT,LSD_FAILCR,LSD_PROPCR,LSD_LPRINT);  
      }
      
      if(LSD_ELFORM == 101 || LSD_ELFORM == 102 || LSD_ELFORM == 103 || LSD_ELFORM == 104 || LSD_ELFORM == 105)
      {
         //User Defined Element Card
         CARD("%10d%10d%10d%10d%10d%10d%10d%10d",LSD_NIPP,LSD_NXDOF,LSD_IUNF,LSD_IHGF,LSD_ITAJ,LSD_LMC,LSD_NHSV,LSD_ILOC);

         if(LSD_NIPP > 0)
         {
            //User Defined Element Integration Point Cards
            CARD_LIST(LSD_NIPP)
            {
               CARD("%10lg%10lg%10lg",LSD_XI,LSD_ETA,LSD_SEC_WGT);
            }
         }
         if(LSD_LMC > 0)
         {
            //User Defined Element Property Cards
            CELL_LIST(LSD_LMC,"%10lg",LSD_SEC_P,80);
         }
      }
   }
}
