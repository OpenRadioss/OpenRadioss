//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- rigidwall_geometric.cfg ---

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES

    //GEOMETRIC Required:----------------------------------------------------------------------------------------------------------------------------------------

    //Card 1
    NodeSet_ID                              = VALUE(SETS,       "Nodal set ID containing secondary nodes")                         { SUBTYPES = (/SETS/SET_NODE_IDPOOL); }
    excludeNodeSet_ID                       = VALUE(SETS,       "Nodal set ID containing nodes that exempted as secondary nodes")  { SUBTYPES = (/SETS/SET_NODE_IDPOOL); }
    Block_ID                                = VALUE(BLOCK,      "If defined, only nodes in box are included as secondary nodes to rigid wall");
    birth                                   = VALUE(FLOAT,      "Birth time of rigid wall");
    death                                   = VALUE(FLOAT,      "Death time of rigid wall");

    //Card 2
    basenode                                = VALUE(NODE,       "x-y-z-coordinate of tail of normal vector n");
        x                                   = VALUE(FLOAT,      "x-coordinate of tail of normal vector n");
        y                                   = VALUE(FLOAT,      "y-coordinate of tail of normal vector n");
        z                                   = VALUE(FLOAT,      "z-coordinate of tail of normal vector n");
    XH                                      = VALUE(FLOAT,      "x-coordinate of head of normal vector n");
    YH                                      = VALUE(FLOAT,      "y-coordinate of head of normal vector n");
    ZH                                      = VALUE(FLOAT,      "z-coordinate of head of normal vector n");
    fric                                    = VALUE(FLOAT,      "Interface friction");

    //---SHAPES:

    //Flat
    XHev                                    = VALUE(FLOAT,      "X-coordinate of head of edge vector");
    YHev                                    = VALUE(FLOAT,      "Y-coordinate of head of edge vector l");
    ZHev                                    = VALUE(FLOAT,      "Z-coordinate of head of edge vector l");
    Length                                  = VALUE(FLOAT,      "Length of l edge");
    Width                                   = VALUE(FLOAT,      "Length of m edge");

    //Prism
    //already defined all "Flat" attributes &
    LenP                                    = VALUE(FLOAT,      "Length of prism in the direction negative to n");

    //Cylinder
    RADCYL                                  = VALUE(FLOAT,      "Radius of cylinder");
    LENCYL                                  = VALUE(FLOAT,      "Length of cylinder");
    NSEGS                                   = VALUE(INT,        "Number of subsections");

    //NSEGS Card
    VL                                      = VALUE(FLOAT,      "Distance from the Cylinder base");
    HEIGHT                                  = VALUE(FLOAT,      "Section height");

    //Sphere
    RADSPH                                  = VALUE(FLOAT,      "Radius of sphere");

    //---Optional Cards:

    //Optional Card A
    lcid                                    = VALUE(CURVE,      "Rigidwall motion curve number");
    opt                                     = VALUE(INT,        "Type of motion");
    motionx                                 = VALUE(FLOAT,      "x-direction cosine of velocity/displacement vector");
    motiony                                 = VALUE(FLOAT,      "y-direction cosine of velocity/displacement vector");
    motionz                                 = VALUE(FLOAT,      "z-direction cosine of velocity/displacement vector");

    //Optional Card B
    compid                                  = VALUE(COMPONENT,  "Unique part ID for moving geometric rigid wall");
    density                                 = VALUE(FLOAT,      "Density of rigid wall");
    youngsmodulus                           = VALUE(FLOAT,      "Young’s modulus");
    poissonsration                          = VALUE(FLOAT,      "Poisson’s ratio");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING,     "Solver Keyword");
    geometrytype                            = VALUE(INT,        "Geometry Type");
    MotionType                              = VALUE(INT,        "Motion Type");
    DisplayType                             = VALUE(INT,        "Display Type");
    InteriorOption                          = VALUE(INT,        "Interior option");

    IOFLAG                                  = VALUE(INT,        "IOFLAG");
    _dummy_keyword                          = VALUE(STRING,     "Keyword Option Export");
    TITLE                                   = VALUE(STRING,     "Title");
    _opt                                    = VALUE(STRING,     "Keyword Option Import");
    _shape                                  = VALUE(INT,        "Shape Option");
    LSD_TitleOpt                            = VALUE(INT,        "Title Option");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES

    //HM INTERNAL
    KEYWORD_STR                             = 9000;
    InteriorOption                          = 5286;

    IOFLAG                                  = -1;
    _dummy_keyword                          = -1;
    TITLE                                   = -1;
    _opt                                    = -1;
    _shape                                  = -1;
    LSD_TitleOpt                            = 90;
}

CHECK(COMMON)
{
    fric                                    >= 0.0;
    RADCYL                                  >= 0.0;
    LENCYL                                  >= 0.0;
    Length                                  >= 0.0;
    Width                                   >= 0.0;
    LenP                                    >= 0.0;
}

DEFAULTS(COMMON)
{
    //Card 1
    death                                   = 1.0e+20;

    //Card 2
    x                                       = 0.0;
    y                                       = 0.0;
    z                                       = 0.0;
    XH                                      = 0.0;
    YH                                      = 0.0;
    ZH                                      = 0.0;
    fric                                    = 0.0;

    //Flat
    XHev                                    = 0.0;
    YHev                                    = 0.0;
    ZHev                                    = 0.0;

    //Cylinder
    NSEGS                                   = 0;

    //Sphere
    RADSPH                                  = 0.0;

    //Motion
    opt                                     = 0;

    //Display
    density                                 = 1.0e-09;
    youngsmodulus                           = 1.0e-04;
    poissonsration                          = 0.30;
}

GUI(COMMON)
{
    SCALAR(birth)                           { DIMENSION = "t"; }
    SCALAR(death)                           { DIMENSION = "t"; }
    SCALAR(XH)                              { DIMENSION = "l"; }
    SCALAR(YH)                              { DIMENSION = "l"; }
    SCALAR(ZH)                              { DIMENSION = "l"; }
    SCALAR(fric)                            { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(XHev)                            { DIMENSION = "l"; }
    SCALAR(YHev)                            { DIMENSION = "l"; }
    SCALAR(ZHev)                            { DIMENSION = "l"; }
    SCALAR(Length)                          { DIMENSION = "l"; }
    SCALAR(Width)                           { DIMENSION = "l"; }
    SCALAR(LenP)                            { DIMENSION = "l"; }
    SCALAR(RADCYL)                          { DIMENSION = "l"; }
    SCALAR(LENCYL)                          { DIMENSION = "l"; }
    SCALAR(NSEGS)                           { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(VL)                              { DIMENSION = "l"; }
    SCALAR(HEIGHT)                          { DIMENSION = "l"; }
    SCALAR(RADSPH)                          { DIMENSION = "l"; }
    SCALAR(motionx)                         { DIMENSION = "velocity"; }
    SCALAR(motiony)                         { DIMENSION = "velocity"; }
    SCALAR(motionz)                         { DIMENSION = "velocity"; }
    SCALAR(density)                         { DIMENSION = "density"; }
    SCALAR(youngsmodulus)                   { DIMENSION = "pressure"; }
    SCALAR(poissonsration)                  { DIMENSION = "DIMENSIONLESS"; }
}

// File formal
FORMAT(Keyword971_R6.1)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        ASSIGN(KEYWORD_STR, *RIGIDWALL_GEOMETRIC, EXPORT);

        if(geometrytype == 1 || geometrytype == 2)                                   //Infinite & Finite Plane
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_FLAT"), EXPORT);
        }
        else if(geometrytype == 3 || geometrytype == 4)                              //Infinite & Finite Prism
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_PRISM"), EXPORT);
        }
        else if(geometrytype == 5)                                                   //Cylinder
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_CYLINDER"), EXPORT);
        }
        else if(geometrytype == 6)                                                   //Sphere
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_SPHERE"), EXPORT);
        }

        //GEOMETRIC OPTIONS:

        if(MotionType == 1)
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_MOTION"), EXPORT);
        }

        if(DisplayType == 1)
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_DISPLAY"), EXPORT);
        }

        if(LSD_TitleOpt == 1)
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_ID"), EXPORT);
        }

        ASSIGN(KEYWORD_STR, _COMBINE(KEYWORD_STR, _dummy_keyword), EXPORT);
        CARD("%-s", KEYWORD_STR);
    }
    else  //IMPORT
    {
        HEADER("*RIGIDWALL_GEOMETRIC%80s", _opt);

        //////////////////////////////////
        // assign geometrytype - start

        CARD_PREREAD("%10lg%10lg%10lg", XHev, YHev, ZHev);

        //Infinite & Finite Plane
        ASSIGN(_shape, _FIND(_opt, "_FLAT"), IMPORT);
        if(_shape == 1)
        {
            if(XHev != 0 || YHev != 0 || ZHev != 0)
            {
                ASSIGN(geometrytype, 1, IMPORT);
            }
            else
            {
                ASSIGN(geometrytype, 2, IMPORT);
            }
        }

        //Infinite & Finite Prism
        ASSIGN(_shape, _FIND(_opt, "_PRISM"), IMPORT);
        if(_shape == 1)
        {
            if(XHev != 0 || YHev != 0 || ZHev != 0)
            {
                ASSIGN(geometrytype, 3, IMPORT);
            }
            else
            {
                ASSIGN(geometrytype, 4, IMPORT);
            }
        }

        //Cylinder
        ASSIGN(_shape, _FIND(_opt, "_CYLINDER"), IMPORT);
        if(_shape == 1)
        {
            ASSIGN(geometrytype, 5, IMPORT);
        }

        //Sphere
        ASSIGN(_shape, _FIND(_opt, "_SPHERE"), IMPORT);
        if(_shape == 1)
        {
            ASSIGN(geometrytype, 6, IMPORT);
        }

        // assign geometrytype - end
        //////////////////////////////////

        ASSIGN(MotionType, _FIND(_opt, "_MOTION"), IMPORT);

        ASSIGN(DisplayType, _FIND(_opt, "_DISPLAY"), IMPORT);

        ASSIGN(LSD_TitleOpt, _FIND(_opt, "_ID"), IMPORT);
    }

    //ID Card
    if(IOFLAG == 0 && LSD_TitleOpt == 1)
    {
        COMMENT("$     RWIDHEADING                                                               ");
        CARD("%10d%-70s", _ID_, TITLE);
    }

    //Card 1
    COMMENT("$     NSID    NSIDEX     BOXID     BIRTH     DEATH");
    CARD("%10d%10d%10d%10lg%10lg", NodeSet_ID,excludeNodeSet_ID,Block_ID,birth,death);

    //Card 2
    COMMENT("$       XT        YT        ZT        XH        YH        ZH      FRIC");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg", x, y, z, XH, YH, ZH, fric);


    //Infinite & Finite Plane
    if(geometrytype == 1 || geometrytype == 2)
    {
        //Card 3
        COMMENT("$     XHEV      YHEV      ZHEV      LENL      LENM");
        CARD("%10lg%10lg%10lg%10lg%10lg", XHev, YHev, ZHev, Length, Width);
    }
    //Infinite & Finite Prism
    else if( geometrytype == 3 || geometrytype == 4)
    {
        //Card 3
        COMMENT("$     XHEV      YHEV      ZHEV      LENL      LENM      LENP");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg", XHev, YHev, ZHev, Length, Width,LenP);
    }
    //Cylinder:
    else if(geometrytype == 5)
    {
        //Card 3
        COMMENT("$   RADCYL    LENCYL");
        CARD("%10lg%10lg", RADCYL, LENCYL);
    }
    //Sphere:
    else if(geometrytype == 6)
    {
        //Card 3
        COMMENT("$   RADSPH");
        CARD("%10lg", RADSPH);
    }

    //Optional Geometric Cards:

    //Optional Card A - MOTION
    if(MotionType == 1)
    {
        COMMENT("$     LCID       OPT        VX        VY        VZ");
        CARD("%10d%10d%10lg%10lg%10lg", lcid, opt, motionx, motiony, motionz);
    }

    //Optional Card B - DISPLAY
    if(DisplayType == 1)
    {
        COMMENT("$      PID        RO         E        PR");
        CARD("%10d%10lg%10lg%10lg", compid, density, youngsmodulus, poissonsration);
    }
}

FORMAT(Keyword971_R10.1)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        ASSIGN(KEYWORD_STR, *RIGIDWALL_GEOMETRIC, EXPORT);

        if(geometrytype == 1 || geometrytype == 2)                                   //Infinite & Finite Plane
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_FLAT"), EXPORT);
        }
        else if(geometrytype == 3 || geometrytype == 4)                              //Infinite & Finite Prism
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_PRISM"), EXPORT);
        }
        else if(geometrytype == 5)                                                   //Cylinder
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_CYLINDER"), EXPORT);
        }
        else if(geometrytype == 6)                                                   //Sphere
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_SPHERE"), EXPORT);
        }

        //GEOMETRIC OPTIONS:

        if(MotionType == 1)
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_MOTION"), EXPORT);
        }

        if(DisplayType == 1)
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_DISPLAY"), EXPORT);
        }

        if(InteriorOption == 1 && (geometrytype == 5 || geometrytype == 6))
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_INTERIOR"), EXPORT);
        }

        if(LSD_TitleOpt == 1)
        {
            ASSIGN(_dummy_keyword, _COMBINE(_dummy_keyword, "_ID"), EXPORT);
        }

        ASSIGN(KEYWORD_STR, _COMBINE(KEYWORD_STR, _dummy_keyword), EXPORT);
        CARD("%-s", KEYWORD_STR);
    }
    else  //IMPORT
    {
        HEADER("*RIGIDWALL_GEOMETRIC%80s", _opt);

        //////////////////////////////////
        // assign geometrytype - start

        CARD_PREREAD("%10lg%10lg%10lg", XHev, YHev, ZHev);

        //Infinite & Finite Plane
        ASSIGN(_shape, _FIND(_opt, "_FLAT"), IMPORT);
        if(_shape == 1)
        {
            if(XHev != 0 || YHev != 0 || ZHev != 0)
            {
                ASSIGN(geometrytype, 1, IMPORT);
            }
            else
            {
                ASSIGN(geometrytype, 2, IMPORT);
            }
        }

        //Infinite & Finite Prism
        ASSIGN(_shape, _FIND(_opt, "_PRISM"), IMPORT);
        if(_shape == 1)
        {
            if(XHev != 0 || YHev != 0 || ZHev != 0)
            {
                ASSIGN(geometrytype, 3, IMPORT);
            }
            else
            {
                ASSIGN(geometrytype, 4, IMPORT);
            }
        }

        //Cylinder
        ASSIGN(_shape, _FIND(_opt, "_CYLINDER"), IMPORT);
        if(_shape == 1)
        {
            ASSIGN(geometrytype, 5, IMPORT);
        }

        //Sphere
        ASSIGN(_shape, _FIND(_opt, "_SPHERE"), IMPORT);
        if(_shape == 1)
        {
            ASSIGN(geometrytype, 6, IMPORT);
        }

        // assign geometrytype - end
        //////////////////////////////////

        ASSIGN(MotionType, _FIND(_opt, "_MOTION"), IMPORT);

        ASSIGN(DisplayType, _FIND(_opt, "_DISPLAY"), IMPORT);

        ASSIGN(InteriorOption, _FIND(_opt, "_INTERIOR"), IMPORT);

        ASSIGN(LSD_TitleOpt, _FIND(_opt, "_ID"), IMPORT);
    }

    //ID Card
    if(IOFLAG == 0 && LSD_TitleOpt == 1)
    {
        COMMENT("$     RWIDHEADING                                                               ");
        CARD("%10d%-70s", _ID_, TITLE);
    }

    //Card 1
    COMMENT("$     NSID    NSIDEX     BOXID     BIRTH     DEATH");
    CARD("%10d%10d%10d%10lg%10lg", NodeSet_ID,excludeNodeSet_ID,Block_ID,birth,death);

    //Card 2
    COMMENT("$       XT        YT        ZT        XH        YH        ZH      FRIC");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg", x, y, z, XH, YH, ZH, fric);


    //Infinite & Finite Plane
    if(geometrytype == 1 || geometrytype == 2)
    {
        //Card 3
        COMMENT("$     XHEV      YHEV      ZHEV      LENL      LENM");
        CARD("%10lg%10lg%10lg%10lg%10lg", XHev, YHev, ZHev, Length, Width);
    }
    //Infinite & Finite Prism
    else if( geometrytype == 3 || geometrytype == 4)
    {
        //Card 3
        COMMENT("$     XHEV      YHEV      ZHEV      LENL      LENM      LENP");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg", XHev, YHev, ZHev, Length, Width,LenP);
    }
    //Cylinder:
    else if(geometrytype == 5)
    {
        //Card 3
        COMMENT("$   RADCYL    LENCYL     NSEGS");
        CARD("%10lg%10lg%10d", RADCYL, LENCYL, NSEGS);

        //NSEGS Card
        if(NSEGS > 0)
        {
            COMMENT("$       VL    HEIGHT");
            CARD("%10lg%10lg", VL, HEIGHT);
        }
    }
    //Sphere:
    else if(geometrytype == 6)
    {
        //Card 3
        COMMENT("$   RADSPH");
        CARD("%10lg", RADSPH);
    }

    //Optional Geometric Cards:

    //Optional Card A - MOTION
    if(MotionType == 1)
    {
        COMMENT("$     LCID       OPT        VX        VY        VZ");
        CARD("%10d%10d%10lg%10lg%10lg", lcid, opt, motionx, motiony, motionz);
    }

    //Optional Card B - DISPLAY
    if(DisplayType == 1)
    {
        COMMENT("$      PID        RO         E        PR");
        CARD("%10d%10lg%10lg%10lg", compid, density, youngsmodulus, poissonsration);
    }
}