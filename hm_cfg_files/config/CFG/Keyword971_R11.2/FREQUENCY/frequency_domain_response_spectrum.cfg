//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
ATTRIBUTES(COMMON) {

    //Attributes for HM usage 
    IO_FLAG                             = VALUE(INT, "Import/Export flag");
    _HMCOMMENTSFLAG                     = VALUE(INT, "Write HM Comments");
    _HWCOLOR                            = VALUE(INT, "Entity Color");
    _HAS_HEADER                         = VALUE(BOOL,"Has Header Card");
    TITLE                               = VALUE(STRING, "TITLE");
    solverkeyword                       = VALUE(STRING, "Solver Keyword");
    nspectrum                           = SIZE("No of Input Spectrum","No_Frequency_Spectrum");
    ddam                                = VALUE(INT,"DDAM option","OPTION");
    Type                                = VALUE(STRING, "");

    // Solver fields
    mdmin                                = VALUE(INT,"The first mode in modal superposition method");
    mdmax                                = VALUE(INT,"The last mode in modal superposition method");
    fnmin                                = VALUE(FLOAT,"The minimum natural frequency in modal superposition method");
    fnmax                                = VALUE(FLOAT,"The maximum natural frequency in modal superposition method");
    restrt                               = VALUE(INT,"Restart option");
    mcomb                                = VALUE(INT,"Method for combination of modes");
    relatv                               = VALUE(INT,"FLAG for displacement, velocity and acceleration results");
    dampf                                = VALUE(FLOAT,"Modal damping coefficient");
    lcdamp                               = VALUE(FUNCT, "Load Curve ID for defining frequency dependent modal damping ratio");
    ldtyp                                = VALUE(INT,"Type of load curve for LCDAMP");
    dmpmas                               = VALUE(FLOAT,"Mass proportional damping constant Alpha, in Rayleigh damping");
    dmpstf                               = VALUE(FLOAT,"Stiffness proportional damping constant Beta , in Rayleigh damping");
    lctyp_input_specturm                 = ARRAY[nspectrum](INT,"Load curve type for defining the input spectrum");
    dof                                  = ARRAY[nspectrum](INT,"Applicable degrees-of-freedom for excitation input");
    lc_tbid                              = ARRAY[nspectrum](FUNCT, "Load curve or table ID");
    sf                                   = ARRAY[nspectrum](FLOAT,"Scale factor for the input load spectrum");
    vid                                  = ARRAY[nspectrum](VECTOR, "Vector ID for DOF values of 4");
    lntyp                                = ARRAY[nspectrum](INT,"Set type for LNID");
    nids                                 = ARRAY[nspectrum](NODE, "Node ID", "NIDS");
    nsids                                = ARRAY[nspectrum](SETS, "Node Set ID", "NSIDS") { SUBTYPES = (/SETS/SET_NODE_IDPOOL);  }
    ssids                                = ARRAY[nspectrum](SETS, "Segment Set ID", "SSIDS") { SUBTYPES = (/SETS/SET_SEGMENT_GENERAL_IDPOOL);  }
    pids                                 = ARRAY[nspectrum](COMPONENT, "Part ID", "PIDS");
    psids                                = ARRAY[nspectrum](SETS, "Part Set ID", "PSIDS") { SUBTYPES = (/SETS/SET_PART_IDPOOL) ;  }
    inflag                               = ARRAY[nspectrum](INT,"Frequency interpolation option");
    std                                  = VALUE(INT,"Design spectrum standard for shock load");
    unit                                 = VALUE(INT,"Unit system");
    amin                                 = VALUE(FLOAT,"Minimum acceleration");
    vidoptions                           = VALUE(BOOL,"Flag specifying VID options","VID_FLAG");
    vidvalue                             = VALUE(INT,"Direction of shock load");
    vid_direction                        = VALUE(VECTOR,"Direction of shock load");
    x_c                                  = VALUE(FLOAT,"X-directional cosine of shock load");
    y_c                                  = VALUE(FLOAT,"Y-directional cosine of shock load");
    z_c                                  = VALUE(FLOAT,"Z-directional cosine of shock load");
    effmas                               = VALUE(FLOAT,"Minimum percentage requirement of total modal mass");
    shptyp                               = VALUE(INT,"Ship type");
    mount                                = VALUE(INT,"Mount type");
    movemt                               = VALUE(INT,"Movement type");
    mattyp                               = VALUE(INT,"Material type");
    af                                   = VALUE(FLOAT,"Coefficients to define the acceleration spectrum");
    aa                                   = VALUE(FLOAT,"Coefficients to define the acceleration spectrum");
    ab                                   = VALUE(FLOAT,"Coefficients to define the acceleration spectrum");
    ac                                   = VALUE(FLOAT,"Coefficients to define the acceleration spectrum");
    ad                                   = VALUE(FLOAT,"Coefficients to define the acceleration spectrum");
    vf                                   = VALUE(FLOAT,"Coefficients to define the velocity spectrum");
    va                                   = VALUE(FLOAT,"Coefficients to define the velocity spectrum");
    vb                                   = VALUE(FLOAT,"Coefficients to define the velocity spectrum");
    vc                                   = VALUE(FLOAT,"Coefficients to define the velocity spectrum");
    mode_sid                             = VALUE(SETS,"Mode set ID") { SUBTYPES = (/SETS/SET_MODE_IDPOOL) ; }
    DUMMY_LNTYP                          = VALUE(INT, "LNTYP");
    empty_string                         = VALUE(STRING, "empty string");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    IO_FLAG                            =-1;
    _HMCOMMENTSFLAG                    =-1;
    _HWCOLOR                           =-1;
    _HAS_HEADER                        = -1;
    TITLE                              =-1;
    solverkeyword                      = -1;
    empty_string                       = -1;
    DUMMY_LNTYP                        = -1;
    Type                               = -1;
}

DEFAULTS(COMMON)
{
    mdmin                                = 1;
    fnmin                                = 0.0;
    restrt                               = 0;
    mcomb                                = 0;
    relatv                               = 0;
    ldtyp                                = 0;
    dmpmas                               = 0.0;
    dmpstf                               = 0.0;
    sf                                   = 1.0;
    inflag                               = 0;
    std                                  = 1;
    unit                                 = 1;
    amin                                 = 6.0;
    vidvalue                             = 0;
    effmas                               = 80.0;
    shptyp                               = 1;
    mount                                = 1;
    movemt                               = 1;
    mattyp                               = 1;
    af                                   = 0.0;
    aa                                   = 0.0;
    ab                                   = 0.0;
    ac                                   = 0.0;
    ad                                   = 0.0;
    vf                                   = 0.0;
    va                                   = 0.0;
    vb                                   = 0.0;
    vc                                   = 0.0;
}

CHECK(COMMON)
{
    nspectrum                            >= 0;
}

GUI(COMMON)
{
    RADIO(ddam)
    {
        ADD(0,"NONE");
        ADD(1,"DDAM");
    } { PARAMETERIZED = FALSE; DISPLAY_STATUS=ALWAYS_ON;}
    
    if(ddam == 1)
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_RESPONSE_SPECTRUM_DDAM);
    }
    else
    {
        ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_RESPONSE_SPECTRUM);
    }
    
    // Card 1
    SCALAR(mdmin);
    SCALAR(mdmax);
    SCALAR(fnmin) { DIMENSION = "f"; }
    SCALAR(fnmax) { DIMENSION = "f"; }
    RADIO(restrt)
    {
        ADD(0,"0:A new run including modal analysis");
        ADD(1,"1:Restart with d3eigv family files created elsewhere");
    }
    RADIO(mcomb)
    {
        ADD(0,"0:SRSS method");
        ADD(1,"1:NRC Grouping method");
        ADD(2,"2:Complete Quadratic Combination method");
        ADD(3,"3:Double Sum method");
        ADD(4,"4:NRL-SUM method");
        ADD(-4,"-4:NRL-SUM method with CSM (Closely Spaced Modes) treatment");
        ADD(-14,"-14:NRL-SUM method with CSM (Closely Spaced Modes) treatment, where the CSM pairs are defined by SID");
        ADD(5,"5:Double Sum method based on Gupta-Cordero coefficient");
        ADD(6,"6:Double Sum method based on modified Gupta-Cordero coefficient");
        ADD(7,"7:Rosenblueth method");
    }
    RADIO(relatv)
    {
        ADD(0,"0:Relative values (with respect to the ground) are provided");
        ADD(1,"1:Absolute values are provided");
    }
    
    // Card 2
    SCALAR(dampf);
    FUNCTION(lcdamp) {/FILTER/curveoption/0/EQ;}
    RADIO(ldtyp)
    {
        ADD(0,"0:Abscissa value defines frequency");
        ADD(1,"1:Abscissa value defines mode number");
    }
    SCALAR(dmpmas);
    SCALAR(dmpstf);
    
    if(ddam == 1)
    {
        // Card 3 for DDAM option
        RADIO(std)
        {
            ADD(1,"1:NRL-1396");
            ADD(-1,"-1:Spectrum constants defined by user in Card 5");
        }
        RADIO(unit)
        {
            ADD(1,"1:MKS (kg, m, s, N, Pa)");
            ADD(2,"2:GPA (kg, mm, ms, kN, GPa)");
            ADD(3,"3:MPA (ton, mm, s, N, MPa)");
            ADD(4,"4:BIN (lb, in, s, lbf, psi)");
            ADD(5,"5:miu_MKS (gm, mm, ms, N, N/mm2)");
            ADD(6,"6:CGS (gm, cm, s, dyne, dyne/cm2)");
        }
        SCALAR(amin) { DIMENSION = "acceleration"; }
        FLAG(vidoptions);
        if(vidoptions == TRUE)
        {
            DATA(vid_direction);
        }
        else
        {
            RADIO(vidvalue)
            {
                ADD(1,"1:X-direction");
                ADD(2,"2:Y-direction");
                ADD(3,"3:Z-direction");
            }
            SCALAR(x_c);
            SCALAR(y_c);
            SCALAR(z_c);
        }
        SCALAR(effmas);
        
        // Card 4a
        if(std > 0)
        {
            RADIO(shptyp)
            {
                ADD(1,"1:Submarine");
                ADD(2,"2:Surface ship");
            }
            RADIO(mount)
            {
                ADD(1,"1:Hull Mounted System");
                ADD(2,"2:Deck Mounted System");
                ADD(3,"3:Shell Plating Mounted System");
            }
            RADIO(movemt)
            {
                ADD(1,"1:Vertical");
                ADD(2,"2:Athwartship");
                ADD(3,"3:Fore and Aft");
            }
            RADIO(mattyp)
            {
                ADD(1,"1:Elastic");
                ADD(2,"2:Elasto-plastic");
            }
        }
        if(std == -1)
        {
            SCALAR(af);
            SCALAR(aa);
            SCALAR(ab);
            SCALAR(ac);
            SCALAR(ad);
            SCALAR(vf);
            SCALAR(va);
            SCALAR(vb);
            SCALAR(vc);
        }
        if(mcomb == -14)
        {
            DATA(mode_sid) { SUBTYPES = (/SETS/SET_MODE_IDPOOL) ;}
        }
    }
    else
    {
        SIZE(nspectrum);
        ARRAY(nspectrum, "")
        {
            RADIO(lctyp_input_specturm)
            {
                ADD(0, "0:Base velocity (vs. natural frequency)");
                ADD(1, "1:Base acceleration (vs. natural frequency)");
                ADD(2, "2:Base displacement (vs. natural frequency)");
                ADD(3, "3:Nodal force (vs. natural frequency)");
                ADD(4, "4:Pressure (vs. natural frequency)");
                ADD(5, "5:Base velocity (vs. natural period)");
                ADD(6, "6:Base acceleration (vs. natural period)");
                ADD(7, "7:Base displacement (vs. natural period)");
                ADD(8, "8:Nodal force (vs. natural period)");
                ADD(9, "9:Pressure (vs. natural period)");
                ADD(10, "10:Base velocity time history");
                ADD(11, "11:Base acceleration time history");
                ADD(12, "12:Base displacement time history");
            }
            RADIO(dof)
            {
                ADD(1, "1:X-translational degree-of-freedom");
                ADD(2, "2:Y-translational degree-of-freedom");
                ADD(3, "3:Z-translational degree-of-freedom");
                ADD(4, "4:Translational movement in direction given by vector VID");
            }
            FUNCTION(lc_tbid);
            SCALAR(sf);
            DATA(vid);
            RADIO(lntyp)
            {
                ADD(1, "1:Node ID");
                ADD(2, "2:Node set ID");
                ADD(3, "3:Segment set ID");
                ADD(4, "4:Part ID");
                ADD(5, "5:Part set ID");
            }
        
            if (lntyp == 1)
            {
                DATA(nids);
            }
            else if (lntyp == 2)
            {
                DATA(nsids);
            }
            else if (lntyp == 3)
            {
                DATA(ssids);
            }
            else if (lntyp == 4)
            {
                DATA(pids);
            }
            else if (lntyp == 5)
            {
                DATA(psids);
            }
            RADIO(inflag)
            {
                ADD(0, "0:Logarithmic interpolation");
                ADD(1, "1:Semi-logarithmic interpolation");
                ADD(2, "2:Linear interpolation");
            }
        }
    }
}

// File format
FORMAT(Keyword971_R11.2) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    if (IO_FLAG == 0)
    {
        if(ddam == 1)
        {
            HEADER("*FREQUENCY_DOMAIN_RESPONSE_SPECTRUM_DDAM");
        }
        else
        {
            HEADER("*FREQUENCY_DOMAIN_RESPONSE_SPECTRUM");
        }
    }
    
    if(IO_FLAG == 1)
    {
        HEADER("*FREQUENCY_DOMAIN_RESPONSE_SPECTRUM%5s",Type);
        if(Type == "_DDAM")
        {
            ASSIGN(ddam,1);
        }
        else
        {
            ASSIGN(ddam,0);
        }
    }
    
    COMMENT("$    MDMIN     MDMAX     FNMIN     FNMAX    RESTRT     MCOMB    RELATV");
    CARD("%10d%10d%10lg%10lg%10d%10d%10d",mdmin,mdmax,fnmin,fnmax,restrt,mcomb,relatv);
    
    COMMENT("$    DAMPF    LCDAMP     LDTYP    DMPMAS    DMPSTF");
    CARD("%10lg%10d%10d%10lg%10lg",dampf,lcdamp,ldtyp,dmpmas,dmpstf);
    
    if(ddam == 0)
    {
        if (IO_FLAG == 0)
        {
            COMMENT("$    LCTYP       DOF   LC/TBID        SF       VID      LNID     LNTYP    INFLAG");
            CARD_LIST(nspectrum)
            {
                CARD("%10d%10d%10d%10lg%10d%10d%10d%10d",lctyp_input_specturm, dof, lc_tbid, sf, vid, CELL_COND(  if (lntyp == 1)  
                                                                                                                      nids;
                                                                                                                  else if (lntyp == 2)  
                                                                                                                      nsids;
                                                                                                                  else if (lntyp == 3)  
                                                                                                                      ssids;
                                                                                                                  else if (lntyp == 4)  
                                                                                                                      pids;
                                                                                                                  else if (lntyp == 5)  
                                                                                                                      psids;),lntyp, inflag);
            }
        }
        else
        {
            FREE_CARD_LIST(nspectrum)
            { 
                CARD_PREREAD("%10s%10s%10s%10s%10s%10s%10d%10s",empty_string,empty_string,empty_string,empty_string,empty_string,empty_string,DUMMY_LNTYP,empty_string);
                CARD("%10d%10d%10d%10lg%10d%10d%10d%10d", lctyp_input_specturm, dof, lc_tbid, sf, vid, CELL_COND(  if(DUMMY_LNTYP == 1)
                                                                                                                            nids;
                                                                                                                   else if(DUMMY_LNTYP == 2)
                                                                                                                            nsids;
                                                                                                                   else if(DUMMY_LNTYP == 3)
                                                                                                                            ssids;
                                                                                                                   else if(DUMMY_LNTYP == 4)
                                                                                                                            pids;
                                                                                                                   else if(DUMMY_LNTYP == 5)
                                                                                                                            psids;), lntyp , inflag); 
                                                                        
                if(DUMMY_LNTYP == 1)
                {
                    ASSIGN(nsids, 0, IMPORT);
                    ASSIGN(ssids, 0, IMPORT);
                    ASSIGN(pids, 0, IMPORT);
                    ASSIGN(psids, 0, IMPORT);
                }
                else if(DUMMY_LNTYP == 2)
                {
                    ASSIGN(nids, 0, IMPORT);
                    ASSIGN(ssids, 0, IMPORT);
                    ASSIGN(pids, 0, IMPORT);
                    ASSIGN(psids, 0, IMPORT);
                }
                else if(DUMMY_LNTYP == 3)
                {
                    ASSIGN(nids, 0, IMPORT);
                    ASSIGN(nsids, 0, IMPORT);
                    ASSIGN(pids, 0, IMPORT);
                    ASSIGN(psids, 0, IMPORT);
                }
                else if(DUMMY_LNTYP == 4)
                {
                    ASSIGN(nids, 0, IMPORT);
                    ASSIGN(nsids, 0, IMPORT);
                    ASSIGN(ssids, 0, IMPORT);
                    ASSIGN(psids, 0, IMPORT);
                }
                else if(DUMMY_LNTYP == 5)
                {
                    ASSIGN(nids, 0, IMPORT);
                    ASSIGN(nsids, 0, IMPORT);
                    ASSIGN(ssids, 0, IMPORT);
                    ASSIGN(pids, 0, IMPORT);
                }
            }
        }
    }
    else
    {
        if(vidoptions == TRUE)
        {
            COMMENT("$      STD      UNIT      AMIN       VID                                  EFFMAS");
            CARD("%10d%10d%10lg%10d                              %10lg",std,unit,amin,SCALAR_OR_OBJECT(vidoptions,vidvalue,vid_direction),effmas);
        }
        else
        {
            COMMENT("$      STD      UNIT      AMIN       VID        XC        YC        ZC    EFFMAS");
            CARD("%10d%10d%10lg%10d%10lg%10lg%10lg%10lg",std,unit,amin,SCALAR_OR_OBJECT(vidoptions,vidvalue,vid_direction),x_c,y_c,z_c,effmas);
        }
        
        if(std > 0)
        {
            COMMENT("$   SHPTYP     MOUNT    MOVEMT    MATTYP");
            CARD("%10d%10d%10d%10d",shptyp,mount,movemt,mattyp);
        }
        if(std == -1)
        {
            COMMENT("$       AF        AA        AB        AC        AD");
            CARD("%10lg%10lg%10lg%10lg%10lg",af,aa,ab,ac,ad);
            COMMENT("$       VF        VA        VB        VC");
            CARD("%10lg%10lg%10lg%10lg",vf,va,vb,vc);
        }
        if(mcomb == -14)
        {
            COMMENT("$      SID");
            CARD("%10d",mode_sid);
        }
    }

}

// File format
FORMAT(Keyword971_R7.1) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    HEADER("*FREQUENCY_DOMAIN_RESPONSE_SPECTRUM");
    
    COMMENT("$    MDMIN     MDMAX     FNMIN     FNMAX    RESTRT     MCOMB");
    CARD("%10d%10d%10lg%10lg%10d%10d",mdmin,mdmax,fnmin,fnmax,restrt,mcomb);
    
    COMMENT("$    DAMPF    LCDAMP     LDTYP    DMPMAS    DMPSTF");
    CARD("%10lg%10d%10d%10lg%10lg",dampf,lcdamp,ldtyp,dmpmas,dmpstf);
    
    if (IO_FLAG == 0)
    {
        COMMENT("$    LCTYP       DOF   LC/TBID        SF       VID      LNID     LNTYP    INFLAG");
        CARD_LIST(nspectrum)
        {
            CARD("%10d%10d%10d%10lg%10d%10d%10d%10d",lctyp_input_specturm, dof, lc_tbid, sf, vid, CELL_COND(  if (lntyp == 1)  
                                                                                                                  nids;
                                                                                                              else if (lntyp == 2)  
                                                                                                                  nsids;
                                                                                                              else if (lntyp == 3)  
                                                                                                                  ssids;
                                                                                                              else if (lntyp == 4)  
                                                                                                                  pids;
                                                                                                              else if (lntyp == 5)  
                                                                                                                  psids;),lntyp, inflag);
        }
    }
    else
    {
        FREE_CARD_LIST(nspectrum)
        { 
            CARD_PREREAD("%10s%10s%10s%10s%10s%10s%10d%10s",empty_string,empty_string,empty_string,empty_string,empty_string,empty_string,DUMMY_LNTYP,empty_string);
            CARD("%10d%10d%10d%10lg%10d%10d%10d%10d", lctyp_input_specturm, dof, lc_tbid, sf, vid, CELL_COND(  if(DUMMY_LNTYP == 1)
                                                                                                                        nids;
                                                                                                               else if(DUMMY_LNTYP == 2)
                                                                                                                        nsids;
                                                                                                               else if(DUMMY_LNTYP == 3)
                                                                                                                        ssids;
                                                                                                               else if(DUMMY_LNTYP == 4)
                                                                                                                        pids;
                                                                                                               else if(DUMMY_LNTYP == 5)
                                                                                                                        psids;), lntyp , inflag); 
                                                                    
            if(DUMMY_LNTYP == 1)
            {
                ASSIGN(nsids, 0, IMPORT);
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(pids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            else if(DUMMY_LNTYP == 2)
            {
                ASSIGN(nids, 0, IMPORT);
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(pids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            else if(DUMMY_LNTYP == 3)
            {
                ASSIGN(nids, 0, IMPORT);
                ASSIGN(nsids, 0, IMPORT);
                ASSIGN(pids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            else if(DUMMY_LNTYP == 4)
            {
                ASSIGN(nids, 0, IMPORT);
                ASSIGN(nsids, 0, IMPORT);
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            else if(DUMMY_LNTYP == 5)
            {
                ASSIGN(nids, 0, IMPORT);
                ASSIGN(nsids, 0, IMPORT);
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(pids, 0, IMPORT);
            }
        }
    }
}

// File format
FORMAT(Keyword971_R6.1) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    HEADER("*FREQUENCY_DOMAIN_RESPONSE_SPECTRUM");
    
    COMMENT("$    MDMIN     MDMAX     FNMIN     FNMAX    RESTRT     MCOMB    RELATV");
    CARD("%10d%10d%10lg%10lg%10d%10d%10d",mdmin,mdmax,fnmin,fnmax,restrt,mcomb,relatv);
    
    COMMENT("$    DAMPF    LCDAMP     LDTYP    DMPMAS    DMPSTF");
    CARD("%10lg%10d%10d%10lg%10lg",dampf,lcdamp,ldtyp,dmpmas,dmpstf);
    
    if (IO_FLAG == 0)
    {
        COMMENT("$    LCTYP       DOF   LC/TBID        SF       VID      LNID     LNTYP    INFLAG");
        CARD_LIST(nspectrum)
        {
            CARD("%10d%10d%10d%10lg%10d%10d%10d%10d",lctyp_input_specturm, dof, lc_tbid, sf, vid, CELL_COND(  if (lntyp == 1)  
                                                                                                                  nids;
                                                                                                              else if (lntyp == 2)  
                                                                                                                  nsids;
                                                                                                              else if (lntyp == 3)  
                                                                                                                  ssids;
                                                                                                              else if (lntyp == 4)  
                                                                                                                  pids;
                                                                                                              else if (lntyp == 5)  
                                                                                                                  psids;),lntyp, inflag);
        }
    }
    else
    {
        FREE_CARD_LIST(nspectrum)
        { 
            CARD_PREREAD("%10s%10s%10s%10s%10s%10s%10d%10s",empty_string,empty_string,empty_string,empty_string,empty_string,empty_string,DUMMY_LNTYP,empty_string);
            CARD("%10d%10d%10d%10lg%10d%10d%10d%10d", lctyp_input_specturm, dof, lc_tbid, sf, vid, CELL_COND(  if(DUMMY_LNTYP == 1)
                                                                                                                        nids;
                                                                                                               else if(DUMMY_LNTYP == 2)
                                                                                                                        nsids;
                                                                                                               else if(DUMMY_LNTYP == 3)
                                                                                                                        ssids;
                                                                                                               else if(DUMMY_LNTYP == 4)
                                                                                                                        pids;
                                                                                                               else if(DUMMY_LNTYP == 5)
                                                                                                                        psids;), lntyp , inflag); 
                                                                    
            if(DUMMY_LNTYP == 1)
            {
                ASSIGN(nsids, 0, IMPORT);
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(pids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            else if(DUMMY_LNTYP == 2)
            {
                ASSIGN(nids, 0, IMPORT);
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(pids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            else if(DUMMY_LNTYP == 3)
            {
                ASSIGN(nids, 0, IMPORT);
                ASSIGN(nsids, 0, IMPORT);
                ASSIGN(pids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            else if(DUMMY_LNTYP == 4)
            {
                ASSIGN(nids, 0, IMPORT);
                ASSIGN(nsids, 0, IMPORT);
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            else if(DUMMY_LNTYP == 5)
            {
                ASSIGN(nids, 0, IMPORT);
                ASSIGN(nsids, 0, IMPORT);
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(pids, 0, IMPORT);
            }
        }
    }
}
