//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- define_transformation.cfg ---

ATTRIBUTES(COMMON)
{
  //INPUT ATTRIBUTES
  config                                  = VALUE(INT,    "For the available options");

  //TRANSL
  translation_x                           = VALUE(FLOAT,  "Parameter");
  translation_y                           = VALUE(FLOAT,  "Parameter");
  translation_z                           = VALUE(FLOAT,  "Parameter");

  //ROTATE

  //-flag off
  rotation_direction                      = VALUE(NODE,   "");
    rotation_direction_x                  = VALUE(FLOAT,  "");
    rotation_direction_y                  = VALUE(FLOAT,  "");
    rotation_direction_z                  = VALUE(FLOAT,  "");

  rotation_point                          = VALUE(NODE,   "");
    rotation_point_x                      = VALUE(FLOAT,  "");
    rotation_point_y                      = VALUE(FLOAT,  "");
    rotation_point_z                      = VALUE(FLOAT,  "");

  rotation_angle                          = VALUE(FLOAT,  "");

  //-flag on
  point1                                  = VALUE(TRANSFORMATION, "");
  point2                                  = VALUE(TRANSFORMATION, "");

  //SCALE
  scalefactor_x                           = VALUE(FLOAT, "");
  scalefactor_y                           = VALUE(FLOAT, "");
  scalefactor_z                           = VALUE(FLOAT, "");

  //MIRROR
  reflect_point1                          = VALUE(NODE,  "");
    reflect_point1_x                      = VALUE(FLOAT, "");
    reflect_point1_y                      = VALUE(FLOAT, "");
    reflect_point1_z                      = VALUE(FLOAT, "");

  reflect_point2                          = VALUE(NODE,  "");
    reflect_point2_x                      = VALUE(FLOAT, "");
    reflect_point2_y                      = VALUE(FLOAT, "");
    reflect_point2_z                      = VALUE(FLOAT, "");

  reflect_coordinatesystem                = VALUE(INT,   "");

  //POINT
  localid                                 = VALUE(INT,   "");
  position                                = VALUE(NODE,  "");
    position_x                            = VALUE(FLOAT, "");
    position_y                            = VALUE(FLOAT, "");
    position_z                            = VALUE(FLOAT, "");

  //POS6P
  point3                                  = VALUE(TRANSFORMATION, "");
  point4                                  = VALUE(TRANSFORMATION, "");
  point5                                  = VALUE(TRANSFORMATION, "");
  point6                                  = VALUE(TRANSFORMATION, "");

  //POS6N
  position_node1                          = VALUE(NODE, "");
  position_node2                          = VALUE(NODE, "");
  position_node3                          = VALUE(NODE, "");
  position_node4                          = VALUE(NODE, "");
  position_node5                          = VALUE(NODE, "");
  position_node6                          = VALUE(NODE, "");

  //TRANSL2ND
  translation_magnitude                       = VALUE(FLOAT,  "Distance");
  //HM INTERNAL
  KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
  LSD_TitleOpt                            = VALUE(INT,    "Title Flag");
  vectorbytwonodes                        = VALUE(INT,    "vector by two nodes");

  IO_FLAG                                 = VALUE(INT,    "");
  TITLE                                   = VALUE(STRING, "HEADING");
  _rotateOption                           = VALUE(STRING, "");
  _opt                                    = VALUE(STRING, "");
  _dummy_config                           = VALUE(STRING, "config value");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
  //INPUT ATTTIBUTES

  //HM INTERNAL
  KEYWORD_STR                             = 9000;
  LSD_TitleOpt                            = 90;


  IO_FLAG                                 = -1;
  TITLE                                   = -1;
  _rotateOption                           = -1;
  _opt                                    = -1;
  _dummy_config                           = -1;
}

GUI(COMMON)
{
  ASSIGN(KEYWORD_STR, "*DEFINE_TRANSFORMATION");

  FLAG(LSD_TitleOpt, "Title Flag");
  if(LSD_TitleOpt == 1)
  {
    ASSIGN(KEYWORD_STR, "_TITLE");
  }

  RADIO(config, "OPTION")
  {
    ADD(2,   "TRANSL");
    ADD(3,   "ROTATE");
    ADD(4,   "SCALE");
    ADD(5,   "MIRROR");
    ADD(101, "POINT");
    ADD(102, "POS6P");
    ADD(103, "POS6N");
    ADD(104, "ROTATE3NA");
    ADD(105, "TRANSL2ND");
  }

  //TRANSL
  if(config == 2)
  {
    SCALAR(translation_x, "A1")             { DIMENSION = "l" ; }
    SCALAR(translation_y, "A2")             { DIMENSION = "l" ; }
    SCALAR(translation_z, "A3")             { DIMENSION = "l" ; }
  }
  //ROTATE
  else if(config == 3)
  {
    FLAG(vectorbytwonodes, "vector by two nodes");
    if(vectorbytwonodes == 0)
    {
      DATA(rotation_direction, "A1 A2 A3");
      DATA(rotation_point, "A4 A5 A6");
      SCALAR(rotation_angle, "A7")          { DIMENSION = "a" ; }
    }
    else
    {
      DATA(point1, "A1");
      DATA(point2, "A2");
      SCALAR(rotation_angle, "A3")          { DIMENSION = "a" ; }
    }
  }
  //SCALE
  else if(config == 4)
  {
    SCALAR(scalefactor_x, "A1")             { DIMENSION = "l" ; }
    SCALAR(scalefactor_y, "A2")             { DIMENSION = "l" ; }
    SCALAR(scalefactor_z, "A3")             { DIMENSION = "l" ; }
  }
  //MIRROR
  else if(config == 5)
  {
    DATA(reflect_point1, "A1 A2 A3");
    DATA(reflect_point2, "A4 A5 A6");

    RADIO(reflect_coordinatesystem, "A7")
    {
      ADD(0, "0: Default");
      ADD(1, "1: Reflects the coordinate systems");
    }
  }
  //POINT
  else if(config == 101)
  {
    SCALAR(localid, "A1")                   { DIMENSION = "l" ; }
    DATA(position, "A2 A3 A4");
  }
  //POS6P
  else if(config == 102)
  {
    DATA(point1, "A1");
    DATA(point2, "A2");
    DATA(point3, "A3");
    DATA(point4, "A4");
    DATA(point5, "A5");
    DATA(point6, "A6");
  }
  //POS6N
  else if(config == 103)
  {
    DATA(position_node1, "A1");
    DATA(position_node2, "A2");
    DATA(position_node3, "A3");
    DATA(position_node4, "A4");
    DATA(position_node5, "A5");
    DATA(position_node6, "A6");
  }
  //ROTATE3NA
  else if(config == 104)
  {
    DATA(position_node1, "A1");
    DATA(position_node2, "A2");
    DATA(position_node2, "A3");
    SCALAR(rotation_angle, "A4")          { DIMENSION = "a" ; }
  }
  //TRANSL2ND
  else if(config == 105)
  {
    DATA(position_node1, "A1");
    DATA(position_node2, "A2");
    SCALAR(translation_magnitude, "A3")             { DIMENSION = "l" ; }
  }
}
FORMAT(Keyword971_R11.2)
{
  ASSIGN(IO_FLAG,0,EXPORT);
  ASSIGN(IO_FLAG,1,IMPORT);

  CARD_PREREAD("%-10s", _dummy_config);
  if(_dummy_config == "MIRROR")
  {
    ASSIGN(config, 5, IMPORT);
  }
  else if(_dummy_config == "SCALE")
  {
    ASSIGN(config, 4, IMPORT);
  }
  else if(_dummy_config == "ROTATE3NA")
  {
    ASSIGN(config, 104, IMPORT);
  } 
  else if(_dummy_config == "ROTATE")
  {
    ASSIGN(config, 3, IMPORT);
  }
  else if(_dummy_config == "TRANSL2ND")
  {
    ASSIGN(config, 105, IMPORT);
  } 
  else if(_dummy_config == "TRANSL")
  {
    ASSIGN(config, 2, IMPORT);
  }
  else if(_dummy_config == "POINT")
  {
    ASSIGN(config, 101, IMPORT);
  }
  else if(_dummy_config == "POS6P")
  {
    ASSIGN(config, 102, IMPORT);
  }
  else if(_dummy_config == "POS6N")
  {
    ASSIGN(config, 103, IMPORT);
  }

  //MIRROR
  if(config == 5)
  {
    ASSIGN(_dummy_config, MIRROR, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3        A4        A5        A6        A7");
    CARD("%-10s%10lg%10lg%10lg%10lg%10lg%10lg%10lg", _dummy_config, reflect_point1_x, reflect_point1_y, reflect_point1_z, reflect_point2_x, reflect_point2_y, reflect_point2_z, reflect_coordinatesystem);
  }
  //SCALE
  else if(config == 4)
  {
    ASSIGN(_dummy_config, SCALE, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3");
    CARD("%-10s%10lg%10lg%10lg", _dummy_config, scalefactor_x, scalefactor_y, scalefactor_z);
  }
  //ROTATE
  else if(config == 3)
  {
    CARD_PREREAD("%40s%10lg%10lg%10lg%10lg", _BLANK_, rotation_point_x, rotation_point_y, rotation_point_z, rotation_angle);
    if(IO_FLAG == 1 && rotation_point_x == 0. &&  rotation_point_y == 0. && rotation_point_z == 0. && rotation_angle == 0.)
    {
      ASSIGN(vectorbytwonodes, 1, IMPORT);
    }
    else
    {
      ASSIGN(vectorbytwonodes, 0, IMPORT);
    }

    ASSIGN(_dummy_config, ROTATE, EXPORT);
    if(vectorbytwonodes == 0)
    {
      COMMENT("$   OPTION        A1        A2        A3        A4        A5        A6        A7");
      CARD("%-10s%10lg%10lg%10lg%10lg%10lg%10lg%10lg", _dummy_config, rotation_direction_x, rotation_direction_y, rotation_direction_z, rotation_point_x, rotation_point_y, rotation_point_z, rotation_angle);
    }
    else
    {
      COMMENT("$   OPTION        A1        A2        A3");
      CARD("%-10s%10d%10d%10lg", _dummy_config, point1, point2, rotation_angle);
    }
  }
  //ROTATE3NA
  else if(config == 104)
  {
    ASSIGN(_dummy_config, ROTATE3NA, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3        A4");
    CARD("%-10s%10d%10d%10d%10lg", _dummy_config, position_node1, position_node2, position_node3,rotation_angle);
  }
  //TRANSL
  else if(config == 2)
  {
    ASSIGN(_dummy_config, TRANSL, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3");
    CARD("%-10s%10lg%10lg%10lg", _dummy_config, translation_x, translation_y, translation_z);
  }
  //TRANSL2ND
  else if(config == 105)
  {
    ASSIGN(_dummy_config, TRANSL2ND, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3");
    CARD("%-10s%10d%10d%10lg", _dummy_config, position_node1, position_node2, translation_magnitude);
  }
  //POINT
  else if(config == 101)
  {
    ASSIGN(_dummy_config, POINT, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3        A4");
    CARD("%-10s%10d%10lg%10lg%10lg", _dummy_config, localid, position_x, position_y, position_z);
  }
  //POS6P
  else if(config == 102)
  {
    ASSIGN(_dummy_config, POS6P, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3        A4        A5        A6");
    CARD("%-10s%10d%10d%10d%10d%10d%10d", _dummy_config, point1, point2, point3, point4, point5, point6);
  }
  //POS6N
  else if(config == 103)
  {
    ASSIGN(_dummy_config, POS6N, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3        A4        A5        A6");
    CARD("%-10s%10d%10d%10d%10d%10d%10d", _dummy_config, position_node1, position_node2, position_node3, position_node4, position_node5, position_node6);
  }
}

FORMAT(Keyword971_R10.1)
{
  ASSIGN(IO_FLAG,0,EXPORT);
  ASSIGN(IO_FLAG,1,IMPORT);

  CARD_PREREAD("%-10s", _dummy_config);
  if(_dummy_config == "MIRROR")
  {
    ASSIGN(config, 5, IMPORT);
  }
  else if(_dummy_config == "SCALE")
  {
    ASSIGN(config, 4, IMPORT);
  }
  else if(_dummy_config == "ROTATE")
  {
    ASSIGN(config, 3, IMPORT);
  }
  else if(_dummy_config == "TRANSL")
  {
    ASSIGN(config, 2, IMPORT);
  }
  else if(_dummy_config == "POINT")
  {
    ASSIGN(config, 101, IMPORT);
  }
  else if(_dummy_config == "POS6P")
  {
    ASSIGN(config, 102, IMPORT);
  }
  else if(_dummy_config == "POS6N")
  {
    ASSIGN(config, 103, IMPORT);
  }

  //MIRROR
  if(config == 5)
  {
    ASSIGN(_dummy_config, MIRROR, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3        A4        A5        A6        A7");
    CARD("%-10s%10lg%10lg%10lg%10lg%10lg%10lg%10lg", _dummy_config, reflect_point1_x, reflect_point1_y, reflect_point1_z, reflect_point2_x, reflect_point2_y, reflect_point2_z, reflect_coordinatesystem);
  }
  //SCALE
  else if(config == 4)
  {
    ASSIGN(_dummy_config, SCALE, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3");
    CARD("%-10s%10lg%10lg%10lg", _dummy_config, scalefactor_x, scalefactor_y, scalefactor_z);
  }
  //ROTATE
  else if(config == 3)
  {
    CARD_PREREAD("%40s%10lg%10lg%10lg%10lg", _BLANK_, rotation_point_x, rotation_point_y, rotation_point_z, rotation_angle);
    if(IO_FLAG == 1 && rotation_point_x == 0 &&  rotation_point_y == 0 && rotation_point_z == 0 && rotation_angle == 0)
    {
      ASSIGN(vectorbytwonodes, 1, IMPORT);
    }
    else
    {
      ASSIGN(vectorbytwonodes, 0, IMPORT);
    }

    ASSIGN(_dummy_config, ROTATE, EXPORT);
    if(vectorbytwonodes == 0)
    {
      COMMENT("$   OPTION        A1        A2        A3        A4        A5        A6        A7");
      CARD("%-10s%10lg%10lg%10lg%10lg%10lg%10lg%10lg", _dummy_config, rotation_direction_x, rotation_direction_y, rotation_direction_z, rotation_point_x, rotation_point_y, rotation_point_z, rotation_angle);
    }
    else
    {
      COMMENT("$   OPTION        A1        A2        A3");
      CARD("%-10s%10d%10d%10lg", _dummy_config, point1, point2, rotation_angle);
    }
  }
  //TRANSL
  else if(config == 2)
  {
    ASSIGN(_dummy_config, TRANSL, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3");
    CARD("%-10s%10lg%10lg%10lg", _dummy_config, translation_x, translation_y, translation_z);
  }
  //POINT
  else if(config == 101)
  {
    ASSIGN(_dummy_config, POINT, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3        A4");
    CARD("%-10s%10d%10lg%10lg%10lg", _dummy_config, localid, position_x, position_y, position_z);
  }
  //POS6P
  else if(config == 102)
  {
    ASSIGN(_dummy_config, POS6P, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3        A4        A5        A6");
    CARD("%-10s%10d%10d%10d%10d%10d%10d", _dummy_config, point1, point2, point3, point4, point5, point6);
  }
  //POS6N
  else if(config == 103)
  {
    ASSIGN(_dummy_config, POS6N, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3        A4        A5        A6");
    CARD("%-10s%10d%10d%10d%10d%10d%10d", _dummy_config, position_node1, position_node2, position_node3, position_node4, position_node5, position_node6);
  }
}

FORMAT(Keyword971_R9.3)
{
  ASSIGN(IO_FLAG,0,EXPORT);
  ASSIGN(IO_FLAG,1,IMPORT);

  CARD_PREREAD("%-10s", _dummy_config);
  if(_dummy_config == "MIRROR")
  {
    ASSIGN(config, 5, IMPORT);
  }
  else if(_dummy_config == "SCALE")
  {
    ASSIGN(config, 4, IMPORT);
  }
  else if(_dummy_config == "ROTATE")
  {
    ASSIGN(config, 3, IMPORT);
  }
  else if(_dummy_config == "TRANSL")
  {
    ASSIGN(config, 2, IMPORT);
  }
  else if(_dummy_config == "POINT")
  {
    ASSIGN(config, 101, IMPORT);
  }
  else if(_dummy_config == "POS6P")
  {
    ASSIGN(config, 102, IMPORT);
  }

  //MIRROR
  if(config == 5)
  {
    ASSIGN(_dummy_config, MIRROR, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3        A4        A5        A6        A7");
    CARD("%-10s%10lg%10lg%10lg%10lg%10lg%10lg%10lg", _dummy_config, reflect_point1_x, reflect_point1_y, reflect_point1_z, reflect_point2_x, reflect_point2_y, reflect_point2_z, reflect_coordinatesystem);
  }
  //SCALE
  else if(config == 4)
  {
    ASSIGN(_dummy_config, SCALE, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3");
    CARD("%-10s%10lg%10lg%10lg", _dummy_config, scalefactor_x, scalefactor_y, scalefactor_z);
  }
  //ROTATE
  else if(config == 3)
  {
    CARD_PREREAD("%40s%10lg%10lg%10lg%10lg", _BLANK_, rotation_point_x, rotation_point_y, rotation_point_z, rotation_angle);
    if(IO_FLAG == 1 && rotation_point_x == 0 &&  rotation_point_y == 0 && rotation_point_z == 0 && rotation_angle == 0)
    {
      ASSIGN(vectorbytwonodes, 1, IMPORT);
    }
    else
    {
      ASSIGN(vectorbytwonodes, 0, IMPORT);
    }

    ASSIGN(_dummy_config, ROTATE, EXPORT);
    if(vectorbytwonodes == 0)
    {
      COMMENT("$   OPTION        A1        A2        A3        A4        A5        A6        A7");
      CARD("%-10s%10lg%10lg%10lg%10lg%10lg%10lg%10lg", _dummy_config, rotation_direction_x, rotation_direction_y, rotation_direction_z, rotation_point_x, rotation_point_y, rotation_point_z, rotation_angle);
    }
    else
    {
      COMMENT("$   OPTION        A1        A2        A3");
      CARD("%-10s%10d%10d%10lg", _dummy_config, point1, point2, rotation_angle);
    }
  }
  //TRANSL
  else if(config == 2)
  {
    ASSIGN(_dummy_config, TRANSL, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3");
    CARD("%-10s%10lg%10lg%10lg", _dummy_config, translation_x, translation_y, translation_z);
  }
  //POINT
  else if(config == 101)
  {
    ASSIGN(_dummy_config, POINT, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3        A4");
    CARD("%-10s%10d%10lg%10lg%10lg", _dummy_config, localid, position_x, position_y, position_z);
  }
  //POS6P
  else if(config == 102)
  {
    ASSIGN(_dummy_config, POS6P, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3        A4        A5        A6");
    CARD("%-10s%10d%10d%10d%10d%10d%10d", _dummy_config, point1, point2, point3, point4, point5, point6);
  }
}

FORMAT(Keyword971)
{
  ASSIGN(IO_FLAG,0,EXPORT);
  ASSIGN(IO_FLAG,1,IMPORT);

  CARD_PREREAD("%-10s", _dummy_config);
  if(_dummy_config == "SCALE")
  {
    ASSIGN(config, 4, IMPORT);
  }
  else if(_dummy_config == "ROTATE")
  {
    ASSIGN(config, 3, IMPORT);
  }
  else if(_dummy_config == "TRANSL")
  {
    ASSIGN(config, 2, IMPORT);
  }
  else if(_dummy_config == "POINT")
  {
    ASSIGN(config, 101, IMPORT);
  }
  else if(_dummy_config == "POS6P")
  {
    ASSIGN(config, 102, IMPORT);
  }

  //SCALE
  if(config == 4)
  {
    ASSIGN(_dummy_config, SCALE, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3");
    CARD("%-10s%10lg%10lg%10lg", _dummy_config, scalefactor_x, scalefactor_y, scalefactor_z);
  }
  //ROTATE
  else if(config == 3)
  {
    CARD_PREREAD("%40s%10lg%10lg%10lg%10lg", _BLANK_, rotation_point_x, rotation_point_y, rotation_point_z, rotation_angle);
    if(IO_FLAG == 1 && rotation_point_x == 0 &&  rotation_point_y == 0 && rotation_point_z == 0 && rotation_angle == 0)
    {
      ASSIGN(vectorbytwonodes, 1, IMPORT);
    }
    else
    {
      ASSIGN(vectorbytwonodes, 0, IMPORT);
    }

    ASSIGN(_dummy_config, ROTATE, EXPORT);
    if(vectorbytwonodes == 0)
    {
      COMMENT("$   OPTION        A1        A2        A3        A4        A5        A6        A7");
      CARD("%-10s%10lg%10lg%10lg%10lg%10lg%10lg%10lg", _dummy_config, rotation_direction_x, rotation_direction_y, rotation_direction_z, rotation_point_x, rotation_point_y, rotation_point_z, rotation_angle);
    }
    else
    {
      COMMENT("$   OPTION        A1        A2        A3");
      CARD("%-10s%10d%10d%10lg", _dummy_config, point1, point2, rotation_angle);
    }
  }
  //TRANSL
  else if(config == 2)
  {
    ASSIGN(_dummy_config, TRANSL, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3");
    CARD("%-10s%10lg%10lg%10lg", _dummy_config, translation_x, translation_y, translation_z);
  }
  //POINT
  else if(config == 101)
  {
    ASSIGN(_dummy_config, POINT, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3        A4");
    CARD("%-10s%10d%10lg%10lg%10lg", _dummy_config, localid, position_x, position_y, position_z);
  }
  //POS6P
  else if(config == 102)
  {
    ASSIGN(_dummy_config, POS6P, EXPORT);
    COMMENT("$   OPTION        A1        A2        A3        A4        A5        A6");
    CARD("%-10s%10d%10d%10d%10d%10d%10d", _dummy_config, point1, point2, point3, point4, point5, point6);
  }
}