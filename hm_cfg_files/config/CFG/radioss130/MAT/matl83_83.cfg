//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 83

ATTRIBUTES(COMMON) {

    KEYWORD_STR             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS            = SIZE("NUM_COMMENTS");
    CommentEnumField        = VALUE(INT,"User Comments");
    COMMENTS                = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    MAT_RHO                 = VALUE(FLOAT,"Initial Density");
    Refer_Rho               = VALUE(FLOAT,"Reference Density (for lower than 14.0 version)");
    DUMMY                   = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    MAT_REFRHO_Option       = VALUE(INT, "RefRho_Option");
    MAT_E                   = VALUE(FLOAT, "Young's Modulus in the Normal Direction per Length");
    FUN_A1                  = VALUE(FUNCT,"Function Defining Engineer Yield Stress Vs Displacement");
    FScale11                = VALUE(FLOAT,"Scale Factor for Yield Function");
    FScale22                = VALUE(FLOAT,"Scale Factor for Abscissa in Yield Function");
    MAT_Beta                = VALUE(FLOAT,"Parameter for Yield Function");
    MAT_ALPHA               = VALUE(FLOAT,"Parameter for Yield Function");
    MAT_R00                 = VALUE(FLOAT,"Parameter for Plastic Strain Dependency in Normal Direction Used if No FUN_A2 is Given");
    MAT_R45                 = VALUE(FLOAT,"Parameter for plastic Strain Dependency in Tangential Direction Used if No FUN_A3 is Given");
    Fsmooth                 = VALUE(INT,"Strain Rate Filtering Flag");
    Fcut                    = VALUE(FLOAT,"Cutoff Frequency for the Strain Rate Filtering");
    FUN_A2                  = VALUE(FUNCT,"Function Defining a Scale Factor for Displacement Rate Dependency in Normal Direction");
    FUN_A3                  = VALUE(FUNCT,"Function Defining a Scale Factor for Displacement Rate Dependency in Tangential Direction");
    FScale33                = VALUE(FLOAT,"Scale Factor for the Abscissa Strain Rate");
    Heat_Inp_opt            = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT         = VALUE(SUBOBJECT, "");
    THERM_STRESS            = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS     = VALUE(SUBOBJECT, "");
    IO_FLAG                 = VALUE(INT, "");
    TITLE                   = VALUE(STRING,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR             = 9000;
    COMMENTS                = 5109;
    CommentEnumField        = 7951;
    MAT_REFRHO_Option       = 4285;
    MAT_RHO                 = 118;
    Refer_Rho               = 4229;
    FScale11                = 4050;
    FScale22                = 4051;
    FScale33                = 4052;
    FUN_A1                  = 45;
    FUN_A2                  = 170;
    FUN_A3                  = 172;
    Fcut                    = 5356;
    Fsmooth                 = 5355;
    MAT_ALPHA               = 349;
    MAT_Beta                = 5007;
    MAT_E                   = 119;
    MAT_R00                 = 5077;
    MAT_R45                 = 5078;
    NUM_COMMENTS            = 5110;
    DUMMY                   = -1;
    Heat_Inp_opt            = 4346;
    SUBGRP_HEAT_MAT         = -1;
    THERM_STRESS            = 4555;
    SUBGRP_THERM_STRESS     = -1;
    IO_FLAG                 = -1;
    TITLE                   = -1;
}

DRAWABLES(COMMON) {
    public:
    INITIAL_DENSITY         = SCALAR(MAT_RHO);
    YOUNG_MODULUS           = SCALAR(MAT_E);
    public:
    SOUND_SPEED             = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                       = EVAL(YOUNG_MODULUS/2);
    C1                      = EVAL(YOUNG_MODULUS/3);
public:
    SOUND_SPEED_SOLID       = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}
CHECK(COMMON)
{
    MAT_RHO                 >0.0;
}

DEFAULTS(COMMON)
{
    FScale11                = 1.0;
    FScale22                = 1.0;
    FScale33                = 1.0;
    Fcut                    = 1.0e30;
    Fsmooth                 = 0;
    MAT_Beta                = 2.0;
    MAT_R00                 = 1.0;
    MAT_R45                 = 1.0;
}

GUI(COMMON) 
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    ASSIGN(KEYWORD_STR, "/MAT");
    ASSIGN(KEYWORD_STR, "/LAW83/");
    FLAG(MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho)      { DIMENSION="density";       }
    }
mandatory:
    SCALAR(MAT_RHO)      { DIMENSION="density";            }
    SCALAR(MAT_E){DIMENSION="PRESSURE PER UNIT LENGTH";}
mandatory:
    DATA(FUN_A1);
    /*
    {
    Y_TITLE = "Engineer yield stress" ;
    Y_DIMENSION="pressure";
    X_TITLE = "Displacement";
    X_DIMENSION="l";
    }
    */
optional:
    SCALAR(FScale11){DIMENSION="pressure";}
    SCALAR(FScale22){DIMENSION="l";}
    SCALAR(MAT_ALPHA);
    SCALAR(MAT_Beta);
    SCALAR(MAT_R00){DIMENSION="pressure";}
    SCALAR(MAT_R45){DIMENSION="pressure";}
    RADIO(Fsmooth)
    {
        ADD(0,"0: No Strain Rate Filtering");
        ADD(1,"1: Strain Rate Filtering");
    }
    SCALAR(Fcut){DIMENSION="f";}
    DATA(FUN_A2);
    /*
    {
    X_TITLE="DISPLACEMENT RATE"; X_DIMENSION="velocity";
    Y_TITLE="SCALE FACTOR"; Y_DIMENSION="DIMENSIONLESS";
    }
    */
    DATA(FUN_A3);
    /*
    {
    X_TITLE="DISPLACEMENT RATE"; X_DIMENSION="velocity";
    Y_TITLE="SCALE FACTOR"; Y_DIMENSION="DIMENSIONLESS";
    }
    */
    SCALAR(FScale33){DIMENSION="velocity";}

    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    } 

    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
/*
    graphical SUPPORT("Support") 
    {
    OBJECTS=(/COMPONENT/BRICK);
    ADD(COMPONENT,"Parts");
    }
    */
}

FORMAT(radioss130)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 0)
    {
        HEADER("/MAT/LAW83/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                  E");
    CARD("%20lg",MAT_E);
    COMMENT("#  Fct_ID1                      Y_scale1            X_scale1               ALPHA                BETA");
    CARD("%10d          %20lg%20lg%20lg%20lg",FUN_A1,FScale11,FScale22,MAT_ALPHA,MAT_Beta);
    COMMENT("#                 RN                  RS   Fsmooth                Fcut");
    CARD("%20lg%20lg%10d%20lg",MAT_R00,MAT_R45,Fsmooth,Fcut);      
    COMMENT("#  Fct_IDN   Fct_IDS              XSCALE");
    CARD("%10d%10d%20lg",FUN_A2,FUN_A3,FScale33);
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}