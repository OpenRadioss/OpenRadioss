//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//Material law 21 (DPRAG) Setup File
ATTRIBUTES(COMMON) {
    KEYWORD_STR                     = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                    = SIZE("NUM_COMMENTS");
    CommentEnumField                = VALUE(INT,"User Comments");
    COMMENTS                        = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    // Initial and reference densities
    MAT_RHO                         = VALUE(FLOAT,"Initial Density");
    Refer_Rho                       = VALUE(FLOAT,"Reference Density (for lower than 14.0 version)");
    DUMMY                           = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    MAT_REFRHO_Option               = VALUE(INT, "RefRho_Option");
    // Other values
    MAT_E                           = VALUE(FLOAT, "Young's Modulus");
    MAT_NU                          = VALUE(FLOAT, "Poisson's Ratio");
    MAT_A0                          = VALUE(FLOAT, "Coefficient A0");
    MAT_A1                          = VALUE(FLOAT, "Coefficient A1");
    MAT_A2                          = VALUE(FLOAT, "Coefficient A2");
    MAT_AMAX                        = VALUE(FLOAT, "Von Mises Limit");
    FUN_A1                          = VALUE(FUNCT, "Function Describing P Vs. Mu");
    PFscale                         = VALUE(FLOAT, "Y-Scale Factor for Pressure Function");
    MAT_BULK                        = VALUE(FLOAT, "Tensile Bulk Modulus");
    MAT_PC                          = VALUE(FLOAT, "Minimum Pressure");
    PEXT                            = VALUE(FLOAT, "External Pressure");
    MAT_K_UNLOAD                    = VALUE(FLOAT, "Unloading Bulk Modulus");
    MAT_SIG                         = VALUE(FLOAT, "Maximum Compression");  
    // HEAT
    Heat_Inp_opt                    = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT                 = VALUE(SUBOBJECT, "");
    // THERM_STRESS
    THERM_STRESS                    = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS             = VALUE(SUBOBJECT, "");
    ALE_Form                        = VALUE(INT, "Flag for Heat Transfer Formulation");
    SUBGRP_ALE_MAT                  = VALUE(SUBOBJECT, "");
    SUBGRP_EULER_MAT                = VALUE(SUBOBJECT, "");
    Mat_Name_OR_LawNo               = VALUE(INT, "");
    TITLE                           = VALUE(STRING,"");
    IO_FLAG                         = VALUE(INT, "");
    LAW_NO                          = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                     = 9000;
    COMMENTS                        = 5109;
    CommentEnumField                = 7951;
    MAT_REFRHO_Option               = 4285;
    MAT_RHO                         = 118;
    Refer_Rho                       = 4229;
    MAT_E                           = 119;
    MAT_NU                          = 120;
    MAT_A0                          = 279;
    MAT_A1                          = 280;
    MAT_A2                          = 281;
    MAT_AMAX                        = 5041;
    MAT_BULK                        = 223;
    MAT_K_UNLOAD                    = 5050;
    MAT_PC                          = 282;
    MAT_SIG                         = 5038;
    PEXT                            = 8144;
    PFscale                         = 4047;
    FUN_A1                          = 45;
    NUM_COMMENTS                    = 5110;
    Mat_Name_OR_LawNo               = 4538;
    LAW_NO                          = -1;
    IO_FLAG                         = -1;
    TITLE                           = -1;
    DUMMY                           = -1;
    //HEAT
    Heat_Inp_opt                    = 4346;
    SUBGRP_HEAT_MAT                 = -1;
    // THERM_STRESS
    THERM_STRESS                    = 4555;
    SUBGRP_THERM_STRESS             = -1;
    ALE_Form                        = 4336;
    SUBGRP_ALE_MAT                  = -1;
    SUBGRP_EULER_MAT                = -1;
}
DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY   = SCALAR(MAT_RHO);
    YOUNG_MODULUS     = SCALAR(MAT_E);
    POISSON_RATIO     = SCALAR(MAT_NU);
public:
    SOUND_SPEED       = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}
CHECK(COMMON)
{
    MAT_BULK                        >0;
    MAT_RHO                         >0.0;
}

DEFAULTS(COMMON) {
    PFscale                         = 1.;
    MAT_AMAX                        = 1.0e30;
    MAT_PC                          = -1.0e30;
    PEXT                            = 0.0;
}

PARAMETERS(PARAMETERS) {
    MAT_RHO                         = INPUT_SCALAR(MAT_RHO,"Initial density");
    MAT_E                           = INPUT_SCALAR(MAT_E,"Young modulus");
    MAT_NU                          = INPUT_SCALAR(MAT_NU,"Poisson ratio");
    MAT_A0                          = INPUT_SCALAR(MAT_A0,"A0");
    MAT_A1                          = INPUT_SCALAR(MAT_A1,"A1");
    MAT_A2                          = INPUT_SCALAR(MAT_A2,"A2");
    MAT_AMAX                        = INPUT_SCALAR(MAT_AMAX,"Von Mises limit");
    // facteur d'echelle de la courbe P(mu) 
    // rien a voir avec Refer_Rho ...
    SCALE21                         = INPUT_SCALAR(Refer_Rho,"P(mu) scale factor");
    MAT_BULK                        = INPUT_SCALAR(MAT_BULK, "Tensile bulk mod.");
    MAT_PC                          = INPUT_SCALAR(MAT_PC,"Min pressure");
    MAT_K_UNLOAD21                  = INPUT_SCALAR(MAT_K_UNLOAD,"Unloading bulk mod.");
    MAT_SIG                         = INPUT_SCALAR(MAT_SIG,"Max compression");
}

GUI(COMMON) {
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Mat_Name_OR_LawNo ==2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW21/");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/DPRAG/");
    }
    FLAG(MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho)      { DIMENSION="density";}
    }
    mandatory:
        SCALAR(MAT_RHO)      { DIMENSION="density";   }
    mandatory:
        SCALAR(MAT_E)      { DIMENSION="pressure";           } 
    optional:
        SCALAR(MAT_NU)     { DIMENSION="DIMENSIONLESS";      }
    mandatory:
        SCALAR(MAT_A0)     { DIMENSION="square_of_pressure"; }
        SCALAR(MAT_A1)     { DIMENSION="pressure";           }
        SCALAR(MAT_A2)     { DIMENSION="DIMENSIONLESS";      }
    optional:
        SCALAR(MAT_AMAX)  { DIMENSION="square_of_pressure"; }
        graphical DATA(FUN_A1);
        SCALAR(MAT_BULK)    { DIMENSION="pressure";           }
        SCALAR(PFscale);
        SCALAR(MAT_PC)  { DIMENSION="pressure";           }
        SCALAR(PEXT)  { DIMENSION="pressure";           }
        SCALAR(MAT_K_UNLOAD)      { DIMENSION="pressure";           }
        SCALAR(MAT_SIG) { DIMENSION="DIMENSIONLESS";      } 

        // HEAT data
        graphical FLAG(Heat_Inp_opt);
        if (Heat_Inp_opt!= 0) {
            SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
        } 
        // THERM_STRESS
        graphical FLAG(THERM_STRESS);
        if (THERM_STRESS!= 0) {
            SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
        }
    /*
    optional:
    graphical SUPPORT("Support") {
    OBJECTS=(/COMPONENT/QUAD,/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/PENTA6,/COMPONENT/LINEAR_THICK,
    /COMPONENT/TETRA10,/COMPONENT/SHEL16,/COMPONENT/BRIC20,/COMPONENT/SPHCEL);
    ADD(COMPONENT,"Parts");
    }
    */
}

GUI(ALE) {
optional:
    graphical RADIO(ALE_Form) 
    {
        ADD(1,"NONE");
        ADD(2,"ALE");
        ADD(3,"EULER");
    }
    if(ALE_Form == 2)
    {    
        SUBOBJECT(SUBGRP_ALE_MAT) {SUBTYPES = (/SUBOBJECT/ALE_MAT);}
    }
    else if(ALE_Form == 3)
    {
        SUBOBJECT(SUBGRP_EULER_MAT) {SUBTYPES = (/SUBOBJECT/EULER);}
    }
}

FORMAT(radioss130) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }

    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW21/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/DPRAG/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                  E                  Nu");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    COMMENT("#                 A0                  A1                  A2                Amax");
    CARD("%20lg%20lg%20lg%20lg",MAT_A0,MAT_A1,MAT_A2,MAT_AMAX);
    COMMENT("# func_IDf                            Kt             FscaleP");
    CARD("%10d          %20lg%20lg",FUN_A1,MAT_BULK,PFscale);
    COMMENT("#              P_min               P_ext");
    CARD("%20lg%20lg",MAT_PC,PEXT);
    COMMENT("#                  B              Mu_max");
    CARD("%20lg%20lg",MAT_K_UNLOAD,MAT_SIG);
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
    if(ALE_Form == 2)
    {
        SUBOBJECTS(SUBGRP_ALE_MAT,/SUBOBJECT/ALE_MAT);
    }
    else if(ALE_Form == 3)
    {
        SUBOBJECTS(SUBGRP_EULER_MAT,/SUBOBJECT/EULER);
    }
}
FORMAT(radioss51) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }

    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW21/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/DPRAG/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#        Init. dens.          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#        Init. dens.");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                  E                  Nu");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    COMMENT("#                 A0                  A1                  A2                Amax");
    CARD("%20lg%20lg%20lg%20lg",MAT_A0,MAT_A1,MAT_A2,MAT_AMAX);
    COMMENT("# func_IDf                            Kt             FscaleP");
    CARD("%10d          %20lg%20lg",FUN_A1,MAT_BULK,PFscale);
    COMMENT("#              P_min");
    CARD("%20lg",MAT_PC);
    COMMENT("#                  B              Mu_max");
    CARD("%20lg%20lg",MAT_K_UNLOAD,MAT_SIG);
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
    if(ALE_Form == 2)
    {
        SUBOBJECTS(SUBGRP_ALE_MAT,/SUBOBJECT/ALE_MAT);
    }
    else if(ALE_Form == 3)
    {
        SUBOBJECTS(SUBGRP_EULER_MAT,/SUBOBJECT/EULER);
    }
}
FORMAT(radioss41) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    COMMENT("#    Init. dens.");
    CARD("%16lg",MAT_RHO);
    COMMENT("#              E              Nu");
    CARD("%16lg%16lg",MAT_E,MAT_NU);
    COMMENT("#             A0              A1              A2            Amax");
    CARD("%16lg%16lg%16lg%16lg",MAT_A0,MAT_A1,MAT_A2,MAT_AMAX);
    COMMENT("#     If                      Kt");
    CARD("%8d        %16lg",FUN_A1,MAT_BULK);
    COMMENT("#          P_min");
    CARD("%16lg",MAT_PC);
    COMMENT("#              B          Mu_max");
    CARD("%16lg%16lg",MAT_K_UNLOAD,MAT_SIG);
}