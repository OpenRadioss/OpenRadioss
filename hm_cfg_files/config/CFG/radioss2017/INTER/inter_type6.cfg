//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// /INTER/TYPE6
// 

ATTRIBUTES(COMMON)
{
    // INPUT ATTRIBUTES

    secondaryentityids                        = VALUE(SETS, "Rigid surface 1 identifier") { SUBTYPES = (/SETS/SURF) ; }
    mainentityids                             = VALUE(SETS, "Rigid surface 2 identifier") { SUBTYPES = (/SETS/SURF) ; }
    Friction_phi                              = VALUE(FLOAT, "Static friction force");
    FRIC                                      = VALUE(FLOAT, "Coulomb friction");
    GAP                                       = VALUE(FLOAT, "Gap for impact activation");
    TSTART                                    = VALUE(FLOAT, "Interface activation time");
    TSTOP                                     = VALUE(FLOAT, "Interface deactivation time");
    Gflag                                     = VALUE(INT, "Renumbering flag for segments of first surface");
    Vflag                                     = VALUE(INT, "Renumbering flag for segments of second surface  (same as IRS)");
    INACTIV                                   = VALUE(INT, "Deactivation flag of stiffness in case of initial penetrations");
    Crx_Fun                                   = VALUE(FUNCT, "Friction multiplier vs normal force");
    Cry_Fun                                   = VALUE(FUNCT, "Friction multiplier vs sliding velocity");
    scale1                                    = VALUE(FLOAT, "Abcissa scale factor for velocity functions (fct_IDff and fct_IDdv)");
    scale2                                    = VALUE(FLOAT, "Abcissa scale factor for force functions (fct_IDff and fct_IDdv)");
    FUN_A1                                    = VALUE(FUNCT, "Force vs penetration curve function identifier");
    HFLAG1                                    = VALUE(INT, "Contact formulation flag");
    FACX                                      = VALUE(FLOAT, "Abscissa scale factor on fct_IDId and fct_IDul");
    FAC                                       = VALUE(FLOAT, "Ordinate scale factor on fct_IDId");
    ISFLAG                                    = VALUE(INT, "Adjusting force flag, due to initial intersection");
    FUNCT_ID                                  = VALUE(FUNCT, "Force vs penetration curve for unload function identifier");
    STIFF1                                    = VALUE(FLOAT, "Loading/unloading stiffness used when transitioning between curves");
    PFscale                                   = VALUE(FLOAT, "Ordinate scale factor for unload fct_IDul");
    VISC                                      = VALUE(FLOAT, "Damping coefficient");
    Crz_Fun                                   = VALUE(FUNCT, "Damping force function vs. penetration velocity");
    Ctx_Fun                                   = VALUE(FUNCT, "Damping multiplier function vs. normal force");
    scale3                                    = VALUE(FLOAT, "Ordinate scale factor on fct_IDdv");

    //HM INTERNAL
    KEYWORD_STR                               = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                              = SIZE("NUM_COMMENTS");
    CommentEnumField                          = VALUE(INT, "User Comments");
    COMMENTS                                  = ARRAY[NUM_COMMENTS](STRING, "Entity Comments");

    TITLE                                     = VALUE(STRING, "Title");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES

    Friction_phi                              = 4586;
    FRIC                                      = 5;
    GAP                                       = 5153;
    TSTART                                    = 11;
    TSTOP                                     = 12;
    Gflag                                     = 5112;
    Vflag                                     = 5113;
    INACTIV                                   = 94;
    Crx_Fun                                   = 4125;
    Cry_Fun                                   = 4126;
    scale1                                    = 4528;
    scale2                                    = 4529;
    FUN_A1                                    = 45;
    HFLAG1                                    = 5163;
    FACX                                      = 4017;
    FAC                                       = 4018;
    ISFLAG                                    = 5158;
    FUNCT_ID                                  = 4556;
    STIFF1                                    = 1131;
    PFscale                                   = 4047;
    VISC                                      = 7026;
    Crz_Fun                                   = 4127;
    Ctx_Fun                                   = 4129;
    scale3                                    = 4530;

    //HM INTERNAL
    KEYWORD_STR                               = 9000;
    COMMENTS                                  = 5109;
    CommentEnumField                          = 7951;
    NUM_COMMENTS                              = 5110;

    TITLE                                     = -1;
}

CHECK(COMMON)
{

}

DEFAULTS(COMMON)
{
    //INPUT ATTRIBUTES

    TSTART                                    = 0.0;
    TSTOP                                     = 1.0e30;
    FACX                                      = 1.0;
    FAC                                       = 1.0;
    PFscale                                   = 1.0;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }

    ASSIGN(KEYWORD_STR, "/INTER/TYPE6");

    DATA(secondaryentityids, "surf_ID1");
    DATA(mainentityids, "surf_ID2");

    SCALAR(Friction_phi, "Sfric")             { DIMENSION="force"; }
    SCALAR(FRIC, "Fric")                      { DIMENSION="DIMENSIONLESS"; }
    SCALAR(GAP, "Gap")                        { DIMENSION = "l"; }
    SCALAR(TSTART, "Tstart")                  { DIMENSION = "t"; }
    SCALAR(TSTOP, "Tstop")                    { DIMENSION = "t"; }

    RADIO(Gflag, "IRS")
    {
      ADD(0, "0: If segment is connected to a solid element, its normal is reversed if entering the solid element (the segment is renumbered");
      ADD(1, "1: Normal is always reversed (segment 1234 is read 2143)");
      ADD(2, "2: Normal is never reversed (segments connected to a solid element are not renumbered)");
    }

    RADIO(Vflag,"IRM")
    {
      ADD(0, "0: If segment is connected to a solid element, its normal is reversed if entering the solid element (the segment is renumbered)");
      ADD(1, "1: Normal is always reversed (segment 1234 is read 2143)");
      ADD(2, "2: Normal is never reversed (segments connected to a solid element are not renumbered)");
    }
    RADIO(INACTIV,"Inacti")
    {
      ADD(0, "0: No action");
      ADD(5, "1: Gap is variable with time and initial gap is adjusted as: gap0=Gap-P0, with P0 is the initial penetration");
    }

    DATA(Crx_Fun, "fct_IDff");
    DATA(Cry_Fun, "fct_IDfv");

    SCALAR(scale1, "Ascalef")                 { DIMENSION = "velocity"; }
    SCALAR(scale2, "Ascalev")                 { DIMENSION = "force"; }

    DATA(FUN_A1, "fct_IDId");

    RADIO(HFLAG1, "Iform")
    {
      ADD(0, "0: Nonlinear elastic");
      ADD(1, "1: Nonlinear elasto-plastic with an unloading curve which must be defined");
      ADD(2, "2: Nonlinear elasto-plastic with decoupled hardenin");
    }

    SCALAR(FACX, "Ascalex")                    { DIMENSION = "l"; }
    SCALAR(FAC, "FscaleId")                    { DIMENSION = "force"; }
    RADIO(ISFLAG, "Icor")
    {
      ADD(0,"0: Adjusting force flag Off") ;
      ADD(1,"1: Adjusting force flag On") ;
    }

    DATA(FUNCT_ID, "fct_IDul");
    SCALAR(STIFF1, "Stiff")                   { DIMENSION = "lineic_force"; }
    SCALAR(PFscale, "Fscaleul")               { DIMENSION = "force"; }
    SCALAR(VISC, "Visc")                      { DIMENSION = "dynamicviscosity"; }
    DATA(Crz_Fun, "fct_IDdv");
    DATA(Ctx_Fun, "fct_IDdf");
    SCALAR(scale3, "Fscalev")                 { DIMENSION = "force"; }
}

// File format
FORMAT(radioss44)
{
    HEADER("/INTER/TYPE6/%-d", _ID_);
    CARD("%-80s", TITLE);

    // Card1
    COMMENT("#surf_id1surf_id2");
    CARD("%8d%8d", secondaryentityids, mainentityids);

    // Card 2
    COMMENT("#          Scale            FRIC             GAP          Tstart           Tstop");
    CARD("%16lg%16lg%16lg%16lg%16lg", Friction_phi, FRIC, GAP, TSTART, TSTOP);

    // Card 3
    COMMENT("#     If     IRS     IRM");
    CARD("%8d%8d%8d", FUN_A1, Gflag, Vflag);
}

FORMAT(radioss51)
{
    HEADER("/INTER/TYPE6/%-d", _ID_);
    CARD("%-100s", TITLE);

    // Card1
    COMMENT("# surf_id1  surf_id2");
    CARD("%10d%10d", secondaryentityids, mainentityids);

    // Card 2
    COMMENT("#                                   FRIC                 GAP              Tstart               Tstop");
    CARD("%20s%20lg%20lg%20lg%20lg", _BLANK_, FRIC, GAP, TSTART, TSTOP);

    // Card 3
    COMMENT("#                IRS       IRM");
    CARD("%10s%10d%10d", _BLANK_, Gflag, Vflag);

    // Card 4
    COMMENT("#       If                          FACX                 FAC");
    CARD("%10d%10s%20lg%20lg", FUN_A1, _BLANK_, FACX, FAC);
}

FORMAT(radioss90)
{
    HEADER("/INTER/TYPE6/%-d", _ID_);
    CARD("%-100s", TITLE);

    // Card1
    COMMENT("# surf_iD1  surf_iD2");
    CARD("%10d%10d", secondaryentityids, mainentityids);

    // Card 2
    COMMENT("#                                   Fric                 Gap              Tstart               Tstop");
    CARD("%20s%20lg%20lg%20lg%20lg", _BLANK_, FRIC, GAP, TSTART, TSTOP);

    // Card 3
    COMMENT("#                IRS       IRM");
    CARD("%10s%10d%10d", _BLANK_, Gflag, Vflag);

    // Card 4
    COMMENT("#funct_IDf                       Ascalex             FscaleY");
    CARD("%10d%10s%20lg%20lg", FUN_A1, _BLANK_, FACX, FAC);
}

FORMAT(radioss100)
{
    HEADER("/INTER/TYPE6/%-d", _ID_);
    CARD("%-100s", TITLE);

    // Card1
    COMMENT("# surf_ID1  surf_ID2");
    CARD("%10d%10d", secondaryentityids, mainentityids);

    // Card 2
    COMMENT("#                                   Fric                 Gap              Tstart               Tstop");
    CARD("%20s%20lg%20lg%20lg%20lg", _BLANK_, FRIC, GAP, TSTART, TSTOP);

    // Card 3
    COMMENT("#                IRS       IRM");
    CARD("%10s%10d%10d", _BLANK_, Gflag, Vflag);

    // Card 4
    COMMENT("# fct_IDId     Iform             Ascalex            Fscaleid");
    CARD("%10d%10d%20lg%20lg", FUN_A1, HFLAG1, FACX, FAC);

    // Card 5
    COMMENT("# fct_IDul                         Stiff            Fscaleul");
    CARD("%10d%10s%20lg%20lg", FUNCT_ID, _BLANK_, STIFF1, PFscale);
}

FORMAT(radioss110)
{
    HEADER("/INTER/TYPE6/%-d", _ID_);
    CARD("%-100s", TITLE);

    // Card1
    COMMENT("# surf_ID1  surf_ID2");
    CARD("%10d%10d", secondaryentityids, mainentityids);

    // Card 2
    COMMENT("#                                   Fric                 Gap              Tstart               Tstop");
    CARD("%20s%20lg%20lg%20lg%20lg", _BLANK_, FRIC, GAP, TSTART, TSTOP);

    // Card 3
    COMMENT("#                IRS       IRM");
    CARD("%10s%10d%10d", _BLANK_, Gflag, Vflag);

    // Card 4
    COMMENT("# fct_IDId     Iform             Ascalex            Fscaleid");
    CARD("%10d%10s%20lg%20lg", FUN_A1, HFLAG1, FACX, FAC);

    // Card 5
    COMMENT("# fct_IDul                         Stiff            Fscaleul");
    CARD("%10d%10s%20lg%20lg", FUNCT_ID, _BLANK_, STIFF1, PFscale);
}

FORMAT(radioss140)
{
    HEADER("/INTER/TYPE6/%-d", _ID_);
    CARD("%-100s", TITLE);

    // Card1
    COMMENT("# surf_ID1  surf_ID2");
    CARD("%10d%10d", secondaryentityids, mainentityids);

    // Card 2
    COMMENT("#              Sfric                Fric                 Gap              Tstart               Tstop");
    CARD("%20lg%20lg%20lg%20lg%20lg", Friction_phi, FRIC, GAP, TSTART, TSTOP);

    // Card 3
    COMMENT("#                IRS       IRM    Inacti    fct_ff    fct_fv             Ascalef             Ascalev");
    CARD("%10s%10d%10d%10d%10d%10d%20lg%20lg", _BLANK_, Gflag, Vflag, INACTIV, Crx_Fun, Cry_Fun, scale1, scale2);

    // Card 4
    COMMENT("# fct_IDId     Iform             Ascalex            Fscaleid      Icor");
    CARD("%10d%10d%20lg%20lg%10d", FUN_A1, HFLAG1, FACX, FAC, ISFLAG);

    // Card 5
    COMMENT("# fct_IDul                         Stiff            Fscaleul");
    CARD("%10d%10s%20lg%20lg", FUNCT_ID, _BLANK_, STIFF1, PFscale);

    // Card 6
    COMMENT("#               Visc    fct_dv    fct_df             Fscalev");
    CARD("%20lg%10d%10d%20lg", VISC, Crz_Fun, Ctx_Fun, scale3);
}

FORMAT(radioss2017)
{
    HEADER("/INTER/TYPE6/%-d", _ID_);
    CARD("%-100s", TITLE);

    // Card1
    COMMENT("# surf_ID1  surf_ID2");
    CARD("%10d%10d", secondaryentityids, mainentityids);

    // Card 2
    COMMENT("#              Sfric                Fric                 Gap              Tstart               Tstop");
    CARD("%20lg%20lg%20lg%20lg%20lg", Friction_phi, FRIC, GAP, TSTART, TSTOP);

    // Card 3
    COMMENT("#                IRS       IRM    Inacti  fct_IDff  fct_IDfv             Ascalef             Ascalev");
    CARD("%10s%10d%10d%10d%10d%10d%20lg%20lg", _BLANK_, Gflag, Vflag, INACTIV, Crx_Fun, Cry_Fun, scale1, scale2);

    // Card 4
    COMMENT("# fct_IDId     Iform             Ascalex            Fscaleid      Icor");
    CARD("%10d%10d%20lg%20lg%10d", FUN_A1, HFLAG1, FACX, FAC, ISFLAG);

    // Card 5
    COMMENT("# fct_IDul                         Stiff            Fscaleul");
    CARD("%10d%10s%20lg%20lg", FUNCT_ID, _BLANK_, STIFF1, PFscale);

    // Card 6
    COMMENT("#               Visc  fct_IDdv  fct_IDdf             Fscalev");
    CARD("%20lg%10d%10d%20lg", VISC, Crz_Fun, Ctx_Fun, scale3);
}
