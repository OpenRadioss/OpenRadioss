//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// /INTER/TYPE2
// 

ATTRIBUTES(COMMON)
{
// INPUT ATTRIBUTES
    secondaryentityids                        = VALUE(SETS,"Secondary node group identifier") { SUBTYPES = (/SETS/GRNOD) ; }
    mainentityids                             = VALUE(SETS,"Main surface identifier")   { SUBTYPES = (/SETS/SURF) ; }
    SECONDARY_NODES_TO_DELETE                     = VALUE(INT,"Flag to ignore secondary nodes if no main segment found");
    WFLAG                                     = VALUE(INT,"Spotweld formulation flag");
    LEVEL                                     = VALUE(INT,"Hierarchy level of the interface");
    Isearch                                   = VALUE(INT,"Search formulation flag for the closest main segment");
    NodDel2                                   = VALUE(INT,"Node deletion flag");
    Property_ID                               = VALUE(PROP,"User property identifier defining rupture criteria parameters");
    dsearch                                   = VALUE(FLOAT,"Distance for searching closest main segment");
    RUPT                                      = VALUE(INT,"Hierarchy level of the interface");
    Ifiltr                                    = VALUE(INT,"Hierarchy level of the interface");
    FUNCT_ID_sr                               = VALUE(FUNCT,"Function identifier for stress factor versus stress rate");
    FUNCT_ID_sn                               = VALUE(FUNCT,"Function identifier for max normal stress versus normal relative displacement (N_Dist.)");
    FUNCT_ID_st                               = VALUE(FUNCT,"Function identifier for max tangential stress versus tangential relative displacement (T_Dist.)");
    Ismstr                                    = VALUE(INT,"Asymmetric rupture flag");
    MAX_N_DIST                                = VALUE(FLOAT,"Maximum normal relative displacement");
    MAX_T_DIST                                = VALUE(FLOAT,"Maximum tangential relative displacement");
    FScale11                                  = VALUE(FLOAT,"Stress scale factor");
    FScale22                                  = VALUE(FLOAT,"Stress rate scale factor");
    FScale33                                  = VALUE(FLOAT,"Distance scale factor");
    Alpha                                     = VALUE(FLOAT,"Stress filter alpha value");
    AREA                                      = VALUE(FLOAT,"(Optional) Area of surface which used when the area computed from secondary node side is null or when secondary node is connected only to 1D element");
//Optinon 1 
    Stiffness_opt                             = VALUE(INT,"Stiffness Options");
    STFAC                                     = VALUE(FLOAT,"Stiffness factor (used only with Spotflag= 25)");
    MAT_MaxVisc                               = VALUE(FLOAT,"Critical damping coefficient on interface stiffness (used only with Spotflag = 25)");
    Istf                                      = VALUE(INT,"Interface stiffness definition flag");
    //Optional Card
    Heat_Inp_opt                              = VALUE(INT,"Heat_Transfer_Options");
    I_TH                                      = VALUE(INT,"Heat transfer flag");
    Kthe                                      = VALUE(FLOAT,"Heat exchange coefficient");
    Iproj                                     = VALUE(INT,"Secondary node projection flag");

    empty_string                              = VALUE(STRING, "");
    empty_int                                 = VALUE(INT,"");
    empty_float                               = VALUE(FLOAT,"");

// HM INTERNAL
    KEYWORD_STR                               = VALUE(STRING,"Solver Keyword");
    NUM_COMMENTS                              = SIZE("NUM_COMMENTS");
    CommentEnumField                          = VALUE(INT,"User Comments");
    COMMENTS                                  = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    TITLE                                     = VALUE(STRING,"");
    IO_FLAG                                   = VALUE(INT,"IO Flag");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                               = 9000;
    COMMENTS                                  = 5109;
    CommentEnumField                          = 7951;
    NUM_COMMENTS                              = 5110;
    SECONDARY_NODES_TO_DELETE                     = 7018;
    WFLAG                                     = 5169;
    LEVEL                                     = 8041;
    Isearch                                   = 8042;
    NodDel2                                   = 4012;
    Property_ID                               = 4485;
    dsearch                                   = 8043;
    RUPT                                      = 2005;
    Ifiltr                                    = 6304;
    FUNCT_ID_sr                               = 2008;
    FUNCT_ID_sn                               = 2009;
    FUNCT_ID_st                               = 2010;
    Ismstr                                    = 5152;
    MAX_N_DIST                                = 2011;
    MAX_T_DIST                                = 2012;
    FScale11                                  = 4050;
    FScale22                                  = 4051;
    FScale33                                  = 4052;
    Alpha                                     = 982;
    AREA                                      = 718;
    Stiffness_opt                             = 2800;
    STFAC                                     = 4253;
    MAT_MaxVisc                               = 4101;
    Istf                                      = 8044;
    Heat_Inp_opt                              = 4346;
    I_TH                                      = 4248;
    Kthe                                      = 4736;
    Iproj                                     = 1021;

    empty_string                              = -1;
    empty_int                                 = -1;
    empty_float                               = -1;
    TITLE                                     = -1;
}

CHECK(COMMON)
{

}

DEFAULTS(COMMON)
{
    SECONDARY_NODES_TO_DELETE                     = 0;
    Ismstr                                    = 0;
    NodDel2                                   = 0;
    RUPT                                      = 0;
    Ismstr                                    = 0;
    MAX_N_DIST                                = 1e+20;
    MAX_T_DIST                                = 1e+20;
    FScale11                                  = 1.00;
    FScale22                                  = 1.00;
    FScale33                                  = 1.00;
    Alpha                                     = 1;
    AREA                                      = 0.0;
    Stiffness_opt                             = 1;
    STFAC                                     = 1.0;
    MAT_MaxVisc                               = 0.05;
    Istf                                      = 0;
    I_TH                                      = 0;
    Kthe                                      = 0.0;
    Iproj                                     = 1;
    WFLAG                                     = 0;
    Isearch                                   = 0;

    empty_string                              = "";
    empty_int                                 = -1;
    empty_float                               = -1.0e20;
    IO_FLAG                                   = -1;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }

    ASSIGN(KEYWORD_STR, "/INTER/TYPE2");

    DATA(secondaryentityids);
    DATA(mainentityids);
    RADIO(SECONDARY_NODES_TO_DELETE)
    {
      ADD(0,"(Default) Set to the value defined in /DEFAULT/INTER/TYPE");
      ADD(1,"Secondary nodes with no main segment found during the Starter are deleted from the interface");
      ADD(2,"Secondary nodes with no main segment found during the Starter are deleted from the interface, new calculation for dsearch, if dsearch = 0");
      ADD(3,"Secondary nodes with no main segment found during the starter are deleted from the interface, new calculation for dsearch, if dsearch = 0");
      ADD(1000,"No deletion of secondary nodes  (default, if /DEFAULT/INTER/TYPE2 is not defined)");
    }

    RADIO(WFLAG)
    {
      ADD(0,"0: (Default) Set to the value defined in /DEFAULT/INTER/TYPE2");
      ADD(1,"1: Set to the value defined in /DEFAULT/INTER/TYPE2");
      ADD(2,"2: Same formulation as standard formulation");
      ADD(4,"4: Rotational DOF are not transmitted (if shells are used) (default when /CAA is activated)");
      ADD(5,"5: Standard formulation (default when /CAA is activated)");
      ADD(20,"20: Surface computed using shell and brick faces attached to the node");
      ADD(21,"21: Surface computed using only the shell attached to the node");
      ADD(22,"22: Surface computed using only the brick faces attached to the node");
      ADD(25,"25: Penalty formulation (not recommended)");
      ADD(26,"26: Penalty formulation (obsolete)");
      ADD(27,"27: Kinematic formulation similar to the Spotflag =5 with an automatic switch to penalty formulation when incompatible kinematic conditions occur");
      ADD(28,"28: Kinematic formulation similar to Spotflag =1 with an automatic switch to penalty formulation when incompatible kinematic conditions occur");
      ADD(30,"30: Formulation with cubic curvature of main segment") ;
    }
    SCALAR(LEVEL);
    RADIO(Isearch)
    {
      ADD(0,"0: (Default) Set to the value defined in /DEFAULT/INTER/TYPE2");
      ADD(1,"1: Old formulation (only used for previous version)");
      ADD(2,"2: (default, if /DEFAULT/INTER/TYPE2 is not defined)");
    }
    RADIO(NodDel2)
    {
      ADD(0,"0: (Default) Set to the value defined in /DEFAULT/INTER/TYPE2");
      ADD(1,"1: The kinematic condition is suppressed on the secondary node, when all elements linked to the main segment are deleted");
      ADD(2,"2: The kinematic condition is suppressed on the secondary node, if the main element is deleted");
      ADD(1000,"1000: No deletion (default, if /DEFAULT/INTER/TYPE2 is not defined)");
    }
    SCALAR(dsearch)                            { DIMENSION="l"; }

    if (WFLAG == 20 || WFLAG == 21 || WFLAG == 22)
    {
      RADIO(RUPT)
      {
        ADD(0,"0: Set to value defined in /DEFAULT/INTER/TYPE2");
        ADD(1,"1: Failure when [(N_Dist/Max_N_Dist)^2 + (T_Dist/Max_T_Dist)^2]^1/2 > 1");
        ADD(2,"2: Failure when Max_N_Dist or Max_T_Dist are reached");
      }
      RADIO(Ifiltr)
      {
        ADD(0,"0: No filtering");
        ADD(1,"1: Filtering (alpha filter)");
      }
      DATA(FUNCT_ID_sr);
      DATA(FUNCT_ID_sn);
      DATA(FUNCT_ID_st);
      RADIO(Ismstr)
      {
        ADD(0,"0: (Default) Symmetric rupture (traction and compression)");
        ADD(1,"1: Asymmetric rupture (traction only, not in compression)");
      }
      SCALAR(MAX_N_DIST)                            { DIMENSION="l"; }
      SCALAR(MAX_T_DIST)                            { DIMENSION="l"; }
      SCALAR(FScale11)                              { DIMENSION="pressure"; }
      SCALAR(FScale22)                              { DIMENSION="volumic_power"; }
      SCALAR(FScale33)                              { DIMENSION="l"; }
      SCALAR(Alpha)                                 { DIMENSION="DIMENSIONLESS"; }
      SCALAR(AREA)                                  { DIMENSION="area"; }
    }
    //Optional card
   /* if (WFLAG==25 || WFLAG==26 || WFLAG==27 || WFLAG==28)
    {
        FLAG(Stiffness_opt);    
    }*/
    
    if (/*(Stiffness_opt  != FALSE  )&&*/ (WFLAG==25 || WFLAG==26 || WFLAG==27 || WFLAG==28))
    {
      SCALAR(STFAC)                                 { DIMENSION="DIMENSIONLESS"; }
      SCALAR(MAT_MaxVisc)                           { DIMENSION="DIMENSIONLESS"; }
      RADIO(Istf)
      {
        ADD(0,"0: (Default) Set to 2");
        ADD(1,"1: Penalty stiffness is only based on main segment stiffness");
        ADD(2,"2: Penalty stiffness is computed from both main and secondary characteristic");
        ADD(3,"3: Penalty stiffness is computed from both main and secondary characteristic");
        ADD(4,"4: Penalty stiffness is computed from both main and secondary characteristic");
        ADD(5,"5: Penalty stiffness is computed from both main and secondary characteristic");
      }
    }
    
    //Optional card
    FLAG(Heat_Inp_opt);

    if (Heat_Inp_opt !=FALSE)
    {
      if (WFLAG==1 || WFLAG==28 || WFLAG==30)
      {
        RADIO(I_TH)
        {
          ADD(0,"0: (Default) Symmetric rupture (traction and compression)");
          ADD(1,"1: Asymmetric rupture (traction only, not in compression)");
        }
        SCALAR(Kthe) { DIMENSION="thermalconductivity"; }
      }
      else
      {
        RADIO(I_TH)
        {
          ADD(0,"0: (Default) Symmetric rupture (traction and compression)");
          ADD(1,"1: Asymmetric rupture (traction only, not in compression)");
        }
        SCALAR(Kthe) { DIMENSION="thermalconductivity"; }
        RADIO(Iproj)
        {
          ADD(0,"0: (Default) Set to 1");
          ADD(1,"1: Force secondary projection position to main edge");
          ADD(2,"2: Secondary projection is not modified");
        }
      }
    }
}

// File format
FORMAT(radioss41) {
    HEADER("/INTER/TYPE2/%d/%s",_ID_,TITLE);

    COMMENT("#grnod_id surf_id        Spotflag   Level Isearch                 dsearch");
    CARD("%8d%8d%8s%8d%8d%8d%8s%8s%16lg",secondaryentityids,mainentityids,empty_string,WFLAG,LEVEL,Isearch,empty_string,empty_string,dsearch);
}

FORMAT(radioss51) {
    HEADER("/INTER/TYPE2/%d",_ID_);
    CARD("%-100s", TITLE);

    COMMENT("# grnd_IDs  surf_IDm            Spotflag     Level   Isearch     Idel2                       dsearch");
    CARD("%10d%10d%10s%10d%10d%10d%10d%10s%20lg",secondaryentityids,mainentityids,empty_string,WFLAG,LEVEL,Isearch,NodDel2,empty_string,dsearch);
}

FORMAT(radioss90) {
    HEADER("/INTER/TYPE2/%d",_ID_);
    CARD("%-100s", TITLE);

    if (WFLAG==10)
    {
      COMMENT("# grnd_IDs  surf_IDm            Spotflag     Level   Isearch     Idel2   prop_ID             dsearch");
      CARD("%10d%10d%10s%10d%10d%10d%10d%10d%20lg",secondaryentityids,mainentityids,empty_string,WFLAG,LEVEL,Isearch,NodDel2,Property_ID,dsearch);
    }
    else
    {
      COMMENT("# grnd_IDs  surf_IDm            Spotflag     Level   Isearch     Idel2                       dsearch");
      CARD("%10d%10d%10s%10d%10d%10d%10d%10s%20lg",secondaryentityids,mainentityids,empty_string,WFLAG,LEVEL,Isearch,NodDel2,empty_string,dsearch);
    }
}

FORMAT(radioss100) {
    HEADER("/INTER/TYPE2/%d",_ID_);
    CARD("%-100s", TITLE);

    COMMENT("# grnd_IDs  surf_IDm            Spotflag     Level   Isearch     Idel2                       dsearch");
    CARD("%10d%10d%10s%10d%10d%10d%10d%10s%20lg",secondaryentityids,mainentityids,empty_string,WFLAG,LEVEL,Isearch,NodDel2,empty_string,dsearch);

   if (WFLAG==20 || WFLAG==21 || WFLAG==22)
   {
      COMMENT("#     Rupt    Ifiltrfunct_IDsrfunct_IDsnfunct_IDst                    Max_N_Dist          Max_T_Dist");
      CARD("%10d%10d%10d%10d%10d%10s%20lg%20lg",RUPT,Ifiltr,FUNCT_ID_sr,FUNCT_ID_sn,FUNCT_ID_st,empty_string,MAX_N_DIST,MAX_T_DIST);

      COMMENT("#       Fscalestress      Fscalestr_rate          Fscaledist               Alpha");
      CARD("%20lg%20lg%20lg%20lg",FScale11,FScale22,FScale33,Alpha);
   }
}

FORMAT(radioss110)
{
    HEADER("/INTER/TYPE2/%d",_ID_);
    CARD("%-100s", TITLE);

    COMMENT("# grnd_IDs  surf_IDm    Ignore  Spotflag     Level   Isearch     Idel2                       dsearch");
    CARD("%10d%10d%10d%10d%10d%10d%10d%10s%20lg",secondaryentityids,mainentityids,SECONDARY_NODES_TO_DELETE,WFLAG,LEVEL,Isearch,NodDel2,empty_string,dsearch);

   if (WFLAG==20 || WFLAG==21 || WFLAG==22)
   {
      COMMENT("#     Rupt    Ifiltr  fct_IDsr  fct_IDsn  fct_IDst                    Max_N_Dist          Max_T_Dist");
      CARD("%10d%10d%10d%10d%10d%10s%20lg%20lg",RUPT,Ifiltr,FUNCT_ID_sr,FUNCT_ID_sn,FUNCT_ID_st,empty_string,MAX_N_DIST,MAX_T_DIST);

      COMMENT("#       Fscalestress      Fscalestr_rate          Fscaledist               Alpha");
      CARD("%20lg%20lg%20lg%20lg",FScale11,FScale22,FScale33,Alpha);
   }
   if (WFLAG==25 || WFLAG==26)
   {
      COMMENT("#              Stfac                Visc");
      CARD("%20lg%20lg",STFAC,MAT_MaxVisc);
   }
}

FORMAT(radioss130)
{
   HEADER("/INTER/TYPE2/%d",_ID_);
   CARD("%-100s", TITLE);

    COMMENT("# grnd_IDs  surf_IDm    Ignore  Spotflag     Level   Isearch     Idel2                       dsearch");
    CARD("%10d%10d%10d%10d%10d%10d%10d%10s%20lg",secondaryentityids,mainentityids,SECONDARY_NODES_TO_DELETE,WFLAG,LEVEL,Isearch,NodDel2,empty_string,dsearch);

   if (WFLAG==20 || WFLAG==21 || WFLAG==22)
   {
      COMMENT("#     Rupt    Ifiltr  fct_IDsr  fct_IDsn  fct_IDst      Isym          Max_N_Dist          Max_T_Dist");
      CARD("%10d%10d%10d%10d%10d%10d%20lg%20lg",RUPT,Ifiltr,FUNCT_ID_sr,FUNCT_ID_sn,FUNCT_ID_st,Ismstr,MAX_N_DIST,MAX_T_DIST);

      COMMENT("#       Fscalestress      Fscalestr_rate          Fscaledist               Alpha");
      CARD("%20lg%20lg%20lg%20lg",FScale11,FScale22,FScale33,Alpha);
   }
   if (WFLAG==25  || WFLAG==26)
   {
      COMMENT("#              Stfac                Visc");
      CARD("%20lg%20lg",STFAC,MAT_MaxVisc);
   }
}

FORMAT(radioss140)
{
   ASSIGN(IO_FLAG,0,EXPORT);
   ASSIGN(IO_FLAG,1,IMPORT);

   HEADER("/INTER/TYPE2/%d",_ID_);
   CARD("%-100s", TITLE);

   COMMENT("# grnd_IDs  surf_IDm    Ignore  Spotflag     Level   Isearch     Idel2                       dsearch");
   CARD("%10d%10d%10d%10d%10d%10d%10d%10s%20lg",secondaryentityids,mainentityids,SECONDARY_NODES_TO_DELETE,WFLAG,LEVEL,Isearch,NodDel2,empty_string,dsearch);

   if (WFLAG==20 || WFLAG==21 || WFLAG==22)
   {
      COMMENT("#     Rupt    Ifiltr  fct_IDsr  fct_IDsn  fct_IDst      Isym          Max_N_Dist          Max_T_Dist");
      CARD("%10d%10d%10d%10d%10d%10d%20lg%20lg",RUPT,Ifiltr,FUNCT_ID_sr,FUNCT_ID_sn,FUNCT_ID_st,Ismstr,MAX_N_DIST,MAX_T_DIST);

      COMMENT("#       Fscalestress      Fscalestr_rate          Fscaledist               Alpha                Area");
      CARD("%20lg%20lg%20lg%20lg%20lg",FScale11,FScale22,FScale33,Alpha,AREA);
   }

   if (IO_FLAG == 1) 
   {
     if (WFLAG==25 || WFLAG==26)
     {
        COMMENT("#              Stfac                Visc                          Istf");
        FREE_CARD(Stiffness_opt,"%20lg%20lg%10s%10s%10d",STFAC,MAT_MaxVisc,empty_string,empty_string,Istf);
     } 
     if (WFLAG==1 || WFLAG==26 || WFLAG==30)
     {

        COMMENT("#     Ithe                Kthe");
        FREE_CARD(Heat_Inp_opt,"%10d%20lg",I_TH,Kthe);
     }
     else
     {
        COMMENT("#     Ithe                Kthe                                                                 Iproj");
        FREE_CARD(Heat_Inp_opt,"%10d%20lg                                                            %10d",I_TH,Kthe,Iproj);
     }
   }
   if (IO_FLAG == 0 && Stiffness_opt !=FALSE)
   {
     if (WFLAG==25 || WFLAG==26)
     {
        COMMENT("#              Stfac                Visc                          Istf");
        CARD("%20lg%20lg%10s%10s%10d",STFAC,MAT_MaxVisc,empty_string,empty_string,Istf);
     } 
   }
   if (IO_FLAG == 0 && Heat_Inp_opt !=FALSE)
   {
     // EXPORT
     if (WFLAG==1 || WFLAG==28 || WFLAG==30)
     {
       COMMENT("#     Ithe                Kthe");
       CARD("%10d%20lg",I_TH,Kthe);
     }     
     else
     {
       COMMENT("#     Ithe                Kthe                                                                 Iproj");
       CARD("%10d%20lg                                                            %10d",I_TH,Kthe,Iproj);
     }
   }
}

FORMAT(radioss2017)
{
   ASSIGN(IO_FLAG,0,EXPORT);
   ASSIGN(IO_FLAG,1,IMPORT);

   HEADER("/INTER/TYPE2/%d",_ID_);
   CARD("%-100s", TITLE);

   COMMENT("# grnd_IDs  surf_IDm    Ignore  Spotflag     Level   Isearch     Idel2                       dsearch");
   CARD("%10d%10d%10d%10d%10d%10d%10d%10s%20lg",secondaryentityids,mainentityids,SECONDARY_NODES_TO_DELETE,WFLAG,LEVEL,Isearch,NodDel2,empty_string,dsearch);

   if (WFLAG==20 || WFLAG==21|| WFLAG==22)
   {
      COMMENT("#     Rupt    Ifiltr  fct_IDsr  fct_IDsn  fct_IDst      Isym          Max_N_Dist          Max_T_Dist");
      CARD("%10d%10d%10d%10d%10d%10d%20lg%20lg",RUPT,Ifiltr,FUNCT_ID_sr,FUNCT_ID_sn,FUNCT_ID_st,Ismstr,MAX_N_DIST,MAX_T_DIST);

      COMMENT("#       Fscalestress      Fscalestr_rate          Fscaledist               Alpha                Area");
      CARD("%20lg%20lg%20lg%20lg%20lg",FScale11,FScale22,FScale33,Alpha,AREA);
   }
   if (WFLAG==25 || WFLAG==26 || WFLAG==27 || WFLAG==28)
   {
      COMMENT("#              Stfac                Visc                          Istf");
      CARD("%20lg%20lg                    %10d",STFAC,MAT_MaxVisc,Istf);
   }
   if (IO_FLAG == 1) 
   {

     if (WFLAG==1 || WFLAG==28 || WFLAG==30)
     {
        COMMENT("#     Ithe                Kthe");
        FREE_CARD(Heat_Inp_opt,"%10d%20lg",I_TH,Kthe);
     }     
     else
     { 
        COMMENT("#     Ithe                Kthe                                                                 Iproj");
        FREE_CARD(Heat_Inp_opt,"%10d%20lg                                                            %10d",I_TH,Kthe,Iproj);

     }
   }
   if (IO_FLAG == 0 && Heat_Inp_opt !=FALSE)
   {
     // EXPORT
     if (WFLAG==1 || WFLAG==28 || WFLAG==30)
     {
       COMMENT("#     Ithe                Kthe");
       CARD("%10d%20lg",I_TH,Kthe);
     }     
     else
     {
       COMMENT("#     Ithe                Kthe                                                                 Iproj");
       CARD("%10d%20lg                                                            %10d",I_TH,Kthe,Iproj);
     }
   }
}
