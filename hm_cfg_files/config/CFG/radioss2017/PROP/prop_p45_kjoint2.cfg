//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Property KJOINT2 Type45

ATTRIBUTES(COMMON)
{
    type                                  = VALUE(INT,  " Joint Type");
    Kn                                    = VALUE(FLOAT,  " Stiffness for Blocked DOF");
    SCALE                                 = VALUE(FLOAT,  " Scale factor on time step for the automatic stiffness computation");
    Cr                                    = VALUE(FLOAT,  " Critical Damping Factor");
    ISENSOR                               = VALUE(SENSOR,  " Sensor Identifier") {SUBTYPES=(/SENSOR/SENSOR_DEFINE);}
    SKEW1                                 = VALUE(SYSTEM,  " First skew system identifier");
    SKEW2                                 = VALUE(SYSTEM,  " Second skew system identifier");
    Ktx                                   = VALUE(FLOAT,  " Translational Stiffness Coefficient in x-Direction");
    Kty                                   = VALUE(FLOAT,  " Translational Stiffness Coefficient in y-Direction");
    Ktz                                   = VALUE(FLOAT,  " Translational Stiffness Coefficient in z-Direction");
    Xt_fun                                = VALUE(FUNCT,  " Translational Stiffness Function Identifier in x-Direction");
    Yt_fun                                = VALUE(FUNCT,  " Translational Stiffness Function Identifier in y-Direction");
    Zt_fun                                = VALUE(FUNCT,  " Translational Stiffness Function Identifier in z-Direction");
    type12_XN                             = VALUE(FLOAT,  " Negative Stopping Displacement in x-Direction");
    type12_YN                             = VALUE(FLOAT,  " Negative Stopping Displacement in y-Direction");
    type12_ZN                             = VALUE(FLOAT,  " Negative Stopping Displacement in z-Direction");
    type12_Xc                             = VALUE(FLOAT,  " Positive Stopping Displacement in x-Direction");
    type12_Yc                             = VALUE(FLOAT,  " Positive Stopping Displacement in y-Direction");
    type12_Zc                             = VALUE(FLOAT,  " Positive Stopping Displacement in z-Direction");
    Ctx                                   = VALUE(FLOAT,  " Translational Viscosity Coefficient in x-Direction");
    Cty                                   = VALUE(FLOAT,  " Translational Viscosity Coefficient in y-Direction");
    Ctz                                   = VALUE(FLOAT,  " Translational Viscosity Coefficient in z-Direction");
    Ctx_Fun                               = VALUE(FUNCT,  " Translational Viscosity Function Identifier in x-Direction");
    Cty_Fun                               = VALUE(FUNCT,  " Translational Viscosity Function Identifier in y-Direction");
    Ctz_Fun                               = VALUE(FUNCT,  " Translational Viscosity Function Identifier in z-Direction");
    Vx                                    = VALUE(FLOAT,  " Elastic Stiffness for Friction and Stop Displacement in x-Direction");
    Vy                                    = VALUE(FLOAT,  " Elastic Stiffness for Friction and Stop Displacement in y-Direction");
    Vz                                    = VALUE(FLOAT,  " Elastic Stiffness for Friction and Stop Displacement in z-Direction");
    Prop_X_F                              = VALUE(FLOAT,  " Frictional Force Value in x-Direction");
    Prop_Y_F                              = VALUE(FLOAT,  " Frictional Force Value in y-Direction");
    Prop_Z_F                              = VALUE(FLOAT,  " Frictional Force Value in z-Direction");
    FUN_A1                                = VALUE(FUNCT,  " Frictional Force Function Identifier in x-Direction");
    FUN_A2                                = VALUE(FUNCT,  " Frictional Force Function Identifier in y-Direction");
    FUN_A3                                = VALUE(FUNCT,  " Frictional Force Function Identifier in z-Direction");
    Krx                                   = VALUE(FLOAT,  " Rotational Stiffness Coefficient in x-Direction");
    Kry                                   = VALUE(FLOAT,  " Rotational Stiffness Coefficient in y-Direction");
    Krz                                   = VALUE(FLOAT,  " Rotational Stiffness Coefficient in z-Direction");
    Xr_fun                                = VALUE(FUNCT,  " Rotational Stiffness Function Identifier in x-Direction");
    Yr_fun                                = VALUE(FUNCT,  " Rotational Stiffness Function Identifier in y-Direction");
    Zr_fun                                = VALUE(FUNCT,  " Rotational Stiffness Function Identifier in z-Direction");
    X_A                                   = VALUE(FLOAT,  " Negative Stopping Angle in x-Direction");
    Y_A                                   = VALUE(FLOAT,  " Negative Stopping Angle in y-Direction");
    Z_A                                   = VALUE(FLOAT,  " Negative Stopping Angle in z-Direction");
    X_B                                   = VALUE(FLOAT,  " Positive and Negative Stopping Angle in x-Direction");
    Y_B                                   = VALUE(FLOAT,  " Positive and Negative Stopping Angle in y-Direction");
    Z_B                                   = VALUE(FLOAT,  " Positive and Negative Stopping Angle in z-Direction");
    Crx                                   = VALUE(FLOAT,  " Rotational Viscosity Coefficient in x-Direction");
    Cry                                   = VALUE(FLOAT,  " Rotational Viscosity Coefficient in y-Direction");
    Crz                                   = VALUE(FLOAT,  " Rotational Viscosity Coefficient in z-Direction");
    Crx_Fun                               = VALUE(FUNCT,  " Rotational Viscosity Function Identifier in x-Direction");
    Cry_Fun                               = VALUE(FUNCT,  " Rotational Viscosity Function Identifier in y-Direction");
    Crz_Fun                               = VALUE(FUNCT,  " Rotational Viscosity Function Identifier in z-Direction");
    VX1                                   = VALUE(FLOAT,  " Elastic Stiffness for Friction and Stop Angle in x-Direction");
    VY1                                   = VALUE(FLOAT,  " Elastic Stiffness for Friction and Stop Angle in y-Direction");
    VZ1                                   = VALUE(FLOAT,  " Elastic Stiffness for Friction and Stop Angle in z-Direction");
    N_x                                   = VALUE(FLOAT,  " Frictional Moment Value in x-Direction");
    N_y                                   = VALUE(FLOAT,  " Frictional Moment Value in y-Direction");
    N_z                                   = VALUE(FLOAT,  " Frictional Moment Value in z-Direction");
    FUN_B1                                = VALUE(FUNCT,  " Frictional Moment Function Identifier in x-Direction");
    FUN_B2                                = VALUE(FUNCT,  " Frictional Moment Function Identifier in y-Direction");
    FUN_B3                                = VALUE(FUNCT,  " Frictional Moment Function Identifier in z-Direction");
    Dof_opt                               = VALUE(INT,  "Flag to expose non-blocked field");

    //Attributes for HM usage 
    KEYWORD_STR                           = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                          = SIZE("NUM_COMMENTS");
    COMMENTS                              = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                      = VALUE(INT,  "User Comments");
    Prop_Name_OR_Type                     = VALUE(INT, "");
    IO_FLAG                               = VALUE(INT, "");
    TYPE_NO                               = VALUE(STRING, "");
    TITLE                                 = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                           = 9000;
    NUM_COMMENTS                          = 5110;
    COMMENTS                              = 5109;
    CommentEnumField                      = 7951;
    Cr                                    =  842;
    Crx                                   = 4122;
    Crx_Fun                               = 4125;
    Cry                                   = 4123;
    Cry_Fun                               = 4126;
    Crz                                   = 4124;
    Crz_Fun                               = 4127;
    Ctx                                   = 4128;
    Ctx_Fun                               = 4129;
    Cty                                   = 4130;
    Cty_Fun                               = 4132;
    Ctz                                   = 4131;
    Ctz_Fun                               = 4133;
    FUN_A1                                =   45;
    FUN_A2                                =  170;
    FUN_A3                                =  172;
    FUN_B1                                =  168;
    FUN_B2                                =  171;
    FUN_B3                                =  199;
    ISENSOR                               = 5157;
    SKEW1                                 = 1709;
    SKEW2                                 = 1710;
    Kn                                    =  843;
    Krx                                   =  844;
    Kry                                   =  845;
    Krz                                   =  846;
    Ktx                                   =  847;
    Kty                                   =  848;
    Ktz                                   =  849;
    N_x                                   = 4468;
    N_y                                   = 4469;
    N_z                                   = 4470;
    Prop_X_F                              = 4137;
    Prop_Y_F                              = 4139;
    Prop_Z_F                              = 4141;
    SCALE                                 =   13;
    VX1                                   = 4521;
    VY1                                   = 4522;
    VZ1                                   = 4523;
    Vx                                    = 4156;
    Vy                                    = 4157;
    Vz                                    = 4158;
    X_A                                   = 4443;
    X_B                                   = 4446;
    Xr_fun                                =  869;
    Xt_fun                                =  872;
    Y_A                                   = 4444;
    Y_B                                   = 4447;
    Yr_fun                                =  870;
    Yt_fun                                =  873;
    Z_A                                   = 4445;
    Z_B                                   = 4448;
    Zr_fun                                =  871;
    Zt_fun                                =  874;
    type                                  = 8067;
    type12_XN                             =  225;
    type12_Xc                             =  221;
    type12_YN                             =  226;
    type12_Yc                             =  222;
    type12_ZN                             =  227;
    type12_Zc                             =  231;
    Prop_Name_OR_Type                     = 4537;
    Dof_opt                               = 2801;
    //
    TITLE                                 =   -1;
    TYPE_NO                               =   -1;
    IO_FLAG                               =   -1;
}

DEFAULTS(COMMON)
{
    Cr                                    =  0.0;
    Crx                                   =  1.0;
    Cry                                   =  1.0;
    Crz                                   =  1.0;
    Ctx                                   =  1.0;
    Cty                                   =  1.0;
    Ctz                                   =  1.0;
    Kn                                    =  0.0;
    Krx                                   =  1.0;
    Kry                                   =  1.0;
    Krz                                   =  1.0;
    Ktx                                   =  1.0;
    Kty                                   =  1.0;
    Ktz                                   =  1.0;
    N_x                                   =  0.0;
    N_y                                   =  0.0;
    N_z                                   =  0.0;
    Prop_X_F                              =  0.0;
    Prop_Y_F                              =  0.0;
    Prop_Z_F                              =  0.0;
    SCALE                                 = 10.0;
    VX1                                   =  0.0;
    VY1                                   =  0.0;
    VZ1                                   =  0.0;
    Vx                                    =  0.0;
    Vy                                    =  0.0;
    Vz                                    =  0.0;
    X_A                                   =  0.0;
    X_B                                   =  0.0;
    Y_A                                   =  0.0;
    Y_B                                   =  0.0;
    Z_A                                   =  0.0;
    Z_B                                   =  0.0;
    type                                  =    1;
    type12_XN                             =  0.0;
    type12_Xc                             =  0.0;
    type12_YN                             =  0.0;
    type12_Yc                             =  0.0;
    type12_ZN                             =  0.0;
    type12_Zc                             =  0.0;
    Prop_Name_OR_Type                     =  0;
    Dof_opt                               =  1;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
       ENUM_VALUE_FLAG=TRUE;
       ADD(1, "1:Hide in Menu/Export");
       ADD(2, "2:Show in Menu/Export");
       ADD(3, "3:Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Prop_Name_OR_Type == 2)
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TYPE45/");

    }
    else
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/KJOINT2/");
    }
    RADIO(type)
    {
        ADD(1, "1:Spherical Joint");
        ADD(2, "2:Revolute Joint");
        ADD(3, "3:Cylindrical Joint");
        ADD(4, "4:Planar Joint");
        ADD(5, "5:Universal Joint");
        ADD(6, "6:Translational Joint");
        ADD(7, "7:Oldham Joint (Planar without Rotation D.O.F.");
        ADD(8, "8:Fixed (Rigid) Joint");
        ADD(9, "9:Free Joint");
    }
    SCALAR(Kn);
    SCALAR(SCALE);
    SCALAR(Cr);
    DATA(ISENSOR) {SUBTYPES=(/SENSOR/SENSOR_DEFINE);}
    DATA(SKEW1)
    {
        /FILTER/COMBINE/AND;
        /FILTER/Framefix/0/EQ;
        /FILTER/Frame_opt/1/EQ;
    }
    
    DATA(SKEW2)
    {
        /FILTER/COMBINE/AND;
        /FILTER/Framefix/0/EQ;
        /FILTER/Frame_opt/1/EQ;
    }
    FLAG(Dof_opt);    
    if(Dof_opt == 1 &&  type == 1)
    {
        SCALAR(Krx) {if (Xr_fun == NONE) {DIMENSION="ROTATION STIFFNESS";} else {DIMENSION="moment";}}
        FUNCTION(Xr_fun)
        { 
            X_TITLE = "ThetaX angle"; X_DIMENSION="a";
            Y_TITLE = "ThetaX rotational stiffness"; Y_DIMENSION = "ROTATION STIFFNESS";
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(X_A)     {DIMENSION="a";}
        SCALAR(X_B)     {DIMENSION="a";}
        SCALAR(Crx)     {if (Crx_Fun == NONE) {DIMENSION="torsion_damping";} else {DIMENSION="moment";}}
        FUNCTION(Crx_Fun)
        { 
            X_TITLE = "ThetaX angle"; X_DIMENSION="l";
            Y_TITLE = "ThetaX rotational viscosity"; 
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(VX1)     {DIMENSION="ROTATION STIFFNESS";}
        SCALAR(N_x)     {DIMENSION="moment";}
        FUNCTION(FUN_B1)
        { 
            X_TITLE = "X rotational displacement"; X_DIMENSION="l";
            Y_TITLE = "Frictional moment";  Y_DIMENSION="moment" ;
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Kry)     {if (Yr_fun == NONE) {DIMENSION="ROTATION STIFFNESS";} else {DIMENSION="moment";}}
        FUNCTION(Yr_fun)
        { 
            X_TITLE = "ThetaY angle"; X_DIMENSION="a";
            Y_TITLE = "ThetaY rotational stiffness"; Y_DIMENSION = "ROTATION STIFFNESS";
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Y_A)     {DIMENSION="a";}
        SCALAR(Y_B)     {DIMENSION="a";}
        SCALAR(Cry)      {if (Cry_Fun == NONE) {DIMENSION="torsion_damping";} else {DIMENSION="moment";}}
        FUNCTION(Cry_Fun)
        { 
            X_TITLE = "ThetaY angle"; X_DIMENSION="l";
            Y_TITLE = "ThetaY rotational viscosity"; 
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(VY1)     {DIMENSION="ROTATION STIFFNESS";}
        SCALAR(N_y)     {DIMENSION="moment";}
        FUNCTION(FUN_B2)
        { 
            X_TITLE = "Y rotational displacement"; X_DIMENSION="l";
            Y_TITLE = "Frictional moment";  Y_DIMENSION="moment" ;
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Krz)     {if (Zr_fun == NONE) {DIMENSION="ROTATION STIFFNESS";} else {DIMENSION="moment";}}
        FUNCTION(Zr_fun)
        { 
                X_TITLE = "ThetaZ angle"; X_DIMENSION="a";
                Y_TITLE = "ThetaZ rotational stiffness"; Y_DIMENSION = "ROTATION STIFFNESS";
                /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Z_A)     {DIMENSION="a";}
        SCALAR(Z_B)     {DIMENSION="a";}
        SCALAR(Crz)     {if (Crz_Fun == NONE) {DIMENSION="torsion_damping";} else {DIMENSION="moment";}}
        FUNCTION(Crz_Fun)
        { 
            X_TITLE = "ThetaZ angle"; X_DIMENSION="l";
            Y_TITLE = "ThetaZ rotational viscosity"; 
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(VZ1)     {DIMENSION="ROTATION STIFFNESS";}
        SCALAR(N_z)     {DIMENSION="moment";}
        FUNCTION(FUN_B3)
        { 
            X_TITLE = "Z rotational displacement"; X_DIMENSION="l";
            Y_TITLE = "Frictional moment";  Y_DIMENSION="moment" ;
            /FILTER/groupEnumField/1/EQ;
        }
    }
    else if(Dof_opt == 1 &&   type == 2)
    {
        SCALAR(Krx)     {DIMENSION="moment";}
        FUNCTION(Xr_fun)
        { 
            X_TITLE = "ThetaX angle"; X_DIMENSION="a";
            Y_TITLE = "ThetaX rotational stiffness"; Y_DIMENSION = "ROTATION STIFFNESS";
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(X_A)     {DIMENSION="a";}
        SCALAR(X_B)     {DIMENSION="a";}
        SCALAR(Crx)      {DIMENSION="moment";}
        FUNCTION(Crx_Fun)
        { 
            X_TITLE = "ThetaX angle"; X_DIMENSION="l";
            Y_TITLE = "ThetaX rotational viscosity"; 
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(VX1)     {DIMENSION="ROTATION STIFFNESS";}
        SCALAR(N_x)     {DIMENSION="moment";}
        FUNCTION(FUN_B1)
        { 
            X_TITLE = "X rotational displacement"; X_DIMENSION="l";
            Y_TITLE = "Frictional moment";  Y_DIMENSION="moment" ;
            /FILTER/groupEnumField/1/EQ;
        }
    }
    else if(Dof_opt == 1 &&   type == 3)
    {
        SCALAR(Ktx)     {if (Xt_fun == NONE) {DIMENSION="translation_stiffness";} else {DIMENSION="force";}}
        FUNCTION(Xt_fun)
        { 
            X_TITLE = "X translational displacement"; X_DIMENSION="l";
            Y_TITLE = "X translational stiffness"; Y_DIMENSION="translation_stiffness";
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(type12_XN)     {DIMENSION="l";}
        SCALAR(type12_Xc)     {DIMENSION="l";}
        SCALAR(Ctx)           {if (Ctx_Fun == NONE) {DIMENSION="massFlux";} else {DIMENSION="force";}}
        FUNCTION(Ctx_Fun)
        { 
            X_TITLE = "X translational displacement"; X_DIMENSION="l";
            Y_TITLE = "X translational viscosity"; 
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Vx)            {DIMENSION="translation_stiffness";}
        SCALAR(Prop_X_F)      {DIMENSION="force";}
        FUNCTION(FUN_A1)
        { 
            X_TITLE = "X translational displacement"; X_DIMENSION="l";
            Y_TITLE = "Frictional force";  Y_DIMENSION="force" ;
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Krx)           {if (Xr_fun == NONE) {DIMENSION="ROTATION STIFFNESS";} else {DIMENSION="moment";}}
        FUNCTION(Xr_fun)
        { 
            X_TITLE = "ThetaX angle"; X_DIMENSION="a";
            Y_TITLE = "ThetaX rotational stiffness"; Y_DIMENSION = "ROTATION STIFFNESS";
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(X_A)     {DIMENSION="a";}
        SCALAR(X_B)     {DIMENSION="a";}
        SCALAR(Crx)     {if (Crx_Fun == NONE) {DIMENSION="torsion_damping";} else {DIMENSION="moment";}}
        FUNCTION(Crx_Fun)
        { 
            X_TITLE = "ThetaX angle"; X_DIMENSION="l";
            Y_TITLE = "ThetaX rotational viscosity"; 
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(VX1)     {DIMENSION="ROTATION STIFFNESS";}
        SCALAR(N_x)     {DIMENSION="moment";}
        FUNCTION(FUN_B1)
        { 
            X_TITLE = "X rotational displacement"; X_DIMENSION="l";
            Y_TITLE = "Frictional moment";  Y_DIMENSION="moment" ;
            /FILTER/groupEnumField/1/EQ;
        }
    }
    else if(Dof_opt == 1 &&   type == 4)
    {
        SCALAR(Kty)           {if (Yt_fun == NONE) {DIMENSION="translation_stiffness";} else {DIMENSION="force";}}
        FUNCTION(Yt_fun)
        { 
            X_TITLE = "Y translational displacement"; X_DIMENSION="l";
            Y_TITLE = "Y translational stiffness"; Y_DIMENSION="translation_stiffness";
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(type12_YN)     {DIMENSION="l";}
        SCALAR(type12_Yc)     {DIMENSION="l";}
        SCALAR(Cty)           {if (Cty_Fun == NONE) {DIMENSION="massFlux";} else {DIMENSION="force";}}
        FUNCTION(Cty_Fun)
        { 
            X_TITLE = "Y translational displacement"; X_DIMENSION="l";
            Y_TITLE = "Y translational viscosity"; 
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Vy)            {DIMENSION="translation_stiffness";}
        SCALAR(Prop_Y_F)      {DIMENSION="force";}
        FUNCTION(FUN_A2)
        { 
            X_TITLE = "Y translational displacement"; X_DIMENSION="l";
            Y_TITLE = "Frictional force";  Y_DIMENSION="force" ;
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Ktz)           {if (Zt_fun == NONE) {DIMENSION="translation_stiffness";} else {DIMENSION="force";}}
        FUNCTION(Zt_fun)
        { 
            X_TITLE = "Y translational displacement"; X_DIMENSION="l";
            Y_TITLE = "Y translational stiffness"; Y_DIMENSION="translation_stiffness";
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(type12_ZN)     {DIMENSION="l";}
        SCALAR(type12_Zc)     {DIMENSION="l";}
        SCALAR(Ctz)           {if (Ctz_Fun == NONE) {DIMENSION="massFlux";} else {DIMENSION="force";}}
        FUNCTION(Ctz_Fun)
        { 
            X_TITLE = "Y translational displacement"; X_DIMENSION="l";
            Y_TITLE = "Y translational viscosity"; 
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Vz)            {DIMENSION="translation_stiffness";}
        SCALAR(Prop_Z_F)      {DIMENSION="force";}
        FUNCTION(FUN_A3)
        { 
            X_TITLE = "Z translational displacement"; X_DIMENSION="l";
            Y_TITLE = "Frictional force";  Y_DIMENSION="force" ;
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Krx)     {if (Xr_fun == NONE) {DIMENSION="ROTATION STIFFNESS";} else {DIMENSION="moment";}}
        FUNCTION(Xr_fun)
        { 
            X_TITLE = "ThetaX angle"; X_DIMENSION="a";
            Y_TITLE = "ThetaX rotational stiffness"; Y_DIMENSION = "ROTATION STIFFNESS";
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(X_A)     {DIMENSION="a";}
        SCALAR(X_B)     {DIMENSION="a";}
        SCALAR(Crx)      {if (Crx_Fun == NONE) {DIMENSION="torsion_damping";} else {DIMENSION="moment";}}
        FUNCTION(Crx_Fun)
        { 
            X_TITLE = "ThetaX angle"; X_DIMENSION="l";
            Y_TITLE = "ThetaX rotational viscosity"; 
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(VX1)     {DIMENSION="ROTATION STIFFNESS";}
        SCALAR(N_x)     {DIMENSION="moment";}
        FUNCTION(FUN_B1)
        { 
            X_TITLE = "X rotational displacement"; X_DIMENSION="l";
            Y_TITLE = "Frictional moment";  Y_DIMENSION="moment" ;
            /FILTER/groupEnumField/1/EQ;
        }
    }
    else if(Dof_opt == 1 &&   type == 5)
    {
        SCALAR(Kry)     {if (Yr_fun == NONE) {DIMENSION="ROTATION STIFFNESS";} else {DIMENSION="moment";}}
        FUNCTION(Yr_fun)
        { 
            X_TITLE = "ThetaY angle"; X_DIMENSION="a";
            Y_TITLE = "ThetaY rotational stiffness"; Y_DIMENSION = "ROTATION STIFFNESS";
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Y_A)     {DIMENSION="a";}
        SCALAR(Y_B)     {DIMENSION="a";}
        SCALAR(Cry)     {if (Cry_Fun == NONE) {DIMENSION="torsion_damping";} else {DIMENSION="moment";}}
        FUNCTION(Cry_Fun)
        { 
            X_TITLE = "ThetaY angle"; X_DIMENSION="l";
            Y_TITLE = "ThetaY rotational viscosity"; 
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(VY1)     {DIMENSION="ROTATION STIFFNESS";}
        SCALAR(N_y)     {DIMENSION="moment";}
        FUNCTION(FUN_B2)
        { 
            X_TITLE = "Y rotational displacement"; X_DIMENSION="l";
            Y_TITLE = "Frictional moment";  Y_DIMENSION="moment" ;
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Krz)     {if (Zr_fun == NONE) {DIMENSION="ROTATION STIFFNESS";} else {DIMENSION="moment";}}
        FUNCTION(Zr_fun)
        { 
                X_TITLE = "ThetaZ angle"; X_DIMENSION="a";
                Y_TITLE = "ThetaZ rotational stiffness"; Y_DIMENSION = "ROTATION STIFFNESS";
                /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Z_A)     {DIMENSION="a";}
        SCALAR(Z_B)     {DIMENSION="a";}
        SCALAR(Crz)     {if (Crz_Fun == NONE) {DIMENSION="torsion_damping";} else {DIMENSION="moment";}}
        FUNCTION(Crz_Fun)
        { 
            X_TITLE = "ThetaZ angle"; X_DIMENSION="l";
            Y_TITLE = "ThetaZ rotational viscosity"; 
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(VZ1)     {DIMENSION="ROTATION STIFFNESS";}
        SCALAR(N_z)     {DIMENSION="moment";}
        FUNCTION(FUN_B3)
        { 
            X_TITLE = "Z rotational displacement"; X_DIMENSION="l";
            Y_TITLE = "Frictional moment";  Y_DIMENSION="moment" ;
            /FILTER/groupEnumField/1/EQ;
        }
    }
    else if(Dof_opt == 1 &&   type == 6)
    {
        SCALAR(Ktx)     {if (Xt_fun == NONE) {DIMENSION="translation_stiffness";} else {DIMENSION="force";}}
        FUNCTION(Xt_fun)
        { 
            X_TITLE = "X translational displacement"; X_DIMENSION="l";
            Y_TITLE = "X translational stiffness"; Y_DIMENSION="translation_stiffness";
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(type12_XN)     {DIMENSION="l";}
        SCALAR(type12_Xc)     {DIMENSION="l";}
        SCALAR(Ctx)           {if (Ctx_Fun == NONE) {DIMENSION="massFlux";} else {DIMENSION="force";}}
        FUNCTION(Ctx_Fun)
        { 
            X_TITLE = "X translational displacement"; X_DIMENSION="l";
            Y_TITLE = "X translational viscosity"; 
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Vx)            {DIMENSION="translation_stiffness";}
        SCALAR(Prop_X_F)      {DIMENSION="force";}
        FUNCTION(FUN_A1)
        { 
            X_TITLE = "X translational displacement"; X_DIMENSION="l";
            Y_TITLE = "Frictional force";  Y_DIMENSION="force" ;
            /FILTER/groupEnumField/1/EQ;
        }
    }
    else if(Dof_opt == 1 &&   type == 7)
    {
        SCALAR(Kty)     {if (Yt_fun == NONE) {DIMENSION="translation_stiffness";} else {DIMENSION="force";}}
        FUNCTION(Yt_fun)
        { 
            X_TITLE = "Y translational displacement"; X_DIMENSION="l";
            Y_TITLE = "Y translational stiffness"; Y_DIMENSION="translation_stiffness";
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(type12_YN)     {DIMENSION="l";}
        SCALAR(type12_Yc)     {DIMENSION="l";}
        SCALAR(Cty)           {if (Cty_Fun == NONE) {DIMENSION="massFlux";} else {DIMENSION="force";}}
        FUNCTION(Cty_Fun)
        { 
            X_TITLE = "Y translational displacement"; X_DIMENSION="l";
            Y_TITLE = "Y translational viscosity"; 
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Vy)            {DIMENSION="translation_stiffness";}
        SCALAR(Prop_Y_F)      {DIMENSION="force";}
        FUNCTION(FUN_A2)
        { 
            X_TITLE = "Y translational displacement"; X_DIMENSION="l";
            Y_TITLE = "Frictional force";  Y_DIMENSION="force" ;
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Ktz)     {if (Zt_fun == NONE) {DIMENSION="translation_stiffness";} else {DIMENSION="force";}}
        FUNCTION(Zt_fun)
        { 
            X_TITLE = "Y translational displacement"; X_DIMENSION="l";
            Y_TITLE = "Y translational stiffness"; Y_DIMENSION="translation_stiffness";
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(type12_ZN)     {DIMENSION="l";}
        SCALAR(type12_Zc)     {DIMENSION="l";}
        SCALAR(Ctz)           {if (Ctz_Fun == NONE) {DIMENSION="massFlux";} else {DIMENSION="force";}}
        FUNCTION(Ctz_Fun)
        { 
            X_TITLE = "Y translational displacement"; X_DIMENSION="l";
            Y_TITLE = "Y translational viscosity"; 
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Vz)            {DIMENSION="translation_stiffness";}
        SCALAR(Prop_Z_F)      {DIMENSION="force";}
        FUNCTION(FUN_A3)
        { 
            X_TITLE = "Z translational displacement"; X_DIMENSION="l";
            Y_TITLE = "Frictional force";  Y_DIMENSION="force" ;
            /FILTER/groupEnumField/1/EQ;
        }
    }
    else if( type == 8)
    {
    }
    else if(Dof_opt == 1 &&   type == 9)
    {
        SCALAR(Ktx)     {if (Xt_fun == NONE) {DIMENSION="translation_stiffness";} else {DIMENSION="force";}}
        FUNCTION(Xt_fun)
        { 
            X_TITLE = "X translational displacement"; X_DIMENSION="l";
            Y_TITLE = "X translational stiffness"; Y_DIMENSION="translation_stiffness";
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(type12_XN)     {DIMENSION="l";}
        SCALAR(type12_Xc)     {DIMENSION="l";}
        SCALAR(Ctx)           {if (Ctx_Fun == NONE) {DIMENSION="massFlux";} else {DIMENSION="force";}}
        FUNCTION(Ctx_Fun)
        { 
            X_TITLE = "X translational displacement"; X_DIMENSION="l";
            Y_TITLE = "X translational viscosity"; 
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Vx)            {DIMENSION="translation_stiffness";}
        SCALAR(Prop_X_F)      {DIMENSION="force";}
        FUNCTION(FUN_A1)
        { 
            X_TITLE = "X translational displacement"; X_DIMENSION="l";
            Y_TITLE = "Frictional force";  Y_DIMENSION="force" ;
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Kty) {if (Yt_fun == NONE) {DIMENSION="translation_stiffness";} else {DIMENSION="force";}}
        FUNCTION(Yt_fun)
        { 
            X_TITLE = "Y translational displacement"; X_DIMENSION="l";
            Y_TITLE = "Y translational stiffness"; Y_DIMENSION="translation_stiffness";
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(type12_YN)     {DIMENSION="l";}
        SCALAR(type12_Yc)     {DIMENSION="l";}
        SCALAR(Cty) {if (Cty_Fun == NONE) {DIMENSION="massFlux";} else {DIMENSION="force";}}
        FUNCTION(Cty_Fun)
        { 
            X_TITLE = "Y translational displacement"; X_DIMENSION="l";
            Y_TITLE = "Y translational viscosity"; 
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Vy)            {DIMENSION="translation_stiffness";}
        SCALAR(Prop_Y_F)      {DIMENSION="force";}
        FUNCTION(FUN_A2)
        { 
            X_TITLE = "Y translational displacement"; X_DIMENSION="l";
            Y_TITLE = "Frictional force";  Y_DIMENSION="force" ;
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Ktz)     {if (Zt_fun == NONE) {DIMENSION="translation_stiffness";} else {DIMENSION="force";}}
        FUNCTION(Zt_fun)
        { 
            X_TITLE = "Y translational displacement"; X_DIMENSION="l";
            Y_TITLE = "Y translational stiffness"; Y_DIMENSION="translation_stiffness";
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(type12_ZN)     {DIMENSION="l";}
        SCALAR(type12_Zc)     {DIMENSION="l";}
        SCALAR(Ctz)           {if (Ctz_Fun == NONE) {DIMENSION="massFlux";} else {DIMENSION="force";}}
        FUNCTION(Ctz_Fun)
        { 
            X_TITLE = "Y translational displacement"; X_DIMENSION="l";
            Y_TITLE = "Y translational viscosity"; 
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Vz)            {DIMENSION="translation_stiffness";}
        SCALAR(Prop_Z_F)      {DIMENSION="force";}
        FUNCTION(FUN_A3)
        { 
            X_TITLE = "Z translational displacement"; X_DIMENSION="l";
            Y_TITLE = "Frictional force";  Y_DIMENSION="force" ;
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Krx)     {if (Xr_fun == NONE) {DIMENSION="ROTATION STIFFNESS";} else {DIMENSION="moment";}}
        FUNCTION(Xr_fun)
        { 
            X_TITLE = "ThetaX angle"; X_DIMENSION="a";
            Y_TITLE = "ThetaX rotational stiffness"; Y_DIMENSION = "ROTATION STIFFNESS";
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(X_A)     {DIMENSION="a";}
        SCALAR(X_B)     {DIMENSION="a";}
        SCALAR(Crx)     {if (Crx_Fun == NONE) {DIMENSION="torsion_damping";} else {DIMENSION="moment";}}
        FUNCTION(Crx_Fun)
        { 
            X_TITLE = "ThetaX angle"; X_DIMENSION="l";
            Y_TITLE = "ThetaX rotational viscosity"; 
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(VX1)     {DIMENSION="ROTATION STIFFNESS";}
        SCALAR(N_x)     {DIMENSION="moment";}
        FUNCTION(FUN_B1)
        { 
            X_TITLE = "X rotational displacement"; X_DIMENSION="l";
            Y_TITLE = "Frictional moment";  Y_DIMENSION="moment" ;
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Kry)     {if (Yr_fun == NONE) {DIMENSION="ROTATION STIFFNESS";} else {DIMENSION="moment";}}
        FUNCTION(Yr_fun)
        { 
            X_TITLE = "ThetaY angle"; X_DIMENSION="a";
            Y_TITLE = "ThetaY rotational stiffness"; Y_DIMENSION = "ROTATION STIFFNESS";
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Y_A)     {DIMENSION="a";}
        SCALAR(Y_B)     {DIMENSION="a";}
        SCALAR(Cry)     {if (Cry_Fun == NONE) {DIMENSION="torsion_damping";} else {DIMENSION="moment";}}
        FUNCTION(Cry_Fun)
        { 
            X_TITLE = "ThetaY angle"; X_DIMENSION="l";
            Y_TITLE = "ThetaY rotational viscosity"; 
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(VY1)     {DIMENSION="ROTATION STIFFNESS";}
        SCALAR(N_y)     {DIMENSION="moment";}
        FUNCTION(FUN_B2)
        { 
            X_TITLE = "Y rotational displacement"; X_DIMENSION="l";
            Y_TITLE = "Frictional moment";  Y_DIMENSION="moment" ;
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Krz)      {if (Zr_fun == NONE) {DIMENSION="ROTATION STIFFNESS";} else {DIMENSION="moment";}}
        FUNCTION(Zr_fun)
        { 
                X_TITLE = "ThetaZ angle"; X_DIMENSION="a";
                Y_TITLE = "ThetaZ rotational stiffness"; Y_DIMENSION = "ROTATION STIFFNESS";
                /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(Z_A)     {DIMENSION="a";}
        SCALAR(Z_B)     {DIMENSION="a";}
        SCALAR(Crz)     {if (Crz_Fun == NONE) {DIMENSION="torsion_damping";} else {DIMENSION="moment";}}
        FUNCTION(Crz_Fun)
        { 
            X_TITLE = "ThetaZ angle"; X_DIMENSION="l";
            Y_TITLE = "ThetaZ rotational viscosity"; 
            /FILTER/groupEnumField/1/EQ;
        }
        SCALAR(VZ1)     {DIMENSION="ROTATION STIFFNESS";}
        SCALAR(N_z)     {DIMENSION="moment";}
        FUNCTION(FUN_B3)
        { 
            X_TITLE = "Z rotational displacement"; X_DIMENSION="l";
            Y_TITLE = "Frictional moment";  Y_DIMENSION="moment" ;
            /FILTER/groupEnumField/1/EQ;
        }
    }
}

// File format for Radioss 2017
FORMAT(radioss2017) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE45/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/KJOINT2/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    //
    COMMENT("#     Type                  Kn                 ScF                  Cr   sens_ID  Skew_ID1  Skew_ID1");
    CARD("%10d%20lg%20lg%20lg%10d%10d%10d",type,Kn,SCALE,Cr,ISENSOR,SKEW1,SKEW2);
    if(type==1)
    {
        /*Rx*/
        if(IO_FLAG == 1)
        {
            COMMENT("#                Krx   fct_Krx                SAx-                SAx+");
            FREE_CARD(Dof_opt,"%20lg%10d%20lg%20lg",Krx,Xr_fun,X_A,X_B);
        }
        //
        if(Dof_opt == 1)
        {
           
            if(IO_FLAG == 0)
            {
                COMMENT("#                Krx   fct_Krx                SAx-                SAx+");
                CARD("%20lg%10d%20lg%20lg",Krx,Xr_fun,X_A,X_B);
            }
            COMMENT("#                Crx   fct_Crx");
            CARD("%20lg%10d",Crx,Crx_Fun);
            //
            COMMENT("#               Kfrx                 FMx   fct_fmx");
            CARD("%20lg%20lg%10d",VX1,N_x,FUN_B1);
            /*Ry*/
            COMMENT("#                Kry   fct_Kry                SAy-                SAy+");
            CARD("%20lg%10d%20lg%20lg",Kry,Yr_fun,Y_A,Y_B);
            //
            COMMENT("#                Cry   fct_Cry");
            CARD("%20lg%10d",Cry,Cry_Fun);
            //
            COMMENT("#               Kfry                 FMy   fct_fmy");
            CARD("%20lg%20lg%10d",VY1,N_y,FUN_B2);
            /*Rz*/
            COMMENT("#                Krz   fct_Krz                SAz-                SAz+");
            CARD("%20lg%10d%20lg%20lg",Krz,Zr_fun,Z_A,Z_B);
            //
            COMMENT("#                Crz   fct_Crz");
            CARD("%20lg%10d",Crz,Crz_Fun);
            //
            COMMENT("#               Kfrz                 FMz   fct_fmz");
            CARD("%20lg%20lg%10d",VZ1,N_z,FUN_B3);
        }
    }
    else if(type==2)
    {
        /*Rx*/
        if(IO_FLAG == 1)
        {
            COMMENT("#                Krx   fct_Krx                SAx-                SAx+");
            FREE_CARD(Dof_opt,"%20lg%10d%20lg%20lg",Krx,Xr_fun,X_A,X_B);
        }
        //
        if(Dof_opt == 1)
        { 
            
            if(IO_FLAG == 0)
            {
                COMMENT("#                Krx   fct_Krx                SAx-                SAx+  ");
                CARD("%20lg%10d%20lg%20lg",Krx,Xr_fun,X_A,X_B);
            }
            COMMENT("#                Crx   fct_Crx");
            CARD("%20lg%10d",Crx,Crx_Fun);
            //
            COMMENT("#               Kfrx                 FMx   fct_fmx");
            CARD("%20lg%20lg%10d",VX1,N_x,FUN_B1);
        }
    }
    else if(type==3)
    {
        /*Tx*/
        if(IO_FLAG == 1)
        {
            COMMENT("#                Ktx   fct_Ktx                SDx-                SDx+");
            FREE_CARD(Dof_opt,"%20lg%10d%20lg%20lg",Ktx,Xt_fun,type12_XN,type12_Xc);
        }
        //
        if(Dof_opt == 1)
        {
            
            if(IO_FLAG == 0)
            {
                COMMENT("#                Ktx   fct_Ktx                SDx-                SDx+");
                CARD("%20lg%10d%20lg%20lg",Ktx,Xt_fun,type12_XN,type12_Xc);
            }
            COMMENT("#                Ctx   fct_Ctx");
            CARD("%20lg%10d",Ctx,Ctx_Fun);
            //
            COMMENT("#               Kftx                 FFx   fct_ffx");
            CARD("%20lg%20lg%10d",Vx,Prop_X_F,FUN_A1);
            /*Rx*/
            COMMENT("#                Krx   fct_Krx                SAx-                SAx+");
            CARD("%20lg%10d%20lg%20lg",Krx,Xr_fun,X_A,X_B);
            //
            COMMENT("#                Crx   fct_Crx");
            CARD("%20lg%10d",Crx,Crx_Fun);
            //
            COMMENT("#               Kfrx                 FMx   fct_fmx");
            CARD("%20lg%20lg%10d",VX1,N_x,FUN_B1);
        }
    }
    else if(type==4)
    {
        /*Ty*/
        if(IO_FLAG == 1)
        {
            COMMENT("#                Kty   fct_Kty                SDy-                SDy+");
            FREE_CARD(Dof_opt,"%20lg%10d%20lg%20lg",Kty,Yt_fun,type12_YN,type12_Yc);
        }
        //
        if(Dof_opt == 1)
        {
            
            if(IO_FLAG == 0)
            {
                COMMENT("#                Kty   fct_Kty                SDy-                SDy+");
                CARD("%20lg%10d%20lg%20lg",Kty,Yt_fun,type12_YN,type12_Yc);
            }
            COMMENT("#                Cty   fct_Cty");
            CARD("%20lg%10d",Cty,Cty_Fun);
            //
            COMMENT("#               Kfty                 FFY   fct_ffy");
            CARD("%20lg%20lg%10d",Vy,Prop_Y_F,FUN_A2);
            /*Tz*/
            COMMENT("#                Ktz   fct_Ktz                SDz-                SDz+");
            CARD("%20lg%10d%20lg%20lg",Ktz,Zt_fun,type12_ZN,type12_Zc);
            //
            COMMENT("#                Ctz   fct_Ctz");
            CARD("%20lg%10d",Ctz,Ctz_Fun);
            //
            COMMENT("#               Kftz                 FFz   fct_ffz");
            CARD("%20lg%20lg%10d",Vz,Prop_Z_F,FUN_A3);
            /*Rx*/
            COMMENT("#                Krx   fct_Krx                SAx-                SAx+");
            CARD("%20lg%10d%20lg%20lg",Krx,Xr_fun,X_A,X_B);
            //
            COMMENT("#                Crx   fct_Crx");
            CARD("%20lg%10d",Crx,Crx_Fun);
            //
            COMMENT("#               Kfrx                 FMx   fct_fmx");
            CARD("%20lg%20lg%10d",VX1,N_x,FUN_B1);
        }
    }
    else if(type==5)
    {
        /*Ry*/
        if(IO_FLAG == 1)
        {
            COMMENT("#                Kry   fct_Kry                SAy-                SAy+");
            FREE_CARD(Dof_opt,"%20lg%10d%20lg%20lg",Kry,Yr_fun,Y_A,Y_B);
        }
        //
        if(Dof_opt == 1)
        {
            
            if(IO_FLAG == 0)
            {
                COMMENT("#                Kry   fct_Kry                SAy-                SAy+");
                CARD("%20lg%10d%20lg%20lg",Kry,Yr_fun,Y_A,Y_B);
            }
            COMMENT("#                Cry   fct_Cry");
            CARD("%20lg%10d",Cry,Cry_Fun);
            //
            COMMENT("#               Kfry                 FMy   fct_fmy");
            CARD("%20lg%20lg%10d",VY1,N_y,FUN_B2);
            /*Rz*/
            COMMENT("#                Krz   fct_Krz                SAz-                SAz+");
            CARD("%20lg%10d%20lg%20lg",Krz,Zr_fun,Z_A,Z_B);
            //
            COMMENT("#                Crz   fct_Crz");
            CARD("%20lg%10d",Crz,Crz_Fun);
            //
            COMMENT("#               Kfrz                 FMz   fct_fmz");
            CARD("%20lg%20lg%10d",VZ1,N_z,FUN_B3);
        }
    }
    else if(type==6)
    {
        /*Tx*/
        if(IO_FLAG == 1)
        {
            COMMENT("#                Ktx   fct_Ktx                SDx-                SDx+");
            FREE_CARD(Dof_opt,"%20lg%10d%20lg%20lg",Ktx,Xt_fun,type12_XN,type12_Xc);
        }
        if(Dof_opt == 1)
        {
            
            if(IO_FLAG == 0)
            {
                COMMENT("#                Ktx   fct_Ktx                SDx-                SDx+");
                CARD("%20lg%10d%20lg%20lg",Ktx,Xt_fun,type12_XN,type12_Xc);
            }
            COMMENT("#                Ctx   fct_Ctx");
            CARD("%20lg%10d",Ctx,Ctx_Fun);
            //
            COMMENT("#               Kftx                 FFx   fct_ffx");
            CARD("%20lg%20lg%10d",Vx,Prop_X_F,FUN_A1);
        }
    }
    else if(type==7)
    {
        /*Ty*/
        if(IO_FLAG == 1)
        {
            COMMENT("#                Kty   fct_Kty                SDy-                SDy+");
            FREE_CARD(Dof_opt,"%20lg%10d%20lg%20lg",Kty,Yt_fun,type12_YN,type12_Yc);
        }
        //
        if(Dof_opt == 1)
        {
            if(IO_FLAG == 0)
            {
                COMMENT("#                Kty   fct_Kty                SDy-                SDy+");
                CARD("%20lg%10d%20lg%20lg",Kty,Yt_fun,type12_YN,type12_Yc);
            }
            COMMENT("#                Cty   fct_Cty");
            CARD("%20lg%10d",Cty,Cty_Fun);
            //
            COMMENT("#               Kfty                 FFY   fct_ffy");
            CARD("%20lg%20lg%10d",Vy,Prop_Y_F,FUN_A2);
            /*Tz*/
            COMMENT("#                Ktz   fct_Ktz                SDz-                SDz+");
            CARD("%20lg%10d%20lg%20lg",Ktz,Zt_fun,type12_ZN,type12_Zc);
            //
            COMMENT("#                Ctz   fct_Ctz");
            CARD("%20lg%10d",Ctz,Ctz_Fun);
            //
            COMMENT("#               Kftz                 FFz   fct_ffz");
            CARD("%20lg%20lg%10d",Vz,Prop_Z_F,FUN_A3);
        }
    }
    else if(type==8)
    {       
    }
    else if(type==9)
    {
        /*Tx*/
        if(IO_FLAG == 1)
        {
            COMMENT("#                Ktx   fct_Ktx                SDx-                SDx+");
            FREE_CARD(Dof_opt,"%20lg%10d%20lg%20lg",Ktx,Xt_fun,type12_XN,type12_Xc);
        }
        //
        if(Dof_opt == 1)
        {
            
            if(IO_FLAG == 0)
            {
                COMMENT("#                Ktx   fct_Ktx                SDx-                SDx+");
                CARD("%20lg%10d%20lg%20lg",Ktx,Xt_fun,type12_XN,type12_Xc);
            }
            COMMENT("#                Ctx   fct_Ctx");
            CARD("%20lg%10d",Ctx,Ctx_Fun);
            //
            COMMENT("#               Kftx                 FFx   fct_ffx");
            CARD("%20lg%20lg%10d",Vx,Prop_X_F,FUN_A1);
            /*Ty*/
            COMMENT("#                Kty   fct_Kty                SDy-                SDy+");
            CARD("%20lg%10d%20lg%20lg",Kty,Yt_fun,type12_YN,type12_Yc);
            //
            COMMENT("#                Cty   fct_Cty");
            CARD("%20lg%10d",Cty,Cty_Fun);
            //
            COMMENT("#               Kfty                 FFY   fct_ffy");
            CARD("%20lg%20lg%10d",Vy,Prop_Y_F,FUN_A2);
            /*Tz*/
            COMMENT("#                Ktz   fct_Ktz                SDz-                SDz+");
            CARD("%20lg%10d%20lg%20lg",Ktz,Zt_fun,type12_ZN,type12_Zc);
            //
            COMMENT("#                Ctz   fct_Ctz");
            CARD("%20lg%10d",Ctz,Ctz_Fun);
            //
            COMMENT("#               Kftz                 FFz   fct_ffz");
            CARD("%20lg%20lg%10d",Vz,Prop_Z_F,FUN_A3);
            /*Rx*/
            COMMENT("#                Krx   fct_Krx                SAx-                SAx+");
            CARD("%20lg%10d%20lg%20lg",Krx,Xr_fun,X_A,X_B);
            //
            COMMENT("#                Crx   fct_Crx");
            CARD("%20lg%10d",Crx,Crx_Fun);
            //
            COMMENT("#               Kfrx                 FMx   fct_fmx");
            CARD("%20lg%20lg%10d",VX1,N_x,FUN_B1);
            /*Ry*/
            COMMENT("#                Kry   fct_Kry                SAy-                SAy+");
            CARD("%20lg%10d%20lg%20lg",Kry,Yr_fun,Y_A,Y_B);
            //
            COMMENT("#                Cry   fct_Cry");
            CARD("%20lg%10d",Cry,Cry_Fun);
            //
            COMMENT("#               Kfry                 FMy   fct_fmy");
            CARD("%20lg%20lg%10d",VY1,N_y,FUN_B2);
            /*Rz*/
            COMMENT("#                Krz   fct_Krz                SAz-                SAz+");
            CARD("%20lg%10d%20lg%20lg",Krz,Zr_fun,Z_A,Z_B);
            //
            COMMENT("#                Crz   fct_Crz");
            CARD("%20lg%10d",Crz,Crz_Fun);
            //
            COMMENT("#               Kfrz                 FMz   fct_fmz");
            CARD("%20lg%20lg%10d",VZ1,N_z,FUN_B3);
        }
    }
    else
    {
    }
}

// File format for Radioss 120
FORMAT(radioss120) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE45/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/KJOINT2/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    //
    COMMENT("#     Type                  Kn                 ScF                  Cr   sens_ID");
    CARD("%10d%20lg%20lg%20lg%10d",type,Kn,SCALE,Cr,ISENSOR);
    if(type==1)
    {
        /*Rx*/
        if(IO_FLAG == 1)
        {
            COMMENT("#                Krx   fct_Krx                SAx-                SAx+");
            FREE_CARD(Dof_opt,"%20lg%10d%20lg%20lg",Krx,Xr_fun,X_A,X_B);
        }
        //
        if(Dof_opt == 1)
        {
           
            if(IO_FLAG == 0)
            {
                COMMENT("#                Krx   fct_Krx                SAx-                SAx+");
                CARD("%20lg%10d%20lg%20lg",Krx,Xr_fun,X_A,X_B);
            }
            COMMENT("#                Crx   fct_Crx");
            CARD("%20lg%10d",Crx,Crx_Fun);
            //
            COMMENT("#               Kfrx                 FMx   fct_fmx");
            CARD("%20lg%20lg%10d",VX1,N_x,FUN_B1);
            /*Ry*/
            COMMENT("#                Kry   fct_Kry                SAy-                SAy+");
            CARD("%20lg%10d%20lg%20lg",Kry,Yr_fun,Y_A,Y_B);
            //
            COMMENT("#                Cry   fct_Cry");
            CARD("%20lg%10d",Cry,Cry_Fun);
            //
            COMMENT("#               Kfry                 FMy   fct_fmy");
            CARD("%20lg%20lg%10d",VY1,N_y,FUN_B2);
            /*Rz*/
            COMMENT("#                Krz   fct_Krz                SAz-                SAz+");
            CARD("%20lg%10d%20lg%20lg",Krz,Zr_fun,Z_A,Z_B);
            //
            COMMENT("#                Crz   fct_Crz");
            CARD("%20lg%10d",Crz,Crz_Fun);
            //
            COMMENT("#               Kfrz                 FMz   fct_fmz");
            CARD("%20lg%20lg%10d",VZ1,N_z,FUN_B3);
        }
    }
    else if(type==2)
    {
        /*Rx*/
        if(IO_FLAG == 1)
        {
            COMMENT("#                Krx   fct_Krx                SAx-                SAx+");
            FREE_CARD(Dof_opt,"%20lg%10d%20lg%20lg",Krx,Xr_fun,X_A,X_B);
        }
        //
        if(Dof_opt == 1)
        { 
            
            if(IO_FLAG == 0)
            {
                COMMENT("#                Krx   fct_Krx                SAx-                SAx+  ");
                CARD("%20lg%10d%20lg%20lg",Krx,Xr_fun,X_A,X_B);
            }
            COMMENT("#                Crx   fct_Crx");
            CARD("%20lg%10d",Crx,Crx_Fun);
            //
            COMMENT("#               Kfrx                 FMx   fct_fmx");
            CARD("%20lg%20lg%10d",VX1,N_x,FUN_B1);
        }
    }
    else if(type==3)
    {
        /*Tx*/
        if(IO_FLAG == 1)
        {
            COMMENT("#                Ktx   fct_Ktx                SDx-                SDx+");
            FREE_CARD(Dof_opt,"%20lg%10d%20lg%20lg",Ktx,Xt_fun,type12_XN,type12_Xc);
        }
        //
        if(Dof_opt == 1)
        {
            
            if(IO_FLAG == 0)
            {
                COMMENT("#                Ktx   fct_Ktx                SDx-                SDx+");
                CARD("%20lg%10d%20lg%20lg",Ktx,Xt_fun,type12_XN,type12_Xc);
            }
            COMMENT("#                Ctx   fct_Ctx");
            CARD("%20lg%10d",Ctx,Ctx_Fun);
            //
            COMMENT("#               Kftx                 FFx   fct_ffx");
            CARD("%20lg%20lg%10d",Vx,Prop_X_F,FUN_A1);
            /*Rx*/
            COMMENT("#                Krx   fct_Krx                SAx-                SAx+");
            CARD("%20lg%10d%20lg%20lg",Krx,Xr_fun,X_A,X_B);
            //
            COMMENT("#                Crx   fct_Crx");
            CARD("%20lg%10d",Crx,Crx_Fun);
            //
            COMMENT("#               Kfrx                 FMx   fct_fmx");
            CARD("%20lg%20lg%10d",VX1,N_x,FUN_B1);
        }
    }
    else if(type==4)
    {
        /*Ty*/
        if(IO_FLAG == 1)
        {
            COMMENT("#                Kty   fct_Kty                SDy-                SDy+");
            FREE_CARD(Dof_opt,"%20lg%10d%20lg%20lg",Kty,Yt_fun,type12_YN,type12_Yc);
        }
        //
        if(Dof_opt == 1)
        {
            
            if(IO_FLAG == 0)
            {
                COMMENT("#                Kty   fct_Kty                SDy-                SDy+");
                CARD("%20lg%10d%20lg%20lg",Kty,Yt_fun,type12_YN,type12_Yc);
            }
            COMMENT("#                Cty   fct_Cty");
            CARD("%20lg%10d",Cty,Cty_Fun);
            //
            COMMENT("#               Kfty                 FFY   fct_ffy");
            CARD("%20lg%20lg%10d",Vy,Prop_Y_F,FUN_A2);
            /*Tz*/
            COMMENT("#                Ktz   fct_Ktz                SDz-                SDz+");
            CARD("%20lg%10d%20lg%20lg",Ktz,Zt_fun,type12_ZN,type12_Zc);
            //
            COMMENT("#                Ctz   fct_Ctz");
            CARD("%20lg%10d",Ctz,Ctz_Fun);
            //
            COMMENT("#               Kftz                 FFz   fct_ffz");
            CARD("%20lg%20lg%10d",Vz,Prop_Z_F,FUN_A3);
            /*Rx*/
            COMMENT("#                Krx   fct_Krx                SAx-                SAx+");
            CARD("%20lg%10d%20lg%20lg",Krx,Xr_fun,X_A,X_B);
            //
            COMMENT("#                Crx   fct_Crx");
            CARD("%20lg%10d",Crx,Crx_Fun);
            //
            COMMENT("#               Kfrx                 FMx   fct_fmx");
            CARD("%20lg%20lg%10d",VX1,N_x,FUN_B1);
        }
    }
    else if(type==5)
    {
        /*Ry*/
        if(IO_FLAG == 1)
        {
            COMMENT("#                Kry   fct_Kry                SAy-                SAy+");
            FREE_CARD(Dof_opt,"%20lg%10d%20lg%20lg",Kry,Yr_fun,Y_A,Y_B);
        }
        //
        if(Dof_opt == 1)
        {
            
            if(IO_FLAG == 0)
            {
                COMMENT("#                Kry   fct_Kry                SAy-                SAy+");
                CARD("%20lg%10d%20lg%20lg",Kry,Yr_fun,Y_A,Y_B);
            }
            COMMENT("#                Cry   fct_Cry");
            CARD("%20lg%10d",Cry,Cry_Fun);
            //
            COMMENT("#               Kfry                 FMy   fct_fmy");
            CARD("%20lg%20lg%10d",VY1,N_y,FUN_B2);
            /*Rz*/
            COMMENT("#                Krz   fct_Krz                SAz-                SAz+");
            CARD("%20lg%10d%20lg%20lg",Krz,Zr_fun,Z_A,Z_B);
            //
            COMMENT("#                Crz   fct_Crz");
            CARD("%20lg%10d",Crz,Crz_Fun);
            //
            COMMENT("#               Kfrz                 FMz   fct_fmz");
            CARD("%20lg%20lg%10d",VZ1,N_z,FUN_B3);
        }
    }
    else if(type==6)
    {
        /*Tx*/
        if(IO_FLAG == 1)
        {
            COMMENT("#                Ktx   fct_Ktx                SDx-                SDx+");
            FREE_CARD(Dof_opt,"%20lg%10d%20lg%20lg",Ktx,Xt_fun,type12_XN,type12_Xc);
        }
        if(Dof_opt == 1)
        {
            
            if(IO_FLAG == 0)
            {
                COMMENT("#                Ktx   fct_Ktx                SDx-                SDx+");
                CARD("%20lg%10d%20lg%20lg",Ktx,Xt_fun,type12_XN,type12_Xc);
            }
            COMMENT("#                Ctx   fct_Ctx");
            CARD("%20lg%10d",Ctx,Ctx_Fun);
            //
            COMMENT("#               Kftx                 FFx   fct_ffx");
            CARD("%20lg%20lg%10d",Vx,Prop_X_F,FUN_A1);
        }
    }
    else if(type==7)
    {
        /*Ty*/
        if(IO_FLAG == 1)
        {
            COMMENT("#                Kty   fct_Kty                SDy-                SDy+");
            FREE_CARD(Dof_opt,"%20lg%10d%20lg%20lg",Kty,Yt_fun,type12_YN,type12_Yc);
        }
        //
        if(Dof_opt == 1)
        {
            
            if(IO_FLAG == 0)
            {
                COMMENT("#                Kty   fct_Kty                SDy-                SDy+");
                CARD("%20lg%10d%20lg%20lg",Kty,Yt_fun,type12_YN,type12_Yc);
            }
            COMMENT("#                Cty   fct_Cty");
            CARD("%20lg%10d",Cty,Cty_Fun);
            //
            COMMENT("#               Kfty                 FFY   fct_ffy");
            CARD("%20lg%20lg%10d",Vy,Prop_Y_F,FUN_A2);
            /*Tz*/
            COMMENT("#                Ktz   fct_Ktz                SDz-                SDz+");
            CARD("%20lg%10d%20lg%20lg",Ktz,Zt_fun,type12_ZN,type12_Zc);
            //
            COMMENT("#                Ctz   fct_Ctz");
            CARD("%20lg%10d",Ctz,Ctz_Fun);
            //
            COMMENT("#               Kftz                 FFz   fct_ffz");
            CARD("%20lg%20lg%10d",Vz,Prop_Z_F,FUN_A3);
        }
    }
    else if(type==8)
    {       
    }
    else if(type==9)
    {
        /*Tx*/
        if(IO_FLAG == 1)
        {
            COMMENT("#                Ktx   fct_Ktx                SDx-                SDx+");
            FREE_CARD(Dof_opt,"%20lg%10d%20lg%20lg",Ktx,Xt_fun,type12_XN,type12_Xc);
        }
        //
        if(Dof_opt == 1)
        {
            
            if(IO_FLAG == 0)
            {
                COMMENT("#                Ktx   fct_Ktx                SDx-                SDx+");
                CARD("%20lg%10d%20lg%20lg",Ktx,Xt_fun,type12_XN,type12_Xc);
            }
            COMMENT("#                Ctx   fct_Ctx");
            CARD("%20lg%10d",Ctx,Ctx_Fun);
            //
            COMMENT("#               Kftx                 FFx   fct_ffx");
            CARD("%20lg%20lg%10d",Vx,Prop_X_F,FUN_A1);
            /*Ty*/
            COMMENT("#                Kty   fct_Kty                SDy-                SDy+");
            CARD("%20lg%10d%20lg%20lg",Kty,Yt_fun,type12_YN,type12_Yc);
            //
            COMMENT("#                Cty   fct_Cty");
            CARD("%20lg%10d",Cty,Cty_Fun);
            //
            COMMENT("#               Kfty                 FFY   fct_ffy");
            CARD("%20lg%20lg%10d",Vy,Prop_Y_F,FUN_A2);
            /*Tz*/
            COMMENT("#                Ktz   fct_Ktz                SDz-                SDz+");
            CARD("%20lg%10d%20lg%20lg",Ktz,Zt_fun,type12_ZN,type12_Zc);
            //
            COMMENT("#                Ctz   fct_Ctz");
            CARD("%20lg%10d",Ctz,Ctz_Fun);
            //
            COMMENT("#               Kftz                 FFz   fct_ffz");
            CARD("%20lg%20lg%10d",Vz,Prop_Z_F,FUN_A3);
            /*Rx*/
            COMMENT("#                Krx   fct_Krx                SAx-                SAx+");
            CARD("%20lg%10d%20lg%20lg",Krx,Xr_fun,X_A,X_B);
            //
            COMMENT("#                Crx   fct_Crx");
            CARD("%20lg%10d",Crx,Crx_Fun);
            //
            COMMENT("#               Kfrx                 FMx   fct_fmx");
            CARD("%20lg%20lg%10d",VX1,N_x,FUN_B1);
            /*Ry*/
            COMMENT("#                Kry   fct_Kry                SAy-                SAy+");
            CARD("%20lg%10d%20lg%20lg",Kry,Yr_fun,Y_A,Y_B);
            //
            COMMENT("#                Cry   fct_Cry");
            CARD("%20lg%10d",Cry,Cry_Fun);
            //
            COMMENT("#               Kfry                 FMy   fct_fmy");
            CARD("%20lg%20lg%10d",VY1,N_y,FUN_B2);
            /*Rz*/
            COMMENT("#                Krz   fct_Krz                SAz-                SAz+");
            CARD("%20lg%10d%20lg%20lg",Krz,Zr_fun,Z_A,Z_B);
            //
            COMMENT("#                Crz   fct_Crz");
            CARD("%20lg%10d",Crz,Crz_Fun);
            //
            COMMENT("#               Kfrz                 FMz   fct_fmz");
            CARD("%20lg%20lg%10d",VZ1,N_z,FUN_B3);
        }
    }
    else
    {
    }
}
