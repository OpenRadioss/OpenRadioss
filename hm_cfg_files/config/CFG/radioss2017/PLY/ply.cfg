//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// /PLY/
//

ATTRIBUTES(COMMON)
{
// INPUT ATTRIBUTES
    TITLE                                      = VALUE(STRING,"Ply title");
    material                                   = VALUE(MAT,"Material identifier for layer");
    thickness1                                 = VALUE(FLOAT,"Thickness of layer");
    orientangle                                = VALUE(FLOAT,"Incremental angle for layer");
    integrationpoints                          = VALUE(INT,"Number of integration points through ply thickness");
    orientangle2                               = VALUE(FLOAT,"Angle between first and second material direction for ply i");
    table                                      = VALUE(TABLE,"Drape identifier");
    def_orth                                   = VALUE(INT,"The orthotropy angle");
    grsh4n_ID                                  = VALUE(SETS,"Temp variable Shell 4-nodes group identifier")    { SUBTYPES = (/SETS/GRSH3N); }
    grsh3n_ID                                  = VALUE(SETS,"Temp variable Shell 3-nodes group identifier")    { SUBTYPES = (/SETS/GRSHEL); }
        
// HM INTERNAL
    KEYWORD_STR                                = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                               = SIZE("NUM_COMMENTS");
    CommentEnumField                           = VALUE(INT,"User Comments");
    COMMENTS                                   = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    entitylistmax                              = SIZE("Size of entity list");
    entitylistdisplayed                        = ARRAY[entitylistmax](SETS,"Shell 3-nodes group identifier connected to Ply") { SUBTYPES = ( /SETS/GRSH3N, /SETS/GRSHEL  ) ; }
    id                                         = VALUE(SETS,"Temp variable for id");
    internal_id                                = VALUE(INT,"Temp variable for internalid");
    index                                      = VALUE(INT,"Temp variable for indexing");

}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                                = 9000;
    COMMENTS                                   = 5109;
    CommentEnumField                           = 7951;
    NUM_COMMENTS                               = 5110;
    def_orth                                   = 5026;
    grsh4n_ID                                  = -1;
    grsh3n_ID                                  = -1;
    id                                         = -1;
    internal_id                                = -1;
    index                                      = -1;
}

CHECK(COMMON)
{
    integrationpoints         >=  1;
    integrationpoints         <= 10;
}

DEFAULTS(COMMON)
{
    orientangle2                               = 90.0;
    integrationpoints                          = 1;
    def_orth                                   = 2;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }

    ASSIGN(KEYWORD_STR,"/PLY");
    DATA(material);
    SCALAR(thickness1)             { DIMENSION = "l"; }
    SCALAR(orientangle)            { DIMENSION = "a"; }

    DATA(entitylistdisplayed);
    SCALAR(integrationpoints);
    SCALAR(orientangle2)           { DIMENSION = "a"; }

    DATA(table);
    RADIO(def_orth)
    {
      ADD(1,"1: The orthotropy angle is calculated using the angle PHIs defined in /SHELL and /SH3N");
      ADD(2,"2: (default) The orthotropy angle is calculated using the skew and rotation defined in /STACK option");
    }
}

// For /PLY cfg to work in hm we will have to do some preprocessing to extract the grsh3n_id & grsh4n_id from the 
// hm dataname i.e. entitylistdisplayed before exporting the data and similarly some post processing
// after importing the data.
// File format

FORMAT(radioss2017)
{
/*
    //@Ranjith 
    //Uncomment the following code when this CFG is used in Hm for export. 
    //Its not tested for hm but it should work.
    
    if(entitylistmax==2)
    {
        ASSIGN(index,0,EXPORT);
        ASSIGN(id, _ATTRIB(entitylistdisplayed, index), EXPORT);
        ASSIGN(internal_id,[@getinternalid(33,id)], EXPORT);// Check to see to if the id is of /SET/GRSHELL
        if(internal_id != 0)
        {
            ASSIGN(grsh4n_ID, id, EXPORT);
            ASSIGN(index,1,EXPORT);
            ASSIGN(grsh3n_ID, _ATTRIB(entitylistdisplayed, index), EXPORT);
        }
        else
        {
            ASSIGN(grsh3n_ID, id, EXPORT);
            ASSIGN(index,1,EXPORT);
            ASSIGN(grsh4n_ID, _ATTRIB(entitylistdisplayed, index), EXPORT);
        }
    }
    else if(entitylistmax==1)
    {
        ASSIGN(index,0,EXPORT);
        ASSIGN(id, _ATTRIB(entitylistdisplayed, index), EXPORT);
        ASSIGN(internal_id,[@getinternalid(33,id)], EXPORT); // Check to see to if the id is of /SET/GRSHELL
        if(internal_id != 0)
        {
            ASSIGN(grsh4n_ID, id, EXPORT);
        }
        else
        {
            ASSIGN(grsh3n_ID, id, EXPORT);
        }
    }
*/
    

    HEADER("/PLY/%d",_ID_);
    CARD("%-100s",TITLE);
    COMMENT("#   mat_ID                   t           delta_phi grsh4n_ID grsh3n_ID   Npt_ply             alpha_i");
    CARD("%10d%20lg%20lg%10d%10d%10d%20lg",material,thickness1,orientangle,grsh4n_ID,grsh3n_ID,integrationpoints,orientangle2);

    COMMENT("# drape_ID  def_orth");
    CARD("%10d%10d",table,def_orth);
}
