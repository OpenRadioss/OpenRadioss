//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Material law 92

ATTRIBUTES(COMMON) {
    NUM_COMMENTS                    = SIZE("NUM_COMMENTS");
    KEYWORD_STR                     = VALUE(STRING, "Solver Keyword");
    CommentEnumField                = VALUE(INT,"User Comments");
    COMMENTS                        = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    MAT_RHO                         = VALUE(FLOAT,"Initial Density");
    MAT_MUE1                        = VALUE(FLOAT, "Shear Modulus");
    MAT_D                           = VALUE(FLOAT, "Material Parameter for Bulk Modulus Computation");
    MAT_Lamda                       = VALUE(FLOAT, "Limit of Stretch");
    Itype                           = VALUE(INT, "Type of Test Data");
    MAT_FCT_IDI                     = VALUE(FUNCT, "Function Defining Stress Vs Engineering Strain");
    MAT_NU                          = VALUE(FLOAT,"Poisson's Ratio");
    Heat_Inp_opt                    = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT                 = VALUE(SUBOBJECT, "");
    THERM_STRESS                    = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS             = VALUE(SUBOBJECT, "");
    VISC_PRONY_option               = VALUE(INT,"Visc Prony");
    SUBGRP_VISC_PRONY               = VALUE(SUBOBJECT, "");
    IO_FLAG                         = VALUE(INT, "");
    TITLE                           = VALUE(STRING,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                     = 9000;
    COMMENTS                        = 5109;
    CommentEnumField                = 7951;
    MAT_RHO                         = 118;
    Itype                           = 5107;
    MAT_D                           = 997;
    MAT_FCT_IDI                     = 1053;
    MAT_Lamda                       = 4100;
    MAT_MUE1                        = 8014;
    MAT_NU                          = 120;
    NUM_COMMENTS                    = 5110;
    Heat_Inp_opt                    = 4346;
    SUBGRP_HEAT_MAT                 = -1;
    THERM_STRESS                    = 4555;
    SUBGRP_THERM_STRESS             = -1;
    VISC_PRONY_option               = 4707;
    SUBGRP_VISC_PRONY               = -1;
    IO_FLAG                         = -1;
    TITLE                           = -1;
}
DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY                 = SCALAR(MAT_RHO);
    POISSON_RATIO                   = SCALAR(MAT_NU);
    SHEAR_MODULUS                   = SCALAR(MAT_MUE1);
    YOUNG_MODULUS=EVAL(2*1.463*SHEAR_MODULUS);
    BULK_MODULUS=EVAL(YOUNG_MODULUS/(3*0.074));
    SOUND_SPEED                     = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
    SOUND_SPEED_SOLID               = EVAL(((4*SHEAR_MODULUS/3+BULK_MODULUS)/INITIAL_DENSITY)^0.5);
}
CHECK(COMMON)
{
    MAT_RHO    >0.0;
}

DEFAULTS(COMMON)
{

    Itype               = 1;
    MAT_D               = 1E30;
    MAT_Lamda           = 7.0;
    MAT_NU              = 0;
}

GUI(COMMON) 
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    ASSIGN(KEYWORD_STR, "/MAT");
    ASSIGN(KEYWORD_STR, "/LAW92/");

    mandatory:
		SCALAR(MAT_RHO)    	   {DIMENSION="density";}
    optional:
		SCALAR(MAT_MUE1)       {DIMENSION="pressure";}
        SCALAR(MAT_D)          { DIMENSION = "inverse_of_pressure"; }
        SCALAR(MAT_Lamda)      { DIMENSION = "DIMENSIONLESS"; } 
        RADIO(Itype)
        {
            ENUM_VALUE_FLAG=TRUE;
            ADD(1, "1: Uniaxial Test Data(Default)");
            ADD(2, "2: Equibiaxial Test Data");
            ADD(3, "3: Planar Test Data");
        }
        DATA(MAT_FCT_IDI);

		SCALAR(MAT_NU)       {DIMENSION="DIMENSIONLESS";}

        graphical FLAG(Heat_Inp_opt);
        if (Heat_Inp_opt!= 0) {
            SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
        }
        graphical FLAG(THERM_STRESS);
        if (THERM_STRESS!= 0) {
            SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
        }
        if(VISC_PRONY_option!=0)
        {
            SUBOBJECT(SUBGRP_VISC_PRONY) {SUBTYPES = (/SUBOBJECT/VISC);}
        } 
    /*
    mandatory:
    graphical SUPPORT("Support") 
    {
    OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/PENTA6,
    /COMPONENT/TETRA10,/COMPONENT/BRIC20);
    ADD(COMPONENT,"Parts");
    }
    */
}
FORMAT(radioss2017)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 0)
    {
        HEADER("/MAT/LAW92/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    COMMENT("#              Rho_i");
    CARD("%20lg",MAT_RHO);
    COMMENT("#                 Mu                   D                 LAM");
    CARD("%20lg%20lg%20lg",MAT_MUE1,MAT_D,MAT_Lamda);
    COMMENT("#    Itype   Func_ID                  Nu");
    CARD("%10d%10d%20lg",Itype,MAT_FCT_IDI,MAT_NU);
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
    if(VISC_PRONY_option!=0)
    {
        SUBOBJECTS(SUBGRP_VISC_PRONY,/SUBOBJECT/VISC);
    }
}
