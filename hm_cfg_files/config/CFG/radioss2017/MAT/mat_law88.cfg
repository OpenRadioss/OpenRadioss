//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Material law 88 setup file
ATTRIBUTES(COMMON)
{
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField						= VALUE(INT,  "User Comments");
    MAT_RHO                                 = VALUE(FLOAT,  "Rho_Initial");
    LAW88_Nu                                = VALUE(FLOAT,  "Poisson's ratio");
    LAW88_K                                 = VALUE(FLOAT,  "Bulk Modulus");
    LAW88_Fcut                              = VALUE(FLOAT,  "Cutoff Frequency for Strain Rate Filtering");
    LAW88_Fsmooth                           = VALUE(INT,  "Smooth Strain Rate Option Flag");
    LAW88_NL                                = SIZE("Number of Loading Stress-Strain Curve");
    LAW88_fct_IDunL                         = VALUE(FUNCT,"Function Identifier Defining Unloading Engineering Stress Vs Strain");
    LAW88_FscaleunL							= VALUE(FLOAT,  "Unloading Function Scale Factor");
    LAW88_Hys                               = VALUE(FLOAT,  "Hysteresis Unloading Factor, Ignored If Unloading Function is Used");
    LAW88_Shape                             = VALUE(FLOAT,  "Shape Factor, Ignored if Unloading Function is Used");
    LAW88_Tension                           = VALUE(INT,  "Unloading Rate Effects Option Flag");
    LAW88_arr1                              = ARRAY[LAW88_NL](FUNCT,"Loading Function Identifier Defining Engineering Stress Vs Strain for ith Strain Rate Function");
    LAW88_arr2                              = ARRAY[LAW88_NL](FLOAT,  "Scale Factor for ith Loading Function");
    LAW88_arr3                              = ARRAY[LAW88_NL](FLOAT,  "Strain Rate for ith Loading Engineering Stress Vs Engineering Strain Function");
    Heat_Inp_opt                            = VALUE(INT,   "Heat");
    SUBGRP_HEAT_MAT                         = VALUE(SUBOBJECT, "");
    THERM_STRESS							= VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS                     = VALUE(SUBOBJECT, "");
    VISC_PRONY_option                       = VALUE(INT,"Visc Prony");
    SUBGRP_VISC_PRONY                       = VALUE(SUBOBJECT, "");
    IO_FLAG                                 = VALUE(INT, "");
    TITLE                                   = VALUE(STRING,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    COMMENTS                                = 5109;
    CommentEnumField						= 7951;
    LAW88_Fcut                              = 2511;
    LAW88_FscaleunL                         = 2515;
    LAW88_Fsmooth                           = 2512;
    LAW88_Hys                               = 2516;
    LAW88_K                                 = 2510;
    LAW88_NL                                = 2513;
    LAW88_Nu                                = 2509;
    LAW88_Shape                             = 2517;
    LAW88_Tension                           = 2518;
    LAW88_arr1                              = 2519;
    LAW88_arr2                              = 2520;
    LAW88_arr3                              = 2521;
    LAW88_fct_IDunL                         = 2514;
    MAT_RHO                                 = 118;
    NUM_COMMENTS                            = 5110;
    Heat_Inp_opt                            = 4346;
    SUBGRP_HEAT_MAT                         = -1;
    THERM_STRESS							= 4555;
    SUBGRP_THERM_STRESS                     = -1;
    VISC_PRONY_option                       = 4707;
    SUBGRP_VISC_PRONY                       = -1;
    IO_FLAG                                 = -1;
    TITLE                                   = -1;
}
DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY                 = SCALAR(MAT_RHO);
    POISSON_RATIO                   = SCALAR(LAW88_Nu);
}
CHECK(COMMON)
{
    LAW88_Hys                                     >=0.0;
    LAW88_Hys                                     <=1.0;
    LAW88_NL                                      >=0;
    LAW88_NL                                      <=99;
    MAT_RHO										  >0.0;
}

DEFAULTS(COMMON)
{
    LAW88_Fcut                                   = 1.0e30;
    LAW88_FscaleunL								 = 1.0;
    LAW88_Fsmooth                                = 0;
    LAW88_Hys                                    = 0.0;
    LAW88_Shape                                  = 1.0;
    LAW88_Tension                                = 0;
    LAW88_NL                                     = 0;
    CommentEnumField							 = 1;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if( CommentEnumField == 2)
    {
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }
    ASSIGN(KEYWORD_STR, "/MAT");
    ASSIGN(KEYWORD_STR, "/LAW88/");

mandatory:
    SCALAR(MAT_RHO)						  { DIMENSION="density";  }
    SCALAR(LAW88_Nu)                      { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(LAW88_K)                       { DIMENSION="pressure"; }
	optional:   
   	 	SCALAR(LAW88_Fcut)                { DIMENSION = "DIMENSIONLESS"; }
    	RADIO(LAW88_Fsmooth)
    	{
      	 	 ADD(0,"No Strain Rate Smoothing");
       		 ADD(1,"Strain Rate Smoothing Active");  
    	}
    	SIZE(LAW88_NL);       
    	ARRAY(LAW88_NL,"Loading Function Definition")
    	{
        	FUNCTION(LAW88_arr1) 
        	{
            	X_TITLE="Strain"; 
            	X_DIMENSION="DIMENSIONLESS" ;	
            	Y_TITLE="Stress";
            	Y_DIMENSION="pressure"; 
        	}
        	SCALAR(LAW88_arr2)			{ DIMENSION="pressure"; }
        	SCALAR(LAW88_arr3)          { DIMENSION="strain_rate"; }
    	}
    	DATA(LAW88_fct_IDunL);
    	SCALAR(LAW88_FscaleunL)         { DIMENSION="pressure"; }
    	SCALAR(LAW88_Hys)               { DIMENSION = "DIMENSIONLESS"; }
    	SCALAR(LAW88_Shape)             { DIMENSION = "DIMENSIONLESS"; }
    	RADIO(LAW88_Tension)
    	{
       	 	ADD(0,"Unloading Follows the Quasi Static Unloading Curve");
        	ADD(1,"Unloading Follows the Loading Strain Rate Dependent Curves and the Unloading Curve is not Used");
        	ADD(-1,"Unloading in Tension Follows the Quasi Static Unloading Curve ; Unloading in Compression Follows the Loading Strain Rate Dependent Curves");
    	} 
    /* mandatory:
    graphical SUPPORT("Support") 
    {
    OBJECTS=(/PART/BRICK,/PART/TETRA4,/PART/LINEAR_3D,/PART/PENTA6,
    /PART/TETRA10,/PART/BRIC20);
    ADD(PART,"Parts");
    }
    */
	optional:
		graphical FLAG(Heat_Inp_opt);
		if (Heat_Inp_opt!= 0) {
			SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
		}
		graphical FLAG(THERM_STRESS);
		if (THERM_STRESS!= 0) {
			SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
		}
		if(VISC_PRONY_option!=0)
		{
			SUBOBJECT(SUBGRP_VISC_PRONY) {SUBTYPES = (/SUBOBJECT/VISC);}
		}
}
FORMAT(radioss2017)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 0)
    {
        HEADER("/MAT/LAW88/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    COMMENT("#              RHO_I");
    CARD("%20lg",MAT_RHO);
    COMMENT("#                 NU                   K               F_CUT  F_SMOOTH        NL");
    CARD("%20lg%20lg%20lg%10d%10d",LAW88_Nu,LAW88_K,LAW88_Fcut,LAW88_Fsmooth,LAW88_NL);
    COMMENT("#FCT_ID_UN                    F_SCALE_UN                 HYS               SHAPE   TENSION");
    CARD("%10d          %20lg%20lg%20lg%10d",LAW88_fct_IDunL,LAW88_FscaleunL,LAW88_Hys,LAW88_Shape,LAW88_Tension); 
    if(LAW88_NL > 0)
    {
        COMMENT("#FCT_ID_LI                    F_SCALE_LI             EPSI_LI") ;
        CARD_LIST(LAW88_NL)
        {
            CARD("%10d          %20lg%20lg",LAW88_arr1,LAW88_arr2,LAW88_arr3);
        }
    }
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
    if(VISC_PRONY_option!=0)
    {
        SUBOBJECTS(SUBGRP_VISC_PRONY,/SUBOBJECT/VISC);
    }
}