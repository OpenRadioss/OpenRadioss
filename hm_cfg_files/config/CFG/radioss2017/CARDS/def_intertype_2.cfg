//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//CONTROL CARD - /DEFAULT/INTER/TYPE2 - 8033 - 2018
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR = VALUE(STRING, "Solver Keyword");
    Isearch = VALUE(INT, "Search formulation flag for the closest master segment");
    Istf = VALUE(INT, "Interface stiffness definition flag");
    NodDel2 = VALUE(INT, "Node deletion flag");
    SLAVE_NODES_TO_DELETE = VALUE(INT, "Flag to ignore slave nodes if no master segment found.");
    WFLAG = VALUE(INT, "Spotweld formulation flag");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR = 9000;
    Isearch = 8042;
    Istf = 8044;
    NodDel2 = 4012;
    SLAVE_NODES_TO_DELETE = 7018;
    WFLAG = 5169;
}

DEFAULTS(COMMON)
{

    Isearch = 2;
    Istf = 2;
    NodDel2 = 1000;
    SLAVE_NODES_TO_DELETE = 1000;
    WFLAG = 4;
}

GUI(COMMON)
{
mandatory:
    ASSIGN(KEYWORD_STR, "/DEFAULT/INTER/TYPE2");

    RADIO(SLAVE_NODES_TO_DELETE) // Ignore
    {
        ADD(1, "1: Slave nodes with no master segment found during the Starter are deleted from the interface.");
        ADD(2, "2: Slave nodes with no master segment found during the Starter are deleted from the interface, new calculation for dsearch, if dsearch = 0");
        ADD(3, "3: Slave nodes with no master segment found during the Starter are deleted from the interface, new calculation for dsearch, if dsearch = 0");
        ADD(1000, "1000: No deletion of slave nodes");
    }

    RADIO(WFLAG) // Spotflag - potweld formulation flag.  change in last
    {
        ADD(1, "1: formulation is optimized for spotwelds or rivets");
        ADD(2, "2: same formulation as standard formulation. Required when using hierarchy levels. Not compatible with nodal time step, /DT/NODA/CST.");
        ADD(4, "4: Default, if /CAA is used. Rotational DOF are not transmitted, if shells are used. Not compatible with nodal time step /DT/NODA/CTS.");
        ADD(5, "5: Default, if /CAA is not used. Standard formulation");
        ADD(20, "20: Surface computed using shell and brick faces attached to the node.");
        ADD(21, "21: Surface computed using only the shell attached to the node.");
        ADD(22, "22: Surface computed using only the brick faces attached to the node.");
        ADD(25, "25: Penalty formulation (not recommended).");
        ADD(27, "27: Kinematic formulation similar to Spotflag =5 with an automatic switch to penalty formulation when incompatible kinematic conditions occur.");
        ADD(28, "28: Kinematic formulation similar to Spotflag =1 with an automatic switch to penalty formulation when incompatible kinematic conditions occur.");
        ADD(30, "30: formulation with cubic curvature of master segment. Not compatible with nodal time step, /DT/NODA/CST");
    }

    RADIO(Isearch)
    {
        ADD(1, "1: Old formulation (only used for previous version).");
        ADD(2, "2: New improved formulation.");
    }

    RADIO(NodDel2)
    {
        ADD(1, "1: Kinematic condition is suppressed on the slave node, when all elements linked to the master segment are deleted. (The slave node is removed from the interface).");
        ADD(2, "2: Kinematic condition is suppressed on the slave node, if the master element is deleted. (The slave node is removed from the interface).");
        ADD(1000, "1000: No deletion.");
    }
optional:
    if (WFLAG == 25 || WFLAG == 27 || WFLAG == 28)
    {
        RADIO(Istf)
        {
            ADD(1, "1: Penalty stiffness is only based on master segment stiffness.");
            ADD(2, "2: Penalty stiffness is computed from both master and slave characteristics.");
            ADD(3, "3: Penalty stiffness is computed from both master and slave characteristics.");
            ADD(4, "4: Penalty stiffness is computed from both master and slave characteristics.");
            ADD(5, "5: Penalty stiffness is computed from both master and slave characteristics.");
        }
    }
}

// File format
FORMAT(radioss2017)
{
    HEADER("/DEFAULT/INTER/TYPE2");
    BLANK;
    COMMENT("#                       Ignore  SpotFlag             Isearch     Idel2");
    CARD("                    %10d%10d          %10d%10d", SLAVE_NODES_TO_DELETE, WFLAG, Isearch, NodDel2);
    if (WFLAG == 25 || WFLAG == 26 || WFLAG == 27 || WFLAG == 28)
    {
        COMMENT("#                                                                 Istf");
        CARD("                                                            %10d", Istf);
    }
}

// File format
FORMAT(radioss140)
{
    HEADER("/DEFAULT/INTER/TYPE2");
    BLANK;
    COMMENT("#                       Ignore  SpotFlag             Isearch     Idel2");
    CARD("                    %10d%10d          %10d%10d", SLAVE_NODES_TO_DELETE, WFLAG, Isearch, NodDel2);
    if (WFLAG == 25 || WFLAG == 26 || WFLAG == 27 || WFLAG == 28)
    {
        COMMENT("#                                                                 Istf");
        CARD("                                                            %10d", Istf);
    }
}
