//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
ATTRIBUTES(COMMON)
{
    ALPHA2                  = VALUE(FLOAT,  "Security coefficient on search for neighbors");
    ALE_MAXSPH              = VALUE(INT,  "Maximum number of ghost particles allowed to be created at one time");
    ALE_KVOISPH             = VALUE(INT,  "Maximum number of neighbors to be taken into account for the SPH approximation");
    ALE_Form                = VALUE(INT,  "Maximum number of neighbors");
    SPHGLO_Isol2sph         = VALUE(INT,  "Particle activation process method for Sol2SPH");
    /* ================================ HM =================================*/
    IO_FLAG                 = VALUE(INT, "");
    KEYWORD_STR             = VALUE(STRING, "Solver Keyword");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR             = 9000;
    ALPHA2                  = 6146;
    ALE_MAXSPH              = 4324;
    ALE_KVOISPH             = 4325;
    ALE_Form                = 4336;
    SPHGLO_Isol2sph         = 1757;
    IO_FLAG                 = -1;
    KEYWORD_STR             = -1;
}

CHECK(COMMON)
{
    ALPHA2                  <=0.5;
}

DEFAULTS(COMMON)
{
    ALPHA2                  = 0.25;
    ALE_Form                = 120;
    ALE_KVOISPH             = 120;
    SPHGLO_Isol2sph         = 0;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "/SPHGLO");
    SEPARATOR("SPHGLO");
    SCALAR(ALPHA2)      { DIMENSION="DIMENSIONLESS"; }
    SCALAR(ALE_MAXSPH)  { DIMENSION="DIMENSIONLESS"; }
    SCALAR(ALE_KVOISPH) { DIMENSION="DIMENSIONLESS"; }
    SCALAR(ALE_Form)    { DIMENSION="DIMENSIONLESS"; }
    RADIO(SPHGLO_Isol2sph)
    {
        ADD(0,"default");
        ADD(1,"1: switch of elements to particles based on part");
        ADD(2,"2: switch of elements to particles based on subset");
    }
    SEPARATOR("");
}

FORMAT(radioss2017)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);
    
    /* Added separately for HEADER workaround*/
    if(IO_FLAG == 0)
    {
        HEADER ("/SPHGLO");
        COMMENT("#         Alpha_sort    Maxsph    Lneigh    Nneigh  Isol2sph");
        CARD ("%20lg%10d%10d%10d%10d",ALPHA2,ALE_MAXSPH,ALE_KVOISPH,ALE_Form,SPHGLO_Isol2sph);
    }
    else
    {
        CARD ("%20lg%10d%10d%10d%10d",ALPHA2,ALE_MAXSPH,ALE_KVOISPH,ALE_Form,SPHGLO_Isol2sph);
    }
}

FORMAT(radioss120)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);
    
    /* Added separately for HEADER workaround*/
    if(IO_FLAG == 0)
    {
        HEADER ("/SPHGLO");
        COMMENT("#         Alpha_sort    Maxsph    Lneigh    Nneigh");
        CARD ("%20lg%10d%10d%10d",ALPHA2,ALE_MAXSPH,ALE_KVOISPH,ALE_Form);
    }
    else
    {
        CARD ("%20lg%10d%10d%10d",ALPHA2,ALE_MAXSPH,ALE_KVOISPH,ALE_Form);
    }
}

FORMAT(radioss51)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);
    
    /* Added separately for HEADER workaround*/
    if(IO_FLAG == 0)
    {
        HEADER ("/SPHGLO");
        COMMENT("#         Alpha_sort    Maxsph    Lneigh");
        CARD ("%20lg%10d%10d",ALPHA2,ALE_MAXSPH,ALE_KVOISPH);
    }
    else
    {
        CARD ("%20lg%10d%10d",ALPHA2,ALE_MAXSPH,ALE_KVOISPH);
    }
}