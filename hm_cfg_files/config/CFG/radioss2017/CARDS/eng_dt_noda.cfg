//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// ENG_DT_NODA
//

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES

    //DEFAULT_0
    FScale23                                = VALUE(FLOAT, "Scale factor on critical nodal time step","DeltaTsca");
    Tmin6                                   = VALUE(FLOAT, "Minimum time step","DeltaTmin");
    //DEFAULT_1
    NUM1                                    = SIZE("Number of cards");
    Tscale_arr                              = ARRAY[NUM1](FLOAT, "Scale factor on critical nodal time step is only applied to the nodes in this node group","DeltaTsca"); 
    Tmin_arr                                = ARRAY[NUM1](FLOAT, "Minimum time step is only applied to the nodes in this node group","DeltaTmin");
    GrNode_Id2_arr                          = ARRAY[NUM1](SETS,  "The nodal time step method is only applied to the nodes in this node group","grnd_ID"){ SUBTYPES = (/SETS/GRNOD) ; }
    //STOP
    FScale11                                = VALUE(FLOAT, "Scale factor on critical nodal time step","DeltaTsca");
    Tmin1                                   = VALUE(FLOAT, "Minimum time step","DeltaTmin");
    //CST_0
    FScale33                                = VALUE(FLOAT, "Scale factor on critical nodal time step","DeltaTsca");
    Tmin3                                   = VALUE(FLOAT, "Minimum time step","DeltaTmin");
    //CST_1
    NIP                                     = SIZE("Number of cards");
    ENG_DT_Scale                            = ARRAY[NIP](FLOAT, "Scale factor on critical nodal time step is only applied to the nodes in this node group","DeltaTsca");
    ENG_DT_Min                              = ARRAY[NIP](FLOAT, "Minimum time step is only applied to the nodes in this node group","DeltaTmin");
    GrNode_Id_arr                           = ARRAY[NIP](SETS,  "The nodal time step method is only applied to the nodes in this node group","grnd_ID"){ SUBTYPES = (/SETS/GRNOD) ; }
    //CST_1_0
    Tscale_CST1_0                           = VALUE(FLOAT, "Scale factor on critical nodal time step","DeltaTsca");
    Tmin_CST1_0                             = VALUE(FLOAT, "Minimum time step","DeltaTmin");
    //CST_1_1
    N_CST1_1                                = SIZE("Number of cards");
    Tscale_CST1_1                           = ARRAY[N_CST1_1](FLOAT, "Scale factor on critical nodal time step is only applied to the nodes in this node group","DeltaTsca");
    Tmin_CST1_1                             = ARRAY[N_CST1_1](FLOAT, "Minimum time step is only applied to the nodes in this node group","DeltaTmin");
    GrNode_Id_arr_CST1_1                    = ARRAY[N_CST1_1](SETS,  "The nodal time step method is only applied to the nodes in this node group","grnd_ID"){ SUBTYPES = (/SETS/GRNOD) ; }
    //CST_2_0
    Tscale_CST2_0                           = VALUE(FLOAT, "Scale factor on critical nodal time step","DeltaTsca");
    Tmin_CST2_0                             = VALUE(FLOAT, "Minimum time step","DeltaTmin");
    //CST_2_1
    N_CST2_1                                = SIZE("Number of cards");
    Tscale_CST2_1                           = ARRAY[N_CST2_1](FLOAT, "Scale factor on critical nodal time step is only applied to the nodes in this node group","DeltaTsca"); 
    Tmin_CST2_1                             = ARRAY[N_CST2_1](FLOAT, "Minimum time step is only applied to the nodes in this node group","DeltaTmin");
    GrNode_Id_arr_CST2_1                    = ARRAY[N_CST2_1](SETS,  "The nodal time step method is only applied to the nodes in this node group","grnd_ID"){ SUBTYPES = (/SETS/GRNOD) ; }
    //AMS
    Iflag                                   = VALUE(INT, "Flag for additional (optional) card","Iflag");
    FScale12                                = VALUE(FLOAT, "Scale factor on critical nodal time step","DeltaTsca");
    Tmin4                                   = VALUE(FLOAT, "Minimum time step","DeltaTmin");
    SCALE                                   = VALUE(FLOAT, "Tolerance for AMS convergence","Tol_AMS");
    //SET
    FScale13                                = VALUE(FLOAT, "Scale factor on critical nodal time step","DeltaTsca");
    Tmin5                                   = VALUE(FLOAT, "Minimum time step","DeltaTmin");

    //FLAGS
    ENG_DT_NODA_DEFAULT_0                   = VALUE(INT, "Time step control type is not specified then the computation will use the nodal time step and DeltaT min is not used");
    ENG_DT_NODA_DEFAULT_1                   = VALUE(INT, "Time step control type then the computation will use the nodal time step and DeltaT min is not used");
    ENG_DT_NODA_STOP                        = VALUE(INT, "STOP: the simulation will stop if the time step reaches DeltaT min and a restart file will be written");
    ENG_DT_NODA_CST_0                       = VALUE(INT, "CST: use default constant time step method");
    ENG_DT_NODA_CST_1                       = VALUE(INT, "CST: use default constant time step method");
    ENG_DT_NODA_CST1_0                      = VALUE(INT, "CST1: Nodal mass is increased to maintain the constant time step DeltaT min");
    ENG_DT_NODA_CST1_1                      = VALUE(INT, "CST1: Nodal mass is increased to maintain the constant time step DeltaT min");
    ENG_DT_NODA_CST2_0                      = VALUE(INT, "CST2: Nodal mass is increased to maintain the constant time step DeltaT min. Improved formulation");
    ENG_DT_NODA_CST2_1                      = VALUE(INT, "CST2: Nodal mass is increased to maintain the constant time step DeltaT min. Improved formulation");
    ENG_DT_NODA_AMS                         = VALUE(INT, "AMS: Advanced Mass Scaling. The time step becomes constant after reaching DeltaT min");
    ENG_DT_NODA_SET                         = VALUE(INT, "SET: Reduce the equivalent nodal stiffness to maintain the constant time step DeltaT min");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    IO_FLAG                                 = VALUE(INT, "");
    opt_str                                 = VALUE(STRING,"");
    _dummy                                  = VALUE(INT, "");

}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES

    //DEFAULT_0
    FScale23                                = 4054;
    Tmin6                                   = 8132;
    //DEFAULT_1
    NUM1                                    = 331;
    Tscale_arr                              = 713;
    Tmin_arr                                = 714;
    GrNode_Id2_arr                          = 715;
    //STOP
    FScale11                                = 4050;
    Tmin1                                   = 8112;
    //CST_0
    FScale33                                = 4052;
    Tmin3                                   = 2631;
    //CST_1
    NIP                                     = 427;
    ENG_DT_Scale                            = 7087;
    ENG_DT_Min                              = 7088;
    GrNode_Id_arr                           = 558;
    //CST_1_0
    Tscale_CST1_0                           = 2630;
    Tmin_CST1_0                             = 2631;
    //CST_1_1
    N_CST1_1                                = 2643;
    Tscale_CST1_1                           = 2633;
    Tmin_CST1_1                             = 2634;
    GrNode_Id_arr_CST1_1                    = 2635;
    //CST_2_0
    Tscale_CST2_0                           = 2637;
    Tmin_CST2_0                             = 2638;
    //CST_2_1
    N_CST2_1                                = 2644;
    Tscale_CST2_1                           = 2640;
    Tmin_CST2_1                             = 2641;
    GrNode_Id_arr_CST2_1                    = 2642;
    //AMS
    Iflag                                   = 6002;
    FScale12                                = 4053;
    Tmin4                                   = 8124;
    SCALE                                   = 13;
    //SET
    FScale13                                = 4055;
    Tmin5                                   = 8128;
    //FLAGS
    ENG_DT_NODA_DEFAULT_0                   = 417;
    ENG_DT_NODA_DEFAULT_1                   = 712;
    ENG_DT_NODA_STOP                        = 7467;
    ENG_DT_NODA_CST_0                       = 7469;
    ENG_DT_NODA_CST_1                       = 557;
    ENG_DT_NODA_CST1_0                      = 2629;
    ENG_DT_NODA_CST1_1                      = 2632;
    ENG_DT_NODA_CST2_0                      = 2636;
    ENG_DT_NODA_CST2_1                      = 2639;
    ENG_DT_NODA_AMS                         = 7470;
    ENG_DT_NODA_SET                         = 7471;

    //HM INTERNAL
    KEYWORD_STR                             = 9000;
    IO_FLAG                                 = -1;
    opt_str                                 = -1;
    _dummy                                  = -1;
}

GUI(COMMON)
{
    FLAG(ENG_DT_NODA_DEFAULT_0);
    if(ENG_DT_NODA_DEFAULT_0 != FALSE)
    {
        SCALAR(FScale23) { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(Tmin6) { DIMENSION = "DIMENSIONLESS"; }
    }
    FLAG(ENG_DT_NODA_DEFAULT_1);
    if(ENG_DT_NODA_DEFAULT_1 != FALSE)
    {
        SIZE(NUM1);
        ARRAY(NUM1,"Number of cards")
        {
            SCALAR(Tscale_arr) { DIMENSION = "DIMENSIONLESS"; }
            SCALAR(Tmin_arr) { DIMENSION = "DIMENSIONLESS"; }
            DATA(GrNode_Id2_arr);
        }
    }

    FLAG(ENG_DT_NODA_STOP);
    if(ENG_DT_NODA_STOP != FALSE)
    {
        SCALAR(FScale11) { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(Tmin1) { DIMENSION = "DIMENSIONLESS"; }
    }

    FLAG(ENG_DT_NODA_CST_0);
    if(ENG_DT_NODA_CST_0 != FALSE)
    {
        SCALAR(FScale33) { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(Tmin3) { DIMENSION = "DIMENSIONLESS"; }
    }
    FLAG(ENG_DT_NODA_CST_1);
    if(ENG_DT_NODA_CST_1 != FALSE)
    {
        SIZE(NIP);
        ARRAY(NIP,"Number of cards")
        {
            SCALAR(ENG_DT_Scale) { DIMENSION = "DIMENSIONLESS"; }
            SCALAR(ENG_DT_Min) { DIMENSION = "DIMENSIONLESS"; }
            DATA(GrNode_Id_arr);
        }
    }

    FLAG(ENG_DT_NODA_CST1_0);
    if(ENG_DT_NODA_CST1_0 != FALSE)
    {
        SCALAR(Tscale_CST1_0) { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(Tmin_CST1_0) { DIMENSION = "DIMENSIONLESS"; }
    }
    FLAG(ENG_DT_NODA_CST1_1);
    if(ENG_DT_NODA_CST1_1 != FALSE)
    {
        SIZE(N_CST1_1);
        ARRAY(N_CST1_1,"Number of cards")
        {
            SCALAR(Tscale_CST1_1) { DIMENSION = "DIMENSIONLESS"; }
            SCALAR(Tmin_CST1_1) { DIMENSION = "DIMENSIONLESS"; }
            DATA(GrNode_Id_arr_CST1_1);
        }
    }

    FLAG(ENG_DT_NODA_CST2_0);
    if(ENG_DT_NODA_CST2_0 != FALSE)
    {
        SCALAR(Tscale_CST2_0) { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(Tmin_CST2_0) { DIMENSION = "DIMENSIONLESS"; }
    }
    FLAG(ENG_DT_NODA_CST2_1);
    if(ENG_DT_NODA_CST2_1 != FALSE)
    {
        SIZE(N_CST2_1);
        ARRAY(N_CST2_1,"Number of cards")
        {
            SCALAR(Tscale_CST2_1) { DIMENSION = "DIMENSIONLESS"; }
            SCALAR(Tmin_CST2_1) { DIMENSION = "DIMENSIONLESS"; }
            DATA(GrNode_Id_arr_CST2_1);
        }
    }

    FLAG(ENG_DT_NODA_SET);
    if(ENG_DT_NODA_SET != FALSE)
    {
        SCALAR(FScale13) { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(Tmin5) { DIMENSION = "DIMENSIONLESS"; }
    }
}

// File format
FORMAT(radioss2017)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG ==1)
    {
        HEADER("/DT/NODA/%s",opt_str);
        if(opt_str == "0")
        {
            ASSIGN(ENG_DT_NODA_DEFAULT_0,1,IMPORT);
        }
        if(opt_str == "1")
        {
            ASSIGN(ENG_DT_NODA_DEFAULT_1,1,IMPORT);
        }
        if(opt_str == "STOP")
        {
            ASSIGN(ENG_DT_NODA_STOP,1,IMPORT);
        }
        if(opt_str == "CST/0")
        {
            ASSIGN(ENG_DT_NODA_CST_0,1,IMPORT);
        }
        if(opt_str == "CST/1")
        {
            ASSIGN(ENG_DT_NODA_CST_1,1,IMPORT);
        }
        if(opt_str == "CST1/0")
        {
            ASSIGN(ENG_DT_NODA_CST1_0,1,IMPORT);
        }
        if(opt_str == "CST1/1")
        {
            ASSIGN(ENG_DT_NODA_CST1_1,1,IMPORT);
        }
        if(opt_str == "CST2/0")
        {
            ASSIGN(ENG_DT_NODA_CST2_0,1,IMPORT);
        }
        if(opt_str == "CST2/1")
        {
            ASSIGN(ENG_DT_NODA_CST2_1,1,IMPORT);
        }
        if(opt_str == "SET")
        {
            ASSIGN(ENG_DT_NODA_SET,1,IMPORT);
        }
    }

    if(ENG_DT_NODA_DEFAULT_0 == 1)
    {
        if(IO_FLAG == 0)
        {
            CARD("/DT/NODA/0");
            CARD("%lg %lg",FScale23,Tmin6);
        }
        else
        {
            CARD("%lg%lg",FScale23,Tmin6);
        }
    }
    if(ENG_DT_NODA_DEFAULT_1 == 1)
    {
        FREE_CARD_LIST(NUM1)
        {
            if(IO_FLAG == 0)
            {
                CARD("/DT/NODA/1");
                CARD("%lg %lg",Tscale_arr,Tmin_arr);
            }
            else
            {
                CARD("%lg%lg",Tscale_arr,Tmin_arr);
            }
            CARD("%d",GrNode_Id2_arr);
        }
    }

    if(ENG_DT_NODA_STOP == 1)
    {
        if(IO_FLAG == 0)
        {
            CARD("/DT/NODA/STOP");
            CARD("%lg %lg",FScale11,Tmin1);
        }
        else
        {
            CARD("%lg%lg",FScale11,Tmin1);
        }
    }

    if(ENG_DT_NODA_CST_0 == 1)
    {
        if(IO_FLAG == 0)
        {
            CARD("/DT/NODA/CST/0");
            CARD("%lg %lg",FScale33,Tmin3);
        }
        else
        {
            CARD("%lg%lg",FScale33,Tmin3);
        }
    }

    if(ENG_DT_NODA_CST_1 == 1)
    {
        FREE_CARD_LIST(NIP)
        {
            if(IO_FLAG == 0)
            {
                CARD("/DT/NODA/CST/1");
                CARD("%lg %lg",ENG_DT_Scale,ENG_DT_Min);
            }
            else
            {
                CARD("%lg%lg",ENG_DT_Scale,ENG_DT_Min);
            }
            CARD("%d",GrNode_Id_arr);
        }
    }

    if(ENG_DT_NODA_CST1_0 == 1)
    {
        if(IO_FLAG == 0)
        {
            CARD("/DT/NODA/CST1/0");
            CARD("%lg %lg",Tscale_CST1_0,Tmin_CST1_0);
        }
        else
        {
            CARD("%lg%lg",Tscale_CST1_0,Tmin_CST1_0);
        }
    }

    if(ENG_DT_NODA_CST1_1 == 1)
    {
        FREE_CARD_LIST(N_CST1_1)
        {
            if(IO_FLAG == 0)
            {
                CARD("/DT/NODA/CST1/1");
                CARD("%lg %lg",Tscale_CST1_1,Tmin_CST1_1);
            }
            else
            {
                CARD("%lg%lg",Tscale_CST1_1,Tmin_CST1_1);
            }
            CARD("%d",GrNode_Id_arr_CST1_1);
        }
    }

    if(ENG_DT_NODA_CST2_0 == 1)
    {
        if(IO_FLAG == 0)
        {
            CARD("/DT/NODA/CST2/0");
            CARD("%lg %lg",Tscale_CST2_0,Tmin_CST2_0);
        }
        else
        {
            CARD("%lg%lg",Tscale_CST2_0,Tmin_CST2_0);
        }
    }

    if(ENG_DT_NODA_CST2_1 == 1)
    {
        FREE_CARD_LIST(N_CST2_1)
        {
            if(IO_FLAG == 0)
            {
                CARD("/DT/NODA/CST2/1");
                CARD("%lg %lg",Tscale_CST2_1,Tmin_CST2_1);
            }
            else
            {
                CARD("%lg%lg",Tscale_CST2_1,Tmin_CST2_1);
            }
            CARD("%d",GrNode_Id_arr_CST2_1);
        }
    }

    if(ENG_DT_NODA_SET == 1)
    {
        if(IO_FLAG == 0)
        {
            CARD("/DT/NODA/SET");
            CARD("%lg %lg",FScale13,Tmin5);
        }
        else
        {
            CARD("%lg%lg",FScale13,Tmin5);
        }
    }
}

FORMAT(radioss51) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG ==1)
    {
        HEADER("/DT/NODA/%s",opt_str);
        if(opt_str == "0")
        {
            ASSIGN(ENG_DT_NODA_DEFAULT_0,1,IMPORT);
        }
        if(opt_str == "1")
        {
            ASSIGN(ENG_DT_NODA_DEFAULT_1,1,IMPORT);
        }
        if(opt_str == "STOP")
        {
            ASSIGN(ENG_DT_NODA_STOP,1,IMPORT);
        }
        if(opt_str == "CST/0")
        {
            ASSIGN(ENG_DT_NODA_CST_0,1,IMPORT);
        }
        if(opt_str == "CST/1")
        {
            ASSIGN(ENG_DT_NODA_CST_1,1,IMPORT);
        }
        if(opt_str == "SET")
        {
            ASSIGN(ENG_DT_NODA_SET,1,IMPORT);
        }
    }

    if(ENG_DT_NODA_DEFAULT_0 == 1)
    {
        if(IO_FLAG == 0)
        {
            CARD("/DT/NODA/0");
            CARD("%lg %lg",FScale23,Tmin6);
        }
        else
        {
            CARD("%lg%lg",FScale23,Tmin6);
        }
    }
    if(ENG_DT_NODA_DEFAULT_1 == 1)
    {
        FREE_CARD_LIST(NUM1)
        {
            if(IO_FLAG == 0)
            {
                CARD("/DT/NODA/1");
                CARD("%lg %lg",Tscale_arr,Tmin_arr);
            }
            else
            {
                CARD("%lg%lg",Tscale_arr,Tmin_arr);
            }
            CARD("%d",GrNode_Id2_arr);
        }
    }

    if(ENG_DT_NODA_STOP == 1)
    {
        if(IO_FLAG == 0)
        {
            CARD("/DT/NODA/STOP");
            CARD("%lg %lg",FScale11,Tmin1);
        }
        else
        {
            CARD("%lg%lg",FScale11,Tmin1);
        }
    }

    if(ENG_DT_NODA_CST_0 == 1)
    {
        if(IO_FLAG == 0)
        {
            CARD("/DT/NODA/CST/0");
            CARD("%lg %lg",FScale33,Tmin3);
        }
        else
        {
            CARD("%lg%lg",FScale33,Tmin3);
        }
    }

    if(ENG_DT_NODA_CST_1 == 1)
    {
        FREE_CARD_LIST(NIP)
        {
            if(IO_FLAG == 0)
            {
                CARD("/DT/NODA/CST/1");
                CARD("%lg %lg",ENG_DT_Scale,ENG_DT_Min);
            }
            else
            {
                CARD("%lg%lg",ENG_DT_Scale,ENG_DT_Min);
            }
            CARD("%d",GrNode_Id_arr);
        }
    }

    if(ENG_DT_NODA_SET == 1)
    {
        if(IO_FLAG == 0)
        {
            CARD("/DT/NODA/SET");
            CARD("%lg %lg",FScale13,Tmin5);
        }
        else
        {
            CARD("%lg%lg",FScale13,Tmin5);
        }
    }
}

FORMAT(radioss100) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG ==1)
    {
        HEADER("/DT/NODA/%s",opt_str);
        if(opt_str == "0")
        {
            ASSIGN(ENG_DT_NODA_DEFAULT_0,1,IMPORT);
        }
        if(opt_str == "1")
        {
            ASSIGN(ENG_DT_NODA_DEFAULT_1,1,IMPORT);
        }
        if(opt_str == "STOP")
        {
            ASSIGN(ENG_DT_NODA_STOP,1,IMPORT);
        }
        if(opt_str == "CST/0")
        {
            ASSIGN(ENG_DT_NODA_CST_0,1,IMPORT);
        }
        if(opt_str == "CST/1")
        {
            ASSIGN(ENG_DT_NODA_CST_1,1,IMPORT);
        }
        if(opt_str == "AMS/1" || opt_str == "AMS/0")
        {
            ASSIGN(ENG_DT_NODA_AMS,1,IMPORT);
        }
        if(opt_str == "SET")
        {
            ASSIGN(ENG_DT_NODA_SET,1,IMPORT);
        }
    }

    if(ENG_DT_NODA_DEFAULT_0 == 1)
    {
        if(IO_FLAG == 0)
        {
            CARD("/DT/NODA/0");
            CARD("%lg %lg",FScale23,Tmin6);
        }
        else
        {
            CARD("%lg%lg",FScale23,Tmin6);
        }
    }
    if(ENG_DT_NODA_DEFAULT_1 == 1)
    {
        FREE_CARD_LIST(NUM1)
        {
            if(IO_FLAG == 0)
            {
                CARD("/DT/NODA/1");
                CARD("%lg %lg",Tscale_arr,Tmin_arr);
            }
            else
            {
                CARD("%lg%lg",Tscale_arr,Tmin_arr);
            }
            CARD("%d",GrNode_Id2_arr);
        }
    }

    if(ENG_DT_NODA_STOP == 1)
    {
        if(IO_FLAG == 0)
        {
            CARD("/DT/NODA/STOP");
            CARD("%lg %lg",FScale11,Tmin1);
        }
        else
        {
            CARD("%lg%lg",FScale11,Tmin1);
        }
    }

    if(ENG_DT_NODA_CST_0 == 1)
    {
        if(IO_FLAG == 0)
        {
            CARD("/DT/NODA/CST/0");
            CARD("%lg %lg",FScale33,Tmin3);
        }
        else
        {
            CARD("%lg%lg",FScale33,Tmin3);
        }
    }

    if(ENG_DT_NODA_CST_1 == 1)
    {
        FREE_CARD_LIST(NIP)
        {
            if(IO_FLAG == 0)
            {
                CARD("/DT/NODA/CST/1");
                CARD("%lg %lg",ENG_DT_Scale,ENG_DT_Min);
            }
            else
            {
                CARD("%lg%lg",ENG_DT_Scale,ENG_DT_Min);
            }
            CARD("%d",GrNode_Id_arr);
        }
    }

    if(ENG_DT_NODA_AMS == 1)
    {
        if(IO_FLAG == 0)
        {
            if (Iflag==1)
            {
                CARD("/DT/NODA/AMS/1");
            }
            else
            {
                CARD("/DT/NODA/AMS/0");
            }
            CARD("%lg %lg",FScale12,Tmin4);
        }
        else
        {
            CARD("%lg%lg",FScale12,Tmin4);
        }
    }

    if(ENG_DT_NODA_AMS == 1 && Iflag==1)
    {
        CARD("%lg",SCALE);
    }

    if(ENG_DT_NODA_SET == 1)
    {
        if(IO_FLAG == 0)
        {
            CARD("/DT/NODA/SET");
            CARD("%lg %lg",FScale13,Tmin5);
        }
        else
        {
            CARD("%lg%lg",FScale13,Tmin5);
        }
    }

}

FORMAT(radioss110) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG ==1)
    {
        HEADER("/DT/NODA/%s",opt_str);
        if(opt_str == "0")
        {
            ASSIGN(ENG_DT_NODA_DEFAULT_0,1,IMPORT);
        }
        if(opt_str == "1")
        {
            ASSIGN(ENG_DT_NODA_DEFAULT_1,1,IMPORT);
        }
        if(opt_str == "STOP")
        {
            ASSIGN(ENG_DT_NODA_STOP,1,IMPORT);
        }
        if(opt_str == "CST/0")
        {
            ASSIGN(ENG_DT_NODA_CST_0,1,IMPORT);
        }
        if(opt_str == "CST/1")
        {
            ASSIGN(ENG_DT_NODA_CST_1,1,IMPORT);
        }
        if(opt_str == "SET")
        {
            ASSIGN(ENG_DT_NODA_SET,1,IMPORT);
        }
    }

     if(ENG_DT_NODA_DEFAULT_0 == 1)
    {
        if(IO_FLAG == 0)
        {
            CARD("/DT/NODA/0");
            CARD("%lg %lg",FScale23,Tmin6);
        }
        else
        {
            CARD("%lg%lg",FScale23,Tmin6);
        }
    }
    if(ENG_DT_NODA_DEFAULT_1 == 1)
    {
        FREE_CARD_LIST(NUM1)
        {
            if(IO_FLAG == 0)
            {
                CARD("/DT/NODA/1");
                CARD("%lg %lg",Tscale_arr,Tmin_arr);
            }
            else
            {
                CARD("%lg%lg",Tscale_arr,Tmin_arr);
            }
            CARD("%d",GrNode_Id2_arr);
        }
    }

    if(ENG_DT_NODA_STOP == 1)
    {
        if(IO_FLAG == 0)
        {
            CARD("/DT/NODA/STOP");
            CARD("%lg %lg",FScale11,Tmin1);
        }
        else
        {
            CARD("%lg%lg",FScale11,Tmin1);
        }
    }

    if(ENG_DT_NODA_CST_0 == 1)
    {
        if(IO_FLAG == 0)
        {
            CARD("/DT/NODA/CST/0");
            CARD("%lg %lg",FScale33,Tmin3);
        }
        else
        {
            CARD("%lg%lg",FScale33,Tmin3);
        }
    }
    if(ENG_DT_NODA_CST_1 == 1)
    {
        FREE_CARD_LIST(NIP)
        {
            if(IO_FLAG == 0)
            {
                CARD("/DT/NODA/CST/1");
                CARD("%lg %lg",ENG_DT_Scale,ENG_DT_Min);
            }
            else
            {
                CARD("%lg%lg",ENG_DT_Scale,ENG_DT_Min);
            }
            CARD("%d",GrNode_Id_arr);
        }
    }

    if(ENG_DT_NODA_SET == 1)
    {
        if(IO_FLAG == 0)
        {
            CARD("/DT/NODA/SET");
            CARD("%lg %lg",FScale13,Tmin5);
        }
        else
        {
            CARD("%lg%lg",FScale13,Tmin5);
        }
    }
}
