//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Failure model, Wilkins (WILKINS) Setup File
// 

ATTRIBUTES(COMMON){ 

	_HMCOMMENTSFLAG  		= VALUE(INT, "Write HM Comments");
	mat_id           		= VALUE(MAT,  "Material");

	Alpha					= VALUE(FLOAT,"Hydrostatic pressure exponent");
	Beta_WILKINS			= VALUE(FLOAT,"Deviatoric coefficient");
	Plim					= VALUE(FLOAT,"Hydrostatic pressure limit");
	Df						= VALUE(FLOAT,"Critical damage");
	Ifail_sh				= VALUE(INT,  "Shell failure flag");
	Ifail_so				= VALUE(INT,  "Flag for solid failure model");

	ID_CARD_EXIST			= VALUE(BOOL, "Give an Id");
}
SKEYWORDS_IDENTIFIER(COMMON)
{
	_HMCOMMENTSFLAG=-1;
}
/*



DEFINITIONS(COMMON) {
  SUPPORTING=(MAT);
}

GUI(COMMON) {
  DATA(MAT) {SUBTYPES=(/MAT/COWPER,
                       /MAT/DAMA,
                       /MAT/HILL,
                       /MAT/HILL_TAB,
                       /MAT/HYD_JCOOK,
                       /MAT/HYDPLA,
                       /MAT/LAW23,
                       /MAT/PLAS_BRIT,
                       /MAT/PLAS_JOHNS,
                       /MAT/PLAS_TAB,
                       /MAT/PLAS_T3,
                       /MAT/PLAS_ZERIL,
                       /MAT/STEINB,
                       /MAT/ZHAO,
                       /MAT/BARLAT2000); }

  SCALAR(ALPHA) { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(BETA)  { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(P_LIM) { DIMENSION="pressure";      }
  SCALAR(D_F)   { DIMENSION = "DIMENSIONLESS"; }
  //
  RADIO(ISHELL) {
    ADD(0,"0: Default");
    ADD(1,"1: Shell is deleted if cond. reached for 1 integ. point or layer");
    ADD(2,"2: For each integ. point, the stress tensor set to 0 if cond. reached,and shell is deleted if cond. reached for all integ. points or layers");
  }
  RADIO(ISOLID) {
    ADD(0,"0: Default");
    ADD(1,"1: Solid is deleted if cond. reached for 1 integ. point");
    ADD(2,"2: For each integ. point, deviatoric stress tensor is vanished if cond. reached");
  }
  FLAG(ID_CARD_EXIST);
}



*/
FORMAT(radioss130) {
	HEADER("/FAIL/WILKINS/%d",mat_id);

	COMMENT("#              ALPHA                BETA                PLIM                  DF  IFAIL_SH  IFAIL_SO");
	CARD("%20lg%20lg%20lg%20lg%10d%10d",Alpha,Beta_WILKINS,Plim,Df,Ifail_sh,Ifail_so);   
	 
	if (ID_CARD_EXIST==TRUE)
	{
	 COMMENT("#  FAIL_ID") ;
	}
	FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);
}

FORMAT(radioss51) {
	HEADER("/FAIL/WILKINS/%d",mat_id);

	COMMENT("#              ALPHA                BETA                PLIM                  DF  IFAIL_SH  IFAIL_SO");
	CARD("%20lg%20lg%20lg%20lg%10d%10d",Alpha,Beta_WILKINS,Plim,Df,Ifail_sh,Ifail_so);   
	
}
