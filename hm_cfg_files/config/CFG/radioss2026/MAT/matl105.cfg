//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 105 (POWDER_BURN) Setup File
//
//This law describes the Powder-Burn material model
//Enhanced to generic page support, venkatk, RFE11336, 03-03-2009

ATTRIBUTES(COMMON) {
    // Support
    // NB_PARTS                     = SIZE("Number of Connected Parts");
    //COMPONENT                     = ARRAY[NB_PARTS](COMPONENT,"Connected Parts");
    KEYWORD_STR                     = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                    = SIZE("NUM_COMMENTS");
    CommentEnumField                = VALUE(INT,"User Comments");
    COMMENTS                        = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    // Initial and reference densities
    MAT_RHO                         = VALUE(FLOAT,"Initial Density");
    Refer_Rho                       = VALUE(FLOAT,"Reference Density (for lower than 14.0 version)");
    DUMMY                           = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    MAT_REFRHO_Option               = VALUE(INT, "RefRho_Option");
    // Other values
    POWDER_BULK                     = VALUE(FLOAT,"Powder Bulk Modulus");
    POWDER_P0                       = VALUE(FLOAT,"Initial Pressure");
    MAT_PSH                         = VALUE(FLOAT,"Pressure Shift");
    GAS_D                           = VALUE(FLOAT,"D parameter");
    GAS_EG                          = VALUE(FLOAT,"Eg parameter");
    POWDER_Gr                       = VALUE(FLOAT,"Gr parameter");
    POWDER_C                        = VALUE(FLOAT,"C parameter");
    Alpha                           = VALUE(FLOAT,"Alpha parameter");
    POWDER_B_FUNC                   = VALUE(FUNCT,"B function");
    POWDER_SCALE_B                  = VALUE(FLOAT,"B Y-scale");
    POWDER_SCALE_P                  = VALUE(FLOAT,"B X-scale");
    POWDER_GAM_FUNC                 = VALUE(FUNCT,"Gamma function");
    POWDER_SCALE_GAM                = VALUE(FLOAT,"Gamma Y-scale");
    POWDER_SCALE_RHO                = VALUE(FLOAT,"Gamma X-scale");
    MAT_C1                          = VALUE(FLOAT,"C1 parameter");
    MAT_C2                          = VALUE(FLOAT,"C2 parameter");
    TITLE                   = VALUE(STRING,"");
    IO_FLAG                 = VALUE(INT, "");
    Mat_Name_OR_LawNo       = VALUE(INT,  "RADIOSS_COMMENT_FLAG");
    LAW_NO                  = VALUE(STRING, "");
}


SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                     = 9000;
    COMMENTS                        = 5109;
    CommentEnumField                = 7951;
    MAT_REFRHO_Option               = 4285;
    MAT_RHO                         = 118;
    Refer_Rho                       = 4229;
    NUM_COMMENTS                    = 5110;
}

DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY                         = SCALAR(MAT_RHO);
}

CHECK(COMMON)
{
    MAT_RHO                         > 0.0;
}

DEFAULTS(COMMON) {
    POWDER_BULK      = 0.0 ;
    POWDER_P0        = 0.0 ;
    MAT_PSH          = 0.0 ;
    GAS_D            = 0.0 ;
    GAS_EG           = 0.0 ;
    POWDER_Gr        = 0.0 ;
    POWDER_C         = 0.0 ;
    Alpha            = 0.0 ;
    POWDER_SCALE_B   = 1.0 ;
    POWDER_SCALE_P   = 1.0 ;
    POWDER_SCALE_GAM = 1.0 ;
    POWDER_SCALE_RHO = 1.0 ;
    MAT_C1           = 0.0 ;
    MAT_C2           = 0.0 ;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if( CommentEnumField == 2 )
    {
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }
    if(Mat_Name_OR_LawNo == 2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW105/");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/POWDER_BURN/");
    }

    mandatory:
    SCALAR(MAT_RHO)      { DIMENSION="density";            }
    SCALAR(POWDER_BULK)  { DIMENSION="pressure";           }

    optional :
    SCALAR(POWDER_P0)    { DIMENSION="pressure";            }
    SCALAR(MAT_PSH)      { DIMENSION="pressure";            }

        SEPARATOR("Gas EoS");
    SCALAR(GAS_D)       { DIMENSION="density"; }
    SCALAR(GAS_EG)      { DIMENSION="energy_per_unit_mass"; }
        SEPARATOR();

        SEPARATOR("Burning Rate parameters");
    SCALAR(POWDER_Gr)   { DIMENSION="inverse_of_length"; }
    SCALAR(POWDER_C)    { DIMENSION="DIMENSIONLESS"; }
    SCALAR(Alpha)       { DIMENSION="DIMENSIONLESS"; }
        SEPARATOR();

        SEPARATOR("Burning Velocity");
    SCALAR(MAT_C1)           { DIMENSION="velocity"; }
    SCALAR(MAT_C2)           { DIMENSION="DIMENSIONLESS"; }
    SCALAR(POWDER_SCALE_B)   { DIMENSION="velocity"; }
    SCALAR(POWDER_SCALE_P)   { DIMENSION="pressure"; }
    SCALAR(POWDER_SCALE_GAM) { DIMENSION="DIMENSIONLESS"; }
    SCALAR(POWDER_SCALE_RHO) { DIMENSION="density"; }
        SEPARATOR();


}


//file format
FORMAT(radioss2026)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW105/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/POWDER_BURN/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    COMMENT("#                RHO");
    CARD("%20lg",MAT_RHO);
    COMMENT("#                  B                  P0                 PSH");
    CARD("%20lg%20lg%20lg",POWDER_BULK,POWDER_P0,MAT_PSH);
    // gas eos
    COMMENT("#                  D                  EG");
    CARD("%20lg%20lg",GAS_D,GAS_EG);
    // growth model
    COMMENT("#                 Gr                   C               alpha");
    CARD("%20lg%20lg%20lg",POWDER_Gr,POWDER_C,Alpha);
    // burning rate
    COMMENT("#F_id_b(P)                       SCALE_B             SCALE_P");
    CARD("%10d          %20lg%20lg",POWDER_B_FUNC,POWDER_SCALE_B,POWDER_SCALE_P);
    // speed of ignition
    COMMENT("#F_id_g(r)                   SCALE_GAMMA           SCALE_RHO                  C1                  C2");
    CARD("%10d          %20lg%20lg%20lg%20lg",POWDER_GAM_FUNC,POWDER_SCALE_GAM,POWDER_SCALE_RHO,MAT_C1,MAT_C2);
}

