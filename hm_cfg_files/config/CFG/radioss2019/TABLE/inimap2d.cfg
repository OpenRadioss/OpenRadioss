//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// /INIMAP2D/
//

ATTRIBUTES(COMMON)
{
    // INPUT ATTRIBUTES

    // Card
    state_opt                                 = VALUE(INT, "Initial state formulation");

    Axis_Origin_Node_N1                       = VALUE(NODE, "Node identifier N1");
    Axis_Node_N2                              = VALUE(NODE, "Node identifier N2");
    Axis_Node_N3                              = VALUE(NODE, "Node identifier N3");

    grbrick_id                                = VALUE(SETS, "Brick group on which initialization is performed") { SUBTYPES = (/SETS/GRBRIC) ; }
    grquad_ID                                 = VALUE(SETS, "Quad group on which initialization is performed") { SUBTYPES = (/SETS/GRQUAD) ; }
    grtria_id                                 = VALUE(SETS, "Tria group on which initialization is performed")  { SUBTYPES = (/SETS/GRSH3N) ; }

    fct2d_ID1                                 = VALUE(FUNCT, "2D function identifier (from /FUNC_2D) for density initialization");
    fct2d_ID2                                 = VALUE(FUNCT, "2D function identifier (from /FUNC_2D) for specific internal energy initialization (if form=VE). Pressure initialization (if form=VP)");
    fct2d_ID3                                 = VALUE(FUNCT, "2D function identifier (from /FUNC_2D) for velocity initialization");

    //HM INTERNAL
    KEYWORD_STR                               = VALUE(STRING, "Solver Keyword");

    IO_FLAG                                   = VALUE(INT, "IOFLAG");
    dummy_opt                                 = VALUE(STRING, "");

    TITLE                                     = VALUE(STRING, "Inimap2d block title");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //  Card
    state_opt                                 = -1;
    grquad_ID                                 = -1;
    fct2d_ID1                                 = -1;
    fct2d_ID2                                 = -1;
    fct2d_ID3                                 = -1;

    //HM INTERNAL
    KEYWORD_STR                               = 9000;

    IO_FLAG                                   = -1;
    dummy_opt                                 = -1;

    TITLE                                     = -1;
}

CHECK(COMMON)
{

}

DEFAULTS(COMMON)
{

}

GUI(COMMON) 
{

    RADIO(state_opt, "form")
    {
      ADD(1, "VE: Mass density, specific internal energy and velocity are provided");
      ADD(2, "VP: Mass density, pressure and velocity are provided");
    }

    if(state_opt == 1)
    {
        ASSIGN(KEYWORD_STR, "/INIMAP2D/VE");
    }
    else if(state_opt == 2)
    {
        ASSIGN(KEYWORD_STR, "/INIMAP2D/VP");
    }

    DATA(Axis_Origin_Node_N1, "node_ID1");
    DATA(Axis_Node_N2, "node_ID2");
    DATA(Axis_Node_N3, "node_ID3");

    DATA(grbrick_id, "grbric_ID");
    DATA(grquad_ID, "grquad_ID");
    DATA(grtria_id, "grtria_ID");

    DATA(fct2d_ID1, "fct_ID1");
    DATA(fct2d_ID2, "fct_ID2");
    DATA(fct2d_ID3, "fct_ID3");

}

//File format
FORMAT(radioss2019)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    
    if(IO_FLAG == 1)
    {
        HEADER("/INIMAP2D/%s/%d", dummy_opt, _ID_);

        if(dummy_opt == "VE")
        {
            ASSIGN(state_opt,1,IMPORT);
        }
        else if(dummy_opt == "VP")
        {
            ASSIGN(state_opt,2,IMPORT);
        } 
    }
    else if(IO_FLAG == 0)
    {
       if(state_opt == 1)
         HEADER("/INIMAP2D/VE/%-d", _ID_);
    
        if(state_opt == 2)
         HEADER("/INIMAP2D/VP/%-d", _ID_);
    }

    // Card
    CARD("%-100s", TITLE);

    COMMENT("# node_ID1  node_ID2  node_ID3");
    CARD("%10d%10d%10d", Axis_Origin_Node_N1, Axis_Node_N2, Axis_Node_N3);

    COMMENT("#grbric_ID grquad_ID grtria_ID");
    CARD("%10d%10d%10d", grbrick_id, grquad_ID, grtria_id);

    COMMENT("#fct2d_ID1 fct2d_ID2 fct2d_ID3");
    CARD("%10d%10d%10d", fct2d_ID1, fct2d_ID2, fct2d_ID3);
}
