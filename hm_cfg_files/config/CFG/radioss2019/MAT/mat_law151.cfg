//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
ATTRIBUTES(COMMON)
{
    KEYWORD_STR               = VALUE(STRING,"Solver Keyword");
    NUM_COMMENTS              = SIZE("NUM_COMMENTS");
    COMMENTS                  = ARRAY[NUM_COMMENTS](STRING,"Entity_Comments");
    CommentEnumField          = VALUE(INT,"User Comments");
    NIP                       = SIZE("Number of materials");
    MAT_ID_ARRAY              = ARRAY[NIP](MAT,"Sub-material identifier");
    VOL_FRAC_ARRAY            = ARRAY[NIP](FLOAT,"Volume Fraction");
    Mat_Name_OR_LawNo         = VALUE(INT,"");
    TITLE                     = VALUE(STRING,"");
    IO_FLAG                   = VALUE(INT, "");
    LAW_NO                    = VALUE(STRING, ""); 
    Heat_Inp_opt              = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT           = VALUE(SUBOBJECT, "");
    THERM_STRESS              = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS       = VALUE(SUBOBJECT, "");
    ALE_Form                  = VALUE(INT, "Flag for Heat Transfer Formulation");
    SUBGRP_ALE_MAT            = VALUE(SUBOBJECT, "");
    SUBGRP_EULER_MAT          = VALUE(SUBOBJECT, "");
}
SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR               = 9000;
    NUM_COMMENTS              = 5110;
    COMMENTS                  = 5109;
    CommentEnumField          = 7951;
    NIP                       = 427;
    MAT_ID_ARRAY              = 2726;
    VOL_FRAC_ARRAY            = 2727;
    Mat_Name_OR_LawNo         = 4538;
    LAW_NO                    = -1;
    IO_FLAG                   = -1;
    TITLE                     = -1;
    Heat_Inp_opt              = 4346;
    SUBGRP_HEAT_MAT           = -1;
    THERM_STRESS              = 4555;
    SUBGRP_THERM_STRESS       = -1;
    ALE_Form                  = 4336;
    SUBGRP_ALE_MAT            = -1;
    SUBGRP_EULER_MAT          = -1;
}
CHECK
{
    NIP                       >=0;
    NIP                       <=100;
}

DEFAULTS(COMMON)
{
    Mat_Name_OR_LawNo          = 0;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }
    if( Mat_Name_OR_LawNo == 1)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/MULTIFLUID/");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW151/");
    }
    mandatory:
        SIZE(NIP);
        ARRAY(NIP,"Number of Materials")
        {
            DATA(MAT_ID_ARRAY);
            SCALAR(VOL_FRAC_ARRAY);
        }
    // HEAT data
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0)
    {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}
    }
    // THERM_STRESS
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) 
    {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
}
    
GUI(ALE) 
{
    optional:

    graphical RADIO(ALE_Form) 
    {
        ENUM_VALUE_FLAG = TRUE;
        ADD(1,"NONE");
        ADD(2,"ALE");
        ADD(3,"EULER");
    }
    if(ALE_Form == 2)
    {
        SUBOBJECT(SUBGRP_ALE_MAT) {SUBTYPES = (/SUBOBJECT/ALE_MAT);}
    }
    else if(ALE_Form == 3)
    {
        SUBOBJECT(SUBGRP_EULER_MAT) {SUBTYPES = (/SUBOBJECT/EULER);}
    }
}
//file format
FORMAT(radioss2019)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "MUL" )
        {
            ASSIGN(Mat_Name_OR_LawNo,1);
        }
        else
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
        
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 1)
    {
        HEADER("/MAT/MULTIFLUID/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/LAW151/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    BLANK;
    FREE_CARD_LIST(NIP)
    {
        COMMENT("#   mat_ID            Vol_frac");
        CARD("%10d%20lg",MAT_ID_ARRAY,VOL_FRAC_ARRAY);
    }
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
    if(ALE_Form == 2)
    {
        SUBOBJECTS(SUBGRP_ALE_MAT,/SUBOBJECT/ALE_MAT);
    }
    else if(ALE_Form == 3)
    {
        SUBOBJECTS(SUBGRP_EULER_MAT,/SUBOBJECT/EULER);
    }
}