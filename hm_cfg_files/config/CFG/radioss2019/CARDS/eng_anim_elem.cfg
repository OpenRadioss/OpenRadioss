//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// eng_anim_elem
//

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES
    ENG_ANIM_ELEM_AMS                       = VALUE(INT, "Elements using AMS timestep due to /DT/CST_AMS", "AMS");
    ENG_ANIM_ELEM_BFRAC                     = VALUE(INT, "Burn fraction", "BFRAC");
    ENG_ANIM_ELEM_DENS                      = VALUE(INT, "Density", "DENS");
    ENG_ANIM_ELEM_EPSP                      = VALUE(INT, "Plastic strain", "EPSP");
    ENG_ANIM_ELEM_ENERGY                    = VALUE(INT, "Specific energy (internal energy divided by the element mass)", "ENERGY");
    ENG_ANIM_ELEM_EINT                      = VALUE(INT, "Internal energy", "EINT");
    ENG_ANIM_ELEM_VONM                      = VALUE(INT, "Von Mises stress", "VONM");
    ENG_ANIM_ELEM_P                         = VALUE(INT, "Pressure", "P");
    ENG_ANIM_ELEM_DAM1                      = VALUE(INT, "Damage in directi+on 1", "DAM1");
    ENG_ANIM_ELEM_DAM2                      = VALUE(INT, "Damage in direction 2", "DAM2");
    ENG_ANIM_ELEM_DAM3                      = VALUE(INT, "Damage in direction 3", "DAM3");
    ENG_ANIM_ELEM_DT                        = VALUE(INT, "Element time step", "DT");
    ENG_ANIM_ELEM_EPSD                      = VALUE(INT, "Equivalent strain rate in bricks and in shells too", "EPSD");
    ENG_ANIM_ELEM_FAIL                      = VALUE(INT, "Number of failed layers", "FAIL");
    ENG_ANIM_ELEM_HOURG                     = VALUE(INT, "Hourglass energy", "HOURG");
    ENG_ANIM_ELEM_K                         = VALUE(INT, "Turbulent energy for ALE material law", "K");
    ENG_ANIM_ELEM_LAW51_ALL                 = VALUE(INT, "Display results for all Sub-material", "LAW51_ALL");
    ENG_ANIM_ELEM_LAW51_1                   = VALUE(INT, "Display results for specific Sub-material", "LAW51_1");
    ENG_ANIM_ELEM_LAW51_2                   = VALUE(INT, "Display results for specific Sub-material", "LAW51_2");
    ENG_ANIM_ELEM_LAW51_3                   = VALUE(INT, "Display results for specific Sub-material", "LAW51_3");
    ENG_ANIM_ELEM_LAW51_4                   = VALUE(INT, "Display results for specific Sub-material", "LAW51_4");
    ENG_ANIM_ELEM_MACH                      = VALUE(INT, "Mach number", "MACH");
    ENG_ANIM_ELEM_OFF                       = VALUE(INT, "Element status", "OFF");
    ENG_ANIM_ELEM_SIGX                      = VALUE(INT, "Stress XX", "SIGX");
    ENG_ANIM_ELEM_SIGY                      = VALUE(INT, "Stress YY", "SIGY");
    ENG_ANIM_ELEM_SIGZ                      = VALUE(INT, "Stress ZZ", "SIGZ");
    ENG_ANIM_ELEM_SIGXY                     = VALUE(INT, "Shear stress XY", "SIGXY");
    ENG_ANIM_ELEM_SIGYZ                     = VALUE(INT, "Shear stress YZ", "SIGYZ");
    ENG_ANIM_ELEM_SIGZX                     = VALUE(INT, "Shear stress ZX", "SIGZX");
    ENG_ANIM_ELEM_TDET                      = VALUE(INT, "Detonation times for high explosive JWL EOS", "TDET");
    ENG_ANIM_ELEM_TEMP                      = VALUE(INT, "Temperature", "TEMP");
    ENG_ANIM_ELEM_THIC                      = VALUE(INT, "Thickness", "THIC");
    ENG_ANIM_ELEM_TVIS                      = VALUE(INT, "Turbulent viscosity for ALE material law", "TVIS");
    ENG_ANIM_ELEM_THIN                      = VALUE(INT, "% thinning of shell", "THIN");
    ENG_ANIM_ELEM_VFRAC                     = VALUE(INT, "Volumetric fractions", "VFRAC");
    ENG_ANIM_ELEM_VORT                      = VALUE(INT, "Vorticity around for SOLID with ALE material law", "VORT");
    ENG_ANIM_ELEM_VORTX                     = VALUE(INT, "Vorticity around x for QUAD (2D) and SOLID (3D) with ALE material law", "VORTX");
    ENG_ANIM_ELEM_VORTY                     = VALUE(INT, "Vorticity around Y for SOLID with ALE material law", "VORTY");
    ENG_ANIM_ELEM_VORTZ                     = VALUE(INT, "Vorticity around Z for SOLID with ALE material law", "VORTZ");
    ENG_ANIM_ELEM_THKERR                    = VALUE(INT, "Estimated error on shell thickness", "THKERR");
    ENG_ANIM_ELEM_FLAY                      = VALUE(INT, "Number of failed layers for solids", "FLAY");
    ENG_ANIM_ELEM_SSP                       = VALUE(INT, "Sound speed", "SSP");
    ENG_ANIM_ELEM_SCHLIEREN                 = VALUE(INT, "Schlieren image (optical method widely used in CFD field)", "SCHLIEREN");
    ENG_ANIM_ELEM_QVIS                      = VALUE(INT, "Displays artificial viscous pressure", "QVIS");
    ENG_ANIM_ELEM_VOLU                      = VALUE(INT, "Volume of each phase", "VOLU");
    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");

    IOFLAG                                  = VALUE(INT, "IOFLAG");
    _opt                                    = VALUE(STRING, "_opt");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES
    ENG_ANIM_ELEM_AMS                       = 2917;
    ENG_ANIM_ELEM_BFRAC                     = 1743;
    ENG_ANIM_ELEM_DENS                      = 4905;
    ENG_ANIM_ELEM_EPSP                      = 4880;
    ENG_ANIM_ELEM_ENERGY                    = 4881;
    ENG_ANIM_ELEM_EINT                      = 2987;
    ENG_ANIM_ELEM_VONM                      = 4883;
    ENG_ANIM_ELEM_P                         = 4932;
    ENG_ANIM_ELEM_DAM1                      = 7413;
    ENG_ANIM_ELEM_DAM2                      = 7414;
    ENG_ANIM_ELEM_DAM3                      = 7415;
    ENG_ANIM_ELEM_DT                        = 2615;
    ENG_ANIM_ELEM_EPSD                      = 7416;
    ENG_ANIM_ELEM_FAIL                      = 7417;
    ENG_ANIM_ELEM_HOURG                     = 7418;
    ENG_ANIM_ELEM_K                         = 7419;
    ENG_ANIM_ELEM_LAW51_ALL                 = 2618;
    ENG_ANIM_ELEM_LAW51_1                   = 2619;
    ENG_ANIM_ELEM_LAW51_2                   = 2620;
    ENG_ANIM_ELEM_LAW51_3                   = 2621;
    ENG_ANIM_ELEM_LAW51_4                   = 2622;
    ENG_ANIM_ELEM_MACH                      = 2738;
    ENG_ANIM_ELEM_OFF                       = 2741;
    ENG_ANIM_ELEM_SIGX                      = 7420;
    ENG_ANIM_ELEM_SIGY                      = 7421;
    ENG_ANIM_ELEM_SIGZ                      = 7422;
    ENG_ANIM_ELEM_SIGXY                     = 7423;
    ENG_ANIM_ELEM_SIGYZ                     = 7424;
    ENG_ANIM_ELEM_SIGZX                     = 7425;
    ENG_ANIM_ELEM_TDET                      = 1750;
    ENG_ANIM_ELEM_TEMP                      = 7426;
    ENG_ANIM_ELEM_THIC                      = 7427;
    ENG_ANIM_ELEM_TVIS                      = 7428;
    ENG_ANIM_ELEM_THIN                      = 7429;
    ENG_ANIM_ELEM_VFRAC                     = 1744;
    ENG_ANIM_ELEM_VORT                      = 2912;
    ENG_ANIM_ELEM_VORTX                     = 7430;
    ENG_ANIM_ELEM_VORTY                     = 2913;
    ENG_ANIM_ELEM_VORTZ                     = 2914;
    ENG_ANIM_ELEM_THKERR                    = 7431;
    ENG_ANIM_ELEM_FLAY                      = 7432;
    ENG_ANIM_ELEM_SSP                       = 7490;
    ENG_ANIM_ELEM_SCHLIEREN                 = 7492;
    ENG_ANIM_ELEM_QVIS                      = 1723;
    ENG_ANIM_ELEM_VOLU                      = 1722;
    //HM INTERNAL
    KEYWORD_STR                             = 9000;

    IOFLAG                                  = -1;
    _opt                                    = -1;
}

GUI(COMMON)
{
    FLAG(ENG_ANIM_ELEM_AMS);
    FLAG(ENG_ANIM_ELEM_BFRAC);
    FLAG(ENG_ANIM_ELEM_DENS);
    FLAG(ENG_ANIM_ELEM_EPSP);
    FLAG(ENG_ANIM_ELEM_ENERGY);
    FLAG(ENG_ANIM_ELEM_EINT);
    FLAG(ENG_ANIM_ELEM_VONM);
    FLAG(ENG_ANIM_ELEM_P);
    FLAG(ENG_ANIM_ELEM_DAM1);
    FLAG(ENG_ANIM_ELEM_DAM2);
    FLAG(ENG_ANIM_ELEM_DAM3);
    FLAG(ENG_ANIM_ELEM_DT);
    FLAG(ENG_ANIM_ELEM_EPSD);
    FLAG(ENG_ANIM_ELEM_FAIL);
    FLAG(ENG_ANIM_ELEM_HOURG);
    FLAG(ENG_ANIM_ELEM_K);
    FLAG(ENG_ANIM_ELEM_LAW51_ALL);
    FLAG(ENG_ANIM_ELEM_LAW51_1);
    FLAG(ENG_ANIM_ELEM_LAW51_2);
    FLAG(ENG_ANIM_ELEM_LAW51_3);
    FLAG(ENG_ANIM_ELEM_LAW51_4);
    FLAG(ENG_ANIM_ELEM_MACH);
    FLAG(ENG_ANIM_ELEM_OFF);
    FLAG(ENG_ANIM_ELEM_SIGX);
    FLAG(ENG_ANIM_ELEM_SIGY);
    FLAG(ENG_ANIM_ELEM_SIGZ);
    FLAG(ENG_ANIM_ELEM_SIGXY);
    FLAG(ENG_ANIM_ELEM_SIGYZ);
    FLAG(ENG_ANIM_ELEM_SIGZX);
    FLAG(ENG_ANIM_ELEM_TDET);
    FLAG(ENG_ANIM_ELEM_TEMP);
    FLAG(ENG_ANIM_ELEM_THIC);
    FLAG(ENG_ANIM_ELEM_TVIS);
    FLAG(ENG_ANIM_ELEM_THIN);
    FLAG(ENG_ANIM_ELEM_VFRAC);
    FLAG(ENG_ANIM_ELEM_VORT);
    FLAG(ENG_ANIM_ELEM_VORTX);
    FLAG(ENG_ANIM_ELEM_VORTY);
    FLAG(ENG_ANIM_ELEM_VORTZ);
    FLAG(ENG_ANIM_ELEM_THKERR);
    FLAG(ENG_ANIM_ELEM_FLAY);
    FLAG(ENG_ANIM_ELEM_SSP);
    FLAG(ENG_ANIM_ELEM_SCHLIEREN);
    FLAG(ENG_ANIM_ELEM_QVIS);
    FLAG(ENG_ANIM_ELEM_VOLU);
}

//File format
FORMAT(radioss41)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if (ENG_ANIM_ELEM_DENS == 1)
        {
            HEADER("/ANIM/ELEM/DENS");
        }

        if (ENG_ANIM_ELEM_EPSP == 1)
        {
            HEADER("/ANIM/ELEM/EPSP");
        }

        if (ENG_ANIM_ELEM_ENERGY == 1)
        {
            HEADER("/ANIM/ELEM/ENER");
        }

        if (ENG_ANIM_ELEM_VONM == 1)
        {
            HEADER("/ANIM/ELEM/VONM");
        }

        if (ENG_ANIM_ELEM_P == 1)
        {
            HEADER("/ANIM/ELEM/P");
        }

        if (ENG_ANIM_ELEM_DAM1 == 1)
        {
            HEADER("/ANIM/ELEM/DAM1");
        }

        if (ENG_ANIM_ELEM_DAM2 == 1)
        {
            HEADER("/ANIM/ELEM/DAM2");
        }

        if (ENG_ANIM_ELEM_DAM3 == 1)
        {
            HEADER("/ANIM/ELEM/DAM3");
        }

        if (ENG_ANIM_ELEM_HOURG == 1)
        {
            HEADER("/ANIM/ELEM/HOURG");
        }

        if (ENG_ANIM_ELEM_SIGX == 1)
        {
            HEADER("/ANIM/ELEM/SIGX");
        }

        if (ENG_ANIM_ELEM_SIGY == 1)
        {
            HEADER("/ANIM/ELEM/SIGY");
        }

        if (ENG_ANIM_ELEM_SIGZ == 1)
        {
            HEADER("/ANIM/ELEM/SIGZ");
        }

        if (ENG_ANIM_ELEM_SIGXY == 1)
        {
            HEADER("/ANIM/ELEM/SIGXY");
        }

        if (ENG_ANIM_ELEM_SIGYZ == 1)
        {
            HEADER("/ANIM/ELEM/SIGYZ");
        }

        if (ENG_ANIM_ELEM_SIGZX == 1)
        {
            HEADER("/ANIM/ELEM/SIGZX");
        }

        if (ENG_ANIM_ELEM_TEMP == 1)
        {
            HEADER("/ANIM/ELEM/TEMP");
        }

        if (ENG_ANIM_ELEM_THIC == 1)
        {
            HEADER("/ANIM/ELEM/THIC");
        }
    }
    else //IMPORT
    {
        HEADER("/ANIM/ELEM/%s", _opt);

        ASSIGN(ENG_ANIM_ELEM_DENS,_FIND(_opt, "DENS"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_EPSP,_FIND(_opt, "EPSP"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_ENERGY,_FIND(_opt, "ENER"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VONM,_FIND(_opt, "VONM"), IMPORT);

        if(_opt == "P")
        {
            ASSIGN(ENG_ANIM_ELEM_P, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_ELEM_DAM1,_FIND(_opt, "DAM1"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DAM2,_FIND(_opt, "DAM2"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DAM3,_FIND(_opt, "DAM3"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_HOURG,_FIND(_opt, "HOURG"), IMPORT);

        if(_opt =="SIGX")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGX, 1, IMPORT);
        }
        else if(_opt == "SIGY")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGY, 1, IMPORT);
        }
        else if(_opt == "SIGZ")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGZ, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_ELEM_SIGXY,_FIND(_opt, "SIGXY"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SIGYZ,_FIND(_opt, "SIGYZ"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SIGZX,_FIND(_opt, "SIGZX"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_TEMP,_FIND(_opt, "TEMP"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_THIC,_FIND(_opt, "THIC"), IMPORT);
    }
}

FORMAT(radioss51)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if (ENG_ANIM_ELEM_DENS == 1)
        {
            HEADER("/ANIM/ELEM/DENS");
        }

        if (ENG_ANIM_ELEM_EPSP == 1)
        {
            HEADER("/ANIM/ELEM/EPSP");
        }

        if (ENG_ANIM_ELEM_ENERGY == 1)
        {
            HEADER("/ANIM/ELEM/ENER");
        }

        if (ENG_ANIM_ELEM_VONM == 1)
        {
            HEADER("/ANIM/ELEM/VONM");
        }

        if (ENG_ANIM_ELEM_P == 1)
        {
            HEADER("/ANIM/ELEM/P");
        }

        if (ENG_ANIM_ELEM_DAM1 == 1)
        {
            HEADER("/ANIM/ELEM/DAM1");
        }

        if (ENG_ANIM_ELEM_DAM2 == 1)
        {
            HEADER("/ANIM/ELEM/DAM2");
        }

        if (ENG_ANIM_ELEM_DAM3 == 1)
        {
            HEADER("/ANIM/ELEM/DAM3");
        }

        if (ENG_ANIM_ELEM_EPSD == 1)
        {
            HEADER("/ANIM/ELEM/EPSD");
        }

        if (ENG_ANIM_ELEM_FAIL == 1)
        {
            HEADER("/ANIM/ELEM/FAIL");
        }

        if (ENG_ANIM_ELEM_HOURG == 1)
        {
            HEADER("/ANIM/ELEM/HOURG");
        }

        if (ENG_ANIM_ELEM_K == 1)
        {
            HEADER("/ANIM/ELEM/K");
        }

        if (ENG_ANIM_ELEM_SIGX == 1)
        {
            HEADER("/ANIM/ELEM/SIGX");
        }

        if (ENG_ANIM_ELEM_SIGY == 1)
        {
            HEADER("/ANIM/ELEM/SIGY");
        }

        if (ENG_ANIM_ELEM_SIGZ == 1)
        {
            HEADER("/ANIM/ELEM/SIGZ");
        }

        if (ENG_ANIM_ELEM_SIGXY == 1)
        {
            HEADER("/ANIM/ELEM/SIGXY");
        }

        if (ENG_ANIM_ELEM_SIGYZ == 1)
        {
            HEADER("/ANIM/ELEM/SIGYZ");
        }

        if (ENG_ANIM_ELEM_SIGZX == 1)
        {
            HEADER("/ANIM/ELEM/SIGZX");
        }

        if (ENG_ANIM_ELEM_TEMP == 1)
        {
            HEADER("/ANIM/ELEM/TEMP");
        }

        if (ENG_ANIM_ELEM_THIC == 1)
        {
            HEADER("/ANIM/ELEM/THIC");
        }

        if (ENG_ANIM_ELEM_TVIS == 1)
        {
            HEADER("/ANIM/ELEM/TVIS");
        }

        if (ENG_ANIM_ELEM_THIN == 1)
        {
            HEADER("/ANIM/ELEM/THIN");
        }

        if (ENG_ANIM_ELEM_VORTX == 1)
        {
            HEADER("/ANIM/ELEM/VORTX");
        }

        if (ENG_ANIM_ELEM_THKERR == 1)
        {
            HEADER("/ANIM/ELEM/THKERR");
        }

        if (ENG_ANIM_ELEM_FLAY == 1)
        {
            HEADER("/ANIM/ELEM/FLAY");
        }
    }
    else //IMPORT
    {
        HEADER("/ANIM/ELEM/%s", _opt);

        ASSIGN(ENG_ANIM_ELEM_DENS,_FIND(_opt, "DENS"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_EPSP,_FIND(_opt, "EPSP"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_ENERGY,_FIND(_opt, "ENER"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VONM,_FIND(_opt, "VONM"), IMPORT);

        if(_opt == "P")
        {
            ASSIGN(ENG_ANIM_ELEM_P, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_ELEM_DAM1,_FIND(_opt, "DAM1"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DAM2,_FIND(_opt, "DAM2"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DAM3,_FIND(_opt, "DAM3"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_EPSD,_FIND(_opt, "EPSD"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_FAIL,_FIND(_opt, "FAIL"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_HOURG,_FIND(_opt, "HOURG"), IMPORT);

        if(_opt == "K")
        {
            ASSIGN(ENG_ANIM_ELEM_K, 1, IMPORT);
        }

        if(_opt =="SIGX")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGX, 1, IMPORT);
        }
        else if(_opt == "SIGY")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGY, 1, IMPORT);
        }
        else if(_opt == "SIGZ")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGZ, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_ELEM_SIGXY,_FIND(_opt, "SIGXY"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SIGYZ,_FIND(_opt, "SIGYZ"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SIGZX,_FIND(_opt, "SIGZX"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_TEMP,_FIND(_opt, "TEMP"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_THIC,_FIND(_opt, "THIC"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_TVIS,_FIND(_opt, "TVIS"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_THIN,_FIND(_opt, "THIN"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VORTX,_FIND(_opt, "VORTX"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_THKERR,_FIND(_opt, "THKERR"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_FLAY,_FIND(_opt, "FLAY"), IMPORT);
    }
}

FORMAT(radioss120)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if (ENG_ANIM_ELEM_DENS == 1)
        {
            HEADER("/ANIM/ELEM/DENS");
        }

        if (ENG_ANIM_ELEM_EPSP == 1)
        {
            HEADER("/ANIM/ELEM/EPSP");
        }

        if (ENG_ANIM_ELEM_ENERGY == 1)
        {
            HEADER("/ANIM/ELEM/ENER");
        }

        if (ENG_ANIM_ELEM_VONM == 1)
        {
            HEADER("/ANIM/ELEM/VONM");
        }

        if (ENG_ANIM_ELEM_P == 1)
        {
            HEADER("/ANIM/ELEM/P");
        }

        if (ENG_ANIM_ELEM_DAM1 == 1)
        {
            HEADER("/ANIM/ELEM/DAM1");
        }

        if (ENG_ANIM_ELEM_DAM2 == 1)
        {
            HEADER("/ANIM/ELEM/DAM2");
        }

        if (ENG_ANIM_ELEM_DAM3 == 1)
        {
            HEADER("/ANIM/ELEM/DAM3");
        }

        if (ENG_ANIM_ELEM_EPSD == 1)
        {
            HEADER("/ANIM/ELEM/EPSD");
        }

        if (ENG_ANIM_ELEM_FAIL == 1)
        {
            HEADER("/ANIM/ELEM/FAIL");
        }

        if (ENG_ANIM_ELEM_HOURG == 1)
        {
            HEADER("/ANIM/ELEM/HOURG");
        }

        if (ENG_ANIM_ELEM_K == 1)
        {
            HEADER("/ANIM/ELEM/K");
        }

        if (ENG_ANIM_ELEM_SIGX == 1)
        {
            HEADER("/ANIM/ELEM/SIGX");
        }

        if (ENG_ANIM_ELEM_SIGY == 1)
        {
            HEADER("/ANIM/ELEM/SIGY");
        }

        if (ENG_ANIM_ELEM_SIGZ == 1)
        {
            HEADER("/ANIM/ELEM/SIGZ");
        }

        if (ENG_ANIM_ELEM_SIGXY == 1)
        {
            HEADER("/ANIM/ELEM/SIGXY");
        }

        if (ENG_ANIM_ELEM_SIGYZ == 1)
        {
            HEADER("/ANIM/ELEM/SIGYZ");
        }

        if (ENG_ANIM_ELEM_SIGZX == 1)
        {
            HEADER("/ANIM/ELEM/SIGZX");
        }

        if (ENG_ANIM_ELEM_TEMP == 1)
        {
            HEADER("/ANIM/ELEM/TEMP");
        }

        if (ENG_ANIM_ELEM_THIC == 1)
        {
            HEADER("/ANIM/ELEM/THIC");
        }

        if (ENG_ANIM_ELEM_TVIS == 1)
        {
            HEADER("/ANIM/ELEM/TVIS");
        }

        if (ENG_ANIM_ELEM_THIN == 1)
        {
            HEADER("/ANIM/ELEM/THIN");
        }

        if (ENG_ANIM_ELEM_VFRAC == 1)
        {
            HEADER("/ANIM/ELEM/VFRAC");
        }

        if (ENG_ANIM_ELEM_VORTX == 1)
        {
            HEADER("/ANIM/ELEM/VORTX");
        }

        if (ENG_ANIM_ELEM_THKERR == 1)
        {
            HEADER("/ANIM/ELEM/THKERR");
        }

        if (ENG_ANIM_ELEM_FLAY == 1)
        {
            HEADER("/ANIM/ELEM/FLAY");
        }
    }
    else //IMPORT
    {
        HEADER("/ANIM/ELEM/%s", _opt);

        ASSIGN(ENG_ANIM_ELEM_DENS,_FIND(_opt, "DENS"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_EPSP,_FIND(_opt, "EPSP"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_ENERGY,_FIND(_opt, "ENER"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VONM,_FIND(_opt, "VONM"), IMPORT);

        if(_opt == "P")
        {
            ASSIGN(ENG_ANIM_ELEM_P, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_ELEM_DAM1,_FIND(_opt, "DAM1"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DAM2,_FIND(_opt, "DAM2"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DAM3,_FIND(_opt, "DAM3"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_EPSD,_FIND(_opt, "EPSD"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_FAIL,_FIND(_opt, "FAIL"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_HOURG,_FIND(_opt, "HOURG"), IMPORT);

        if(_opt == "K")
        {
            ASSIGN(ENG_ANIM_ELEM_K, 1, IMPORT);
        }

        if(_opt =="SIGX")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGX, 1, IMPORT);
        }
        else if(_opt == "SIGY")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGY, 1, IMPORT);
        }
        else if(_opt == "SIGZ")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGZ, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_ELEM_SIGXY,_FIND(_opt, "SIGXY"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SIGYZ,_FIND(_opt, "SIGYZ"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SIGZX,_FIND(_opt, "SIGZX"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_TEMP,_FIND(_opt, "TEMP"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_THIC,_FIND(_opt, "THIC"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_TVIS,_FIND(_opt, "TVIS"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_THIN,_FIND(_opt, "THIN"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VFRAC,_FIND(_opt, "VFRAC"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VORTX,_FIND(_opt, "VORTX"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_THKERR,_FIND(_opt, "THKERR"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_FLAY,_FIND(_opt, "FLAY"), IMPORT);
    }
}

FORMAT(radioss130)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if (ENG_ANIM_ELEM_BFRAC == 1)
        {
            HEADER("/ANIM/ELEM/BFRAC");
        }

        if (ENG_ANIM_ELEM_DENS == 1)
        {
            HEADER("/ANIM/ELEM/DENS");
        }

        if (ENG_ANIM_ELEM_EPSP == 1)
        {
            HEADER("/ANIM/ELEM/EPSP");
        }

        if (ENG_ANIM_ELEM_ENERGY == 1)
        {
            HEADER("/ANIM/ELEM/ENER");
        }

        if (ENG_ANIM_ELEM_VONM == 1)
        {
            HEADER("/ANIM/ELEM/VONM");
        }

        if (ENG_ANIM_ELEM_P == 1)
        {
            HEADER("/ANIM/ELEM/P");
        }

        if (ENG_ANIM_ELEM_DAM1 == 1)
        {
            HEADER("/ANIM/ELEM/DAM1");
        }

        if (ENG_ANIM_ELEM_DAM2 == 1)
        {
            HEADER("/ANIM/ELEM/DAM2");
        }

        if (ENG_ANIM_ELEM_DAM3 == 1)
        {
            HEADER("/ANIM/ELEM/DAM3");
        }

        if (ENG_ANIM_ELEM_EPSD == 1)
        {
            HEADER("/ANIM/ELEM/EPSD");
        }

        if (ENG_ANIM_ELEM_FAIL == 1)
        {
            HEADER("/ANIM/ELEM/FAIL");
        }

        if (ENG_ANIM_ELEM_HOURG == 1)
        {
            HEADER("/ANIM/ELEM/HOURG");
        }

        if (ENG_ANIM_ELEM_K == 1)
        {
            HEADER("/ANIM/ELEM/K");
        }

        if (ENG_ANIM_ELEM_SIGX == 1)
        {
            HEADER("/ANIM/ELEM/SIGX");
        }

        if (ENG_ANIM_ELEM_SIGY == 1)
        {
            HEADER("/ANIM/ELEM/SIGY");
        }

        if (ENG_ANIM_ELEM_SIGZ == 1)
        {
            HEADER("/ANIM/ELEM/SIGZ");
        }

        if (ENG_ANIM_ELEM_SIGXY == 1)
        {
            HEADER("/ANIM/ELEM/SIGXY");
        }

        if (ENG_ANIM_ELEM_SIGYZ == 1)
        {
            HEADER("/ANIM/ELEM/SIGYZ");
        }

        if (ENG_ANIM_ELEM_SIGZX == 1)
        {
            HEADER("/ANIM/ELEM/SIGZX");
        }

        if (ENG_ANIM_ELEM_TEMP == 1)
        {
            HEADER("/ANIM/ELEM/TEMP");
        }

        if (ENG_ANIM_ELEM_THIC == 1)
        {
            HEADER("/ANIM/ELEM/THIC");
        }

        if (ENG_ANIM_ELEM_TVIS == 1)
        {
            HEADER("/ANIM/ELEM/TVIS");
        }

        if (ENG_ANIM_ELEM_THIN == 1)
        {
            HEADER("/ANIM/ELEM/THIN");
        }

        if (ENG_ANIM_ELEM_VFRAC == 1)
        {
            HEADER("/ANIM/ELEM/VFRAC");
        }

        if (ENG_ANIM_ELEM_VORTX == 1)
        {
            HEADER("/ANIM/ELEM/VORTX");
        }

        if (ENG_ANIM_ELEM_THKERR == 1)
        {
            HEADER("/ANIM/ELEM/THKERR");
        }

        if (ENG_ANIM_ELEM_FLAY == 1)
        {
            HEADER("/ANIM/ELEM/FLAY");
        }
    }
    else //IMPORT
    {
        HEADER("/ANIM/ELEM/%s", _opt);

        ASSIGN(ENG_ANIM_ELEM_BFRAC,_FIND(_opt, "BFRAC"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DENS,_FIND(_opt, "DENS"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_EPSP,_FIND(_opt, "EPSP"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_ENERGY,_FIND(_opt, "ENER"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VONM,_FIND(_opt, "VONM"), IMPORT);

        if(_opt == "P")
        {
            ASSIGN(ENG_ANIM_ELEM_P, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_ELEM_DAM1,_FIND(_opt, "DAM1"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DAM2,_FIND(_opt, "DAM2"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DAM3,_FIND(_opt, "DAM3"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_EPSD,_FIND(_opt, "EPSD"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_FAIL,_FIND(_opt, "FAIL"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_HOURG,_FIND(_opt, "HOURG"), IMPORT);

        if(_opt == "K")
        {
            ASSIGN(ENG_ANIM_ELEM_K, 1, IMPORT);
        }

        if(_opt =="SIGX")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGX, 1, IMPORT);
        }
        else if(_opt == "SIGY")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGY, 1, IMPORT);
        }
        else if(_opt == "SIGZ")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGZ, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_ELEM_SIGXY,_FIND(_opt, "SIGXY"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SIGYZ,_FIND(_opt, "SIGYZ"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SIGZX,_FIND(_opt, "SIGZX"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_TEMP,_FIND(_opt, "TEMP"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_THIC,_FIND(_opt, "THIC"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_TVIS,_FIND(_opt, "TVIS"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_THIN,_FIND(_opt, "THIN"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VFRAC,_FIND(_opt, "VFRAC"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VORTX,_FIND(_opt, "VORTX"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_THKERR,_FIND(_opt, "THKERR"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_FLAY,_FIND(_opt, "FLAY"), IMPORT);
    }
}

FORMAT(radioss140)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if (ENG_ANIM_ELEM_BFRAC == 1)
        {
            HEADER("/ANIM/ELEM/BFRAC");
        }

        if (ENG_ANIM_ELEM_DENS == 1)
        {
            HEADER("/ANIM/ELEM/DENS");
        }

        if (ENG_ANIM_ELEM_EPSP == 1)
        {
            HEADER("/ANIM/ELEM/EPSP");
        }

        if (ENG_ANIM_ELEM_ENERGY == 1)
        {
            HEADER("/ANIM/ELEM/ENER");
        }

        if (ENG_ANIM_ELEM_VONM == 1)
        {
            HEADER("/ANIM/ELEM/VONM");
        }

        if (ENG_ANIM_ELEM_P == 1)
        {
            HEADER("/ANIM/ELEM/P");
        }

        if (ENG_ANIM_ELEM_DAM1 == 1)
        {
            HEADER("/ANIM/ELEM/DAM1");
        }

        if (ENG_ANIM_ELEM_DAM2 == 1)
        {
            HEADER("/ANIM/ELEM/DAM2");
        }

        if (ENG_ANIM_ELEM_DAM3 == 1)
        {
            HEADER("/ANIM/ELEM/DAM3");
        }

        if (ENG_ANIM_ELEM_EPSD == 1)
        {
            HEADER("/ANIM/ELEM/EPSD");
        }

        if (ENG_ANIM_ELEM_FAIL == 1)
        {
            HEADER("/ANIM/ELEM/FAIL");
        }

        if (ENG_ANIM_ELEM_HOURG == 1)
        {
            HEADER("/ANIM/ELEM/HOURG");
        }

        if (ENG_ANIM_ELEM_K == 1)
        {
            HEADER("/ANIM/ELEM/K");
        }

        if (ENG_ANIM_ELEM_SIGX == 1)
        {
            HEADER("/ANIM/ELEM/SIGX");
        }

        if (ENG_ANIM_ELEM_SIGY == 1)
        {
            HEADER("/ANIM/ELEM/SIGY");
        }

        if (ENG_ANIM_ELEM_SIGZ == 1)
        {
            HEADER("/ANIM/ELEM/SIGZ");
        }

        if (ENG_ANIM_ELEM_SIGXY == 1)
        {
            HEADER("/ANIM/ELEM/SIGXY");
        }

        if (ENG_ANIM_ELEM_SIGYZ == 1)
        {
            HEADER("/ANIM/ELEM/SIGYZ");
        }

        if (ENG_ANIM_ELEM_SIGZX == 1)
        {
            HEADER("/ANIM/ELEM/SIGZX");
        }

        if (ENG_ANIM_ELEM_TEMP == 1)
        {
            HEADER("/ANIM/ELEM/TEMP");
        }

        if (ENG_ANIM_ELEM_THIC == 1)
        {
            HEADER("/ANIM/ELEM/THIC");
        }

        if (ENG_ANIM_ELEM_TVIS == 1)
        {
            HEADER("/ANIM/ELEM/TVIS");
        }

        if (ENG_ANIM_ELEM_THIN == 1)
        {
            HEADER("/ANIM/ELEM/THIN");
        }

        if (ENG_ANIM_ELEM_VFRAC == 1)
        {
            HEADER("/ANIM/ELEM/VFRAC");
        }

        if (ENG_ANIM_ELEM_VORTX == 1)
        {
            HEADER("/ANIM/ELEM/VORTX");
        }

        if (ENG_ANIM_ELEM_THKERR == 1)
        {
            HEADER("/ANIM/ELEM/THKERR");
        }

        if (ENG_ANIM_ELEM_FLAY == 1)
        {
            HEADER("/ANIM/ELEM/FLAY");
        }

        if (ENG_ANIM_ELEM_SSP == 1)
        {
            HEADER("/ANIM/ELEM/SSP");
        }

        if (ENG_ANIM_ELEM_SCHLIEREN == 1)
        {
            HEADER("/ANIM/ELEM/SCHLIEREN");
        }
    }
    else //IMPORT
    {
        HEADER("/ANIM/ELEM/%s", _opt);

        ASSIGN(ENG_ANIM_ELEM_BFRAC,_FIND(_opt, "BFRAC"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DENS,_FIND(_opt, "DENS"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_EPSP,_FIND(_opt, "EPSP"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_ENERGY,_FIND(_opt, "ENER"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VONM,_FIND(_opt, "VONM"), IMPORT);

        if(_opt == "P")
        {
            ASSIGN(ENG_ANIM_ELEM_P, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_ELEM_DAM1,_FIND(_opt, "DAM1"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DAM2,_FIND(_opt, "DAM2"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DAM3,_FIND(_opt, "DAM3"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_EPSD,_FIND(_opt, "EPSD"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_FAIL,_FIND(_opt, "FAIL"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_HOURG,_FIND(_opt, "HOURG"), IMPORT);

        if(_opt == "K")
        {
            ASSIGN(ENG_ANIM_ELEM_K, 1, IMPORT);
        }

        if(_opt =="SIGX")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGX, 1, IMPORT);
        }
        else if(_opt == "SIGY")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGY, 1, IMPORT);
        }
        else if(_opt == "SIGZ")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGZ, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_ELEM_SIGXY,_FIND(_opt, "SIGXY"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SIGYZ,_FIND(_opt, "SIGYZ"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SIGZX,_FIND(_opt, "SIGZX"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_TEMP,_FIND(_opt, "TEMP"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_THIC,_FIND(_opt, "THIC"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_TVIS,_FIND(_opt, "TVIS"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_THIN,_FIND(_opt, "THIN"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VFRAC,_FIND(_opt, "VFRAC"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VORTX,_FIND(_opt, "VORTX"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_THKERR,_FIND(_opt, "THKERR"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_FLAY,_FIND(_opt, "FLAY"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SSP,_FIND(_opt, "SSP"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SCHLIEREN,_FIND(_opt, "SCHLIEREN"), IMPORT);
    }
}

FORMAT(radioss2017)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if (ENG_ANIM_ELEM_BFRAC == 1)
        {
            HEADER("/ANIM/ELEM/BFRAC");
        }

        if (ENG_ANIM_ELEM_DENS == 1)
        {
            HEADER("/ANIM/ELEM/DENS");
        }

        if (ENG_ANIM_ELEM_EPSP == 1)
        {
            HEADER("/ANIM/ELEM/EPSP");
        }

        if (ENG_ANIM_ELEM_ENERGY == 1)
        {
            HEADER("/ANIM/ELEM/ENER");
        }

        if (ENG_ANIM_ELEM_VONM == 1)
        {
            HEADER("/ANIM/ELEM/VONM");
        }

        if (ENG_ANIM_ELEM_P == 1)
        {
            HEADER("/ANIM/ELEM/P");
        }

        if (ENG_ANIM_ELEM_DAM1 == 1)
        {
            HEADER("/ANIM/ELEM/DAM1");
        }

        if (ENG_ANIM_ELEM_DAM2 == 1)
        {
            HEADER("/ANIM/ELEM/DAM2");
        }

        if (ENG_ANIM_ELEM_DAM3 == 1)
        {
            HEADER("/ANIM/ELEM/DAM3");
        }

        if (ENG_ANIM_ELEM_EPSD == 1)
        {
            HEADER("/ANIM/ELEM/EPSD");
        }

        if (ENG_ANIM_ELEM_FAIL == 1)
        {
            HEADER("/ANIM/ELEM/FAIL");
        }

        if (ENG_ANIM_ELEM_HOURG == 1)
        {
            HEADER("/ANIM/ELEM/HOURG");
        }

        if (ENG_ANIM_ELEM_K == 1)
        {
            HEADER("/ANIM/ELEM/K");
        }

        if (ENG_ANIM_ELEM_SIGX == 1)
        {
            HEADER("/ANIM/ELEM/SIGX");
        }

        if (ENG_ANIM_ELEM_SIGY == 1)
        {
            HEADER("/ANIM/ELEM/SIGY");
        }

        if (ENG_ANIM_ELEM_SIGZ == 1)
        {
            HEADER("/ANIM/ELEM/SIGZ");
        }

        if (ENG_ANIM_ELEM_SIGXY == 1)
        {
            HEADER("/ANIM/ELEM/SIGXY");
        }

        if (ENG_ANIM_ELEM_SIGYZ == 1)
        {
            HEADER("/ANIM/ELEM/SIGYZ");
        }

        if (ENG_ANIM_ELEM_SIGZX == 1)
        {
            HEADER("/ANIM/ELEM/SIGZX");
        }

        if (ENG_ANIM_ELEM_TDET == 1)
        {
            HEADER("/ANIM/ELEM/TDET");
        }

        if (ENG_ANIM_ELEM_TEMP == 1)
        {
            HEADER("/ANIM/ELEM/TEMP");
        }

        if (ENG_ANIM_ELEM_THIC == 1)
        {
            HEADER("/ANIM/ELEM/THIC");
        }

        if (ENG_ANIM_ELEM_TVIS == 1)
        {
            HEADER("/ANIM/ELEM/TVIS");
        }

        if (ENG_ANIM_ELEM_THIN == 1)
        {
            HEADER("/ANIM/ELEM/THIN");
        }

        if (ENG_ANIM_ELEM_VFRAC == 1)
        {
            HEADER("/ANIM/ELEM/VFRAC");
        }

        if (ENG_ANIM_ELEM_VORTX == 1)
        {
            HEADER("/ANIM/ELEM/VORTX");
        }

        if (ENG_ANIM_ELEM_THKERR == 1)
        {
            HEADER("/ANIM/ELEM/THKERR");
        }

        if (ENG_ANIM_ELEM_FLAY == 1)
        {
            HEADER("/ANIM/ELEM/FLAY");
        }

        if (ENG_ANIM_ELEM_SSP == 1)
        {
            HEADER("/ANIM/ELEM/SSP");
        }

        if (ENG_ANIM_ELEM_SCHLIEREN == 1)
        {
            HEADER("/ANIM/ELEM/SCHLIEREN");
        }

        if (ENG_ANIM_ELEM_QVIS == 1)
        {
            HEADER("/ANIM/ELEM/QVIS");
        }

        if (ENG_ANIM_ELEM_VOLU == 1)
        {
            HEADER("/ANIM/ELEM/VOLU");
        }
    }
    else //IMPORT
    {
        HEADER("/ANIM/ELEM/%s", _opt);

        ASSIGN(ENG_ANIM_ELEM_BFRAC,_FIND(_opt, "BFRAC"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DENS,_FIND(_opt, "DENS"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_EPSP,_FIND(_opt, "EPSP"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_ENERGY,_FIND(_opt, "ENER"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VONM,_FIND(_opt, "VONM"), IMPORT);

        if(_opt == "P")
        {
            ASSIGN(ENG_ANIM_ELEM_P, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_ELEM_DAM1,_FIND(_opt, "DAM1"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DAM2,_FIND(_opt, "DAM2"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DAM3,_FIND(_opt, "DAM3"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_EPSD,_FIND(_opt, "EPSD"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_FAIL,_FIND(_opt, "FAIL"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_HOURG,_FIND(_opt, "HOURG"), IMPORT);

        if(_opt == "K")
        {
            ASSIGN(ENG_ANIM_ELEM_K, 1, IMPORT);
        }

        if(_opt =="SIGX")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGX, 1, IMPORT);
        }
        else if(_opt == "SIGY")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGY, 1, IMPORT);
        }
        else if(_opt == "SIGZ")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGZ, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_ELEM_SIGXY,_FIND(_opt, "SIGXY"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SIGYZ,_FIND(_opt, "SIGYZ"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SIGZX,_FIND(_opt, "SIGZX"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_TDET,_FIND(_opt, "TDET"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_TEMP,_FIND(_opt, "TEMP"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_THIC,_FIND(_opt, "THIC"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_TVIS,_FIND(_opt, "TVIS"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_THIN,_FIND(_opt, "THIN"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VFRAC,_FIND(_opt, "VFRAC"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VORTX,_FIND(_opt, "VORTX"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_THKERR,_FIND(_opt, "THKERR"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_FLAY,_FIND(_opt, "FLAY"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SSP,_FIND(_opt, "SSP"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SCHLIEREN,_FIND(_opt, "SCHLIEREN"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_QVIS,_FIND(_opt, "QVIS"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VOLU,_FIND(_opt, "VOLU"), IMPORT);
    }
}

FORMAT(radioss2018)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if (ENG_ANIM_ELEM_AMS == 1)
        {
            HEADER("/ANIM/ELEM/AMS");
        }

        if (ENG_ANIM_ELEM_BFRAC == 1)
        {
            HEADER("/ANIM/ELEM/BFRAC");
        }

        if (ENG_ANIM_ELEM_DENS == 1)
        {
            HEADER("/ANIM/ELEM/DENS");
        }

        if (ENG_ANIM_ELEM_EPSP == 1)
        {
            HEADER("/ANIM/ELEM/EPSP");
        }

        if (ENG_ANIM_ELEM_ENERGY == 1)
        {
            HEADER("/ANIM/ELEM/ENER");
        }

        if (ENG_ANIM_ELEM_EINT == 1)
        {
            HEADER("/ANIM/ELEM/EINT");
        }

        if (ENG_ANIM_ELEM_VONM == 1)
        {
            HEADER("/ANIM/ELEM/VONM");
        }

        if (ENG_ANIM_ELEM_P == 1)
        {
            HEADER("/ANIM/ELEM/P");
        }

        if (ENG_ANIM_ELEM_DAM1 == 1)
        {
            HEADER("/ANIM/ELEM/DAM1");
        }

        if (ENG_ANIM_ELEM_DAM2 == 1)
        {
            HEADER("/ANIM/ELEM/DAM2");
        }

        if (ENG_ANIM_ELEM_DAM3 == 1)
        {
            HEADER("/ANIM/ELEM/DAM3");
        }

        if (ENG_ANIM_ELEM_DT == 1)
        {
            HEADER("/ANIM/ELEM/DT");
        }

        if (ENG_ANIM_ELEM_EPSD == 1)
        {
            HEADER("/ANIM/ELEM/EPSD");
        }

        if (ENG_ANIM_ELEM_FAIL == 1)
        {
            HEADER("/ANIM/ELEM/FAIL");
        }

        if (ENG_ANIM_ELEM_HOURG == 1)
        {
            HEADER("/ANIM/ELEM/HOURG");
        }

        if (ENG_ANIM_ELEM_K == 1)
        {
            HEADER("/ANIM/ELEM/K");
        }

        if (ENG_ANIM_ELEM_LAW51_ALL == 1)
        {
            HEADER("/ANIM/ELEM/LAW51/ALL");
        }

        if (ENG_ANIM_ELEM_LAW51_1 == 1)
        {
            HEADER("/ANIM/ELEM/LAW51/1");
        }

        if (ENG_ANIM_ELEM_LAW51_2 == 1)
        {
            HEADER("/ANIM/ELEM/LAW51/2");
        }

        if (ENG_ANIM_ELEM_LAW51_3 == 1)
        {
            HEADER("/ANIM/ELEM/LAW51/3");
        }

        if (ENG_ANIM_ELEM_LAW51_4 == 1)
        {
            HEADER("/ANIM/ELEM/LAW51/4");
        }

        if (ENG_ANIM_ELEM_SIGX == 1)
        {
            HEADER("/ANIM/ELEM/SIGX");
        }

        if (ENG_ANIM_ELEM_SIGY == 1)
        {
            HEADER("/ANIM/ELEM/SIGY");
        }

        if (ENG_ANIM_ELEM_SIGZ == 1)
        {
            HEADER("/ANIM/ELEM/SIGZ");
        }

        if (ENG_ANIM_ELEM_SIGXY == 1)
        {
            HEADER("/ANIM/ELEM/SIGXY");
        }

        if (ENG_ANIM_ELEM_SIGYZ == 1)
        {
            HEADER("/ANIM/ELEM/SIGYZ");
        }

        if (ENG_ANIM_ELEM_SIGZX == 1)
        {
            HEADER("/ANIM/ELEM/SIGZX");
        }

        if (ENG_ANIM_ELEM_TDET == 1)
        {
            HEADER("/ANIM/ELEM/TDET");
        }

        if (ENG_ANIM_ELEM_TEMP == 1)
        {
            HEADER("/ANIM/ELEM/TEMP");
        }

        if (ENG_ANIM_ELEM_THIC == 1)
        {
            HEADER("/ANIM/ELEM/THIC");
        }

        if (ENG_ANIM_ELEM_TVIS == 1)
        {
            HEADER("/ANIM/ELEM/TVIS");
        }

        if (ENG_ANIM_ELEM_THIN == 1)
        {
            HEADER("/ANIM/ELEM/THIN");
        }

        if (ENG_ANIM_ELEM_VFRAC == 1)
        {
            HEADER("/ANIM/ELEM/VFRAC");
        }

        if (ENG_ANIM_ELEM_VORT == 1)
        {
            HEADER("/ANIM/ELEM/VORT");
        }

        if (ENG_ANIM_ELEM_VORTX == 1)
        {
            HEADER("/ANIM/ELEM/VORTX");
        }

        if (ENG_ANIM_ELEM_VORTY == 1)
        {
            HEADER("/ANIM/ELEM/VORTY");
        }

        if (ENG_ANIM_ELEM_VORTZ == 1)
        {
            HEADER("/ANIM/ELEM/VORTZ");
        }

        if (ENG_ANIM_ELEM_THKERR == 1)
        {
            HEADER("/ANIM/ELEM/THKERR");
        }

        if (ENG_ANIM_ELEM_FLAY == 1)
        {
            HEADER("/ANIM/ELEM/FLAY");
        }

        if (ENG_ANIM_ELEM_SSP == 1)
        {
            HEADER("/ANIM/ELEM/SSP");
        }

        if (ENG_ANIM_ELEM_SCHLIEREN == 1)
        {
            HEADER("/ANIM/ELEM/SCHLIEREN");
        }

        if (ENG_ANIM_ELEM_QVIS == 1)
        {
            HEADER("/ANIM/ELEM/QVIS");
        }

        if (ENG_ANIM_ELEM_VOLU == 1)
        {
            HEADER("/ANIM/ELEM/VOLU");
        }
    }
    else //IMPORT
    {
        HEADER("/ANIM/ELEM/%s", _opt);

        ASSIGN(ENG_ANIM_ELEM_AMS,_FIND(_opt, "AMS"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_BFRAC,_FIND(_opt, "BFRAC"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DENS,_FIND(_opt, "DENS"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_EPSP,_FIND(_opt, "EPSP"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_ENERGY,_FIND(_opt, "ENER"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_EINT,_FIND(_opt, "EINT"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VONM,_FIND(_opt, "VONM"), IMPORT);

        if(_opt == "P")
        {
            ASSIGN(ENG_ANIM_ELEM_P, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_ELEM_DAM1,_FIND(_opt, "DAM1"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DAM2,_FIND(_opt, "DAM2"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DAM3,_FIND(_opt, "DAM3"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DT,_FIND(_opt, "DT"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_EPSD,_FIND(_opt, "EPSD"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_FAIL,_FIND(_opt, "FAIL"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_HOURG,_FIND(_opt, "HOURG"), IMPORT);

        if(_opt == "K")
        {
            ASSIGN(ENG_ANIM_ELEM_K, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_ELEM_LAW51_ALL,_FIND(_opt, "LAW51/ALL"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_LAW51_1,_FIND(_opt, "LAW51/1"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_LAW51_2,_FIND(_opt, "LAW51/2"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_LAW51_3,_FIND(_opt, "LAW51/3"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_LAW51_4,_FIND(_opt, "LAW51/4"), IMPORT);

        if(_opt =="SIGX")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGX, 1, IMPORT);
        }
        else if(_opt == "SIGY")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGY, 1, IMPORT);
        }
        else if(_opt == "SIGZ")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGZ, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_ELEM_SIGXY,_FIND(_opt, "SIGXY"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SIGYZ,_FIND(_opt, "SIGYZ"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SIGZX,_FIND(_opt, "SIGZX"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_TDET,_FIND(_opt, "TDET"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_TEMP,_FIND(_opt, "TEMP"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_THIC,_FIND(_opt, "THIC"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_TVIS,_FIND(_opt, "TVIS"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_THIN,_FIND(_opt, "THIN"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VFRAC,_FIND(_opt, "VFRAC"), IMPORT);

        if(_opt == "VORT")
        {
            ASSIGN(ENG_ANIM_ELEM_VORT, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_ELEM_VORTX,_FIND(_opt, "VORTX"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VORTY,_FIND(_opt, "VORTY"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VORTZ,_FIND(_opt, "VORTZ"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_THKERR,_FIND(_opt, "THKERR"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_FLAY,_FIND(_opt, "FLAY"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SSP,_FIND(_opt, "SSP"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SCHLIEREN,_FIND(_opt, "SCHLIEREN"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_QVIS,_FIND(_opt, "QVIS"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VOLU,_FIND(_opt, "VOLU"), IMPORT);
    }
}

FORMAT(radioss2019)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if (ENG_ANIM_ELEM_AMS == 1)
        {
            HEADER("/ANIM/ELEM/AMS");
        }

        if (ENG_ANIM_ELEM_BFRAC == 1)
        {
            HEADER("/ANIM/ELEM/BFRAC");
        }

        if (ENG_ANIM_ELEM_DENS == 1)
        {
            HEADER("/ANIM/ELEM/DENS");
        }

        if (ENG_ANIM_ELEM_EPSP == 1)
        {
            HEADER("/ANIM/ELEM/EPSP");
        }

        if (ENG_ANIM_ELEM_ENERGY == 1)
        {
            HEADER("/ANIM/ELEM/ENER");
        }

        if (ENG_ANIM_ELEM_EINT == 1)
        {
            HEADER("/ANIM/ELEM/EINT");
        }

        if (ENG_ANIM_ELEM_VONM == 1)
        {
            HEADER("/ANIM/ELEM/VONM");
        }

        if (ENG_ANIM_ELEM_P == 1)
        {
            HEADER("/ANIM/ELEM/P");
        }

        if (ENG_ANIM_ELEM_DAM1 == 1)
        {
            HEADER("/ANIM/ELEM/DAM1");
        }

        if (ENG_ANIM_ELEM_DAM2 == 1)
        {
            HEADER("/ANIM/ELEM/DAM2");
        }

        if (ENG_ANIM_ELEM_DAM3 == 1)
        {
            HEADER("/ANIM/ELEM/DAM3");
        }

        if (ENG_ANIM_ELEM_DT == 1)
        {
            HEADER("/ANIM/ELEM/DT");
        }

        if (ENG_ANIM_ELEM_EPSD == 1)
        {
            HEADER("/ANIM/ELEM/EPSD");
        }

        if (ENG_ANIM_ELEM_FAIL == 1)
        {
            HEADER("/ANIM/ELEM/FAIL");
        }

        if (ENG_ANIM_ELEM_HOURG == 1)
        {
            HEADER("/ANIM/ELEM/HOURG");
        }

        if (ENG_ANIM_ELEM_K == 1)
        {
            HEADER("/ANIM/ELEM/K");
        }

        if (ENG_ANIM_ELEM_LAW51_ALL == 1)
        {
            HEADER("/ANIM/ELEM/LAW51/ALL");
        }

        if (ENG_ANIM_ELEM_LAW51_1 == 1)
        {
            HEADER("/ANIM/ELEM/LAW51/1");
        }

        if (ENG_ANIM_ELEM_LAW51_2 == 1)
        {
            HEADER("/ANIM/ELEM/LAW51/2");
        }

        if (ENG_ANIM_ELEM_LAW51_3 == 1)
        {
            HEADER("/ANIM/ELEM/LAW51/3");
        }

        if (ENG_ANIM_ELEM_LAW51_4 == 1)
        {
            HEADER("/ANIM/ELEM/LAW51/4");
        }

        if (ENG_ANIM_ELEM_MACH == 1)
        {
            HEADER("/ANIM/ELEM/MACH");
        }

        if (ENG_ANIM_ELEM_OFF == 1)
        {
            HEADER("/ANIM/ELEM/OFF");
        }

        if (ENG_ANIM_ELEM_SIGX == 1)
        {
            HEADER("/ANIM/ELEM/SIGX");
        }

        if (ENG_ANIM_ELEM_SIGY == 1)
        {
            HEADER("/ANIM/ELEM/SIGY");
        }

        if (ENG_ANIM_ELEM_SIGZ == 1)
        {
            HEADER("/ANIM/ELEM/SIGZ");
        }

        if (ENG_ANIM_ELEM_SIGXY == 1)
        {
            HEADER("/ANIM/ELEM/SIGXY");
        }

        if (ENG_ANIM_ELEM_SIGYZ == 1)
        {
            HEADER("/ANIM/ELEM/SIGYZ");
        }

        if (ENG_ANIM_ELEM_SIGZX == 1)
        {
            HEADER("/ANIM/ELEM/SIGZX");
        }

        if (ENG_ANIM_ELEM_TDET == 1)
        {
            HEADER("/ANIM/ELEM/TDET");
        }

        if (ENG_ANIM_ELEM_TEMP == 1)
        {
            HEADER("/ANIM/ELEM/TEMP");
        }

        if (ENG_ANIM_ELEM_THIC == 1)
        {
            HEADER("/ANIM/ELEM/THIC");
        }

        if (ENG_ANIM_ELEM_TVIS == 1)
        {
            HEADER("/ANIM/ELEM/TVIS");
        }

        if (ENG_ANIM_ELEM_THIN == 1)
        {
            HEADER("/ANIM/ELEM/THIN");
        }

        if (ENG_ANIM_ELEM_VFRAC == 1)
        {
            HEADER("/ANIM/ELEM/VFRAC");
        }

        if (ENG_ANIM_ELEM_VORT == 1)
        {
            HEADER("/ANIM/ELEM/VORT");
        }

        if (ENG_ANIM_ELEM_VORTX == 1)
        {
            HEADER("/ANIM/ELEM/VORTX");
        }

        if (ENG_ANIM_ELEM_VORTY == 1)
        {
            HEADER("/ANIM/ELEM/VORTY");
        }

        if (ENG_ANIM_ELEM_VORTZ == 1)
        {
            HEADER("/ANIM/ELEM/VORTZ");
        }

        if (ENG_ANIM_ELEM_THKERR == 1)
        {
            HEADER("/ANIM/ELEM/THKERR");
        }

        if (ENG_ANIM_ELEM_FLAY == 1)
        {
            HEADER("/ANIM/ELEM/FLAY");
        }

        if (ENG_ANIM_ELEM_SSP == 1)
        {
            HEADER("/ANIM/ELEM/SSP");
        }

        if (ENG_ANIM_ELEM_SCHLIEREN == 1)
        {
            HEADER("/ANIM/ELEM/SCHLIEREN");
        }

        if (ENG_ANIM_ELEM_QVIS == 1)
        {
            HEADER("/ANIM/ELEM/QVIS");
        }

        if (ENG_ANIM_ELEM_VOLU == 1)
        {
            HEADER("/ANIM/ELEM/VOLU");
        }
    }
    else //IMPORT
    {
        HEADER("/ANIM/ELEM/%s", _opt);

        ASSIGN(ENG_ANIM_ELEM_AMS,_FIND(_opt, "AMS"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_BFRAC,_FIND(_opt, "BFRAC"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DENS,_FIND(_opt, "DENS"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_EPSP,_FIND(_opt, "EPSP"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_ENERGY,_FIND(_opt, "ENER"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_EINT,_FIND(_opt, "EINT"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VONM,_FIND(_opt, "VONM"), IMPORT);

        if(_opt == "P")
        {
            ASSIGN(ENG_ANIM_ELEM_P, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_ELEM_DAM1,_FIND(_opt, "DAM1"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DAM2,_FIND(_opt, "DAM2"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DAM3,_FIND(_opt, "DAM3"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_DT,_FIND(_opt, "DT"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_EPSD,_FIND(_opt, "EPSD"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_FAIL,_FIND(_opt, "FAIL"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_HOURG,_FIND(_opt, "HOURG"), IMPORT);

        if(_opt == "K")
        {
            ASSIGN(ENG_ANIM_ELEM_K, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_ELEM_LAW51_ALL,_FIND(_opt, "LAW51/ALL"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_LAW51_1,_FIND(_opt, "LAW51/1"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_LAW51_2,_FIND(_opt, "LAW51/2"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_LAW51_3,_FIND(_opt, "LAW51/3"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_LAW51_4,_FIND(_opt, "LAW51/4"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_MACH,_FIND(_opt, "MACH"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_OFF,_FIND(_opt, "OFF"), IMPORT);

        if(_opt =="SIGX")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGX, 1, IMPORT);
        }
        else if(_opt == "SIGY")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGY, 1, IMPORT);
        }
        else if(_opt == "SIGZ")
        {
            ASSIGN(ENG_ANIM_ELEM_SIGZ, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_ELEM_SIGXY,_FIND(_opt, "SIGXY"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SIGYZ,_FIND(_opt, "SIGYZ"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SIGZX,_FIND(_opt, "SIGZX"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_TDET,_FIND(_opt, "TDET"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_TEMP,_FIND(_opt, "TEMP"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_THIC,_FIND(_opt, "THIC"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_TVIS,_FIND(_opt, "TVIS"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_THIN,_FIND(_opt, "THIN"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VFRAC,_FIND(_opt, "VFRAC"), IMPORT);

        if(_opt == "VORT")
        {
            ASSIGN(ENG_ANIM_ELEM_VORT, 1, IMPORT);
        }

        ASSIGN(ENG_ANIM_ELEM_VORTX,_FIND(_opt, "VORTX"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VORTY,_FIND(_opt, "VORTY"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VORTZ,_FIND(_opt, "VORTZ"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_THKERR,_FIND(_opt, "THKERR"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_FLAY,_FIND(_opt, "FLAY"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SSP,_FIND(_opt, "SSP"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_SCHLIEREN,_FIND(_opt, "SCHLIEREN"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_QVIS,_FIND(_opt, "QVIS"), IMPORT);

        ASSIGN(ENG_ANIM_ELEM_VOLU,_FIND(_opt, "VOLU"), IMPORT);
    }
}

