//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// /EBCS/INLET 
//

ATTRIBUTES(COMMON)
{
    // INPUT ATTRIBUTES

    //  Card
    entityid                                  = VALUE(SETS, "Surface identifier","surf_ID")  { SUBTYPES = (/SETS/SURF_IDPOOL); }
    vel_flag                                  = VALUE(INT, "Velocity type of INLET boundary","vel_flag");

    rad_fct_vx                                = VALUE(INT, "Function fVX(t) identifier for X or normal velocity","fct_IDvx");
    rad_ebcs_fscale_vx                        = VALUE(FLOAT, "normal or X velocity scale factor","Fscalevx");
    rad_fct_vy                                = VALUE(INT, "Function fVY(t) identifier for Y velocity","fct_IDvy");
    rad_ebcs_fscale_vy                        = VALUE(FLOAT, "Y velocity scale factor","Fscalevy");
    rad_fct_vz                                = VALUE(INT, "Function fVZ(t) identifier for Z velocity","fct_IDvz");
    rad_ebcs_fscale_vz                        = VALUE(FLOAT, "Z velocity scale factor","Fscalevz");

    matLawArrCnt                              = SIZE("Number of MAT/LAW151 submaterials");
    fct_IDvf_n                                = ARRAY[matLawArrCnt](INT, "Function fvf(t) identifier for volume fraction","fct_IDvf");
    Fscalevf_n                                = ARRAY[matLawArrCnt](FLOAT, "Alpha scale factor","Fscalevf");
    fct_IDrho_n                               = ARRAY[matLawArrCnt](INT, "Function frho(t) identifier for density","fct_IDrho");
    Fscalerho_n                               = ARRAY[matLawArrCnt](FLOAT, "Density scale factor","Fscalerho");
    fct_IDp_e_n                               = ARRAY[matLawArrCnt](INT, "If form=VE, function identifier for energy, fp_e(t); If form =VP, function identifier for pressure fp_e(t)","fct_IDp_e");
    Fscalep_e_n                               = ARRAY[matLawArrCnt](FLOAT, "If form=VE, energy scale factor; If form=VP, pressure scale factor","Fscalep_e");

    //HM INTERNAL 
    KEYWORD_STR                               = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                              = SIZE("NUM_COMMENTS");
    CommentEnumField                          = VALUE(INT, "User Comments");
    COMMENTS                                  = ARRAY[NUM_COMMENTS](STRING, "Entity Comments");

    form                                      = VALUE(INT, "Formulation of INLET boundary condition","form");
    _DummyKeyword                             = VALUE(INT, "");
    _dummy                                    = VALUE(STRING, "");
    IO_FLAG                                   = VALUE(INT, "IOFLAG");

    displayname                               = VALUE(STRING, "Elementary boundary condition title","TITLE");
}

CHECK(COMMON)
{

}

DEFAULTS(COMMON)
{
    //  Card
    vel_flag                                  = 0;
    rad_ebcs_fscale_vx                        = 0.0;
    rad_ebcs_fscale_vy                        = 0.0;
    rad_ebcs_fscale_vz                        = 0.0;
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //  Card
    vel_flag                                  = -1;
    fct_IDvf_n                                = -1;
    Fscalevf_n                                = -1;
    fct_IDrho_n                               = -1;
    Fscalerho_n                               = -1;
    fct_IDp_e_n                               = -1;
    Fscalep_e_n                               = -1;

    //HM INTERNAL
    KEYWORD_STR                               = 9000;
    COMMENTS                                  = 5109;
    CommentEnumField                          = 7951;
    NUM_COMMENTS                              = 5110;

    form                                      = -1;
    _DummyKeyword                             = -1;
    _dummy                                    = -1;
    IO_FLAG                                   = -1;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
       ENUM_VALUE_FLAG=TRUE;
       ADD(1, "1:Hide in Menu/Export");
       ADD(2, "2:Show in Menu/Export");
       ADD(3, "3:Do Not Export");
    }
    if(CommentEnumField == 2)
    {
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }

    ASSIGN(KEYWORD_STR, "/EBCS/INLET");

    RADIO(form, "form")
    {
      ADD(1,"VE Input density and energy using fct_IDp_e and Fscalep_e");
      ADD(2,"VP Input density and pressure using fct_IDp_e and Fscalep_e");
    }

    if(form == 1)
    {
      ASSIGN(KEYWORD_STR, "/VE/");
    }
    else if(form == 2)
    {
      ASSIGN(KEYWORD_STR, "/VP/");
    }

    //Title Card
    SCALAR(displayname, "ebcs_title")         { DIMENSION = "DIMENSIONLESS"; }

    //  Card
    DATA(entityid);
    RADIO(vel_flag)
    {
      ADD(0,"0: (Default) Input normal velocity in fct_IDvx and Fscalevx");
      ADD(1,"1: Input 3 components of the velocity");
    }

    SCALAR(rad_fct_vx)                        { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(rad_ebcs_fscale_vx)                { DIMENSION = "velocity"; }

    SCALAR(rad_fct_vy)                        { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(rad_ebcs_fscale_vy)                { DIMENSION = "velocity"; }

    SCALAR(rad_fct_vz)                        { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(rad_ebcs_fscale_vz)                { DIMENSION = "velocity"; }

    SIZE(matLawArrCnt, "Number_of_MatLaw");
    ARRAY(matLawArrCnt, "Number_of_MatLaw")
    {
      SCALAR(fct_IDvf_n, "fct_IDvf")          { DIMENSION = "DIMENSIONLESS"; }
      SCALAR(Fscalevf_n, "Fscalevf")          { DIMENSION = "DIMENSIONLESS"; }
      SCALAR(fct_IDrho_n, "fct_IDrho")        { DIMENSION = "DIMENSIONLESS"; }
      SCALAR(Fscalerho_n, "Fscalerho")        { DIMENSION = "density"; }
      SCALAR(fct_IDp_e_n, "fct_IDp_e")        { DIMENSION = "DIMENSIONLESS"; }
      SCALAR(Fscalep_e_n, "Fscalep_e")    { if(form == 1)
                                              { DIMENSION = "energy"; }
                                            else if(form == 2)
                                              { DIMENSION = "pressure"; } }
    }
}

// File format
FORMAT(radioss2019)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if(IO_FLAG == 0)
    {
       if(form == 1)
         HEADER("/EBCS/INLET/VE/%-d", _ID_);

       if(form == 2)
         HEADER("/EBCS/INLET/VP/%-d", _ID_);
    }
    else  // IMPORT
    {
       HEADER("/EBCS/INLET/%-s/%d",_dummy, _ID_);

       if(_dummy == "VE")
       {
           ASSIGN(form,1,IMPORT);
       }
       else if(_dummy == "VP")
       {
           ASSIGN(form,2,IMPORT);
       }
    }

    //  Title
    CARD("%-100s", displayname);

    //  Card 
    COMMENT("#  surf_ID  vel_flag");
    CARD("%10d%10d", entityid, vel_flag);

    COMMENT("# fct_IDvx            Fscalevx  fct_IDvy            Fscalevy  fct_IDvz            Fscalevz");
    CARD("%10d%20lg%10d%20lg%10d%20lg", rad_fct_vx, rad_ebcs_fscale_vx, rad_fct_vy, rad_ebcs_fscale_vy, rad_fct_vz, rad_ebcs_fscale_vz);
    COMMENT("# fct_IDvf            Fscalevf fct_IDrho           Fscalerho fct_IDp_e           Fscalep_e");

    FREE_CARD_LIST(matLawArrCnt)
    {
        CARD("%10d%20lg%10d%20lg%10d%20lg", fct_IDvf_n, Fscalevf_n, fct_IDrho_n, Fscalerho_n, fct_IDp_e_n, Fscalep_e_n);
    }
}
