//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Property PROP_SPH Type34

ATTRIBUTES(COMMON)
{
    MASS                     = VALUE(FLOAT," Mass of the Particles");
    qa                       = VALUE(FLOAT," Quadratic Bulk Viscosity");
    qb                       = VALUE(FLOAT," Linear Bulk Viscosity");
    ALPHA1                   = VALUE(FLOAT," Conservative Smoothing Coefficient");
    SKEW_CSID                = VALUE(SYSTEM," Skew Identifier");
    h_1D                     = VALUE(INT,"Smoothing length change based on volume");
    ORDER                    = VALUE(INT," SPH Correction Order");
    h                        = VALUE(FLOAT," Smoothing Length");
    Xi_Stab                  = VALUE(FLOAT," Coefficient for Solving Tensile Instability");
    
    //Attributes for HM usage 
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Prop_Name_OR_Type        = VALUE(INT,"");
    TITLE                    = VALUE(STRING,"");
    IO_FLAG                  = VALUE(INT,"");
    TYPE_NO                  = VALUE(STRING,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR              = 9000;
    NUM_COMMENTS             = 5110;
    COMMENTS                 = 5109;
    CommentEnumField         = 7951;
    ALPHA1                   = 6145;
    MASS                     =  167;
    ORDER                    = 4335;
    h                        = 8031;
    qa                       = 8029;
    qb                       = 8030;
    SKEW_CSID                =  412;
    h_1D                     = 2721;
    Xi_Stab                  = 8064;
    Prop_Name_OR_Type        = 4537;
    TITLE                    =   -1;
    IO_FLAG                  =   -1;
    TYPE_NO                  =   -1;
}

DEFAULTS(COMMON)
{
    ORDER                    =   0;
    h_1D                     =   0;
    qa                       = 2.0;
    qb                       = 1.0;
    Prop_Name_OR_Type        =   0;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
       ENUM_VALUE_FLAG=TRUE;
       ADD(1, "1:Hide in Menu/Export");
       ADD(2, "2:Show in Menu/Export");
       ADD(3, "3:Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Prop_Name_OR_Type == 2)
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TYPE34/");

    }
    else
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/SPH/");
    }
    SCALAR(MASS) { DIMENSION="m"; }
    SCALAR(qa);
    SCALAR(qb);
    SCALAR(ALPHA1);
    DATA(SKEW_CSID) {/FILTER/Framefix/0/EQ;}
    RADIO(h_1D)
    {
        ADD(0, "0:3D expansion of h");
        ADD(1, "1:1D expansion of h");
    }
    RADIO(ORDER)
    {
        ADD(-1, "-1:Means No Correction at All.");
        ADD(0, "0:Means Order 0 Correction.");
        ADD(1, "1:Means Correction Up to Order 1 - Not Allowed for SPMD Parallel Version.");
    }
    SCALAR(h) { DIMENSION="l"; }
    SCALAR(Xi_Stab);
}

FORMAT(radioss2019) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE34/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SPH/%d",_ID_);
    }
    CARD("%-80s", TITLE);
    COMMENT("#                 Mp                  qa                  qb            Alpha_cs   skew_ID      h_1D");
    CARD("%20lg%20lg%20lg%20lg%10d%10d",MASS,qa,qb,ALPHA1,SKEW_CSID,h_1D);
    COMMENT("#    Order                   h             Xi_Stab");
    CARD("%10d%20lg%20lg",ORDER,h,Xi_Stab);
}

FORMAT(radioss130) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE34/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SPH/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#                 Mp                  qa                  qb            Alpha_cs   skew_ID");
    CARD("%20lg%20lg%20lg%20lg%10d",MASS,qa,qb,ALPHA1,SKEW_CSID);
    COMMENT("#    Order                   h             Xi_Stab");
    CARD("%10d%20lg%20lg",ORDER,h,Xi_Stab);
}

// File format for Radioss 51
FORMAT(radioss51) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE34/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SPH/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#                 Mp                  qa                  qb            Alpha_cs");
    CARD("%20lg%20lg%20lg%20lg",MASS,qa,qb,ALPHA1);
    COMMENT("#    Order                   h");
    CARD("%10d%20lg",ORDER,h);
}
FORMAT(radioss44) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s/%d/%s",TYPE_NO,_ID_,TITLE);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    COMMENT("#             Mp              Qa              Qb        Alpha_cs");
    CARD("%16lg%16lg%16lg%16lg",MASS,qa,qb,ALPHA1);
    COMMENT("#  order               h");
    CARD("%8d%16lg",ORDER,h);
}