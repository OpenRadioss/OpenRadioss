//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Failure model, ALTER Setup File
// 

ATTRIBUTES(COMMON){ 

    _HMCOMMENTSFLAG  					= VALUE(INT, "Write HM Comments");
    mat_id           					= VALUE(MAT,  "Material");

    Exp_n       						= VALUE(FLOAT,"Crack growth exponent for subcritical crack growth");
    V0          						= VALUE(FLOAT,"Crack growth velocity for subcritical crack growth at KIC ");
    Vc         							= VALUE(FLOAT,"Maximum crack propagation velocity glass ");
    EMA         						= VALUE(INT,"Stress filtering period in cycles");
    Irate                               = VALUE(INT,"Stress filtering method");
    mode                                = VALUE(INT,"Flag to switch failure propagation models between neighbor elements");
    
    Cr_foil         					= VALUE(FLOAT,"Crack depth at PVB surface ");
    Cr_air           					= VALUE(FLOAT,"Crack depth PVB surface");
    Cr_core                             = VALUE(FLOAT,"Crack depth in between bottom and surface integration points");
    Cr_edge                    			= VALUE(FLOAT, "Crack depth exposed surface");
    grsh4N                 				= VALUE(SETS,"(Optional) Group identifier for 4 node shell elements") { SUBTYPES = (/SETS/GRSHEL) ; }
    grsh3N             					= VALUE(SETS,"(Optional) Group identifier for 3 node shell elements") { SUBTYPES = (/SETS/GRSH3N) ; }
	

    
    KIC     							= VALUE(FLOAT, "Fracture toughness ");
    KTH     							= VALUE(FLOAT, "Fatigue threshold ");
    Rlen        						= VALUE(FLOAT,"Reference length");
        
    ID_CARD_EXIST						= VALUE(BOOL, "Give an Id");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    _HMCOMMENTSFLAG=-1;
}

GUI(COMMON) 
{

  SCALAR (V0)             {DIMENSION="velocity"; }
  SCALAR (Vc)             {DIMENSION="velocity"; }
  SCALAR (Cr_foil)        {DIMENSION="l"; }
  SCALAR (Cr_air)         {DIMENSION="l"; }
  SCALAR (Cr_core)        {DIMENSION="l"; }
  SCALAR (Cr_edge)        {DIMENSION="l"; }
  SCALAR (Rlen)           {DIMENSION="l"; }

  SCALAR (KIC)            {DIMENSION="fracture_toughness"; }     
  SCALAR (KTH)            {DIMENSION="fracture_toughness"; }

/*  TOUGHNESS = mass * time^(-2) * length^(-3/2)*/

}

FORMAT(radioss2019) {
    HEADER("/FAIL/ALTER/%d",mat_id);
    
    if(Irate==0)
    {
        COMMENT("#              EXP_N                  V0                  VC   NCYCLES     IRATE                MODE");
        CARD("%20lg%20lg%20lg%10d%10d          %10d",Exp_n,V0,Vc,EMA,Irate,mode);
    }
    else
    {
        COMMENT("#              EXP_N                  V0                  VC               IRATE                MODE");
        CARD("%20lg%20lg%20lg          %10d          %10d",Exp_n,V0,Vc,Irate,mode);
    }

    COMMENT("#            CR_FOIL              CR_AIR             CR_CORE             CR_EDGE    GRSH4N    GRSH3N");
    CARD("%20lg%20lg%20lg%20lg%10d%10d",Cr_foil,Cr_air,Cr_core,Cr_edge,grsh4N,grsh3N);
    
    COMMENT("#                KIC                 KTH                RLEN");
    CARD("%20lg%20lg%20lg",KIC,KTH,Rlen);
    
    if (ID_CARD_EXIST==TRUE)
    {
     COMMENT("#  FAIL_ID") ;
    }
    FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);
}
