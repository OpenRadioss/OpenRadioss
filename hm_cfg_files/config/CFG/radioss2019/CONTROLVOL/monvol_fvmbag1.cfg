//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// /MONVOL/FVMBAG1
//

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES

    // Card 1
    entityiddisplayed                       = VALUE(SETS, "External surface identifier")  { SUBTYPES = (/SETS/SURF_IDPOOL); }
    HEAT_T0                                 = VALUE(FLOAT, "Heat transfer coefficient");

    Scal_T                                  = VALUE(FLOAT, "Abscissa scale factor for time based functions");
    Scal_P                                  = VALUE(FLOAT, "Abscissa scale factor for pressure based functions");
    Scal_S                                  = VALUE(FLOAT, "Abscissa scale factor for area based functions");
    Scal_A                                  = VALUE(FLOAT, "Abscissa scale factor for angle based functions");
    Scal_D                                  = VALUE(FLOAT, "Abscissa scale factor for distance based functions");

    MAT1                                    = VALUE(MAT, "Initial gas material identifier");
    PEXT                                    = VALUE(FLOAT, "External pressure");
    T_Initial                               = VALUE(FLOAT, "Initial temperature");
    Iequil                                  = VALUE(INT, "Initial thermodynamic equilibrium flag");
    I_ttf                                   = VALUE(INT, "Time shift flag. Active only when injection sensor is specified. Determines time shift for venting and porosity options when injection starts at a Time to Fire specified in a sensor");

    // Card 2: Number of injectors
    ABG_Njet                                = SIZE("Number of injectors");

    // Card 3: Define Njet injectors
    injector_IDs                            = ARRAY[ABG_Njet](PROPERTY, "Injector property identifier")  { SUBTYPES=(/PROP/INJECT1,/PROP/INJECT2); }
    ABG_Isensor                             = ARRAY[ABG_Njet](SENSOR, "Sensor identifier");
    S1_SETSURFID                            = ARRAY[ABG_Njet](SETS, "Injector surface identifier (must be different for each injector)")  { SUBTYPES = (/SETS/SURF_IDPOOL); }

    ABG_IPt                                 = ARRAY[ABG_Njet](CURVE, "Injected gas velocity identifier");
    Fp1                                     = ARRAY[ABG_Njet](FLOAT, "Injected gas velocity scale factor");

    // Card 4: Number of vent holes and porous fabric surfaces
    ABG_Nvent                               = SIZE("Number of vent holes");
    ABG_Nporsurf                            = SIZE("Number of porous surfaces");

    // Card 5: Define Nvent vent holes (four lines  per vent hole)
    SVENT_SETSURFID                         = ARRAY[ABG_Nvent](SETS, "Vent holes area surface identifier")  { SUBTYPES = (/SETS/SURF_IDPOOL); }
    Itvent                                  = ARRAY[ABG_Nvent](INT, "Venting formulation");
    ABG_Avent                               = ARRAY[ABG_Nvent](FLOAT, "Scale factor on vent hole area");
    ABG_Bvent                               = ARRAY[ABG_Nvent](FLOAT, "Scale factor on impacted vent hole area");
    KEYWORD1                                = ARRAY[ABG_Nvent](STRING, "Vent hole title");
    Tstart_arr_X                            = ARRAY[ABG_Nvent](FLOAT, "Start time for venting");
    Tstop_arr_X                             = ARRAY[ABG_Nvent](FLOAT, "Stop time for venting");
    ABG_dPdef                               = ARRAY[ABG_Nvent](FLOAT, "Pressure difference to open vent hole membrane. dPdef=Pdef-Pext");
    ABG_dtPdef                              = ARRAY[ABG_Nvent](FLOAT, "Minimum duration pressure exceeds Pdef to open vent hole membrane");
    I_dtPdef_arr                            = ARRAY[ABG_Nvent](INT, "Time delay flag, when dPdef is reached");

    ABG_Iport                               = ARRAY[ABG_Nvent](FUNCT, "Porosity vs time function identifier");
    ABG_Iporp                               = ARRAY[ABG_Nvent](FUNCT, "Porosity vs pressure function identifier");
    ABG_IporA                               = ARRAY[ABG_Nvent](FUNCT, "Porosity vs area function identifier");
    Fport                                   = ARRAY[ABG_Nvent](FLOAT, "Scale factor for fct_IDt");
    Fporp                                   = ARRAY[ABG_Nvent](FLOAT, "Scale factor for fct_IDP");
    FporA                                   = ARRAY[ABG_Nvent](FLOAT, "Scale factor for fct_IDA");

    ABG_Iport1                              = ARRAY[ABG_Nvent](FUNCT, "Porosity vs time when contact function identifier");
    ABG_Iporp1                              = ARRAY[ABG_Nvent](FUNCT, "Porosity vs pressure when contact function identifier");
    ABG_IporA1                              = ARRAY[ABG_Nvent](FUNCT, "Porosity vs impacted surface function identifier");
    Fport1                                  = ARRAY[ABG_Nvent](FLOAT, "Scale factor for fct_IDt'");
    Fporp1                                  = ARRAY[ABG_Nvent](FLOAT, "Scale factor for fct_IDP'");
    FporA1                                  = ARRAY[ABG_Nvent](FLOAT, "Scale factor for fct_IDA'");
    ABG_Iv                                  = ARRAY[ABG_Nvent](CURVE, "Outflow velocity versus relative pressure function identifier");
    BB1                                     = ARRAY[ABG_Nvent](FLOAT, "Scale factor on fct_IDV");

    // Card 6: Insert for each porous surface
    S2_SETSURFID                            = ARRAY[ABG_Nporsurf](SETS, "Porous surface identifier")  { SUBTYPES = (/SETS/SURF_IDPOOL); }
    ITYPE                                   = ARRAY[ABG_Nporsurf](INT, "Porosity formulation");
    Iblockage                               = ARRAY[ABG_Nporsurf](INT, "Block leakage flag, if contact (Iformps > 0)");
    KEYWORD2                                = ARRAY[ABG_Nporsurf](STRING, "Porous surface title");

    Tstart_arr_Y                            = ARRAY[ABG_Nporsurf](FLOAT, "Start time for venting");
    Tstop_arr_Y                             = ARRAY[ABG_Nporsurf](FLOAT, "Stop time for venting");
    ABG_dPdef_ps                            = ARRAY[ABG_Nporsurf](FLOAT, "Pressure difference to open vent hole membrane");
    ABG_dtPdef_ps                           = ARRAY[ABG_Nporsurf](FLOAT, "Minimum duration pressure exceeds Pdef to open vent hole membrane");
    I_dtPdef_arr_ps                         = ARRAY[ABG_Nvent](INT, "Time delay flag, when dPdef is reached");

    // Card 7: Chemkin model data (read only if Iform =2 or Iformps = 2)
    ABG_fct                                 = ARRAY[ABG_Nporsurf](CURVE, "Outflow velocity versus relative pressure function identifier");
    BB10                                    = ARRAY[ABG_Nporsurf](FLOAT, "Scale factor on fct_IDV");

    // Card 8: Finite volume meshing parameters
    Iskew                                   = VALUE(SYSTEM, "Frame identifier used to define vectors V1, V2, V3 and origin O. Default = global frame is used (Integer)");
    Kmesh                                   = VALUE(INT, "FVMBAG automatic meshing option");
    Tswitch                                 = VALUE(FLOAT, "Amount of time after airbag time to fire to switch from FVM to UP (Uniform Pressure) formulation");
    Iswitch                                 = VALUE(INT, "Flag to switch from FVM to UP");
    Pswitch                                 = VALUE(FLOAT, "Ratio of FV standard deviation pressure to average pressure which triggers FVM to UP switch");

    L1                                      = VALUE(FLOAT, "Length L1");
    L2                                      = VALUE(FLOAT, "Length L2");
    L3                                      = VALUE(FLOAT, "Length L3");

    Nb1                                     = VALUE(INT, "Number of finite volumes in direction 1");
    Nb2                                     = VALUE(INT, "Number of finite volumes in direction 2");
    Nb3                                     = VALUE(INT, "Number of finite volumes in direction 3");
    GR_BRICK_SET                            = VALUE(SETS, "User-defined solid group identifier")  { SUBTYPES = (/SETS/GRBRIC) ; }
    SURF_ID1                                = VALUE(SETS, "Internal surfaces identifier")  { SUBTYPES = (/SETS/SURF_IDPOOL); }
    Iref                                    = VALUE(INT, "Flag for applying the automated FVM mesh on the reference geometry. Only used if, kmesh=1");

    Igmerg                                  = VALUE(INT, "Global merging formulation flag");
    Cgmerg                                  = VALUE(FLOAT, "Factor for global merging"); 
    Cnmerg                                  = VALUE(FLOAT, "Factor for neighborhood merging");
    Ptole                                   = VALUE(FLOAT, "Tolerance for finite volume identification");

    qa                                      = VALUE(FLOAT, "Quadratic bulk viscosity");
    qb                                      = VALUE(FLOAT, "Linear bulk viscosity");
    h                                       = VALUE(FLOAT, "Minimum height for triangle permeability");
    Dtsca                                   = VALUE(FLOAT, "Scale factor for airbag time step. Using /DT/FVMBAG in the Engine will override this value");
    Dtmin                                   = VALUE(FLOAT, "Minimum time step for the airbag. Using /DT/FVMBAG in the Engine will override this value");

    ILvout                                  = VALUE(INT, "Output level");
    NLayer                                  = VALUE(INT, "Estimated number of layers in airbag folding along direction V3");
    Nfacmax                                 = VALUE(INT, "Estimated maximum number of airbag segments concerned by a finite volume in the first automatic meshing step");
    Nppmax                                  = VALUE(INT, "Estimated maximum number of vertices of a polygon");
    Vflag                                   = VALUE(INT, "Write finite volumes in Radioss Starter Animation A000 File flag");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    CommentEnumField                        = VALUE(INT, "User Comments");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING, "Entity Comments");

    TITLE                                   = VALUE(STRING, "Monitored volume title");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES

    // Card 1
    HEAT_T0                                 = 4339;

    Scal_T                                  = 4103;
    Scal_P                                  = 4104;
    Scal_S                                  = 4105;
    Scal_A                                  = 4106;
    Scal_D                                  = 4107;

    MAT1                                    = 5277;
    PEXT                                    = 8144;
    T_Initial                               = 4113;
    Iequil                                  = 5398;
    I_ttf                                   = 4759;

    // Card 2: Number of injectors
    ABG_Njet                                = 969;

    // Card 3: Define Njet injectors
    injector_IDs                            = 4681;
    ABG_Isensor                             = 920;
    S1_SETSURFID                            = 4819;

    ABG_IPt                                 = 925;
    Fp1                                     = 4114;

    // Card 4: Number of vent holes and porous fabric surfaces
    ABG_Nvent                               = 928;
    ABG_Nporsurf                            = 764;

    // Card 5: Define Nvent vent holes (four lines  per vent hole)
    SVENT_SETSURFID                         = 4682;
    Itvent                                  = 4499;
    ABG_Avent                               = 930;
    ABG_Bvent                               = 931;
    KEYWORD1                                = 549;

    Tstart_arr_X                            = 4635;
    Tstop_arr_X                             = 4636;
    ABG_dPdef                               = 933;
    ABG_dtPdef                              = 934;
    I_dtPdef_arr                            = 4760;

    ABG_Iport                               = 935;
    ABG_Iporp                               = 936;
    ABG_IporA                               = 937;
    Fport                                   = 4110;
    Fporp                                   = 4111;
    FporA                                   = 4112;

    ABG_Iport1                              = 938;
    ABG_Iporp1                              = 939;
    ABG_IporA1                              = 940;
    Fport1                                  = 4119;
    Fporp1                                  = 4120;
    FporA1                                  = 4121;
    ABG_Iv                                  = 943;
    BB1                                     = 115;

    // Card 6: Insert for each porous surface
    S2_SETSURFID                            = 2601;
    ITYPE                                   = 599;
    Iblockage                               = 765;
    KEYWORD2                                = 550;

    Tstart_arr_Y                            = 4637;
    Tstop_arr_Y                             = 4638;
    ABG_dPdef_ps                            = 767;
    ABG_dtPdef_ps                           = 768;
    I_dtPdef_arr_ps                         = 766;

    // Card 7: Chemkin model data
    ABG_fct                                 = 771;
    BB10                                    = 185;

    // Card 8: Finite volume meshing parameters
    Iskew                                   = 4738;
    Kmesh                                   = 2566;
    Tswitch                                 = 2651;
    Iswitch                                 = -1;
    Pswitch                                 = -1;

    L1                                      = 4506;
    L2                                      = 4507;
    L3                                      = 4508;

    Nb1                                     = 4509;
    Nb2                                     = 4510;
    Nb3                                     = 4511;
    GR_BRICK_SET                            = 949;
    SURF_ID1                                = 8169;
    Iref                                    = 4184;

    Igmerg                                  = 4513;
    Cgmerg                                  = 4514;
    Cnmerg                                  = 4515;
    Ptole                                   = 4516;

    qa                                      = 8029;
    qb                                      = 8030;
    h                                       = 8031;
    Dtsca                                   = 2715;
    Dtmin                                   = 2714;

    ILvout                                  = 4517;
    NLayer                                  = 4518;
    Nfacmax                                 = 4519;
    Nppmax                                  = 4520;
    Vflag                                   = 5113;

    //HM INTERNAL
    KEYWORD_STR                             = 9000;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;
    NUM_COMMENTS                            = 5110;

    TITLE                                   = -1;
}

DEFAULTS(COMMON)
{
    Scal_T                                  = 1.0;
    Scal_P                                  = 1.0;
    Scal_S                                  = 1.0;
    Scal_A                                  = 1.0;
    Scal_D                                  = 1.0;

    T_Initial                               = 295.0;
    I_ttf                                   = 0;

    Fp1                                     = 1.0;

    Itvent                                  = 1;
    ABG_Avent                               = 1.0;
    ABG_Bvent                               = 1.0;

    Tstart_arr_X                            = 0.0;
    Tstop_arr_X                             = 10e30;
    ABG_dPdef                               = 0.0;
    ABG_dtPdef                              = 0.0;

    Fport                                   = 1.0;
    Fporp                                   = 1.0;
    FporA                                   = 1.0;

    Fport1                                  = 1.0;
    Fporp1                                  = 1.0;
    FporA1                                  = 1.0;
    BB1                                     = 1.0;

    ITYPE                                   = 1;

    Kmesh                                   = 1;
    Tswitch                                 = 1e30;
    Iswitch                                 = 0;
    Pswitch                                 = 0.0;

    Nb1                                     = 1;
    Nb2                                     = 1;
    Nb3                                     = 1;
    Iref                                    = 0;

    Igmerg                                  = 1;
    Ptole                                   = 10e-5;
    qa                                      = 0.0;
    qb                                      = 0.0;
    Dtsca                                   = 0.9;

    BB10                                    = 1.0;

    ILvout                                  = 0;
    NLayer                                  = 10;
    Nfacmax                                 = 20;
    Nppmax                                  = 20;
}

GUI(COMMON)
{

    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }

    ASSIGN(KEYWORD_STR, "/MONVOL/FVMBAG1");

    // Card 1
    DATA(entityiddisplayed, "surf_IDex");
    SCALAR(HEAT_T0, "Hconv")                { DIMENSION = "thermal_convectivity"; }

    SCALAR(Scal_T, "Ascalet")               { DIMENSION = "t"; }
    SCALAR(Scal_P, "AscaleP")               { DIMENSION = "pressure"; }
    SCALAR(Scal_S, "AscaleS")               { DIMENSION = "area"; }
    SCALAR(Scal_A, "AscaleA")               { DIMENSION = "a"; }
    SCALAR(Scal_D, "AscaleD")               { DIMENSION = "l"; }

    DATA(MAT1, "mat_ID")                    { SUBTYPES=(/MAT/GAS_MASS,/MAT/GAS_MOLE,/MAT/GAS_PREDEFINED); }
    SCALAR(PEXT, "Pext")                    { DIMENSION = "pressure"; }
    SCALAR(T_Initial, "T0")                 { DIMENSION = "k"; }

    RADIO(Iequil, "Iequil")
    {
      ADD(0,"0: The mass of gas initially filling the airbag is determined with respect to the volume at time zero");
      ADD(1,"1: Start of the FVM simulation is shifted to TTF (time to fire) specified in an injector sensor");
    }

    RADIO(I_ttf, "Ittf")
    {
      ADD(0, "0 (Default)");
      ADD(1, "1 and 2 Obsolete");
      ADD(3, "3: All options are shifted");
    }

    // Card 2 Number of injectors
    SIZE(ABG_Njet, "Number of injectors");
    ARRAY(ABG_Njet, "Injectors")
    {
      DATA(injector_IDs, "inject_ID")       { SUBTYPES=(/PROP/INJECT1,/PROP/INJECT2); }
      DATA(ABG_Isensor, "sens_ID");
      DATA(S1_SETSURFID, "surf_IDinj");

      DATA(ABG_IPt, "fct_IDvel");
      SCALAR(Fp1, "Fscalevel")              { DIMENSION = "velocity"; }
    }

    // Card 4 Number of vent holes and porous fabric surfaces
    SIZE(ABG_Nvent, "Number of vent holes");
    SIZE(ABG_Nporsurf, "Number of porous surfaces");

    // Card 5 Define Nvent vent holes (four lines per vent hole)
    ARRAY(ABG_Nvent, "Vent holes")
    {
        DATA(SVENT_SETSURFID, "surf_IDv");
        
        RADIO(Itvent, "Iform")
        {
          ADD(0, "0: Set to 1");
          ADD(1, "1: (Default) Isenthalpic");
          ADD(2, "2: Chemkin");
          ADD(3, "3: Local");
          ADD(4, "4: Isenthalpic with possible gas (mat_ID) flow in");
        }

        SCALAR(ABG_Avent, "Avent")          { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(ABG_Bvent, "Bvent")          { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(KEYWORD1, "vent_title")      { DIMENSION = "DIMENSIONLESS"; }

        SCALAR(Tstart_arr_X, "Tstart")      { DIMENSION = "t"; }
        SCALAR(Tstop_arr_X, "Tstop")        { DIMENSION = "t"; }
        SCALAR(ABG_dPdef, "dPdef")          { DIMENSION = "pressure"; }
        SCALAR(ABG_dtPdef, "dtPdef")        { DIMENSION = "t"; }

        RADIO(I_dtPdef_arr, "IdtPdef")
        {
            ADD(0, "0: Pressure should be over dPdef during a dtPdef cumulative time to activate venting");
            ADD(1, "1: Venting is activated dtPdef after dPdef is reached");
        }

        DATA(ABG_Iport, "fct_IDt");
        DATA(ABG_Iporp, "fct_IDP");
        DATA(ABG_IporA, "fct_IDA");
        SCALAR(Fport, "Fscalet")            { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(Fporp, "FscaleP")            { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(FporA, "FscaleA")            { DIMENSION = "DIMENSIONLESS"; }

        DATA(ABG_Iport1, "fct_IDt'");
        DATA(ABG_Iporp1, "fct_IDP'");
        DATA(ABG_IporA1, "fct_IDA'");
        SCALAR(Fport1, "Fscalet'")          { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(Fporp1, "FscaleP'")          { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(FporA1, "FscaleA'")          { DIMENSION = "DIMENSIONLESS"; }

        if (Itvent == 2)
        {
            DATA(ABG_Iv, "fct_IDV");
            SCALAR(BB1, "FscaleV")          { DIMENSION = "velocity"; }
        }
    }

    // Card 6: Insert for each porous surface
    ARRAY(ABG_Nporsurf, "Porous fabric surfaces")
    {
        DATA(S2_SETSURFID, "surf_IDps");
        RADIO(ITYPE, "Iformps")
        {
          ADD(1,"1: (Default) Bernoulli (Wang & Nefske)");
          ADD(2,"2: Chemkin");
          ADD(3,"3: Graefe");
        }
        RADIO(Iblockage, "Iblockage")
        {
          ADD(0,"0: No");
          ADD(1,"1: Yes");
        }
        SCALAR(KEYWORD2, "surface_title");

        SCALAR(Tstart_arr_Y, "Tstart")      { DIMENSION = "t"; }
        SCALAR(Tstop_arr_Y, "Tstop")        { DIMENSION = "t"; }
        SCALAR(ABG_dPdef_ps, "dPdef")       { DIMENSION = "pressure"; }
        SCALAR(ABG_dtPdef_ps, "dtPdef")     { DIMENSION = "t"; }

        // Chemkin model data
        if (ITYPE == 2)
        {
            DATA(ABG_fct, "fct_IDV");
            SCALAR(BB10, "FscaleV")         { DIMENSION = "velocity"; } 
        }
    }

    // Card 7: Finite volume meshing parameters
    DATA(Iskew, "frame_ID");

    RADIO(Kmesh,"kmesh")
    {
      ADD(1,"1: (Default) Polyhedron airbag volume meshing based on geometric plane cutting");
      ADD(2,"2: Tetrahedron airbag volume meshing using internal and external airbag surfaces");
      ADD(4,"4: Tetrahedron airbag volume meshing using internal and external airbag surfaces with output of the created tetra mesh in Radioss format");
    }

    SCALAR(Tswitch, "Tswitch")              { DIMENSION = "t"; }

    RADIO(Iswitch, "Iswitch")
    {
      ADD(0,"0: (Default) No switch to uniform pressure. The finite volume method is used");
      ADD(1,"1: Switch is performed when either Pswitch or Tswitch criteria is reached");
    }

    SCALAR(Pswitch, "Pswitch")              { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(L1, "L1")                        { DIMENSION = "l"; }
    SCALAR(L2, "L2")                        { DIMENSION = "l"; }
    SCALAR(L3, "L3")                        { DIMENSION = "l"; }

    SCALAR(Nb1, "Nb1")                      { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(Nb2, "Nb2")                      { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(Nb3, "Nb3")                      { DIMENSION = "DIMENSIONLESS"; }

    DATA(GR_BRICK_SET, "grbric_ID");
    DATA(SURF_ID1, "surf_IDin");

    RADIO(Iref, "Iref")
    {
      ADD(0,"0: (Default) Folded airbag is used for meshing");
      ADD(1,"1: Reference airbag is used for meshing");
    }

    // Other FVMBAG parameters
    RADIO(Igmerg, "Igmerg")
    {
      ADD(1,"1: (Default) Folded airbag is used for meshing");
      ADD(2,"2: Reference airbag is used for meshing");
    }

    SCALAR(Cgmerg, "Cgmerg")                { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(Cnmerg, "Cnmerg")                { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(Ptole, "Ptole")                  { DIMENSION = "DIMENSIONLESS"; }

    SCALAR(qa, "qa")                        { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(qb, "qb")                        { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(h, "Hmin")                       { DIMENSION = "l"; }
    SCALAR(Dtsca, "Dtsca")                  { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(Dtmin, "Dtmin")                  { DIMENSION = "DIMENSIONLESS"; }

    RADIO(ILvout, "Ilvout")
    {
      ADD(0,"0: (Default) Limited information about FVM airbag is printed out");
      ADD(1,"1: All possible information about FVM is printed out");
    }
    SCALAR(NLayer, "Nlayer")                { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(Nfacmax, "Nfacmax")              { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(Nppmax, "Nppmax")                { DIMENSION = "DIMENSIONLESS"; }
    RADIO(Vflag, "Ifvani")
    {
      ADD(0,"0: No");
      ADD(1,"1: Yes");
    }
}

// File format
FORMAT(radioss110)
{
    HEADER("/MONVOL/FVMBAG1/%-d", _ID_);
    CARD("%-100s", TITLE);

    // Card 1
    COMMENT("#surf_IDex");
    CARD("%10d", entityiddisplayed);

    COMMENT("#            AscaleT             AscaleP             AscaleS             AscaleA             AscaleD");
    CARD("%20lg%20lg%20lg%20lg%20lg", Scal_T, Scal_P, Scal_S, Scal_A, Scal_D);

    COMMENT("#   mat_ID                                              Pext                  T0     Iequi      Ittf");
    CARD("%10d%30s%20lg%20lg%10d%10d", MAT1, _BLANK_, PEXT, T_Initial, Iequil, I_ttf);

    // Card 2: Number of injectors
    COMMENT("#     Njet");
    CARD("%10d", ABG_Njet);

    CARD_LIST(ABG_Njet)
    {
      COMMENT("#inject_ID   sens_IDsurf_IDinj");
      CARD("%10d%10d%10d", injector_IDs, ABG_Isensor, S1_SETSURFID);

      COMMENT("#fct_IDvel                     Fscalevel");
      CARD("%10d%10s%20lg", ABG_IPt, _BLANK_, Fp1);
    }

    // Card 3: Number of vent holes
    COMMENT("#    Nvent");
    CARD("%10d", ABG_Nvent);

    // Card 4 Define Nvent vent holes (four lines  per vent hole)
    CARD_LIST(ABG_Nvent)
    {
      COMMENT("# surf_IDv     Iform               Avent               Bvent");
      CARD("%10d%10d%20lg%20lg", SVENT_SETSURFID, Itvent, ABG_Avent, ABG_Bvent);

      COMMENT("#             Tstart               Tstop               dPdef              dtPdef             Idtpdef");
      CARD("%20lg%20lg%20lg%20lg%10s%10d", Tstart_arr_X, Tstop_arr_X, ABG_dPdef, ABG_dtPdef, _BLANK_, I_dtPdef_arr);

      COMMENT("#  fct_IDt   fct_IDP   fct_IDA                       Fscalet             FscaleP             FscaleA");
      CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport, ABG_Iporp, ABG_IporA, _BLANK_,Fport, Fporp, FporA);

      COMMENT("# fct_IDt'  fct_IDP'  fct_IDA'                      Fscalet'            FscaleP'            FscaleA'");
      CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport1, ABG_Iporp1, ABG_IporA1, _BLANK_, Fport1, Fporp1, FporA1);

      // Card 5: Chemkin model data
      if (Itvent == 2)
      {
        COMMENT("#  fct_IDV                       FscaleV");
        CARD("%10d%10s%20lg", ABG_Iv, _BLANK_, BB1);
      }
    }

    // Card 6: Finite volume meshing parameters
    COMMENT("#   iframe");
    CARD("%10d", Iskew);

    COMMENT("#                 L1                  L2                  L3");
    CARD("%20lg%20lg%20lg", L1, L2, L3);

    COMMENT("#      Nb1       Nb2       Nb3 grbric_ID                Iref");
    CARD("%10d%10d%10d%10d%10s%10d", Nb1, Nb2, Nb3, GR_BRICK_SET, _BLANK_, Iref);

    // Card 7: Other FVMBAG parameters
    COMMENT("#   Igmerg                        Cgmerg              Cnmerg               Ptole");
    CARD("%10d%10s%20lg%20lg%20lg", Igmerg, _BLANK_, Cgmerg, Cnmerg, Ptole); 

    COMMENT("#                 qa                  qb                Hmin");
    CARD("%20lg%20lg%20lg", qa, qb, h);

    COMMENT("#   Ilvout    Nlayer   Nfacmax    Nppmax    Ifvani");
    CARD("%10d%10d%10d%10d%10d", ILvout, NLayer, Nfacmax, Nppmax, Vflag);
}

FORMAT(radioss120)
{
    HEADER("/MONVOL/FVMBAG1/%-d", _ID_);
    CARD("%-100s", TITLE);

    // Card 1
  COMMENT("#surf_IDex                         Hconv");
    CARD("%10d%10s%20lg", entityiddisplayed, _BLANK_, HEAT_T0);

    COMMENT("#            Ascalet             AscaleP             AscaleS             AscaleA             AscaleD");
    CARD("%20lg%20lg%20lg%20lg%20lg", Scal_T, Scal_P, Scal_S, Scal_A, Scal_D);

    COMMENT("#   mat_ID                                              Pext                  T0     Iequi      Ittf");
    CARD("%10d%30s%20lg%20lg%10d%10d", MAT1, _BLANK_, PEXT, T_Initial, Iequil, I_ttf);

    // Card 2: Number of injectors
    COMMENT("#     Njet");
    CARD("%10d", ABG_Njet);

    CARD_LIST(ABG_Njet)
    {
      COMMENT("#inject_ID   sens_IDsurf_IDinj");
      CARD("%10d%10d%10d", injector_IDs, ABG_Isensor, S1_SETSURFID);

      COMMENT("#fct_IDvel                     Fscalevel");
      CARD("%10d%10s%20lg", ABG_IPt, _BLANK_, Fp1);
    }

    // Card 3: Number of vent holes
    COMMENT("#    Nvent");
    CARD("%10d", ABG_Nvent);

    // Card 4 Define Nvent vent holes (four lines  per vent hole)
    CARD_LIST(ABG_Nvent)
    {
      COMMENT("# surf_IDv     Iform               Avent               Bvent");
      CARD("%10d%10d%20lg%20lg", SVENT_SETSURFID, Itvent, ABG_Avent, ABG_Bvent);

      COMMENT("#             Tstart               Tstop               dPdef              dtPdef             Idtpdef");
      CARD("%20lg%20lg%20lg%20lg%10s%10d", Tstart_arr_X, Tstop_arr_X, ABG_dPdef, ABG_dtPdef, _BLANK_, I_dtPdef_arr);

      COMMENT("#  fct_IDt   fct_IDP   fct_IDA                       Fscalet             FscaleP             FscaleA");
      CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport, ABG_Iporp, ABG_IporA, _BLANK_,Fport, Fporp, FporA);

      COMMENT("# fct_IDt'  fct_IDP'  fct_IDA'                      Fscalet'            FscaleP'            FscaleA'");
      CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport1, ABG_Iporp1, ABG_IporA1, _BLANK_, Fport1, Fporp1, FporA1);

      // Card 5: Chemkin model data
      if (Itvent == 2)
      {
        COMMENT("#  fct_IDV                       FscaleV");
        CARD("%10d%10s%20lg", ABG_Iv, _BLANK_, BB1);
      }
    }

    // Card 6: Finite volume meshing parameters
    COMMENT("#   iframe");
    CARD("%10d", Iskew);

    COMMENT("#                 L1                  L2                  L3");
    CARD("%20lg%20lg%20lg", L1, L2, L3);

    COMMENT("#      Nb1       Nb2       Nb3 grbric_ID surf_IDin      Iref");
    CARD("%10d%10d%10d%10d%10d%10d", Nb1, Nb2, Nb3, GR_BRICK_SET, SURF_ID1, Iref);

    // Card 7: Other FVMBAG parameters
    COMMENT("#   Igmerg                        Cgmerg              Cnmerg               Ptole");
    CARD("%10d%10s%20lg%20lg%20lg", Igmerg, _BLANK_, Cgmerg, Cnmerg, Ptole);

    COMMENT("#                 qa                  qb                Hmin");
    CARD("%20lg%20lg%20lg", qa, qb, h);

    COMMENT("#   Ilvout    Nlayer   Nfacmax    Nppmax    Ifvani");
    CARD("%10d%10d%10d%10d%10d", ILvout, NLayer, Nfacmax, Nppmax, Vflag);
}

FORMAT(radioss140)
{
    HEADER("/MONVOL/FVMBAG1/%-d", _ID_);
    CARD("%-100s", TITLE);

    // Card 1
    COMMENT("#surf_IDex                         Hconv");
    CARD("%10d%10s%20lg", entityiddisplayed, _BLANK_, HEAT_T0);

    COMMENT("#            Ascalet             AscaleP             AscaleS             AscaleA             AscaleD");
    CARD("%20lg%20lg%20lg%20lg%20lg", Scal_T, Scal_P, Scal_S, Scal_A, Scal_D);

    COMMENT("#   mat_ID                                              Pext                  T0     Iequi      Ittf");
    CARD("%10d%30s%20lg%20lg%10d%10d", MAT1, _BLANK_, PEXT, T_Initial, Iequil, I_ttf);

    // Card 2: Number of injectors
    COMMENT("#     Njet");
    CARD("%10d", ABG_Njet);

    CARD_LIST(ABG_Njet)
    {
      COMMENT("#inject_ID   sens_IDsurf_IDinj");
      CARD("%10d%10d%10d", injector_IDs, ABG_Isensor, S1_SETSURFID);

      COMMENT("#fct_IDvel                     Fscalevel");
      CARD("%10d%10s%20lg", ABG_IPt, _BLANK_, Fp1);
    }

    // Card 3 Number of vent holes and porous fabric surfaces
    COMMENT("#    Nvent  Nporsurf");
    CARD("%10d%10d", ABG_Nvent, ABG_Nporsurf);

    // Card 4 Define Nvent vent holes (four lines  per vent hole)
    CARD_LIST(ABG_Nvent)
    {
      COMMENT("# surf_IDv     Iform               Avent               Bvent                              vent_title");
      CARD("%10d%10d%20lg%20lg%20s%20s", SVENT_SETSURFID, Itvent, ABG_Avent, ABG_Bvent, _BLANK_, KEYWORD1);

      COMMENT("#             Tstart               Tstop               dPdef              dtPdef             Idtpdef");
      CARD("%20lg%20lg%20lg%20lg%10s%10d", Tstart_arr_X, Tstop_arr_X, ABG_dPdef, ABG_dtPdef, _BLANK_, I_dtPdef_arr);

      COMMENT("#  fct_IDt   fct_IDP   fct_IDA                       Fscalet             FscaleP             FscaleA");
      CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport, ABG_Iporp, ABG_IporA, _BLANK_,Fport, Fporp, FporA);

      COMMENT("# fct_IDt'  fct_IDP'  fct_IDA'                      Fscalet'            FscaleP'            FscaleA'");
      CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport1, ABG_Iporp1, ABG_IporA1, _BLANK_, Fport1, Fporp1, FporA1);

      // Card 5: Chemkin model data
      if (Itvent == 2)
      {
        COMMENT("#  fct_IDV                       FscaleV");
        CARD("%10d%10s%20lg", ABG_Iv, _BLANK_, BB1);
      }
    }

    // Card 6: Insert for each porous surface
    CARD_LIST(ABG_Nporsurf)
    {
      COMMENT("#surf_IDps   Iformps Iblockage                                                         surface_title");
      CARD("%10d%10d%10d%50s%20s", S2_SETSURFID, ITYPE, Iblockage, _BLANK_, KEYWORD2);
 
      COMMENT("#             Tstart               Tstop               dPdef              dtPdef");
      CARD("%20lg%20lg%20lg%20lg", Tstart_arr_Y, Tstop_arr_Y, ABG_dPdef_ps, ABG_dtPdef_ps);

      // Card 7: Chemkin model data
      if (ITYPE == 2) 
      {
         COMMENT("#  fct_IDv                       Fscalev");
         CARD("%10d%10s%20lg", ABG_fct, _BLANK_, BB10);
      }
    }

    // Card 8: Finite volume meshing parameters
    COMMENT("#   iframe");
    CARD("%10d", Iskew);

    COMMENT("#                 L1                  L2                  L3");
    CARD("%20lg%20lg%20lg", L1, L2, L3);

    COMMENT("#      Nb1       Nb2       Nb3 grbric_ID surf_IDin      Iref");
    CARD("%10d%10d%10d%10d%10d%10d", Nb1, Nb2, Nb3, GR_BRICK_SET, SURF_ID1, Iref);

    // Card 8: Other FVMBAG parameters
    COMMENT("#   Igmerg                        Cgmerg              Cnmerg               Ptole");
    CARD("%10d%10s%20lg%20lg%20lg", Igmerg, _BLANK_, Cgmerg, Cnmerg, Ptole);

    COMMENT("#                 qa                  qb                Hmin");
    CARD("%20lg%20lg%20lg", qa, qb, h);

    COMMENT("#   Ilvout    Nlayer   Nfacmax    Nppmax    Ifvani");
    CARD("%10d%10d%10d%10d%10d", ILvout, NLayer, Nfacmax, Nppmax, Vflag);
}

FORMAT(radioss2017)
{
    HEADER("/MONVOL/FVMBAG1/%-d", _ID_);
    CARD("%-100s", TITLE);

    // Card 1
    COMMENT("#surf_IDex                         Hconv");
    CARD("%10d%10s%20lg", entityiddisplayed, _BLANK_, HEAT_T0);

    COMMENT("#            Ascalet             AscaleP             AscaleS             AscaleA             AscaleD");
    CARD("%20lg%20lg%20lg%20lg%20lg", Scal_T, Scal_P, Scal_S, Scal_A, Scal_D);

    COMMENT("#   mat_ID                                              Pext                  T0    Iequil      Ittf");
    CARD("%10d%30s%20lg%20lg%10d%10d", MAT1, _BLANK_, PEXT, T_Initial, Iequil, I_ttf);

    // Card 2: Number of injectors
    COMMENT("#     Njet");
    CARD("%10d", ABG_Njet);

    CARD_LIST(ABG_Njet)
    {
      COMMENT("#inject_ID   sens_IDsurf_IDinj");
      CARD("%10d%10d%10d", injector_IDs, ABG_Isensor, S1_SETSURFID);

      COMMENT("#fct_IDvel                     Fscalevel");
      CARD("%10d%10s%20lg", ABG_IPt, _BLANK_, Fp1);
    }

    // Card 3 Number of vent holes and porous fabric surfaces
    COMMENT("#    Nvent  Nporsurf");
    CARD("%10d%10d", ABG_Nvent, ABG_Nporsurf);

    // Card 4 Define Nvent vent holes (four lines  per vent hole)
    CARD_LIST(ABG_Nvent)
    {
      COMMENT("# surf_IDv     Iform               Avent               Bvent                              vent_title");
      CARD("%10d%10d%20lg%20lg%20s%20s", SVENT_SETSURFID, Itvent, ABG_Avent, ABG_Bvent, _BLANK_, KEYWORD1);

      COMMENT("#             Tstart               Tstop               dPdef              dtPdef             Idtpdef");
      CARD("%20lg%20lg%20lg%20lg%10s%10d", Tstart_arr_X, Tstop_arr_X, ABG_dPdef, ABG_dtPdef, _BLANK_, I_dtPdef_arr);

      COMMENT("#  fct_IDt   fct_IDP   fct_IDA                       Fscalet             FscaleP             FscaleA");
      CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport, ABG_Iporp, ABG_IporA, _BLANK_,Fport, Fporp, FporA);

      COMMENT("# fct_IDt'  fct_IDP'  fct_IDA'                      Fscalet'            FscaleP'            FscaleA'");
      CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport1, ABG_Iporp1, ABG_IporA1, _BLANK_, Fport1, Fporp1, FporA1);

      // Card 5: Chemkin model data
      if (Itvent == 2)
      {
        COMMENT("#  fct_IDV                       FscaleV");
        CARD("%10d%10s%20lg", ABG_Iv, _BLANK_, BB1);
      }
    }

    // Card 6: Insert for each porous surface
    CARD_LIST(ABG_Nporsurf)
    {
      COMMENT("#surf_IDps   Iformps Iblockage                                                         surface_title");
      CARD("%10d%10d%10d%50s%20s", S2_SETSURFID, ITYPE, Iblockage, _BLANK_, KEYWORD2);
 
      COMMENT("#             Tstart               Tstop               dPdef              dtPdef");
      CARD("%20lg%20lg%20lg%20lg", Tstart_arr_Y, Tstop_arr_Y, ABG_dPdef_ps, ABG_dtPdef_ps);

      // Card 7: Chemkin model data
      if (ITYPE == 2) 
      {
         COMMENT("#  fct_IDv                       Fscalev");
         CARD("%10d%10s%20lg", ABG_fct, _BLANK_, BB10);
      }
    }

    // Card 8: Finite volume meshing parameters
    COMMENT("# frame_ID     kmesh             Tswitch");
    CARD("%10d%10d%20lg", Iskew, Kmesh, Tswitch);

    COMMENT("#                 L1                  L2                  L3");
    CARD("%20lg%20lg%20lg", L1, L2, L3);

    COMMENT("#      Nb1       Nb2       Nb3 grbric_ID surf_IDin      Iref");
    CARD("%10d%10d%10d%10d%10d%10d", Nb1, Nb2, Nb3, GR_BRICK_SET, SURF_ID1, Iref);

    // Card 8: Other FVMBAG parameters
    COMMENT("#   Igmerg                        Cgmerg              Cnmerg               Ptole");
    CARD("%10d%10s%20lg%20lg%20lg", Igmerg, _BLANK_, Cgmerg, Cnmerg, Ptole);

    COMMENT("#                 qa                  qb                Hmin");
    CARD("%20lg%20lg%20lg", qa, qb, h);

    COMMENT("#   Ilvout    Nlayer   Nfacmax    Nppmax    Ifvani");
    CARD("%10d%10d%10d%10d%10d", ILvout, NLayer, Nfacmax, Nppmax, Vflag);
}

FORMAT(radioss2019)
{
    HEADER("/MONVOL/FVMBAG1/%-d", _ID_);
    CARD("%-100s", TITLE);

    // Card 1
    COMMENT("#surf_IDex                         Hconv");
    CARD("%10d%10s%20lg", entityiddisplayed, _BLANK_, HEAT_T0);

    COMMENT("#            Ascalet             AscaleP             AscaleS             AscaleA             AscaleD");
    CARD("%20lg%20lg%20lg%20lg%20lg", Scal_T, Scal_P, Scal_S, Scal_A, Scal_D);

    COMMENT("#   mat_ID                                              Pext                  T0    Iequil      Ittf");
    CARD("%10d%30s%20lg%20lg%10d%10d", MAT1, _BLANK_, PEXT, T_Initial, Iequil, I_ttf);

    // Card 2: Number of injectors
    COMMENT("#     Njet");
    CARD("%10d", ABG_Njet);

    CARD_LIST(ABG_Njet)
    {
      COMMENT("#inject_ID   sens_IDsurf_IDinj");
      CARD("%10d%10d%10d", injector_IDs, ABG_Isensor, S1_SETSURFID);

      COMMENT("#fct_IDvel                     Fscalevel");
      CARD("%10d%10s%20lg", ABG_IPt, _BLANK_, Fp1);
    }

    // Card 3 Number of vent holes and porous fabric surfaces
    COMMENT("#    Nvent  Nporsurf");
    CARD("%10d%10d", ABG_Nvent, ABG_Nporsurf);

    // Card 4 Define Nvent vent holes (four lines  per vent hole)
    CARD_LIST(ABG_Nvent)
    {
      COMMENT("# surf_IDv     Iform               Avent               Bvent                              vent_title");
      CARD("%10d%10d%20lg%20lg%20s%20s", SVENT_SETSURFID, Itvent, ABG_Avent, ABG_Bvent, _BLANK_, KEYWORD1);

      COMMENT("#             Tstart               Tstop               dPdef              dtPdef             Idtpdef");
      CARD("%20lg%20lg%20lg%20lg%10s%10d", Tstart_arr_X, Tstop_arr_X, ABG_dPdef, ABG_dtPdef, _BLANK_, I_dtPdef_arr);

      COMMENT("#  fct_IDt   fct_IDP   fct_IDA                       Fscalet             FscaleP             FscaleA");
      CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport, ABG_Iporp, ABG_IporA, _BLANK_,Fport, Fporp, FporA);

      COMMENT("# fct_IDt'  fct_IDP'  fct_IDA'                      Fscalet'            FscaleP'            FscaleA'");
      CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport1, ABG_Iporp1, ABG_IporA1, _BLANK_, Fport1, Fporp1, FporA1);

      // Card 5: Chemkin model data
      if (Itvent == 2)
      {
        COMMENT("#  fct_IDV                       FscaleV");
        CARD("%10d%10s%20lg", ABG_Iv, _BLANK_, BB1);
      }
    }

    // Card 6: Insert for each porous surface
    CARD_LIST(ABG_Nporsurf)
    {
      COMMENT("#surf_IDps   Iformps Iblockage                                                         surface_title");
      CARD("%10d%10d%10d%50s%20s", S2_SETSURFID, ITYPE, Iblockage, _BLANK_, KEYWORD2);

      COMMENT("#             Tstart               Tstop               dPdef              dtPdef             Idtpdef");
      CARD("%20lg%20lg%20lg%20lg%10s%10d", Tstart_arr_Y, Tstop_arr_Y, ABG_dPdef_ps, ABG_dtPdef_ps, _BLANK_, I_dtPdef_arr_ps);

      // Card 7: Chemkin model data
      if (ITYPE == 2) 
      {
         COMMENT("#  fct_IDv                       Fscalev");
         CARD("%10d%10s%20lg", ABG_fct, _BLANK_, BB10);
      }
    }

    // Card 8: Finite volume meshing parameters
    COMMENT("# frame_ID     kmesh             Tswitch             Iswitch             Pswitch");
    CARD("%10d%10d%20lg%10s%10d%20lg", Iskew, Kmesh, Tswitch, _BLANK_, Iswitch, Pswitch);

    COMMENT("#                 L1                  L2                  L3");
    CARD("%20lg%20lg%20lg", L1, L2, L3);

    COMMENT("#      Nb1       Nb2       Nb3 grbric_ID surf_IDin      Iref");
    CARD("%10d%10d%10d%10d%10d%10d", Nb1, Nb2, Nb3, GR_BRICK_SET, SURF_ID1, Iref);

    // Card 8: Other FVMBAG parameters
    COMMENT("#   Igmerg                        Cgmerg              Cnmerg               Ptole");
    CARD("%10d%10s%20lg%20lg%20lg", Igmerg, _BLANK_, Cgmerg, Cnmerg, Ptole);

    COMMENT("#                 qa                  qb                Hmin               Dtsca               Dtmin");
    CARD("%20lg%20lg%20lg%20lg%20lg", qa, qb, h, Dtsca, Dtmin);

    COMMENT("#   Ilvout    Nlayer   Nfacmax    Nppmax    Ifvani");
    CARD("%10d%10d%10d%10d%10d", ILvout, NLayer, Nfacmax, Nppmax, Vflag);
}