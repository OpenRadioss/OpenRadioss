//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Elementary boundary condition Setup File (/EBCS/VEL)
// 

ATTRIBUTES(COMMON) {
  // Support
  entityid           = VALUE(SETS, "Surface identifier")  { SUBTYPES = (/SETS/SURF_IDPOOL); }
  // Speed of sound
  rad_ebcs_c         = VALUE(FLOAT, "Speed of sound");
  // Velocity
  rad_fct_vx         = VALUE(FUNCT, "Function fVX(t) identifier for X velocity");
  rad_ebcs_fscale_vx = VALUE(FLOAT, "X velocity scale factor");
  rad_fct_vy         = VALUE(FUNCT, "Function fVY(t) identifier for Y velocity");
  rad_ebcs_fscale_vy = VALUE(FLOAT, "Y velocity scale factor");
  rad_fct_vz         = VALUE(FUNCT, "Function fVZ(t) identifier for Z velocity");
  rad_ebcs_fscale_vz = VALUE(FLOAT, "Z velocity scale factor");
  // Pressure
  rad_fct_pr         = VALUE(FUNCT, "Function fpr(t) identifier for pressure");
  rad_ebcs_fscale_pr = VALUE(FLOAT, "Pressure scale factor");
  // Density
  rad_fct_rho        = VALUE(FUNCT, "Function frho(t) identifier for density");
  rad_ebcs_fscale_rho= VALUE(FLOAT, "Density scale factory");
  // Energy
  rad_fct_en         = VALUE(FUNCT, "Function fen(t) identifier for energy");
  rad_ebcs_fscale_en = VALUE(FLOAT, "Energy scale factor");
  // Other values
  rad_ebcs_lc        = VALUE(FLOAT, "Characteristic length");
  rad_ebcs_r1        = VALUE(FLOAT, "Linear resistance");
  rad_ebcs_r2        = VALUE(FLOAT, "Quadratic resistance");
  displayname     = VALUE(STRING, "Elementary boundary condition title", "TITLE");
}

DEFAULTS(COMMON)
{
  rad_ebcs_c          = 0.0;
  rad_ebcs_fscale_vx  = 0.0;
  rad_ebcs_fscale_vy  = 0.0;
  rad_ebcs_fscale_vz  = 0.0;
  rad_ebcs_fscale_pr  = 0.0;
  rad_ebcs_fscale_rho = 0.0;
  rad_ebcs_fscale_en  = 0.0;
  rad_ebcs_lc         = 0.0;
  rad_ebcs_r1         = 0.0;
  rad_ebcs_r2         = 0.0;
}

GUI(COMMON) {
  DATA(entityid, "surf_ID");
/*
 mandatory:
  SCALAR(rad_ebcs_c)  { DIMENSION="velocity";         }
  //
 optional:
  FUNCTION(rad_fct_vx) {
    X_TITLE="Time";     X_DIMENSION="t";
    Y_TITLE="Velocity"; Y_DIMENSION="velocity"; Y_SCALING(rad_ebcs_fscale_vx); 
  }  
  FUNCTION(rad_fct_vy) {
    X_TITLE="Time";     X_DIMENSION="t";
    Y_TITLE="Velocity"; Y_DIMENSION="velocity"; Y_SCALING(rad_ebcs_fscale_vy); 
  }  
  FUNCTION(rad_fct_vz) {
    X_TITLE="Time";     X_DIMENSION="t";
    Y_TITLE="Velocity"; Y_DIMENSION="velocity"; Y_SCALING(rad_ebcs_fscale_vz); 
  }  
  FUNCTION(rad_fct_rho) {
    X_TITLE="Time";    X_DIMENSION="t";
    Y_TITLE="Density"; Y_DIMENSION="density"; Y_SCALING(rad_ebcs_fscale_rho); 
  }  
  FUNCTION(rad_fct_en) {
    X_TITLE="Time";   X_DIMENSION="t";
    Y_TITLE="Energy"; Y_DIMENSION="energy"; Y_SCALING(rad_ebcs_fscale_en); 
  }  
  //
 optional:
  SCALAR(rad_ebcs_fscale_vx,"Pressure")    { DIMENSION="velocity";        } 
  SCALAR(rad_ebcs_fscale_vy,"Pressure")    { DIMENSION="velocity";        } 
  SCALAR(rad_ebcs_fscale_vz,"Pressure")    { DIMENSION="velocity";        } 
  SCALAR(rad_ebcs_fscale_rho,"Density")    { DIMENSION="density"; }
  SCALAR(rad_ebcs_fscale_en,"Energy")    { DIMENSION="energy";       } 
  //
 optional:
  SCALAR(rad_ebcs_lc) { DIMENSION="l";        }
  SCALAR(rad_ebcs_r1) { DIMENSION="DIMENSIONLESS"; }
  SCALAR(rad_ebcs_r2) { DIMENSION="DIMENSIONLESS"; }
  //
 mandatory:
  graphical SUPPORT("Surface") {
    OBJECTS=(SEGMENT,SHELL,SH3N,/COMPONENT/SHELL);
    ADD(entityid);
  }
  */
}

FORMAT(radioss51) {
  HEADER("/EBCS/VEL/%d",_ID_);
  CARD("%-100s", displayname);
  COMMENT("#  surf_ID");
  CARD("%10d",entityid);
  //
  COMMENT("#                  C");
  CARD("%20lg",rad_ebcs_c);
  //
  COMMENT("# fct_IDvx            Fscalevx");
  CARD("%10d%20lg",rad_fct_vx,rad_ebcs_fscale_vx);
  //
  COMMENT("# fct_IDvy            Fscalevy");
  CARD("%10d%20lg",rad_fct_vy,rad_ebcs_fscale_vy);
  //
  COMMENT("# fct_IDvz            Fscalevz");
  CARD("%10d%20lg",rad_fct_vz,rad_ebcs_fscale_vz);
  //
  COMMENT("#fct_IDrho           Fscalerho");
  CARD("%10d%20lg",rad_fct_rho,rad_ebcs_fscale_rho);
  //
  COMMENT("# fct_IDen            Fscaleen");
  CARD("%10d%20lg",rad_fct_en,rad_ebcs_fscale_en);
  //
  COMMENT("#                 lc                  r1                  r2");
  CARD("%20lg%20lg%20lg",rad_ebcs_lc,rad_ebcs_r1,rad_ebcs_r2);  
}
