//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Fixed displacement Setup File
// 

ATTRIBUTES(COMMON) {
  // Data
  DIR_RADIO             = VALUE(INT,   "Direction"); 
  rad_dir               = VALUE(STRING, "Direction");
  curveid               = VALUE(FUNCT, "Time function");
  collector             = VALUE(LOADCOL, "SID");
  rad_system_input_type = VALUE(INT, "Input system type Skew/Frame");
  rad_sensor_id         = VALUE(SENSOR,"Sensor");
  inputsystem           = VALUE(SYSTEM,  "Skew Identifier/Frame Identifier");
  xscale                = VALUE(FLOAT, "X-Scale factor"); 
  magnitude             = VALUE(FLOAT, "Y-Scale factor"); 
  rad_tstart            = VALUE(FLOAT, "Start time");
  rad_tstop             = VALUE(FLOAT, "Stop time");
  // Support
  entityid              = VALUE(SETS, "Node group on which the imposed displacement is applied") { SUBTYPES = (/SETS/GRNOD); }
  NB_NODES              = SIZE("Number of additional nodes");
  NODE                  = ARRAY[NB_NODES](NODE,"Additional nodes"); 
  FRAME                 = VALUE(SYSTEM,  "Frame");
  displayname        = VALUE(STRING, "Title");
}

DEFINITIONS(COMMON) {
  //MAINS=(NODE);
}

PARAMETERS(PARAMETERS) {
  magnitude  = INPUT_SCALAR(magnitude,"Scale factor");   
  rad_tstart = INPUT_SCALAR(rad_tstart,"Start time");   
  rad_tstop  = INPUT_SCALAR(rad_tstop,"Stop time");   
}

DEFAULTS(COMMON) {
  DIR_RADIO     = 1;
  xscale        = 1.;
  magnitude     = 1.;
}

GUI(COMMON) {
 optional:
  SCALAR(rad_tstart) { DIMENSION="t"; }
  SCALAR(rad_tstop)  { DIMENSION="t"; }
  //
 mandatory:
  graphical RADIO(rad_dir) {
     ADD("X"  ,  "X  (translation)");
     ADD("Y"  ,  "Y  (translation)");
     ADD("Z"  ,  "Z  (translation)");
     ADD("XX" ,  "XX (rotation)");
     ADD("YY" ,  "YY (rotation)");
     ADD("ZZ" ,  "ZZ (rotation)");
  }
  //
 mandatory:
  graphical FUNCTION(curveid) {
    X_TITLE     = "Time"; Y_TITLE     = "Displacement";
    X_DIMENSION="t"; Y_DIMENSION="l";
    X_SCALING(xscale);    Y_SCALING(magnitude); 
    X_CAN_BE_NEGATIVE = FALSE;
  }
  //
 optional:
  graphical RADIO(rad_system_input_type) {
    ADD(1,"Skew System");
    ADD(2,"Frame System");
  }
  //graphical TOOL(inputsystem) {ORIGIN=UNALLOWED;}
  TOOL(rad_sensor_id);
  
  /*
  mandatory:
  graphical SUPPORT("Support") {
    OBJECTS=(NODE,ELEMENTS,COMPONENT);
    ADD(entityid,"Node Group");
    ADD(NODE   ,"Additional nodes");
  }*/
}

FORMAT(radioss41) {
  HEADER("/IMPDISP/%-d",_ID_);
  CARD("%s", displayname);
  COMMENT("# Ifunct     DIR   Iskew Isensor Gnod_id");
  if(rad_system_input_type == 1)
  {
  CARD("%8d%8s%8d%8d%8d",curveid,rad_dir,inputsystem,rad_sensor_id,entityid);
  }
  else if(rad_system_input_type == 2)
  {
  CARD("%8d%8s        %8d%8d",curveid,rad_dir,rad_sensor_id,entityid);
  }
  /*if(DIR=="X")
  {
     ASSIGN(DIR_RADIO, 1);  
  }
  else if(DIR=="Y")
  {
     ASSIGN(DIR_RADIO, 2);  
  }
  else if(DIR=="Z")
  {
     ASSIGN(DIR_RADIO, 3);  
  }
*/  
  //
  COMMENT("#          Scale          Tstart           Tstop");
  CARD("%16lg%16lg%16lg",xscale,rad_tstart,rad_tstop);
  //
  //COMMENT("#  Node1   Node2   Node3   Node4   Node5   Node6   Node7   Node8   Node9  Node10");
  //FREE_CELL_LIST(NB_NODES,"%8d",NODE,80) ;
  //}
}

FORMAT(radioss51) {
  HEADER("/IMPDISP/%-d",_ID_);
  CARD("%s", displayname);
  COMMENT("#   Ifunct       DIR     Iskew   Isensor   Gnod_id");
  if(rad_system_input_type == 1)
  {
    CARD("%10d%10s%10d%10d%10d",curveid,rad_dir,inputsystem,rad_sensor_id,entityid);
  }
  else if(rad_system_input_type == 2)
  {
    CARD("%10d%10s          %10d%10d",curveid,rad_dir,rad_sensor_id,entityid);
  }
  /*if(DIR=="X")
  {
     ASSIGN(DIR_RADIO, 1);  
  }
  else if(DIR=="Y")
  {
     ASSIGN(DIR_RADIO, 2);  
  }
  else if(DIR=="Z")
  {
     ASSIGN(DIR_RADIO, 3);  
  }
  else if(DIR=="XX")
  {
     ASSIGN(DIR_RADIO, 11);  
  }
  else if(DIR=="YY")
  {
     ASSIGN(DIR_RADIO, 22);  
  }  
  else if(DIR=="ZZ")
  {
     ASSIGN(DIR_RADIO, 33);  
  }  
*/  
  //
  COMMENT("#            Scale_x             Scale_y              Tstart               Tstop");
  CARD("%20lg%20lg%20lg%20lg",xscale,magnitude,rad_tstart,rad_tstop);
  //
  //FREE_OBJECT_LIST("%10d",NODE) {
  //  COMMENT="#  Node1   Node2   Node3   Node4   Node5   Node6   Node7   Node8   Node9  Node10";
  //}
}