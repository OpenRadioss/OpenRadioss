//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Property Solid Type14
ATTRIBUTES(COMMON)
{
    ISOLID                                  = VALUE(INT,  " Solid Elements Formulation Flag");
    Ismstr                                  = VALUE(INT,  " Small Strain Formulation Flag");
    Icpre                                   = VALUE(INT,  " Constant Pressure Formulation Flag");
    Inpts_R                                 = VALUE(INT,  " Number of Integration Points in r Direction");
    Inpts_S                                 = VALUE(INT,  " Number of Integration Points in s Direction");
    Inpts_T                                 = VALUE(INT,  " Number of Integration Points in t Direction");
    I_rot                                   = VALUE(INT,  " Formulation flag Used by Four Nodes Tetras");
    Iframe                                  = VALUE(INT,  " Element Coordinate System Formulation Flag");
    dn                                      = VALUE(FLOAT,  " Numerical Damping for Stabilization");
    qa                                      = VALUE(FLOAT,  " Quadratic Bulk Viscosity");
    qb                                      = VALUE(FLOAT,  " Linear Bulk Viscosity");
    h                                       = VALUE(FLOAT,  " Hourglass Viscosity Coefficient");
    deltaT_min                              = VALUE(FLOAT,  " Minimum Time Step");
    Istrain                                 = VALUE(INT,  " Compute Strain Post-Processing Flag");   
    qa_l                                    = VALUE(FLOAT,  " Quadratic Bulk Viscosity");
    qb_l                                    = VALUE(FLOAT,  " Linear Bulk Viscosity");
    h_l                                     = VALUE(FLOAT,  " Hourglass Viscosity Coefficient");   
    Iplas                                   = VALUE(INT, "Flag for solid stress plasticity");
    Icstr                                   = VALUE(INT, "Flag for constant stress formulation"); 
    
    //Attributes for HM usage
    KEYWORD_STR                             = VALUE(STRING, " Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  " Entity_Comments");
    CommentEnumField                        = VALUE(INT,  " User Comments");
    Prop_Name_OR_Type                       = VALUE(INT, "");
    IO_FLAG                                 = VALUE(INT, "");
    SolidLiquid_Opt                         = VALUE(INT,  " Property Option");   
    Element_closure_opt                     = VALUE(INT,  " ALE Element closure");
    SUBGRP_ALE_CLOSE                        = VALUE(SUBOBJECT,"");   
    TYPE_NO                                 = VALUE(STRING, "");
    TITLE                                   = VALUE(STRING, "");
    NBP                                     = VALUE(INT,   "Number of integration points");
    Inpts_R_status                          = VALUE(BOOL, "");
    Inpts_S_status                          = VALUE(BOOL, "");
    Inpts_T_status                          = VALUE(BOOL, "");
    Inpts_NBP_status                        = VALUE(BOOL, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;
    ISOLID                                  = 8003;
    I_rot                                   = 4616;
    Icpre                                   = 5396;
    Iframe                                  = 4002;
    Inpts_R                                 = 4151;
    Inpts_S                                 = 4152;
    Inpts_T                                 = 4153;
    Ismstr                                  = 5152;
    Istrain                                 = 8009;
    NUM_COMMENTS                            = 5110;
    SolidLiquid_Opt                         = 4327;
    deltaT_min                              = 4154;
    dn                                      = 5363;
    h                                       = 8031;
    h_l                                     = 4330;
    qa                                      = 8029;
    qa_l                                    = 4328;
    qb                                      = 8030;
    qb_l                                    = 4329;
    Iplas                                   = 8008;
    Icstr                                   = 5397;
    Prop_Name_OR_Type                       = 4537;
    TITLE                                   =   -1;
    TYPE_NO                                 =   -1;
    IO_FLAG                                 =   -1;
    Element_closure_opt                     = 4350;
    SUBGRP_ALE_CLOSE                        =   -1;
    NBP                                     =   -1;
    Inpts_R_status                          =   -1;
    Inpts_S_status                          =   -1;
    Inpts_T_status                          =   -1;
    Inpts_NBP_status                        =   -1;
}

CHECK(COMMON)
{
    Inpts_S                                 >=    2;
    Inpts_S                                 <=    9;
    Inpts_R                                 >=    2;
    Inpts_R                                 <=    9;
    Inpts_T                                 >=    0;
    Inpts_T                                 <=    9;
    Inpts_R                                 >=    2;
    Inpts_R                                 <=    3;
    Inpts_T                                 >=    2;
    Inpts_T                                 <=    3;
    h                                       >= 0.00;
    h                                       <= 0.15;
    h_l                                     >= 0.00;
    h_l                                     <= 0.15;
}

DEFAULTS(COMMON)
{
    Inpts_R                                 =    2;
    Inpts_S                                 =    2;
    Inpts_T                                 =    2;
    deltaT_min                              =  0.0;
    dn                                      =  0.1;
    h                                       = 0.10;
    h_l                                     = 0.10;
    qa                                      = 1.10;
    qa_l                                    =  0.0;
    qb                                      = 0.05;
    qb_l                                    = 0.00;
}

DRAWABLES(COMMON) {
 private:
  DEFAULT_LINEAR_BULK_VISCOSITY  = EVAL(0.05);
  STANDARD_LINEAR_BULK_VISCOSITY = SCALAR(qb);
  LINEAR_BULK_VISCOSITY          = WHILE_ZERO(STANDARD_LINEAR_BULK_VISCOSITY,DEFAULT_LINEAR_BULK_VISCOSITY);
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "1:Hide in Menu/Export");
        ADD(2, "2:Show in Menu/Export");
        ADD(3, "3:Do Not Export");
    }
    if( CommentEnumField == 2)
    {
       SIZE(NUM_COMMENTS);
       ARRAY(NUM_COMMENTS,"")
       {
          SCALAR(COMMENTS);
       }
    }
    RADIO(SolidLiquid_Opt)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1,"SOLID");
        ADD(2,"FLUID");
    }
    if(Prop_Name_OR_Type==2)
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TYPE14/");
    }
    else if(SolidLiquid_Opt==1)
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/SOLID/");
    }
    else 
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/FLUID");
    }
    if(SolidLiquid_Opt==1)
    {
        RADIO(ISOLID)
        {
            ADD(0,"0:Default, Set to Value Defined in /DEF_SOLID");
            ADD(1,"1:Standard 8-Node Solid Element, One Integration Point. Viscous Hourglass Formulation with Orthogonal and Rigid Deformation Modes Compensation (Belytschko)");
            ADD(2,"2:Standard 8-Node Solid Element, One Integration Point. Viscous Hourglass Formulation without Orthogonality (Hallquist)");
            ADD(12,"12:Standard 8-Node Solid, Full Integration (No Hourglass)");
            ADD(14,"14:HA8 Locking-Free 8-Node Solid Element, Co-rotational, Full Integration, Variable Number of Gauss Points");
            ADD(16,"16:Quadratic 20-Node Solid, Full Integration, Variable Number of Gauss Points");
            ADD(17,"17:H8C Standard 8-Nodes Compatible Solid Full Integration Formulation 2*2*2 Integration Points, No Hourglass");
            ADD(24,"24:HEPH 8-Node Solid Element. Co-rotational, Under-Integrated (1 Gauss point) with Physical Stabilization");
        }
        RADIO(Ismstr)
        {
            ADD(0,"0:Default, Set to Value Defined in /DEF_SOLID");
            ADD(1,"1:Small Strain From Time=0");
            ADD(2,"2:Full Geometric Nonlinearities with Possible Small Strain Formulation in RADIOSS Engine(/DT/BRICK/CST)");
            ADD(3,"3:Simplified Small Strain Formulation From Time=0 (Non-Objective Formulation)");
            ADD(4,"4:Full Geometric Nonlinearities(/DT/BRICK/CST has No Effect)");
            ADD(10,"10:Lagrange Type Total Strain");
        }
        RADIO(Icpre)
        {
            ADD(0,"0:Default Value");
            ADD(1,"1:Reduced Pressure Integration for Incompressible Material (symbol_v1=0.5)");
            ADD(2,"2:Variable State Between Icpre=3 and Icpre=1 in Function of Plasticity State for Elasto-Plastic Behavior");
            ADD(3,"3:No Reduced Pressure Integration for Compressible Materials, Like Foam");
        }
    }
    if(SolidLiquid_Opt==1 && (ISOLID==14 || ISOLID==16))
    {
        SCALAR(Inpts_R);
        SCALAR(Inpts_S);
        SCALAR(Inpts_T);
    }
    if(SolidLiquid_Opt==1)
    {
        RADIO(I_rot)
        {
            ADD(0,"0:Linear Tetra Four Formulation with One Integration Point");
            ADD(1,"1:Quadratic Tetra Four Formulation with Six DOF's Per Node and Four Integration Points");
        }
    }
    if(SolidLiquid_Opt==1 && (ISOLID==1 || ISOLID==2 || ISOLID==12 || ISOLID==17 ))
    {
        RADIO(Iframe)
        {
            ADD(0,"0:Default, Set to Value Defined in /DEF_SOLID");
            ADD(1,"1:Non Co-rotational Formulation");
            ADD(2,"2:Co-rotational Formulation Needed for Models with Large Rotations");
        }
    }
    if(SolidLiquid_Opt==1 && (ISOLID==24))
    {
        SCALAR(dn);
    }
    if(SolidLiquid_Opt==1)
    {
        SCALAR(qa);
        SCALAR(qb);
        SCALAR(h);
        SCALAR(deltaT_min) { DIMENSION="t";          }
        RADIO(Istrain)
        {
            ADD(0,"0:Default, Set to Value Defined in /DEF_SOLID");
            ADD(1,"1:Yes");
            ADD(2,"2:No");
        }
    }
    else if(SolidLiquid_Opt==2)
    {
        SCALAR(qa_l);
        SCALAR(qb_l);
        SCALAR(h_l);
        FLAG(Element_closure_opt);
    }
    if(SolidLiquid_Opt==2 && Element_closure_opt!=0)
    {
        SUBOBJECT(SUBGRP_ALE_CLOSE) {SUBTYPES = (/SUBOBJECT/ALE);}
    }
}

//File format for Radioss 100
FORMAT(radioss100)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
            ASSIGN(SolidLiquid_Opt,1);
        }
        else if(TYPE_NO == "FLUI")
        {
            ASSIGN(SolidLiquid_Opt,2);
        }
        else
        {
            ASSIGN(SolidLiquid_Opt,1);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE14/%d",_ID_);
    }
    else if(IO_FLAG == 0 && SolidLiquid_Opt == 1)
    {
        HEADER("/PROP/SOLID/%d",_ID_);
    }
    else if(SolidLiquid_Opt == 2)
    {
        HEADER("/PROP/FLUID/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    if(SolidLiquid_Opt==1)
    {
        ASSIGN(Inpts_R_status,_GET_DISPLAY_STATUS(Inpts_R),EXPORT);
        ASSIGN(Inpts_S_status,_GET_DISPLAY_STATUS(Inpts_S),EXPORT);
        ASSIGN(Inpts_T_status,_GET_DISPLAY_STATUS(Inpts_T),EXPORT);
        if(IO_FLAG == 0 && (Inpts_T_status == 1 || Inpts_S_status == 1 || Inpts_R_status == 1)) {
            ASSIGN(NBP,Inpts_R*100,EXPORT);
            ASSIGN(NBP,NBP +(Inpts_S*10),EXPORT);
            ASSIGN(NBP,NBP + Inpts_T,EXPORT);
    }
//
        COMMENT("#   Isolid    Ismstr               Icpre               Inpts      Irot    Iframe                  Dn");
        CARD("%10d%10d          %10d          %10d%10d%10d%20lg",ISOLID,Ismstr,Icpre,NBP,I_rot,Iframe,dn);
//
        ASSIGN(Inpts_NBP_status,_GET_DISPLAY_STATUS(NBP),IMPORT);
        if(IO_FLAG == 1  && Inpts_NBP_status != 0) {
            ASSIGN(Inpts_R,NBP / 100, IMPORT);
            ASSIGN(Inpts_T,NBP - (Inpts_R*100), IMPORT);
            ASSIGN(Inpts_S,Inpts_T / 10, IMPORT);
            ASSIGN(Inpts_T,Inpts_T - (Inpts_S*10), IMPORT);
    }
//
        COMMENT("#                 qa                  qb                   h");
        CARD("%20lg%20lg%20lg",qa,qb,h);
//
        COMMENT("#         deltaT_min   Istrain");
        CARD("%20lg%10d",deltaT_min,Istrain);
    }
    if(SolidLiquid_Opt==2)
    {
        COMMENT("#                                            BLANK FORMAT");
        BLANK;
        COMMENT("#                 qa                  qb                   h");
        CARD("%20lg%20lg%20lg",qa_l,qb_l,h_l);
    }
    if(Element_closure_opt==1)
    {
        SUBOBJECTS(SUBGRP_ALE_CLOSE,/SUBOBJECT/ALE_CLOSE);
    }
}

//File format for Radioss 51
FORMAT(radioss51)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
            ASSIGN(SolidLiquid_Opt,1);
        }
        else if(TYPE_NO == "FLUI")
        {
            ASSIGN(SolidLiquid_Opt,2);
        }
        else
        {
            ASSIGN(SolidLiquid_Opt,1);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE14/%d",_ID_);
    }
    else if(IO_FLAG == 0 &&  SolidLiquid_Opt == 1)
    {
        HEADER("/PROP/SOLID/%d",_ID_);
    }
    else if(SolidLiquid_Opt == 2)
    {
        HEADER("/PROP/FLUID/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    if(SolidLiquid_Opt==1)
    {
        ASSIGN(Inpts_R_status,_GET_DISPLAY_STATUS(Inpts_R),EXPORT);
        ASSIGN(Inpts_S_status,_GET_DISPLAY_STATUS(Inpts_S),EXPORT);
        ASSIGN(Inpts_T_status,_GET_DISPLAY_STATUS(Inpts_T),EXPORT);
        if(IO_FLAG == 0 && (Inpts_T_status == 1 || Inpts_S_status == 1 || Inpts_R_status == 1)) {
            ASSIGN(NBP,Inpts_R*100,EXPORT);
            ASSIGN(NBP,NBP +(Inpts_S*10),EXPORT);
            ASSIGN(NBP,NBP + Inpts_T,EXPORT);
        }
        COMMENT("#   Isolid    Ismstr               Icpre               Inpts              Iframe                  Dn");
        CARD("%10d%10d          %10d          %10d          %10d%20lg",ISOLID,Ismstr,Icpre,NBP,Iframe,dn); 
//
        ASSIGN(Inpts_NBP_status,_GET_DISPLAY_STATUS(NBP),IMPORT);
        if(IO_FLAG == 1  && Inpts_NBP_status != 0) {
            ASSIGN(Inpts_R,NBP / 100, IMPORT);
            ASSIGN(Inpts_T,NBP - (Inpts_R*100), IMPORT);
            ASSIGN(Inpts_S,Inpts_T / 10, IMPORT);
            ASSIGN(Inpts_T,Inpts_T - (Inpts_S*10), IMPORT);
        }
        COMMENT("#                 qa                  qb                   h");
        CARD("%20lg%20lg%20lg",qa,qb,h);
        COMMENT("#         deltaT_min");
        CARD("%20lg",deltaT_min);
    }
    if(SolidLiquid_Opt==2)
    {
        COMMENT("#                                            BLANK FORMAT");
        BLANK;
        COMMENT("#                 qa                  qb                   h");
        CARD("%20lg%20lg%20lg",qa_l,qb_l,h_l);
    }
    if(Element_closure_opt==1)
    {
        SUBOBJECTS(SUBGRP_ALE_CLOSE,/SUBOBJECT/ALE_CLOSE);
    }
    
}
//File format for Radioss 44
FORMAT(radioss44)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s/%d/%s",TYPE_NO,_ID_,TITLE);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
            ASSIGN(SolidLiquid_Opt,1);
        }
        else
        {
            ASSIGN(SolidLiquid_Opt,1);
        }
    }
    COMMENT("# Isolid  Ismstr   Iplas   Icpre   Icstr              Dn");
    CARD("%8d%8d%8d%8d%8d%16lg",ISOLID,Ismstr,Iplas,Icpre,Icstr,dn);
    COMMENT("#             qa              qb               h");
    CARD("%16lg%16lg%16lg",qa,qb,h);
}

// File format for Radioss 41
FORMAT(radioss41) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s/%d/%s",TYPE_NO,_ID_,TITLE);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
            ASSIGN(SolidLiquid_Opt,1);
        }
        else
        {
            ASSIGN(SolidLiquid_Opt,1);
        }
    }
    COMMENT("# Isolid  Ismstr");
    CARD("%8d%8d",ISOLID,Ismstr);
    COMMENT("#             qa              qb               h");
    CARD("%16lg%16lg%16lg",qa,qb,h);
}
