//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- admesh_state_shell.cfg ---

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES

    //Card 1
    NSHELL                                   = SIZE("SHELL ELEMENTS STATE");
    shell_ID                                 = ARRAY[NSHELL](ELEMS,   "Shell identifier", "shell_ID")                                       { SUBTYPES = (/ELEMENT/SHELL_IDPOOL) ; }
    shell_ID1                                = ARRAY[NSHELL](ELEMS,   "SW son identifier", "shell_ID1")                                     { SUBTYPES = (/ELEMENT/SHELL_IDPOOL) ; }
    shell_ID2                                = ARRAY[NSHELL](ELEMS,   "SE son identifier", "shell_ID2")                                     { SUBTYPES = (/ELEMENT/SHELL_IDPOOL) ; }
    shell_ID3                                = ARRAY[NSHELL](ELEMS,   "NE son identifier", "shell_ID3")                                     { SUBTYPES = (/ELEMENT/SHELL_IDPOOL) ; }
    shell_ID4                                = ARRAY[NSHELL](ELEMS,   "NW son identifier", "shell_ID4")                                     { SUBTYPES = (/ELEMENT/SHELL_IDPOOL) ; }
    Actlev                                   = ARRAY[NSHELL](INT,    "Actual level of shell", "Actlev");
    IMapping                                 = ARRAY[NSHELL](INT,    "Mapping flag or deletion at the beginning of this stage", "IMapping");

    //HM INTERNAL
    KEYWORD_STR                              = VALUE(STRING, "Solver Keyword");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //Card 1
    NSHELL                                   = -1;
    shell_ID                                 = -1;
    shell_ID1                                = -1;
    shell_ID2                                = -1;
    shell_ID3                                = -1;
    shell_ID4                                = -1;
    Actlev                                   = -1;
    IMapping                                 = -1;

    //HM INTERNAL
    KEYWORD_STR                              = 9000;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "/ADMESH/STATE/SHELL");

    SIZE(NSHELL);
    ARRAY(NSHELL, "NIPPAR")
    {
        DATA(shell_ID,  "shell_ID");
        DATA(shell_ID1, "shell_ID1");
        DATA(shell_ID2, "shell_ID2");
        DATA(shell_ID3, "shell_ID3");
        DATA(shell_ID4, "shell_ID4");

        SCALAR(Actlev, "Actlev")                { DIMENSION = "DIMENSIONLESS" ; }

        RADIO(IMapping, "IMapping")
        {
           ADD(-1, "-1: The shell and all the shells coming from it are deleted");
           ADD(0, "0: The element is not deleted and no element is activated at a deeper level, unless it was already active in the previous stage");
           ADD(1, "1: Some shells will be activated at a deeper level, but were not previously");
        }
     }

}

// File format
FORMAT(radioss90)
{
    HEADER("/ADMESH/STATE/SHELL");

    //Card 1
    if(NSHELL!=0)
    {
        COMMENT("# shell_ID shell_ID1 shell_ID2 shell_ID3 shell_ID4    Actlev  IMapping");
    }
    FREE_CARD_LIST(NSHELL)
    {
        CARD("%10d%10d%10d%10d%10d%10d%10d", shell_ID, shell_ID1, shell_ID2, shell_ID3, shell_ID4, Actlev, IMapping);
    }    
}