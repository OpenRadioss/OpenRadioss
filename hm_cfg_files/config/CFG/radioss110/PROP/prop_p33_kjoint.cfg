//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Property KJOINT Type33
ATTRIBUTES(COMMON)
{
    type                                    = VALUE(INT,  " Joint Type");
    SkewFlag                                = VALUE(INT,  " Skew Frame Selection");
    Idsk1                                   = VALUE(SYSTEM,  " First Skew System Identifier");
    Idsk2                                   = VALUE(SYSTEM,  " Second Skew System Identifier");
    Xk                                      = VALUE(FLOAT,  " Stiffness for Interface");
    Cr                                      = VALUE(FLOAT,  " Critical Damping Factor");
    Kn                                      = VALUE(FLOAT,  " Stiffness for Blocked DOF");
    Krx                                     = VALUE(FLOAT,  " X Rotational Stiffness Coefficient");
    Kry                                     = VALUE(FLOAT,  " Y Rotational Stiffness Coefficient");
    Krz                                     = VALUE(FLOAT,  " Z Rotational Stiffness Coefficient");
    Ktx                                     = VALUE(FLOAT,  " X Translational Stiffness Coefficient");
    Kty                                     = VALUE(FLOAT,  " Y Translational Stiffness Coefficient");
    Ktz                                     = VALUE(FLOAT,  " Z Translational Stiffness Coefficient");
    Crx                                     = VALUE(FLOAT,  " X Rotational Viscosity Coefficient");
    Cry                                     = VALUE(FLOAT,  " Y Rotational Viscosity Coefficient");
    Crz                                     = VALUE(FLOAT,  " Z Rotational Viscosity Coefficient");
    Ctx                                     = VALUE(FLOAT,  " X Translational Viscosity Coefficient");
    Cty                                     = VALUE(FLOAT,  " Y Translational Viscosity Coefficient");
    Ctz                                     = VALUE(FLOAT,  " Z Translational Viscosity Coefficient");
    Xr_fun                                  = VALUE(FUNCT,  " X Rotational Stiffness Function");
    Xt_fun                                  = VALUE(FUNCT,  " X Translational Stiffness Function");
    Yr_fun                                  = VALUE(FUNCT,  " Y Rotational Stiffness Function");
    Yt_fun                                  = VALUE(FUNCT,  " Y Translational Stiffness Function");
    Zr_fun                                  = VALUE(FUNCT,  " Z Rotational Stiffness Function");
    Zt_fun                                  = VALUE(FUNCT,  " Z Translational Stiffness Function");
    Crx_Fun                                 = VALUE(FUNCT,  " X Rotational Viscosity Function");
    Cry_Fun                                 = VALUE(FUNCT,  " Y Rotational Viscosity Function");
    Crz_Fun                                 = VALUE(FUNCT,  " Z Rotational Viscosity Function");
    Ctx_Fun                                 = VALUE(FUNCT,  " X Translational Viscosity Function");
    Cty_Fun                                 = VALUE(FUNCT,  " Y Translational Viscosity Function");
    Ctz_Fun                                 = VALUE(FUNCT,  " Z Translational Viscosity Function");
    
    //Attributes for HM usage
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Prop_Name_OR_Type                       = VALUE(INT, "");
    IO_FLAG                                 = VALUE(INT, "");
    TYPE_NO                                 = VALUE(STRING, "");
    TITLE                                   = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    NUM_COMMENTS                            = 5110;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;
    Cr                                      =  842;
    Crx                                     = 4122;
    Crx_Fun                                 = 4125;
    Cry                                     = 4123;
    Cry_Fun                                 = 4126;
    Crz                                     = 4124;
    Crz_Fun                                 = 4127;
    Ctx                                     = 4128;
    Ctx_Fun                                 = 4129;
    Cty                                     = 4130;
    Cty_Fun                                 = 4132;
    Ctz                                     = 4131;
    Ctz_Fun                                 = 4133;
    Idsk1                                   =  839;
    Idsk2                                   =  840;
    Kn                                      =  843;
    Krx                                     =  844;
    Kry                                     =  845;
    Krz                                     =  846;
    Ktx                                     =  847;
    Kty                                     =  848;
    Ktz                                     =  849;
    SkewFlag                                =  835;
    Xk                                      =  841;
    Xr_fun                                  =  869;
    Xt_fun                                  =  872;
    Yr_fun                                  =  870;
    Yt_fun                                  =  873;
    Zr_fun                                  =  871;
    Zt_fun                                  =  874;
    type                                    = 8067;
    Prop_Name_OR_Type                       = 4537;
    TITLE                                   =   -1;
    TYPE_NO                                 =   -1;
    IO_FLAG                                 =   -1;
}

CHECK(COMMON)
{
    Kn                                      > 0;
}

DEFAULTS(COMMON)
{
    type                                    =   1;
    Cr                                      = 0.0;
    Crx                                     = 1.0;
    Cry                                     = 1.0;
    Crz                                     = 1.0;
    Ctx                                     = 1.0;
    Cty                                     = 1.0;
    Ctz                                     = 1.0;
    Krx                                     = 1.0;
    Kry                                     = 1.0;
    Krz                                     = 1.0;
    Ktx                                     = 1.0;
    Kty                                     = 1.0;
    Ktz                                     = 1.0;
    SkewFlag                                =   0;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
       ENUM_VALUE_FLAG=TRUE;
       ADD(1, "1:Hide in Menu/Export");
       ADD(2, "2:Show in Menu/Export");
       ADD(3, "3:Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Prop_Name_OR_Type == 2)
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TYPE33/");

    }
    else
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/KJOINT/");
    }
    RADIO(type)
    {
       ADD(1, "1:Spherical Joint");
       ADD(2, "2:Revolute Joint");
       ADD(3, "3:Cylindrical Joint");
       ADD(4, "4:Planar Joint");
       ADD(5, "5:Universal Joint");
       ADD(6, "6:Translational Joint");
       ADD(7, "7:Oldham Joint (Planar without Rotation DOF)");
       ADD(8, "8:Fixed (Rigid) Joint");
       ADD(9, "9: Free Joint");
    }
    RADIO(SkewFlag)
    {
       ADD(0, "0:Joint is defined in a mean skew frame.");
       ADD(1, "1:Joint is defined in the first body skew frame.");
    }
    DATA(Idsk1) {/FILTER/Framefix/0/EQ;}
    DATA(Idsk2) {/FILTER/Framefix/0/EQ;}
    SCALAR(Xk) { DIMENSION="translation_stiffness"; }
    SCALAR(Cr);
    if(type == 1)
    {
        SCALAR(Kn) {DIMENSION="translation_stiffness";}
        SCALAR(Krx) {DIMENSION="ROTATION STIFFNESS";}
        SCALAR(Kry) {DIMENSION="ROTATION STIFFNESS";}
        SCALAR(Krz) {DIMENSION="ROTATION STIFFNESS";}
        FUNCTION(Xr_fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Yr_fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Zr_fun) {/FILTER/groupEnumField/1/EQ;}
        SCALAR(Crx) {DIMENSION="kinetic_moment";}
        SCALAR(Cry) {DIMENSION="kinetic_moment";}
        SCALAR(Crz) {DIMENSION="kinetic_moment";}
        FUNCTION(Crx_Fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Cry_Fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Crz_Fun) {/FILTER/groupEnumField/1/EQ;}
    }
    else if(type == 2)
    {
        SCALAR(Kn) {DIMENSION="translation_stiffness";}
        SCALAR(Krx) {DIMENSION="ROTATION STIFFNESS";}
        FUNCTION(Xr_fun) {/FILTER/groupEnumField/1/EQ;}
        SCALAR(Crx) {DIMENSION="kinetic_moment";}
        FUNCTION(Crx_Fun) {/FILTER/groupEnumField/1/EQ;}
    }
    else if(type == 3)
    {
        SCALAR(Kn) {DIMENSION="translation_stiffness";}
        SCALAR(Ktx) {DIMENSION="translation_stiffness";}
        SCALAR(Krx) {DIMENSION="ROTATION STIFFNESS";}
        FUNCTION(Xt_fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Xr_fun) {/FILTER/groupEnumField/1/EQ;}
        SCALAR(Ctx) {DIMENSION="massFlux";}
        SCALAR(Crx) {DIMENSION="kinetic_moment";}
        FUNCTION(Ctx_Fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Crx_Fun) {/FILTER/groupEnumField/1/EQ;}
    }
    else if(type == 4)
    {
        SCALAR(Kn) {DIMENSION="translation_stiffness";}
        SCALAR(Kty) {DIMENSION="translation_stiffness";}
        SCALAR(Ktz) {DIMENSION="translation_stiffness";}
        FUNCTION(Yt_fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Zt_fun) {/FILTER/groupEnumField/1/EQ;}
        SCALAR(Krx) {DIMENSION="ROTATION STIFFNESS";}
        FUNCTION(Xr_fun) {/FILTER/groupEnumField/1/EQ;}
        SCALAR(Cty) {DIMENSION="massFlux";}
        SCALAR(Ctz) {DIMENSION="massFlux";}
        SCALAR(Crx) {DIMENSION="kinetic_moment";}
        FUNCTION(Cty_Fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Ctz_Fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Crx_Fun) {/FILTER/groupEnumField/1/EQ;}
    }
    else if(type == 5)
    {
        SCALAR(Kn) {DIMENSION="translation_stiffness";}
        SCALAR(Kry) {DIMENSION="ROTATION STIFFNESS";}
        SCALAR(Krz) {DIMENSION="ROTATION STIFFNESS";}
        FUNCTION(Yr_fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Zr_fun) {/FILTER/groupEnumField/1/EQ;}
        SCALAR(Cry) {DIMENSION="kinetic_moment";}
        SCALAR(Crz) {DIMENSION="kinetic_moment";}
        FUNCTION(Cry_Fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Crz_Fun) {/FILTER/groupEnumField/1/EQ;}
    }
    else if(type == 6)
    {
        SCALAR(Kn) {DIMENSION="translation_stiffness";}
        SCALAR(Ktx) {DIMENSION="translation_stiffness";}
        FUNCTION(Xt_fun) {/FILTER/groupEnumField/1/EQ;}
        SCALAR(Ctx) {DIMENSION="massFlux";}
        FUNCTION(Ctx_Fun) {/FILTER/groupEnumField/1/EQ;}
    }
    else if(type == 7)
    {
        SCALAR(Kn) {DIMENSION="translation_stiffness";}
        SCALAR(Kty) {DIMENSION="translation_stiffness";}
        SCALAR(Ktz) {DIMENSION="translation_stiffness";}
        FUNCTION(Yt_fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Zt_fun) {/FILTER/groupEnumField/1/EQ;}
        SCALAR(Cty) {DIMENSION="massFlux";}
        SCALAR(Ctz) {DIMENSION="massFlux";}
        FUNCTION(Cty_Fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Ctz_Fun) {/FILTER/groupEnumField/1/EQ;}
    }
    else if(type == 8)
    {
        SCALAR(Kn) {DIMENSION="translation_stiffness";}
    }
    else if(type == 9)
    {
        SCALAR(Ktx) {DIMENSION="translation_stiffness";}
        SCALAR(Kty) {DIMENSION="translation_stiffness";}
        SCALAR(Ktz) {DIMENSION="translation_stiffness";}
        SCALAR(Krx) {DIMENSION="ROTATION STIFFNESS";}
        SCALAR(Kry) {DIMENSION="ROTATION STIFFNESS";}
        SCALAR(Krz) {DIMENSION="ROTATION STIFFNESS";}
        FUNCTION(Xt_fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Yt_fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Zt_fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Xr_fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Yr_fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Zr_fun) {/FILTER/groupEnumField/1/EQ;}
        SCALAR(Ctx) {DIMENSION="massFlux";}
        SCALAR(Cty) {DIMENSION="massFlux";}
        SCALAR(Ctz) {DIMENSION="massFlux";}
        SCALAR(Crx) {DIMENSION="kinetic_moment";}
        SCALAR(Cry) {DIMENSION="kinetic_moment";}
        SCALAR(Crz) {DIMENSION="kinetic_moment";}
        FUNCTION(Ctx_Fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Cty_Fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Ctz_Fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Crx_Fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Cry_Fun) {/FILTER/groupEnumField/1/EQ;}
        FUNCTION(Crz_Fun) {/FILTER/groupEnumField/1/EQ;}
    }
}

//File format for Radioss 51
FORMAT(radioss51)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE33/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/KJOINT/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#     Type    SkFlag");
    CARD("%10d%10d",type,SkewFlag);
    COMMENT("# skew_ID1  skew_ID2                  Xk                  Cr");
    CARD("%10d%10d%20lg%20lg",Idsk1,Idsk2,Xk,Cr);
    if(type==1)
    {
        COMMENT("#                 Kn                 Krx                 Kry                 Krz");
        CARD("%20lg%20lg%20lg%20lg",Kn,Krx,Kry,Krz);
        COMMENT("# fct_IDXR  fct_IDYR  fct_IDZR");
        CARD("%10d%10d%10d",Xr_fun,Yr_fun,Zr_fun);
        COMMENT("#                Crx                 Cry                 Crz");
        CARD("%20lg%20lg%20lg",Crx,Cry,Crz);
        COMMENT("#fct_IDXRC fct_IDYRC fct_IDZRC");
        CARD("%10d%10d%10d",Crx_Fun,Cry_Fun,Crz_Fun);
    }
    else if(type==2)
    {
        COMMENT("#                 Kn                 Krx  fct_IDXR");
        CARD("%20lg%20lg%10d",Kn,Krx,Xr_fun);
        COMMENT("#                Crx fct_IDXRC");
        CARD("%20lg%10d",Crx,Crx_Fun);
    }
    else if(type==3)
    {
        COMMENT("#                 Kn                 Ktx                 Krx  fct_IDXT  fct_IDXR");
        CARD("%20lg%20lg%20lg%10d%10d",Kn,Ktx,Krx,Xt_fun,Xr_fun);
        COMMENT("#                Ctx                 Crx fct_IDXTC fct_IDXRC");
        CARD("%20lg%20lg%10d%10d",Ctx,Crx,Ctx_Fun,Crx_Fun);
    }
    else if(type==4)
    {
        COMMENT("#                 Kn                 Kty                 Ktz  fct_IDYT  fct_IDZT");
        CARD("%20lg%20lg%20lg%10d%10d",Kn,Kty,Ktz,Yt_fun,Zt_fun);
        COMMENT("#                Krx  fct_IDXR");
        CARD("%20lg%10d",Krx,Xr_fun);
        COMMENT("#                Cty                 Ctz                 Crx");
        CARD("%20lg%20lg%20lg",Cty,Ctz,Crx);
        COMMENT("#fct_IDYTC fct_IDZTC fct_IDXRC");
        CARD("%10d%10d%10d",Cty_Fun,Ctz_Fun,Crx_Fun);
    }
    else if(type==5)
    {
        COMMENT("#                 Kn                 Kry                 Krz  fct_IDYR  fct_IDZR");
        CARD("%20lg%20lg%20lg%10d%10d",Kn,Kry,Krz,Yr_fun,Zr_fun);
        COMMENT("#                Cry                 Crz fct_IDYRC fct_IDZRC");
        CARD("%20lg%20lg%10d%10d",Cry,Crz,Cry_Fun,Crz_Fun);
    }
    else if(type==6)
    {
        COMMENT("#                 Kn                 Ktx  fct_IDXT");
        CARD("%20lg%20lg%10d",Kn,Ktx,Xt_fun);
        COMMENT("#                Ctx fct_IDXTC");
        CARD("%20lg%10d",Ctx,Ctx_Fun);
    }
    else if(type==7)
    {
        COMMENT("#                 Kn                 Kty                 Ktz  fct_IDYT  fct_IDZT");
        CARD("%20lg%20lg%20lg%10d%10d",Kn,Kty,Ktz,Yt_fun,Zt_fun);
        COMMENT("#                Cty                 Ctz fct_IDYTC fct_IDZTC");
        CARD("%20lg%20lg%10d%10d",Cty,Ctz,Cty_Fun,Ctz_Fun);
    }
    else if(type==8)
    {
        COMMENT("#                 Kn");
        CARD("%20lg",Kn);
    }
    else if(type==9)
    {
        COMMENT("#                Ktx                 Kty                 Ktz");
        CARD("%20lg%20lg%20lg",Ktx,Kty,Ktz);
        COMMENT("#                Krx                 Kry                 Krz");
        CARD("%20lg%20lg%20lg",Krx,Kry,Krz);
        COMMENT("# fct_IDXT  fct_IDYT  fct_IDZT");
        CARD("%10d%10d%10d",Xt_fun,Yt_fun,Zt_fun);
        COMMENT("# fct_IDXR  fct_IDZR  fct_IDZR");
        CARD("%10d%10d%10d",Xr_fun,Yr_fun,Zr_fun);
        COMMENT("#                Ctx                 Cty                 Ctz");
        CARD("%20lg%20lg%20lg",Ctx,Cty,Ctz);
        COMMENT("#                Crx                 Cry                 Crz");
        CARD("%20lg%20lg%20lg",Crx,Cry,Crz);
        COMMENT("#fct_IDXTC fct_IDYTC fct_IDZTC");
        CARD("%10d%10d%10d",Ctx_Fun,Cty_Fun,Ctz_Fun);
        COMMENT("#fct_IDXRC fct_IDYRC fct_IDZRC");
        CARD("%10d%10d%10d",Crx_Fun,Cry_Fun,Crz_Fun);
    }
    else
    {
    }
}
// File format for Radioss 42
FORMAT(radioss42) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s/%d/%s",TYPE_NO,_ID_,TITLE);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    COMMENT("#   Type  SkFlag");
    CARD("%8d%8d",type,SkewFlag);
    COMMENT("#  skew_ID 1skew_ID2              Xk              Cr");
    CARD("%8d%8d%16lg%16lg",Idsk1,Idsk2,Xk,Cr);
    if(type==1)
    {
        COMMENT("#             Kn             Krx             Kry             Krz");
        CARD("%16lg%16lg%16lg%16lg",Kn,Krx,Kry,Krz);
        COMMENT("# fct_IDXR  fct_IDYR  fct_IDZR");
        CARD("%8d%8d%8d",Xr_fun,Yr_fun,Zr_fun);
    }
    else if(type==2)
    {
        COMMENT("#             Kn             Krx  fct_IDXR");
        CARD("%16lg%16lg%8d",Kn,Krx,Xr_fun);
    }
    else if(type==3)
    {
        COMMENT("#             Kn             Ktx             Krx  fct_IDXT  fct_IDXR");
        CARD("%16lg%16lg%16lg%8d%8d",Kn,Ktx,Krx,Xt_fun,Xr_fun);
    }
    else if(type==4)
    {
        COMMENT("#             Kn             Kty             Ktz  fct_IDYT  fct_IDZT");
        CARD("%16lg%16lg%16lg%8d%8d",Kn,Kty,Ktz,Yt_fun,Zt_fun);
        COMMENT("#            Krx  fct_IDXR");
        CARD("%16lg%8d",Krx,Xr_fun);
    }
    else if(type==5)
    {
        COMMENT("#             Kn             Kry             Krz  fct_IDYR  fct_IDZR");
        CARD("%16lg%16lg%16lg%8d%8d",Kn,Kry,Krz,Yr_fun,Zr_fun);
    }
    else if(type==6)
    {
        COMMENT("#             Kn             Ktx  fct_IDXT");
        CARD("%16lg%16lg%8d",Kn,Ktx,Xt_fun);
    }
    else if(type==7)
    {
        COMMENT("#             Kn             Kty             Ktz  fct_IDYT  fct_IDZT");
        CARD("%16lg%16lg%16lg%8d%8d",Kn,Kty,Ktz,Yt_fun,Zt_fun);
    }
    else if(type==8)
    {
        COMMENT("#             Kn");
        CARD("%16lg",Kn);
    }
    else if(type==9)
    {
        COMMENT("#            Ktx             Kty             Ktz");
        CARD("%16lg%16lg%16lg",Ktx,Kty,Ktz);
        COMMENT("#            Krx             Kry             Krz");
        CARD("%16lg%16lg%16lg",Krx,Kry,Krz);
        COMMENT("# fct_IDXT  fct_IDYT  fct_IDZT");
        CARD("%8d%8d%8d",Xt_fun,Yt_fun,Zt_fun);
        COMMENT("# fct_IDXR  fct_IDYR  fct_IDZR");
        CARD("%8d%8d%8d",Xr_fun,Yr_fun,Zr_fun);
    }
    else
    {
    }
}
