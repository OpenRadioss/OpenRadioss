//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Property SPR_BEAM Type13
ATTRIBUTES(COMMON)
{
// Solver attributes
    MASS                                    = VALUE(FLOAT,  " Spring Mass");
    INERTIA                                 = VALUE(FLOAT,  " Spring Inertia");
    SKEW_CSID                               = VALUE(SYSTEM,  " Skew System Identifier");
    ISENSOR                                 = VALUE(SENSOR,  " Sensor Identifier") {SUBTYPES=(/SENSOR/SENSOR_DEFINE);}
    ISFLAG                                  = VALUE(INT,  " Sensor Flag");
    Ifail                                   = VALUE(INT,  " Failure Criteria");
    Ileng                                   = VALUE(INT,  " Input Per Unit Length Flag");
    Ifail2                                  = VALUE(INT,  " Failure Model Flag");
    //Tension (Tx)
    STIFF1                                  = VALUE(FLOAT,  " Stiffness for Tension");
    DAMP1                                   = VALUE(FLOAT,  " Damping for Tension");
    Acoeft1                                 = VALUE(FLOAT,  " A Coefficient for Tension(homogeneous to a force)");
    Bcoeft1                                 = VALUE(FLOAT,  " B Coefficient for Tension(homogeneous to a force)");
    Dcoeft1                                 = VALUE(FLOAT,  " D Coefficient for Tension");
    FUN_A1                                  = VALUE(FUNCT,  " Function Identifier defining f(Delta)");
    HFLAG1                                  = VALUE(INT,  " Hardening Flag");
    FUN_B1                                  = VALUE(FUNCT,  " Function Identifier defining g(Delta)");
    FUN_C1                                  = VALUE(FUNCT,  " Function identifier defining lower yield curve");
    MIN_RUP1                                = VALUE(FLOAT,  " Negative Failure Limit");
    MAX_RUP1                                = VALUE(FLOAT,  " Positive Failure Limit");
    Prop_X_F                                = VALUE(FLOAT,  " Scale Factor for Delta");
    Prop_X_E                                = VALUE(FLOAT,  " Coefficient for Delta");
    scale1                                  = VALUE(FLOAT,  " Abscissa Scale Factor for Delta(fct_ID1 and fct_ID3)"); 
    //Shear (Ty)
    STIFF2                                  = VALUE(FLOAT,  " Stiffness for Shear");
    DAMP2                                   = VALUE(FLOAT,  " Damping for Shear");
    Acoeft2                                 = VALUE(FLOAT,  " A Coefficient for Shear (homogeneous to a force)");
    Bcoeft2                                 = VALUE(FLOAT,  " B Coefficient for Shear (homogeneous to a force)");
    Dcoeft2                                 = VALUE(FLOAT,  " D Coefficient for Shear");
    FUN_A2                                  = VALUE(FUNCT,  " Function Identifier defining g(Delta)");
    HFLAG2                                  = VALUE(INT,  " Hardening Flag");
    FUN_B2                                  = VALUE(FUNCT,  " Function identifier defining g(Delta)");
    FUN_C2                                  = VALUE(FUNCT,  " Function identifier defining lower yield curve");
    MIN_RUP2                                = VALUE(FLOAT,  " Negative Failure Limit");
    MAX_RUP2                                = VALUE(FLOAT,  " Positive Failure Limit");
    Prop_Y_F                                = VALUE(FLOAT,  " Scale Factor for Delta");
    Prop_Y_E                                = VALUE(FLOAT,  " Coefficient for Delta");
    scale2                                  = VALUE(FLOAT,  " Abscissa Scale Factor for Delta");   
    //Shear (Tz)
    STIFF3                                  = VALUE(FLOAT,  " Stiffness for shear");
    DAMP3                                   = VALUE(FLOAT,  " Damping for Shear");
    Acoeft3                                 = VALUE(FLOAT,  " A Coefficient for Shear (homogeneous to a force)");
    Bcoeft3                                 = VALUE(FLOAT,  " B Coefficient for Shear (homogeneous to a force)");
    Dcoeft3                                 = VALUE(FLOAT,  " D Coefficient for Shear");
    FUN_A3                                  = VALUE(FUNCT,  " Function Identifier  defining g(Delta)");
    HFLAG3                                  = VALUE(INT,  " Hardening Flag");
    FUN_B3                                  = VALUE(FUNCT,  " Function Identifier  defining g(Delta)");
    FUN_C3                                  = VALUE(FUNCT,  " Function identifier defining lower yield curve");
    MIN_RUP3                                = VALUE(FLOAT,  " Negative Failure Limit");
    MAX_RUP3                                = VALUE(FLOAT,  " Positive Failure Limit");
    Prop_Z_F                                = VALUE(FLOAT,  " Scale Factor for Delta");
    Prop_Z_E                                = VALUE(FLOAT,  " Coefficient for Delta");
    scale3                                  = VALUE(FLOAT,  " Abscissa Scale Factor for Delta");  
    //Torsion (Rx)
    STIFF4                                  = VALUE(FLOAT,  " Stiffness for Torsion");
    DAMP4                                   = VALUE(FLOAT,  " Damping for Torsion");
    Acoeft4                                 = VALUE(FLOAT,  " A Coefficient for Torsion (homogeneous to a moment)");
    Bcoeft4                                 = VALUE(FLOAT,  " B Coefficient for Torsion (homogeneous to a moment)");
    Dcoeft4                                 = VALUE(FLOAT,  " D Coefficient for Torsion");
    FUN_A4                                  = VALUE(FUNCT,  " Function identifier defining f(Theta)");
    HFLAG4                                  = VALUE(INT,  " Hardening Flag");
    FUN_B4                                  = VALUE(FUNCT,  " Function identifier defining g(Theta)");
    FUN_C4                                  = VALUE(FUNCT,  " Function identifier defining lower yield curve");
    MIN_RUP4                                = VALUE(FLOAT,  " Negative Failure Limit");
    MAX_RUP4                                = VALUE(FLOAT,  " Positive Failure Limit");
    Prop_Tor_F                              = VALUE(FLOAT,  " Scale Factor for Theta");
    Prop_Tor_E                              = VALUE(FLOAT,  " Coefficient for g(Theta) (homogeneous to a moment)");
    scale4                                  = VALUE(FLOAT,  " Abscissa Scale Factor for Theta (fct_ID1 and fct_ID3)");  
    //Bending (Ry)
    STIFF5                                  = VALUE(FLOAT,  " Stiffness for Bend");
    DAMP5                                   = VALUE(FLOAT,  " Damping for Bend");
    Acoeft5                                 = VALUE(FLOAT,  " A Coefficient for Bend (homogeneous to a moment)");
    Bcoeft5                                 = VALUE(FLOAT,  " B Coefficient for Bend (homogeneous to a moment)");
    Dcoeft5                                 = VALUE(FLOAT,  " D Coefficient for Bend");
    FUN_A5                                  = VALUE(FUNCT,  " Function identifier defining f(Theta)");
    HFLAG5                                  = VALUE(INT,  " Hardening Flag");
    FUN_B5                                  = VALUE(FUNCT,  " Function identifier defining g(Theta)");
    FUN_C5                                  = VALUE(FUNCT,  "  Function identifier defining lower yield curve");
    MIN_RUP5                                = VALUE(FLOAT,  " Negative Failure Limit");
    MAX_RUP5                                = VALUE(FLOAT,  " Positive Failure Limit");
    Prop_FlxY_F                             = VALUE(FLOAT,  " Scale Factor for Theta");
    Prop_FlxY_E                             = VALUE(FLOAT,  " Coefficient for Theta");
    scale5                                  = VALUE(FLOAT,  " Abscissa Scale Factor for Theta (fct_ID1 and fct_ID3)");   
    //Bending (Rz)
    STIFF6                                  = VALUE(FLOAT,  " Stiffness for Bend");
    DAMP6                                   = VALUE(FLOAT,  " Damping for Bend");
    Acoeft6                                 = VALUE(FLOAT,  " A Coefficient for Bend (homogeneous to a moment)");
    Bcoeft6                                 = VALUE(FLOAT,  " B Coefficient for Bend (homogeneous to a moment)");
    Dcoeft6                                 = VALUE(FLOAT,  " D Coefficient for Bend");
    FUN_A6                                  = VALUE(FUNCT,  " Function identifier defining f(Theta)");
    HFLAG6                                  = VALUE(INT,  " Hardening Flag");
    FUN_B6                                  = VALUE(FUNCT,  " Function identifier defining g(Theta)");
    FUN_C6                                  = VALUE(FUNCT,  " Function identifier defining lower yield curve");
    MIN_RUP6                                = VALUE(FLOAT,  " Negative Failure Limit");
    MAX_RUP6                                = VALUE(FLOAT,  " Positive Failure Limit");
    Prop_FlxZ_F                             = VALUE(FLOAT,  " Scale Factor for Theta");
    Prop_FlxZ_E                             = VALUE(FLOAT,  " Coefficient for g(Theta) (homogeneous to a moment)");
    scale6                                  = VALUE(FLOAT,  " Abscissa Scale Factor for Theta (fct_ID1 and fct_ID3)");   
    //Velocity Dependent Failure Parameters
    TRANS_VEL0                              = VALUE(FLOAT,  " Reference Translational Velocity");
    ROT_VEL0                                = VALUE(FLOAT,  " Reference rotational velocity in translation X");
    //Tx
    C1                                      = VALUE(FLOAT,  " Relative Velocity Coefficient in Translation X");
    REL_VEL_EXP1                                   = VALUE(FLOAT,  " Relative Velocity Exponent in Translation X");
    ALPHA1                                  = VALUE(FLOAT,  " Mult Factor in Translation X");
    BETA1                                   = VALUE(FLOAT,  " Exponent in Translation X");
    //Ty
    C2                                      = VALUE(FLOAT,  " Relative Velocity Coefficient in Shear XY");
    REL_VEL_EXP2                                   = VALUE(FLOAT,  " Relative Velocity Exponent in Shear XY");
    ALPHA2                                  = VALUE(FLOAT,  " Mult Factor in Shear XY");
    BETA2                                   = VALUE(FLOAT,  " Exponent in Shear XY");
    //Tz
    C3                                      = VALUE(FLOAT,  " Relative Velocity Coefficient in Shear XZ");
    REL_VEL_EXP3                                   = VALUE(FLOAT,  " Relative Velocity Exponent in Shear XZ");
    ALPHA3                                  = VALUE(FLOAT,  " Mult Factor in Shear XZ");
    BETA3                                   = VALUE(FLOAT,  " Exponent in Shear XZ");
    //Rx
    C4                                      = VALUE(FLOAT,  " Relative Velocity Coefficient in Torsion X");
    REL_VEL_EXP4                            = VALUE(FLOAT,  " Relative Velocity Exponent in Torsion X");
    ALPHA4                                  = VALUE(FLOAT,  " Mult Factor in Torsion X");
    BETA4                                   = VALUE(FLOAT,  " Exponent in Torsion X");
    //Ry
    C5                                      = VALUE(FLOAT,  " Relative Velocity Coefficient in Bending Y");
    REL_VEL_EXP5                                   = VALUE(FLOAT,  " Relative Velocity Exponent in Bending Y");
    ALPHA5                                  = VALUE(FLOAT,  " Mult Factor in Bending Y");
    BETA5                                   = VALUE(FLOAT,  " Exponent in Bending Y");
    //Rz
    C6                                      = VALUE(FLOAT,  " Relative Velocity Coefficient in Bending Z");
    REL_VEL_EXP6                                   = VALUE(FLOAT,  " Relative Velocity Exponent in Bending Z");
    ALPHA6                                  = VALUE(FLOAT,  " Mult Factor in Bending Z");
    BETA6                                   = VALUE(FLOAT,  " Exponent in Bending Z");  
    
    //Attributes for HM usage
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,  "User Comments"); 
    Prop_Name_OR_Type                       = VALUE(INT, "");
    TITLE                                   = VALUE(STRING, "");
    IO_FLAG                                 = VALUE(INT, "");
    TYPE_NO                                 = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    NUM_COMMENTS                            = 5110;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;    
    ALPHA1                                  = 6145;
    ALPHA2                                  = 6146;
    ALPHA3                                  = 6147;
    ALPHA4                                  = 6148;
    ALPHA5                                  = 6149;
    ALPHA6                                  = 6150;
    Acoeft1                                 = 5160;
    Acoeft2                                 = 5180;
    Acoeft3                                 = 5188;
    Acoeft4                                 = 5196;
    Acoeft5                                 = 5204;
    Acoeft6                                 = 5212;
    BETA1                                   = 6151;
    BETA2                                   = 6152;
    BETA3                                   = 6153;
    BETA4                                   = 6154;
    BETA5                                   = 6155;
    BETA6                                   = 6156;
    Bcoeft1                                 = 5161;
    Bcoeft2                                 = 5181;
    Bcoeft3                                 = 5189;
    Bcoeft4                                 = 5197;
    Bcoeft5                                 = 5205;
    Bcoeft6                                 = 5213;
    C1                                      = 6306;
    C2                                      = 6307;
    C3                                      = 6308;
    C4                                      = 6309;
    C5                                      = 6310;
    C6                                      = 6311;
    DAMP1                                   =  254;
    DAMP2                                   = 5179;
    DAMP3                                   = 5187;
    DAMP4                                   = 5195;
    DAMP5                                   = 5203;
    DAMP6                                   = 5211;
    Dcoeft1                                 = 5162;
    Dcoeft2                                 = 5182;
    Dcoeft3                                 = 5190;
    Dcoeft4                                 = 5198;
    Dcoeft5                                 = 5206;
    Dcoeft6                                 = 5214;
    FUN_A1                                  =   45;
    FUN_A2                                  =  170;
    FUN_A3                                  =  172;
    FUN_A4                                  =  200;
    FUN_A5                                  = 1141;
    FUN_A6                                  = 1175;
    FUN_B1                                  =  168;
    FUN_B2                                  =  171;
    FUN_B3                                  =  199;
    FUN_B4                                  =  224;
    FUN_B5                                  = 1142;
    FUN_B6                                  = 1176;
    FUN_C1                                  = 1189;
    FUN_C2                                  = 1167;
    FUN_C3                                  = 5347;
    FUN_C4                                  = 5348;
    FUN_C5                                  = 5349;
    FUN_C6                                  = 5350;
    HFLAG1                                  = 5163;
    HFLAG2                                  = 5183;
    HFLAG3                                  = 5191;
    HFLAG4                                  = 5199;
    HFLAG5                                  = 5207;
    HFLAG6                                  = 5215;
    INERTIA                                 = 5156;
    ISENSOR                                 = 5157;
    ISFLAG                                  = 5158;
    Ifail                                   = 8032;
    Ifail2                                  = 1000;
    Ileng                                   =  999;
    MASS                                    =  167;
    MAX_RUP1                                = 5165;
    MAX_RUP2                                = 5185;
    MAX_RUP3                                = 5193;
    MAX_RUP4                                = 5201;
    MAX_RUP5                                = 5209;
    MAX_RUP6                                = 5217;
    MIN_RUP1                                = 5164;
    MIN_RUP2                                = 5184;
    MIN_RUP3                                = 5192;
    MIN_RUP4                                = 5200;
    MIN_RUP5                                = 5208;
    MIN_RUP6                                = 5216;
    Prop_FlxY_E                             = 4146;
    Prop_FlxY_F                             = 4145;
    Prop_FlxZ_E                             = 4148;
    Prop_FlxZ_F                             = 4147;
    Prop_Tor_E                              = 4144;
    Prop_Tor_F                              = 4143;
    Prop_X_E                                = 4138;
    Prop_X_F                                = 4137;
    Prop_Y_E                                = 4140;
    Prop_Y_F                                = 4139;
    Prop_Z_E                                = 4142;
    Prop_Z_F                                = 4141;
    REL_VEL_EXP1                            = 6139;
    REL_VEL_EXP2                            = 6140;
    REL_VEL_EXP3                            = 6141;
    REL_VEL_EXP4                            = 6142;
    REL_VEL_EXP5                            = 6143;
    REL_VEL_EXP6                            = 6144;
    ROT_VEL0                                = 6138;
    SKEW_CSID                               =  412;
    STIFF1                                  = 1131;
    STIFF2                                  = 5178;
    STIFF3                                  = 5186;
    STIFF4                                  = 5194;
    STIFF5                                  = 5202;
    STIFF6                                  = 5210;
    TRANS_VEL0                              = 6137;
    scale1                                  = 4528;
    scale2                                  = 4529;
    scale3                                  = 4530;
    scale4                                  = 4531;
    scale5                                  = 4532;
    scale6                                  = 4533;   
    Prop_Name_OR_Type                       = 4537;
    TITLE                                   =   -1;
    IO_FLAG                                 =   -1;
    TYPE_NO                                 =   -1;
}

CHECK(COMMON)
{
    MASS                                    >  0.0;
    MIN_RUP1                                <= 0.0;
    MIN_RUP2                                <= 0.0;
    MIN_RUP3                                <= 0.0;
    MIN_RUP4                                <= 0.0;
    MIN_RUP5                                <= 0.0;
    MIN_RUP6                                <= 0.0;
}

DEFAULTS(COMMON)
{
    ALPHA1                                  = 1.0;
    ALPHA2                                  = 1.0;
    ALPHA3                                  = 1.0;
    ALPHA4                                  = 1.0;
    ALPHA5                                  = 1.0;
    ALPHA6                                  = 1.0;
    Acoeft1                                 = 1.0;
    Acoeft2                                 = 1.0;
    Acoeft3                                 = 1.0;
    Acoeft4                                 = 1.0;
    Acoeft5                                 = 1.0;
    Acoeft6                                 = 1.0;
    BETA1                                   = 2.0;
    BETA2                                   = 2.0;
    BETA3                                   = 2.0;
    BETA4                                   = 2.0;
    BETA5                                   = 2.0;
    BETA6                                   = 2.0;
    C1                                      = 0.0;
    C2                                      = 0.0;
    C3                                      = 0.0;
    C4                                      = 0.0;
    C5                                      = 0.0;
    C6                                      = 0.0;
    Dcoeft1                                 = 1.0;
    Dcoeft2                                 = 1.0;
    Dcoeft3                                 = 1.0;
    Dcoeft4                                 = 1.0;
    Dcoeft5                                 = 1.0;
    Dcoeft6                                 = 1.0;
    Ifail2                                  = 0;
    MAX_RUP1                                = 1.0e30;
    MAX_RUP2                                = 1.0e30;
    MAX_RUP3                                = 1.0e30;
    MAX_RUP4                                = 1.0e30;
    MAX_RUP5                                = 1.0e30;
    MAX_RUP6                                = 1.0e30;
    MIN_RUP1                                =-1.0e30;
    MIN_RUP2                                =-1.0e30;
    MIN_RUP3                                =-1.0e30;
    MIN_RUP4                                =-1.0e30;
    MIN_RUP5                                =-1.0e30;
    MIN_RUP6                                =-1.0e30;
    REL_VEL_EXP1                            = 0.0;
    REL_VEL_EXP2                            = 0.0;
    REL_VEL_EXP3                            = 0.0;
    REL_VEL_EXP4                            = 0.0;
    REL_VEL_EXP5                            = 0.0;
    REL_VEL_EXP6                            = 0.0;
    ROT_VEL0                                = 1.0;
    TRANS_VEL0                              = 1.0;
    scale1                                  = 1.0;
    scale2                                  = 1.0;
    scale5                                  = 1.0;
}

GUI(COMMON)
{
 optional:
    RADIO(CommentEnumField)
    {
       ENUM_VALUE_FLAG=TRUE;
       ADD(1, "1:Hide in Menu/Export");
       ADD(2, "2:Show in Menu/Export");
       ADD(3, "3:Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Prop_Name_OR_Type == 2)
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TYPE13/");

    }
    else
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/SPR_BEAM/");
    }
// Solver attributes  
 mandatory:
  SCALAR(MASS)    { if(Ileng==0) { DIMENSION="m";              } else { DIMENSION="lineic_mass";                       } }
  SCALAR(INERTIA) { if(Ileng==0) { DIMENSION="massmi"; } else { DIMENSION="moment_of_inertia_per_unit_length"; } }
 optional:
    DATA(SKEW_CSID) {/FILTER/Framefix/0/EQ;}
    DATA(ISENSOR) {SUBTYPES=(/SENSOR/SENSOR_DEFINE);}
    RADIO(ISFLAG)
    {
       ADD(0, "0:Spring Element Activated.");
       ADD(1, "1:Spring Element Deactivated.");
       ADD(2, "2:Spring Element Activated or Deactivated.");
    }
    RADIO(Ifail)
    {
       ADD(0, "0:Uni-Directional Criteria.");
       ADD(1, "1:Multi-Directional Criteria.");
    }
    RADIO(Ileng)
    {
       ADD(0, "0:The Force in the Spring is Computed as Previously Detailed Formula.");
       ADD(1, "1:All Input are Per Unit Length.");
    } 
    RADIO(Ifail2)
    {
        ADD(0, "0:Old Displacement Criteria.");
        ADD(1, "1:New Displacement Criteria.");
        ADD(2, "2:Force Criteria.");
        ADD(3, "3:Internal Energy Criteria.");
    }
    SEPARATOR("Tension(Tx)");
    SCALAR(STIFF1){ if(Ileng==0) { DIMENSION="translation_stiffness"; } else { DIMENSION="force";                } }
    SCALAR(DAMP1) { if(Ileng==0) { DIMENSION="massFlux";             } else { DIMENSION="QUANTITY OF MOVEMENT"; } }
    SCALAR(Acoeft1) { DIMENSION="force"; } 
    SCALAR(Bcoeft1) { DIMENSION="force"; } 
    SCALAR(Dcoeft1) { if(Ileng==0) { DIMENSION="velocity";                 } else { DIMENSION="f";            } }
    FUNCTION(FUN_A1) {
      if(Ileng==0) { X_TITLE="dl";     X_DIMENSION="l";        }
      else             { X_TITLE="Strain"; X_DIMENSION="DIMENSIONLESS"; }
      Y_TITLE="f"; Y_DIMENSION="force";
      /FILTER/groupEnumField/1/EQ;
    }
    RADIO(HFLAG1)
    {
       ADD(0, "0: Nonlinear elastic spring.");
       ADD(1, "1: Nonlinear elastic plastic spring.");
       ADD(2, "2: Nonlinear elasto-plastic spring with decoupled hardening in tension and compression.");
       ADD(4, "4: Nonlinear elastic plastic spring kinematic� hardening.");
       ADD(5, "5: Nonlinear elasto-plastic spring with nonlinear unloading.");
    }
     FUNCTION(FUN_B1) {
      if(Ileng==0) { X_TITLE="dl/dt";       X_DIMENSION="velocity";     }
      else             { X_TITLE="Strain rate"; X_DIMENSION="f"; }
      Y_TITLE="g";     Y_DIMENSION="DIMENSIONLESS";
      /FILTER/groupEnumField/1/EQ;
    }
    FUNCTION(FUN_C1) {
      if((HFLAG1==4) && (Ileng==0)) {
    X_TITLE="dl";                    X_DIMENSION="l";
    Y_TITLE="f3";                    Y_DIMENSION="force";
      } else if((HFLAG1==4) && (Ileng!=0)) {
    X_TITLE="Strain";                X_DIMENSION="DIMENSIONLESS";
    Y_TITLE="f3";                    Y_DIMENSION="force";
      } else if((HFLAG1==5) && (Ileng==0)) {
    X_TITLE="Maximum displacement";  X_DIMENSION="l";
    Y_TITLE="Residual displacement"; Y_DIMENSION="l";
      } else if((HFLAG1==5) && (Ileng!=0)) {
    X_TITLE="Maximum strain";        X_DIMENSION="DIMENSIONLESS";
    Y_TITLE="Residual strain";       Y_DIMENSION="DIMENSIONLESS";
      }
      /FILTER/groupEnumField/1/EQ;
    }
    SCALAR(MIN_RUP1){
      if(Ileng==0 && Ifail2 < 2)        { TITLE="Negative failure displacement in transitional direction";  DIMENSION="l";        }
      else  if (Ileng==1 && Ifail2 < 2) { TITLE="Negative rupture strain"; DIMENSION="DIMENSIONLESS"; }
      else if (Ifail2 == 2) { TITLE="Negative failure force in transitional direction"; DIMENSION="force"; }
      else if (Ifail2 == 3) { TITLE="Negative failure internal energy related to transitional direction"; DIMENSION="energy"; }
    }
    SCALAR(MAX_RUP1) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Positive failure displacement in transitional direction";  DIMENSION="l";        }
      else  if (Ileng==1 && Ifail2 < 2) { TITLE="Positive rupture strain"; DIMENSION="DIMENSIONLESS";  }
      else if (Ifail2 == 2)  { TITLE="Positive failure force in transitional direction"; DIMENSION="force"; }
      else if (Ifail2 == 3)   { TITLE="Positive failure internal energy related to transitional direction"; DIMENSION="energy"; }
    }
    SCALAR(Prop_X_F) { if(Ileng==0) { DIMENSION="velocity";                 } else { DIMENSION="f";            } }
    SCALAR(Prop_X_E) { DIMENSION="force"; }
    SCALAR(scale1) { if(Ileng==0) { DIMENSION="l";} else { DIMENSION="DIMENSIONLESS"; } }
    SEPARATOR("");
    SEPARATOR("Shear(Ty)");
    SCALAR(STIFF2){ if(Ileng==0) { DIMENSION="translation_stiffness"; } else { DIMENSION="force";                } }
    SCALAR(DAMP2) { if(Ileng==0) { DIMENSION="massFlux";             } else { DIMENSION="QUANTITY OF MOVEMENT"; } }
    SCALAR(Acoeft2) { DIMENSION="force"; } 
    SCALAR(Bcoeft2) { DIMENSION="force"; } 
    SCALAR(Dcoeft2){ if(Ileng==0) { DIMENSION="velocity";                 } else { DIMENSION="f";            } }
    FUNCTION(FUN_A2) {
      if(Ileng==0) { X_TITLE="dl";     X_DIMENSION="l";        }
      else             { X_TITLE="Strain"; X_DIMENSION="DIMENSIONLESS"; }
      Y_TITLE="f"; Y_DIMENSION="force";
      /FILTER/groupEnumField/1/EQ;
    }
    RADIO(HFLAG2)
    {
       ADD(0, "0: Nonlinear elastic spring.");
       ADD(1, "1: Nonlinear elastic plastic spring.");
       ADD(2, "2: Nonlinear elasto-plastic spring with decoupled hardening in tension and compression.");
       ADD(4, "4: Nonlinear elastic plastic spring kinematic hardening.");
       ADD(5, "5: Nonlinear elasto-plastic spring with nonlinear unloading.");
    }
     FUNCTION(FUN_B2) {
      if(Ileng==0) { X_TITLE="dl/dt";       X_DIMENSION="velocity";     }
      else             { X_TITLE="Strain rate"; X_DIMENSION="f"; }
      Y_TITLE="g";     Y_DIMENSION="DIMENSIONLESS";
      /FILTER/groupEnumField/1/EQ;
    }
    FUNCTION(FUN_C2) {
      if((HFLAG2==4) && (Ileng==0)) {
    X_TITLE="dl";                    X_DIMENSION="l";
    Y_TITLE="f3";                    Y_DIMENSION="force";
      } else if((HFLAG2==4) && (Ileng!=0)) {
    X_TITLE="Strain";                X_DIMENSION="DIMENSIONLESS";
    Y_TITLE="f3";                    Y_DIMENSION="force";
      } else if((HFLAG2==5) && (Ileng==0)) {
    X_TITLE="Maximum displacement";  X_DIMENSION="l";
    Y_TITLE="Residual displacement"; Y_DIMENSION="l";
      } else if((HFLAG2==5) && (Ileng!=0)) {
    X_TITLE="Maximum strain";        X_DIMENSION="DIMENSIONLESS";
    Y_TITLE="Residual strain";       Y_DIMENSION="DIMENSIONLESS";
      }
      /FILTER/groupEnumField/1/EQ;
    }
    SCALAR(MIN_RUP2){
      if(Ileng==0 && Ifail2 < 2)        { TITLE="Negative failure displacement in transitional direction";  DIMENSION="l";        }
      else  if (Ileng==1 && Ifail2 < 2) { TITLE="Negative rupture strain"; DIMENSION="DIMENSIONLESS"; }
      else if (Ifail2 == 2) { TITLE="Negative failure force in transitional direction"; DIMENSION="force"; }
      else if (Ifail2 == 3) { TITLE="Negative failure internal energy related to transitional direction"; DIMENSION="energy"; }
    }
    SCALAR(MAX_RUP2) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Positive failure displacement in transitional direction";  DIMENSION="l";        }
      else  if (Ileng==1 && Ifail2 < 2) { TITLE="Positive rupture strain"; DIMENSION="DIMENSIONLESS";  }
      else if (Ifail2 == 2)  { TITLE="Positive failure force in transitional direction"; DIMENSION="force"; }
      else if (Ifail2 == 3)   { TITLE="Positive failure internal energy related to transitional direction"; DIMENSION="energy"; }
    }
    SCALAR(Prop_Y_F) { if(Ileng==0) { DIMENSION="velocity";                 } else { DIMENSION="f";            } }
    SCALAR(Prop_Y_E) { DIMENSION="force"; }
    SCALAR(scale2) { if(Ileng==0) { DIMENSION="l";} else { DIMENSION="DIMENSIONLESS"; } }
    SEPARATOR("");
    SEPARATOR("Shear(Tz)");
    SCALAR(STIFF3){ if(Ileng==0) { DIMENSION="translation_stiffness"; } else { DIMENSION="force";                } }
    SCALAR(DAMP3) { if(Ileng==0) { DIMENSION="massFlux";             } else { DIMENSION="QUANTITY OF MOVEMENT"; } }
    SCALAR(Acoeft3) { DIMENSION="force"; } 
    SCALAR(Bcoeft3) { DIMENSION="force"; } 
    SCALAR(Dcoeft3){ if(Ileng==0) { DIMENSION="velocity";                 } else { DIMENSION="f";            } }
    FUNCTION(FUN_A3) {
      if(Ileng==0) { X_TITLE="dl";     X_DIMENSION="l";        }
      else             { X_TITLE="Strain"; X_DIMENSION="DIMENSIONLESS"; }
      Y_TITLE="f"; Y_DIMENSION="force";
      /FILTER/groupEnumField/1/EQ;
    }
    RADIO(HFLAG3)
    {
       ADD(0, "0: Nonlinear elastic spring.");
       ADD(1, "1: Nonlinear elastic plastic spring.");
       ADD(2, "2: Nonlinear elasto-plastic spring with decoupled hardening in tension and compression.");
       ADD(4, "4: Nonlinear elastic plastic spring kinematic� hardening.");
       ADD(5, "5: Nonlinear elasto-plastic spring with nonlinear unloading.");
    }
     FUNCTION(FUN_B3) {
      if(Ileng==0) { X_TITLE="dl/dt";       X_DIMENSION="velocity";     }
      else             { X_TITLE="Strain rate"; X_DIMENSION="f"; }
      Y_TITLE="g";     Y_DIMENSION="DIMENSIONLESS";
      /FILTER/groupEnumField/1/EQ;
    }
    FUNCTION(FUN_C3) {
      if((HFLAG3==4) && (Ileng==0)) {
    X_TITLE="dl";                    X_DIMENSION="l";
    Y_TITLE="f3";                    Y_DIMENSION="force";
      } else if((HFLAG3==4) && (Ileng!=0)) {
    X_TITLE="Strain";                X_DIMENSION="DIMENSIONLESS";
    Y_TITLE="f3";                    Y_DIMENSION="force";
      } else if((HFLAG3==5) && (Ileng==0)) {
    X_TITLE="Maximum displacement";  X_DIMENSION="l";
    Y_TITLE="Residual displacement"; Y_DIMENSION="l";
      } else if((HFLAG3==5) && (Ileng!=0)) {
    X_TITLE="Maximum strain";        X_DIMENSION="DIMENSIONLESS";
    Y_TITLE="Residual strain";       Y_DIMENSION="DIMENSIONLESS";
      }
      /FILTER/groupEnumField/1/EQ;
    }
    SCALAR(MIN_RUP3){
      if(Ileng==0 && Ifail2 < 2)        { TITLE="Negative failure displacement in transitional direction";  DIMENSION="l";        }
      else  if (Ileng==1 && Ifail2 < 2) { TITLE="Negative rupture strain"; DIMENSION="DIMENSIONLESS"; }
      else if (Ifail2 == 2) { TITLE="Negative failure force in transitional direction"; DIMENSION="force"; }
      else if (Ifail2 == 3) { TITLE="Negative failure internal energy related to transitional direction"; DIMENSION="energy"; }
    }
    SCALAR(MAX_RUP3) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Positive failure displacement in transitional direction";  DIMENSION="l";        }
      else  if (Ileng==1 && Ifail2 < 2) { TITLE="Positive rupture strain"; DIMENSION="DIMENSIONLESS";  }
      else if (Ifail2 == 2)  { TITLE="Positive failure force in transitional direction"; DIMENSION="force"; }
      else if (Ifail2 == 3)   { TITLE="Positive failure internal energy related to transitional direction"; DIMENSION="energy"; }
    }
    SCALAR(Prop_Z_F) { if(Ileng==0) { DIMENSION="velocity";                 } else { DIMENSION="f";            } }
    SCALAR(Prop_Z_E) { DIMENSION="force"; }
    SCALAR(scale3) { if(Ileng==0) { DIMENSION="l";} else { DIMENSION="DIMENSIONLESS"; } }
    SEPARATOR("");
    SEPARATOR("Torsion(Rx)");
    SCALAR(STIFF4){ if(Ileng==0) { DIMENSION="ROTATION STIFFNESS"; } else { DIMENSION="ROTATION STIFFNESS PER UNIT LENGTH"; }  }
    SCALAR(DAMP4){ if(Ileng==0) { DIMENSION="torsion_damping";    } else { DIMENSION="TORSION DAMPING PER UNIT LENGTH";    }  }
    SCALAR(Acoeft4) { DIMENSION="moment";}
    SCALAR(Bcoeft4) { DIMENSION="moment";}
    SCALAR(Dcoeft4) { if(Ileng==0) { DIMENSION="ang_velocity";      } else { DIMENSION="ANGULAR SPEED PER UNIT LENGTH";      }  }
    FUNCTION(FUN_A4,"f(r)") {
      if(Ileng==0) { X_TITLE="Angular disp.";          X_DIMENSION="a";                 }
      else             { X_TITLE="Angular disp. (lineic)"; X_DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      Y_TITLE="f"; Y_DIMENSION="moment";
      /FILTER/groupEnumField/1/EQ;
    }
    RADIO(HFLAG4)
    {
       ADD(0, "0: Nonlinear elastic spring.");
       ADD(1, "1: Nonlinear elastic plastic spring.");
       ADD(2, "2: Nonlinear elasto-plastic spring with decoupled hardening in tension and compression.");
       ADD(4, "4: Nonlinear elastic plastic spring kinematic� hardening.");
       ADD(5, "5: Nonlinear elasto-plastic spring with nonlinear unloading.");
    }
    FUNCTION(FUN_B4,"g(dr/dt)") {
      if(Ileng==0) { X_TITLE="Angular speed";          X_DIMENSION="ang_velocity"; } 
      else             { X_TITLE="Angular speed (lineic)"; X_DIMENSION="ANGULAR SPEED PER UNIT LENGTH"; }
      Y_TITLE="g";      Y_DIMENSION="DIMENSIONLESS";
      /FILTER/groupEnumField/1/EQ;
    }
    FUNCTION(FUN_C4) {
      if((HFLAG4==4) && (Ileng==0)) {
    X_TITLE="Angular disp.";               X_DIMENSION="a";
    Y_TITLE="f3";                          Y_DIMENSION="moment";
      } else if((HFLAG4==4) && (Ileng!=0)) {
    X_TITLE="Angular disp. (lineic)";      X_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
    Y_TITLE="f3";                          Y_DIMENSION="moment";
      } else if((HFLAG4==5) && (Ileng==0)) {
    X_TITLE="Max. angular disp.";          X_DIMENSION="a";
    Y_TITLE="Res. angular disp.";          Y_DIMENSION="a";
      } else if((HFLAG4==5) && (Ileng!=0)) {
    X_TITLE="Max. angular disp. (lineic)"; X_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
    Y_TITLE="Res. angular disp. (lineic)"; Y_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
      }
      /FILTER/groupEnumField/1/EQ;
    }
    SCALAR(MIN_RUP4) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Negative failure displacement in rotational direction";  DIMENSION="a";        }
      else  if (Ileng==1 && Ifail2 < 2) { TITLE="Negative rupture strain"; DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      else if (Ifail2 == 2)  { TITLE="Negative failure force in rotational direction"; DIMENSION="moment"; }
      else if (Ifail2 == 3)   { TITLE="Negative failure internal energy related to rotational"; DIMENSION="energy"; }
    }
    SCALAR(MAX_RUP4) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Positive failure displacement in rotational direction";  DIMENSION="a";        }
      else  if (Ileng==1 && Ifail2 < 2) { TITLE="Positive rupture strain"; DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      else if (Ifail2 == 2)  { TITLE="Positive failure force in rotational direction"; DIMENSION="moment"; }
      else if (Ifail2 == 3)   { TITLE="Positive failure internal energy related to rotational direction"; DIMENSION="energy"; }
    }    
    SCALAR(Prop_Tor_F){ if(Ileng==0) { DIMENSION="ang_velocity"; } else { DIMENSION="ANGULAR SPEED PER UNIT LENGTH"; }  }
    SCALAR(Prop_Tor_E){ DIMENSION="moment"; } 
    SCALAR(scale4) { if(Ileng==0) { DIMENSION="a";} else { DIMENSION="PLANE ANGLE PER UNIT LENGTH"; } }
    SEPARATOR("");
    SEPARATOR("Bending(Ry)");
    SCALAR(STIFF5){ if(Ileng==0) { DIMENSION="ROTATION STIFFNESS"; } else { DIMENSION="ROTATION STIFFNESS PER UNIT LENGTH"; }  }
    SCALAR(DAMP5){ if(Ileng==0) { DIMENSION="torsion_damping";    } else { DIMENSION="TORSION DAMPING PER UNIT LENGTH";    }  }
    SCALAR(Acoeft5){ DIMENSION="moment";}
    SCALAR(Bcoeft5){ DIMENSION="moment";}
    SCALAR(Dcoeft5) { if(Ileng==0) { DIMENSION="ang_velocity";      } else { DIMENSION="ANGULAR SPEED PER UNIT LENGTH";      }  }
    FUNCTION(FUN_A5,"f(r)") {
      if(Ileng==0) { X_TITLE="Angular disp.";          X_DIMENSION="a";                 }
      else             { X_TITLE="Angular disp. (lineic)"; X_DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      Y_TITLE="f"; Y_DIMENSION="moment";
      /FILTER/groupEnumField/1/EQ;
    }
    RADIO(HFLAG5)
    {
       ADD(0, "0: Nonlinear elastic spring.");
       ADD(1, "1: Nonlinear elastic plastic spring.");
       ADD(2, "2: Nonlinear elasto-plastic spring with decoupled hardening in tension and compression.");
       ADD(4, "4: Nonlinear elastic plastic spring kinematic hardening.");
       ADD(5, "5: Nonlinear elasto-plastic spring with nonlinear unloading.");
    }
    FUNCTION(FUN_B5,"g(dr/dt)") {
      if(Ileng==0) { X_TITLE="Angular speed";          X_DIMENSION="ang_velocity"; } 
      else             { X_TITLE="Angular speed (lineic)"; X_DIMENSION="ANGULAR SPEED PER UNIT LENGTH"; }
      Y_TITLE="g";      Y_DIMENSION="DIMENSIONLESS";
      /FILTER/groupEnumField/1/EQ;
    }
    FUNCTION(FUN_C5) {
      if((HFLAG5==4) && (Ileng==0)) {
    X_TITLE="Angular disp.";               X_DIMENSION="a";
    Y_TITLE="f3";                          Y_DIMENSION="moment";
      } else if((HFLAG5==4) && (Ileng!=0)) {
    X_TITLE="Angular disp. (lineic)";      X_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
    Y_TITLE="f3";                          Y_DIMENSION="moment";
      } else if((HFLAG5==5) && (Ileng==0)) {
    X_TITLE="Max. angular disp.";          X_DIMENSION="a";
    Y_TITLE="Res. angular disp.";          Y_DIMENSION="a";
      } else if((HFLAG5==5) && (Ileng!=0)) {
    X_TITLE="Max. angular disp. (lineic)"; X_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
    Y_TITLE="Res. angular disp. (lineic)"; Y_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
      }
      /FILTER/groupEnumField/1/EQ;
    }
    SCALAR(MIN_RUP5) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Negative failure displacement in rotational direction";  DIMENSION="a";        }
      else  if (Ileng==1 && Ifail2 < 2) { TITLE="Negative rupture strain"; DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      else if (Ifail2 == 2)  { TITLE="Negative failure force in rotational direction"; DIMENSION="moment"; }
      else if (Ifail2 == 3)   { TITLE="Negative failure internal energy related to rotational"; DIMENSION="energy"; }
    }
    SCALAR(MAX_RUP5) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Positive failure displacement in rotational direction";  DIMENSION="a";        }
      else  if (Ileng==1 && Ifail2 < 2) { TITLE="Positive rupture strain"; DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      else if (Ifail2 == 2)  { TITLE="Positive failure force in rotational direction"; DIMENSION="moment"; }
      else if (Ifail2 == 3)   { TITLE="Positive failure internal energy related to rotational direction"; DIMENSION="energy"; }
    }       
    SCALAR(Prop_FlxY_F){ if(Ileng==0) { DIMENSION="ang_velocity"; } else { DIMENSION="ANGULAR SPEED PER UNIT LENGTH"; }  }
    SCALAR(Prop_FlxY_E){ DIMENSION="moment"; } 
    SCALAR(scale5) { if(Ileng==0) { DIMENSION="a";} else { DIMENSION="PLANE ANGLE PER UNIT LENGTH"; } }
    SEPARATOR("");
    SEPARATOR("Bending(Rz)");
    SCALAR(STIFF6){ if(Ileng==0) { DIMENSION="ROTATION STIFFNESS"; } else { DIMENSION="ROTATION STIFFNESS PER UNIT LENGTH"; }  }
    SCALAR(DAMP6){ if(Ileng==0) { DIMENSION="torsion_damping";    } else { DIMENSION="TORSION DAMPING PER UNIT LENGTH";    }  }
    SCALAR(Acoeft6){ DIMENSION="moment";}
    SCALAR(Bcoeft6){ DIMENSION="moment";}
    SCALAR(Dcoeft6) { if(Ileng==0) { DIMENSION="ang_velocity";      } else { DIMENSION="ANGULAR SPEED PER UNIT LENGTH";      }  }
    FUNCTION(FUN_A6,"f(r)") {
      if(Ileng==0) { X_TITLE="Angular disp.";          X_DIMENSION="a";                 }
      else             { X_TITLE="Angular disp. (lineic)"; X_DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      Y_TITLE="f"; Y_DIMENSION="moment";
      /FILTER/groupEnumField/1/EQ;
    }
    RADIO(HFLAG6)
    {
       ADD(0, "0: Nonlinear elastic spring.");
       ADD(1, "1: Nonlinear elastic plastic spring.");
       ADD(2, "2: Nonlinear elasto-plastic spring with decoupled hardening in tension and compression.");
       ADD(4, "4: Nonlinear elastic plastic spring kinematic hardening.");
       ADD(5, "5: Nonlinear elasto-plastic spring with nonlinear unloading.");
    }
    FUNCTION(FUN_B6,"g(dr/dt)") {
      if(Ileng==0) { X_TITLE="Angular speed";          X_DIMENSION="ang_velocity"; } 
      else             { X_TITLE="Angular speed (lineic)"; X_DIMENSION="ANGULAR SPEED PER UNIT LENGTH"; }
      Y_TITLE="g";      Y_DIMENSION="DIMENSIONLESS";
      /FILTER/groupEnumField/1/EQ;
    }
    FUNCTION(FUN_C6) {
      if((HFLAG6==4) && (Ileng==0)) {
    X_TITLE="Angular disp.";               X_DIMENSION="a";
    Y_TITLE="f3";                          Y_DIMENSION="moment";
      } else if((HFLAG6==4) && (Ileng!=0)) {
    X_TITLE="Angular disp. (lineic)";      X_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
    Y_TITLE="f3";                          Y_DIMENSION="moment";
      } else if((HFLAG6==5) && (Ileng==0)) {
    X_TITLE="Max. angular disp.";          X_DIMENSION="a";
    Y_TITLE="Res. angular disp.";          Y_DIMENSION="a";
      } else if((HFLAG6==5) && (Ileng!=0)) {
    X_TITLE="Max. angular disp. (lineic)"; X_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
    Y_TITLE="Res. angular disp. (lineic)"; Y_DIMENSION="PLANE ANGLE PER UNIT LENGTH";
      }
      /FILTER/groupEnumField/1/EQ;
    }
    SCALAR(MIN_RUP6) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Negative failure displacement in rotational direction";  DIMENSION="a";        }
      else  if (Ileng==1 && Ifail2 < 2) { TITLE="Negative rupture strain"; DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      else if (Ifail2 == 2)  { TITLE="Negative failure force in rotational direction"; DIMENSION="moment"; }
      else if (Ifail2 == 3)   { TITLE="Negative failure internal energy related to rotational"; DIMENSION="energy"; }
    }
    SCALAR(MAX_RUP6) {
      if(Ileng==0 && Ifail2 < 2)          { TITLE="Positive failure displacement in rotational direction";  DIMENSION="a";        }
      else  if (Ileng==1 && Ifail2 < 2) { TITLE="Positive rupture strain"; DIMENSION="PLANE ANGLE PER UNIT LENGTH"; }
      else if (Ifail2 == 2)  { TITLE="Positive failure force in rotational direction"; DIMENSION="moment"; }
      else if (Ifail2 == 3)   { TITLE="Positive failure internal energy related to rotational direction"; DIMENSION="energy"; }
    }       
    SCALAR(Prop_FlxZ_F){ if(Ileng==0) { DIMENSION="ang_velocity"; } else { DIMENSION="ANGULAR SPEED PER UNIT LENGTH"; }  }
    SCALAR(Prop_FlxZ_E){ DIMENSION="moment"; } 
    SCALAR(scale6) { if(Ileng==0) { DIMENSION="a";} else { DIMENSION="PLANE ANGLE PER UNIT LENGTH"; } }
    SEPARATOR("");
    SEPARATOR("Velocity Dependent Failure Parameters");
    SCALAR(TRANS_VEL0)   { DIMENSION="velocity";                 }
    SCALAR(ROT_VEL0)     { DIMENSION="ang_velocity";         }    
    SEPARATOR("");
    SEPARATOR("Tension(Tx)");
    SCALAR(C1) {
      if(Ileng==0 && Ifail2 < 2)  { DIMENSION="l";        }
      else if(Ileng==1 && Ifail2 < 2)  { DIMENSION="DIMENSIONLESS";        }
      else if( Ifail2 == 2)  { DIMENSION="force";        }
      else if( Ifail2 == 3)  { DIMENSION="energy";        }
    }
    SCALAR(REL_VEL_EXP1);
    SCALAR(ALPHA1);
    SCALAR(BETA1);
    SEPARATOR("");
    SEPARATOR("Shear(Txy)");
    SCALAR(C2) {
      if(Ileng==0 && Ifail2 < 2)  { DIMENSION="l";        }
      else if(Ileng==1 && Ifail2 < 2)  { DIMENSION="DIMENSIONLESS";        }
      else if( Ifail2 == 2)  { DIMENSION="force";        }
      else if( Ifail2 == 3)  { DIMENSION="energy";        }
    }
    SCALAR(REL_VEL_EXP2);
    SCALAR(ALPHA2);
    SCALAR(BETA2);
    SEPARATOR("");
    SEPARATOR("Shear(Txz)");
    SCALAR(C3) {
      if(Ileng==0 && Ifail2 < 2)  { DIMENSION="l";        }
      else if(Ileng==1 && Ifail2 < 2)  { DIMENSION="DIMENSIONLESS";        }
      else if( Ifail2 == 2)  { DIMENSION="force";        }
      else if( Ifail2 == 3)  { DIMENSION="energy";        }
    }
    SCALAR(REL_VEL_EXP3);
    SCALAR(ALPHA3);
    SCALAR(BETA3);
    SEPARATOR("");
    SEPARATOR("Torsion(Rx)");
    SCALAR(C4) {
      if(Ileng==0 && Ifail2 < 2)  { DIMENSION="a";        }
      else if(Ileng==1 && Ifail2 < 2)  { DIMENSION="PLANE ANGLE PER UNIT LENGTH";        }
      else if( Ifail2 == 2)  { DIMENSION="moment";        }
      else if( Ifail2 == 3)  { DIMENSION="energy";        }
    } 
    SCALAR(REL_VEL_EXP4);
    SCALAR(ALPHA4);
    SCALAR(BETA4);
    SEPARATOR("");
    SEPARATOR("Bending(Ry)");
    SCALAR(C5)  {
      if(Ileng==0 && Ifail2 < 2)  { DIMENSION="a";        }
      else if(Ileng==1 && Ifail2 < 2)  { DIMENSION="PLANE ANGLE PER UNIT LENGTH";        }
      else if( Ifail2 == 2)  { DIMENSION="moment";        }
      else if( Ifail2 == 3)  { DIMENSION="energy";        }
    } 
    SCALAR(REL_VEL_EXP5);
    SCALAR(ALPHA5);
    SCALAR(BETA5);
    SEPARATOR("");
    SEPARATOR("Bending(Rz)");
    SCALAR(C6)  {
      if(Ileng==0 && Ifail2 < 2)  { DIMENSION="a";        }
      else if(Ileng==1 && Ifail2 < 2)  { DIMENSION="PLANE ANGLE PER UNIT LENGTH";        }
      else if( Ifail2 == 2)  { DIMENSION="moment";        }
      else if( Ifail2 == 3)  { DIMENSION="energy";        }
    } 
    SCALAR(REL_VEL_EXP6);
    SCALAR(ALPHA6);
    SCALAR(BETA6);
}

//File format for Radioss 90
FORMAT(radioss90)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE13/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SPR_BEAM/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#               Mass             Inertia   skew_ID   senS_ID    Isflag     Ifail     Ileng    Ifail2");
    CARD("%20lg%20lg%10d%10d%10d%10d%10d%10d",MASS,INERTIA,SKEW_CSID,ISENSOR,ISFLAG,Ifail,Ileng,Ifail2); 
    //Tx
    COMMENT("#             K_tens              C_tens              A_tens              B_tens              D_tens");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF1,DAMP1,Acoeft1,Bcoeft1,Dcoeft1);
    COMMENT("#  fct_ID1    H_tens   fct_ID2   fct_ID3                           DeltaMin_tens       DeltaMax_tens");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A1,HFLAG1,FUN_B1,FUN_C1,MIN_RUP1,MAX_RUP1);
    COMMENT("#        Fscale_tens              E_tens         Ascale_tens");
    CARD("%20lg%20lg%20lg",Prop_X_F,Prop_X_E,scale1);
    //Ty
    COMMENT("#           KY_Shear            CY_Shear            AY_Shear            BY_Shear            DY_Shear");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF2,DAMP2,Acoeft2,Bcoeft2,Dcoeft2);
    COMMENT("# fct_ID21  HY_Shear  fct_ID22  fct_ID23                         DeltaMinY_Shear     DeltaMaxY_Shear");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A2,HFLAG2,FUN_B2,FUN_C2,MIN_RUP2,MAX_RUP2);
    COMMENT("#      FscaleY_Shear            EY_Shear       AscaleY_Shear");
    CARD("%20lg%20lg%20lg",Prop_Y_F,Prop_Y_E,scale2);
    //Tz
    COMMENT("#           KZ_Shear            CZ_Shear            AZ_Shear            BZ_Shear            DZ_Shear");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF3,DAMP3,Acoeft3,Bcoeft3,Dcoeft3);
    COMMENT("# fct_ID24  HZ_Shear  fct_ID25  fct_ID26                         DeltaminZ_Shear     DeltaMaxZ_Shear");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A3,HFLAG3,FUN_B3,FUN_C3,MIN_RUP3,MAX_RUP3);
    COMMENT("#      FscaleZ Shear            EZ Shear       AscaleZ Shear");
    CARD("%20lg%20lg%20lg",Prop_Z_F,Prop_Z_E,scale3);
    //Rx
    COMMENT("#             K_tors              C_tors              A_tors              B_tors              D_tors");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF4,DAMP4,Acoeft4,Bcoeft4,Dcoeft4);
    COMMENT("# fct_ID11    H_tors  fct_ID12  fct_ID13                           ThetaMin_tors       ThetaMax_tors");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A4,HFLAG4,FUN_B4,FUN_C4,MIN_RUP4,MAX_RUP4);
    COMMENT("#        Fscale_tors              E_Tors         Ascale_tors");
    CARD("%20lg%20lg%20lg",Prop_Tor_F,Prop_Tor_E,scale4);
    //Ry
    COMMENT("#            KY_Bend             CY_Bend             AY_Bend             BY_Bend             DY_Bend");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF5,DAMP5,Acoeft5,Bcoeft5,Dcoeft5);
    COMMENT("# fct_ID31   HY_Bend  fct_ID32  fct_ID33                          ThetaMinY_Bend      ThetaMaxY_Bend");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A5,HFLAG5,FUN_B5,FUN_C5,MIN_RUP5,MAX_RUP5);
    COMMENT("#       FscaleY_Bend        EscaleY_Bend        AscaleY_Bend");
    CARD("%20lg%20lg%20lg",Prop_FlxY_F,Prop_FlxY_E,scale5);
    //Rz
    COMMENT("#            KZ_Bend             CZ_Bend             AZ_Bend             BZ_Bend             DZ_Bend");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF6,DAMP6,Acoeft6,Bcoeft6,Dcoeft6);
    COMMENT("# fct_ID34   HZ_Bend  fct_ID35  fct_ID36                          ThetaMinZ_Bend      ThetaMaxZ_Bend");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A6,HFLAG6,FUN_B6,FUN_C6,MIN_RUP6,MAX_RUP6);
    COMMENT("#       FscaleZ_Bend             EZ_Bend        AscaleZ_Bend");
    CARD("%20lg%20lg%20lg",Prop_FlxZ_F,Prop_FlxZ_E,scale6);
    COMMENT("#                 Vo                  Wo");
    CARD("%20lg%20lg",TRANS_VEL0,ROT_VEL0);
    //Tx
    COMMENT("#                 c1                  n1              alpha1               beta1");
    CARD("%20lg%20lg%20lg%20lg",C1,REL_VEL_EXP1,ALPHA1,BETA1);
    //Ty
    COMMENT("#          cXY_Shear           nXY_Shear       alphaXY_Shear        betaXY_Shear");
    CARD("%20lg%20lg%20lg%20lg",C2,REL_VEL_EXP2,ALPHA2,BETA2);
    //Tz
    COMMENT("#          cXZ_Shear          ncXZ_Shear      alphacXZ_Shear       betacXZ_Shear");
    CARD("%20lg%20lg%20lg%20lg",C3,REL_VEL_EXP3,ALPHA3,BETA3);
    //Rx
    COMMENT("#            cX_Tors             nX_Tors         alphaX_Tors          betaX_Tors");
    CARD("%20lg%20lg%20lg%20lg",C4,REL_VEL_EXP4,ALPHA4,BETA4);
    //Ry
    COMMENT("#            cY_Bend             nY_Bend         alphaY_Bend          betaY_Bend");
    CARD("%20lg%20lg%20lg%20lg",C5,REL_VEL_EXP5,ALPHA5,BETA5);
    //Rz
    COMMENT("#            cZ_Bend             nZ_Bend         alphaZ_Bend          betaZ_Bend");
    CARD("%20lg%20lg%20lg%20lg",C6,REL_VEL_EXP6,ALPHA6,BETA6);
}
//File format for Radioss 51
FORMAT(radioss51)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE13/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SPR_BEAM/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#               Mass             Inertia   skew_ID   senS_ID    Isflag     Ifail     Ileng    Ifail2");
    CARD("%20lg%20lg%10d%10d%10d%10d%10d%10d",MASS,INERTIA,SKEW_CSID,ISENSOR,ISFLAG,Ifail,Ileng,Ifail2);
    //Tx
    COMMENT("#             K_tens              C_tens              A_tens              B_tens              D_tens");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF1,DAMP1,Acoeft1,Bcoeft1,Dcoeft1);
    COMMENT("#  fct_ID1    H_tens   fct_ID2   fct_ID3                           DeltaMin_tens       DeltaMax_tens");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A1,HFLAG1,FUN_B1,FUN_C1,MIN_RUP1,MAX_RUP1);
    COMMENT("#        Fscale_tens              E_tens");
    CARD("%20lg%20lg",Prop_X_F,Prop_X_E);
    //Ty
    COMMENT("#           KY_Shear            CY_Shear            AY_Shear            BY_Shear            DY_Shear");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF2,DAMP2,Acoeft2,Bcoeft2,Dcoeft2);
    COMMENT("# fct_ID21  HY_Shear  fct_ID22  fct_ID23                         DeltaMinY_Shear     DeltaMaxY_Shear");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A2,HFLAG2,FUN_B2,FUN_C2,MIN_RUP2,MAX_RUP2);
    COMMENT("#      FscaleY_Shear            EY_Shear");
    CARD("%20lg%20lg",Prop_Y_F,Prop_Y_E);
    //Tz
    COMMENT("#           KZ_Shear            CZ_Shear            AZ_Shear            BZ_Shear            DZ_Shear");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF3,DAMP3,Acoeft3,Bcoeft3,Dcoeft3);
    COMMENT("# fct_ID24  HZ_Shear  fct_ID25  fct_ID26                         DeltaminZ_Shear     DeltaMaxZ_Shear");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A3,HFLAG3,FUN_B3,FUN_C3,MIN_RUP3,MAX_RUP3);
    COMMENT("#      FscaleZ Shear            EZ Shear");
    CARD("%20lg%20lg",Prop_Z_F,Prop_Z_E);
    //Rx
    COMMENT("#             K_tors              C_tors              A_tors              B_tors              D_tors");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF4,DAMP4,Acoeft4,Bcoeft4,Dcoeft4);
    COMMENT("# fct_ID11    H_tors  fct_ID12  fct_ID13                           ThetaMin_tors       ThetaMax_tors");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A4,HFLAG4,FUN_B4,FUN_C4,MIN_RUP4,MAX_RUP4);
    COMMENT("#        Fscale_tors              E_Tors");
    CARD("%20lg%20lg",Prop_Tor_F,Prop_Tor_E);
    //Ry
    COMMENT("#            KY_Bend             CY_Bend             AY_Bend             BY_Bend             DY_Bend");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF5,DAMP5,Acoeft5,Bcoeft5,Dcoeft5);
    COMMENT("# fct_ID31   HY_Bend  fct_ID32  fct_ID33                          ThetaMinY_Bend      ThetaMaxY_Bend");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A5,HFLAG5,FUN_B5,FUN_C5,MIN_RUP5,MAX_RUP5);
    COMMENT("#       FscaleY_Bend        EscaleY_Bend");
    CARD("%20lg%20lg",Prop_FlxY_F,Prop_FlxY_E);
    //Rz
    COMMENT("#            KZ_Bend             CZ_Bend             AZ_Bend             BZ_Bend             DZ_Bend");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF6,DAMP6,Acoeft6,Bcoeft6,Dcoeft6);
    COMMENT("# fct_ID34   HZ_Bend  fct_ID35  fct_ID36                          ThetaMinZ_Bend      ThetaMaxZ_Bend");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A6,HFLAG6,FUN_B6,FUN_C6,MIN_RUP6,MAX_RUP6);
    COMMENT("#       FscaleZ_Bend             EZ_Bend");
    CARD("%20lg%20lg",Prop_FlxZ_F,Prop_FlxZ_E);
    COMMENT("#                 Vo                  Wo");
    CARD("%20lg%20lg",TRANS_VEL0,ROT_VEL0);
    //Tx
    COMMENT("#                 c1                  n1              alpha1               beta1");
    CARD("%20lg%20lg%20lg%20lg",C1,REL_VEL_EXP1,ALPHA1,BETA1);
    //Ty
    COMMENT("#          cXY_Shear           nXY_Shear       alphaXY_Shear        betaXY_Shear");
    CARD("%20lg%20lg%20lg%20lg",C2,REL_VEL_EXP2,ALPHA2,BETA2);
    //Tz
    COMMENT("#          cXZ_Shear          ncXZ_Shear      alphacXZ_Shear       betacXZ_Shear");
    CARD("%20lg%20lg%20lg%20lg",C3,REL_VEL_EXP3,ALPHA3,BETA3);
    //Rx
    COMMENT("#            cX_Tors             nX_Tors         alphaX_Tors          betaX_Tors");
    CARD("%20lg%20lg%20lg%20lg",C4,REL_VEL_EXP4,ALPHA4,BETA4);
    //Ry
    COMMENT("#            cY_Bend             nY_Bend         alphaY_Bend          betaY_Bend");
    CARD("%20lg%20lg%20lg%20lg",C5,REL_VEL_EXP5,ALPHA5,BETA5);
    //Rz
    COMMENT("#            cZ_Bend             nZ_Bend         alphaZ_Bend          betaZ_Bend");
    CARD("%20lg%20lg%20lg%20lg",C6,REL_VEL_EXP6,ALPHA6,BETA6);
}

//File format for Radioss 44
FORMAT(radioss44)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s/%d/%s",TYPE_NO,_ID_,TITLE);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    COMMENT("#           Mass       Inertia  skew_ID  senS_ID  Isflag   Ifail   Ileng  Ifail2");
    CARD("%16lg%16lg%8d%8d%8d%8d%8d%8d",MASS,INERTIA,SKEW_CSID,ISENSOR,ISFLAG,Ifail,Ileng,Ifail2);
    //Tx
    COMMENT("#         K_tens          C_tens          A_tens          B_tens          D_tens");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF1,DAMP1,Acoeft1,Bcoeft1,Dcoeft1);
    COMMENT("#fct_ID1  H_tens fct_ID2 fct_ID3                   DeltaMin_tens   DeltaMax_tens");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A1,HFLAG1,FUN_B1,FUN_C1,MIN_RUP1,MAX_RUP1);    
    //Ty
    COMMENT("#       KY_Shear        CY_Shear        AY_Shear        BY_Shear        DY_Shear");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF2,DAMP2,Acoeft2,Bcoeft2,Dcoeft2);
    COMMENT("#fct_ID21 HY_Shear fct_ID22 fct_ID23             DeltaMinY_Shear DeltaMaxY_Shear");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A2,HFLAG2,FUN_B2,FUN_C2,MIN_RUP2,MAX_RUP2);
    //Tz
    COMMENT("#           KZ_Shear            CZ_Shear            AZ_Shear            BZ_Shear            DZ_Shear");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF3,DAMP3,Acoeft3,Bcoeft3,Dcoeft3);
    COMMENT("# fct_ID24  HZ_Shear  fct_ID25  fct_ID26                         DeltaminZ_Shear     DeltaMaxZ_Shear");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A3,HFLAG3,FUN_B3,FUN_C3,MIN_RUP3,MAX_RUP3);
    //Rx
    COMMENT("#         K_tors          C_tors          A_tors          B_tors          D_tors");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF4,DAMP4,Acoeft4,Bcoeft4,Dcoeft4);
    COMMENT("#            KY_Bend             CY_Bend             AY_Bend             BY_Bend             DY_Bend");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A4,HFLAG4,FUN_B4,FUN_C4,MIN_RUP4,MAX_RUP4);
    //Ry
    COMMENT("#        KY_Bend         CY_Bend         AY_Bend         BY_Bend         DY_Bend");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF5,DAMP5,Acoeft5,Bcoeft5,Dcoeft5);
    COMMENT("#fct_ID31 HY_Bend fct_ID32 fct_ID33               ThetaMinY_Bend  ThetaMaxY_Bend");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A5,HFLAG5,FUN_B5,FUN_C5,MIN_RUP5,MAX_RUP5);
    //Rz
     COMMENT("#        KZ_Bend         CZ_Bend         AZ_Bend         BZ_Bend         DZ_Bend");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF6,DAMP6,Acoeft6,Bcoeft6,Dcoeft6);
    COMMENT("#fct_ID34 HZ_Bend fct_ID35 fct_ID36               ThetaMinZ_Bend  ThetaMaxZ_Bend");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A6,HFLAG6,FUN_B6,FUN_C6,MIN_RUP6,MAX_RUP6);
    COMMENT("#             Vo              Wo");
    CARD("%16lg%16lg",TRANS_VEL0,ROT_VEL0);
    //Tx
    COMMENT("#             c1              n1          alpha1           beta1");
    CARD("%16lg%16lg%16lg%16lg",C1,REL_VEL_EXP1,ALPHA1,BETA1);
    //Ty
    COMMENT("#      cXY_Shear       nXY_Shear   alphaXY_Shear    betaXY_Shear");
    CARD("%16lg%16lg%16lg%16lg",C2,REL_VEL_EXP2,ALPHA2,BETA2);
    //Tz
    COMMENT("#      cXZ_Shear      ncXZ_Shear  alphacXZ_Shear   betacXZ_Shear");
    CARD("%16lg%16lg%16lg%16lg",C3,REL_VEL_EXP3,ALPHA3,BETA3);
    //Rx
    COMMENT("#        cX_Tors         nX_Tors     alphaX_Tors      betaX_Tors");
    CARD("%16lg%16lg%16lg%16lg",C4,REL_VEL_EXP4,ALPHA4,BETA4);
    //Ry
    COMMENT("#        cY_Bend         nY_Bend     alphaY_Bend      betaY_Bend");
    CARD("%16lg%16lg%16lg%16lg",C5,REL_VEL_EXP5,ALPHA5,BETA5);
    //Rz
    COMMENT("#        cZ_Bend         nZ_Bend     alphaZ_Bend      betaZ_Bend");
    CARD("%16lg%16lg%16lg%16lg",C6,REL_VEL_EXP6,ALPHA6,BETA6);
}
//File format for Radioss 42
FORMAT(radioss42)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s/%d/%s",TYPE_NO,_ID_,TITLE);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    COMMENT("#           Mass       Inertia  skew_ID  senS_ID  Isflag   Ifail   Ileng");
    CARD("%16lg%16lg%8d%8d%8d%8d%8d",MASS,INERTIA,SKEW_CSID,ISENSOR,ISFLAG,Ifail,Ileng);
    //Tx
    COMMENT("#         K_tens          C_tens          A_tens          B_tens          D_tens");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF1,DAMP1,Acoeft1,Bcoeft1,Dcoeft1);
    COMMENT("#fct_ID1  H_tens fct_ID2 fct_ID3                   DeltaMin_tens   DeltaMax_tens");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A1,HFLAG1,FUN_B1,FUN_C1,MIN_RUP1,MAX_RUP1);
    //Ty
    COMMENT("#       KY_Shear        CY_Shear        AY_Shear        BY_Shear        DY_Shear");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF2,DAMP2,Acoeft2,Bcoeft2,Dcoeft2);
    COMMENT("#fct_ID21 HY_Shear fct_ID22 fct_ID23             DeltaMinY_Shear DeltaMaxY_Shear");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A2,HFLAG2,FUN_B2,FUN_C2,MIN_RUP2,MAX_RUP2);
    //Tz
    COMMENT("#           KZ_Shear            CZ_Shear            AZ_Shear            BZ_Shear            DZ_Shear");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF3,DAMP3,Acoeft3,Bcoeft3,Dcoeft3);
    COMMENT("# fct_ID24  HZ_Shear  fct_ID25  fct_ID26                         DeltaminZ_Shear     DeltaMaxZ_Shear");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A3,HFLAG3,FUN_B3,FUN_C3,MIN_RUP3,MAX_RUP3);
    //Rx
    COMMENT("#         K_tors          C_tors          A_tors          B_tors          D_tors");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF4,DAMP4,Acoeft4,Bcoeft4,Dcoeft4);
    COMMENT("#            KY_Bend             CY_Bend             AY_Bend             BY_Bend             DY_Bend");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A4,HFLAG4,FUN_B4,FUN_C4,MIN_RUP4,MAX_RUP4);
    //Ry
    COMMENT("#        KY_Bend         CY_Bend         AY_Bend         BY_Bend         DY_Bend");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF5,DAMP5,Acoeft5,Bcoeft5,Dcoeft5);
    COMMENT("#fct_ID31 HY_Bend fct_ID32 fct_ID33               ThetaMinY_Bend  ThetaMaxY_Bend");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A5,HFLAG5,FUN_B5,FUN_C5,MIN_RUP5,MAX_RUP5);
    //Rz
     COMMENT("#        KZ_Bend         CZ_Bend         AZ_Bend         BZ_Bend         DZ_Bend");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF6,DAMP6,Acoeft6,Bcoeft6,Dcoeft6);
    COMMENT("#fct_ID34 HZ_Bend fct_ID35 fct_ID36               ThetaMinZ_Bend  ThetaMaxZ_Bend");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A6,HFLAG6,FUN_B6,FUN_C6,MIN_RUP6,MAX_RUP6);
}

// File format for Radioss 41
FORMAT(radioss41) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s/%d/%s",TYPE_NO,_ID_,TITLE);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    COMMENT("#           Mass       Inertia  skew_ID  senS_ID  Isflag   Ifail");
    CARD("%16lg%16lg%8d%8d%8d%8d",MASS,INERTIA,SKEW_CSID,ISENSOR,ISFLAG,Ifail);
    //Tx
    COMMENT("#         K_tens          C_tens          A_tens          B_tens          D_tens");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF1,DAMP1,Acoeft1,Bcoeft1,Dcoeft1);
    COMMENT("#fct_ID1  H_tens fct_ID2 fct_ID3                   DeltaMin_tens   DeltaMax_tens");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A1,HFLAG1,FUN_B1,FUN_C1,MIN_RUP1,MAX_RUP1);
    //Ty
    COMMENT("#       KY_Shear        CY_Shear        AY_Shear        BY_Shear        DY_Shear");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF2,DAMP2,Acoeft2,Bcoeft2,Dcoeft2);
    COMMENT("#fct_ID21 HY_Shear fct_ID22 fct_ID23             DeltaMinY_Shear DeltaMaxY_Shear");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A2,HFLAG2,FUN_B2,FUN_C2,MIN_RUP2,MAX_RUP2);
    //Tz
    COMMENT("#           KZ_Shear            CZ_Shear            AZ_Shear            BZ_Shear            DZ_Shear");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF3,DAMP3,Acoeft3,Bcoeft3,Dcoeft3);
    COMMENT("# fct_ID24  HZ_Shear  fct_ID25  fct_ID26                         DeltaminZ_Shear     DeltaMaxZ_Shear");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A3,HFLAG3,FUN_B3,FUN_C3,MIN_RUP3,MAX_RUP3);
    //Rx
    COMMENT("#         K_tors          C_tors          A_tors          B_tors          D_tors");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF4,DAMP4,Acoeft4,Bcoeft4,Dcoeft4);
    COMMENT("#            KY_Bend             CY_Bend             AY_Bend             BY_Bend             DY_Bend");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A4,HFLAG4,FUN_B4,FUN_C4,MIN_RUP4,MAX_RUP4);
    //Ry
    COMMENT("#        KY_Bend         CY_Bend         AY_Bend         BY_Bend         DY_Bend");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF5,DAMP5,Acoeft5,Bcoeft5,Dcoeft5);
    COMMENT("#fct_ID31 HY_Bend fct_ID32 fct_ID33               ThetaMinY_Bend  ThetaMaxY_Bend");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A5,HFLAG5,FUN_B5,FUN_C5,MIN_RUP5,MAX_RUP5);
    //Rz
     COMMENT("#        KZ_Bend         CZ_Bend         AZ_Bend         BZ_Bend         DZ_Bend");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF6,DAMP6,Acoeft6,Bcoeft6,Dcoeft6);
    COMMENT("#fct_ID34 HZ_Bend fct_ID35 fct_ID36               ThetaMinZ_Bend  ThetaMaxZ_Bend");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A6,HFLAG6,FUN_B6,FUN_C6,MIN_RUP6,MAX_RUP6);
}
