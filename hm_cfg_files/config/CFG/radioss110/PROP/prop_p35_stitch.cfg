//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// /PROP/TYPE35/
//

ATTRIBUTES(COMMON)
{
    // INPUT ATTRIBUTES

    // Card 1
    Amas                                    = VALUE(FLOAT, "Mass per unit length");
    Elastif                                 = VALUE(FLOAT, "Stiffness per unit length");
    Xlim1                                   = VALUE(FLOAT, "Tension transition deformation");
    Xk                                      = VALUE(FLOAT, "Stiffness for interface");

    // Card 2
    FUN_A1                                  = VALUE(FUNCT, "Initial tension function identifier");
    FUN_B1                                  = VALUE(FUNCT, "Initial compression function identifier");
    FUN_C1                                  = VALUE(FUNCT, "Final tension function identifier");
    FUN_D1                                  = VALUE(FUNCT, "Final compression function identifier");
    Damg                                    = VALUE(FLOAT, "Damage factor");
    Fdelay                                  = VALUE(FLOAT, "Failure delay factor");

    // HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    CommentEnumField                        = VALUE(INT,"User Comments");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    Prop_Name_OR_Type                       = VALUE(INT, "");
    IO_FLAG                                 = VALUE(INT, "");
    TYPE_NO                                 = VALUE(STRING, "");
    TITLE                                   = VALUE(STRING,"Property title");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES

    // Card 1
    Amas                                    = -1;
    Elastif                                 = -1;
    Xlim1                                   = -1;
    Xk                                      =  841;

    // Card 2
    FUN_A1                                  =   45;
    FUN_B1                                  =  168;
    FUN_C1                                  = 1189;
    FUN_D1                                  = 8035;
    Damg                                    = -1;
    Fdelay                                  = -1;

    //HM INTERNAL
    KEYWORD_STR                             = 9000;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;
    NUM_COMMENTS                            = 5110;
    Prop_Name_OR_Type                       = 4537;
    TYPE_NO                                 =   -1;
    IO_FLAG                                 =   -1;
    TITLE                                   = -1;
}

CHECK(COMMON)
{
    Damg                                    >= 0;
    Damg                                    <= 1;
}

DEFAULTS(COMMON)
{

}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }

    if( Prop_Name_OR_Type == 2)
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TYPE35/");

    }
    else
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/STITCH/");
    }

    // Card 1
    SCALAR(Amas, "Amas")                        { DIMENSION = "lineic_mass"; }
    SCALAR(Elastif, "Elastif")                  { DIMENSION = "force"; }
    SCALAR(Xlim1, "Xlim1")                      { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(Xk, "Xk")                            { DIMENSION = "translation_stiffness"; }

    // Card 2
    DATA(FUN_A1, "fct_ID1");
    DATA(FUN_B1, "fct_ID2");
    DATA(FUN_C1, "fct_ID3");
    DATA(FUN_D1, "fct_ID4");
    SCALAR(Damg, "Damg")                        { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(Fdelay, "Fdelay")                    { DIMENSION = "DIMENSIONLESS"; }

}

// File format
FORMAT(radioss90)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE35/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/STITCH/%d",_ID_);
    }
    CARD("%-100s", TITLE);

    // Card 1
    COMMENT("#               Amas             Elastif               Xlim1                                      Xk");
    CARD("%20lg%20lg%20lg%20s%20lg", Amas, Elastif, Xlim1, _BLANK_, Xk);

    COMMENT("#funct_ID1 funct_ID2 funct_ID3 funct_ID4                Damg              Fdelay");
    CARD("%10d%10d%10d%10d%20lg%20lg", FUN_A1, FUN_B1, FUN_C1, FUN_D1, Damg, Fdelay);
}

FORMAT(radioss110)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE35/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/STITCH/%d",_ID_);
    }
    CARD("%-100s", TITLE);

    // Card 1
    COMMENT("#               Amas             Elastif               Xlim1                                      Xk");
    CARD("%20lg%20lg%20lg%20s%20lg", Amas, Elastif, Xlim1, _BLANK_, Xk);

    COMMENT("#  fct_ID1   fct_ID2   fct_ID3   fct_ID4                Damg              Fdelay");
    CARD("%10d%10d%10d%10d%20lg%20lg", FUN_A1, FUN_B1, FUN_C1, FUN_D1, Damg, Fdelay);
}
