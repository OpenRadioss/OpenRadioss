//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Property Spring Type4
ATTRIBUTES(COMMON)
{
    MASS                                    = VALUE(FLOAT,  " Mass");
    ISENSOR                                 = VALUE(SENSOR, " Sensor Identifier") {SUBTYPES=(/SENSOR/SENSOR_DEFINE);}
    ISFLAG                                  = VALUE(INT,    " Sensor Flag");
    Ileng                                   = VALUE(INT,    " Input Per Unit Length Flag");
    STIFF1                                  = VALUE(FLOAT,  " Stiffness");
    DAMP1                                   = VALUE(FLOAT,  " Damping");
    Acoeft1                                 = VALUE(FLOAT,  " A coefficient for tension (homogeneous to a force)");
    Bcoeft1                                 = VALUE(FLOAT,  " B coefficient for tension (homogeneous to a force)");
    Dcoeft1                                 = VALUE(FLOAT,  " D coefficient for tension");
    FUN_A1                                  = VALUE(FUNCT,  " Function identifier defining f(delta)");
    HFLAG1                                  = VALUE(INT,    " Hardening Flag");
    FUN_B1                                  = VALUE(FUNCT,  " Function identifier defining g(delta)");
    FUN_C1                                  = VALUE(FUNCT,  " Function identifier defining lower yield curve f3(delta)");
    MAX_RUP1                                = VALUE(FLOAT,  " Negative Failure Displacement");
    MIN_RUP1                                = VALUE(FLOAT,  " Positive Failure Displacement");
    Prop_FScale                             = VALUE(FLOAT,  " Scale factor for delta or epsilon(abscissa of g function)");
    Prop_EScale                             = VALUE(FLOAT,  " Coefficient for delta or epsilon(homogeneous to a force)");
    scale1                                  = VALUE(FLOAT,  " Coefficient for delta or epsilon(abscissa of f function)");  

    //Attributes for HM usage
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,    "User Comments");  
    Prop_Name_OR_Type                       = VALUE(INT, "");
    IO_FLAG                                 = VALUE(INT, "");
    TYPE_NO                                 = VALUE(STRING, "");
    TITLE                                   = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    NUM_COMMENTS                            = 5110;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;   
    MASS                                    =  167;
    ISENSOR                                 = 5157;
    ISFLAG                                  = 5158;
    Ileng                                   =  999;
    STIFF1                                  = 1131;
    DAMP1                                   =  254;
    Acoeft1                                 = 5160;
    Bcoeft1                                 = 5161;
    Dcoeft1                                 = 5162;
    FUN_A1                                  =   45;
    HFLAG1                                  = 5163;
    FUN_B1                                  =  168;
    FUN_C1                                  = 1189;
    MAX_RUP1                                = 5165;
    MIN_RUP1                                = 5164;
    Prop_FScale                             = 4169;
    Prop_EScale                             = 4170;
    scale1                                  = 4528;
    Prop_Name_OR_Type                       = 4537;
    TITLE                                   =   -1;
    TYPE_NO                                 =   -1;
    IO_FLAG                                 =   -1;
}

CHECK(COMMON)
{
    MIN_RUP1                                <= 0;
}

DEFAULTS(COMMON)
{
    Acoeft1                                 =     1.0;
    Dcoeft1                                 =     1.0;
    MAX_RUP1                                =  1.0e30;
    MIN_RUP1                                = -1.0e30;
    Prop_EScale                             =     1.0;
    Prop_FScale                             =     1.0;
    scale1                                  =     1.0;
}

GUI(COMMON)
{
 optional:
    RADIO(CommentEnumField)
    {
       ENUM_VALUE_FLAG=TRUE;
       ADD(1, "1:Hide in Menu/Export");
       ADD(2, "2:Show in Menu/Export");
       ADD(3, "3:Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Prop_Name_OR_Type == 2)
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TYPE4/");

    }
    else
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/SPRING/");
    }
 mandatory:
    SCALAR(MASS) { if(Ileng==0) { DIMENSION="m";} else { DIMENSION="lineic_mass"; } }
    DATA(ISENSOR) {SUBTYPES=(/SENSOR/SENSOR_DEFINE);}
    RADIO(ISFLAG)
    {
       ADD(0, "0:Spring Element Activated");
       ADD(1, "1:Spring Element Deactivated");
       ADD(2, "2:Spring Element Activated or Deactivated");
    }
    RADIO(Ileng)
    {
       ADD(0, "0:Force in the Spring is Computed");
       ADD(1, "1:All Input are Per Unit Length");
    } 
    SCALAR(STIFF1) { if(Ileng==0) { DIMENSION="translation_stiffness";} else { DIMENSION="force"; } }
 optional:
    SCALAR(DAMP1) { if(Ileng==0) { DIMENSION="massFlux";} else { DIMENSION="QUANTITY OF MOVEMENT"; } }
    SCALAR(Acoeft1) { DIMENSION="force"; }
    SCALAR(Bcoeft1) { DIMENSION="force"; }
    SCALAR(Dcoeft1) { if(Ileng==0) { DIMENSION="velocity";} else { DIMENSION="f"; } }
    FUNCTION(FUN_A1) {
    if((Ileng==FALSE) && (HFLAG1!=8)) { X_TITLE="dl";     X_DIMENSION="l";        }
    else if ((Ileng==FALSE) && (HFLAG1==8)) {X_TITLE="Spring length"; X_DIMENSION="l";}
    else             { X_TITLE="Strain"; X_DIMENSION="DIMENSIONLESS"; }
    Y_TITLE="f"; Y_DIMENSION="force";
  }
    RADIO(HFLAG1)
    {
       ADD(0, "0:Nonlinear Elastic Spring");
       ADD(1, "1:Nonlinear Elastic Plastic Spring");
       ADD(2, "2:Nonlinear Elasto-Plastic Spring with Decoupled Hardening in Tension and Compression");
       ADD(4, "4:Nonlinear Elastic Plastic Spring Kinematic Hardening");
       ADD(5, "5:Nonlinear Elasto-Plastic Spring with Nonlinear Unloading");
    }
    FUNCTION(FUN_B1) {
    if(Ileng==FALSE) { X_TITLE="dl/dt";       X_DIMENSION="velocity";     }
    else             { X_TITLE="Strain rate"; X_DIMENSION="f"; }
    Y_TITLE="g"; Y_DIMENSION="DIMENSIONLESS";
  }
    FUNCTION(FUN_C1) {
      if((HFLAG1==4) && (Ileng==FALSE)) {
    X_TITLE     = "dl";               Y_TITLE     = "f3";
    X_DIMENSION="l";               Y_DIMENSION="force";
      } else if((HFLAG1==4) && (Ileng!=FALSE)) {
    X_TITLE     = "Strain";               Y_TITLE     = "f3";
    X_DIMENSION = "DIMENSIONLESS";        Y_DIMENSION="force";
      } else if((HFLAG1==5) && (Ileng==FALSE)) {
    X_TITLE     = "Maximum displacement"; Y_TITLE     = "Residual displacement";
    X_DIMENSION="l";               Y_DIMENSION="l";
      } else if((HFLAG1==5) && (Ileng!=FALSE)) {
    X_TITLE     = "Maximum strain";       Y_TITLE     = "Residual strain";
    X_DIMENSION = "DIMENSIONLESS";        Y_DIMENSION = "DIMENSIONLESS";
      }
    }
    SCALAR(MIN_RUP1) {
        if(Ileng==0)     { TITLE="Neg. rupture disp.";  DIMENSION="l";        }
        else             { TITLE="Neg. rupture strain"; DIMENSION="DIMENSIONLESS"; }
    }
    SCALAR(MAX_RUP1){
        if(Ileng==0)     { TITLE="Pos. rupture disp.";  DIMENSION="l";        }
        else             { TITLE="Pos. rupture strain"; DIMENSION="DIMENSIONLESS"; }
    }
    SCALAR(Prop_FScale) { if(Ileng==0) { DIMENSION="velocity";} else { DIMENSION="f"; } }
    SCALAR(Prop_EScale) { DIMENSION="force"; }
    SCALAR(scale1)      { if(Ileng==0) { DIMENSION="l";} else { DIMENSION="DIMENSIONLESS"; } }
}

//File format for Radioss 90
FORMAT(radioss90)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE4/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SPRING/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#               MASS                                 sens_ID    Isflag     Ileng");
    CARD("%20lg                              %10d%10d%10d",MASS,ISENSOR,ISFLAG,Ileng);
    COMMENT("#                  K                   C                   A                   B                   D");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF1,DAMP1,Acoeft1,Bcoeft1,Dcoeft1);
    COMMENT("#  fct_ID1         H   fct_ID2   fct_ID2                                DeltaMin            DeltaMax");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A1,HFLAG1,FUN_B1,FUN_C1,MIN_RUP1,MAX_RUP1);
    COMMENT("#           F_Scale1                   E            AScale_x");
    CARD("%20lg%20lg%20lg",Prop_FScale,Prop_EScale,scale1);
}

//File format for Radioss 51
FORMAT(radioss51)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE4/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SPRING/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#               MASS                                 sens_ID    Isflag     Ileng");
    CARD("%20lg                              %10d%10d%10d",MASS,ISENSOR,ISFLAG,Ileng);
    COMMENT("#                  K                   C                   A                   B                   D");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF1,DAMP1,Acoeft1,Bcoeft1,Dcoeft1);
    COMMENT("#  fct_ID1         H   fct_ID2   fct_ID2                                DeltaMin            DeltaMax");
    CARD("%10d%10d%10d%10d                    %20lg%20lg",FUN_A1,HFLAG1,FUN_B1,FUN_C1,MIN_RUP1,MAX_RUP1);
    COMMENT("#           F_Scale1                   E");
    CARD("%20lg%20lg",Prop_FScale,Prop_EScale);
}

//File format for Radioss 42
FORMAT(radioss42)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s/%d/%s",TYPE_NO,_ID_,TITLE);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    COMMENT("#           MASS                         sens_ID  Isflag   Ileng");
    CARD("%16lg                        %8d%8d%8d",MASS,ISENSOR,ISFLAG,Ileng);
    COMMENT("#              K               C               A               B               D");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF1,DAMP1,Acoeft1,Bcoeft1,Dcoeft1);
    COMMENT("#fct_ID1       H fct_ID2 fct_ID2                        DeltaMin        DeltaMax");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A1,HFLAG1,FUN_B1,FUN_C1,MIN_RUP1,MAX_RUP1);
}

// File format for Radioss 41
FORMAT(radioss41) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s/%d/%s",TYPE_NO,_ID_,TITLE);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    COMMENT("#           MASS                         sens_ID  Isflag");
    CARD("%16lg                        %8d%8d",MASS,ISENSOR,ISFLAG);
    COMMENT("#              K               C               A               B               D");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF1,DAMP1,Acoeft1,Bcoeft1,Dcoeft1);
    COMMENT("#fct_ID1       H fct_ID2 fct_ID2                        DeltaMin        DeltaMax");
    CARD("%8d%8d%8d%8d                %16lg%16lg",FUN_A1,HFLAG1,FUN_B1,FUN_C1,MIN_RUP1,MAX_RUP1);
}
