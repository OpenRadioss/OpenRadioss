//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Property BEAM Type3
ATTRIBUTES(COMMON)
{
    Ismstr                                  = VALUE(INT,    "Small Strain Option Flag");
    MAT_Dm                                  = VALUE(FLOAT,  "Beam Membrane Damping");
    MAT_Df                                  = VALUE(FLOAT,  "Beam Flexural Damping");
    AREA                                    = VALUE(FLOAT,  "Cross Section Area");
    IYY                                     = VALUE(FLOAT,  "YY area moment of inertia, bending");
    IZZ                                     = VALUE(FLOAT,  "ZZ area moment of inertia, bending");
    IXX                                     = VALUE(FLOAT,  "XX area moment of inertia, torsion");
    Translation_Wx1                         = VALUE(INT,    "n", "Rotational_Wx1");
    Translation_Wy1                         = VALUE(INT,    "d", "Rotational_Wy1");
    Translation_Wz1                         = VALUE(INT,    "1", "Rotational_Wz1");
    Translation_Wx2                         = VALUE(INT,    "n", "Rotational_Wx2");
    Translation_Wy2                         = VALUE(INT,    "d", "Rotational_Wy2");
    Translation_Wz2                         = VALUE(INT,    "2", "Rotational_Wz2");
    ISHEAR                                  = VALUE(INT,    "Beam Formulation Flag");   
    
    //Attributes for HM usage
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,  "User Comments"); 
    Prop_Name_OR_Type                       = VALUE(INT, "");
    Hyperbeam_section_entity                = VALUE(BEAMSECTION,  " Hyperbeam Identifier");
    IO_FLAG                                 = VALUE(INT, "");
    TYPE_NO                                 = VALUE(STRING, "");
    TITLE                                   = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    NUM_COMMENTS                            = 5110;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;   
    AREA                                    =  718;
    Hyperbeam_section_entity                = 4545;
    ISHEAR                                  = 5155;
    IXX                                     =  721;
    IYY                                     =  720;
    IZZ                                     =  719;
    Ismstr                                  = 5152;
    MAT_Df                                  =  123;
    MAT_Dm                                  =  122;
    Translation_Wx1                         = 4159;
    Translation_Wx2                         = 4162;
    Translation_Wy1                         = 4160;
    Translation_Wy2                         = 4163;
    Translation_Wz1                         = 4161;
    Translation_Wz2                         = 4164;   
    Prop_Name_OR_Type                       = 4537;
    TITLE                                   =   -1;
    TYPE_NO                                 =   -1;
    IO_FLAG                                 =   -1;
}

DEFAULTS(COMMON)
{
    Ismstr                                  =    4;
    MAT_Df                                  = 0.01;
    MAT_Dm                                  = 0.00;
}

/*
PARAMETERS(PARAMETERS) {                                                          
  BAREA = INPUT_SCALAR(AREA,"Cross section"); 
  IXX   = INPUT_SCALAR(IXX,"XX moment of inertia, torsion"); 
  IYY   = INPUT_SCALAR(IYY,"YY moment of inertia, bending"); 
  IZZ   = INPUT_SCALAR(IZZ,"ZZ moment of inertia, bending"); 
} 
*/

DRAWABLES(COMMON) {
 private:
  AREA        = SCALAR(AREA);
  INERTIA_YY  = SCALAR(IYY);
  INERTIA_ZZ  = SCALAR(IZZ);
  MAX_IYY_IZZ = MAX(INERTIA_YY,INERTIA_ZZ);
  BEAM_COEFF  = EVAL(AREA/MAX_IYY_IZZ);
}

GUI(COMMON)
{
 optional:
    RADIO(CommentEnumField)
    {
       ENUM_VALUE_FLAG=TRUE;
       ADD(1, "1:Hide in Menu/Export");
       ADD(2, "2:Show in Menu/Export");
       ADD(3, "3:Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Prop_Name_OR_Type == 2)
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TYPE3/");

    }
    else
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/BEAM/");
    }
    RADIO(Ismstr)
    {
        ADD(0, "0:Default, Set to 4.");
        ADD(1, "1:Small Strain Formulation from t=0.");
        ADD(2, "2:Set to 4.");
        ADD(3, "3:Set to 4.");
        ADD(4, "4:Full Geometric Non-Linearities.");
    }

    SCALAR(MAT_Dm);
    SCALAR(MAT_Df);
    DATA(Hyperbeam_section_entity);
    if(Hyperbeam_section_entity != NONE)
    {
        ASSIGN(AREA, [@getentityvalue(beamsects,$Hyperbeam_section_entity,results_area)]);
        ASSIGN(IYY, [@getentityvalue(beamsects,$Hyperbeam_section_entity,results_Iprincipal0)]);
        ASSIGN(IZZ, [@getentityvalue(beamsects,$Hyperbeam_section_entity,results_Iprincipal1)]);
        ASSIGN(IXX, [@getentityvalue(beamsects,$Hyperbeam_section_entity,results_Iprincipal0) + @getentityvalue(beamsects,$Hyperbeam_section_entity,results_Iprincipal1)]);
    }
    else
    {
    mandatory:  
        SCALAR(AREA){ DIMENSION="area";         }
        SCALAR(IYY){ DIMENSION="inertia";       }
        SCALAR(IZZ){ DIMENSION="inertia";       }
        SCALAR(IXX){ DIMENSION="inertia";       }
    }

optional:
    FLAG(Translation_Wx1, "Rotation D.O.F about X at Node 1  is released");
    FLAG(Translation_Wy1, "Rotation D.O.F about Y at Node 1  is released");
    FLAG(Translation_Wz1, "Rotation D.O.F about Z at Node 1  is released");
    FLAG(Translation_Wx2, "Rotation D.O.F about X at Node 2  is released");
    FLAG(Translation_Wy2, "Rotation D.O.F about Y at Node 2  is released");
    FLAG(Translation_Wz2, "Rotation D.O.F about Z at Node 2  is released");
    RADIO(ISHEAR)
    {
        ADD(0, "0:Takes Shear into Account.");
        ADD(1, "1:Neglects Shear.");
    }
}

//File format for Radioss 51
FORMAT(radioss51)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 0 && Hyperbeam_section_entity != NONE)
    {
        COMMENT("##HMBEAMSECASSOC  PROPASSOC        %d",Hyperbeam_section_entity);
    }
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE3/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/BEAM/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#             Ismstr");
    CARD("          %10d",Ismstr);
    COMMENT("#                 Dm                  Df");
    CARD("%20lg%20lg",MAT_Dm,MAT_Df);
    if(Hyperbeam_section_entity!=NONE)
    {
        ASSIGN(AREA, [@getentityvalue(beamsects,$Hyperbeam_section_entity,results_area)], EXPORT);
        ASSIGN(IYY, [@getentityvalue(beamsects,$Hyperbeam_section_entity,results_Iprincipal0)], EXPORT);
        ASSIGN(IZZ, [@getentityvalue(beamsects,$Hyperbeam_section_entity,results_Iprincipal1)], EXPORT);
        ASSIGN(IXX, [@getentityvalue(beamsects,$Hyperbeam_section_entity,results_Iprincipal0) + @getentityvalue(beamsects,$Hyperbeam_section_entity,results_Iprincipal1)], EXPORT);
    }
    COMMENT("#               Area                 Iyy                 Izz                 Ixx");
    CARD("%20lg%20lg%20lg%20lg",AREA,IYY,IZZ,IXX);
    COMMENT("#     Wdof    Ishear");
    CARD("   %1d%1d%1d %1d%1d%1d%10d",Translation_Wx1,Translation_Wy1,Translation_Wz1,Translation_Wx2,Translation_Wy2,Translation_Wz2,ISHEAR);
}

// File format for Radioss 41
FORMAT(radioss41) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s/%d/%s",TYPE_NO,_ID_,TITLE);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    COMMENT("#           Ismstr");
    CARD("        %8d",Ismstr);
    COMMENT("#             Dm              Df");
    CARD("%16lg%16lg",MAT_Dm,MAT_Df);
    if(Hyperbeam_section_entity!=NONE)
    {
        ASSIGN(AREA, [@getentityvalue(beamsects,$Hyperbeam_section_entity,results_area)], EXPORT);
        ASSIGN(IYY, [@getentityvalue(beamsects,$Hyperbeam_section_entity,results_Iprincipal0)], EXPORT);
        ASSIGN(IZZ, [@getentityvalue(beamsects,$Hyperbeam_section_entity,results_Iprincipal1)], EXPORT);
        ASSIGN(IXX, [@getentityvalue(beamsects,$Hyperbeam_section_entity,results_Iprincipal0) + @getentityvalue(beamsects,$Hyperbeam_section_entity,results_Iprincipal1)], EXPORT);
    }
    COMMENT("#           Area             Iyy             Izz             Ixx");
    CARD("%16lg%16lg%16lg%16lg",AREA,IYY,IZZ,IXX);
    COMMENT("#   Wdof  Ishear");
    CARD(" %1d%1d%1d %1d%1d%1d%8d",Translation_Wx1,Translation_Wy1,Translation_Wz1,Translation_Wx2,Translation_Wy2,Translation_Wz2,ISHEAR);
}
