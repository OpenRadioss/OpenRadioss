//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.

// Property TSH_COMP Type22

ATTRIBUTES(COMMON)
{
    ISOLID                                  = VALUE(INT,  " Solid Elements Formulation Flag");
    Ismstr                                  = VALUE(INT,  " Small Strain Formulation Flag");
    Icstr                                   = VALUE(INT,  " Constant Stress Formulation Flag");
    Inpts_R                                 = VALUE(INT,  " Number of Integration Points in R Direction");
    Inpts_S                                 = VALUE(INT,  " Number of Integration Points in S Direction");
    Inpts_T                                 = VALUE(INT,  " Number of Integration Points in T Direction");
    Iint                                    = VALUE(INT,  " Number of Layers");
    dn                                      = VALUE(FLOAT,  " Numerical Damping for Stabilization");
    qa                                      = VALUE(FLOAT,  " Quadratic Bulk Viscosity");
    qb                                      = VALUE(FLOAT,  " Linear Bulk Viscosity");
    Vx                                      = VALUE(FLOAT,  " X Component for Reference Vector");
    Vy                                      = VALUE(FLOAT,  " Y Component for Reference Vector");
    Vz                                      = VALUE(FLOAT,  " Z Component for Reference Vector");
    SKEW_CSID                               = VALUE(SYSTEM,  " Skew Identifier");
    ORTHTROP                                = VALUE(INT,  " Orthotropic System Formulation Flag for Reference Vector");
    Ipos                                    = VALUE(INT,  " Layer Positioning Flag for Reference Vector");
    AREA_SHEAR                              = VALUE(FLOAT,  " Shear Factor");
    N                                       = SIZE(" Size of Array");
    Prop_phi                                = ARRAY[N](FLOAT,  " Angle for Layer i");
    Prop_Thick                              = ARRAY[N](FLOAT,  " Thickness Partition of Layer i (per total thickness)");
    Prop_Zi                                 = ARRAY[N](FLOAT,  " Z Position of Layer i");
    Prop_mi                                 = ARRAY[N](MAT,  " Material Identifier for Layer i");
    deltaT_min                              = VALUE(FLOAT,  " Minimum Time Step");
    
    //Attributes for HM usage
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    NODE1                                   = VALUE(NODE,  " Vector Base Node");
    NODE2                                   = VALUE(NODE,  " Vector End Node");
    n1                                      = VALUE(FLOAT, "");
    n2                                      = VALUE(FLOAT, "");
    Prop_Name_OR_Type                       = VALUE(INT, "");
    IO_FLAG                                 = VALUE(INT, "");
    TYPE_NO                                 = VALUE(STRING, "");
    TITLE                                   = VALUE(STRING, "");
    NBP                                     = VALUE(INT,   "Number of integration points");
    Inpts_R_status                          = VALUE(BOOL, "");
    Inpts_S_status                          = VALUE(BOOL, "");
    Inpts_T_status                          = VALUE(BOOL, "");
    Inpts_NBP_status                        = VALUE(BOOL, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    NUM_COMMENTS                            = 5110;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;
    ISOLID                                  = 8003;
    Icstr                                   = 5397;
    Iint                                    = 3985;
    Inpts_R                                 = 4151;
    Inpts_S                                 = 4152;
    Inpts_T                                 = 4153;
    Ipos                                    = 5365;
    Ismstr                                  = 5152;
    NODE1                                   = 5115;
    NODE2                                   = 4481;
    ORTHTROP                                = 4155;
    Prop_Thick                              = 4166;
    Prop_Zi                                 = 4167;
    Prop_mi                                 = 4168;
    Prop_phi                                = 4165;
    SKEW_CSID                               =  412;
    AREA_SHEAR                              =  402;
    Vx                                      = 4156;
    Vy                                      = 4157;
    Vz                                      = 4158;
    deltaT_min                              = 4154;
    dn                                      = 5363;
    qa                                      = 8029;
    qb                                      = 8030;
    N                                       =   -1;
    n1                                      =   -1;
    n2                                      =   -1;
    Prop_Name_OR_Type                       = 4537;
    TITLE                                   =   -1;
    TYPE_NO                                 =   -1;
    IO_FLAG                                 =   -1;
    NBP                                     =   -1;
    Inpts_R_status                          =   -1;
    Inpts_S_status                          =   -1;
    Inpts_T_status                          =   -1;
    Inpts_NBP_status                        =   -1;
}

CHECK(COMMON)
{
    Iint                                    >=    0;
    Iint                                    <=  200;
    Inpts_R                                 >=    2;
    Inpts_R                                 <=    9;
    // Uncomment once condition based check supported.
    /*if(ISOLID == 14)
    {
        Inpts_S                                 >=    2;
    Inpts_S                                 <=    9;
    }
    else
    {*/
    Inpts_S                                 >=    1;
    Inpts_S                                 <=  200;
    //}
    Inpts_T                                 >=    2;
    Inpts_T                                 <=    9;
    Prop_Zi                                 <=  0.5;
    Prop_Zi                                 >= -0.5;
}

DEFAULTS(COMMON)
{
    ISOLID                                  =    14;
    Icstr                                   =   001;
    AREA_SHEAR                              =   1.0;
    Inpts_R                                 =     2;
    Inpts_S                                 =     2;
    Inpts_T                                 =     2;
    deltaT_min                              = 1.0e6;
    qa                                      =  1.10;
    qb                                      =  0.05;
    Prop_Name_OR_Type                       =     0;
    Icstr                                   =     1;
}

DRAWABLES(COMMON) {
 private:
  DEFAULT_LINEAR_BULK_VISCOSITY  = EVAL(0.05);
  STANDARD_LINEAR_BULK_VISCOSITY = SCALAR(qb);
  LINEAR_BULK_VISCOSITY          = WHILE_ZERO(STANDARD_LINEAR_BULK_VISCOSITY,DEFAULT_LINEAR_BULK_VISCOSITY);
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
       ENUM_VALUE_FLAG=TRUE;
       ADD(1, "1:Hide in Menu/Export");
       ADD(2, "2:Show in Menu/Export");
       ADD(3, "3:Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Prop_Name_OR_Type == 2)
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TYPE22/");

    }
    else
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TSH_COMP/");
    }
    RADIO(ISOLID)
    {
        ADD(14, "14:HA8 Locking-Free 8-Node Thick Shell, Co-Rotational, Full Integration, Variable Number of Gauss Points in All Directions.");
        ADD(15, "15:HSEPH/PA6 Thick Shell (8- and 6-Node Respectively), Co-Rotational, Under Integrated (1-Point In-Plan Quadrature) with Physical Stabilization, Variable Number of Integration Points in Thickness Direction.");
    }
    RADIO(Ismstr)
    {
        ADD(0, "0:Default, Set to Value Defined in /DEF_SOLID.");
        ADD(1, "1:Small Strain from Time=0.");
        ADD(2, "2:Full Geometric Nonlinearities with Possible Small Strain Formulation in RADIOSS Engine.");
        ADD(3, "3:Simplified Small Strain Formulation from Time=0.");
        ADD(4, "4:Full Geometric Nonlinearities.");
    }
    RADIO(Icstr)
    {
        ADD(001, "001:Reduced Stress Integration in T Direction.");
        ADD(010, "010:Reduced Stress Integration in S Direction.");
        ADD(100, "100:Reduced Stress Integration in R Direction.");       
    }
    if(ISOLID==14)
    {
        SCALAR(Inpts_R);
        SCALAR(Inpts_S);
        SCALAR(Inpts_T);
        SCALAR(Iint);
    }
    else if(ISOLID==15)
    {
        SCALAR(Inpts_S);
        SCALAR(dn);
    }
    SCALAR(qa);
    SCALAR(qb);
    DATA(NODE1);
    DATA(NODE2);
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(Vx, [@getentityvalue(nodes,$NODE2,x)] - [@getentityvalue(nodes,$NODE1,x)] );
        ASSIGN(Vy, [@getentityvalue(nodes,$NODE2,y)] - [@getentityvalue(nodes,$NODE1,y)]);
        ASSIGN(Vz, [@getentityvalue(nodes,$NODE2,z)] - [@getentityvalue(nodes,$NODE1,z)]);
    }
    else
    {
    SCALAR(Vx);
    SCALAR(Vy);
    SCALAR(Vz);
    }
    DATA(SKEW_CSID) {/FILTER/Framefix/0/EQ;}
    RADIO(ORTHTROP)
    {
        ADD(0, "0:The First Axis of Orthotropy is Maintained at Constant Angle w.r.t. the Orthonormal Co-Rotational Element Coordinate System.");
        ADD(1, "1:The First Orthotropy Direction is Constant w.r.t. a Non-Orthonormal Isoparametric Coordinates.");
    }
    RADIO(Ipos)
    {
        ADD(0, "0:Layer Positions are Automatically Calculated with Regard to Layer Thickness Partition.");
        ADD(1, "1:All Layer Positions in the Element Thickness are User Defined.");
    }
    SCALAR(AREA_SHEAR);
    if(ISOLID==14 && Iint > 9)
    {
        ASSIGN(N, Iint);
        if(Icstr == 100)
        {
            ASSIGN(Inpts_R, 0);
        }
        else if(Icstr == 10)
        {
            ASSIGN(Inpts_S, 0);
        }
        else
        {
            ASSIGN(Inpts_T, 0);
        }
    }
    else if(ISOLID==14 && Iint <= 9)
    {
        if(Inpts_T == 0)
        {
            ASSIGN(Inpts_T, 2);
        }
        if(Inpts_R == 0)
        {
            ASSIGN(Inpts_R, 2);
        }
        if(Inpts_S == 0)
        {
            ASSIGN(Inpts_S, 2);
        }
        if(Icstr == 100)
        {
            ASSIGN(N, Inpts_R);
        }
        else if(Icstr == 10)
        {
            ASSIGN(N, Inpts_S);
        }
        else
        {
            ASSIGN(N, Inpts_T);
        }
    }
    else
    {
        ASSIGN(N, Inpts_S);
        ASSIGN(Inpts_T, 0);
        ASSIGN(Inpts_R, 0);
        ASSIGN(Iint, 0);
    }
    ASSIGN(NBP, [$Inpts_R*100+$Inpts_S*10+$Inpts_T]);
    SIZE(N) ;
    ARRAY(N,"Layers")
    {
        SCALAR(Prop_phi) {DIMENSION="a";}
        SCALAR(Prop_Thick) {DIMENSION="DIMENSIONLESS";}
        SCALAR(Prop_Zi) {DIMENSION="DIMENSIONLESS";}
        DATA(Prop_mi) ;
    }
    SCALAR(deltaT_min) { DIMENSION="t";          }
}

// File format for Radioss 90
FORMAT(radioss90) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(N, 0, EXPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE22/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/TSH_COMP/%d",_ID_);
    }
    CARD("%-100s", TITLE);  
    ASSIGN(Inpts_R_status,_GET_DISPLAY_STATUS(Inpts_R),EXPORT);
    ASSIGN(Inpts_S_status,_GET_DISPLAY_STATUS(Inpts_S),EXPORT);
    ASSIGN(Inpts_T_status,_GET_DISPLAY_STATUS(Inpts_T),EXPORT);
    if(IO_FLAG == 0 )
    {
        if( (Inpts_T_status == 1 || Inpts_S_status == 1 || Inpts_R_status == 1)) 
        {
            ASSIGN(NBP,Inpts_R*100,EXPORT);
            ASSIGN(NBP,NBP +(Inpts_S*10),EXPORT);
            ASSIGN(NBP,NBP + Inpts_T,EXPORT);
            if((Iint > 9 ) && ((Inpts_R == 0) ||(Inpts_S == 0)||(Inpts_T == 0) ))
            {
                // ISOLID = 14  and Iint > 9
                 ASSIGN(N, Iint, EXPORT);
            }
            else if((Iint >9) && ((Inpts_R != 0) && (Inpts_S != 0) && (Inpts_T != 0) ))
            {
                // ISOLID = 15 and Number of integration points = j(Inpts_S)
                ASSIGN(N, Inpts_S, EXPORT);
                ASSIGN(NBP, Inpts_S, EXPORT);
            }
            else if(NBP >200 && Iint<9 && Inpts_S <= 9)
            {
                // Iint < 9 and (NBP>200 && Inpts_S < 9) which means ISOLID=14
                // If Icstr = 100, the number of layers is equal to i(Inpts_R)
                if(Icstr==100)
                {
                    ASSIGN(N, Inpts_R, EXPORT);
                }
                // If Icstr = 010, the number of layers is equal to j(Inpts_S)
                else if(Icstr==10)
                {
                    ASSIGN(N, Inpts_S, EXPORT);
                }
                // If Icstr = 001, the number of layers is equal to k(Inpts_T)
                else if(Icstr==1)
                {
                    ASSIGN(N, Inpts_T, EXPORT);
                }
            }
            else
            {
                // ISOLID = 15 and Number of integration points = j(Inpts_S)
                ASSIGN(N, Inpts_S, EXPORT);
                ASSIGN(NBP, Inpts_S, EXPORT);
            }
        }
        else
        {
            ASSIGN(N, Iint, EXPORT);
        }
    }
    //
    COMMENT("#   Isolid    Ismstr                         Icstr     Inpts      Iint                            Dn");
    CARD("%10d%10d                    %10d%10d%10d          %20lg",ISOLID,Ismstr,Icstr,NBP,Iint,dn);
    //
    ASSIGN(Inpts_NBP_status,_GET_DISPLAY_STATUS(NBP),IMPORT);
    if(IO_FLAG == 1  && Inpts_NBP_status != 0) 
    {
        ASSIGN(Inpts_R,NBP / 100, IMPORT);
        ASSIGN(Inpts_T,NBP - (Inpts_R*100), IMPORT);
        ASSIGN(Inpts_S,Inpts_T / 10, IMPORT);
        ASSIGN(Inpts_T,Inpts_T - (Inpts_S*10), IMPORT);
        //////
        if((Iint > 9 ) && ((Inpts_R == 0) ||(Inpts_S == 0)||(Inpts_T == 0) ))
        {
            // ISOLID = 14  and Iint > 9 and 
             ASSIGN(N, Iint, IMPORT);
        }
        else if((Iint >9) && ((Inpts_R != 0) && (Inpts_S != 0) && (Inpts_T != 0) ))
        {
            // ISOLID = 15 and Number of integration points = j(Inpts_S)
             ASSIGN(N, NBP, IMPORT);
            ASSIGN(Inpts_S, NBP, IMPORT);
        }
        else if(NBP >200 && Iint<9)
        {
            // If Icstr = 010, the number of layers is equal to j(Inpts_S)
            if(Icstr==100)
            {
                ASSIGN(N, Inpts_R, IMPORT);
            }
            // If Icstr = 010, the number of layers is equal to j(Inpts_S)
            else if(Icstr==10)
            {
                ASSIGN(N, Inpts_S, IMPORT);
            }
            // If Icstr = 001, the number of layers is equal to k(Inpts_T)
            else if(Icstr==1)
            {
                ASSIGN(N, Inpts_T, IMPORT);
            }
        }
        else
        {
            // ISOLID = 15 and Number of integration points = j(Inpts_S)
            ASSIGN(N, NBP, IMPORT);
            ASSIGN(Inpts_S, NBP, IMPORT);
        }
    }
    //
    COMMENT("#                 qa                  qb");
    CARD("%20lg%20lg",qa,qb);
    //
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,x)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,x)], EXPORT);
        ASSIGN(Vx, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,y)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,y)], EXPORT);
        ASSIGN(Vy, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,z)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,z)], EXPORT);
        ASSIGN(Vz, n2-n1, EXPORT);
    }
    COMMENT("#                 Vx                  Vy                  Vz   skew_ID     Iorth      Ipos");
    CARD("%20lg%20lg%20lg%10d%10d%10d",Vx,Vy,Vz,SKEW_CSID,ORTHTROP,Ipos);
    //
    COMMENT("#             Ashear");
    CARD("%20lg",AREA_SHEAR);
    //
    COMMENT("#                Phi                ti/t                  Zi   mat_IDi");
    CARD_LIST(N)
    {
        CARD("%20lg%20lg%20lg%10d",Prop_phi,Prop_Thick,Prop_Zi,Prop_mi);
    }
    //
    COMMENT("#         DeltaT_min");
    CARD("%20lg",deltaT_min);
}
