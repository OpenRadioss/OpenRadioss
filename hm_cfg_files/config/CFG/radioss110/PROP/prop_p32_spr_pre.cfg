//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Property SPR_PRE TYPE32
ATTRIBUTES(COMMON)
{
    MASS                                    = VALUE(FLOAT,  " Spring Mass");
    ISENSOR                                 = VALUE(SENSOR,  " Sensor Identifier") {SUBTYPES=(/SENSOR/SENSOR_DEFINE);}
    ILock                                   = VALUE(INT,  " Lock Feature Flag");
    STIFF0                                  = VALUE(FLOAT,  " Spring stiffness before sensor activation and unloading stiffness after sensor activation");
    SPR_PRE_F1                              = VALUE(FLOAT,  " Force at Sensor Activation");
    SPR_PRE_D1                              = VALUE(FLOAT,  " Piston's Slide Length");
    SPR_PRE_E1                              = VALUE(FLOAT,  " Initial Internal Energy at Sensor Activation");
    STIFF1                                  = VALUE(FLOAT,  " Loading Stiffness After Sensor Activation");
    FUN_A1                                  = VALUE(FUNCT,  " Loading Force Function vs Displacement After Sensor Activation");
    FUN_B1                                  = VALUE(FUNCT,  " Loading Force Function vs Time After Sensor Activation");
    Scale_t                                 = VALUE(FLOAT,  " Scale factor on time");
    Scale_d                                 = VALUE(FLOAT,  " Scale factor on elongation");
    Scale_f                                 = VALUE(FLOAT,  " Scale factor on force");    
    //Attributes for HM usage
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,  "User Comments"); 
    Prop_Name_OR_Type                       = VALUE(INT, "");
    IO_FLAG                                 = VALUE(INT, "");
    TYPE_NO                                 = VALUE(STRING, "");
    TITLE                                   = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    NUM_COMMENTS                            = 5110;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;
    MASS                                    =  167;
    ISENSOR                                 = 5157;
    ILock                                   = 4618;
    STIFF0                                  =  831;
    SPR_PRE_F1                              =  832;
    SPR_PRE_D1                              =  833;
    SPR_PRE_E1                              =  834;
    STIFF1                                  = 1131;
    FUN_A1                                  =   45;
    FUN_B1                                  =  168;
    Scale_t                                 = 9058;
    Scale_d                                 = 9057;
    Scale_f                                 = 9056;
    Prop_Name_OR_Type                       = 4537;
    TITLE                                   =   -1;
    TYPE_NO                                 =   -1;
    IO_FLAG                                 =   -1;
}

CHECK(COMMON)
{
    MASS                                    > 0;
}

DEFAULTS(COMMON)
{
    STIFF1                                  = 1.0;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
       ENUM_VALUE_FLAG=TRUE;
       ADD(1, "1:Hide in Menu/Export");
       ADD(2, "2:Show in Menu/Export");
       ADD(3, "3:Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Prop_Name_OR_Type == 2)
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TYPE32/");

    }
    else
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/SPR_PRE/");
    }
    SCALAR(MASS) {DIMENSION="m";}
    DATA(ISENSOR) {SUBTYPES=(/SENSOR/SENSOR_DEFINE);}
    RADIO(ILock)
    {
        ADD(1, "1:The Spring is Locked When the Spring Shortens by the Slide Length SPR_PRE_D1 or the Pretension Force is Zero as Defined by the Force Functions FUN_A1 and FUN_B1.");
        ADD(2, "2:Spring is Locked After Any Unloading.");
    }
    SCALAR(STIFF0) {DIMENSION="translation_stiffness";}
    SCALAR(SPR_PRE_F1) {DIMENSION="force";}
    SCALAR(SPR_PRE_D1) {DIMENSION="l";}
    SCALAR(SPR_PRE_E1) {DIMENSION="energy";}
    SCALAR(STIFF1) {DIMENSION="translation_stiffness";}
    FUNCTION(FUN_A1) {
        X_TITLE="dl";    X_DIMENSION="l";
        Y_TITLE="f";     Y_DIMENSION="force";    
        /FILTER/groupEnumField/1/EQ;
    }
    FUNCTION(FUN_B1) {
        X_TITLE="dt";    X_DIMENSION="t";
        Y_TITLE="f";     Y_DIMENSION="force";    
        /FILTER/groupEnumField/1/EQ;
    }
    SCALAR(Scale_t) {DIMENSION="t";}
    SCALAR(Scale_d) {DIMENSION="l";}
    SCALAR(Scale_f) {DIMENSION="force";}
}

//File format for Radioss 100
FORMAT(radioss100)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE32/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SPR_PRE/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#                  M                                 sens_ID     llock");
    CARD("%20lg                              %10d%10d",MASS,ISENSOR,ILock);
    COMMENT("#              Stif0                  F1                  D1                  E1               Stif1");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF0,SPR_PRE_F1,SPR_PRE_D1,SPR_PRE_E1,STIFF1);
    COMMENT("#  fct_ID1   fct_ID2                                 Scale_t             Scale_d             Scale_f");
    CARD("%10d%10d                    %20lg%20lg%20lg",FUN_A1,FUN_B1,Scale_t,Scale_d,Scale_f);
}

//File format for Radioss 51
FORMAT(radioss51)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE32/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SPR_PRE/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#                  M                                 sens_ID     llock");
    CARD("%20lg                              %10d",MASS,ISENSOR);
    COMMENT("#              Stif0                  F1                  D1                  E1               Stif1");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF0,SPR_PRE_F1,SPR_PRE_D1,SPR_PRE_E1,STIFF1);
    COMMENT("#  fct_ID1   fct_ID2");
    CARD("%10d%10d",FUN_A1,FUN_B1);
}

// File format for Radioss 42
FORMAT(radioss42) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s/%d/%s",TYPE_NO,_ID_,TITLE);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    COMMENT("#              M                         sens_ID");
    CARD("%16lg                        %8d",MASS,ISENSOR);
    COMMENT("#          Stif0              F1              D1              E1           Stif1");
    CARD("%16lg%16lg%16lg%16lg%16lg",STIFF0,SPR_PRE_F1,SPR_PRE_D1,SPR_PRE_E1,STIFF1);
    COMMENT("#fct_ID1 fct_ID2");
    CARD("%8d%8d",FUN_A1,FUN_B1);
}
