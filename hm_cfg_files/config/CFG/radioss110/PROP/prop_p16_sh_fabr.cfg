//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Property SH_FABR Type16
//

ATTRIBUTES(COMMON)
{
    ISHELL                                  = VALUE(INT,  " Shell Element Formulation Flag");
    Ismstr                                  = VALUE(INT,  " Shell Small Strain Formulation Flag");
    ISH3N                                   = VALUE(INT,  " 3 Node Shell Element Formulation Flag");
    Hm                                      = VALUE(FLOAT,  " Shell Membrane Hourglass Coefficient");
    Hf                                      = VALUE(FLOAT,  " Shell Out-of-Plane Hourglass");
    Hr                                      = VALUE(FLOAT,  " Shell Rotation Hourglass Coefficient");
    Dm                                      = VALUE(FLOAT,  " Shell Membrane Damping");
    NIP                                     = SIZE(" Number of Layers");
    ISTRAIN                                 = VALUE(INT,  " Compute Strains for Post-Processing Flag");
    THICK                                   = VALUE(FLOAT,  " Shell Thickness");
    AREA_SHEAR                              = VALUE(FLOAT,  " Shear Factor");
    ITHICK                                  = VALUE(INT,  " Shell Resultant Stresses Calculation Flag");
    VECTOR_X                                = VALUE(FLOAT,  " X Component for Reference Vector");
    VECTOR_Y                                = VALUE(FLOAT,  " Y Component for Reference Vector");
    VECTOR_Z                                = VALUE(FLOAT,  " Z Component for Reference Vector");
    SKEW_CSID                               = VALUE(SYSTEM,  " Skew Identifier for Reference Vector");
    Ipos                                    = VALUE(INT,  " Layer Positioning Flag for Reference Vector");
    Prop_phi                                = ARRAY[NIP](FLOAT,  " Angle of First Local Axis for Layer i");
    Alpha_arr                               = ARRAY[NIP](FLOAT,  " Angle Between First and Second Axis");
    Prop_Thick                               = ARRAY[NIP](FLOAT,  " Thickness of Layer i ");
    Prop_Zi                                 = ARRAY[NIP](FLOAT,  " Z Position of Layer i ");
    Prop_mi                                 = ARRAY[NIP](MAT,  " Material Identifier for Layer i ");
    
    //Attributes for HM usage
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    NODE1                                   = VALUE(NODE,  " Vector Base Node");
    NODE2                                   = VALUE(NODE,  " Vector End Node");
    n1                                      = VALUE(FLOAT, "");
    n2                                      = VALUE(FLOAT, "");
    Prop_Name_OR_Type                       = VALUE(INT, "");
    TITLE                                   = VALUE(STRING, "");
    IO_FLAG                                 = VALUE(INT, "");
    TYPE_NO                                 = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    NUM_COMMENTS                            = 5110;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;
    AREA_SHEAR                              =  402;
    Alpha_arr                               = 4422;
    Dm                                      = 8027;
    Hf                                      = 8025;
    Hm                                      = 8024;
    Hr                                      = 8026;
    ISH3N                                   = 4001;
    ISHELL                                  = 8005;
    ISTRAIN                                 = 2177;
    ITHICK                                  = 2092;
    Ipos                                    = 5365;
    Ismstr                                  = 5152;
    NIP                                     =  427;
    NODE1                                   = 5115;
    NODE2                                   = 4481;
    Prop_Thick                               = 4166;
    Prop_Zi                                 = 4167;
    Prop_mi                                 = 4168;
    Prop_phi                                = 4165;
    SKEW_CSID                               =  412;
    THICK                                   =  431;
    VECTOR_X                                = 4482;
    VECTOR_Y                                = 4483;
    VECTOR_Z                                = 4484;
    n1                                      =   -1;
    n2                                      =   -1;
    Prop_Name_OR_Type                       = 4537;
    TITLE                                   =   -1;
    IO_FLAG                                 =   -1;
    TYPE_NO                                 =   -1;
}

CHECK(COMMON)
{
    Hf                                      >=  0.0;
    Hf                                      <= 0.05;
    Hm                                      >=  0.0;
    Hm                                      <= 0.05;
    Hr                                      >=  0.0;
    Hr                                      <= 0.05;
    NIP                                     >=    1;
    NIP                                     <=  100;
    Prop_Thick                               >   0.0;
    THICK                                   >   0.0;
}

DEFAULTS(COMMON)
{
    AREA_SHEAR                              = 0.833333;
    Hf                                      =     0.01;
    Hm                                      =     0.01;
    Hr                                      =     0.01;
    ISH3N                                   =        2;
    ISHELL                                  =        1;
    Ismstr                                  =        2;
    NIP                                     =        1;
    VECTOR_X                                =      1.0;
    Prop_Name_OR_Type                       = 0;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
       ENUM_VALUE_FLAG=TRUE;
       ADD(1, "1:Hide in Menu/Export");
       ADD(2, "2:Show in Menu/Export");
       ADD(3, "3:Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Prop_Name_OR_Type == 2)
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TYPE16/");

    }
    else
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/SH_FABR/");
    } 
    RADIO(ISHELL)
    {
        ADD(0, "0:Use Value in /DEF_SHELL.");
        ADD(1, "1:Q4, Visco-Elastic Hourglass Modes Orthogonal to Deformation and Rigid Modes (Belytschko).");
        ADD(2, "2:Q4, Visco-Elastic Hourglass without Orthogonality (Hallquist).");
        ADD(3, "3:Q4, Elasto-Plastic Hourglass with Orthogonality.");
        ADD(4, "4:Q4 with Improved Type 1 Formulation (Orthogonalization for Warped Elements).");
    }
    RADIO(Ismstr)
    {
        ADD(0, "0:Use Value in /DEF_SHELL.");
        ADD(1, "1:Small Strain from Time=0.");
        ADD(2, "2:Full Geometric Nonlinearities with Possible Small Strain Formulation Activation in RADIOSS Engine.");
        ADD(3, "3:Old Small Strain Formulation.");
        ADD(4, "4:Full Geometric Nonlinearities.");
    }
    RADIO(ISH3N)
    {
        ADD(0, "0:Use Value in /DEF_SHELL.");
        ADD(1, "1:Standard Triangle (C0).");
        ADD(2, "2:Standard Triangle (C0) with Modification for Large Rotation.");
        ADD(30, "30:DKT18.");
        ADD(31, "31:DKT_S3.");
    }
    SCALAR(Hm);
    SCALAR(Hf);
    SCALAR(Hr);
    SCALAR(Dm);
    SIZE(NIP);
    RADIO(ISTRAIN)
    {
        ADD(0, "0:Default Set to Value Defined with /DEF_SHELL.");
        ADD(1, "1:Yes.");
        ADD(2, "2:No.");
    }
mandatory:
    SCALAR(THICK) { DIMENSION="l";        }
optional:
    SCALAR(AREA_SHEAR);
    RADIO(ITHICK)
    {
        ADD(0, "0:Default Set to VAlue Defined with /DEF_SHELL.");
        ADD(1, "1:Thickness Change is Accounted.");
        ADD(2, "2:Thickness is Constant.");
    }
    DATA(NODE1);
    DATA(NODE2);
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(VECTOR_X, [@getentityvalue(nodes,$NODE2,x)] - [@getentityvalue(nodes,$NODE1,x)] );
        ASSIGN(VECTOR_Y, [@getentityvalue(nodes,$NODE2,y)] - [@getentityvalue(nodes,$NODE1,y)]);
        ASSIGN(VECTOR_Z, [@getentityvalue(nodes,$NODE2,z)] - [@getentityvalue(nodes,$NODE1,z)]);
    }
    else
    {
    SCALAR(VECTOR_X);
    SCALAR(VECTOR_Y);
    SCALAR(VECTOR_Z);
    }
    DATA(SKEW_CSID) {/FILTER/Framefix/0/EQ;}
    RADIO(Ipos)
    {
        ADD(0, "0:Layer Positions are Calculated Automatically in Function of Layer Thicknesses.");
        ADD(1, "1:All Layer Positions in the Element Thickness are User Defined.");
    }
    ARRAY(NIP,"Layer")
    {
        SCALAR(Prop_phi)   { DIMENSION="a"; }
        SCALAR(Alpha_arr)  { DIMENSION="a"; }
        SCALAR(Prop_Thick) { DIMENSION="l";        }
        SCALAR(Prop_Zi) { DIMENSION="l";        }
        DATA(Prop_mi) { SUBTYPES=(/MAT/FABR_A); }
    }    
}

//File format for Radioss 51
FORMAT(radioss51)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE16/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SH_FABR/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#   Ishell    Ismstr     Ish3n");
    CARD("%10d%10d%10d",ISHELL,Ismstr,ISH3N);
    //
    COMMENT("#                 Hm                  Hf                  Hr                  Dm");
    CARD("%20lg%20lg%20lg%20lg",Hm,Hf,Hr,Dm);
    //
    COMMENT("#        N   Istrain               Thick              Ashear              Ithick");
    CARD("%10d%10d%20lg%20lg          %10d",NIP,ISTRAIN,THICK,AREA_SHEAR,ITHICK);
    //
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,x)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,x)], EXPORT);
        ASSIGN(VECTOR_X, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,y)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,y)], EXPORT);
        ASSIGN(VECTOR_Y, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,z)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,z)], EXPORT);
        ASSIGN(VECTOR_Z, n2-n1, EXPORT);
    }
    COMMENT("#                 Vx                  Vy                  Vz   Skew_ID      Ipos");
    CARD("%20lg%20lg%20lg%10d%10d",VECTOR_X,VECTOR_Y,VECTOR_Z,SKEW_CSID,Ipos);
    //
    COMMENT("#              Phi_i             Alpha_i                 T_i                 Z_i   mat_IDi");
    CARD_LIST(NIP) 
    {
        CARD("%20lg%20lg%20lg%20lg%10d",Prop_phi,Alpha_arr,Prop_Thick,Prop_Zi,Prop_mi);
    }
}

// File format for Radioss 44
FORMAT(radioss44) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s/%d/%s",TYPE_NO,_ID_,TITLE);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    COMMENT("# Ishell  Ismstr");
    CARD("%8d%8d",ISHELL,Ismstr);
    //
    COMMENT("#             Hm              Hf              Hr              Dm");
    CARD("%16lg%16lg%16lg%16lg",Hm,Hf,Hr,Dm);
    //
    COMMENT("#      N Istrain           Thick          Ashear          Ithick");
    CARD("%8d%8d%16lg%16lg        %8d",NIP,ISTRAIN,THICK,AREA_SHEAR,ITHICK);
    //
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,x)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,x)], EXPORT);
        ASSIGN(VECTOR_X, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,y)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,y)], EXPORT);
        ASSIGN(VECTOR_Y, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,z)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,z)], EXPORT);
        ASSIGN(VECTOR_Z, n2-n1, EXPORT);
    }
    COMMENT("#             Vx              Vy              Vz skew_ID    Ipos");
    CARD("%16lg%16lg%16lg%8d%8d",VECTOR_X,VECTOR_Y,VECTOR_Z,SKEW_CSID,Ipos);
    //
    COMMENT("#          Phi_i         Alpha_i             T_i             Z_i mat_IDi");
    CARD_LIST(NIP) 
    {
        CARD("%16lg%16lg%16lg%16lg%8d",Prop_phi,Alpha_arr,Prop_Thick,Prop_Zi,Prop_mi);
    }
}
