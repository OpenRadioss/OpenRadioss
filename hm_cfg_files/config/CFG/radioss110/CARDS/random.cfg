//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// CONTROL CARD - random - 5013
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR = VALUE(STRING, "/RANDOM");
    GRNOD_ID = VALUE(SETS, "Optional node group identifier")  {SUBTYPES = (/SETS/GRNOD_IDPOOL);} 
    Rand_opt = VALUE(INT, "Key Options");
    unit_ID = VALUE(INT, "Optional unit identifier");
    SEED = VALUE(FLOAT, "Seed of random noise");
    XALEA = VALUE(FLOAT, "Maximum nodal random noise");
    block_1 = VALUE(STRING, "");
    block_2 = VALUE(INT, "");
    block_3 = VALUE(INT, "");
    IO_FLAG = VALUE(INT, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR = 5013;
    GRNOD_ID = 8056;
    Rand_opt = 4176;
    SEED = 4536;
    XALEA = 5030;
    block_1 = -1;
    block_2 = -1;
    block_3 = -1;
    IO_FLAG = -1;
    unit_ID = -1;
}

DEFAULTS(COMMON)
{
    Rand_opt = 0;
}

CHECK(COMMON)
{
    XALEA >= 0;
    XALEA < 1;
    SEED > 0;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "/RANDOM");
mandatory:
    RADIO(Rand_opt)
    {
        ADD(0, "/RANDOM");
        ADD(1, "/RANDOM/GRNOD");
    }
optional:
    if (Rand_opt == 1)
    {
        DATA(GRNOD_ID); //  {SUBTYPES = (/GRNOD)}
    }
mandatory:
    SCALAR(XALEA) { DIMENSION = "l"; }
    SCALAR(SEED) { DIMENSION = "DIMENSIONLESS"; }

    // optional:
    //     SCALAR(unit_ID) { DIMENSION = "DIMENSIONLESS"; }
}

// File format
FORMAT(radioss110)
{
    ASSIGN(IO_FLAG, 0, IMPORT);
    ASSIGN(IO_FLAG, 1, EXPORT);

    if (IO_FLAG == 1)
    {
        if (Rand_opt == 0)
        {
            HEADER("/RANDOM");
        }
        else
        {
            HEADER("/RANDOM/GRNOD/%d", GRNOD_ID);
        }
        CARD("%20d%20d", XALEA, SEED);
    }
    else
    {
        HEADER("/RANDOM/%s/%d", block_1, block_2);
        if (block_1 == "GRNOD")
        {
            ASSIGN(KEYWORD_STR, /RANDOM/GRNOD);
            ASSIGN(Rand_opt, 1);
            ASSIGN(GRNOD_ID, block_2);
            // ASSIGN(unit_ID, block_3); //Unit_ID isn't supported in ML, so we not support that at this moment
        }
        else
        {
            ASSIGN(KEYWORD_STR, /RANDOM);
            ASSIGN(Rand_opt, 0);
        }
        CARD("%20lg%20lg", XALEA, SEED);
    }
}

FORMAT(radioss51) // from reverse templates\feoutput\radioss\include\cards51blk
{
    ASSIGN(IO_FLAG, 0, IMPORT);
    ASSIGN(IO_FLAG, 1, EXPORT);

    if (IO_FLAG == 1)
    {
        if (Rand_opt == 0)
        {
            HEADER("/RANDOM");
        }
        else
        {
            HEADER("/RANDOM/GRNOD/%d", GRNOD_ID);
        }
        CARD("%20d", XALEA);
    }
    else
    {
        HEADER("/RANDOM/%s/%d", block_1, block_2);
        if (block_1 == "GRNOD")
        {
            ASSIGN(KEYWORD_STR, /RANDOM/GRNOD);
            ASSIGN(Rand_opt, 1);
            ASSIGN(GRNOD_ID, block_2);
            // ASSIGN(unit_ID, block_3); //Unit_ID isn't supported in ML, so we not support that at this moment
        }
        else
        {
            ASSIGN(KEYWORD_STR, /RANDOM);
            ASSIGN(Rand_opt, 0);
        }
        CARD("%20lg", XALEA);
    }
}

FORMAT(radioss41) //from reverse templates\feoutput\radioss\include\cards41blk
{
    HEADER("/RANDOM");
    CARD("%16lg", XALEA);
    ASSIGN(Rand_opt, 0);

}
