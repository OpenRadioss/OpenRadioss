//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// MAT (MF_GenYld_29 - MATFEM - user1) Setup File
// 

// MCDS attributes description
ATTRIBUTES(COMMON)  
{
    KEYWORD_STR               = VALUE(STRING,"Solver Keyword");
    NUM_COMMENTS              = SIZE("NUM_COMMENTS");
    COMMENTS                  = ARRAY[NUM_COMMENTS](STRING,"Entity_Comments");
    CommentEnumField          = VALUE(INT,"User Comments");
    Mat_Name_OR_LawNo         = VALUE(INT,"");
    DUMMY                     = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    TITLE                     = VALUE(STRING,"");
    IO_FLAG                   = VALUE(INT, "");
    LAW_NO                    = VALUE(STRING, ""); 
    MAT_REFRHO_Option         = VALUE(INT,"RefRho_Option");
/*
  LAW29_NumOfParts   = SIZE("Number of connected parts"); 
  LAW29_PART        = ARRAY[LAW29_NumOfParts](LAW29_PART,"Connected parts");
*/
  // Initial volumic mass
  MAT_RHO           = VALUE(FLOAT, "Initial density");
  Refer_Rho         = VALUE(FLOAT, "Reference density");
  LAW29_VERSION     = VALUE(STRING, "Version");
  // Line 1 : General properties
  LAW29_FRELIM      = VALUE(FLOAT,"Fracture limit for element elimination");
  LAW29_DTMIN       = VALUE(FLOAT,"Minimum time step for element elimination");
  LAW29_NF          = VALUE(INT,"Number of cycles for strain-rate filter");
  LAW29_VELSC       = VALUE(FLOAT,"Velocity scale factor");
  LAW29_RSTRAT      = VALUE(FLOAT,"Reference strain rate for analytical models");
  LAW29_RTEMP       = VALUE(FLOAT,"Reference temperature");
  LAW29_ENCRYPT     = VALUE(INT,"Encryption code");
  LAW29_PARAM_1     = VALUE(INT,"unused parameter");
  // Line 2 : Elastic properties
  MAT_E             = VALUE(FLOAT,"Young modulus"); 
  MAT_NU            = VALUE(FLOAT,"Poisson ratio");
  MAT_BULK          = VALUE(FLOAT,"Bulk modulus");
  LAW29_MAT_SHEAR   = VALUE(FLOAT,"Shear modulus");
  LAW29_EL_ORTHO    = VALUE(INT,"Orthotropy of elastic behaviour");
  LAW29_EL_SHRCO    = VALUE(FLOAT,"Shear correction factor");
  LAW29_PARAM_2     = VALUE(INT,"unused parameter");
  LAW29_PARAM_3     = VALUE(INT,"unused parameter");
  // Line 3 : Plastic modules
  LAW29_PL_HARDE    = VALUE(INT,"Plastic hardening module");
  LAW29_PL_ORTHO    = VALUE(INT,"Plastic orthotropy module");
  LAW29_PL_ISKIN    = VALUE(INT,"Isokin module for isotropic-kinematic hardening"); 
  LAW29_PL_ASYMM    = VALUE(INT,"Plastic asymmetry module tension-compression"); 
  LAW29_PL_WAIST    = VALUE(INT,"Plastic waist module shear"); 
  LAW29_PL_BIAXF    = VALUE(INT,"Plastic biaxiality module"); 
  LAW29_PL_COMPR    = VALUE(INT,"Plastic compressibility module");
  LAW29_PL_DAMAG    = VALUE(INT,"Plastic damage module");
  // Line 4 : Fracture modules
  LAW29_NF_CURVE    = VALUE(INT,"Ductile normal fracture module");
  LAW29_NF_ORTHO    = VALUE(INT,"Orthotropy module for ductile normal fracture");
  LAW29_NF_DEPEN    = VALUE(INT,"Additional dependency module for normal fracture"); 
  LAW29_SF_CURVE    = VALUE(INT,"Ductile shear fracture module"); 
  LAW29_SF_PARAM    = VALUE(INT,"Orthotropy module for ductile shear fracture"); 
  LAW29_SF_POSTC    = VALUE(INT,"Additional dependency module for shear fracture"); 
  LAW29_PARAM_4     = VALUE(INT,"unused parameter");
  LAW29_PARAM_5     = VALUE(INT,"unused parameter");
  // Line 5 : Instability modules
  LAW29_CR_HARDE    = VALUE(INT,"Hardening module for Crach");
  LAW29_CR_ORTHO    = VALUE(INT,"Orthotropic module for Crach");
  LAW29_CR_ISKIN    = VALUE(INT,"Isotropic-kinematic hardening module for Crach"); 
  LAW29_CR_POSTC    = VALUE(INT,"Process module for Crach"); 
  LAW29_CR_PARAM    = VALUE(INT,"Control parameter for Crach"); 
  LAW29_CR_CHECK    = VALUE(INT,"Approximate instability calculation module");
  LAW29_PARAM_6     = VALUE(INT,"unused parameter");
  LAW29_MF_INIT     = VALUE(INT,"Initial micro porosity");
  // Line 6 and following only as character strings
  LAW29_NB_CARDS    = SIZE("Number of predefined cards");
  LAW29_CARDS       = ARRAY[LAW29_NB_CARDS](STRING, "Predefined cards");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR               = 9000;
    NUM_COMMENTS              = 5110;
    COMMENTS                  = 5109;
    CommentEnumField          = 7951;
    Mat_Name_OR_LawNo         = 4538;
    DUMMY                     = -1;
    LAW_NO                    = -1;
    IO_FLAG                   = -1;
    TITLE                     = -1;
    MAT_REFRHO_Option         =4285;
  //LAW29_NumOfParts  = 6182;
  //LAW29_PART        = 6183;
  // Initial volumic mass
  MAT_RHO           = 118;
  Refer_Rho         = 4229;
  LAW29_VERSION     = 6184;
  // Line 1 : General properties
  LAW29_FRELIM      = 6223;
  LAW29_DTMIN       = 6185;
  LAW29_NF          = 6186;
  LAW29_VELSC       = 6187;
  LAW29_RSTRAT      = 6188;
  LAW29_RTEMP       = 6189;
  LAW29_ENCRYPT     = 6190;
  LAW29_PARAM_1     = 6191;
  // Line 2 : Elastic properties
  MAT_E             = 119; 
  MAT_NU            = 120;
  MAT_BULK          = 223;
  LAW29_MAT_SHEAR   = 6192;
  LAW29_EL_ORTHO    = 6193;
  LAW29_EL_SHRCO    = 6194;
  LAW29_PARAM_2     = 6195;
  LAW29_PARAM_3     = 6196;
  // Line 3 : Plastic modules
  LAW29_PL_HARDE    = 6197;
  LAW29_PL_ORTHO    = 6198;
  LAW29_PL_ISKIN    = 6199; 
  LAW29_PL_ASYMM    = 6200; 
  LAW29_PL_WAIST    = 6201; 
  LAW29_PL_BIAXF    = 6202; 
  LAW29_PL_COMPR    = 6203;
  LAW29_PL_DAMAG    = 6204;
  // Line 4 : Fracture modules
  LAW29_NF_CURVE    = 6205;
  LAW29_NF_ORTHO    = 6206;
  LAW29_NF_DEPEN    = 6207; 
  LAW29_SF_CURVE    = 6208; 
  LAW29_SF_PARAM    = 6209; 
  LAW29_SF_POSTC    = 6210; 
  LAW29_PARAM_4     = 6211;
  LAW29_PARAM_5     = 6212;
  // Line 5 : Instability modules
  LAW29_CR_HARDE    = 6213;
  LAW29_CR_ORTHO    = 6214;
  LAW29_CR_ISKIN    = 6215; 
  LAW29_CR_POSTC    = 6216; 
  LAW29_CR_PARAM    = 6217; 
  LAW29_CR_CHECK    = 6218;
  LAW29_PARAM_6     = 6219;
  LAW29_MF_INIT     = 6220;
  // Line 6 and following only as character strings
  LAW29_NB_CARDS    = 6221;
  LAW29_CARDS       = 6222;
}

DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY         = SCALAR(MAT_RHO);
    YOUNG_MODULUS           = SCALAR(MAT_E);
    POISSON_RATIO           = SCALAR(MAT_NU);
public:
    SOUND_SPEED             = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                       = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                      = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID       = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}

// GUI description (Common domain)
GUI {
optional:
  //
  SCALAR(MAT_RHO)       { DIMENSION="density"; }
  SCALAR(Refer_Rho)     { DIMENSION="density"; }
  //
  SCALAR(LAW29_FRELIM)  { DIMENSION="DIMENSIONLESS"; }
  SCALAR(LAW29_DTMIN)   { DIMENSION="t"; }
  SCALAR(LAW29_NF)      { DIMENSION="DIMENSIONLESS"; }
  SCALAR(LAW29_VELSC)   { DIMENSION="DIMENSIONLESS"; }
  SCALAR(LAW29_RSTRAT)  { DIMENSION="f"; }
  SCALAR(LAW29_RTEMP)   { DIMENSION="k"; }
  SCALAR(LAW29_ENCRYPT) { DIMENSION="DIMENSIONLESS"; } 
  SCALAR(LAW29_PARAM_1) { DIMENSION="DIMENSIONLESS"; } 
  //
  SCALAR(MAT_E)         { DIMENSION="pressure"; }
  SCALAR(MAT_NU)        { DIMENSION="DIMENSIONLESS"; }
  SCALAR(MAT_BULK)      { DIMENSION="pressure"; }
  SCALAR(LAW29_MAT_SHEAR)    { DIMENSION="pressure"; }
  SCALAR(LAW29_EL_ORTHO)     { DIMENSION="DIMENSIONLESS"; }
  SCALAR(LAW29_EL_SHRCO)     { DIMENSION="DIMENSIONLESS"; }
  SCALAR(LAW29_PARAM_2)      { DIMENSION="DIMENSIONLESS"; } 
  SCALAR(LAW29_PARAM_3)      { DIMENSION="DIMENSIONLESS"; } 
  //
  SCALAR(LAW29_PL_HARDE)     { DIMENSION="DIMENSIONLESS"; }
  SCALAR(LAW29_PL_ORTHO)     { DIMENSION="DIMENSIONLESS"; }
  SCALAR(LAW29_PL_ISKIN)     { DIMENSION="DIMENSIONLESS"; }
  SCALAR(LAW29_PL_ASYMM)     { DIMENSION="DIMENSIONLESS"; }
  SCALAR(LAW29_PL_WAIST)     { DIMENSION="DIMENSIONLESS"; }
  SCALAR(LAW29_PL_BIAXF)     { DIMENSION="DIMENSIONLESS"; }
  SCALAR(LAW29_PL_COMPR)     { DIMENSION="DIMENSIONLESS"; }
  SCALAR(LAW29_PL_DAMAG)     { DIMENSION="DIMENSIONLESS"; }
  // Line 4 : Fracture modules
  SCALAR(LAW29_NF_CURVE)     { DIMENSION="DIMENSIONLESS"; }
  SCALAR(LAW29_NF_ORTHO)     { DIMENSION="DIMENSIONLESS"; }
  SCALAR(LAW29_NF_DEPEN)     { DIMENSION="DIMENSIONLESS"; }
  SCALAR(LAW29_SF_CURVE)     { DIMENSION="DIMENSIONLESS"; }
  SCALAR(LAW29_SF_PARAM)     { DIMENSION="DIMENSIONLESS"; }
  SCALAR(LAW29_SF_POSTC)     { DIMENSION="DIMENSIONLESS"; } 
  SCALAR(LAW29_PARAM_4)      { DIMENSION="DIMENSIONLESS"; } 
  SCALAR(LAW29_PARAM_5)      { DIMENSION="DIMENSIONLESS"; } 
  // Line 5 : Instability modules
  SCALAR(LAW29_CR_HARDE)     { DIMENSION="DIMENSIONLESS"; }
  SCALAR(LAW29_CR_ORTHO)     { DIMENSION="DIMENSIONLESS"; }
  SCALAR(LAW29_CR_ISKIN)     { DIMENSION="DIMENSIONLESS"; }
  SCALAR(LAW29_CR_POSTC)     { DIMENSION="DIMENSIONLESS"; }
  SCALAR(LAW29_CR_PARAM)     { DIMENSION="DIMENSIONLESS"; }
  SCALAR(LAW29_CR_CHECK)     { DIMENSION="DIMENSIONLESS"; } 
  SCALAR(LAW29_PARAM_6)      { DIMENSION="DIMENSIONLESS"; } 
  SCALAR(LAW29_MF_INIT)      { DIMENSION="DIMENSIONLESS"; } 
  //
  SIZE(LAW29_NB_CARDS);
  ARRAY(LAW29_NB_CARDS,"Cards") {
    SCALAR(LAW29_CARDS);
  }
/*
  graphical SUPPORT("Support") {
    OBJECTS=(/LAW29_PART/SHELL,/LAW29_PART/BRICK);
   ADD(LAW29_PART,"Parts");
  }
*/
}

// File format
FORMAT(radioss44) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 0)
    {
        HEADER("/MAT/LAW29/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#        Init. dens.          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else
    {
        COMMENT("#        Init. dens.");
        CARD("%20lg",MAT_RHO);
    }

  COMMENT("#        Version");
  CARD("%-100s",LAW29_VERSION);
  COMMENT("#   FRELIM     DTMIN        NF     VELSC    RSTRAT     RTEMP   ENCRYPT   PARAM_1          ");
  CARD("%10lg%10lg%10d%10lg%10lg%10lg%10d%10d",LAW29_FRELIM,LAW29_DTMIN,LAW29_NF,LAW29_VELSC,LAW29_RSTRAT,LAW29_RTEMP,LAW29_ENCRYPT,LAW29_PARAM_1);
  COMMENT("# EL_YOUNG  EL_POISS  EL_BULKM  EL_SHEAR  EL_ORTHO  EL_SHRCO   PARAM_2   PARAM_3          ");
  CARD("%10lg%10lg%10lg%10lg%10d%10lg%10d%10d",MAT_E,MAT_NU,MAT_BULK,LAW29_MAT_SHEAR,LAW29_EL_ORTHO,LAW29_EL_SHRCO,LAW29_PARAM_2,LAW29_PARAM_3);
  COMMENT("# PL_HARDE  PL_ORTHO  PL_ISKIN  PL_ASYMM  PL_WAIST  PL_BIAXF  PL_COMPR  PL_DAMAG");
  CARD("%10d%10d%10d%10d%10d%10d%10d%10d",LAW29_PL_HARDE,LAW29_PL_ORTHO,LAW29_PL_ISKIN,LAW29_PL_ASYMM,LAW29_PL_WAIST,LAW29_PL_BIAXF,LAW29_PL_COMPR,LAW29_PL_DAMAG);
  COMMENT("# NF_CURVE  NF_ORTHO  NF_DEPEN  SF_CURVE  SF_PARAM  SF_POSTC   PARAM_4   PARAM_5          ");
  CARD("%10d%10d%10d%10d%10d%10d%10d%10d",LAW29_NF_CURVE,LAW29_NF_ORTHO,LAW29_NF_DEPEN,LAW29_SF_CURVE,LAW29_SF_PARAM,LAW29_SF_POSTC,LAW29_PARAM_4,LAW29_PARAM_5);
  COMMENT("# CR_HARDE  CR_ORTHO  CR_ISKIN  CR_POSTC  CR_PARAM  CR_CHECK             MF_INIT");
  CARD("%10d%10d%10d%10d%10d%10d%10d%10d",LAW29_CR_HARDE,LAW29_CR_ORTHO,LAW29_CR_ISKIN,LAW29_CR_POSTC,LAW29_CR_PARAM,LAW29_CR_CHECK,LAW29_PARAM_6,LAW29_MF_INIT);
  COMMENT("# FUNCTIONS");
  FREE_CARD_LIST(LAW29_NB_CARDS)
  {  
      CARD("%-100s",LAW29_CARDS);
  }
}

FORMAT(radioss51) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 0)
    {
        HEADER("/MAT/LAW29/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#        Init. dens.          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#        Init. dens.");
        CARD("%20lg",MAT_RHO);
    }

  COMMENT("#        Version");
  CARD("%-100s",LAW29_VERSION);
  COMMENT("#   FRELIM     DTMIN        NF     VELSC    RSTRAT     RTEMP   ENCRYPT   PARAM_1          ");
  CARD("%10lg%10lg%10d%10lg%10lg%10lg%10d%10d",LAW29_FRELIM,LAW29_DTMIN,LAW29_NF,LAW29_VELSC,LAW29_RSTRAT,LAW29_RTEMP,LAW29_ENCRYPT,LAW29_PARAM_1);
  COMMENT("# EL_YOUNG  EL_POISS  EL_BULKM  EL_SHEAR  EL_ORTHO  EL_SHRCO   PARAM_2   PARAM_3          ");
  CARD("%10lg%10lg%10lg%10lg%10d%10lg%10d%10d",MAT_E,MAT_NU,MAT_BULK,LAW29_MAT_SHEAR,LAW29_EL_ORTHO,LAW29_EL_SHRCO,LAW29_PARAM_2,LAW29_PARAM_3);
  COMMENT("# PL_HARDE  PL_ORTHO  PL_ISKIN  PL_ASYMM  PL_WAIST  PL_BIAXF  PL_COMPR  PL_DAMAG");
  CARD("%10d%10d%10d%10d%10d%10d%10d%10d",LAW29_PL_HARDE,LAW29_PL_ORTHO,LAW29_PL_ISKIN,LAW29_PL_ASYMM,LAW29_PL_WAIST,LAW29_PL_BIAXF,LAW29_PL_COMPR,LAW29_PL_DAMAG);
  COMMENT("# NF_CURVE  NF_ORTHO  NF_DEPEN  SF_CURVE  SF_PARAM  SF_POSTC   PARAM_4   PARAM_5          ");
  CARD("%10d%10d%10d%10d%10d%10d%10d%10d",LAW29_NF_CURVE,LAW29_NF_ORTHO,LAW29_NF_DEPEN,LAW29_SF_CURVE,LAW29_SF_PARAM,LAW29_SF_POSTC,LAW29_PARAM_4,LAW29_PARAM_5);
  COMMENT("# CR_HARDE  CR_ORTHO  CR_ISKIN  CR_POSTC  CR_PARAM  CR_CHECK             MF_INIT");
  CARD("%10d%10d%10d%10d%10d%10d%10d%10d",LAW29_CR_HARDE,LAW29_CR_ORTHO,LAW29_CR_ISKIN,LAW29_CR_POSTC,LAW29_CR_PARAM,LAW29_CR_CHECK,LAW29_PARAM_6,LAW29_MF_INIT);
  COMMENT("# FUNCTIONS");
  FREE_CARD_LIST(LAW29_NB_CARDS)
  {  
      CARD("%-100s",LAW29_CARDS);
  }
}

