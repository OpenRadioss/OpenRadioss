//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 00
//

ATTRIBUTES(COMMON)
{
    // Support
    //NB_PARTS                  = SIZE("Number of Connected Parts"); 
    //COMPONENT                 = ARRAY[NB_PARTS](COMPONENT,"Connected Parts");
    KEYWORD_STR                 = VALUE(STRING, "Solver Keyword");

    NUM_COMMENTS                = SIZE("NUM_COMMENTS");
    COMMENTS                    = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField            = VALUE(INT,  "User Comments");
    MAT_REFRHO_Option           = VALUE(INT,  "RefRho_Option");
    MAT_RHO                     = VALUE(FLOAT,  "Initial Density");
    Refer_Rho                   = VALUE(FLOAT,  "Reference Density");
    MAT_E                       = VALUE(FLOAT,  "Young's Modulus");
    MAT_NU                      = VALUE(FLOAT,  "Poisson Ratio");
    MAT_SIGY                    = VALUE(FLOAT,  "Yield Stress");
    MAT_BETA                    = VALUE(FLOAT,  "Hardening Parameter");
    MAT_HARD                    = VALUE(FLOAT,  "Hardening Exponent");
    MAT_EPS                     = VALUE(FLOAT,  "Failure Plastic Strain");
    MAT_SIG                     = VALUE(FLOAT,  "Max. Stress");
    MAT_E0                      = VALUE(FLOAT,  "Initial Energy Per Unit Volume");
    SSAM301                     = VALUE(STRING,  "File Name of\nthe SESAME EOS Table (301)");
    MAT_SRC                     = VALUE(FLOAT,  "Strain Rate Coeff");
    MAT_SRP                     = VALUE(FLOAT,  "Reference Strain Rate");
    MAT_M                       = VALUE(FLOAT,  "Temperature Exponent");
    MAT_TMELT                   = VALUE(FLOAT,  "Melting Temperature");
    MAT_TMAX                    = VALUE(FLOAT,  "For T>T_MAX, M=1 is Used");
    //

    // HEAT
    Heat_Inp_opt                = VALUE(INT,   "Heat"); 
   /* if(Heat_Inp_opt != 0){*/
        SSAM504                 = VALUE(STRING,  "File Name of\nthe SESAME Ionisation Table (504)");
        //
        K_Lor                   = VALUE(FLOAT,  "Lorentz Conductivity");
        MAT_Lamda               = VALUE(FLOAT,  "Lambda");
        MAT_A                   = VALUE(FLOAT,  "Atomic Weight");
        MAT_K                   = VALUE(FLOAT,  "Max. Conductivity");
        //
        SSAM502                 = VALUE(STRING,  "File Name of\nthe SESAME Opacity Table (502)");
        //
        Sigma_k                 = VALUE(FLOAT,  "Stefan-Boltzman Constant");
  /*  }    */
    SUBGRP_HEAT_MAT             = VALUE(SUBOBJECT, "");
    // THERM_STRESS
    THERM_STRESS                = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS         = VALUE(SUBOBJECT, "");
    ALE_Form                    = VALUE(INT, "Flag for Heat Transfer Formulation");
    SUBGRP_ALE_MAT              = VALUE(SUBOBJECT, "");
    SUBGRP_EULER_MAT            = VALUE(SUBOBJECT, "");
    //
    Mat_Name_OR_LawNo           = VALUE(INT, "");
    TITLE                       = VALUE(STRING,"");
    IO_FLAG                     = VALUE(INT, "");
    LAW_NO                      = VALUE(STRING, "");
    DUMMY                       = VALUE(STRING,"Dummy variable for Ref_Rho flag");

}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                 = 9000;
    NUM_COMMENTS                = 5110;
    COMMENTS                    = 5109;
    CommentEnumField            = 7951;
    MAT_REFRHO_Option           = 4285;
    MAT_RHO                     = 118;
    Refer_Rho                   = 4229;
    MAT_E                       = 119;
    MAT_NU                      = 120;
    MAT_SIGY                    = 152;
    MAT_BETA                    = 148;
    MAT_HARD                    = 71;
    MAT_EPS                     = 195;
    MAT_SIG                     = 5038;
    MAT_E0                      = 1507;
    SSAM301                     = 4383;
    MAT_SRC                     = 155;
    MAT_SRP                     = 156;
    MAT_M                       = 314;
    MAT_TMELT                   = 315;
    MAT_TMAX                    = 316;
    SSAM504                     = 4385;
    K_Lor                       = 4386;
    MAT_Lamda                   = 4100;
    MAT_A                       = 6056;
    MAT_K                       = 998;
    SSAM502                     = 4387;
    Sigma_k                     = 4283;
    Mat_Name_OR_LawNo           = 4538;
    LAW_NO                      = -1;
    IO_FLAG                     = -1;
    TITLE                       = -1;
    DUMMY                       = -1;
    //HEAT
    Heat_Inp_opt                = 4346;
    SUBGRP_HEAT_MAT             = -1;
    // THERM_STRESS
    THERM_STRESS                = 4555;
    SUBGRP_THERM_STRESS         = -1;
    ALE_Form                    = 4336;
    SUBGRP_ALE_MAT              = -1;
    SUBGRP_EULER_MAT            = -1;
}

CHECK(COMMON)
{
    MAT_BETA                    >0.0;
    MAT_E0                      >0.0;
    MAT_EPS                     >0.0;
    MAT_HARD                    >=0.0;
    MAT_HARD                    <=1.0;
    MAT_NU                      >=0.0;
    MAT_NU                      <0.5;
    MAT_RHO                     >0.0;
    MAT_RHO                     >0.0;
    MAT_SIG                     >0.0;
    MAT_SIGY                    >0.0;
    MAT_SRP                     >0.0;
}

DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY         = SCALAR(MAT_RHO);
    YOUNG_MODULUS           = SCALAR(MAT_E);
    POISSON_RATIO           = SCALAR(MAT_NU);
public:
    SOUND_SPEED             = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                       = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                      = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID       = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}

DEFAULTS(COMMON)
{
    K_Lor                       = 1.6833e-09;
    MAT_EPS                     = 1.0e30;
    MAT_Lamda                   = 8.3e06;
    MAT_SIG                     = 1.0e30;
    MAT_SRC                     = 0.0;
    MAT_SRP                     = 10e-6;
    MAT_TMAX                    = 10e30;
    MAT_TMELT                   = 10e30;

}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Mat_Name_OR_LawNo ==2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW26/");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/SESAM/");
    }
    FLAG(MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho)       { DIMENSION="density";       }
    }
mandatory:
    SCALAR(MAT_RHO)             { DIMENSION="density";            }
optional:    
    SCALAR(MAT_E)               { DIMENSION="pressure"; }
    SCALAR(MAT_NU)              { DIMENSION="DIMENSIONLESS"; }
    //
    SCALAR(MAT_SIGY)            { DIMENSION="pressure"; } 
    SCALAR(MAT_BETA)            { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_HARD)            { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_EPS)             { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_SIG)             { DIMENSION="pressure"; }
    SCALAR(MAT_E0)              { DIMENSION="pressure"; }
    //SCALAR(SSAM301);
    FILE(SSAM301);
    //
    SCALAR(MAT_SRC)             { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_SRP)             { DIMENSION="strain_rate"; }
    SCALAR(MAT_M)              { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_TMELT)           { DIMENSION="k"; }
    SCALAR(MAT_TMAX)            { DIMENSION="k"; }
    if( Heat_Inp_opt == TRUE)
    {
        //SCALAR(SSAM504);
        FILE(SSAM504); 
        SCALAR(K_Lor)           { DIMENSION="lorentz_conductivity"; }
        SCALAR(MAT_Lamda)       { DIMENSION="lambda"; }
        SCALAR(MAT_A)           { DIMENSION="molar_mass"; }
        SCALAR(MAT_K)           { DIMENSION="thermalconductivity"; }
        //SCALAR(SSAM502);
        FILE(SSAM502);
        SCALAR(Sigma_k)         { DIMENSION="stefan_lorentz_constant"; }
    }
    /*if( Heat_Inp_opt !=1)
    {
    ASSIGN(KEYWORD_STR, "BLANK CARD");
    ASSIGN(KEYWORD_STR, "BLANK CARD");
    ASSIGN(KEYWORD_STR, "BLANK CARD");
    ASSIGN(KEYWORD_STR, "BLANK CARD");
    }
    */
    // HEAT data
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }
    // THERM_STRESS
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
    
    //
     /*mandatory:
      graphical SUPPORT("Support") {
        OBJECTS=(/PART/QUAD,/PART/BRICK);
        ADD(PART,"Parts");
      }*/
}

GUI(ALE) {
optional:
    graphical RADIO(ALE_Form) 
    {
        ADD(1,"NONE") ;
        ADD(2,"ALE") ;
        ADD(3,"EULER");
    }
    if(ALE_Form == 2)
    {
        SUBOBJECT(SUBGRP_ALE_MAT) {SUBTYPES = (/SUBOBJECT/ALE_MAT);}
    }
    else if(ALE_Form == 3)
    {
        SUBOBJECT(SUBGRP_EULER_MAT) {SUBTYPES = (/SUBOBJECT/EULER);}
    }
}

// File format

FORMAT(radioss51) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
        
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW26/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/SESAM/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    //
    COMMENT("#                  E                  nu");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    //
    COMMENT("#                  A                   B                   n              epsmax              sigmax");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_SIGY,MAT_BETA,MAT_HARD,MAT_EPS,MAT_SIG);
    //
    COMMENT("#                 E0");
    CARD("%20lg",MAT_E0);  
    //
    COMMENT("#                                                                                           sesam301");
    CARD("%-100s",SSAM301);  
    //
    COMMENT("#                  C                EPS0                   M               Tmelt                Tmax");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_SRC,MAT_SRP,MAT_M,MAT_TMELT,MAT_TMAX);
    //
    if (IO_FLAG == 0)
    {
        if(Heat_Inp_opt != 0)
        {
            COMMENT("#                                                                                           sesam504");
            CARD("%-100s",SSAM504);
            //
            COMMENT("#              K_LOR             LAMBDA                   AW               K_MAX");
            CARD("%20lg%20lg%20lg%20lg",K_Lor,MAT_Lamda,MAT_A,MAT_K);  
            //
            COMMENT("#                                                                                           sesam502");
            CARD("%-100s",SSAM502); 
            //
            COMMENT("#             SIGMA");
            CARD("%20lg",Sigma_k);
        }
        else
        {
            COMMENT("#  Blank Card");
            BLANK;
            COMMENT("#  Blank Card");
            BLANK;
            COMMENT("#  Blank Card");
            BLANK;
            COMMENT("#  Blank Card");
            BLANK;
        }
    }
    else if (IO_FLAG == 1)
    {
            COMMENT("#                                                                                           sesam504");
            CARD("%-100s",SSAM504);
            //
            COMMENT("#              K_LOR             LAMBDA                   AW               K_MAX");
            CARD("%20lg%20lg%20lg%20lg",K_Lor,MAT_Lamda,MAT_A,MAT_K);  
            //
            COMMENT("#                                                                                           sesam502");
            CARD("%-100s",SSAM502); 
            //
            COMMENT("#             SIGMA");
            CARD("%20lg",Sigma_k);
    }
    //
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
    if(ALE_Form == 2)
    {
        SUBOBJECTS(SUBGRP_ALE_MAT,/SUBOBJECT/ALE_MAT);
    }
    else if(ALE_Form == 3)
    {
        SUBOBJECTS(SUBGRP_EULER_MAT,/SUBOBJECT/EULER);
    }
}
