//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 72(HILL_MMC) (Anisotropic Hill material law with a modified Mohr fracture criteria) Setup File
//

ATTRIBUTES(COMMON) {
    // Support
    // NB_PARTS                     = SIZE("Number of Connected Parts"); 
    //COMPONENT                     = ARRAY[NB_PARTS](COMPONENT,"Connected Parts");
    KEYWORD_STR                     = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                    = SIZE("NUM_COMMENTS");
    CommentEnumField                = VALUE(INT,"User Comments");
    COMMENTS                        = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    MAT_RHO                         = VALUE(FLOAT,"Initial Density");
    Refer_Rho                       = VALUE(FLOAT,"Reference Density (for lower than 14.0 version)");
    DUMMY                           = VALUE(STRING,"Dummy Variable for Ref_Rho Flag");
    MAT_REFRHO_Option               = VALUE(INT, "RefRho_Option");
    MAT_E                           = VALUE(FLOAT, "Initial Young's Modulus");
    MAT_NU                          = VALUE(FLOAT, "Poisson's Ratio");
    SIGMA_r                         = VALUE(FLOAT, "Initial Yield Stress");
    Epsilon_0                       = VALUE(FLOAT, "Initial Plastic Strain");
    MAT_n1_t                        = VALUE(FLOAT, "Hardening Exponent");
    MAT_F                           = VALUE(FLOAT, "Hill Anisotropic Parameter F");
    MAT_G0                          = VALUE(FLOAT, "Hill Anisotropic Parameter G");
    MAT_HARD                        = VALUE(FLOAT, "Hill Anisotropic Parameter H");
    MAT_N                           = VALUE(FLOAT, "Hill Anisotropic Parameter N");
    MAT_Lamda                       = VALUE(FLOAT, "Hill Anisotropic Parameter L");
    MAT_M                           = VALUE(FLOAT, "Hill Anisotropic Parameter M");
    MAT_C1                          = VALUE(FLOAT, "Parameter for MMC Fracture Model C1");
    MAT_C2                          = VALUE(FLOAT, "Parameter for MMC Fracture Model C2");
    MAT_C3                          = VALUE(FLOAT, "Parameter for MMC Fracture Model C3");
    MAT_MUE1                        = VALUE(FLOAT, "Exponent for Softening");
    MAT_Dc                          = VALUE(FLOAT, "Damage Criteria");
    // HEAT
    Heat_Inp_opt                    = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT                 = VALUE(SUBOBJECT, "");
    THERM_STRESS                    = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS             = VALUE(SUBOBJECT, "");
    IO_FLAG                         = VALUE(INT, "");
    LAW_NO                          = VALUE(STRING, "");
    Mat_Name_OR_LawNo               = VALUE(INT,  "RADIOSS_COMMENT_FLAG");
    TITLE                           = VALUE(STRING,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                     = 9000;
    COMMENTS                        = 5109;
    CommentEnumField                = 7951;
    Heat_Inp_opt                    = 4346;
    SUBGRP_HEAT_MAT                 = -1;
    THERM_STRESS                    = 4555;
    SUBGRP_THERM_STRESS             = -1;
    MAT_REFRHO_Option               = 4285;
    MAT_RHO                         = 118;
    Refer_Rho                       = 4229;
    Epsilon_0                       = 4198;
    MAT_C1                          = 1501;
    MAT_C2                          = 1502;
    MAT_C3                          = 1503;
    MAT_Dc                          = 6062;
    MAT_E                           = 119;
    MAT_F                           = 6136;
    MAT_G0                          = 304;
    MAT_HARD                        = 71;
    MAT_Lamda                       = 4100;
    MAT_M                           = 314;
    MAT_MUE1                        = 8014;
    MAT_N                           = 5037;
    MAT_NU                          = 120;
    MAT_n1_t                        = 6004;
    SIGMA_r                         = 4201;
    NUM_COMMENTS                    = 5110;
    DUMMY                           = -1;
    LAW_NO                          = -1;
    Mat_Name_OR_LawNo               = 4538;
    IO_FLAG                         = -1;
    TITLE                           = -1;
}

DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY                 = SCALAR(MAT_RHO);
    YOUNG_MODULUS                   = SCALAR(MAT_E);
    POISSON_RATIO                   = SCALAR(MAT_NU);
public:
    SOUND_SPEED                     = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                               = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                              = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID               = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}

CHECK(COMMON)
{
    MAT_RHO                         >0.0;
}

DEFAULTS(COMMON)
{
    MAT_C1                          = 1.0;
    MAT_C2                          = 1.0;
    MAT_C3                          = 1.0;
    MAT_Dc                          = 1.0;
    MAT_F                           = 1.0;
    MAT_G0                          = 1.0;
    MAT_HARD                        = 1.0;
    MAT_Lamda                       = 1.0;
    MAT_M                           = 1.0;
    MAT_MUE1                        = 1.0;
    MAT_N                           = 1.0;
    SIGMA_r                         = 1.0e30;
    Mat_Name_OR_LawNo               = 1;
}

GUI(COMMON) {
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if(Mat_Name_OR_LawNo == 2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW72/");
    }
    else 
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/HILL_MMC/");
    }
mandatory:
    SCALAR(MAT_RHO)             { DIMENSION="density";            }
optional:
    FLAG(MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho)       { DIMENSION="density";       }
    }
mandatory:
    //
    SCALAR(MAT_E)               { DIMENSION="pressure";      }
    SCALAR(MAT_NU)              { DIMENSION="DIMENSIONLESS"; }
    //
    SCALAR(SIGMA_r)             { DIMENSION="pressure";      }
    SCALAR(Epsilon_0)           { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_n1_t)            { DIMENSION="DIMENSIONLESS"; }
    //
    SCALAR(MAT_F)               { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_G0)              { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_HARD)            { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_N)               { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_Lamda)           { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_M)               { DIMENSION="DIMENSIONLESS"; }
    //
    SCALAR(MAT_C1)              { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_C2)              { DIMENSION="pressure";      }
    SCALAR(MAT_C3)              { DIMENSION="DIMENSIONLESS"; }
    //
    SCALAR(MAT_MUE1)            { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_Dc)              { DIMENSION="DIMENSIONLESS"; }

    // HEAT data
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }

    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
    /*
    graphical SUPPORT("Support") {
    OBJECTS=(/PART/SHELL,/PART/SH4N,/PART/SH3N,/PART/BRICK,/PART/BRIC20);
    ADD(PART,"Parts");
    }
    */
}

//File format
FORMAT(radioss100) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW72/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/HILL_MMC/%d", _ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    //
    COMMENT("#                  E                  nu");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    //
    COMMENT("#               Sig0                Eps0                   n                   F                   G");
    CARD("%20lg%20lg%20lg%20lg%20lg",SIGMA_r,Epsilon_0,MAT_n1_t,MAT_F,MAT_G0);
    //
    COMMENT("#                  H                   N                   L                   M");
    CARD("%20lg%20lg%20lg%20lg",MAT_HARD,MAT_N,MAT_Lamda,MAT_M);
    //
    COMMENT("#                 C1                  C2                  C3                   m                  Dc");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_C1,MAT_C2,MAT_C3,MAT_MUE1,MAT_Dc);
    //
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
