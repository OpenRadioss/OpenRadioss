//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 76(SAMP) (Semi-Analytical Plastic Model) Setup File
//

ATTRIBUTES(COMMON) {
    // Support
    // NB_PARTS                                 = SIZE("Number of Connected Parts"); 
    //COMPONENT                                 = ARRAY[NB_PARTS](COMPONENT,"Connected Parts");
    KEYWORD_STR                                 = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                                = SIZE("NUM_COMMENTS");
    CommentEnumField                            = VALUE(INT,"User Comments");
    COMMENTS                                    = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    MAT_RHO                                     = VALUE(FLOAT,"Initial Density");
    Refer_Rho                                   = VALUE(FLOAT,"Reference Density (for lower than 14.0 version)");
    DUMMY                                       = VALUE(STRING,"Dummy Variable for Ref_Rho Flag");
    MAT_REFRHO_Option                           = VALUE(INT, "RefRho_Option");
    MAT_E                                       = VALUE(FLOAT, "Initial Young's Modulus");
    MAT_NU                                      = VALUE(FLOAT, "Poisson's Ratio");
    XFAC1                                       = VALUE(FLOAT, "Scale Factor for the Second Entry (strain rate) of the Table 1 ");
    XFAC2                                       = VALUE(FLOAT, "Scale Factor for the Second Entry (strain rate) of the Table 2 ");
    XFAC3                                       = VALUE(FLOAT, "Scale Factor for the Second Entry (strain rate) of the Table 3 ");
    FUN_D1                                      = VALUE(FUNCT, "Tension Yield Stress Function Identifier (Stress vs. Plastic Tension Strain)");
    FUN_D2                                      = VALUE(FUNCT, "Compression Yield Stress Function Identifier (Stress vs. Plastic Compression Strain)");
    FUN_D3                                      = VALUE(FUNCT, "Shear Yield Stress Function Identifier (Stress vs. Plastic Shear Strain)");
    FUN_D4                                      = VALUE(FUNCT, "Bi Axial Yield Stress Function Identifier (Stress vs. Plastic Shear Strain)");
    TAB_ID1                                     = VALUE(FUNCT, "Tension Yield Stress Table (Stress vs. Plastic Tension Strain with the Possibility of the Strain Rate Dependency)") ;
    TAB_ID2                                     = VALUE(FUNCT, "Compression Yield Stress Table (Stress vs. Plastic Compression Strain with the Possibility of the Strain Rate Dependency)") ;
    TAB_ID3                                     = VALUE(FUNCT, "Shear Yield Stress Table (Stress vs. Plastic Shear Strain with the Possibility of the Strain Rate Dependency)") ;
    FScale11                                    = VALUE(FLOAT, "Scale Factor for Ordinate (stress) for TAB_ID1");
    FScale22                                    = VALUE(FLOAT, "Scale Factor for Ordinate (stress) for TAB_ID2");
    FScale33                                    = VALUE(FLOAT, "Scale Factor for Ordinate (stress) for TAB_ID3");
    FScale12                                    = VALUE(FLOAT, "Scale Factor for Ordinate (stress) for funct_IDb");
    XFAC                                        = VALUE(FLOAT, "Scale Factor for the Second Entry (strain rate) of the 3 Tables") ;
    MAT_NUt                                     = VALUE(FLOAT, "Plastic Poisson's Ratio");
    FUN_B5                                      = VALUE(FUNCT, "Plastic Poisson's Ratio Function");
    MAT_PScale                                  = VALUE(FLOAT, "Scale Factor for Ordinate (MAT_NUt ) in Funct_IDpr");
    FSMOOTH                                     = VALUE(INT, "Smooth Strain Rate Option Flag");
    FCUT                                        = VALUE(FLOAT, "Cutoff Frequency for Strain Rate Filtering");
    MAT_Epsilon_F                               = VALUE(FLOAT,"Failure Plastic Strain");
    Epsilon_0                                   = VALUE(FLOAT,"Ruptured Plastic Strain");
    MAT_Dc                                      = VALUE(FLOAT,"Critical Damage");
    FUN_A1                                      = VALUE(FUNCT, "Damage Function Identifier (Damage vs Plastic Strain)");
    FUN_A2                                      = VALUE(FUNCT, "Scale Factor that Works Multi. on the Dc Value Depending on the Triaxiality");
    FUN_A3                                      = VALUE(FUNCT, "Scale Factor that Works Multi. on the Dc Value Depending on the Linear Element Dim.");
    IFORM                                       = VALUE(INT, "Choice of Formulation Flag");
    MAT_Iflag                                   = VALUE(INT, "Choice of Yield Surface Flag");
    Gflag                                       = VALUE(INT, "Convexity Condition Flag");
    // HEAT
    Heat_Inp_opt                                = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT                             = VALUE(SUBOBJECT, "");
    THERM_STRESS                                = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS                         = VALUE(SUBOBJECT, "");
    IO_FLAG                                     = VALUE(INT, "");
    LAW_NO                                      = VALUE(STRING, "");
    Mat_Name_OR_LawNo                           = VALUE(INT,  "RADIOSS_COMMENT_FLAG");
    TITLE                                       = VALUE(STRING,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                                 = 9000;
    COMMENTS                                    = 5109;
    CommentEnumField                            = 7951;
    Heat_Inp_opt                                = 4346;
    SUBGRP_HEAT_MAT                             = -1;
    THERM_STRESS                                = 4555;
    SUBGRP_THERM_STRESS                         = -1;
    MAT_REFRHO_Option                           = 4285;
    MAT_RHO                                     = 118;
    Refer_Rho                                   = 4229;
    FScale12                                    = 4053;
    FUN_A2                                      = 170;
    FUN_A3                                      = 172;
    FUN_D1                                      = 8035;
    FUN_D2                                      = 8036;
    FUN_D3                                      = 8037;
    FUN_D4                                      = 8038;
    Epsilon_0                                   = 4198;
    FScale11                                    = 4050;
    FScale22                                    = 4051;
    FScale33                                    = 4052;
    FUN_A1                                      = 45;
    FUN_B5                                      = 1142;
    Gflag                                       = 5112;
    IFORM                                       = 4028;
    MAT_Dc                                      = 6062;
    MAT_E                                       = 119;
    MAT_Epsilon_F                               = 4093;
    MAT_Iflag                                   = 6002;
    MAT_NU                                      = 120;
    MAT_NUt                                     = 5083;
    MAT_PScale                                  = 4095;
    NUM_COMMENTS                                = 5110;
    DUMMY                                       = -1;
    LAW_NO                                      = -1;
    Mat_Name_OR_LawNo                           = 4538;
    IO_FLAG                                     = -1;
    TITLE                                       = -1;
}

DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY = SCALAR(MAT_RHO);
    YOUNG_MODULUS   = SCALAR(MAT_E);
    POISSON_RATIO   = SCALAR(MAT_NU);
    SOUND_SPEED     = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
        private:
    G                       = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                      = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID       = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}

CHECK(COMMON)
{
    MAT_RHO                                     >0.0;
}

DEFAULTS(COMMON)
{
    Epsilon_0                                   = 1.0;
    FScale11                                    = 1.0;
    FScale12                                    = 1.0;
    FScale22                                    = 1.0;
    FScale33                                    = 1.0;
    MAT_Dc                                      = 1.0;
    MAT_Epsilon_F                               = 1.0;
    MAT_NUt                                     = 0.3;
    MAT_PScale                                  = 1.0;
    Mat_Name_OR_LawNo                           = 1;
}

GUI(COMMON) {
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if(Mat_Name_OR_LawNo == 2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW76/");
    }
    else 
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/SAMP/");
    }
    FLAG(MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho)        { DIMENSION="density";       }
    }
mandatory:
    SCALAR(MAT_RHO)              { DIMENSION="density";            }
    //
    SCALAR(MAT_E)                { DIMENSION="pressure";      }
    SCALAR(MAT_NU)               { DIMENSION="DIMENSIONLESS"; }
    //
    DATA(FUN_D1); //       { X_TITLE="Tensile strain";     Y_TITLE="Stress";}
    DATA(FUN_D2); //       { X_TITLE="Compression strain"; Y_TITLE="Stress";}
    DATA(FUN_D3); //       { X_TITLE="Shear strain";       Y_TITLE="Stress";}
    DATA(FUN_D4); //       { X_TITLE="Strain";             Y_TITLE="Stress";}
    //
    SCALAR(FScale11)            { DIMENSION="pressure"; }
    SCALAR(FScale22)            { DIMENSION="pressure"; }
    SCALAR(FScale33)            { DIMENSION="pressure"; }
    SCALAR(FScale12)            { DIMENSION="DIMENSIONLESS"; }
    //
    SCALAR(MAT_NUt)             { DIMENSION="DIMENSIONLESS"; }
    DATA(FUN_B5); //      { X_TITLE="Plastic strain";  Y_TITLE="MAT_NUt";}
    SCALAR(MAT_PScale)         { DIMENSION="DIMENSIONLESS"; }
    //
    SCALAR(MAT_Epsilon_F)       { DIMENSION="DIMENSIONLESS"; }
    SCALAR(Epsilon_0)           { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_Dc)              { DIMENSION="DIMENSIONLESS"; }
    //
    DATA(FUN_A1); //       { X_TITLE="Plastic strain"; Y_TITLE="Damage";}
    DATA(FUN_A2); //       { X_TITLE=""; Y_TITLE="";}
    DATA(FUN_A3); //       { X_TITLE=""; Y_TITLE="";}
    //
    RADIO(IFORM)
    {
        ADD(0, "0: No Associated Formulation (Default)");
        ADD(1, "1: Von Mises Associated Formulation");
    }
    RADIO(MAT_Iflag)
    {
        ADD(0, "0: Yield Surface is Linear in the Von Mises (Default)");
        ADD(1, "1: Yield Surface is Quadratic in the Von Mises (Recommended)");
    }
    RADIO(Gflag)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "1: The Convexity is Assured");
        ADD(2, "2: If Nu = Min (Nu, Nu_p)");
    }
    // HEAT data
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }

    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
    /*
    graphical SUPPORT("Support") {
    OBJECTS=(/PART/QUAD,/PART/BRICK,/PART/TETRA4,/PART/LINEAR_3D,/PART/PENTA6,/PART/LINEAR_THICK,
    /PART/TETRA10,/PART/SHEL16,/PART/BRIC20,/PART/SHELL);
    ADD(PART,"Parts");
    }
    */
}

//File format
FORMAT(radioss100) {
    //
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW76/%d",_ID_);
        CARD("%-100s", TITLE); 
    }
    else
    {
        HEADER("/MAT/SAMP/%d", _ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    //
    COMMENT("#                  E                  nu");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    //
    COMMENT("#funct_IDt funct_IDc funct_IDs funct_IDb");
    CARD("%10d%10d%10d%10d",FUN_D1,FUN_D2,FUN_D3,FUN_D4);
    //
    COMMENT("#           Fscale_t            Fscale_c            Fscale_s            Fscale_b");
    CARD("%20lg%20lg%20lg%20lg",FScale11,FScale22,FScale33,FScale12);
    //
    COMMENT("#               Nu_p func_IDpr           Fscale_pr");
    CARD("%20lg%10d%20lg",MAT_NUt,FUN_B5,MAT_PScale);
    //
    COMMENT("#        Epsilon_f_p         Epsilon_r_p                 D_c");
    CARD("%20lg%20lg%20lg",MAT_Epsilon_F,Epsilon_0,MAT_Dc);
    //
    COMMENT("#funct_ID1 funct_ID2 funct_ID3");
    CARD("%10d%10d%10d",FUN_A1,FUN_A2,FUN_A3);
    //
    COMMENT("#    IFORM     IQUAD     ICONV");
    CARD("%10d%10d%10d",IFORM,MAT_Iflag,Gflag);
    //
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
