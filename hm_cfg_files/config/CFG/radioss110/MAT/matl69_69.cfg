//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//Material law 69 (Hyperelastic material) Setup File
//

ATTRIBUTES(COMMON)
{
    // Support
    // NB_PARTS                         = SIZE("Number of Connected Parts"); 
    //COMPONENT                         = ARRAY[NB_PARTS](COMPONENT,"Connected Parts");
    NUM_COMMENTS                        = SIZE("NUM_COMMENTS");
    CommentEnumField                    = VALUE(INT,"User Comments");
    COMMENTS                            = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    KEYWORD_STR                         = VALUE(STRING, "Solver Keyword");
    MAT_RHO                             = VALUE(FLOAT,"Initial Density");
    Refer_Rho                           = VALUE(FLOAT,"Reference Density (for lower than 14.0 version)");
    DUMMY                               = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    MAT_REFRHO_Option                   = VALUE(INT, "RefRho_Option");
    MAT_Iflag                           = VALUE(INT,"Type of Hyperelastic Material Law");
    FUN_A1                              = VALUE(FUNCT,"Bulk Function Identifier");
    MAT_NU                              = VALUE(FLOAT,"Poisson's Ratio");
    MAT_FScale                          = VALUE(FLOAT,"Scale Factor for Bulk Function");
    NIP                                 = VALUE(INT,"Number of Data Pairs");
    FUN_B1                              = VALUE(FUNCT,"Curve Identifier for User Input Data Curve");
    // VISC_PRONY
    VISC_PRONY_option                   = VALUE(INT,"Visc Prony");
    SUBGRP_VISC_PRONY                   = VALUE(SUBOBJECT, "");
    // HEAT
    Heat_Inp_opt                        = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT                     = VALUE(SUBOBJECT, "");
    // THERM_STRESS
    THERM_STRESS                        = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS                 = VALUE(SUBOBJECT, "");
    TITLE                               = VALUE(STRING,"");
    IO_FLAG                             = VALUE(INT, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                         = 9000;
    COMMENTS                            = 5109;
    CommentEnumField                    = 7951;
    // HEAT
    Heat_Inp_opt                        = 4346;
    SUBGRP_HEAT_MAT                     = -1;
    // THERM_STRESS
    THERM_STRESS                        = 4555;
    SUBGRP_THERM_STRESS                 = -1;
    // VISC_PRONY
    VISC_PRONY_option                   = 4707;
    SUBGRP_VISC_PRONY                   = -1;
    MAT_REFRHO_Option                   = 4285;
    MAT_RHO                             = 118;
    Refer_Rho                           = 4229;
    FUN_A1                              = 45;
    FUN_B1                              = 168;
    MAT_FScale                          = 4092;
    MAT_Iflag                           = 6002;
    MAT_NU                              = 120;
    NIP                                 = 427;
    NUM_COMMENTS                        = 5110;
    DUMMY                               = -1;
    IO_FLAG                             = -1;
    TITLE                               = -1;
}

CHECK(COMMON)
{
    MAT_RHO                             >0.0;
}

DEFAULTS(COMMON)
{
    MAT_FScale                          = 1.0;
    NIP                                 = 2;
}

PARAMETERS(PARAMETERS) {
    MAT_RHO         = INPUT_SCALAR(MAT_RHO,"Initial Density");
    //
    MAT_Iflag       = INPUT_SCALAR(MAT_Iflag,"Type of Hyperelastic Material Law");
    FUN_A1          = INPUT_SCALAR(FUN_A1,"Bulk Function Identifier");
    MAT_NU          = INPUT_SCALAR(MAT_NU,"Poisson's Ratio");
    MAT_FScale      = INPUT_SCALAR(MAT_FScale,"Scale Factor for Bulk Function");
    NIP             = INPUT_SCALAR(NIP,"Number of Data Pairs");
    FUN_B1          = INPUT_SCALAR(FUN_B1,"Curve Identifier for User Input Data Curve");
    //
}

DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY   = SCALAR(MAT_RHO);
    POISSON_RATIO     = SCALAR(MAT_NU);
}


GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    ASSIGN(KEYWORD_STR, "/MAT");
    ASSIGN(KEYWORD_STR, "/LAW69/");
    FLAG(MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho)   { DIMENSION="density";       }
    }
mandatory:
    SCALAR(MAT_RHO)         { DIMENSION="density";            }
    RADIO(MAT_Iflag)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1,"1: Ogden Law");
        ADD(2,"2: Mooney-Rivlin Law");
    }
optional: 
    DATA(FUN_A1);
    /*
    {
    X_TITLE="Jacobian value";                  X_DIMENSION="DIMENSIONLESS";      
    Y_TITLE="Scale factor for bulk co-efficient";      Y_DIMENSION="DIMENSIONLESS";      
    }
    */
    SCALAR(MAT_NU)          { DIMENSION ="DIMENSIONLESS"; }
    SCALAR(MAT_FScale)      {DIMENSION="pressure";}
    SCALAR(NIP)             {DIMENSION="DIMENSIONLESS";}
mandatory:
    DATA(FUN_B1);
    /*
    {
    X_TITLE="Engineering strain";          X_DIMENSION="DIMENSIONLESS";      
    Y_TITLE="Stress";                      Y_DIMENSION="pressure";      
    }
    */
    // HEAT data
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }
    // THERM_STRESS
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
    // VISC_PRONY data
    graphical FLAG(VISC_PRONY_option);
    if(VISC_PRONY_option!=0)
    {
        SUBOBJECT(SUBGRP_VISC_PRONY) {SUBTYPES = (/SUBOBJECT/VISC);}
    }
    /*
    graphical SUPPORT("Support")
    {
    OBJECTS=(/COMPONENT/QUAD,/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/PENTA6,/COMPONENT/LINEAR_THICK,
    /COMPONENT/TETRA10,/COMPONENT/SHEL16,/COMPONENT/BRIC20,/COMPONENT/SPHCEL,/COMPONENT/SHELL);
    ADD(COMPONENT,"Parts");
    }
    */
}

//File format
FORMAT(radioss110)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 0)
    {
        HEADER("/MAT/LAW69/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#   LAW_ID    FCT_ID                  NU              FSCALE    N_PAIR");
    CARD("%10d%10d%20lg%20lg%10d",MAT_Iflag,FUN_A1,MAT_NU,MAT_FScale,NIP);

    COMMENT("#  FCT_ID1");
    CARD("%10d",FUN_B1);
    // HEAT data    
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    // THERM_STRESS 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
    // VISC_PRONY data
    if(VISC_PRONY_option!=0)
    {
        SUBOBJECTS(SUBGRP_VISC_PRONY,/SUBOBJECT/VISC);
    }
}
