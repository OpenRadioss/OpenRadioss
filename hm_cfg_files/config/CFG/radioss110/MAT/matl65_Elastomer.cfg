//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Material law 65

ATTRIBUTES(COMMON)
{
    KEYWORD_STR                                 = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                                = SIZE("NUM_COMMENTS");
    COMMENTS                                    = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                            = VALUE(INT,  "User Comments");
    MAT_REFRHO_Option                           = VALUE(INT,  "RefRho_Option");
    MAT_RHO                                     = VALUE(FLOAT,  "Initial Density");
    Refer_Rho                                   = VALUE(FLOAT,  "Reference Density");
    DUMMY                                       = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    MAT_E                                       = VALUE(FLOAT,  "Initial Young's Modulus");
    MAT_NU                                      = VALUE(FLOAT,  "Poisson's Ratio");
    MAT_EPS                                     = VALUE(FLOAT,  "Failure Plastic Strain");
    NRATEP                                      = SIZE("Number of Loading/Unloading Function Pair") ;
    Fsmooth                                     = VALUE(INT,  "Smooth Strain Rate Flag");
    Fcut                                        = VALUE(FLOAT,  "Cutoff Frequency for Strain Rate Filtering");
    FUN_LOAD                                    = ARRAY[NRATEP](FUNCT,"Function for Load Stress"); 
    FUN_UNLOAD                                  = ARRAY[NRATEP](FUNCT,"Function for Unload Stress"); 
    SCALE_LOAD                                  = ARRAY[NRATEP](FLOAT,  "Stress Scale Factor");
    STRAINRATE_LOAD                             = ARRAY[NRATEP](FLOAT,  "Strain Rate");
    Heat_Inp_opt                                = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT                             = VALUE(SUBOBJECT, "");
    THERM_STRESS                                = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS                         = VALUE(SUBOBJECT, "");
    IO_FLAG                                     = VALUE(INT, "");
    LAW_NO                                      = VALUE(STRING, "");
    Mat_Name_OR_LawNo                           = VALUE(INT,  "RADIOSS_COMMENT_FLAG");
    TITLE                                       = VALUE(STRING,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                                 = 9000;
    COMMENTS                                    = 5109;
    CommentEnumField                            = 7951;
    NUM_COMMENTS                                = 5110;
    MAT_REFRHO_Option                           = 4285;
    MAT_RHO                                     = 118;
    Refer_Rho                                   = 4229;
    DUMMY                                       = -1;
    MAT_E                                       = 119;
    MAT_NU                                      = 120;
    MAT_EPS                                     = 195;
    NRATEP                                      = 4232;
    Fsmooth                                     = 5355;
    Fcut                                        = 5356;
    FUN_LOAD                                    = 4234;
    FUN_UNLOAD                                  = 4239;
    SCALE_LOAD                                  = 4236;
    STRAINRATE_LOAD                             = 4235;
    Heat_Inp_opt                                = 4346;
    SUBGRP_HEAT_MAT                             = -1;
    THERM_STRESS                                = 4555;
    SUBGRP_THERM_STRESS                         = -1;
    LAW_NO                                      = -1;
    Mat_Name_OR_LawNo                           = 4538;
    IO_FLAG                                     = -1;
    TITLE                                       = -1;
}

DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY                         = SCALAR(MAT_RHO);
    YOUNG_MODULUS                           = SCALAR(MAT_E);
    POISSON_RATIO                           = SCALAR(MAT_NU);
    SOUND_SPEED                             = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                       = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                      = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID       = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);

}

CHECK(COMMON)
{
    MAT_RHO                                     >0.0;
    NRATEP                                      <=100;
}

DEFAULTS(COMMON)
{
    Fcut                                        = 1.0e30;
    Fsmooth                                     = 0;
    NRATEP                                      = 1;
    Mat_Name_OR_LawNo                           = 0;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if( CommentEnumField == 2)
    {
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }
    if( Mat_Name_OR_LawNo == 1)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/ELASTOMER/");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW65/");
    }
mandatory:
    SCALAR(MAT_RHO)                             { DIMENSION="density";                  }
optional:
    graphical FLAG( MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho)                       { DIMENSION="density";                  }
    }
mandatory:
    SCALAR(MAT_E)                               { DIMENSION="pressure";                      }
optional:
    SCALAR(MAT_NU)                              { DIMENSION="DIMENSIONLESS";                 }
    SCALAR(MAT_EPS)                             { DIMENSION="DIMENSIONLESS";                 }
    SIZE(NRATEP);
    RADIO(Fsmooth)
    {
        ADD(0,"0: No Strain Rate Filtering (default)");
        ADD(1,"1: Strain Rate Filtering");
    }
    SCALAR(Fcut)                                { DIMENSION="f";                 }
    ARRAY(NRATEP,"")
    {
        //DATA(FUN_LOAD);
        FUNCTION(FUN_LOAD) {
            X_TITLE="Strain"; X_DIMENSION="DIMENSIONLESS" ; 
            Y_TITLE="Stress"; Y_DIMENSION="pressure"; 
        } 
        //DATA(FUN_UNLOAD);
        FUNCTION(FUN_UNLOAD) {
            X_TITLE="Strain"; X_DIMENSION="DIMENSIONLESS" ; 
            Y_TITLE="Stress"; Y_DIMENSION="pressure"; 
        } 
        SCALAR(SCALE_LOAD)                      {DIMENSION="pressure";}
        SCALAR(STRAINRATE_LOAD)                 {DIMENSION="f";}
    }
   /*mandatory:
    graphical SUPPORT("Support") {
    OBJECTS=(/PART/SHELL,/PART/SHELL3N,/PART/SHELL4N);
    ADD(PART,"Parts");
    }*/
optional:
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }

}

FORMAT(radioss90) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "ELA" )
        {
            ASSIGN(Mat_Name_OR_LawNo,1);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 1)
    {
        HEADER("/MAT/ELASTOMER/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/LAW65/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option != FALSE)
    {
        COMMENT("#              RHO_I          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else
    {
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                 E0                  NU             EPS_max");
    CARD("%20lg%20lg%20lg",MAT_E,MAT_NU,MAT_EPS);
    COMMENT("#    Nrate   Fsmooth                Fcut");
    CARD("%10d%10d%20lg",NRATEP,Fsmooth,Fcut);
    if(NRATEP > 0){
        
        CARD_LIST(NRATEP)
        {    
            COMMENT("#FUNC_IDld FUNC_IDul        FSCALESTRESS                 EPS") ;
            CARD("%10d%10d%20lg%20lg",FUN_LOAD,FUN_UNLOAD,SCALE_LOAD,STRAINRATE_LOAD);
        }
    }
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
