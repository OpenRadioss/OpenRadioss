//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Material law 16 (GRAY) Setup File
ATTRIBUTES(COMMON) {
    // Support
    // NB_PARTS                 = SIZE("Number of Connected Parts"); 
    //COMPONENT                 = ARRAY[NB_PARTS](COMPONENT,"Connected Parts");
    KEYWORD_STR                 = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                = SIZE("NUM_COMMENTS");
    CommentEnumField            = VALUE(INT,"User Comments");
    COMMENTS                    = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    // Initial and reference densities
    MAT_RHO                     = VALUE(FLOAT,"Initial Density");
    Refer_Rho                   = VALUE(FLOAT,"Reference Density (for lower than 14.0 version)");
    DUMMY                       = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    MAT_REFRHO_Option           = VALUE(INT, "RefRho_Option");
    // Other values
    MAT_P0                      = VALUE(FLOAT,"Initial Pressure");
    MAT_SRC                     = VALUE(FLOAT,"Strain Rate Coefficient");
    MAT_S                       = VALUE(FLOAT,"U_S=C+S*U_P");
    MAT_GAMA0                   = VALUE(FLOAT,"Lattice Gamma");
    MAT_A                       = VALUE(FLOAT,"Gamma=GAMMA0-A*X");
    MAT_AW                      = VALUE(FLOAT,"Atomic Weight");
    MAT_GAMAm                   = VALUE(FLOAT,"Melting Gamma");
    Acoeft1                     = VALUE(FLOAT,"Gamma_M=GAMMA_M-A_M*X");
    GAMMA                       = VALUE(FLOAT,"Electronic Gamma");
    MAT_G0                      = VALUE(FLOAT,"Electronic Energy Coefficient");
    MAT_dS                      = VALUE(FLOAT,"Entropy of Melting");
    T_melt_0                    = VALUE(FLOAT,"Melting Temperature");
    MAT_VOL                     = VALUE(FLOAT,"Volume Where EOS are Joined");
    MAT_Vb                      = VALUE(FLOAT,"Excluded Volume for Vapor Phase");
    MAT_U                       = VALUE(FLOAT,"1Mbar cmÂ³ to be Converted in User's Unit");
    MAT_EOH                     = VALUE(FLOAT,"Energy at V=V0, T=300K, P=0");
    MAT_Ay                      = VALUE(FLOAT,"Coefficient of Attractive Potential");
    MAT_SRP                     = VALUE(FLOAT,"Ref. Strain Rate");
    MAT_SIGY                    = VALUE(FLOAT,"Plasticity Yield Stress");
    MAT_BETA                    = VALUE(FLOAT,"Plasticity Hardening Parameter");
    MAT_NU                      = VALUE(FLOAT,"Poisson's Ratio");
    MAT_HARD                    = VALUE(FLOAT,"Plasticity Hardening Exponent");
    MAT_E                       = VALUE(FLOAT,"Young's Modulus");
    MAT_TMELT                   = VALUE(FLOAT,"Melting Temperature");
    MAT_TMAX                    = VALUE(FLOAT,"For T>T_MAX, m=1 is Used)");
    MAT_PC                      = VALUE(FLOAT,"Pressure Cutoff");
    MAT_EPS                     = VALUE(FLOAT,"Failure Plastic Strain");
    MAT_SIG                     = VALUE(FLOAT,"Plasticity Maximum Stress");
    MAT_E0                      = VALUE(FLOAT,"Initial Energy per Unit Volume");
    MAT_C                       = VALUE(FLOAT,"Hugoniot Parameters");
    MAT_Theta                   = VALUE(FLOAT,"Join Parameter");
    MAT_M                       = VALUE(FLOAT,"Temperature Exponent");
    // HEAT
    Heat_Inp_opt                = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT             = VALUE(SUBOBJECT, "");
    // THERM_STRESS
    THERM_STRESS                = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS         = VALUE(SUBOBJECT, "");
    ALE_Form                    = VALUE(INT, "Flag for Heat Transfer Formulation");
    SUBGRP_ALE_MAT              = VALUE(SUBOBJECT, "");
    SUBGRP_EULER_MAT            = VALUE(SUBOBJECT, "");
    Mat_Name_OR_LawNo           = VALUE(INT, "");
    TITLE                       = VALUE(STRING,"");
    IO_FLAG                     = VALUE(INT, "");
    LAW_NO                      = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                 = 9000;
    COMMENTS                    = 5109;
    CommentEnumField            = 7951;
    MAT_REFRHO_Option           = 4285;
    Refer_Rho                   = 4229;
    MAT_RHO                     = 118;
    MAT_E                       = 119;
    MAT_NU                      = 120;
    NUM_COMMENTS                = 5110;
    DUMMY                       = -1;
    MAT_E                       = 119;
    MAT_NU                      = 120;
    MAT_SIGY                    = 152;
    MAT_BETA                    = 148;
    MAT_HARD                    = 71;
    MAT_EPS                     = 195;
    MAT_SIG                     = 5038;
    MAT_P0                      = 1122;
    MAT_C                       = 996;
    MAT_S                       = 4271;
    MAT_GAMA0                   = 1124;
    MAT_A                       = 6056;
    MAT_AW                      = 4272;
    MAT_PC                      = 282;
    MAT_E0                      = 1507;
    MAT_SRC                     = 155;
    MAT_SRP                     = 156;
    MAT_M                       = 314;
    MAT_TMELT                   = 315;
    MAT_TMAX                    = 316;
    MAT_GAMAm                   = 5337;
    Acoeft1                     = 5160;
    GAMMA                       = 5172;
    MAT_G0                      = 304;
    MAT_dS                      = 4273;
    MAT_TMELT                   = 315;
    T_melt_0                    = 3532;
    MAT_VOL                     = 4276;
    MAT_Vb                      = 4277;
    MAT_U                       = 4274;
    MAT_EOH                     = 4275;
    MAT_Ay                      = 6057;
    MAT_Theta                   = 4094;
    Mat_Name_OR_LawNo           = 4538;
    LAW_NO                      = -1;
    IO_FLAG                     = -1;
    TITLE                       = -1;
    //HEAT
    Heat_Inp_opt                = 4346;
    SUBGRP_HEAT_MAT             = -1;
    // THERM_STRESS
    THERM_STRESS                = 4555;
    SUBGRP_THERM_STRESS         = -1;
    ALE_Form                    = 4336;
    SUBGRP_ALE_MAT              = -1;
    SUBGRP_EULER_MAT            = -1;
}

CHECK(COMMON)
{
    MAT_HARD                    <=1.0;
    MAT_PC                      <0;
    MAT_RHO                     >0.0;
    MAT_SIGY                    >0;
}

DEFAULTS(COMMON)
{
    GAMMA                       = 0.6667;
    MAT_EPS                     = 1.0e30;
    MAT_HARD                    = 1.0;
    MAT_M                       = 1.0;
    MAT_PC                      = -1.0e30;
    MAT_SIG                     = 1.0e30;
    MAT_SRC                     = 1.0;
    MAT_SRP                     = 10e-6;
    MAT_TMAX                    = 10e30;
    MAT_TMELT                   = 10e30;
    MAT_Theta                   = 1.0;
    MAT_U                       = 1.0;

}

DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY   = SCALAR(MAT_RHO);
    YOUNG_MODULUS     = SCALAR(MAT_E);
    POISSON_RATIO     = SCALAR(MAT_NU);
public:
    SOUND_SPEED       = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}

GUI(COMMON) {
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Mat_Name_OR_LawNo ==2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW16/");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/GRAY/");
    }
    FLAG(MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho)      { DIMENSION="density";       }
    }
mandatory:
    SCALAR(MAT_RHO)         { DIMENSION="density";            }
    SCALAR(MAT_E)           { DIMENSION="pressure"; }
optional:
    SCALAR(MAT_NU);
    SCALAR(MAT_SIGY)        { DIMENSION="pressure";} 
    SCALAR(MAT_BETA)        { DIMENSION = "pressure";}
    SCALAR(MAT_HARD)        { DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_EPS)         { DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_SIG)         { DIMENSION="pressure";}
    SCALAR(MAT_P0)          { DIMENSION="pressure";}     
    SCALAR(MAT_C)           { DIMENSION = "velocity"; }   
    SCALAR(MAT_S)           { DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_GAMA0)       { DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_A)           { DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_AW)          { DIMENSION="molar_mass";}
    SCALAR(MAT_PC)          { DIMENSION="pressure";}
    SCALAR(MAT_E0)          { DIMENSION="energydensity";}
    SCALAR(MAT_SRC)         { DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_SRP)         { DIMENSION = "strain_rate";}
    SCALAR(MAT_M)           { DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_TMELT)       { DIMENSION="k";}
    SCALAR(MAT_TMAX)        { DIMENSION="k";}
    SCALAR(MAT_GAMAm)       { DIMENSION = "DIMENSIONLESS";}
    SCALAR(Acoeft1)         { DIMENSION = "DIMENSIONLESS";}
    SCALAR(GAMMA)           { DIMENSION = "DIMENSIONLESS";}
    SCALAR(MAT_G0)          { DIMENSION = "thermal_molar_capacity_on_temperature";}
    SCALAR(MAT_dS)          { DIMENSION = "thermal_massic_capacity"; }
    SCALAR(T_melt_0)         { DIMENSION="k";}
    SCALAR(MAT_VOL)         { DIMENSION = "inverse_of_density"; }
    SCALAR(MAT_Vb)          { DIMENSION = "inverse_of_density"; }
    SCALAR(MAT_U);
    SCALAR(MAT_EOH)         { DIMENSION="energy"; }
    SCALAR(MAT_Ay)          { DIMENSION = "attractive_potential"; }
    SCALAR(MAT_Theta)       { DIMENSION = "DIMENSIONLESS";}
    // HEAT data
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }
    // THERM_STRESS
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
    /*
    mandatory:
    graphical SUPPORT("Support") {
    OBJECTS=(/PART/QUAD,/PART/BRICK);
    ADD(PART,"Parts");
    }
    */
}

GUI(ALE) {
optional:
    graphical RADIO(ALE_Form) 
    {
        ADD(1,"NONE") ;
        ADD(2,"ALE") ;
        ADD(3,"EULER");
    }
    if(ALE_Form == 2)
    {
        SUBOBJECT(SUBGRP_ALE_MAT) {SUBTYPES = (/SUBOBJECT/ALE_MAT);}
    }
    else if(ALE_Form == 3)
    {
        SUBOBJECT(SUBGRP_EULER_MAT) {SUBTYPES = (/SUBOBJECT/EULER);}
    }
}
// File format
FORMAT(radioss90) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }

    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW16/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/GRAY/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                  E                  nu");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    COMMENT("#                  a                   b                   n             eps_max           sigma_max");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_SIGY,MAT_BETA,MAT_HARD,MAT_EPS,MAT_SIG);
    COMMENT("#                 P0                   C                   S             GAMMA_0                 a_e");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_P0,MAT_C,MAT_S,MAT_GAMA0,MAT_A);
    COMMENT("#                 AW                Pmin                  E0");
    CARD("%20lg%20lg%20lg",MAT_AW,MAT_PC,MAT_E0);   
    COMMENT("#                  c          EPS_RATE_0                   m               Tmelt                Tmax");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_SRC,MAT_SRP,MAT_M,MAT_TMELT,MAT_TMAX);
    COMMENT("#           GAMMA_0m                 a_M             GAMMA_e                 g_e                 D_S");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_GAMAm,Acoeft1,GAMMA,MAT_G0, MAT_dS);
    COMMENT("#               T_m0                 V_j                 V_b");
    CARD("%20lg%20lg%20lg",T_melt_0,MAT_VOL,MAT_Vb); 
    COMMENT("#                  U                E_0h                 A_y               THETA");
    CARD("%20lg%20lg%20lg%20lg",MAT_U,MAT_EOH,MAT_Ay,MAT_Theta);
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
    if(ALE_Form == 2)
    {
        SUBOBJECTS(SUBGRP_ALE_MAT,/SUBOBJECT/ALE_MAT);
    }
    else if(ALE_Form == 3)
    {
        SUBOBJECTS(SUBGRP_EULER_MAT,/SUBOBJECT/EULER);
    }
}
FORMAT(radioss51) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }

    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW16/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/GRAY/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#        Init. dens.          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                  E                  nu");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    COMMENT("#                  a                   b                   n              epsmax              sigmax");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_SIGY,MAT_BETA,MAT_HARD,MAT_EPS,MAT_SIG);
    COMMENT("#                 P0                 H_C                 H_S            L_GAMMA0                 L_A");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_P0,MAT_C,MAT_S,MAT_GAMA0,MAT_A);
    COMMENT("#                 AW                Pmin                  E0");
    CARD("%20lg%20lg%20lg",MAT_AW,MAT_PC,MAT_E0);   
    COMMENT("#                  C                EPS0                   M               Tmelt               Tmax");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_SRC,MAT_SRP,MAT_M,MAT_TMELT,MAT_TMAX);
    COMMENT("#           GAMMA0_M                 A_M             GAMMA_E                 G_E                 D_S");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_GAMAm,Acoeft1,GAMMA,MAT_G0,MAT_dS);
    COMMENT("#               TM_0                 V_J                 V_B");
    CARD("%20lg%20lg%20lg",T_melt_0,MAT_VOL,MAT_Vb); 
    COMMENT("#                  U                E0_H                 A_Y               OMEGA");
    CARD("%20lg%20lg%20lg%20lg",MAT_U,MAT_EOH,MAT_Ay,MAT_Theta); 
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
    if(ALE_Form == 2)
    {
        SUBOBJECTS(SUBGRP_ALE_MAT,/SUBOBJECT/ALE_MAT);
    }
    else if(ALE_Form == 3)
    {
        SUBOBJECTS(SUBGRP_EULER_MAT,/SUBOBJECT/EULER);
    }
}