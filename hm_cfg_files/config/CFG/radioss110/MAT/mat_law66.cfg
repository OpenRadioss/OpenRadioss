//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Material law 66 setup file

ATTRIBUTES(COMMON)
{
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    MAT_REFRHO_Option                       = VALUE(INT,  "RefRho_Option");
    DUMMY                                   = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    MAT_RHO                                 = VALUE(FLOAT,  "Initial Density");
    Refer_Rho                               = VALUE(FLOAT,  "Ref_Rho");
    MAT_E                                   = VALUE(FLOAT,  "Young's Modulus");
    MAT_NU                                  = VALUE(FLOAT,  "Poisson's Ratio");
    MAT_HARD                                = VALUE(FLOAT,  "Hardening Coefficient");
    MAT_asrate                              = VALUE(FLOAT,  "Cutoff Frequency for Strain Rate Filtering");
    Fsmooth                                 = VALUE(INT,  "Smooth Strain Rate Flag");
    ISRATE                                  = VALUE(INT,  "Rate Effect On the Yield Stress Flag");
    MAT_PC                                  = VALUE(FLOAT,  "Limit Pressure in Compression");
    Ptole                                   = VALUE(FLOAT,  "Limit Pressure in Tensile");
    //FUN_A1                                = VALUE(MULTIOBJECT,  "funct_IDc");
    //FUN_A2                                = VALUE(MULTIOBJECT,  "funct_IDt");
    FUN_A1                                  = VALUE(FUNCT,"Compression Yield Stress");
    FUN_A2                                  = VALUE(FUNCT,"Tension Yield Stress");
    FScale11                                = VALUE(FLOAT,  "Scale Factor for Ordinate(Stress) in Funct_IDc");
    FScale22                                = VALUE(FLOAT,  "Scale Factor for Ordinate(Stress) in Funct_IDt");
    Epsilon_0                               = VALUE(FLOAT,  "Reference Strain Rate");
    MAT_C0                                  = VALUE(FLOAT,  "Strain Rate Parameter");
    SIGMA_r                                 = VALUE(FLOAT,  "Initial Yield Stress");
    Vflag                                   = VALUE(INT,  "Choice of Strain Rate Flag");
    FUN_B1                                  = VALUE(FUNCT,"Compression Strain Rate Effect Function Identifier");
    FUN_B2                                  = VALUE(FUNCT,"Tension Strain Rate Effect Function Identifier");
    FScale33                                = VALUE(FLOAT,  "Scale Factor for Ordinate (Stress) in Istrate_funct_IDc");
    FScale12                                = VALUE(FLOAT,  "Scale Factor for Ordinate (Stress) in Israte_funct_IDt");
    NFUNC                                   = SIZE("Number of Compression Functions");
    TFUNC                                   = SIZE("Number of Traction Functions");
    ABG_IPt                                 = ARRAY[NFUNC](FUNCT,"Compression Yield Stress");
    K_A1                                    = ARRAY[NFUNC](FLOAT,  "Ith Compression Strain Rate =1,NFUNC");
    Fp1                                     = ARRAY[NFUNC](FLOAT,  "Scale Factor for Ordinate(Stress) in Funct_IDc");
    ABG_IPdel                               = ARRAY[TFUNC](FUNCT,"Tension Yield Stress");
    K_B1                                    = ARRAY[TFUNC](FLOAT,  "Ith Traction Strain Rate =1,TFUNC");
    Fp2                                     = ARRAY[TFUNC](FLOAT,  "Scale Factor for Ordinate(Stress) in Funct_IDt");
    // VISC_PRONY
    VISC_PRONY_option                       = VALUE(INT,"Visc Prony");
    SUBGRP_VISC_PRONY                       = VALUE(SUBOBJECT, "");
    // HEAT
    Heat_Inp_opt                            = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT                         = VALUE(SUBOBJECT, "");
    // THERM_STRESS
    THERM_STRESS                            = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS                     = VALUE(SUBOBJECT, "");
    IO_FLAG                                 = VALUE(INT, "");
    TITLE                                   = VALUE(STRING,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    NUM_COMMENTS                            = 5110;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;
    MAT_REFRHO_Option                       = 4285;
    DUMMY                                   = -1;
    MAT_RHO                                 = 118;
    Refer_Rho                               = 4229;
    MAT_E                                   = 119;
    MAT_NU                                  = 120;
    MAT_HARD                                = 71;
    MAT_asrate                              = 6065;
    Fsmooth                                 = 5355;
    ISRATE                                  = 4231;
    MAT_PC                                  = 282;
    Ptole                                   = 4516;
    FUN_A1                                  = 45;
    FUN_A2                                  = 170;
    FScale11                                = 4050;
    FScale22                                = 4051;
    Epsilon_0                               = 4198;
    MAT_C0                                  = 1500;
    SIGMA_r                                 = 4201;
    Vflag                                   = 5113;
    FUN_B1                                  = 168;
    FUN_B2                                  = 171;
    FScale33                                = 4052;
    FScale12                                = 4053;
    NFUNC                                   = 5093;
    TFUNC                                   = 4361;
    ABG_IPt                                 = 925;
    K_A1                                    = 151;
    Fp1                                     = 4114;
    ABG_IPdel                               = 927;
    K_B1                                    = 154;
    Fp2                                     = 4115;
    // HEAT
    Heat_Inp_opt                            = 4346;
    SUBGRP_HEAT_MAT                         = -1;
    // THERM_STRESS
    THERM_STRESS                            = 4555;
    SUBGRP_THERM_STRESS                     = -1;
    // VISC_PRONY
    VISC_PRONY_option                       = 4707;
    SUBGRP_VISC_PRONY                       = -1;
    IO_FLAG                                 = -1;
    TITLE                                   = -1;
}

DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY         = SCALAR(MAT_RHO);
    YOUNG_MODULUS           = SCALAR(MAT_E);
    POISSON_RATIO           = SCALAR(MAT_NU);
public:
    SOUND_SPEED             = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                       = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                      = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID       = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}

CHECK(COMMON)
{
    MAT_HARD                                >=0.0;
    MAT_HARD                                <=1.0;
    MAT_RHO                                 >0.0;
}

DEFAULTS(COMMON)
{
    Epsilon_0                               = 1.0;
    FScale11                                = 1.0;
    FScale12                                = 1.0;
    FScale22                                = 1.0;
    FScale33                                = 1.0;
    Fsmooth                                 = 0;
    ISRATE                                  = 0;
    MAT_C0                                  = 1.0;
    MAT_asrate                              = 1.0e30;
    NFUNC                                   = 0;
    TFUNC                                   = 0;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if( CommentEnumField == 2)
    {
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }
    ASSIGN(KEYWORD_STR, "/MAT");
    ASSIGN(KEYWORD_STR, "/LAW66/");

optional:
    graphical FLAG( MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho);
    }

mandatory:
    SCALAR(MAT_RHO)                                 { DIMENSION="density"; }
    SCALAR(MAT_E)                                   { DIMENSION="pressure"; }
    SCALAR(MAT_NU)                                  { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_HARD)                                { DIMENSION="DIMENSIONLESS"; }
optional:
    SCALAR(MAT_asrate)                              { DIMENSION="f"; }

    RADIO(Fsmooth)
    {
        ADD(0, "0: No Strain Rate Smoothing");
        ADD(1, "1: Strain Rate Smoothing Active");
    }
    RADIO(ISRATE)
    {
        ADD(0, "0: Default");
        ADD(1, "1: Using Cowper-Symonds");
        ADD(2, "2: Using (1+CpLn(E/Eo))");
        ADD(3, "3: Using Two Load Curves to Scale the Yield Stress (Funct_IDc) (Compression & Traction)");
        ADD(4, "4: Using Different Functions for Compression and Traction for Different Strain Rate Values");
    }
    SCALAR(MAT_PC)                                  { DIMENSION="pressure"; }
    SCALAR(Ptole)                                   { DIMENSION="pressure"; }
    //SCALAR(ISRATE);
    if( ISRATE == 0 || ISRATE == 1 || ISRATE ==2 || ISRATE==3)
    {
        DATA(FUN_A1);
        DATA(FUN_A2);
        //FUNCTION(FUN_A1)                      {X_TITLE=""; Y_TITLE="";}
        //FUNCTION(FUN_A2)                      {X_TITLE=""; Y_TITLE="";}

        SCALAR(FScale11)                             { DIMENSION="pressure"; }
        SCALAR(FScale22)                             { DIMENSION="pressure"; }
    }
    if(ISRATE == 0 || ISRATE == 1 || ISRATE ==2)
    {
        SCALAR(Epsilon_0)                            { DIMENSION="strain_rate"; }
        SCALAR(MAT_C0)                               { DIMENSION="DIMENSIONLESS"; }
        SCALAR(SIGMA_r)                              { DIMENSION="pressure"; }

        RADIO(Vflag)
        {
            ADD(0, "0: Strain Rate Effect on the Yield Stress is Depending on the Total Strain Rate");
            ADD(1, "1: Strain Rate Effect on the Yield Stress is Depending on Plastic Strain Rate");
        }
    }
    if( ISRATE==3)
    {
        DATA(FUN_B1);
        DATA(FUN_B2);
        SCALAR(FScale33)                        { DIMENSION="pressure"; }
        SCALAR(FScale12)                        { DIMENSION="pressure"; }
    }

    if( ISRATE==4)
    {
        SIZE_RADIO(NFUNC){
            ENUM_VALUE_FLAG=TRUE;
            ADD(0, "0");
            ADD(1, "");
            ADD(2, "");
            ADD(3, "");
            ADD(4, "");
            ADD(5, "");
            ADD(6, "");
            ADD(7, "");
            ADD(8, "");
            ADD(9, "");
            ADD(10, "");
            ADD(11, "");
            ADD(12, "");
            ADD(13, "");
            ADD(14, "");
            ADD(15, "");
            ADD(16, "");
            ADD(17, "");
            ADD(18, "");
            ADD(19, "");
            ADD(20, "");
        }

        SIZE_RADIO(TFUNC){
            ADD(0, "0");
            ADD(1, "");
            ADD(2, "");
            ADD(3, "");
            ADD(4, "");
            ADD(5, "");
            ADD(6, "");
            ADD(7, "");
            ADD(8, "");
            ADD(9, "");
            ADD(10, "");
            ADD(11, "");
            ADD(12, "");
            ADD(13, "");
            ADD(14, "");
            ADD(15, "");
            ADD(16, "");
            ADD(17, "");
            ADD(18, "");
            ADD(19, "");
            ADD(20, "");
        }
        ARRAY(NFUNC,"") {
            //FUNCTION(ABG_IPt) {X_TITLE=""; Y_TITLE="";}
            //DATA(ABG_IPt);
            SCALAR(K_A1)                       { DIMENSION="f"; }
            SCALAR(Fp1)                        { DIMENSION="pressure"; }
        }

        ARRAY(TFUNC,"") {
            //FUNCTION(ABG_IPdel)              {X_TITLE=""; Y_TITLE="";}
            //DATA(ABG_IPdel);
            SCALAR(K_B1)                       { DIMENSION="f"; }
            SCALAR(Fp2)                        { DIMENSION="pressure"; }
        }
    }

optional:
    // HEAT data
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }
    // THERM_STRESS
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
    // VISC_PRONY data
    graphical FLAG(VISC_PRONY_option);
    if(VISC_PRONY_option!=0)
    {
        SUBOBJECT(SUBGRP_VISC_PRONY) {SUBTYPES = (/SUBOBJECT/VISC);}
    }
}

FORMAT(radioss100) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 0)
    {
        HEADER("/MAT/LAW66/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option != FALSE)
    {
        COMMENT("#              RHO_I          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else
    {
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                  E                  Nu              C_hard               F_cut  F_smooth Iyld_rate"); 
    CARD("%20lg%20lg%20lg%20lg%10d%10d", MAT_E,MAT_NU,MAT_HARD,MAT_asrate,Fsmooth,ISRATE);
    COMMENT("#                P_c                 P_t");
    CARD("%20lg%20lg", MAT_PC,Ptole);
    if(ISRATE == 0 || ISRATE == 1 || ISRATE == 2 || ISRATE == 3)
    {
        COMMENT("#funct_IDc funct_IDt             Fscalec             Fscalet");
        CARD("%10d%10d%20lg%20lg", FUN_A1,FUN_A2,FScale11,FScale22);
    }
    if(ISRATE == 0 || ISRATE == 1 || ISRATE == 2)
    {
        COMMENT("#          Epsilon_0                   c            Sigma_Y0        VP");
        CARD("%20lg%20lg%20lg%10d",Epsilon_0,MAT_C0,SIGMA_r,Vflag);
    }
    if(ISRATE == 3)
    {
        COMMENT("#fnYrt_IDc fnYrt_IDt       Yrate_Fscalec       Yrate_Fscalet");
        CARD("%10d%10d%20lg%20lg", FUN_B1,FUN_B2,FScale33,FScale12);
    }
    if(ISRATE == 4)
    {
        COMMENT("#   NFUNCC    NFUNCT");
        CARD("%10d%10d", NFUNC,TFUNC);
    }    //
    if(NFUNC > 0){
        COMMENT("#funct_IDc                    Episilon_c             Fscalec");
        CARD_LIST(NFUNC)
        {
            CARD("%10d          %20lg%20lg", ABG_IPt,K_A1,Fp1);
        }
        
    }//
    if(TFUNC > 0){
        COMMENT("#funct_IDt                    Episilon_t             Fscalet");
        CARD_LIST(TFUNC)
        {
            CARD("%10d          %20lg%20lg", ABG_IPdel,K_B1,Fp2);
        }
    }//
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
    if(VISC_PRONY_option!=0)
    {
        SUBOBJECTS(SUBGRP_VISC_PRONY,/SUBOBJECT/VISC);
    }
}
