//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Material law 00
ATTRIBUTES(COMMON)
{
    // Support
    //NB_PARTS                  = SIZE("Number of Connected Parts"); 
    //COMPONENT                 = ARRAY[NB_PARTS](COMPONENT,"Connected Parts");
    KEYWORD_STR                 = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                = SIZE("NUM_COMMENTS");
    COMMENTS                    = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField            = VALUE(INT,  "User Comments");
    Mat_RhoEOption              = VALUE(INT,  "Mat_RhoEOption");
    MAT_RHO                     = VALUE(FLOAT,  "Initial Density");
    MAT_E                       = VALUE(FLOAT,  "Young's Modulus");
    // HEAT
    Heat_Inp_opt                = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT             = VALUE(SUBOBJECT, "");
    // THERM_STRESS
    THERM_STRESS                = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS         = VALUE(SUBOBJECT, "");
    Mat_Name_OR_LawNo           = VALUE(INT, "");
    TITLE                       = VALUE(STRING,"");
    IO_FLAG                     = VALUE(INT, "");
    LAW_NO                      = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                 = 9000;
    NUM_COMMENTS                = 5110;
    COMMENTS                    = 5109;
    CommentEnumField            = 7951;
    Mat_RhoEOption              = 4175;
    MAT_RHO                     = 118;
    MAT_E                       = 119;
    Mat_Name_OR_LawNo           = 4538;
    LAW_NO                      = -1;
    IO_FLAG                     = -1;
    TITLE                       = -1;
    //HEAT
    Heat_Inp_opt                = 4346;
    SUBGRP_HEAT_MAT             = -1;
    // THERM_STRESS
    THERM_STRESS                = 4555;
    SUBGRP_THERM_STRESS         = -1;
}

DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY         = SCALAR(MAT_RHO);
    YOUNG_MODULUS           = SCALAR(MAT_E);
public:
    SOUND_SPEED             = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                               = EVAL(YOUNG_MODULUS/2);
    C1                              = EVAL(YOUNG_MODULUS/3);
public:
    SOUND_SPEED_SOLID               = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);

}

CHECK(COMMON)
{
    MAT_E                       >=0;
    MAT_RHO                     >=0;
}

DEFAULTS(COMMON)
{
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }
    if( Mat_Name_OR_LawNo ==2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW0/");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/VOID/");
    }
mandatory:
    FLAG( Mat_RhoEOption);
    if(Mat_RhoEOption != FALSE)
    {
        SCALAR(MAT_RHO)     { DIMENSION="density";  }
        SCALAR(MAT_E)       { DIMENSION="pressure";      }
    }
    /*mandatory:
    graphical SUPPORT("Support") {
    OBJECTS=(/PART/SHELL,/PART/QUAD,/PART/BRICK,/PART/TETRA4,/PART/LINEAR_3D,/PART/PENTA6,/PART/LINEAR_THICK,
    /PART/TETRA10,/PART/SHEL16,/PART/BRIC20,/PART/TRUSS,/PART/BEAM,/PART/SPHCEL);
    ADD(PART,"Parts");
    }*/

optional:
    SEPARATOR("HEAT");
    // HEAT data
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }
    // THERM_STRESS
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
}
// File format
FORMAT(radioss51) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW0/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/VOID/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    if(IO_FLAG == 1)
    {
        COMMENT("#        Init. dens.                   E");
        FREE_CARD(Mat_RhoEOption,"%20lg%20lg",MAT_RHO,MAT_E);
    }
    else if(IO_FLAG == 0 && Mat_RhoEOption != FALSE)
    {
        COMMENT("#        Init. dens.                   E");
        CARD("%20lg%20lg",MAT_RHO,MAT_E);
    }
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}

FORMAT(radioss41) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
}
