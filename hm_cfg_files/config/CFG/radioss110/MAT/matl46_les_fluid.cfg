//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 46 (LES) Setup File
// 

ATTRIBUTES(COMMON) {
    // Support
    // NB_PARTS                     = SIZE("Number of Connected Parts"); 
    //COMPONENT                     = ARRAY[NB_PARTS](COMPONENT,"Connected Parts");
    KEYWORD_STR                     = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                    = SIZE("NUM_COMMENTS");
    CommentEnumField                = VALUE(INT,"User Comments");
    COMMENTS                        = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    // Initial and reference densities
    MAT_RHO                         = VALUE(FLOAT,"Initial Density");
    Refer_Rho                       = VALUE(FLOAT,"Reference Density (for lower than 14.0 version)");
    DUMMY                           = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    MAT_REFRHO_Option               = VALUE(INT, "RefRho_Option");
    // Other values
    MAT_C                           = VALUE(FLOAT, "Speed of Sound");
    MAT_NU                          = VALUE(FLOAT, "Molecular Kinematic Viscosity");
    Istf                            = VALUE(INT,   "Subgrid Scale Model");
    MAT_C5                          = VALUE(FLOAT, "Smagorinsky Constant");
    MAT_CO1                         = VALUE(FLOAT, "Pressure Damping Coefficient");
    // HEAT
    Heat_Inp_opt                    = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT                 = VALUE(SUBOBJECT, "");
    // THERM_STRESS
    THERM_STRESS                    = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS             = VALUE(SUBOBJECT, "");
    ALE_Form                        = VALUE(INT, "Flag for Heat Transfer Formulation");
    SUBGRP_ALE_MAT                  = VALUE(SUBOBJECT, "");
    SUBGRP_EULER_MAT                = VALUE(SUBOBJECT, "");
    //
    IO_FLAG                         = VALUE(INT, "");
    LAW_NO                          = VALUE(STRING, "");
    Mat_Name_OR_LawNo               = VALUE(INT,  "RADIOSS_COMMENT_FLAG");
    TITLE                           = VALUE(STRING,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                     = 9000;
    COMMENTS                        = 5109;
    CommentEnumField                = 7951;
    MAT_REFRHO_Option               = 4285;
    MAT_RHO                         = 118;
    Refer_Rho                       = 4229;
    DUMMY                           = -1;
    Istf                            = 8044;
    MAT_C                           = 996;
    MAT_C5                          = 1505;
    MAT_CO1                         = 5080;
    MAT_NU                          = 120;
    NUM_COMMENTS                    = 5110;
    //HEAT
    Heat_Inp_opt                    = 4346;
    SUBGRP_HEAT_MAT                 = -1;
    // THERM_STRESS
    THERM_STRESS                    = 4555;
    SUBGRP_THERM_STRESS             = -1;
    ALE_Form                        = 4336;
    SUBGRP_ALE_MAT                  = -1;
    SUBGRP_EULER_MAT                = -1;
    LAW_NO                          = -1;
    Mat_Name_OR_LawNo               = 4538;
    IO_FLAG                         = -1;
    TITLE                           = -1;
}

DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY                 = SCALAR(MAT_RHO);
}

CHECK(COMMON)
{
    MAT_RHO                         >0.0;
}

DEFAULTS(COMMON)
{
    Istf                            = 1;
    MAT_C5                          = 1.0;
}

GUI(COMMON) {
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if(Mat_Name_OR_LawNo == 2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW46/");
    }
    else 
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LES_FLUID/");
    }
    FLAG(MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho)      { DIMENSION="density";       }
    }
mandatory:
    SCALAR(MAT_RHO)         { DIMENSION="density";            }
    //
    SCALAR(MAT_C)           { DIMENSION="velocity";             }
    SCALAR(MAT_NU)          { DIMENSION = "eddyviscosity"; }
    //
    RADIO(Istf) {
        
        ADD(0,"0: No Sub-Grid Viscosity");
        ADD(1,"1: Smagorinsky Model");
        ADD(2,"2: Smagorinsky Model with Acoustic Damping");
        ADD(3,"3: Identical to Isgs=2 with Modified Value");
    }
    //
    SCALAR(MAT_C5);
    SCALAR(MAT_CO1)         { DIMENSION="f";            }
optional:
    // HEAT data
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }

    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
    /*
    mandatory:
    graphical SUPPORT("Support") {
    OBJECTS=(PART);
    ADD(PART,"Parts");
    }
    */
}

GUI(ALE) {
optional:
    graphical RADIO(ALE_Form) 
    {
        ADD(1,"NONE") ;
        ADD(2,"ALE") ;
        ADD(3,"EULER");
    }
    if(ALE_Form == 2)
    {
        SUBOBJECT(SUBGRP_ALE_MAT) {SUBTYPES = (/SUBOBJECT/ALE_MAT);}
    }
    else if(ALE_Form == 3)
    {
        SUBOBJECT(SUBGRP_EULER_MAT) {SUBTYPES = (/SUBOBJECT/EULER);}
    }
}

FORMAT(radioss51) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW46/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/LES_FLUID/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#        Init. dens.          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#        Init. dens.");
        CARD("%20lg",MAT_RHO);
    }
    //
    COMMENT("#                  C                  Nu");  
    CARD("%20lg%20lg",MAT_C,MAT_NU);
    //
    COMMENT("#     ISGS                 C_S                C_SP"); 
    CARD("%10d%20lg%20lg",Istf,MAT_C5,MAT_CO1);
    //
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
    if(ALE_Form == 2)
    {
        SUBOBJECTS(SUBGRP_ALE_MAT,/SUBOBJECT/ALE_MAT);
    }
    else if(ALE_Form == 3)
    {
        SUBOBJECTS(SUBGRP_EULER_MAT,/SUBOBJECT/EULER);
    }
}
/*
FORMAT(radioss43) {
MAT_CARD("%16lg%16lg",MAT_C,MAT_NU);
MAT_CARD("%8d%16lg%16lg",Istf,MAT_C5,MAT_MAT_CO1);
}
*/