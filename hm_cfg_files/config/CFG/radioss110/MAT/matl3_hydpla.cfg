//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 3 (HYDPLA) Setup File
// 

ATTRIBUTES(COMMON) {
    // Support
    // NB_PARTS                 = SIZE("Number of Connected Parts"); 
    //COMPONENT                 = ARRAY[NB_PARTS](COMPONENT,"Connected Parts");
    KEYWORD_STR                 = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                = SIZE("NUM_COMMENTS");
    CommentEnumField            = VALUE(INT,"User Comments");
    COMMENTS                    = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    // Initial and reference densities
    MAT_RHO                         = VALUE(FLOAT,"Initial Density");
    Refer_Rho                       = VALUE(FLOAT,"Reference Density");
    MAT_REFRHO_Option               = VALUE(INT, "RefRho_Option");
    DUMMY                           = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    // Other values
    MAT_E                           = VALUE(FLOAT,"Young's Modulus");
    MAT_NU                          = VALUE(FLOAT,"Poisson's Ratio");
    //
    MAT_SIGY                        = VALUE(FLOAT,"Plasticity Yield Stress");
    MAT_BETA                        = VALUE(FLOAT,"Plasticity Hardening Parameter");
    MAT_HARD                        = VALUE(FLOAT,"Plasticity Hardening Exponent");
    MAT_EPS                         = VALUE(FLOAT,"Failure Plastic Strain");
    MAT_SIG                         = VALUE(FLOAT,"Plasticity Maximum Stress");
    //
    MAT_C0                          = VALUE(FLOAT,"Hydrodynamic Coefficient C0");
    MAT_C1                          = VALUE(FLOAT,"Hydrodynamic Coefficient C1");
    MAT_C2                          = VALUE(FLOAT,"Hydrodynamic Coefficient C2");
    MAT_C3                          = VALUE(FLOAT,"Hydrodynamic Coefficient C3");
    //
    MAT_PC                          = VALUE(FLOAT,"Pressure Cutoff (< 0)");
    MAT_PSH                         = VALUE(FLOAT,"Pressure Shift");
    //
    MAT_C4                          = VALUE(FLOAT,"Energy Coefficient C4");
    MAT_C5                          = VALUE(FLOAT,"Energy Coefficient C5");
    MAT_E0                          = VALUE(FLOAT,"Initial Energy per Unit Volume");
    //
    MAT_EA                          = VALUE(FLOAT,"Initial Energy per Unit Volume");

    // HEAT
    Heat_Inp_opt                    = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT                 = VALUE(SUBOBJECT, "");
    // THERM_STRESS
    THERM_STRESS                    = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS             = VALUE(SUBOBJECT, "");
    ALE_Form                        = VALUE(INT, "Flag for Heat Transfer Formulation");
    SUBGRP_ALE_MAT                  = VALUE(SUBOBJECT, "");
    SUBGRP_EULER_MAT                = VALUE(SUBOBJECT, "");
    SUBGRP_EOS                      = VALUE(SUBOBJECT, "");
    EOS_Options                     = VALUE(INT,"Eos Options");
    //
    IO_FLAG                         = VALUE(INT, "");
    LAW_NO                          = VALUE(STRING, "");
    Mat_Name_OR_LawNo               = VALUE(INT,  "RADIOSS_COMMENT_FLAG");
    TITLE                           = VALUE(STRING,"");
    Line_count                      = VALUE(INT,"");
}


SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                     = 9000;
    COMMENTS                        = 5109;
    CommentEnumField                = 7951;
    MAT_BETA                        = 148;
    MAT_C0                          = 1500;
    MAT_C1                          = 1501;
    MAT_C2                          = 1502;
    MAT_C3                          = 1503;
    MAT_C4                          = 1504;
    MAT_C5                          = 1505;
    MAT_E                           = 119;
    MAT_E0                          = 1507;
    MAT_EPS                         = 195;
    MAT_HARD                        = 71;
    MAT_NU                          = 120;
    MAT_PC                          = 282;
    MAT_PSH                         = 5040;
    MAT_RHO                         = 118;
    Refer_Rho                       = 4229;
    MAT_SIG                         = 5038;
    MAT_SIGY                        = 152;
    NUM_COMMENTS                    = 5110;
    MAT_EA                          = 126;
    MAT_REFRHO_Option               = 4285;
    DUMMY                           = -1;
    //HEAT
    Heat_Inp_opt                    = 4346;
    SUBGRP_HEAT_MAT                 = -1;
    // THERM_STRESS
    THERM_STRESS                    = 4555;
    SUBGRP_THERM_STRESS             = -1;
    ALE_Form                        = 4336;
    SUBGRP_ALE_MAT                  = -1;
    SUBGRP_EULER_MAT                = -1;
    EOS_Options                     = 2901;
    SUBGRP_EOS                      = -1;
    LAW_NO                          = -1;
    Mat_Name_OR_LawNo               = 4538;
    IO_FLAG                         = -1;
    TITLE                           = -1;
    Line_count                      = -1;
}

DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY         = SCALAR(MAT_RHO);
    YOUNG_MODULUS           = SCALAR(MAT_E);
    POISSON_RATIO           = SCALAR(MAT_NU);
public:
    SOUND_SPEED             = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                       = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                      = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID       = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}

DEFAULTS(COMMON) {
    MAT_EPS                         = 1.0e30;
    MAT_PC                          = -1.0e30;
    MAT_SIG                         = 1.0e30;
}

CHECK(COMMON) {
    MAT_SIGY                        > 0.0;
    MAT_PC                          < 0.0;
    MAT_BETA                        >=0.0;
    MAT_E                           >0.0;
    MAT_EPS                         >=0.0;
    MAT_HARD                        >=0.0;
    MAT_HARD                        <=1.0;
    MAT_NU                          >=0.0;
    MAT_NU                          <0.5;
    MAT_RHO                         >0.0;
    MAT_RHO                         >0.0;
    MAT_SIG                         >=0.0;
}

GUI(COMMON) {
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if(Mat_Name_OR_LawNo == 2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW3/");
    }
    else 
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/HYDPLA/");
    }
    FLAG(MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho)      { DIMENSION="density";              }
    }
mandatory:
    SCALAR(MAT_RHO)         { DIMENSION="density";                  }
    //    
mandatory:
    SCALAR(MAT_E)           { DIMENSION="pressure";      }
optional:
    SCALAR(MAT_NU)          { DIMENSION="DIMENSIONLESS"; }
    //
mandatory:
    SCALAR(MAT_SIGY)        { DIMENSION="pressure";      } 
optional:
    SCALAR(MAT_BETA)        { DIMENSION="pressure";      } 
    SCALAR(MAT_HARD)        { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_EPS)         { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_SIG)         { DIMENSION="pressure";      } 
    //
    SCALAR(MAT_PC)          { DIMENSION="pressure";      }

    // HEAT data
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }

    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }

    RADIO(EOS_Options)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1,"NONE");
        ADD(2,"GRUNEISEN");
        ADD(3,"POLYNOMIAL");
        ADD(4,"PUFF");
        ADD(5,"SESAME");
        ADD(6,"TILLOTSON");
        
    } 
    if(EOS_Options > 1)
    {
        SUBOBJECT(SUBGRP_EOS) {SUBTYPES = (/SUBOBJECT/EOS);}
    }

    /*
    mandatory:
    graphical SUPPORT("Support") {
    OBJECTS=(/COMPONENT/QUAD,/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/PENTA6,/COMPONENT/LINEAR_THICK,
    /COMPONENT/TETRA10,/COMPONENT/SHEL16,/COMPONENT/BRIC20,/COMPONENT/SPHCEL);
    ADD(COMPONENT,"Parts");
    } 
    */
}

GUI(ALE) {
optional:
    graphical RADIO(ALE_Form) 
    {
        ADD(1,"NONE");
        ADD(2,"ALE");
        ADD(3,"EULER");
    }
    if(ALE_Form == 2)
    {    
        SUBOBJECT(SUBGRP_ALE_MAT) {SUBTYPES = (/SUBOBJECT/ALE_MAT);}
    }
    else if(ALE_Form == 3)
    {
        SUBOBJECT(SUBGRP_EULER_MAT) {SUBTYPES = (/SUBOBJECT/EULER);}
    }
}

// File format
FORMAT(radioss110) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW3/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/HYDPLA/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    //
    COMMENT("#                  E                  nu");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    //
    COMMENT("#                  a                   b                   n             eps_max           sigma_max");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_SIGY,MAT_BETA,MAT_HARD,MAT_EPS,MAT_SIG);
    //
    ASSIGN(Line_count,_GET_NB_FREE_CARDS(),IMPORT);
    if(Line_count == 3 && IO_FLAG == 1)
    {
        COMMENT("#                 C0                  C1                  C2                  C3");
        CARD("%20lg%20lg%20lg%20lg",MAT_C0,MAT_C1,MAT_C2,MAT_C3);
        //
        COMMENT("#               Pmin                 Psh");
        CARD("%20lg%20lg",MAT_PC,MAT_PSH);
        //
        COMMENT("#                 C4                  C5                  E0");
        CARD("%20lg%20lg%20lg",MAT_C4,MAT_C5,MAT_EA);
        ASSIGN(EOS_Options,3,IMPORT);
    }
    else
    {
        COMMENT("#               Pmin");
        CARD("%20lg",MAT_PC);
    }
    //
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
    if(ALE_Form == 2)
    {
        SUBOBJECTS(SUBGRP_ALE_MAT,/SUBOBJECT/ALE_MAT);
    }
    else if(ALE_Form == 3)
    {
        SUBOBJECTS(SUBGRP_EULER_MAT,/SUBOBJECT/EULER);
    }

    if(EOS_Options > 1)
    {
        SUBOBJECTS(SUBGRP_EOS,/SUBOBJECT/EOS);
    }
}

FORMAT(radioss51) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    //
    COMMENT("#                  E                  nu");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    //
    COMMENT("#                  a                   b                   n             eps_max           sigma_max");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_SIGY,MAT_BETA,MAT_HARD,MAT_EPS,MAT_SIG);
    //
    //
    COMMENT("#                 C0                  C1                  C2                  C3");
    CARD("%20lg%20lg%20lg%20lg",MAT_C0,MAT_C1,MAT_C2,MAT_C3);
    //
    COMMENT("#               Pmin                 Psh");
    CARD("%20lg%20lg",MAT_PC,MAT_PSH);
    //
    COMMENT("#                 C4                  C5                  E0");
    CARD("%20lg%20lg%20lg",MAT_C4,MAT_C5,MAT_EA);
    //
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
    if(ALE_Form == 2)
    {
        SUBOBJECTS(SUBGRP_ALE_MAT,/SUBOBJECT/ALE_MAT);
    }
    else if(ALE_Form == 3)
    {
        SUBOBJECTS(SUBGRP_EULER_MAT,/SUBOBJECT/EULER);
    }
    
    ASSIGN(EOS_Options, 3);
}

FORMAT(radioss41) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    //
    COMMENT("#          RHO_I");
    CARD("%16lg",MAT_RHO);
    //
    COMMENT("#                  E                  nu");
    CARD("%16lg%16lg",MAT_E,MAT_NU);
    //
    COMMENT("#                  a                   b                   n             eps_max           sigma_max");
    CARD("%%16lg%16lg%16lg%16lg%16lg",MAT_SIGY,MAT_BETA,MAT_HARD,MAT_EPS,MAT_SIG);
    //
    //
    COMMENT("#                 C0                  C1                  C2                  C3");
    CARD("%%16lg%16lg%16lg%16lg",MAT_C0,MAT_C1,MAT_C2,MAT_C3);
    //
    COMMENT("#               Pmin                 Psh");
    CARD("%16lg%16lg",MAT_PC,MAT_PSH);
    //
    COMMENT("#                 C4                  C5                  E0");
    CARD("%16lg%16lg%16lg",MAT_C4,MAT_C5,MAT_EA);
    //
    ASSIGN(EOS_Options, 3);
}