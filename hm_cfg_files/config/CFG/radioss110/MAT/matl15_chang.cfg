//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Material law 15 (CHANG) Setup File
ATTRIBUTES(COMMON) {
    // Support
    // NB_PARTS                     = SIZE("Number of Connected Parts"); 
    //COMPONENT                     = ARRAY[NB_PARTS](COMPONENT,"Connected Parts");
    KEYWORD_STR                     = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                    = SIZE("NUM_COMMENTS");
    CommentEnumField                = VALUE(INT,"User Comments");
    COMMENTS                        = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    // Initial and reference densities
    MAT_RHO                         = VALUE(FLOAT,"Initial Density");
    Refer_Rho                       = VALUE(FLOAT,"Reference Density (for lower than 14.0 version)");
    DUMMY                           = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    MAT_REFRHO_Option               = VALUE(INT, "RefRho_Option");
    MAT_EA                          = VALUE(FLOAT,"Young's Modulus in Dir. 1");
    MAT_EB                          = VALUE(FLOAT,"Young's Modulus in Dir. 2");
    MAT_PRAB                        = VALUE(FLOAT,"Poisson's Ratio");
    MAT_GAB                         = VALUE(FLOAT,"Shear Modulus 12");
    MAT_GBC                         = VALUE(FLOAT,"Shear Modulus 23");
    MAT_GCA                         = VALUE(FLOAT,"Shear Modulus 31");
    MAT_BETA                        = VALUE(FLOAT,"Hardening Parameter");
    MAT_HARD                        = VALUE(FLOAT,"Hardening Exponent");
    MAT_SIG                         = VALUE(FLOAT,"Maximum Value of Yield Function");
    WPMAX                           = VALUE(FLOAT,"Maximum Plastic Work");
    WPREF                           = VALUE(FLOAT,"Reference Plastic Work");
    Itype                           = VALUE(INT,  "Total Element Failure Criteria");
    MAT_SIGYT1                      = VALUE(FLOAT,"Composite Yield Stress in Traction in Dir. 1");
    MAT_SIGYT2                      = VALUE(FLOAT,"Composite Yield Stress in Traction in Dir. 2");
    MAT_SIGYC1                      = VALUE(FLOAT,"Composite Yield Stress in Traction Compression in Dir. 1");
    MAT_SIGYC2                      = VALUE(FLOAT,"Composite Yield Stress in Traction Compression in Dir. 2");
    MAT_ALPHA                       = VALUE(FLOAT,"F_12 Reduction Factor");
    MAT_SIGC12                      = VALUE(FLOAT,"Yield Stress in Shear and Strain Rate Compression in Dir. 12");
    MAT_SIGT12                      = VALUE(FLOAT,"Yield Stress in Shear and Strain Rate Traction in Dir. 12");
    MAT_SRC                         = VALUE(FLOAT,"Yield Stress in Shear and Strain Rate Coefficient");
    MAT_SRP                         = VALUE(FLOAT,"Yield Stress in Shear and Strain Rate Reference");
    STRFLAG                         = VALUE(INT,  "Strain Rate Computation");
    MAT_Beta                        = VALUE(FLOAT,"Shear Scaling Factor");
    MAT_TMAX                        = VALUE(FLOAT,"Time of Relaxation");
    MCHANG_S12                      = VALUE(FLOAT,"Shear Strength");
    MCHANG_S1                       = VALUE(FLOAT,"Longitidunal Tensile Strength");
    MCHANG_S2                       = VALUE(FLOAT,"Transverse Tensile Strength");
    Fsmooth                         = VALUE(INT,   "Smooth Strain Rate Option Flag");
    Fcut                            = VALUE(FLOAT, "Cutoff Frequency for Strain Rate Filtering");
    MCHANG_C1                       = VALUE(FLOAT,"Longitidunal Compressive Strength");
    MCHANG_C2                       = VALUE(FLOAT,"Transverse Compressive Strength");
    // HEAT
    Heat_Inp_opt                    = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT                 = VALUE(SUBOBJECT, "");
    // THERM_STRESS
    THERM_STRESS                    = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS             = VALUE(SUBOBJECT, "");
    //
    IO_FLAG                         = VALUE(INT, "");
    LAW_NO                          = VALUE(STRING, "");
    Mat_Name_OR_LawNo               = VALUE(INT, "");
    TITLE                           = VALUE(STRING,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                     = 9000;
    COMMENTS                        = 5109;
    CommentEnumField                = 7951;
    MAT_REFRHO_Option               = 4285;
    Refer_Rho                       = 4229;
    Itype                           = 5107;
    MAT_ALPHA                       = 349;
    MAT_BETA                        = 148;
    MAT_Beta                        = 5007;
    MAT_EA                          = 126;
    MAT_EB                          = 127;
    MAT_GAB                         = 132;
    MAT_GBC                         = 133;
    MAT_GCA                         = 134;
    MAT_HARD                        = 71;
    MAT_PRAB                        = 129;
    MAT_SIG                         = 5038;
    MAT_SIGC12                      = 5047;
    MAT_SIGT12                      = 345;
    MAT_SIGYC1                      = 1126;
    MAT_SIGYC2                      = 348;
    MAT_SIGYT1                      = 346;
    MAT_SIGYT2                      = 347;
    MAT_SRC                         = 155;
    MAT_SRP                         = 156;
    MAT_TMAX                        = 316;
    MCHANG_C1                       = 4045;
    MCHANG_C2                       = 4046;
    MCHANG_S1                       = 4042;
    MCHANG_S12                      = 4044;
    MCHANG_S2                       = 4043;
    STRFLAG                         = 5039;
    WPMAX                           = 5073;
    WPREF                           = 4041;
    MAT_RHO                         = 118;
    NUM_COMMENTS                    = 5110;
    Fcut                            = 5356;
    Fsmooth                         = 5355;
    //HEAT
    Heat_Inp_opt                    = 4346;
    SUBGRP_HEAT_MAT                 = -1;
    // THERM_STRESS
    THERM_STRESS                    = 4555;
    SUBGRP_THERM_STRESS             = -1;
    //
    DUMMY                           = -1;
    Mat_Name_OR_LawNo               = 4538;
    LAW_NO                          = -1;
    IO_FLAG                         = -1;
    TITLE                           = -1;
}

DRAWABLES(COMMON) {
    public:
    INITIAL_DENSITY   = SCALAR(MAT_RHO);
    POISSON_RATIO     = SCALAR(MAT_PRAB);
    E11 = SCALAR(MAT_EA);
    E22 = SCALAR(MAT_EB); 
    v12 = SCALAR(MAT_PRAB);
    v21 = EVAL(v12*E22/E11);
    G12 = SCALAR(MAT_GAB);
    G23 = SCALAR(MAT_GBC);
    G31 = SCALAR(MAT_GCA);
    MAX_E = MAX(E11,E22);
    C1 = EVAL(MAX_E/(1-v12*v21));
    public:
        MAX_VAL = MAX(C1,G12,G23,G31);
        SOUND_SPEED       = EVAL((MAX_VAL/INITIAL_DENSITY)^0.5);
        G = MAX(G12,G23,G31);
        BULK_MODULUS                    = EVAL(MAX_E/(3*(1-2*POISSON_RATIO)));
        SOUND_SPEED_SOLID               = EVAL(((4*G/3+BULK_MODULUS)/INITIAL_DENSITY)^0.5);
}

CHECK(COMMON)
{
    MAT_EA                          >0.0;
    MAT_EB                          >0.0;
    MAT_GAB                         >0.0;
    MAT_GBC                         >0.0;
    MAT_GCA                         >0.0;
    MAT_HARD                        >=0.0;
    MAT_HARD                        <=1.0;
    MAT_RHO                         >0.0;
    MAT_SIGC12                      >0.0;
    MAT_SIGT12                      >0.0;
    MAT_SIGYC1                      >0.0;
    MAT_SIGYC2                      >0.0;
    MAT_SIGYT1                      >0.0;
    MAT_SIGYT2                      >0.0;
    MAT_SRC                         >=0.0;
    MAT_SRP                         >=0.0;
}

DEFAULTS(COMMON)
{
    Fcut                            = 1.0e30;
    Fsmooth                         = 0;
    MAT_ALPHA                       = 1.0;
    MAT_HARD                        = 1.0;
    MAT_SIG                         = 1.0e30;
    MAT_TMAX                        = 1.0e30;
    MCHANG_C1                       = 1.0e30;
    MCHANG_C2                       = 1.0e30;
    MCHANG_S1                       = 1.0e30;
    MCHANG_S12                      = 1.0e30;
    MCHANG_S2                       = 1.0e30;
    STRFLAG                         = 1;
    WPMAX                           = 1.0e30;
    WPREF                           = 1.0;

}

GUI(COMMON) {
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Mat_Name_OR_LawNo ==2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW15/");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/CHANG/");

    } 
    FLAG(MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho)      { DIMENSION="density";       }
    }
mandatory:
    SCALAR(MAT_RHO)         { DIMENSION="density";  }    
    SCALAR(MAT_EA)          { DIMENSION="pressure";      }
    SCALAR(MAT_EB)          { DIMENSION="pressure";      }
    SCALAR(MAT_PRAB)        { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_GAB)         { DIMENSION="pressure";      }
    SCALAR(MAT_GBC)         { DIMENSION="pressure";      }
    SCALAR(MAT_GCA)         { DIMENSION="pressure";      }
optional:
    SCALAR(MAT_BETA);
    SCALAR(MAT_HARD)        { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_SIG)         { DIMENSION="force";         }
    SCALAR(WPMAX)           { DIMENSION="energy";        }
    SCALAR(WPREF)           { DIMENSION="energy";        }
optional:
    RADIO(Itype,"Total element failure criteria") {
        ADD(0,"0: Shell is Deleted if W_P>W_P_max for 1 Layer");
        ADD(1,"1: Shell is Deleted if W_P>W_P_max for all Layers");
        ADD(2,"2: If for Each Layer W_P>W_P_max or Tensile Failure in Dir. 1");
        ADD(3,"3: If for Each Layer W_P>W_P_max or Tensile Failure in Dir. 2");
        ADD(4,"4: If for Each Layer W_P>W_P_max or Tensile Failure in Dir. 1 and 2");
        ADD(5,"5: If for All Layers W_P>W_P_max or Tensile Failure in Dir. 1, 2");
        ADD(6,"6: If for Each Layer W_P>W_P_max or Tensile Failure in Dir. 1 or 2");
    }
    SCALAR(MAT_SIGYT1,"Yield stress\nin tension in dir. 1")     { DIMENSION="pressure"; }
    SCALAR(MAT_SIGYT2,"Yield stress\nin tension in dir. 2")     { DIMENSION="pressure"; }
    SCALAR(MAT_SIGYC1,"Yield stress\nin compress. in dir. 1")   { DIMENSION="pressure"; }
    SCALAR(MAT_SIGYC2,"Yield stress\nin compress. in dir. 2")   { DIMENSION="pressure"; }
    SCALAR(MAT_ALPHA);
    SCALAR(MAT_SIGC12,"Yield stress\nin compress. in dir. 12") { DIMENSION="pressure"; }    
    SCALAR(MAT_SIGT12,"Yield stress\nin tension in dir. 12")   { DIMENSION="pressure"; }
    SCALAR(MAT_SRC)         { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_SRP)         { DIMENSION="DIMENSIONLESS"; }
    if (MAT_SRC > 0)
    {
        RADIO(STRFLAG,"Strain rate computation") {
            ADD(0,"0: Default Set to 1");
            ADD(1,"1: Strain Rate Effect on F_max,no Effect on W_P_max");
            ADD(2,"2: No Strain Rate Effect on F_max and W_P_max");
            ADD(3,"3: Strain Rate Effect on F_max and W_P_max");
            ADD(4,"4: No Strain Rate Effect on F_max Effect on W_P_max");
        }
    }
    SCALAR(MAT_Beta)        { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_TMAX)        { DIMENSION="t"; }  
    SCALAR(MCHANG_S1)       { DIMENSION="pressure";      }
    SCALAR(MCHANG_S2)       { DIMENSION="pressure";      }
    SCALAR(MCHANG_S12)      { DIMENSION="pressure";      }
optional:
    RADIO(Fsmooth,"Strain rate Smoothing"){
        ADD(0,"0: No Strain Rate Smoothing(Default)");
        ADD(1,"1: Strain Rate Smoothing Active");
    }
    SCALAR(Fcut)            { DIMENSION="f";     }
    SCALAR(MCHANG_C1)       { DIMENSION="pressure";      }
    SCALAR(MCHANG_C2)       { DIMENSION="pressure";      }
    // HEAT data
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }
    // THERM_STRESS
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    } 
    /*
    mandatory:
    graphical SUPPORT("Support") {
    OBJECTS=(/PART/SHELL,/PART/SH4N,/PART/SH3N);
    ADD(PART,"Parts");
    }
    */
}
FORMAT(radioss90) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW15/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/CHANG/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                E11                 E22                nu12");
    CARD("%20lg%20lg%20lg",MAT_EA,MAT_EB,MAT_PRAB);
    COMMENT("#                G12                 G23                 G31");
    CARD("%20lg%20lg%20lg",MAT_GAB,MAT_GBC,MAT_GCA);
    COMMENT("#                  b                   n                fmax");
    CARD("%20lg%20lg%20lg",MAT_BETA,MAT_HARD,MAT_SIG);
    COMMENT("#              Wpmax              Wpref       Ioff");
    CARD("%20lg%20lg%10d",WPMAX,WPREF,Itype);
    COMMENT("#          sigma_1yt           sigma_2yt           sigma_1yc           sigma_2yc               alpha");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_SIGYT1,MAT_SIGYT2,MAT_SIGYC1,MAT_SIGYC2,MAT_ALPHA);
    COMMENT("#         sigma_12yc          sigma_12yt                   c           Eps_dot_0       ICC"); 
    CARD("%20lg%20lg%20lg%20lg%10d",MAT_SIGC12,MAT_SIGT12,MAT_SRC,MAT_SRP,STRFLAG);
    COMMENT("#               beta                Tmax                  S1                  S2                 S12");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_Beta,MAT_TMAX,MCHANG_S1,MCHANG_S2,MCHANG_S12);
    COMMENT("#  Fsmooth                Fcut                  C1                 C12");
    CARD("%10d%20lg%20lg%20lg",Fsmooth,Fcut,MCHANG_C1,MCHANG_C2);
    // HEAT data
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    // THERM_STRESS 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}

FORMAT(radioss51) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW15/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/CHANG/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#        Init. dens.");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                E11                 E22                nu12");
    CARD("%20lg%20lg%20lg",MAT_EA,MAT_EB,MAT_PRAB);
    COMMENT("#                G12                 G23                 G31");
    CARD("%20lg%20lg%20lg",MAT_GAB,MAT_GBC,MAT_GCA);
    COMMENT("#                  b                   n                fmax");
    CARD("%20lg%20lg%20lg",MAT_BETA,MAT_HARD,MAT_SIG);
    COMMENT("#              Wpmax              Wpref       Ioff");
    CARD("%20lg%20lg%10d",WPMAX,WPREF,Itype);
    COMMENT("#         sig_trac_1          sig_trac_2          sig_comp_1         sig_comp_2               alpha");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_SIGYT1,MAT_SIGYT2,MAT_SIGYC1,MAT_SIGYC2,MAT_ALPHA);
    COMMENT("#        sig_comp_12        sig_tract_12                   c              Eps_0       Icc");
    CARD("%20lg%20lg%20lg%20lg%10d",MAT_SIGC12,MAT_SIGT12,MAT_SRC,MAT_SRP,STRFLAG);
    COMMENT("#               beta                Tmax                  S1                  S2                 S12");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_Beta,MAT_TMAX,MCHANG_S1,MCHANG_S2,MCHANG_S12);
    COMMENT("#  Fsmooth                Fcut                  C1                  C2");
    CARD("%10d%20lg%20lg%20lg",Fsmooth,Fcut,MCHANG_C1,MCHANG_C2);
    // HEAT data
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    // THERM_STRESS 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
FORMAT(radioss41) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    
    COMMENT("#    Init. dens.");
    CARD("%16lg",MAT_RHO);
    COMMENT("#            E11             E22            nu12");
    CARD("%16lg%16lg%16lg",MAT_EA,MAT_EB,MAT_PRAB);
    COMMENT("#            G12             G23             G31");
    CARD("%16lg%16lg%16lg",MAT_GAB,MAT_GBC,MAT_GCA);
    COMMENT("#              b               n            fmax           Wpmax    Ioff");
    CARD("%16lg%16lg%16lg%16lg%8d",MAT_BETA,MAT_HARD,MAT_SIG,WPMAX,Itype);
    COMMENT("#     sig_trac_1      sig_trac_2      sig_comp_1      sig_comp_2           alpha");
    CARD("%16lg%16lg%16lg%16lg%16lg",MAT_SIGYT1,MAT_SIGYT2,MAT_SIGYC1,MAT_SIGYC2,MAT_ALPHA);
    COMMENT("#    sig_comp_12    sig_tract_12               c           Eps_0     Icc");
    CARD("%16lg%16lg%16lg%16lg%8d",MAT_SIGC12,MAT_SIGT12,MAT_SRC,MAT_SRP,STRFLAG);
    COMMENT("#           beta            Tmax");
    CARD("%16lg%16lg",MAT_Beta,MAT_TMAX);
    COMMENT("#Fsmooth            Fcut");
    CARD("%8d%16lg",Fsmooth,Fcut);
}