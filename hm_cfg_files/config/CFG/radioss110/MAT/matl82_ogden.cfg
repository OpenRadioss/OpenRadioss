//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 82
//

ATTRIBUTES(COMMON)
{
    // Support    
    //NB_PARTS                              = SIZE("Number of Connected Parts");
    //COMPONENT                             = ARRAY[NB_PARTS](COMPONENT,"Connected Parts");
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    DUMMY                                   = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    MAT_REFRHO_Option                       = VALUE(INT,  "RefRho_Option");
    Refer_Rho                               = VALUE(FLOAT,  "Ref_Rho");
    MAT_RHO                                 = VALUE(FLOAT,  "Initial Density");
    ORDER                                   = SIZE("Order of the Ogden Model");
    Alpha_arr                               = ARRAY[ORDER](FLOAT,  "Alpha,Ith Parameter (i = 1,N)");
    Gamma_arr                               = ARRAY[ORDER](FLOAT,  "D_i,Ith Parameter (i = 1,N)");
    Mu_arr                                  = ARRAY[ORDER](FLOAT,  "Mu,Ith Parameter (i = 1,N)");
    MAT_NU                                  = VALUE(FLOAT,  "Nu,Poisson's Ratio");
    //Mat_Name_OR_LawNo                     = VALUE(INT, "");
    // Heat & Therm_stress
    Heat_Inp_opt                            = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT                         = VALUE(SUBOBJECT, "");
    THERM_STRESS                            = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS                     = VALUE(SUBOBJECT, "");
    // VISC_PRONY
    VISC_PRONY_option                       = VALUE(INT,"Visc Prony");
    SUBGRP_VISC_PRONY                       = VALUE(SUBOBJECT, "");
    IO_FLAG                                 = VALUE(INT, "");
    TITLE                                   = VALUE(STRING,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    NUM_COMMENTS                            = 5110;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;
    MAT_REFRHO_Option                       = 4285;
    Refer_Rho                               = 4229;
    MAT_RHO                                 = 118;
    DUMMY                                   = -1;
    ORDER                                   = 4335;
    //ORDER %5) != 0]                       = 0;
    Mu_arr                                  = 4421;
    Alpha_arr                               = 4422;
    Gamma_arr                               = 4423;
    MAT_NU                                  = 120;
    // Heat & Therm_stress
    Heat_Inp_opt                            = 4346;
    SUBGRP_HEAT_MAT                         = -1;
    THERM_STRESS                            = 4555;
    SUBGRP_THERM_STRESS                     = -1;
    // VISC_PRONY
    VISC_PRONY_option                       = 4707;
    SUBGRP_VISC_PRONY                       = -1;
    IO_FLAG                                 = -1;
    TITLE                                   = -1;
}

DRAWABLES(COMMON) 
{
public:
    INITIAL_DENSITY         = SCALAR(MAT_RHO);
    POISSON_RATIO           = SCALAR(MAT_NU);
}

CHECK(COMMON)
{
    MAT_RHO                                 >0.0;
}

DEFAULTS(COMMON)
{
    MAT_NU                                  = 0.475;
    ORDER                                   = 0;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if( CommentEnumField == 2)
    {
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }

    ASSIGN(KEYWORD_STR, "/MAT");
    ASSIGN(KEYWORD_STR, "/LAW82/");

mandatory:

    SCALAR(MAT_RHO)                                 { DIMENSION="density"; }

optional:
    graphical FLAG( MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho);
    }
    
    SIZE_RADIO(ORDER)
    {
        ADD(0, "<OFF>     ");
        ADD(1, "");
        ADD(2, "");
        ADD(3, "");
        ADD(4, "");
        ADD(5, "");
        ADD(6, "");
        ADD(7, "");
        ADD(8, "");
        ADD(9, "");
        ADD(10, "");
        ADD(11, "");
        ADD(12, "");
        ADD(13, "");
        ADD(14, "");
        ADD(15, "");
        ADD(16, "");
        ADD(17, "");
        ADD(18, "");
        ADD(19, "");
        ADD(20, "");
    }

    ARRAY(ORDER,"")
    {
        SCALAR(Mu_arr)                              { DIMENSION="pressure"; }
        SCALAR(Alpha_arr)                           { DIMENSION="DIMENSIONLESS";}
        SCALAR(Gamma_arr)                           { DIMENSION="inverse_of_pressure"; }
    }
    
    SCALAR(MAT_NU)                                  { DIMENSION ="DIMENSIONLESS"; }
    
    //
    /*mandatory:
    graphical SUPPORT("Support") {
    OBJECTS=(/PART/QUAD,/PART/BRICK,/PART/TETRA4,/PART/LINEAR_3D,/PART/PENTA6,/PART/LINEAR_THICK,
    /PART/TETRA10,/PART/SHEL16,/PART/BRIC20,/PART/SPHCEL);
    ADD(PART,"Parts");
    }
    */


optional:
    //heat data
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }
    // therm_stress data
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
    // VISC_PRONY data
    if(VISC_PRONY_option!=0)
    {
        SUBOBJECT(SUBGRP_VISC_PRONY) {SUBTYPES = (/SUBOBJECT/VISC);}
    }

}

FORMAT(radioss100) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 0)
    {
        HEADER("/MAT/LAW82/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option != FALSE)
    {
        COMMENT("#              RHO_I          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else
    {
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    } 
    //
    COMMENT("#        N                            Nu");
    CARD("%10d          %20lg",ORDER,MAT_NU);
    //
    if(ORDER>0) {
        COMMENT("#               Mu_i");
        CELL_LIST(ORDER,"%20lg",Mu_arr);
        COMMENT("#            Alpha_i");
        CELL_LIST(ORDER,"%20lg",Alpha_arr);
        COMMENT("#                D_i");
        CELL_LIST(ORDER,"%20lg",Gamma_arr);
    }
    // heat data.
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    // therm_stress data.  
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
    // VISC_PRONY data
    if(VISC_PRONY_option!=0)
    {
        SUBOBJECTS(SUBGRP_VISC_PRONY,/SUBOBJECT/VISC);
    }
}