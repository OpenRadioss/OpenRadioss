//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Material law 38
ATTRIBUTES(COMMON)
{
    KEYWORD_STR            = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS           = SIZE("NUM_COMMENTS");
    COMMENTS               = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField       = VALUE(INT,  "User Comments");
    MAT_REFRHO_Option      = VALUE(INT,  "RefRho_Option");
    MAT_RHO                = VALUE(FLOAT,  "Initial Density");
    Refer_Rho              = VALUE(FLOAT,  "Reference Density");
    MAT_E                  = VALUE(FLOAT,  "Minimum Tension Modulus, Used for Interface and Time Step Computation");
    MAT_NU                 = VALUE(FLOAT,  "Maximum Poisson's Ratio in Tension");
    MAT_NUt                = VALUE(FLOAT,  "Maximum Poisson's Ratio in Compression");
    MAT_RV                 = VALUE(FLOAT,  "Exponent for Poisson's Ratio Computation");
    MAT_IFLAG              = VALUE(INT,  "Analysis Formulation Type Flag ");
    ITOTAL                 = VALUE(INT,  "Incremental Formulation Flag");
    MAT_RELX               = VALUE(FLOAT,  "Relaxation Rate for Unloading");
    MAT_HYST               = VALUE(FLOAT,  "Hysteresis Coefficient for Unloading");
    DAMP1                  = VALUE(FLOAT,  "Damping Factor on Strain Rate");
    Gflag                  = VALUE(INT,  "Recovery Model Flag for Unloading (Hysteresis Loop)");
    Vflag                  = VALUE(INT,  "Decay Model Flag, Hysteresis Type");
    MAT_Theta              = VALUE(FLOAT,  "Integration Coefficient for Instantaneous Module update");
    MAT_Kair               = VALUE(INT,  "Air Content Computation Flag");
    FUN_A4                 = VALUE(FUNCT,  "Pressure Curve Number (Pressure Vs. Relative Volume)");
    MAT_PScale             = VALUE(FLOAT,  "Pressure Curve Scale Factor");
    MAT_P0                 = VALUE(FLOAT,  "Atmospheric Pressure");
    MAT_PR                 = VALUE(FLOAT,  "Relaxation Rate of Pressure");
    MAT_PMAX               = VALUE(FLOAT,  "Maximum Air Pressure");
    MAT_POROS              = VALUE(FLOAT,  "Porosity (Density of Foam/Density of Polymer)");
    FUN_B4                 = VALUE(FUNCT,  "Unloading Function Identifier");
    MAT_ALPHA6             = VALUE(FLOAT,  "Unloading Function Scale Factor");
    MAT_EPSF2              = VALUE(FLOAT,  "Unloading Strain Rate (Must be Greater than E21 )");
    MAT_EXP1               = VALUE(FLOAT,  "Exponent for Stress Interpolation");
    MAT_EXP2               = VALUE(FLOAT,  "Exponent for Stress Interpolation");
    //NFUNC                                 = VALUE(INT,  " Number of Functions Defining Rate Dependency (Five or Less)");
    NFUNC                  = SIZE("Number of Functions Defining Rate Dependency (Five or Less)");
    Jstrain                = VALUE(INT,  "Engineering Strain Formulation");
    MAT_CUTOFF             = VALUE(FLOAT,  "Tension Cutoff Stress");
    MAT_Iinsta             = VALUE(INT,  "Material Instability Control Flag");
    MAT_Efinal             = VALUE(FLOAT,  "Maximum Tension Modulus");
    MAT_Epsfinal           = VALUE(FLOAT,  "Absolute Value of Strain at Final Modulus");
    MAT_Lamda              = VALUE(FLOAT,  "Modulus Interpolation Coefficient");
    MAT_MaxVisc            = VALUE(FLOAT,  "Maximum Viscosity");
    MAT_Tol                = VALUE(FLOAT,  "Tolerance on Principal Direction Update");
    Fscale_i               = ARRAY[NFUNC](FLOAT,  "Scale Factor for Curve i");
    Epsilon_i              = ARRAY[NFUNC](FLOAT,  "Engineering Strain Rate for Curve i");
    Funct_Id_Load          = ARRAY[NFUNC](FUNCT,  "Loading Function Identifier for Curve i");
    Funct_Id_UnLoad        = ARRAY[NFUNC](FUNCT,  "Unloading Function Identifier for Curve i");
    Mat_Name_OR_LawNo      = VALUE(INT, "");
    TITLE                  = VALUE(STRING,"");
    IO_FLAG                = VALUE(INT, "");
    LAW_NO                 = VALUE(STRING, "");
    DUMMY                  = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    // HEAT
    Heat_Inp_opt           = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT        = VALUE(SUBOBJECT, "");
    // THERM_STRESS
    THERM_STRESS           = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS    = VALUE(SUBOBJECT, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR             = 9000;
    NUM_COMMENTS            = 5110;
    COMMENTS                = 5109;
    CommentEnumField        = 7951;
    MAT_REFRHO_Option       = 4285;
    MAT_RHO                 = 118;
    Refer_Rho               = 4229;
    MAT_E                   = 119;
    MAT_NU                  = 120;
    MAT_NUt                 = 5083;
    MAT_RV                  = 5094;
    MAT_IFLAG               = 6388;
    ITOTAL                  = 6387;
    MAT_RELX                = 5345;
    MAT_HYST                = 5346;
    DAMP1                   = 254;
    Gflag                   = 5112;
    Vflag                   = 5113;
    MAT_Theta               = 4094;
    MAT_Kair                = 5095;
    FUN_A4                  = 200;
    MAT_PScale              = 4095;
    MAT_P0                  = 1122;
    MAT_PR                  = 5096;
    MAT_PMAX                = 5097;
    MAT_POROS               = 5098;
    FUN_B4                  = 224;
    MAT_ALPHA6              = 5084;
    MAT_EPSF2               = 5075;
    MAT_EXP1                = 5099;
    MAT_EXP2                = 5100;
    NFUNC                   = 5093;
    Jstrain                 = 8012;
    MAT_CUTOFF              = 4096;
    MAT_Iinsta              = 4097;
    MAT_Efinal              = 4098;
    MAT_Epsfinal            = 4099;
    MAT_Lamda               = 4100;
    MAT_MaxVisc             = 4101;
    MAT_Tol                 = 4102;
    Fscale_i                = 3536;
    Epsilon_i               = 3534;
    Funct_Id_Load           = 3533;
    Funct_Id_UnLoad         = 2718;
    Mat_Name_OR_LawNo       = 4538;
    LAW_NO                  = -1;
    IO_FLAG                 = -1;
    TITLE                   = -1;
    DUMMY                   = -1;
    //HEAT
    Heat_Inp_opt            = 4346;
    SUBGRP_HEAT_MAT         = -1;
    // THERM_STRESS
    THERM_STRESS            = 4555;
    SUBGRP_THERM_STRESS     = -1;
}

DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY                         = SCALAR(MAT_RHO);
    YOUNG_MODULUS                           = SCALAR(MAT_E);
    Nut                                     = SCALAR(MAT_NUt);
    Nu                                      = SCALAR(MAT_NU);
    POISSON_RATIO                           = MAX(Nut,Nu);
public:
    SOUND_SPEED                             = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                                       = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                                      = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID                       = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}


CHECK(COMMON)
{
    MAT_E                    >0.0;
    MAT_RHO                  >0.0;
    MAT_RHO                  >0.0;
}

DEFAULTS(COMMON)
{
    DAMP1         = 0.5;
    Gflag         = 0;
    ITOTAL        = 0;
    MAT_CUTOFF    = 1.0e30;
    MAT_EXP1      = 1.0;
    MAT_EXP2      = 1.0;
    // MAT_MAT_Efinal  = $MAT_MAT_E;
    MAT_HYST      = 1.0;
    MAT_Iinsta    = 0;
    MAT_Kair      = 0;
    MAT_Lamda     = 1.0;
    MAT_MaxVisc   = 1.0e30;
    MAT_NU        = 1.0e-30;
    MAT_PMAX      = 1.0e30;
    MAT_PR        = 1.0e-30;
    MAT_RELX      = 1.0e-30;
    MAT_Theta     = 0.67;
    MAT_Tol       = 1.0;
    Vflag         = 0;

}
GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Mat_Name_OR_LawNo ==2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW38/");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/VISC_TAB/");
    }

    FLAG(MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho){ DIMENSION="density";}
    }
    mandatory:
        SCALAR(MAT_RHO)      { DIMENSION="density";}
        SCALAR(MAT_E)        { DIMENSION="pressure";}
    optional:
        SCALAR(MAT_NU);
        SCALAR(MAT_NUt);
        SCALAR(MAT_RV);
        RADIO(MAT_IFLAG)
        {
            ADD(0, " 0: Viscoelasticity is Computed in Each Principal Stress Direction");
            ADD(1, " 1: Behavior is Linear in Both Tension and Compression");
        }
        //SCALAR(ITOTAL);
        RADIO(ITOTAL)
        {
            ADD(0, "0: Behavior in Tension is Linear");
            ADD(1, "1: Behavior in Tension is Read from Stress Curves INCREMENTAL: 2 or 3");
            ADD(2, "2: Behavior in Tension is Linear");
            ADD(3, "3: Behavior in Tension is Read from Stress Curves");
        }
        SCALAR(MAT_RELX);
        SCALAR(MAT_HYST);
        SCALAR(DAMP1);
        //SCALAR(Gflag);
        RADIO(Gflag)
        {
            ADD(0, "0: No Stress Recovery on Unloading");
            ADD(1, "1: Stress Recovery on Unloading");
        }

        //SCALAR(Vflag);
        RADIO(Vflag)
        {
            ADD(0, "0: Decay is Active During Loading and Unloading");
            ADD(1, "1: Decay is Only Active During Loading");
            ADD(2, "2: Decay is Active During Unloading");
        }
        SCALAR(MAT_Theta);
        //SCALAR(MAT_Kair);
        RADIO(MAT_Kair)
        {
            ADD(0, "0: No Confined Air Content");
            ADD(1, "1: Confined Air Content Computation Active");
            ADD(2, "2: Read Hydrostatic Curve (Number Defined by NP)");
        }
        DATA(FUN_A4);
        SCALAR(MAT_PScale)        { DIMENSION="pressure";}
        SCALAR(MAT_P0)            { DIMENSION="pressure";}
        SCALAR(MAT_PR)            { DIMENSION="f";}
        SCALAR(MAT_PMAX)          { DIMENSION="pressure";}
        SCALAR(MAT_POROS);
        DATA(FUN_B4);
        SCALAR(MAT_ALPHA6)        { DIMENSION="pressure";}
        SCALAR(MAT_EPSF2)         { DIMENSION="f";}
        SCALAR(MAT_EXP1);
        SCALAR(MAT_EXP2);
        SIZE_RADIO(NFUNC)
        {
            ADD(0, "");
            ADD(1, "");
            ADD(2, "");
            ADD(3, "");
            ADD(4, "");
            ADD(5, "");
        }
        SCALAR(MAT_CUTOFF)        { DIMENSION="pressure";}
        RADIO(MAT_Iinsta)
        {
            ADD(0, "0: No Material Instability Control");
            ADD(1, "1: Material Instability Control");
        }
        SCALAR(MAT_Efinal)        { DIMENSION="pressure";}
        SCALAR(MAT_Epsfinal);
        SCALAR(MAT_Lamda);
        SCALAR(MAT_MaxVisc)       { DIMENSION="dynamicviscosity";}
        SCALAR(MAT_Tol);

        ARRAY(NFUNC,"")
        {
            SCALAR(Fscale_i)        { DIMENSION="pressure";}
            SCALAR(Epsilon_i)       { DIMENSION="f";}
            DATA(Funct_Id_Load);
            DATA(Funct_Id_UnLoad);
        }
    optional:
        // HEAT data
        graphical FLAG(Heat_Inp_opt);
        if (Heat_Inp_opt!= 0) {
            SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
        }
        // THERM_STRESS
        graphical FLAG(THERM_STRESS);
        if (THERM_STRESS!= 0) {
            SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
        }
        /*mandatory:
        graphical SUPPORT("Support") {
        OBJECTS=(/PART/QUAD,/PART/BRICK,/PART/TETRA4,/PART/LINEAR_3D,/PART/TETRA10);
        ADD(PART,"Parts");
        }*/
        } 
// File format
FORMAT(radioss51) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
   if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW38/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/VISC_TAB/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#        Init. dens.          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#        Init. dens.");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                  E                nu_t                nu_c                  Rv     Iflag     Itota");
    CARD("%20lg%20lg%20lg%20lg%10d%10d",MAT_E,MAT_NU,MAT_NUt,MAT_RV,MAT_IFLAG,ITOTAL);
    COMMENT("#               Beta                   H                 R_D       K_R       K_D     Instant-mod-upd");
    CARD("%20lg%20lg%20lg%10d%10d%20lg",MAT_RELX,MAT_HYST,DAMP1,Gflag,Vflag,MAT_Theta);
    COMMENT("#     Kair        Np              Pscale");
    CARD("%10d%10d%20lg",MAT_Kair,FUN_A4,MAT_PScale);
    COMMENT("#                 P0                  Rp                Pmax                 Phi");
    CARD("%20lg%20lg%20lg%20lg",MAT_P0,MAT_PR,MAT_PMAX,MAT_POROS);
    COMMENT("#      ful                  alpha_unload        Eps_._unload                   a                   b");
    CARD("%10d          %20lg%20lg%20lg%20lg",FUN_B4,MAT_ALPHA6,MAT_EPSF2,MAT_EXP1,MAT_EXP2);
    COMMENT("#   m_func                        CUToff    Iinsta");
    CARD("%10d          %20lg%10d",NFUNC,MAT_CUTOFF,MAT_Iinsta);
    COMMENT("#            E-final          Epsi-final              Lambda                VISC                 Tol");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_Efinal,MAT_Epsfinal,MAT_Lamda,MAT_MaxVisc,MAT_Tol);
    if(NFUNC > 5){
        ASSIGN(NFUNC, 5);
    }
    if(NFUNC > 0 && NFUNC <= 5 ) {
        COMMENT("# Scale factors");
        CELL_LIST(NFUNC,"%20lg",Fscale_i);
        COMMENT("# Strain rates");
        CELL_LIST(NFUNC,"%20lg",Epsilon_i);
        COMMENT("# Loading functions");
        CELL_LIST(NFUNC,"%10d",Funct_Id_Load);
        COMMENT("# Unloading functions");
        CELL_LIST(NFUNC,"%10d",Funct_Id_UnLoad);
    } 
    else 
    {
        COMMENT("# Scale factors");
        BLANK;
        COMMENT("# Strain rates");
        BLANK;
        COMMENT("# Loading functions");
        BLANK;
        COMMENT("# Unloading functions");
        BLANK;
    }
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
FORMAT(radioss42) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    COMMENT("#    Init. dens.");
    CARD("%16lg",MAT_RHO);
    COMMENT("#              E            nu_t            nu_c              Rv   Iflag   Itota");
    CARD("%16lg%16lg%16lg%16lg%8d%8d",MAT_E,MAT_NU,MAT_NUt,MAT_RV,MAT_IFLAG,ITOTAL);
    COMMENT("#           Beta               H             R_D     K_R     K_D");
    CARD("%16lg%16lg%16lg%8d%8d",MAT_RELX,MAT_HYST,DAMP1,Gflag,Vflag);
    COMMENT("#   Kair      Np              P0              Rp            Pmax             Phi");
    CARD("%8d%8d%16lg%16lg%16lg%16lg",MAT_Kair,FUN_A4,MAT_P0,MAT_PR,MAT_PMAX,MAT_POROS);
    COMMENT("#    ful            alpha_unload    Eps_._unload               a               b");
    CARD("%8d        %16lg%16lg%16lg%16lg",FUN_B4,MAT_ALPHA6,MAT_EPSF2,MAT_EXP1,MAT_EXP2);
    COMMENT("#  Nfunc Jstrain");
    CARD("%8d%8d",NFUNC,Jstrain);
    COMMENT("#        E-final      Epsi-final          Lambda            VISC             Tol");
    CARD("%16lg%16lg%16lg%16lg%16lg",MAT_Efinal,MAT_Epsfinal,MAT_Lamda,MAT_MaxVisc,MAT_Tol);
    if(NFUNC > 5){
        ASSIGN(NFUNC, 5);
    }
    if(NFUNC > 0 && NFUNC <= 5 ) {
        COMMENT("# Scale factors");
        CELL_LIST(NFUNC,"%16lg",Fscale_i);
        COMMENT("# Strain rates");
        CELL_LIST(NFUNC,"%16lg",Epsilon_i);
        COMMENT("# Loading functions");
        CELL_LIST(NFUNC,"%8d",Funct_Id_Load);
        COMMENT("# Unloading functions");
        CELL_LIST(NFUNC,"%8d",Funct_Id_UnLoad);
    } else {
        COMMENT("# Scale factors");
        BLANK;
        COMMENT("# Strain rates");
        BLANK;
        COMMENT("# Loading functions");
        BLANK;
        COMMENT("# Unloading functions");
        BLANK;
    }
}
FORMAT(radioss41) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    COMMENT("#    Init. dens.");
    CARD("%16lg",MAT_RHO);
    COMMENT("#              E            nu_t            nu_c              Rv   Iflag   Itota");
    CARD("%16lg%16lg%16lg%16lg%8d%8d",MAT_E,MAT_NU,MAT_NUt,MAT_RV,MAT_IFLAG,ITOTAL);
    COMMENT("#           Beta               H             R_D     K_R     K_D Instant-mod-upd");
    CARD("%16lg%16lg%16lg%8d%8d",MAT_RELX,MAT_HYST,DAMP1,Gflag,Vflag);
    COMMENT("#   Kair      Np              P0              Rp            Pmax             Phi");
    CARD("%8d%8d%16lg%16lg%16lg%16lg",MAT_Kair,FUN_A4,MAT_P0,MAT_PR,MAT_PMAX,MAT_POROS);
    COMMENT("#    ful            alpha_unload    Eps_._unload               a               b");
    CARD("%8d        %16lg%16lg%16lg%16lg",FUN_B4,MAT_ALPHA6,MAT_EPSF2,MAT_EXP1,MAT_EXP2);
    COMMENT("#  Nfunc Jstrain");
    CARD("%8d%8d",NFUNC,Jstrain);
    COMMENT("#        E-final      Epsi-final          Lambda            VISC             Tol");
    CARD("%16lg%16lg%16lg%16lg%16lg",MAT_Efinal,MAT_Epsfinal,MAT_Lamda,MAT_MaxVisc,MAT_Tol);
    if(NFUNC > 5){
        ASSIGN(NFUNC, 5);
    }
    if(NFUNC > 0 && NFUNC <= 5 ) 
    {
        COMMENT("# Scale factors");
        CELL_LIST(NFUNC,"%16lg",Fscale_i);
        COMMENT("# Strain rates");
        CELL_LIST(NFUNC,"%16lg",Epsilon_i);
        COMMENT("# Loading functions");
        CELL_LIST(NFUNC,"%8d",Funct_Id_Load);
    } else {
        COMMENT("# Scale factors");
        BLANK;
        COMMENT("# Strain rates");
        BLANK;
        COMMENT("# Loading functions");
        BLANK;
    }
    COMMENT("# Card 11 : Blank Line");
    BLANK;
}
