//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- therm.cfg ---
//		//rwall
//		 
ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES
    basenode                                        = VALUE(NODE, "X Y Z coordinate of M");
    x                                               = VALUE(FLOAT, "X coordinate of M");
    y                                               = VALUE(FLOAT, "Y coordinate of M");
    z                                               = VALUE(FLOAT, "Z coordinate of M");
    normal                                          = VALUE(NODE, "");
    Node1                                           = VALUE(NODE, "Node identifier (moving rigid wall)");
    slidingflag                                     = VALUE(INT,"Sliding flag");
    NodeSet_ID                                      = VALUE(SETS,"Node group defining secondary nodes to be added to the rigid wall")       { SUBTYPES = (/SETS/GRNOD); }
    excludeNodeSet_ID                               = VALUE(SETS,"Node group defining secondary nodes to be deleted from the rigid wall")   { SUBTYPES = (/SETS/GRNOD); }
    offset                                          = VALUE(FLOAT, "Distance for secondary search");
    fric                                            = VALUE(FLOAT,"Friction");
    Diameter                                        = VALUE(FLOAT, "Diameter of the sphere");
    Filteringfactor                                 = VALUE(FLOAT, "Filtering factor");
    Filteringflag                                   = VALUE(INT, "Filtering flag");
    Mass                                            = VALUE(FLOAT, "Mass of the rigid wal");
    XH                                              = VALUE(FLOAT,"X coordinate of M1");
    YH                                              = VALUE(FLOAT,"Y coordinate of M1");
    ZH                                              = VALUE(FLOAT,"Z coordinate of M1");
    Motiontype                                      = VALUE(INT,"Moving Option");
    motionx                                         = VALUE(FLOAT, "Initial velocity in X direction");
    motiony                                         = VALUE(FLOAT, "Initial velocity in Y direction");
    motionz                                         = VALUE(FLOAT, "Initial velocity in Z direction");
    cornernode1                                     = VALUE(FLOAT, "X Y Z coordinate of M1");
    cnode1_x                                        = VALUE(FLOAT,"X coordinate of M1");
    cnode1_y                                        = VALUE(FLOAT,"Y coordinate of M1");
    cnode1_z                                        = VALUE(FLOAT,"Z coordinate of M1");
    cornernode2                                     = VALUE(FLOAT, "X Y Z coordinate of M2");
    cnode2_x                                        = VALUE(FLOAT,"X coordinate of M2");
    cnode2_y                                        = VALUE(FLOAT,"Y coordinate of M2");
    cnode2_z                                        = VALUE(FLOAT,"Z coordinate of M2");
    fct_IDt                                         = VALUE(CURVE, "Wall temperature function");
    Fscale_T                                        = VALUE(FLOAT, "Wall temperature scale factor");
    Thermalresistance                               = VALUE(FLOAT, "Thermal resistance");

    // HM INTERNAL
    KEYWORD_STR                                     = VALUE(STRING, "Solver Keyword");
    TITLE                                           = VALUE(STRING,"Rigid wall title");
    geometrytype                                    = VALUE(INT, "Select a Geometry Type");
    catengineeringdata                              = VALUE(INT, "");
    catsupport                                      = VALUE(INT, "");
    ThermalOption                                   = VALUE(INT, "Thermal Option");
    _opt                                            = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                                     = 9000;
    _opt                                            = -1;
}

DEFAULTS(COMMON)
{
    Filteringfactor                                 = 0.0;
    Filteringflag                                   = 0;
}

GUI(COMMON)
{
    //ASSIGN(KEYWORD_STR, "/RWALL/THERM/");
    // // mandatory:
    // // RADIO(geometrytype)
    // // {
    // //     ADD(1, "Infinite Plane");
    // //     ADD(5, "Cylinder");
    // //     ADD(6, "Sphere");
    // //     ADD(7, "Parallelogram");
    // // }
    // // optional:
    
    // SEPARATOR(catengineeringdata, "catengineeringdata");

    // if (Motiontype == 0)
    // {
    //     DATA(basenode);
    // }
    // else if (Motiontype == 1)
    // {
    //     DATA(Node1, "node_ID");
    // }
    // DATA(normal, "normal");

    // SEPARATOR();

    // SEPARATOR(catsupport, "catsupport");
    // SEPARATOR();

    // RADIO(slidingflag, "Slide")
    // {
    //     ADD(0, "0: Sliding");
    //     ADD(1, "1: Tied");
    //     ADD(2, "2: Sliding with friction");
    // }
    // DATA(NodeSet_ID, "grnd_ID1");
    // DATA(excludeNodeSet_ID, "grnd_ID2");
    // SCALAR(offset, "fric")                              { DIMENSION="l"; }    

    // if (slidingflag == 2)
    // {
    //     SCALAR(fric)                                    { DIMENSION="DIMENSIONLESS"; }
    // }
    // if (slidingflag ==2 && ThermalOption == 0 && Filteringflag > 0)
    // {
    //     SCALAR(Filteringfactor)                         { DIMENSION="f"; }
    // }
    // RADIO(Filteringflag, "Filteringflag")
    // {
    //     ADD(0, "0: No filtering");
    //     ADD(1, "1: Coeff. defined by user");
    //     ADD(2, "2: Coeff. of 3dB for user defined freq.");
    //     ADD(2, "2: Coeff. of 3dB for user time step defined freq.");
    // }
    // FLAG(Motiontype, "Motiontype");
    // if (Motiontype == 1)
    // {
    //     SCALAR(Mass)                                    { DIMENSION="m" }
    //     SCALAR(motionx)                                 { DIMENSION="velocity"; }
    //     SCALAR(motiony)                                 { DIMENSION="velocity"; }
    //     SCALAR(motionz)                                 { DIMENSION="velocity"; }
    // }
    // else if (Motiontype == 0)
    // {

    // }

}

FORMAT(radioss90) 
{
    HEADER("/RWALL/THERM/%s/%d", _opt, _ID_);
    CARD("%-100s", TITLE);

    CARD("%10d%10d%10d%10d",Node1,slidingflag,NodeSet_ID,excludeNodeSet_ID);
    CARD("%20lg%20lg%20lg",offset,fric,Diameter);

    if (Node1 == NONE)
    {
        CARD("%20lg%20lg%20lg",x,y,z);
    }
    else
    {
        CARD("%20lg%20lg%20lg%20lg",Mass,motionx,motiony,motionz);
    }
    
    if (_opt == "PARAL")
    {
        CARD("%20lg%20lg%20lg",cnode1_x,cnode1_y,cnode1_z);
    }
    else if (_opt == "CYL")
    {
        CARD("%20lg%20lg%20lg",XH,YH,ZH);
    }

    if (Node1 != NONE)
    {
        CARD("%100s", _BLANK_);
    }
    CARD("%10d%10s%20lg%20lg",fct_IDt,_BLANK_,Fscale_T,Thermalresistance);
}

FORMAT(radioss51) 
{
    HEADER("/RWALL/THERM/%s/%d", _opt, _ID_);
    CARD("%-100s", TITLE);

    CARD("%10d%10d%10d%10d",Node1,slidingflag,NodeSet_ID,excludeNodeSet_ID);
    CARD("%20lg%20lg%20lg",offset,fric,Diameter);
 
    if (Node1 != NONE)
    {
        CARD("%20lg%20lg%20lg",x,y,z);
    }
    else
    {
        CARD("%20lg%20lg%20lg%20lg",Mass,motionx,motiony,motionz);
    }
    
    if (_opt == "PARAL")
    {
        CARD("%20lg%20lg%20lg",cnode1_x,cnode1_y,cnode1_z);
    }
    else if (_opt == "CYL")
    {
        CARD("%20lg%20lg%20lg",XH,YH,ZH);
    }

    CARD("%10d%10s%20lg%20lg",fct_IDt,_BLANK_,Fscale_T,Thermalresistance);
}