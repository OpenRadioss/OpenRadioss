//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// /BOX/CYLIN
// 

ATTRIBUTES(COMMON) 
{
  // INPUT ATTRIBUTES
  catendineeringdata            = VALUE(INT, "");
  preservenodes                 = VALUE(INT, "");
  config                        = VALUE(INT, "");
  cylinder_base_point           = VALUE(NODE,"");
  cylinder_base_x               = VALUE(FLOAT, "X coordinate of point P1");
  cylinder_base_y               = VALUE(FLOAT, "Y coordinate of point P1");
  cylinder_base_z               = VALUE(FLOAT, "Z coordinate of point P1");
  cylinder_direction_point      = VALUE(NODE,"");
  cylinder_direction_x          = VALUE(FLOAT, "X coordinate of point P2");
  cylinder_direction_y          = VALUE(FLOAT, "Y coordinate of point P2");
  cylinder_direction_z          = VALUE(FLOAT, "Z coordinate of point P2");
  cylinder_base_node            = VALUE(NODE, "Node identifier");
  cylinder_direction_node       = VALUE(NODE, "Node identifier");
  cylinder_diameter             = VALUE(FLOAT, "Diameter of cylinder");
  cylinder_height               = VALUE(FLOAT, "");
  cylinder_axis                 = VALUE(FLOAT, "");

  // HM INTERNAL
  KEYWORD_STR                   = VALUE(STRING, "Solver Keyword");
  TITLE                         = VALUE(STRING, "Box title");
  IOFLAG                        = VALUE(INT, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
  KEYWORD_STR                   = 9000;
  IOFLAG                        = -1;
}


GUI(COMMON)
{
  ASSIGN(KEYWORD_STR, "/BOX/CYLIN");
  optional:
  SEPARATOR("Engineering data");
  FLAG(preservenodes);
  if (preservenodes == 0)
  {
    DATA(cylinder_base_point);
    DATA(cylinder_direction_point);

  }
  else if (preservenodes == 1)
  {
    DATA(cylinder_base_node);
    DATA(cylinder_direction_node);
  }
  SCALAR(cylinder_base_x)      { DIMENSION="l"; }
  SCALAR(cylinder_base_y)      { DIMENSION="l"; }
  SCALAR(cylinder_base_z)      { DIMENSION="l"; }
  SCALAR(cylinder_direction_x) { DIMENSION="l"; }
  SCALAR(cylinder_direction_y) { DIMENSION="l"; }
  SCALAR(cylinder_direction_z) { DIMENSION="l"; }
  SCALAR(cylinder_diameter)    { DIMENSION="l"; }
  SCALAR(cylinder_height)      { DIMENSION="l"; }
  SCALAR(cylinder_axis)        { DIMENSION="l"; }
  SEPARATOR();
}

// File format
FORMAT(radioss110)
{
  HEADER("/BOX/CYLIN/%d",_ID_);
  CARD("%-100s", TITLE);

  ASSIGN(IOFLAG,0,EXPORT);
  ASSIGN(IOFLAG,1,IMPORT);

  if (IOFLAG == 0 && preservenodes == 1)
  {
    COMMENT("#   Base_N     Dir_N                      Diameter");
    CARD("%10d%10d%10s%20lg", cylinder_base_node,cylinder_direction_node,_BLANK_,cylinder_diameter);
    

    COMMENT("#                Xp1                 Yp1                 Zp1");
    CARD("%20lg%20lg%20lg",cylinder_base_x,cylinder_base_y,cylinder_base_z);

    COMMENT("#                Xp2                 Yp2                 Zp2");
    CARD("%20lg%20lg%20lg",cylinder_direction_x,cylinder_direction_y,cylinder_direction_z);
  }
  else if ( IOFLAG == 0 && preservenodes == 0)
  {

    COMMENT("#   Base_N     Dir_N                      Diameter");
    CARD("%10s%10s%10s%20lg", _BLANK_,_BLANK_,_BLANK_,cylinder_diameter);

    COMMENT("#                Xp1                 Yp1                 Zp1");
    CARD("%20lg%20lg%20lg",cylinder_base_x,cylinder_base_y,cylinder_base_z);

    COMMENT("#                Xp2                 Yp2                 Zp2");
    CARD("%20lg%20lg%20lg",cylinder_direction_x,cylinder_direction_y,cylinder_direction_z);
  }
  else if (IOFLAG == 1)
  {
    CARD("%10d%10d%10s%20lg", cylinder_base_node,cylinder_direction_node,_BLANK_,cylinder_diameter);
    if(cylinder_base_node == NONE && cylinder_direction_node == NONE)
    {
      ASSIGN(preservenodes,0,IMPORT);
    } 
    else 
    {
      ASSIGN(preservenodes,1,IMPORT);
    }
    CARD("%20lg%20lg%20lg",cylinder_base_x,cylinder_base_y,cylinder_base_z);
    CARD("%20lg%20lg%20lg",cylinder_direction_x,cylinder_direction_y,cylinder_direction_z);
  }
}
