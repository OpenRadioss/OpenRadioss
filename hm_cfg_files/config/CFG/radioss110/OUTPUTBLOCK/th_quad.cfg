//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// /TH/QUAD/
//

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES
    Number_Of_Variables                     = SIZE("Number Variables saved for TH");
    VAR                                     = ARRAY[Number_Of_Variables](STRING, "Variables saved for TH");

    idsmax                                  = SIZE("Number of ELEMENTS");
    ids                                     = ARRAY[idsmax](ELEMS, "Identifiers of the objects to be saved")  { SUBTYPES = (/ELEMS/QUAD ) ; }
    NAME_ARRAY                              = ARRAY[idsmax](STRING, "Name of the objects to be saved");

    // HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");

    TITLE                                   = VALUE(STRING, "TH group name");
    TH_OPTION           = VALUE(INT, "TH group name");
// ----- CFG Local attribute
    IO_FLAG             = VALUE(INT, "Import/Export flag");
    PREFIX_STR          = VALUE(STRING, "prefix Keyword");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES
    VAR                                     = 7044;
    NAME_ARRAY                              = 7043;

    Number_Of_Variables                     = 7045;

    // HM INTERNAL
    KEYWORD_STR                             = 9000;

    TITLE                                   = -1;
    TH_OPTION           = 4674;
    IO_FLAG             =-1;
    PREFIX_STR          =-1;
}

DEFAULTS(COMMON)
{
    VAR                                     = "DEF";
    Number_Of_Variables                     = 1;
}

GUI(COMMON) 
{
    RADIO(TH_OPTION) 
    {
     /*   ADD(0,"Default TH");*/
        ADD(1,"/TH");
        ADD(2,"/ATH");
        ADD(3,"/BTH");
        ADD(4,"/CTH");
        ADD(5,"/DTH");
        ADD(6,"/ETH");
        ADD(7,"/FTH");
        ADD(8,"/GTH");
        ADD(9,"/HTH");
        ADD(10,"/ITH");
    }
    if(TH_OPTION==0 || TH_OPTION == 1)
    {
        ASSIGN(KEYWORD_STR, "/TH/QUAD/"); 
    }
    else if( TH_OPTION == 2)
    {
        ASSIGN(KEYWORD_STR, "/ATH/QUAD/"); 
    }
    else if( TH_OPTION == 3)
    {
        ASSIGN(KEYWORD_STR, "/BTH/QUAD/"); 
    }
    else if( TH_OPTION == 4)
    {
        ASSIGN(KEYWORD_STR, "/CTH/QUAD/"); 
    }
    else if( TH_OPTION == 5)
    {
        ASSIGN(KEYWORD_STR, "/DTH/QUAD/"); 
    }
    else if( TH_OPTION == 6)
    {
        ASSIGN(KEYWORD_STR, "/ETH/QUAD/"); 
    }
    else if( TH_OPTION == 7)
    {
        ASSIGN(KEYWORD_STR, "/FTH/QUAD/"); 
    }
    else if( TH_OPTION == 8)
    {
        ASSIGN(KEYWORD_STR, "/GTH/QUAD/"); 
    }
    else if( TH_OPTION == 9)
    {
        ASSIGN(KEYWORD_STR, "/HTH/QUAD/"); 
    }
    else if( TH_OPTION == 10)
    {
        ASSIGN(KEYWORD_STR, "/ITH/QUAD/"); 
    }
    SIZE(Number_Of_Variables);
    ARRAY(Number_Of_Variables, "NUM_VARIABLES")
    {
       RADIO(VAR)
       {
         ADD("DEF",    "Default");
         ADD("STRESS", "Stress Matrix in Global Frame (SX, SY, SZ, SXY, SYZ, SXZ)");
         ADD("LOCSTRS","Component of the Stress Matrix in the local frame (LSX, LSY, LSZ, LSXY, LSYZ, LSXZ)");
         ADD("STRAIN","Strain component in the global system (EPSXX, EPSYY, EPSZZ, EPSXY, EPSZX, EPSYZ)");
         ADD("LOCSTRN","Strain component in the local system (LEPSX, LEPSY, LEPSZ, LEPSXY, LEPSZX, LEPSYZ)");
         ADD("OFF",    "Element flag for deactivation");
         ADD("SX",     "Component of the Stress Matrix in the global frame");
         ADD("SY",     "Component of the Stress Matrix in the global frame");
         ADD("SZ",     "Component of the Stress Matrix in the global frame");
         ADD("SXY",    "Component of the Stress Matrix in the global frame");
         ADD("SYZ",    "Component of the Stress Matrix in the global frame");
         ADD("SXZ",    "Component of the Stress Matrix in the global frame");
         ADD("IE",     "Internal Energy per volume unit");
         ADD("DENS",   "Density");
         ADD("QVIS",   "Artificial viscosity (pseudo-viscosity)");
         ADD("BULK",   "Bulk Viscosity");
         ADD("VOL",    "Volume");
         ADD("PLAS",   "Plastic Strain");
         ADD("TEMP",   "Temperature");
         ADD("PLSR",   "Strain Rate");
         ADD("DAM1",   "Tensile Damage in direction 1");
         ADD("DAM2",   "Tensile Damage in direction 2");
         ADD("DAM3",   "Tensile Damage in direction 3");
         ADD("DAM4",   "Tensile Damage in direction 1 Tsai-Wu yield function");
         ADD("DAM5",   "Tensile damage in direction 23");
         ADD("DAMA",   "Sum of damages");
         ADD("SA1",    "Stress reinforced in direction 1");
         ADD("SA2",    "Stress reinforced in direction 2");
         ADD("SA3",    "Stress reinforced in direction 3");
         ADD("CR",     "Volume of opened cracks");
         ADD("CAP",    "Cap Parameter");
         ADD("K0",     "Plastic Parameter");
         ADD("RK",     "Turbulent Energy");
         ADD("TD",     "Turbulent Dissipation");
         ADD("EFIB",   "Fiber Strain");
         ADD("ISTA",   "Phase State");
         ADD("VPLA",   "Equivalent volumetric Plastic Strain");
         ADD("BFRAC",  "Burn Fraction");
         ADD("WPLA",   "Plastic Work");
         ADD("SFIB",   "Stress in fibers");
         ADD("AUX1",   "User variable");
         ADD("AUX2",   "User variable");
         ADD("AUX3",   "User variable");
         ADD("LSX",    "Component of the Stress Matrix in the local frame");
         ADD("LSY",    "Component of the Stress Matrix in the local frame");
         ADD("LSZ",    "Component of the Stress Matrix in the local frame");
         ADD("LSXY",   "Component of the Stress Matrix in the local frame");
         ADD("LSXZ",   "Component of the Stress Matrix in the local frame");
         ADD("LSYZ",   "Component of the Stress Matrix in the local frame");
         ADD("EPSXX",  "Strain component in the global system");
         ADD("EPSYY",  "Strain component in the global system");
         ADD("EPSZZ",  "Strain component in the global system");
         ADD("EPSXY",  "Strain component in the global system");
         ADD("EPSZX",  "Strain component in the global system");
         ADD("EPSYZ",  "Strain component in the global system");
         ADD("LEPSX",  "Strain component in the local system");
         ADD("LEPSY",  "Strain component in the local system");
         ADD("LEPSZ",  "Strain component in the local system");
         ADD("LEPSXY", "Strain component in the local system");
         ADD("LEPSZX", "Strain component in the local system");
         ADD("LEPSYZ", "Strain component in the local system");
         ADD("EPSX111","Strain component per integration point in the global system");
         ADD("EPSY111","Strain component per integration point in the global system");
         ADD("EPSZ111","Strain component per integration point in the global system");
         ADD("EPSXY111","Strain component per integration point in the global system");
         ADD("EPSZX111","Strain component per integration point in the global system");
         ADD("EPSYZ111","Strain component per integration point in the global system");
         ADD("EPSX121","Strain component per integration point in the global system");
         ADD("EPSY121","Strain component per integration point in the global system");
         ADD("EPSZ121","Strain component per integration point in the global system");
         ADD("EPSXY121","Strain component per integration point in the global system");
         ADD("EPSZX121","Strain component per integration point in the global system");
         ADD("EPSYZ121","Strain component per integration point in the global system");
         ADD("EPSX221","Strain component per integration point in the global system");
         ADD("EPSY221","Strain component per integration point in the global system");
         ADD("EPSZ221","Strain component per integration point in the global system");
         ADD("EPSXY221","Strain component per integration point in the global system");
         ADD("EPSZX221","Strain component per integration point in the global system");
         ADD("EPSYZ221","Strain component per integration point in the global system");
      }
    }

    SIZE(idsmax);
    ARRAY(idsmax, "Elements")
    {
        DATA(ids,"Element ID");
        SCALAR(NAME_ARRAY,"Element Name")   { DIMENSION="DIMENSIONLESS"; }
    }
}

// File format
FORMAT(radioss41)
{
    HEADER("/TH/QUAD/%d/%s", _ID_, TITLE);

    // Card 1
    COMMENT("#    var     var     var     var     var     var     var     var     var     var");
    FREE_CELL_LIST(Number_Of_Variables,"%-8s", VAR, 80);

    // Card 2
    COMMENT("#   ELid        ELname");
    FREE_CARD_LIST(idsmax)
    {
        CARD("%8d%8s%-40s", ids, _BLANK_, NAME_ARRAY);
    }
}

FORMAT(radioss51)
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
 
    
    if(IO_FLAG == 1 )
    {
        HEADER("/%-s/QUAD/%d",PREFIX_STR, _ID_);
        if(PREFIX_STR=="TH")
        {
             ASSIGN(TH_OPTION,1, IMPORT);
        }
        else if(PREFIX_STR=="ATH")
        {
            ASSIGN(TH_OPTION, 2, IMPORT);
        }
        else if(PREFIX_STR=="BTH")
        {
            ASSIGN(TH_OPTION, 3, IMPORT);
        }
        else if(PREFIX_STR=="CTH")
        {
            ASSIGN(TH_OPTION, 4, IMPORT);
        }
        else if(PREFIX_STR=="DTH")
        {
            ASSIGN(TH_OPTION, 5, IMPORT);
        }
        else if(PREFIX_STR=="ETH")
        {
            ASSIGN(TH_OPTION, 6, IMPORT);
        }
         else if(PREFIX_STR=="FTH")
        {
            ASSIGN(TH_OPTION, 7, IMPORT);
        }
        else if(PREFIX_STR=="GTH")
        {
            ASSIGN(TH_OPTION, 8, IMPORT);
        }
        else if(PREFIX_STR=="HTH")
        {
            ASSIGN(TH_OPTION, 9, IMPORT);
        }                
        else if(PREFIX_STR=="ITH")
        {
            ASSIGN(TH_OPTION, 10, IMPORT);
        }
        
    }
    if(IO_FLAG == 2 )
    {
        if(TH_OPTION==0 || TH_OPTION == 1)
        {
            HEADER("/TH/QUAD/%d", _ID_); 
        }
        else if( TH_OPTION == 2)
        {
            HEADER("/ATH/QUAD/%d", _ID_); 
        }
        else if( TH_OPTION == 3)
        {
            HEADER("/BTH/QUAD/%d", _ID_); 
        }
        else if( TH_OPTION == 4)
        {
            HEADER("/CTH/QUAD/%d", _ID_); 
        }
        else if( TH_OPTION == 5)
        {
            HEADER("/DTH/QUAD/%d", _ID_); 
        }
        else if( TH_OPTION == 6)
        {
            HEADER("/ETH/QUAD/%d", _ID_); 
        }
        else if( TH_OPTION == 7)
        {
            HEADER("/FTH/QUAD/%d", _ID_); 
        }
        else if( TH_OPTION == 8)
        {
            HEADER("/GTH/QUAD/%d", _ID_); 
        }
        else if( TH_OPTION == 9)
        {
            HEADER("/HTH/QUAD/%d", _ID_); 
        }
        else if( TH_OPTION == 10)
        {
            HEADER("/ITH/QUAD/%d", _ID_); 
        }
    }

    CARD("%-100s", TITLE);

    // Card 1
    COMMENT("#   var_ID    var_ID    var_ID    var_ID    var_ID    var_ID    var_ID    var_ID    var_ID    var_ID");
    FREE_CELL_LIST(Number_Of_Variables,"%-10s", VAR, 100);

    // Card 2
    COMMENT("#     ELid          ELname");
    FREE_CARD_LIST(idsmax)
    {
        CARD("%10d%10s%-80s", ids, _BLANK_, NAME_ARRAY);
    }
}

FORMAT(radioss90)
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
 
    
    if(IO_FLAG == 1 )
    {
        HEADER("/%-s/QUAD/%d",PREFIX_STR, _ID_);
        if(PREFIX_STR=="TH")
        {
             ASSIGN(TH_OPTION,1, IMPORT);
        }
        else if(PREFIX_STR=="ATH")
        {
            ASSIGN(TH_OPTION, 2, IMPORT);
        }
        else if(PREFIX_STR=="BTH")
        {
            ASSIGN(TH_OPTION, 3, IMPORT);
        }
        else if(PREFIX_STR=="CTH")
        {
            ASSIGN(TH_OPTION, 4, IMPORT);
        }
        else if(PREFIX_STR=="DTH")
        {
            ASSIGN(TH_OPTION, 5, IMPORT);
        }
        else if(PREFIX_STR=="ETH")
        {
            ASSIGN(TH_OPTION, 6, IMPORT);
        }
         else if(PREFIX_STR=="FTH")
        {
            ASSIGN(TH_OPTION, 7, IMPORT);
        }
        else if(PREFIX_STR=="GTH")
        {
            ASSIGN(TH_OPTION, 8, IMPORT);
        }
        else if(PREFIX_STR=="HTH")
        {
            ASSIGN(TH_OPTION, 9, IMPORT);
        }                
        else if(PREFIX_STR=="ITH")
        {
            ASSIGN(TH_OPTION, 10, IMPORT);
        }
        
    }
    if(IO_FLAG == 2 )
    {
        if(TH_OPTION==0 || TH_OPTION == 1)
        {
            HEADER("/TH/QUAD/%d", _ID_); 
        }
        else if( TH_OPTION == 2)
        {
            HEADER("/ATH/QUAD/%d", _ID_); 
        }
        else if( TH_OPTION == 3)
        {
            HEADER("/BTH/QUAD/%d", _ID_); 
        }
        else if( TH_OPTION == 4)
        {
            HEADER("/CTH/QUAD/%d", _ID_); 
        }
        else if( TH_OPTION == 5)
        {
            HEADER("/DTH/QUAD/%d", _ID_); 
        }
        else if( TH_OPTION == 6)
        {
            HEADER("/ETH/QUAD/%d", _ID_); 
        }
        else if( TH_OPTION == 7)
        {
            HEADER("/FTH/QUAD/%d", _ID_); 
        }
        else if( TH_OPTION == 8)
        {
            HEADER("/GTH/QUAD/%d", _ID_); 
        }
        else if( TH_OPTION == 9)
        {
            HEADER("/HTH/QUAD/%d", _ID_); 
        }
        else if( TH_OPTION == 10)
        {
            HEADER("/ITH/QUAD/%d", _ID_); 
        }
    }
    CARD("%-100s", TITLE);

    // Card 1
    COMMENT("#   var_ID    var_ID    var_ID    var_ID    var_ID    var_ID    var_ID    var_ID    var_ID    var_ID");
    FREE_CELL_LIST(Number_Of_Variables,"%-10s", VAR, 100);

    // Card 2
    COMMENT("#  elem_ID          elem_name");
    FREE_CARD_LIST(idsmax)
    {
        CARD("%10d%10s%-50s", ids, _BLANK_, NAME_ARRAY);
    }
}
