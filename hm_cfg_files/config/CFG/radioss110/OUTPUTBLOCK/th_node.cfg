//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Time history (NODE) Setup File
// 

ATTRIBUTES(COMMON) 
{
    //INPUT ATTRIBUTES
    idsmax              = SIZE("Number of accelerometers");
    ids                 = ARRAY[idsmax](NODE, "Identifiers of the objects to be saved");
    NAME_ARRAY          = ARRAY[idsmax](STRING, "Name of the objects to be saved");
    SKEW_ARRAY          = ARRAY[idsmax](SYSTEM,"System");
    Number_Of_Variables = SIZE("Number Variables saved for TH");
    VAR                 = ARRAY[Number_Of_Variables](STRING, "Variables saved for TH");

    // HM INTERNAL
    KEYWORD_STR         = VALUE(STRING, "Solver Keyword");
    TITLE               = VALUE(STRING, "TH group name");
    TH_OPTION           = VALUE(INT, "TH group name");
// ----- CFG Local attribute
    IO_FLAG             = VALUE(INT, "Import/Export flag");
    PREFIX_STR          = VALUE(STRING, "prefix Keyword");
}//*defineattribute(NAME_ARRAY,7043,arrayofstring,none)

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR         = 9000;
    Number_Of_Variables = 7045;
    VAR                 = 7044;
    NAME_ARRAY          = 7043;
    SKEW_ARRAY          = 7042;
    TH_OPTION           = 4674;
    IO_FLAG             =-1;
    PREFIX_STR          =-1;
}

DEFAULTS(COMMON) 
{

}

GUI(COMMON) 
{
    RADIO(TH_OPTION) 
    {
     /*   ADD(0,"Default TH");*/
        ADD(1,"/TH");
        ADD(2,"/ATH");
        ADD(3,"/BTH");
        ADD(4,"/CTH");
        ADD(5,"/DTH");
        ADD(6,"/ETH");
        ADD(7,"/FTH");
        ADD(8,"/GTH");
        ADD(9,"/HTH");
        ADD(10,"/ITH");
    }
    if(TH_OPTION==0 || TH_OPTION == 1)
    {
        ASSIGN(KEYWORD_STR, "/TH/NODE/"); 
    }
    else if( TH_OPTION == 2)
    {
        ASSIGN(KEYWORD_STR, "/ATH/NODE/"); 
    }
    else if( TH_OPTION == 3)
    {
        ASSIGN(KEYWORD_STR, "/BTH/NODE/"); 
    }
    else if( TH_OPTION == 4)
    {
        ASSIGN(KEYWORD_STR, "/CTH/NODE/"); 
    }
    else if( TH_OPTION == 5)
    {
        ASSIGN(KEYWORD_STR, "/DTH/NODE/"); 
    }
    else if( TH_OPTION == 6)
    {
        ASSIGN(KEYWORD_STR, "/ETH/NODE/"); 
    }
    else if( TH_OPTION == 7)
    {
        ASSIGN(KEYWORD_STR, "/FTH/NODE/"); 
    }
    else if( TH_OPTION == 8)
    {
        ASSIGN(KEYWORD_STR, "/GTH/NODE/"); 
    }
    else if( TH_OPTION == 9)
    {
        ASSIGN(KEYWORD_STR, "/HTH/NODE/"); 
    }
    else if( TH_OPTION == 10)
    {
        ASSIGN(KEYWORD_STR, "/ITH/NODE/"); 
    }
    SIZE(Number_Of_Variables);
    ARRAY(Number_Of_Variables,"Variables") 
    {
        RADIO(VAR) 
        {
            ADD("DEF","DEF: Default");
            ADD("DX","DX: X displacement");
            ADD("DY","DY: Y displacement");
            ADD("DZ","DZ: Z displacement");
            ADD("VX","VX: X velocity");
            ADD("VY","VY: Y velocity");
            ADD("VZ","VZ: Z velocity");
            ADD("AX","AX: X acceleration");
            ADD("AY","AY: Y acceleration");
            ADD("AZ","AZ: Z acceleration");
            ADD("VRX","VRX: X rotational velocity");
            ADD("VRY","VRY: Y rotational velocity");
            ADD("VRZ","VRZ: Z rotational velocity");
            ADD("ARX","ARX: X rotational acceleration");
            ADD("ARY","ARY: Y rotational acceleration");
            ADD("ARZ","ARZ: Z rotational acceleration");
            ADD("TEMP","TEMP: Nodal temperature");
            ADD("REACX","REACX: X reaction force on node");
            ADD("REACY","REACY: Y reaction force on node");
            ADD("REACZ","REACZ: Z reaction force on node");
            ADD("REACXX","REACXX: XX reaction force on node");
            ADD("REACYY","REACYY: YY reaction force on node");
            ADD("REACZZ","REACZZ: ZZ reaction force on node");
            ADD("X","X: X coordinate");
            ADD("Y","Y: Y coordinate");
            ADD("Z","Z: Z coordinate");
            ADD("D","D: Displacement(DX DY DZ)");
            ADD("V","V: Translation Velocity(VX VY VZ)");
            ADD("A","A: Translation Acceleration(AX AY AZ)");
            ADD("VR","VR: Translation Velocity(VRX VRY VRZ)");
            ADD("AR","AR: Translation Acceleration(ARX ARY ARZ)");
            ADD("XYZ","XYZ: Coordinate(X Y Z)");
            ADD("DRX","DRX: X rotation");
            ADD("DRY","DRY: Y rotation");
            ADD("DRZ","DRZ: Z rotation");
            ADD("DX_iii","DX_iii: Interply iii relative displacement in X direction");
            ADD("DY_iii","DY_iii: Interply iii relative displacement in Y direction");
            ADD("DZ_iii","DZ_iii: Interply iii relative displacement in Z direction");
        }
    }
    SIZE(idsmax);
    ARRAY(idsmax,"Elements")
    {
        DATA(ids,"Element ID");
        DATA(SKEW_ARRAY,"Skew ID");
        SCALAR(NAME_ARRAY,"Element Name");
    }
}

// File format
FORMAT(radioss51)
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
 
    
    if(IO_FLAG == 1 )
    {
        HEADER("/%-s/NODE/%d",PREFIX_STR, _ID_);
        if(PREFIX_STR=="TH")
        {
             ASSIGN(TH_OPTION,1, IMPORT);
        }
        else if(PREFIX_STR=="ATH")
        {
            ASSIGN(TH_OPTION, 2, IMPORT);
        }
        else if(PREFIX_STR=="BTH")
        {
            ASSIGN(TH_OPTION, 3, IMPORT);
        }
        else if(PREFIX_STR=="CTH")
        {
            ASSIGN(TH_OPTION, 4, IMPORT);
        }
        else if(PREFIX_STR=="DTH")
        {
            ASSIGN(TH_OPTION, 5, IMPORT);
        }
        else if(PREFIX_STR=="ETH")
        {
            ASSIGN(TH_OPTION, 6, IMPORT);
        }
         else if(PREFIX_STR=="FTH")
        {
            ASSIGN(TH_OPTION, 7, IMPORT);
        }
        else if(PREFIX_STR=="GTH")
        {
            ASSIGN(TH_OPTION, 8, IMPORT);
        }
        else if(PREFIX_STR=="HTH")
        {
            ASSIGN(TH_OPTION, 9, IMPORT);
        }                
        else if(PREFIX_STR=="ITH")
        {
            ASSIGN(TH_OPTION, 10, IMPORT);
        }
        
    }
    if(IO_FLAG == 2 )
    {
        if(TH_OPTION==0 || TH_OPTION == 1)
        {
            HEADER("/TH/NODE/%d", _ID_); 
        }
        else if( TH_OPTION == 2)
        {
            HEADER("/ATH/NODE/%d", _ID_); 
        }
        else if( TH_OPTION == 3)
        {
            HEADER("/BTH/NODE/%d", _ID_); 
        }
        else if( TH_OPTION == 4)
        {
            HEADER("/CTH/NODE/%d", _ID_); 
        }
        else if( TH_OPTION == 5)
        {
            HEADER("/DTH/NODE/%d", _ID_); 
        }
        else if( TH_OPTION == 6)
        {
            HEADER("/ETH/NODE/%d", _ID_); 
        }
        else if( TH_OPTION == 7)
        {
            HEADER("/FTH/NODE/%d", _ID_); 
        }
        else if( TH_OPTION == 8)
        {
            HEADER("/GTH/NODE/%d", _ID_); 
        }
        else if( TH_OPTION == 9)
        {
            HEADER("/HTH/NODE/%d", _ID_); 
        }
        else if( TH_OPTION == 10)
        {
            HEADER("/ITH/NODE/%d", _ID_); 
        }
    }
    CARD("%-100s", TITLE);
    // ASSIGN(Number_Of_Variables,8); // Dummy value, pending an improvement of the FREE_CELL_LIST
    COMMENT("#      var       var       var       var       var       var       var       var       var       var");
    FREE_CELL_LIST(Number_Of_Variables,"%-10s",VAR,100);
    COMMENT("#  elem_ID   skew_ID elem_name");
    FREE_CARD_LIST(idsmax)
    {
        CARD("%10d%10d%-80s",ids,SKEW_ARRAY,NAME_ARRAY);
    }
}

FORMAT(radioss41) 
{
    HEADER("/TH/NODE/%d/%s",_ID_,TITLE);
    // ASSIGN(Number_Of_Variables,8); // Dummy value, pending an improvement of the FREE_CELL_LIST
    COMMENT("#    var     var     var     var     var     var     var     var     var     var");
    FREE_CELL_LIST(Number_Of_Variables,"%-8s",VAR,80);
    COMMENT("#elem_ID elem_name");
    FREE_CARD_LIST(idsmax)
    {
        CARD("%8d%8d%-40s",ids,SKEW_ARRAY,NAME_ARRAY);
    }
}