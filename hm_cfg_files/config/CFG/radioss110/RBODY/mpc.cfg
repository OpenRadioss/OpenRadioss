//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// /MPC
//

ATTRIBUTES(COMMON)
{
    // INPUT ATTRIBUTES

    // Cards
    number_of_nodes                           = SIZE("Number of additional nodes");
    node_ID                                   = ARRAY[number_of_nodes](NODE, "Node identifier");
    Idof                                      = ARRAY[number_of_nodes](INT, "Degree of freedom (velocity direction)");
    skew_ID                                   = ARRAY[number_of_nodes](SYSTEM, "Local skew (for each DOF)");
    alpha                                     = ARRAY[number_of_nodes](FLOAT, "Scale coefficient");

    //HM INTERNAL
    KEYWORD_STR                               = VALUE(STRING, "Solver Keyword");

    TITLE                                     = VALUE(STRING, "Multi-point constraint title");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    //INPUT ATTRIBUTES

    // Cards
    number_of_nodes                           = -1;
    node_ID                                   = -1;
    Idof                                      = -1;
    skew_ID                                   = -1;
    alpha                                     = -1;

    //HM INTERNAL
    KEYWORD_STR                               = 9000;

    TITLE                                     = -1;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "/MPC");

    // Title Card
    SCALAR(TITLE, "MPC_title")                { DIMENSION = "DIMENSIONLESS"; }

    // Cards
    SIZE(number_of_nodes);
    ARRAY(number_of_nodes, "No.of nodes")
    {
        DATA(node_ID, "node_ID");
        SCALAR(Idof, "Idof")                  { DIMENSION = "DIMENSIONLESS"; }
        DATA(skew_ID, "skew_ID");
        SCALAR(alpha, "alpha")                { DIMENSION = "DIMENSIONLESS"; }
    }
}

// File format
FORMAT(radioss44)
{
    HEADER("/MPC/%-8d/%-40s", _ID_, TITLE);

    // Card
    COMMENT("# nod_id    idof     isk           alpha");
    FREE_CARD_LIST(number_of_nodes)
    {
        CARD("%8d%8d%8d%16lg", node_ID, Idof, skew_ID, alpha);
    }
}

FORMAT(radioss51)
{
    HEADER("/MPC/%-d", _ID_);

    // Title Card
    COMMENT("#MPC_title                                                                                          ");
    CARD("%-100s", TITLE);

    // Cards
    COMMENT("#   nod_id      idof       isk               alpha");
    FREE_CARD_LIST(number_of_nodes)
    {
        CARD("%10d%10d%10d%20lg", node_ID, Idof, skew_ID, alpha);
    }
}

FORMAT(radioss90)
{
    HEADER("/MPC/%-d", _ID_);

    // Title Card
    COMMENT("#MPC_title                                                                                          ");
    CARD("%-100s", TITLE);

    // Cards
    COMMENT("#  node_ID      Idof   skew_ID               alpha");
    FREE_CARD_LIST(number_of_nodes)
    {
        CARD("%10d%10d%10d%20lg", node_ID, Idof, skew_ID, alpha);
    }
}

