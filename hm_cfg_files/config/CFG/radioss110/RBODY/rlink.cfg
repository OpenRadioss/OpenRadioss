//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- rlink.cfg ---

ATTRIBUTES(COMMON)
{
    // INPUT ATTRIBUTES

    //Card 1
    NAME                                        = VALUE(STRING, "Rigid link title", "TITLE");

    //Card 2
    independentdof                              = VALUE(INT,    "Codes for translation and rotation", "Trarot");
    SKEW_CSID                                   = VALUE(SYSTEM, "Frame identifier for Ipol=0 or frame identifier for Ipol=1", "Skew_ID frame_ID");
    dependentnodeset                            = VALUE(SETS,   "Secondary nodes group identifier", "grnod_ID")  { SUBTYPES = (/SETS/GRNOD); }
    RLINK_IPOL                                  = VALUE(INT,    "Polar rigid link flag", "Ipol");

    // HM INTERNAL
    KEYWORD_STR                                 = VALUE(SETS,   "Solver Keyword");

    //Trarot
    Tx                                          = VALUE(INT,    "Code for translation along X-axis (Ipol=0) or in radial direction (Ipol=1)");
    Ty                                          = VALUE(INT,    "Code for translation along Y-axis (Ipol=0) or in axial direction (Ipol=1)");
    Tz                                          = VALUE(INT,    "Code for translation along Z-axis (Ipol=0) or in tangential direction (Ipol=1)");
    OmegaX                                      = VALUE(INT,    "Code for rotation around X-axis (Ipol=0) or in radial direction (Ipol=1)");
    OmegaY                                      = VALUE(INT,    "Code for rotation around Y-axis (Ipol=0) or in axial direction (Ipol=1)");
    OmegaZ                                      = VALUE(INT,    "Code for rotation around Z-axis (Ipol=0) or in tangential direction (Ipol=1)");

    dummy_val                                   = VALUE(INT,    "dummy_val");
    value                                       = VALUE(INT,    "value");
    mod                                         = VALUE(INT,    "mod");
    pos                                         = VALUE(INT,    "pos");
    IOFLAG                                      = VALUE(INT,    "IOFLAG");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES

    //Card 1
    NAME                                        = 8057;

    //Card 2
    SKEW_CSID                                   = 412;
    RLINK_IPOL                                  = 4150;

    // HM INTERNAL
    KEYWORD_STR                                 = 9000;

    //Trarot
    Tx                                          = -1;
    Ty                                          = -1;
    Tz                                          = -1;
    OmegaX                                      = -1;
    OmegaY                                      = -1;
    OmegaZ                                      = -1;

    dummy_val                                   = -1;
    value                                       = -1;
    mod                                         = -1;
    pos                                         = -1;
    IOFLAG                                      = -1;
}

DEFAULTS(COMMON)
{
    RLINK_IPOL                                  = 0;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "/RLINK/");

    //Card 1
    SCALAR(NAME, "rlink_title")                 { DIMENSION = "DIMENSIONLESS" ; }

    //Card 2
    SCALAR(independentdof, "Trarot")            { DIMENSION = "DIMENSIONLESS" ; }
    DATA(SKEW_CSID, "Skew_ID frame_ID");
    DATA(dependentnodeset, "grnod_ID");
    RADIO(RLINK_IPOL, "Ipol")
    {
        ADD(0, "0: (Default) DOF determined in a Cartesian coordinate system");
        ADD(1, "1: DOF determined in a polar coordinate system");
    }
}

//File format
FORMAT(radioss41)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    HEADER("/RLINK/%-8d/%-40s", _ID_, NAME);

    if(IOFLAG == 0)
    {
        ASSIGN(dummy_val, independentdof/10, EXPORT);
        ASSIGN(mod, independentdof - dummy_val*10, EXPORT);
        ASSIGN(value, dummy_value, EXPORT);

        if (mod == 6)
        {
            ASSIGN(OmegaZ, 1, EXPORT);
        }
        else if (mod == 5)
        {
            ASSIGN(OmegaY, 1, EXPORT);
        }
        else if (mod == 4)
        {
            ASSIGN(OmegaX, 1, EXPORT);
        }
        else if (mod == 3)
        {
            ASSIGN(Tz, 1, EXPORT);
        }
        else if (mod == 2)
        {
            ASSIGN(Ty, 1, EXPORT);
        }
        else if (mod == 1)
        {
            ASSIGN(Tx, 1, EXPORT);
        }

        if (value > 0)
        {
            ASSIGN(dummy_val, value/10, EXPORT);
            ASSIGN(mod, value - dummy_val*10, EXPORT);
            ASSIGN(value, dummy_value, EXPORT);

            if (mod == 5)
            {
                ASSIGN(OmegaY, 1, EXPORT);
            }
             else if (mod == 4)
            {
                ASSIGN(OmegaX, 1, EXPORT);
            }
             else if (mod == 3)
            {
                ASSIGN(Tz, 1, EXPORT);
            }
             else if (mod == 2)
            {
                ASSIGN(Ty, 1, EXPORT);
            }
             else if (mod == 1)
            {
                ASSIGN(Tx, 1, EXPORT);
            }

            if (value > 0)
            {
                ASSIGN(dummy_val, value/10, EXPORT);
                ASSIGN(mod, value - dummy_val*10, EXPORT);
                ASSIGN(value, dummy_value, EXPORT);

                if (mod == 4)
                {
                    ASSIGN(OmegaX, 1, EXPORT);
                }
                 else if (mod == 3)
                {
                    ASSIGN(Tz, 1, EXPORT);
                }
                 else if (mod == 2)
                {
                    ASSIGN(Ty, 1, EXPORT);
                }
                 else if (mod == 1)
                {
                    ASSIGN(Tx, 1, EXPORT);
                }

                if (value > 0)
                {
                    ASSIGN(dummy_val, value/10, EXPORT);
                    ASSIGN(mod, value - dummy_val*10, EXPORT);
                    ASSIGN(value, dummy_value, EXPORT);

                    if (mod == 3)
                    {
                        ASSIGN(Tz, 1, EXPORT);
                    }
                     else if (mod == 2)
                    {
                        ASSIGN(Ty, 1, EXPORT);
                    }
                     else if (mod == 1)
                    {
                        ASSIGN(Tx, 1, EXPORT);
                    }

                    if (value > 0)
                    {
                        ASSIGN(dummy_val, value/10, EXPORT);
                        ASSIGN(mod, value - dummy_val*10, EXPORT);
                        ASSIGN(value, dummy_value, EXPORT);

                        if (mod == 2)
                        {
                            ASSIGN(Ty, 1, EXPORT);
                        }
                         else if (mod == 1)
                        {
                            ASSIGN(Tx, 1, EXPORT);
                        }

                        if (value > 0)
                        {
                            ASSIGN(Tx, 1, EXPORT);
                        }
                    }
                }
            }
        }

        //Card 1
        COMMENT("# trarot   nskew gr_node");
        CARD(" %1d%1d%1d %1d%1d%1d%8d%8d", Tx, Ty, Tz, OmegaX, OmegaY, OmegaZ, SKEW_CSID, dependentnodeset);
    }
    else //IMPORT
    {
        ASSIGN(value, 0, IMPORT);
        ASSIGN(pos, 1, IMPORT);

        //Card 1
        CARD(" %1d%1d%1d %1d%1d%1d%8d%8d", Tx, Ty, Tz, OmegaX, OmegaY, OmegaZ, SKEW_CSID, dependentnodeset);

        if(OmegaZ == 1)
        {
            ASSIGN(value, 6 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(OmegaY == 1)
        {
            ASSIGN(value, 5 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(OmegaX == 1)
        {
            ASSIGN(value, 4 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(Tz == 1)
        {
            ASSIGN(value, 3 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(Ty == 1)
        {
            ASSIGN(value, 2 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(Tx == 1)
        {
            ASSIGN(value, 1 * pos + value, IMPORT);
        }
        ASSIGN(independentdof, value, IMPORT);
    }
}

FORMAT(radioss44)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    HEADER("/RLINK/%-8d/%-40s", _ID_, NAME);

    if(IOFLAG == 0)
    {
        ASSIGN(dummy_val, independentdof/10, EXPORT);
        ASSIGN(mod, independentdof - dummy_val*10, EXPORT);
        ASSIGN(value, dummy_value, EXPORT);

        if (mod == 6)
        {
            ASSIGN(OmegaZ, 1, EXPORT);
        }
        else if (mod == 5)
        {
            ASSIGN(OmegaY, 1, EXPORT);
        }
        else if (mod == 4)
        {
            ASSIGN(OmegaX, 1, EXPORT);
        }
        else if (mod == 3)
        {
            ASSIGN(Tz, 1, EXPORT);
        }
        else if (mod == 2)
        {
            ASSIGN(Ty, 1, EXPORT);
        }
        else if (mod == 1)
        {
            ASSIGN(Tx, 1, EXPORT);
        }

        if (value > 0)
        {
            ASSIGN(dummy_val, value/10, EXPORT);
            ASSIGN(mod, value - dummy_val*10, EXPORT);
            ASSIGN(value, dummy_value, EXPORT);

            if (mod == 5)
            {
                ASSIGN(OmegaY, 1, EXPORT);
            }
             else if (mod == 4)
            {
                ASSIGN(OmegaX, 1, EXPORT);
            }
             else if (mod == 3)
            {
                ASSIGN(Tz, 1, EXPORT);
            }
             else if (mod == 2)
            {
                ASSIGN(Ty, 1, EXPORT);
            }
             else if (mod == 1)
            {
                ASSIGN(Tx, 1, EXPORT);
            }

            if (value > 0)
            {
                ASSIGN(dummy_val, value/10, EXPORT);
                ASSIGN(mod, value - dummy_val*10, EXPORT);
                ASSIGN(value, dummy_value, EXPORT);

                if (mod == 4)
                {
                    ASSIGN(OmegaX, 1, EXPORT);
                }
                 else if (mod == 3)
                {
                    ASSIGN(Tz, 1, EXPORT);
                }
                 else if (mod == 2)
                {
                    ASSIGN(Ty, 1, EXPORT);
                }
                 else if (mod == 1)
                {
                    ASSIGN(Tx, 1, EXPORT);
                }

                if (value > 0)
                {
                    ASSIGN(dummy_val, value/10, EXPORT);
                    ASSIGN(mod, value - dummy_val*10, EXPORT);
                    ASSIGN(value, dummy_value, EXPORT);

                    if (mod == 3)
                    {
                        ASSIGN(Tz, 1, EXPORT);
                    }
                     else if (mod == 2)
                    {
                        ASSIGN(Ty, 1, EXPORT);
                    }
                     else if (mod == 1)
                    {
                        ASSIGN(Tx, 1, EXPORT);
                    }

                    if (value > 0)
                    {
                        ASSIGN(dummy_val, value/10, EXPORT);
                        ASSIGN(mod, value - dummy_val*10, EXPORT);
                        ASSIGN(value, dummy_value, EXPORT);

                        if (mod == 2)
                        {
                            ASSIGN(Ty, 1, EXPORT);
                        }
                         else if (mod == 1)
                        {
                            ASSIGN(Tx, 1, EXPORT);
                        }

                        if (value > 0)
                        {
                            ASSIGN(Tx, 1, EXPORT);
                        }
                    }
                }
            }
        }

        //Card 1
        COMMENT("# trarot   nskew gr_node    ipol");
        CARD(" %1d%1d%1d %1d%1d%1d%8d%8d%8d", Tx, Ty, Tz, OmegaX, OmegaY, OmegaZ, SKEW_CSID, dependentnodeset, RLINK_IPOL);
    }
    else //IMPORT
    {
        ASSIGN(value, 0, IMPORT);
        ASSIGN(pos, 1, IMPORT);

        //Card 1
        CARD(" %1d%1d%1d %1d%1d%1d%8d%8d%8d", Tx, Ty, Tz, OmegaX, OmegaY, OmegaZ, SKEW_CSID, dependentnodeset, RLINK_IPOL);

        if(OmegaZ == 1)
        {
            ASSIGN(value, 6 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(OmegaY == 1)
        {
            ASSIGN(value, 5 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(OmegaX == 1)
        {
            ASSIGN(value, 4 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(Tz == 1)
        {
            ASSIGN(value, 3 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(Ty == 1)
        {
            ASSIGN(value, 2 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(Tx == 1)
        {
            ASSIGN(value, 1 * pos + value, IMPORT);
        }
        ASSIGN(independentdof, value, IMPORT);
    }
}

FORMAT(radioss51)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    HEADER("/RLINK/%-d", _ID_);

    //Title Card
    COMMENT("#rlink_title                                                                                        ");
    CARD("%-100s", NAME);

    if(IOFLAG == 0)
    {
        ASSIGN(dummy_val, independentdof/10, EXPORT);
        ASSIGN(mod, independentdof - dummy_val*10, EXPORT);
        ASSIGN(value, dummy_value, EXPORT);

        if (mod == 6)
        {
            ASSIGN(OmegaZ, 1, EXPORT);
        }
        else if (mod == 5)
        {
            ASSIGN(OmegaY, 1, EXPORT);
        }
        else if (mod == 4)
        {
            ASSIGN(OmegaX, 1, EXPORT);
        }
        else if (mod == 3)
        {
            ASSIGN(Tz, 1, EXPORT);
        }
        else if (mod == 2)
        {
            ASSIGN(Ty, 1, EXPORT);
        }
        else if (mod == 1)
        {
            ASSIGN(Tx, 1, EXPORT);
        }

        if (value > 0)
        {
            ASSIGN(dummy_val, value/10, EXPORT);
            ASSIGN(mod, value - dummy_val*10, EXPORT);
            ASSIGN(value, dummy_value, EXPORT);

            if (mod == 5)
            {
                ASSIGN(OmegaY, 1, EXPORT);
            }
             else if (mod == 4)
            {
                ASSIGN(OmegaX, 1, EXPORT);
            }
             else if (mod == 3)
            {
                ASSIGN(Tz, 1, EXPORT);
            }
             else if (mod == 2)
            {
                ASSIGN(Ty, 1, EXPORT);
            }
             else if (mod == 1)
            {
                ASSIGN(Tx, 1, EXPORT);
            }

            if (value > 0)
            {
                ASSIGN(dummy_val, value/10, EXPORT);
                ASSIGN(mod, value - dummy_val*10, EXPORT);
                ASSIGN(value, dummy_value, EXPORT);

                if (mod == 4)
                {
                    ASSIGN(OmegaX, 1, EXPORT);
                }
                 else if (mod == 3)
                {
                    ASSIGN(Tz, 1, EXPORT);
                }
                 else if (mod == 2)
                {
                    ASSIGN(Ty, 1, EXPORT);
                }
                 else if (mod == 1)
                {
                    ASSIGN(Tx, 1, EXPORT);
                }

                if (value > 0)
                {
                    ASSIGN(dummy_val, value/10, EXPORT);
                    ASSIGN(mod, value - dummy_val*10, EXPORT);
                    ASSIGN(value, dummy_value, EXPORT);

                    if (mod == 3)
                    {
                        ASSIGN(Tz, 1, EXPORT);
                    }
                     else if (mod == 2)
                    {
                        ASSIGN(Ty, 1, EXPORT);
                    }
                     else if (mod == 1)
                    {
                        ASSIGN(Tx, 1, EXPORT);
                    }

                    if (value > 0)
                    {
                        ASSIGN(dummy_val, value/10, EXPORT);
                        ASSIGN(mod, value - dummy_val*10, EXPORT);
                        ASSIGN(value, dummy_value, EXPORT);

                        if (mod == 2)
                        {
                            ASSIGN(Ty, 1, EXPORT);
                        }
                         else if (mod == 1)
                        {
                            ASSIGN(Tx, 1, EXPORT);
                        }

                        if (value > 0)
                        {
                            ASSIGN(Tx, 1, EXPORT);
                        }
                    }
                }
            }
        }

        //Card 1
        COMMENT("#   TRAROT     nskew  grnod_id      ipol");
        CARD("   %1d%1d%1d %1d%1d%1d%10d%10d%10d", Tx, Ty, Tz, OmegaX, OmegaY, OmegaZ, SKEW_CSID, dependentnodeset, RLINK_IPOL);
    }
    else //IMPORT
    {
        ASSIGN(value, 0, IMPORT);
        ASSIGN(pos, 1, IMPORT);

        //Card 1
        CARD("   %1d%1d%1d %1d%1d%1d%10d%10d%10d", Tx, Ty, Tz, OmegaX, OmegaY, OmegaZ, SKEW_CSID, dependentnodeset, RLINK_IPOL);

        if(OmegaZ == 1)
        {
            ASSIGN(value, 6 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(OmegaY == 1)
        {
            ASSIGN(value, 5 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(OmegaX == 1)
        {
            ASSIGN(value, 4 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(Tz == 1)
        {
            ASSIGN(value, 3 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(Ty == 1)
        {
            ASSIGN(value, 2 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(Tx == 1)
        {
            ASSIGN(value, 1 * pos + value, IMPORT);
        }
        ASSIGN(independentdof, value, IMPORT);
    }
}

FORMAT(radioss90)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    HEADER("/RLINK/%-d", _ID_);

    //Title Card
    COMMENT("#rlink_title                                                                                        ");
    CARD("%-100s", NAME);

    if(IOFLAG == 0)
    {
        ASSIGN(dummy_val, independentdof/10, EXPORT);
        ASSIGN(mod, independentdof - dummy_val*10, EXPORT);
        ASSIGN(value, dummy_value, EXPORT);

        if (mod == 6)
        {
            ASSIGN(OmegaZ, 1, EXPORT);
        }
        else if (mod == 5)
        {
            ASSIGN(OmegaY, 1, EXPORT);
        }
        else if (mod == 4)
        {
            ASSIGN(OmegaX, 1, EXPORT);
        }
        else if (mod == 3)
        {
            ASSIGN(Tz, 1, EXPORT);
        }
        else if (mod == 2)
        {
            ASSIGN(Ty, 1, EXPORT);
        }
        else if (mod == 1)
        {
            ASSIGN(Tx, 1, EXPORT);
        }

        if (value > 0)
        {
            ASSIGN(dummy_val, value/10, EXPORT);
            ASSIGN(mod, value - dummy_val*10, EXPORT);
            ASSIGN(value, dummy_value, EXPORT);

            if (mod == 5)
            {
                ASSIGN(OmegaY, 1, EXPORT);
            }
             else if (mod == 4)
            {
                ASSIGN(OmegaX, 1, EXPORT);
            }
             else if (mod == 3)
            {
                ASSIGN(Tz, 1, EXPORT);
            }
             else if (mod == 2)
            {
                ASSIGN(Ty, 1, EXPORT);
            }
             else if (mod == 1)
            {
                ASSIGN(Tx, 1, EXPORT);
            }

            if (value > 0)
            {
                ASSIGN(dummy_val, value/10, EXPORT);
                ASSIGN(mod, value - dummy_val*10, EXPORT);
                ASSIGN(value, dummy_value, EXPORT);

                if (mod == 4)
                {
                    ASSIGN(OmegaX, 1, EXPORT);
                }
                 else if (mod == 3)
                {
                    ASSIGN(Tz, 1, EXPORT);
                }
                 else if (mod == 2)
                {
                    ASSIGN(Ty, 1, EXPORT);
                }
                 else if (mod == 1)
                {
                    ASSIGN(Tx, 1, EXPORT);
                }

                if (value > 0)
                {
                    ASSIGN(dummy_val, value/10, EXPORT);
                    ASSIGN(mod, value - dummy_val*10, EXPORT);
                    ASSIGN(value, dummy_value, EXPORT);

                    if (mod == 3)
                    {
                        ASSIGN(Tz, 1, EXPORT);
                    }
                     else if (mod == 2)
                    {
                        ASSIGN(Ty, 1, EXPORT);
                    }
                     else if (mod == 1)
                    {
                        ASSIGN(Tx, 1, EXPORT);
                    }

                    if (value > 0)
                    {
                        ASSIGN(dummy_val, value/10, EXPORT);
                        ASSIGN(mod, value - dummy_val*10, EXPORT);
                        ASSIGN(value, dummy_value, EXPORT);

                        if (mod == 2)
                        {
                            ASSIGN(Ty, 1, EXPORT);
                        }
                         else if (mod == 1)
                        {
                            ASSIGN(Tx, 1, EXPORT);
                        }

                        if (value > 0)
                        {
                            ASSIGN(Tx, 1, EXPORT);
                        }
                    }
                }
            }
        }

        //Card 1
        COMMENT("#   Trarot   skew_ID  grnod_ID      Ipol");
        CARD("   %1d%1d%1d %1d%1d%1d%10d%10d%10d", Tx, Ty, Tz, OmegaX, OmegaY, OmegaZ, SKEW_CSID, dependentnodeset, RLINK_IPOL);
    }
    else //IMPORT
    {
        ASSIGN(value, 0, IMPORT);
        ASSIGN(pos, 1, IMPORT);

        //Card 1
        CARD("   %1d%1d%1d %1d%1d%1d%10d%10d%10d", Tx, Ty, Tz, OmegaX, OmegaY, OmegaZ, SKEW_CSID, dependentnodeset, RLINK_IPOL);

        if(OmegaZ == 1)
        {
            ASSIGN(value, 6 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(OmegaY == 1)
        {
            ASSIGN(value, 5 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(OmegaX == 1)
        {
            ASSIGN(value, 4 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(Tz == 1)
        {
            ASSIGN(value, 3 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(Ty == 1)
        {
            ASSIGN(value, 2 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(Tx == 1)
        {
            ASSIGN(value, 1 * pos + value, IMPORT);
        }
        ASSIGN(independentdof, value, IMPORT);
    }
}

FORMAT(radioss100)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1,IMPORT);

    HEADER("/RLINK/%-d", _ID_);

    //Title Card
    COMMENT("#rlink_title                                                                                        ");
    CARD("%-100s", NAME);

    if(IOFLAG == 0)
    {
        ASSIGN(dummy_val, independentdof/10, EXPORT);
        ASSIGN(mod, independentdof - dummy_val*10, EXPORT);
        ASSIGN(value, dummy_value, EXPORT);

        if (mod == 6)
        {
            ASSIGN(OmegaZ, 1, EXPORT);
        }
        else if (mod == 5)
        {
            ASSIGN(OmegaY, 1, EXPORT);
        }
        else if (mod == 4)
        {
            ASSIGN(OmegaX, 1, EXPORT);
        }
        else if (mod == 3)
        {
            ASSIGN(Tz, 1, EXPORT);
        }
        else if (mod == 2)
        {
            ASSIGN(Ty, 1, EXPORT);
        }
        else if (mod == 1)
        {
            ASSIGN(Tx, 1, EXPORT);
        }

        if (value > 0)
        {
            ASSIGN(dummy_val, value/10, EXPORT);
            ASSIGN(mod, value - dummy_val*10, EXPORT);
            ASSIGN(value, dummy_value, EXPORT);

            if (mod == 5)
            {
                ASSIGN(OmegaY, 1, EXPORT);
            }
             else if (mod == 4)
            {
                ASSIGN(OmegaX, 1, EXPORT);
            }
             else if (mod == 3)
            {
                ASSIGN(Tz, 1, EXPORT);
            }
             else if (mod == 2)
            {
                ASSIGN(Ty, 1, EXPORT);
            }
             else if (mod == 1)
            {
                ASSIGN(Tx, 1, EXPORT);
            }

            if (value > 0)
            {
                ASSIGN(dummy_val, value/10, EXPORT);
                ASSIGN(mod, value - dummy_val*10, EXPORT);
                ASSIGN(value, dummy_value, EXPORT);

                if (mod == 4)
                {
                    ASSIGN(OmegaX, 1, EXPORT);
                }
                 else if (mod == 3)
                {
                    ASSIGN(Tz, 1, EXPORT);
                }
                 else if (mod == 2)
                {
                    ASSIGN(Ty, 1, EXPORT);
                }
                 else if (mod == 1)
                {
                    ASSIGN(Tx, 1, EXPORT);
                }

                if (value > 0)
                {
                    ASSIGN(dummy_val, value/10, EXPORT);
                    ASSIGN(mod, value - dummy_val*10, EXPORT);
                    ASSIGN(value, dummy_value, EXPORT);

                    if (mod == 3)
                    {
                        ASSIGN(Tz, 1, EXPORT);
                    }
                     else if (mod == 2)
                    {
                        ASSIGN(Ty, 1, EXPORT);
                    }
                     else if (mod == 1)
                    {
                        ASSIGN(Tx, 1, EXPORT);
                    }

                    if (value > 0)
                    {
                        ASSIGN(dummy_val, value/10, EXPORT);
                        ASSIGN(mod, value - dummy_val*10, EXPORT);
                        ASSIGN(value, dummy_value, EXPORT);

                        if (mod == 2)
                        {
                            ASSIGN(Ty, 1, EXPORT);
                        }
                         else if (mod == 1)
                        {
                            ASSIGN(Tx, 1, EXPORT);
                        }

                        if (value > 0)
                        {
                            ASSIGN(Tx, 1, EXPORT);
                        }
                    }
                }
            }
        }

        //Card 1
        COMMENT("#   Trarot  frame_ID  grnod_ID      Ipol");
        CARD("   %1d%1d%1d %1d%1d%1d%10d%10d%10d", Tx, Ty, Tz, OmegaX, OmegaY, OmegaZ, SKEW_CSID, dependentnodeset, RLINK_IPOL);
    }
    else //IMPORT
    {
        ASSIGN(value, 0, IMPORT);
        ASSIGN(pos, 1, IMPORT);

        //Card 1
        CARD("   %1d%1d%1d %1d%1d%1d%10d%10d%10d", Tx, Ty, Tz, OmegaX, OmegaY, OmegaZ, SKEW_CSID, dependentnodeset, RLINK_IPOL);

        if(OmegaZ == 1)
        {
            ASSIGN(value, 6 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(OmegaY == 1)
        {
            ASSIGN(value, 5 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(OmegaX == 1)
        {
            ASSIGN(value, 4 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(Tz == 1)
        {
            ASSIGN(value, 3 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(Ty == 1)
        {
            ASSIGN(value, 2 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(Tx == 1)
        {
            ASSIGN(value, 1 * pos + value, IMPORT);
        }
        ASSIGN(independentdof, value, IMPORT);
    }
}

FORMAT(radioss110)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1,IMPORT);

    HEADER("/RLINK/%-d", _ID_);

    //Title Card
    COMMENT("#rlink_title                                                                                        ");
    CARD("%-100s", NAME);

    if(IOFLAG == 0)
    {
        ASSIGN(dummy_val, independentdof/10, EXPORT);
        ASSIGN(mod, independentdof - dummy_val*10, EXPORT);
        ASSIGN(value, dummy_value, EXPORT);

        if (mod == 6)
        {
            ASSIGN(OmegaZ, 1, EXPORT);
        }
        else if (mod == 5)
        {
            ASSIGN(OmegaY, 1, EXPORT);
        }
        else if (mod == 4)
        {
            ASSIGN(OmegaX, 1, EXPORT);
        }
        else if (mod == 3)
        {
            ASSIGN(Tz, 1, EXPORT);
        }
        else if (mod == 2)
        {
            ASSIGN(Ty, 1, EXPORT);
        }
        else if (mod == 1)
        {
            ASSIGN(Tx, 1, EXPORT);
        }

        if (value > 0)
        {
            ASSIGN(dummy_val, value/10, EXPORT);
            ASSIGN(mod, value - dummy_val*10, EXPORT);
            ASSIGN(value, dummy_value, EXPORT);

            if (mod == 5)
            {
                ASSIGN(OmegaY, 1, EXPORT);
            }
             else if (mod == 4)
            {
                ASSIGN(OmegaX, 1, EXPORT);
            }
             else if (mod == 3)
            {
                ASSIGN(Tz, 1, EXPORT);
            }
             else if (mod == 2)
            {
                ASSIGN(Ty, 1, EXPORT);
            }
             else if (mod == 1)
            {
                ASSIGN(Tx, 1, EXPORT);
            }

            if (value > 0)
            {
                ASSIGN(dummy_val, value/10, EXPORT);
                ASSIGN(mod, value - dummy_val*10, EXPORT);
                ASSIGN(value, dummy_value, EXPORT);

                if (mod == 4)
                {
                    ASSIGN(OmegaX, 1, EXPORT);
                }
                 else if (mod == 3)
                {
                    ASSIGN(Tz, 1, EXPORT);
                }
                 else if (mod == 2)
                {
                    ASSIGN(Ty, 1, EXPORT);
                }
                 else if (mod == 1)
                {
                    ASSIGN(Tx, 1, EXPORT);
                }

                if (value > 0)
                {
                    ASSIGN(dummy_val, value/10, EXPORT);
                    ASSIGN(mod, value - dummy_val*10, EXPORT);
                    ASSIGN(value, dummy_value, EXPORT);

                    if (mod == 3)
                    {
                        ASSIGN(Tz, 1, EXPORT);
                    }
                     else if (mod == 2)
                    {
                        ASSIGN(Ty, 1, EXPORT);
                    }
                     else if (mod == 1)
                    {
                        ASSIGN(Tx, 1, EXPORT);
                    }

                    if (value > 0)
                    {
                        ASSIGN(dummy_val, value/10, EXPORT);
                        ASSIGN(mod, value - dummy_val*10, EXPORT);
                        ASSIGN(value, dummy_value, EXPORT);

                        if (mod == 2)
                        {
                            ASSIGN(Ty, 1, EXPORT);
                        }
                         else if (mod == 1)
                        {
                            ASSIGN(Tx, 1, EXPORT);
                        }

                        if (value > 0)
                        {
                            ASSIGN(Tx, 1, EXPORT);
                        }
                    }
                }
            }
        }

        //Card 1
        COMMENT("#   TrarotSkew_frame  grnod_ID      Ipol");
        CARD("   %1d%1d%1d %1d%1d%1d%10d%10d%10d", Tx, Ty, Tz, OmegaX, OmegaY, OmegaZ, SKEW_CSID, dependentnodeset, RLINK_IPOL);
    }
    else //IMPORT
    {
        ASSIGN(value, 0, IMPORT);
        ASSIGN(pos, 1, IMPORT);

        //Card 1
        CARD("   %1d%1d%1d %1d%1d%1d%10d%10d%10d", Tx, Ty, Tz, OmegaX, OmegaY, OmegaZ, SKEW_CSID, dependentnodeset, RLINK_IPOL);

        if(OmegaZ == 1)
        {
            ASSIGN(value, 6 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(OmegaY == 1)
        {
            ASSIGN(value, 5 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(OmegaX == 1)
        {
            ASSIGN(value, 4 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(Tz == 1)
        {
            ASSIGN(value, 3 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(Ty == 1)
        {
            ASSIGN(value, 2 * pos + value, IMPORT);
            ASSIGN(pos, pos * 10, IMPORT);
        }
        if(Tx == 1)
        {
            ASSIGN(value, 1 * pos + value, IMPORT);
        }
        ASSIGN(independentdof, value, IMPORT);
    }
}