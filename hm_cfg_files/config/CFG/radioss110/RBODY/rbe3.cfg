//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Interpolation Constraint Element
// 

ATTRIBUTES(COMMON) {
    NAME                        = VALUE(STRING,"Rigid body title","TITLE");
// Single values
    dependentnode               = VALUE(NODE,"Reference (dependent) node identifier","Node_IDr");
    LTX                         = VALUE(INT, "[Tx] Reference node's code for translation TX","Tx"); 
    LTY                         = VALUE(INT, "[Ty] Reference node's code for translation TY","Ty"); 
    LTZ                         = VALUE(INT, "[Tz] Reference node's code for translation TZ","Tz"); 
    LRX                         = VALUE(INT, "[Rx] Reference node's code for rotation RX","Rx"); 
    LRY                         = VALUE(INT, "[Ry] Reference node's code for rotation RY","Ry"); 
    LRZ                         = VALUE(INT, "[Rz] Reference node's code for rotation RZ","Rz");
    nset                        = SIZE("Number of different weighting factor and/or Trarot sets","N_set");
    I_Modif                     = VALUE(INT, "Flag for modification of weighing factor");
// arrays
    independentnodesetcoeffs    = ARRAY[nset](FLOAT,"Weighing factor of set i");
    tx                          = ARRAY[nset](INT,  "[Tx] Independent nodes' code used in interpolation for translation  TX"); 
    ty                          = ARRAY[nset](INT,  "[Ty] Independent nodes's code used in interpolation for translation TY"); 
    tz                          = ARRAY[nset](INT,  "[Tz] Independent nodes's code used in interpolation for translation TZ"); 
    rx                          = ARRAY[nset](INT,  "[Rx] Independent nodes's code used in interpolation for rotation RX"); 
    ry                          = ARRAY[nset](INT,  "[Ry] Independent nodes's code used in interpolation for rotation RY"); 
    rz                          = ARRAY[nset](INT,  "[Rz] Independent nodes's code used in interpolation for rotation RZ");
    SKEW_ARRAY                  = ARRAY[nset](SYSTEM, "Local skew identifier of set");
    independentnodesets         = ARRAY[nset](SETS, "Node group defining independent nodes of set")  { SUBTYPES = (/SETS/GRNOD); } 
    
// HM INTERNAL
    dependentdof                = VALUE(INT,"Code of DOF used for reference (dependent) node.","Trarot_ref");
    nsettemp                    = SIZE("");
    independentnodesetidofs     = ARRAY[nset](INT,"Code of DOF used for reference (dependent) node.","Trarot_Mi");
    KEYWORD_STR                 = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                = SIZE("NUM_COMMENTS");
    CommentEnumField            = VALUE(INT,"User Comments");
    COMMENTS                    = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    IO_FLAG                     = VALUE(INT,"IO Flag");
    Trarot                      = VALUE(INT,"");
    Trarot_AEXPORT                      = VALUE(INT,"");
    Trarot_AIMPORT                      = VALUE(INT,"");
    Temp                        = VALUE(INT,"");
}
SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR           = 9000;
    COMMENTS              = 5109;
    CommentEnumField      = 7951;
    NUM_COMMENTS          = 5110;
    //
    NAME                  = 8057;
    SKEW_ARRAY            = 7042;
    I_Modif               = -1;
    LTX                   = -1;
    LTY                   = -1;
    LTZ                   = -1;
    LRX                   = -1;
    LRY                   = -1;
    LRZ                   = -1;
    tx                    = -1;
    ty                    = -1;
    tz                    = -1;
    rx                    = -1;
    ry                    = -1;
    rz                    = -1;
    IO_FLAG               = -1;
}
GUI(COMMON) {
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }

    ASSIGN(KEYWORD_STR, "/RBE3/");

mandatory:
 
    DATA(dependentnode);

    SEPARATOR("Code of d.o.f. for reference node") ;
optional:
    FLAG(LTX);
    FLAG(LTY);
    FLAG(LTZ);
    FLAG(LRX);
    FLAG(LRY);
    FLAG(LRZ);

    SIZE(nset);

    RADIO(I_Modif)
    {
        ADD(0, "Default (set to 1)");
        ADD(1, "modification is automatic");
        ADD(2, "forbidden modification");
        ADD(3, "change all weighing factor to unity (1.0)");
    }
  
    ARRAY(nset,"No of Trarot sets") {
        SCALAR(independentnodesetcoeffs)        { DIMENSION = "DIMENSIONLESS";}
      
        FLAG(tx);
        FLAG(ty);
        FLAG(tz);
        
        FLAG(rx);
        FLAG(ry);
        FLAG(rz);
      optional: 
        TOOL(SKEW_ARRAY);
      mandatory: 
          DATA(independentnodesets);
    }
}

FORMAT(radioss100) {
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    
    HEADER("/RBE3/%d",_ID_);
    CARD("%-100s", NAME);
        
    COMMENT("#Node_IDr Trarot_ref     N_set   I_modif");
    CARD("%10d   %1d%1d%1d %1d%1d%1d%10d%10d",dependentnode,LTX,LTY,LTZ,LRX,LRY,LRZ,nset,I_Modif);
        
    if(IO_FLAG==1)
    {
        ASSIGN(dependentdof,0,IMPORT);
        ASSIGN(dependentdof,dependentdof + 6*LRZ,IMPORT);
        ASSIGN(dependentdof,dependentdof + 50*LRY,IMPORT);
        ASSIGN(dependentdof,dependentdof + 400*LRX,IMPORT);
        ASSIGN(dependentdof,dependentdof + 3000*LTZ,IMPORT);
        ASSIGN(dependentdof,dependentdof + 20000*LTY,IMPORT);
        ASSIGN(dependentdof,dependentdof + 100000*LTX,IMPORT);
    }
    //
    CARD_LIST(nset) {
        
        COMMENT("#                WTi Trarot_Mi  skew_IDi grnod_IDi");
        CARD("%20lg   %1d%1d%1d %1d%1d%1d%10d%10d",independentnodesetcoeffs,tx,ty,tz,rx,ry,rz,SKEW_ARRAY,independentnodesets);
        
        if(IO_FLAG==1)
        {
            ASSIGN(Trarot_AIMPORT,0,IMPORT);
            ASSIGN(Trarot_AIMPORT,Trarot_AIMPORT + 6*rz,IMPORT);
            ASSIGN(Trarot_AIMPORT,Trarot_AIMPORT + 50*ry,IMPORT);
            ASSIGN(Trarot_AIMPORT,Trarot_AIMPORT + 400*rx,IMPORT);
            ASSIGN(Trarot_AIMPORT,Trarot_AIMPORT + 3000*tz,IMPORT);
            ASSIGN(Trarot_AIMPORT,Trarot_AIMPORT + 20000*ty,IMPORT);
            ASSIGN(Trarot_AIMPORT,Trarot_AIMPORT + 100000*tx,IMPORT);
            ASSIGN(independentnodesetidofs,_PUSH(Trarot_AIMPORT),IMPORT);
        }
    }
}
