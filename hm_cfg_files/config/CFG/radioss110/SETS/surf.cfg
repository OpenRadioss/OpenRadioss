//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// SURF item (/SURF)
// 
ATTRIBUTES(COMMON) {
    idsmax              =  SIZE("No. Set item");
    ids                 =  ARRAY[idsmax](MULTIOBJECT, "Set list item"){ SUBTYPES = (/MAT,/PROP,/COMPONENT , /BOX ,/SETS/GRBRIC,/SETS/GRSHEL,/SETS/GRSH3N,/SETS/SURF , /ASSEMBLY  , /SOLVERSUBMODEL ) ; } 
    ids_type        =   VALUE(STRING, "Type of multi object");
    negativeIdsmax      =  SIZE("No. Negative item");
    negativeIds         =  ARRAY[negativeIdsmax](MULTIOBJECT, "Set negative list item"){ SUBTYPES = (/MAT,/PROP,/COMPONENT , /BOX ,/SETS/GRBRIC,/SETS/GRSHEL,/SETS/GRSH3N,/SETS/SURF , /ASSEMBLY  , /SOLVERSUBMODEL ) ; } 
    negativeIds_type    =  VALUE(STRING, "Type of multi object");
//Segment
//    Seg_list_ID         =  ARRAY[idsmax](SUBOBJECT, "Segment id list item");   
    segmax              =  SIZE("No. Set Segment"); 
    SEGidArray          =  ARRAY[segmax](INT, "Segment id list item");   
    N1                  =  ARRAY[segmax](NODE, "Node 1 Segment  list item"); 
    N2                  =  ARRAY[segmax](NODE, "Node 2 Segment  list item"); 
    N3                  =  ARRAY[segmax](NODE, "Node 3 Segment  list item"); 
    N4                  =  ARRAY[segmax](NODE, "Node 4 Segment  list item"); 
//
    type                =  VALUE(INT, "option");
    TITLE               =  VALUE(STRING, "TITLE");
    surfGenOpt          =  VALUE(INT, "if gene group");
    ordered             =  VALUE(INT, "list opdered or not");
    set_Type            =  VALUE(STRING, "Set Type");
//PLANE
    X_A                = VALUE(FLOAT, "Xmin");
    X_B                = VALUE(FLOAT, "Xmax");
    Y_A                = VALUE(FLOAT, "Ymin");
    Y_B                = VALUE(FLOAT, "Ymax");
    Z_A                = VALUE(FLOAT, "Zmin");
    Z_B                = VALUE(FLOAT, "Zmax");
 // MDELLIPS
    MDref           = VALUE(INT,   "MADYMO reference number");
// Hyper-ellipsoid attributes
    SKEW              = VALUE(SYSTEM,  "Skew");
    n                 = VALUE(INT,   "Degree of the hyper-ellipsoid");
    Xc                = VALUE(FLOAT, "X coordinate of center");
    Yc                = VALUE(FLOAT, "Y coordinate of center");
    Zc                = VALUE(FLOAT, "Z coordinate of center");
    a                 = VALUE(FLOAT, "Semi-axis length (X)");
    b                 = VALUE(FLOAT, "Semi-axis length (Y)");
    c                 = VALUE(FLOAT, "Semi-axis length (Z)");
// HM INTERNAL
    KEYWORD_STR         = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS        = SIZE("NUM_COMMENTS");
    CommentEnumField    = VALUE(INT,"User Comments");
    COMMENTS            = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    
    style               =  VALUE(INT, "display opdered or not");

}
SKEYWORDS_IDENTIFIER(COMMON)
{   
    set_Type            = -1;
    TITLE               = -1;
    SEGidArray          = 7047;
    X_A                 = 4443;
    X_B                 = 4446;
    Y_A                 = 4444;
    Y_B                 = 4447;
    Z_A                 = 4445;
    Z_B                 = 4448;
    SKEW                = -1;
    n                   = -1;
    Xc                  = -1;
    Yc                  = -1;
    Zc                  = -1;
    a                   = -1;
    b                   = -1;
    c                   = -1;
    ids_type = -1;
    negativeIds_type = -1;
//
    KEYWORD_STR         = 9000;
    COMMENTS            = 5109;
    CommentEnumField    = 7951;
    NUM_COMMENTS        = 5110;
}

DEFAULTS(COMMON)
{
    surfGenOpt = 0;
    ordered = 0;
    ids_type ="/COMPONENT/PART";
    negativeIds_type = "/COMPONENT/PART";
    set_Type ="PART";
}
GUI(COMMON) 
{

    RADIO(set_Type, "Set Type is") {
        ADD("BOX",  "BOX :BOX");
        ADD("BOX2",  "BOX2 :BOX2");
        ADD("DSURF",  "DSURF :DSURF");
        ADD("ELLIPS",  "ELLIPS :ELLIPS");
        ADD("GRBRIC",  "GRBRIC :GRBRIC");
        ADD("GRSHEL",  "GRSHEL :GRSHEL");
        ADD("GRSH3N",  "GRSH3N :GRSH3N");
        ADD("MAT",  "MAT :MAT");
        ADD("MDELLIPS",  "MDELLIPS :MDELLIPS");
        ADD("PART",  "PART :PART");
        ADD("PLANE",  "PLANE :PLANE");
        ADD("PROP",  "PROP :PROP");
        ADD("SEG",  "SEG :SEG");
        ADD("SUBMODEL",  "SUBMODEL :SUBMODEL");
        ADD("SUBSET",  "SUBSET :SUBSET");
        ADD("SURF",  "SURF :SURF");
    }
    if(set_Type=="PLANE")
    {
        SCALAR(X_A) { DIMENSION="l"; }
        SCALAR(X_B) { DIMENSION="l"; }
        SCALAR(Y_A) { DIMENSION="l"; }
        SCALAR(Y_B) { DIMENSION="l"; }
        SCALAR(Z_A) { DIMENSION="l"; }
        SCALAR(Z_B) { DIMENSION="l"; }
    }
    
    if(set_Type=="ELLIPS")
    {
        SCALAR(Xc) { DIMENSION="l"; }
        SCALAR(Xc) { DIMENSION="l"; }
        SCALAR(Yc) { DIMENSION="l"; }
        SCALAR(a) { DIMENSION="l"; }
        SCALAR(b) { DIMENSION="l"; }
        SCALAR(c) { DIMENSION="l"; }
        DATA(SKEW);
    }
}
FORMAT(radioss41) {
//
   HEADER("/SURF/%-s/%d/%-40s",set_Type,_ID_,TITLE);
   if(set_Type=="SEG")
   {
//       SUBOBJECTS(Seg_list_ID,/SUBOBJECT/SET_SUPPORT_SEG);   
       FREE_CARD_LIST(segmax)
       {
           CARD("%8d%8d%8d%8d%8d",SEGidArray,N1,N2,N3,N4);
       }
   }
   else if (set_Type=="MDELLIPS")
   {
      COMMENT("#mdel_id");
      CARD("%8d",MDref);
   }
   else if (set_Type=="ELLIPS")
   {
      COMMENT("#skew_id       n");
      CARD("%8d%8d",SKEW,n);
      COMMENT("#             Xc              Yc              Zc");
      CARD("%16lg%16lg%16lg",Xc,Yc,Zc);
      COMMENT("#              a               b               c");
      CARD("%16lg%16lg%16lg",a,b,c);
   }
   else
   {
        if(set_Type== "BOX"||set_Type== "BOX2" )
        {
            ASSIGN(ids_type, /BOX, IMPORT);
        }
        else if(set_Type== "SUBSET" )
        {
            ASSIGN(ids_type, /ASSEMBLY, IMPORT);
        }
        else if(set_Type== "SUBMODEL" )
        {
            ASSIGN(ids_type, /SOLVERSUBMODEL, IMPORT);
        }
        else if(set_Type== "PART" )
        {
            ASSIGN(ids_type, /COMPONENT/PART, IMPORT);
        }
        else if(set_Type== "MAT" )
        {
            ASSIGN(ids_type, /MAT, IMPORT);
        }
        else if(set_Type== "PROP" )
        {
            ASSIGN(ids_type, /PROP, IMPORT);
        }
        else if(set_Type== "GRSH3N" )
        {
            ASSIGN(ids_type, /SETS/GRSH3N, IMPORT);
        }
        else if(set_Type== "GRSHEL" )
        {
            ASSIGN(ids_type, /SETS/GRSHEL, IMPORT);
        }
        else if(set_Type== "GRBRIC" )
        {
            ASSIGN(ids_type, /SETS/GRBRIC, IMPORT);
        }
        else if(set_Type== "SURF" )
        {
            ASSIGN(ids_type, /SETS/SURF, IMPORT);
        }
        else if(set_Type== "DSURF" )
        {
            ASSIGN(ids_type, /SETS/SURF, IMPORT);
        }
        FREE_OBJECT_LIST("%8d",ids,negativeIds,80);
        ASSIGN(negativeIds_type, ids_type, IMPORT);
   }

}
FORMAT(radioss51) {
//
    HEADER("/SURF/%-s/%d",set_Type,_ID_);
    CARD("%-100s", TITLE);

   if(set_Type=="SEG")
   {
//       SUBOBJECTS(Seg_list_ID,/SUBOBJECT/SET_SUPPORT_SEG);   
        FREE_CARD_LIST(segmax)
        {
            CARD("%10d%10d%10d%10d%10d",SEGidArray,N1,N2,N3,N4);
        }
   }
   else if (set_Type=="PLANE")
   {
       
       
   }
   else if (set_Type=="MDELLIPS")
   {
      COMMENT("#  mdel_id");
      CARD("%10d",MDref);
   }
   else if (set_Type=="ELLIPS")
   {
      COMMENT("#  skew_id         n");
      CARD("%10d%10d",SKEW,n);
      COMMENT("#                 Xc                  Yc                  Zc");
      CARD("%20lg%20lg%20lg",Xc,Yc,Zc);
      COMMENT("#                  a                   b                   c");
      CARD("%20lg%20lg%20lg",a,b,c);
   }
   else
   {
        if(set_Type== "BOX"||set_Type== "BOX2" )
        {
            ASSIGN(ids_type, /BOX, IMPORT);
        }
        else if(set_Type== "SUBSET" )
        {
            ASSIGN(ids_type, /ASSEMBLY, IMPORT);
        }
        else if(set_Type== "SUBMODEL" )
        {
            ASSIGN(ids_type, /SOLVERSUBMODEL, IMPORT);
        }
        else if(set_Type== "PART" )
        {
            ASSIGN(ids_type, /COMPONENT/PART, IMPORT);
        }
        else if(set_Type== "MAT" )
        {
            ASSIGN(ids_type, /MAT, IMPORT);
        }
        else if(set_Type== "PROP" )
        {
            ASSIGN(ids_type, /PROP, IMPORT);
        }
        else if(set_Type== "GRSH3N" )
        {
            ASSIGN(ids_type, /SETS/GRSH3N, IMPORT);
        }
        else if(set_Type== "GRSHEL" )
        {
            ASSIGN(ids_type, /SETS/GRSHEL, IMPORT);
        }
        else if(set_Type== "GRBRIC" )
        {
            ASSIGN(ids_type, /SETS/GRBRIC, IMPORT);
        }
        else if(set_Type== "SURF" )
        {
            ASSIGN(ids_type, /SETS/SURF, IMPORT);
        }
        else if(set_Type== "DSURF" )
        {
            ASSIGN(ids_type, /SETS/SURF, IMPORT);
        }
        FREE_OBJECT_LIST("%10d",ids,negativeIds);
        ASSIGN(negativeIds_type, ids_type, IMPORT);
   }

}
FORMAT(radioss110) {
//
    HEADER("/SURF/%-s/%d",set_Type,_ID_);
    CARD("%-100s", TITLE);

   if(set_Type=="SEG")
   {
//       SUBOBJECTS(Seg_list_ID,/SUBOBJECT/SET_SUPPORT_SEG);   
        FREE_CARD_LIST(segmax)
        {
            CARD("%10d%10d%10d%10d%10d",SEGidArray,N1,N2,N3,N4);
        }
   }
   else if (set_Type=="PLANE")
   {
      COMMENT("#                 Xm                  Ym                  Zm");
      CARD("%20lg%20lg%20lg",X_A,Y_A,Z_A);
      COMMENT("#                Xm1                 Ym1                 Zm1");
      CARD("%20lg%20lg%20lg",X_B,Y_B,Z_B);
   }
   else if (set_Type=="MDELLIPS")
   {
      COMMENT("#    MDref");
      CARD("%10d",MDref);
   }
   else if (set_Type=="ELLIPS")
   {
      COMMENT("#  skew_id         n");
      CARD("%10d%10d",SKEW,n);
      COMMENT("#                 Xc                  Yc                  Zc");
      CARD("%20lg%20lg%20lg",Xc,Yc,Zc);
      COMMENT("#                  a                   b                   c");
      CARD("%20lg%20lg%20lg",a,b,c);
   }
   else
   {
        if(set_Type== "BOX"||set_Type== "BOX2" )
        {
            ASSIGN(ids_type, /BOX, IMPORT);
        }
        else if(set_Type== "SUBSET" )
        {
            ASSIGN(ids_type, /ASSEMBLY, IMPORT);
        }
        else if(set_Type== "SUBMODEL" )
        {
            ASSIGN(ids_type, /SOLVERSUBMODEL, IMPORT);
        }
        else if(set_Type== "PART" )
        {
            ASSIGN(ids_type, /COMPONENT/PART, IMPORT);
        }
        else if(set_Type== "MAT" )
        {
            ASSIGN(ids_type, /MAT, IMPORT);
        }
        else if(set_Type== "PROP" )
        {
            ASSIGN(ids_type, /PROP, IMPORT);
        }
        else if(set_Type== "GRSH3N" )
        {
            ASSIGN(ids_type, /SETS/GRSH3N, IMPORT);
        }
        else if(set_Type== "GRSHEL" )
        {
            ASSIGN(ids_type, /SETS/GRSHEL, IMPORT);
        }
        else if(set_Type== "GRBRIC" )
        {
            ASSIGN(ids_type, /SETS/GRBRIC, IMPORT);
        }
        else if(set_Type== "SURF" )
        {
            ASSIGN(ids_type, /SETS/SURF, IMPORT);
        }
        else if(set_Type== "DSURF" )
        {
            ASSIGN(ids_type, /SETS/SURF, IMPORT);
        }
        FREE_OBJECT_LIST("%10d",ids,negativeIds);
        ASSIGN(negativeIds_type, ids_type, IMPORT);
   }

}
