//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// SURF item (/SURF)
// 
ATTRIBUTES(COMMON) {
    idsmax          =   SIZE("No. Set item");
    ids             =   ARRAY[idsmax](MULTIOBJECT, "Set list item") { SUBTYPES = ( /MAT , /PROP, /COMPONENT , /BOX , /ASSEMBLY  , /SOLVERSUBMODEL ) ; }      
    ids_type        =   VALUE(STRING, "Type of multi object");
//
    negativeIdsmax  =   SIZE("No. Negative item");
    negativeIds     =   ARRAY[negativeIdsmax](MULTIOBJECT, "Set negative list item") { SUBTYPES = ( /MAT , /PROP, /COMPONENT , /BOX , /ASSEMBLY  , /SOLVERSUBMODEL ) ; }    
    negativeIds_type =  VALUE(STRING, "Type of multi object");
//
//
    TITLE               = VALUE(STRING, "TITLE");
    surfGenOpt     =  VALUE(INT, "if gene group");
    ordered         =  VALUE(INT, "list opdered or not");
    set_Type          = VALUE(STRING, "Set Type");
// HM INTERNAL
    KEYWORD_STR                               = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                              = SIZE("NUM_COMMENTS");
    CommentEnumField                          = VALUE(INT,"User Comments");
    COMMENTS                                  = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    
    style           =  VALUE(INT, "display opdered or not");
    IO_FLAG         = VALUE(INT, "Import/Export flag");
}
SKEYWORDS_IDENTIFIER(COMMON)
{   
    KEYWORD_STR                               = 9000;
    COMMENTS                                  = 5109;
    CommentEnumField                          = 7951;
    NUM_COMMENTS                              = 5110;
    ids_type = -1;
    negativeIds_type = -1;
    IO_FLAG=-1;
    set_Type = -1;
    TITLE = -1;
}

DEFAULTS(COMMON)
{
    surfGenOpt = 0;
    ordered = 0;
    ids_type ="/COMPONENT/PART";
    negativeIds_type = "/COMPONENT/PART";
    set_Type ="PART";
}
GUI(COMMON) 
{
    RADIO(set_Type, "Set Type is") {
        ADD("BOX",  "BOX :BOX");
        ADD("BOX2",  "BOX2 :BOX2");
   /*     ADD("GEN_INCR",  "GEN_INCR:GEN_INCR");*/
        ADD("MAT",  "MAT :MAT");
        ADD("PART",  "PART :PART");
        ADD("PROP",  "PROP :PROP");
        ADD("SUBMODEL",  "SUBMODEL :SUBMODEL");
        ADD("SUBSET",  "SUBSET :SUBSET");
    }

}
FORMAT(radioss41) {
//
   HEADER("/SURF/%-s/ALL/%d/%-40s",set_Type,_ID_,TITLE);
    if(set_Type== "BOX"||set_Type== "BOX2" )
    {
        ASSIGN(ids_type, /BOX, IMPORT);
    }
    else if(set_Type== "SUBSET" )
    {
        ASSIGN(ids_type, /ASSEMBLY, IMPORT);
    }
    else if(set_Type== "SUBMODEL" )
    {
        ASSIGN(ids_type, /SOLVERSUBMODEL, IMPORT);
    }
    else if(set_Type== "PART" )
    {
        ASSIGN(ids_type, /COMPONENT/PART, IMPORT);
    }
    else if(set_Type== "MAT" )
    {
        ASSIGN(ids_type, /MAT, IMPORT);
    }
    else if(set_Type== "PROP" )
    {
        ASSIGN(ids_type, /PROP, IMPORT);
    }
    FREE_OBJECT_LIST("%8d",ids,negativeIds,80);
    ASSIGN(negativeIds_type, ids_type, IMPORT);

}
FORMAT(radioss51) {
//
    HEADER("/SURF/%-s/ALL/%d",set_Type,_ID_);
    CARD("%-100s", TITLE);
    if(set_Type== "BOX"||set_Type== "BOX2" )
    {
        ASSIGN(ids_type, /BOX, IMPORT);
    }
    else if(set_Type== "SUBSET" )
    {
        ASSIGN(ids_type, /ASSEMBLY, IMPORT);
    }
    else if(set_Type== "SUBMODEL" )
    {
        ASSIGN(ids_type, /SOLVERSUBMODEL, IMPORT);
    }
    else if(set_Type== "PART" )
    {
        ASSIGN(ids_type, /COMPONENT/PART, IMPORT);
    }
    else if(set_Type== "MAT" )
    {
        ASSIGN(ids_type, /MAT, IMPORT);
    }
    else if(set_Type== "PROP" )
    {
        ASSIGN(ids_type, /PROP, IMPORT);
    }
    FREE_OBJECT_LIST("%10d",ids,negativeIds);
    ASSIGN(negativeIds_type, ids_type, IMPORT);

}
