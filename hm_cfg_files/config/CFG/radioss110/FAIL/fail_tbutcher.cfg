//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Failure model, Tuler-Butcher (TBUTCHER) Setup File
// 

ATTRIBUTES(COMMON){ 

	_HMCOMMENTSFLAG  		= VALUE(INT, "Write HM Comments");
	mat_id           		= VALUE(MAT,  "Material");


	Lambda					= VALUE(FLOAT,"Exponent");
	K						= VALUE(FLOAT,"Critical damage integral");
	Sigma_r					= VALUE(FLOAT,"Fracture stress");
	Ifail_sh				= VALUE(INT,  "Shell failure flag");
	Ifail_so				= VALUE(INT,  "Flag for solid failure model");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
        // HM INTERNAL
    KEYWORD_STR                                 = 9000;
	_HMCOMMENTSFLAG=-1;
	
}

/*
DEFINITIONS(COMMON) {
  SUPPORTING=(MAT);
}
*/

CHECK(COMMON) {

}

GUI(COMMON) {
  ASSIGN(KEYWORD_STR, "/FAIL/TBUTCHER/");
mandatory:
  DATA(mat_id);
optional:
  SCALAR(Lambda)     { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(K)          { DIMENSION = "dynamicviscosity"; }
  SCALAR(Sigma_r)    { DIMENSION = "pressure"; }
  //
  RADIO(Ifail_sh) {
    ADD(0,"0: Default");
    ADD(1,"1: Shell is deleted if D greater-than K for 1 integ. point or layer");
    ADD(2,"2: Stress tensor is set to 0 if D greater-than K and shell is deleted if D greater-than K for all integ. points or layers");
  }
  RADIO(Ifail_so) {
    ADD(0,"0: Default");
    ADD(1,"1: Solid is deleted if D greater-than K for 1 integ. point");
    ADD(2,"2: For each integ. point, deviatoric stress tension is vanished if D greater-than K");
  }

}


FORMAT(radioss51) {
    HEADER("/FAIL/TBUTCHER/%d",mat_id);

    COMMENT("#             LAMBDA                   K             SIGMA_R  IFAIL_SH  IFAIL_SO");
    CARD("%20lg%20lg%20lg%10d%10d",Lambda,K,Sigma_r,Ifail_sh,Ifail_so);
}
