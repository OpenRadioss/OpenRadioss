//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Monitored volume type 4 (AIRBAG) Setup File
// 

ATTRIBUTES(COMMON) {
// INPUT ATTRIBUTES
    entityiddisplayed      = VALUE(SETS, "External surface identifier") { SUBTYPES = (/SETS/SURF) ; }

    Scal_T                 = VALUE(FLOAT,"Abscissa scale factor for time based functions");
    Scal_P                 = VALUE(FLOAT,"Abscissa scale factor for pressure based functions");
    Scal_S                 = VALUE(FLOAT,"Abscissa scale factor for area based functions");
    Scal_A                 = VALUE(FLOAT,"Abscissa scale factor for angle based functions");
    Scal_D                 = VALUE(FLOAT,"Abscissa scale factor for distance based functions"); 
    MU                     = VALUE(FLOAT,"Volumetric viscosity");
    PEXT                   = VALUE(FLOAT,"External pressure");
    T_Initial              = VALUE(FLOAT,"Initial temperature");
    Iequil                 = VALUE(INT, "Initial thermodynamic equilibrium flag");
    I_ttf                  = VALUE(INT, "Venting time shift flag");
    GAMMAi                 = VALUE(FLOAT,"Ratio of specific heats at initial temperature");
    ABG_cpai               = VALUE(FLOAT,"cpa coefficient in the relation cpi(T)");
    ABG_cpbi               = VALUE(FLOAT,"cpb coefficient in the relation cpi(T)");
    ABG_cpci               = VALUE(FLOAT,"cpc coefficient in the relation cpi(T)");
    ABG_Njet               = SIZE("Number of injectors");
    ABG_gamma              = ARRAY[ABG_Njet](FLOAT, "Ratio of specific heats");
    ABG_cpa                = ARRAY[ABG_Njet](FLOAT, "cpa coefficient in the relation cp(T)");
    ABG_cpb                = ARRAY[ABG_Njet](FLOAT, "Cpb coefficient in the relation cp(T)");
    ABG_cpc                = ARRAY[ABG_Njet](FLOAT, "Cpc coefficient in the relation cp(T)");
    ABG_Imass              = ARRAY[ABG_Njet](FUNCT, "Mass of injected gas vs time function identifier");
    ABG_Iflow              = ARRAY[ABG_Njet](INT,   "Mass vs time function input type flag");
    ABG_Smass              = ARRAY[ABG_Njet](FLOAT, "Mass function scale factor"); 
    ABG_Itemp              = ARRAY[ABG_Njet](FUNCT, "Temperature of injected gas vs time function identifier");       
    ABG_Stemp              = ARRAY[ABG_Njet](FLOAT, "Temperature function scale factor"); 
    ABG_Isensor            = ARRAY[ABG_Njet](SENSOR,"Sensor identifier") {SUBTYPES=(/SENSOR/SENSOR_DEFINE);}
    ABG_Ijet               = ARRAY[ABG_Njet](INT,   "Jetting flag");
    ABG_N1                 = ARRAY[ABG_Njet](NODE,  "Node identifiers N1 for jet shape definition");
    ABG_N2                 = ARRAY[ABG_Njet](NODE,  "Node identifiers N2 for jet shape definition");
    ABG_N3                 = ARRAY[ABG_Njet](NODE,  "Node identifiers N3 for jet shape definition");
    ABG_IPt                = ARRAY[ABG_Njet](FUNCT, "identifier of the function number defining DP(t)");
    ABG_IPtheta            = ARRAY[ABG_Njet](FUNCT, "identifier of the function number defining DP(theta)");
    ABG_IPdel              = ARRAY[ABG_Njet](FUNCT, "identifier of the function number defining DP(delta)");
    Fp1                    = ARRAY[ABG_Njet](FLOAT, "scale factor for DP(t)");
    Fp2                    = ARRAY[ABG_Njet](FLOAT, "scale factor for DP(theta)");
    Fp3                    = ARRAY[ABG_Njet](FLOAT, "scale factor for DP(delta)");
    ABG_Nvent             = SIZE("Number of vent holes");
    SVENT_SETSURFID       = ARRAY[ABG_Nvent] (SETS,"Vent holes membrane surface identifier") { SUBTYPES = (/SETS/SURF_IDPOOL);}
    ABG_Avent             = ARRAY[ABG_Nvent] (FLOAT, "If surf_IDv = 0: surface of vent holes else scale factor on surface");
    ABG_Bvent             = ARRAY[ABG_Nvent] (FLOAT, "If surf_IDv = 0: Bvent is reset to 0 else scale factor on impacted surface");
    Tstop_arr_X           = ARRAY[ABG_Nvent] (FLOAT, "Stop time for venting");
    ABG_Tvent             = ARRAY[ABG_Nvent] (FLOAT, "Start time for venting");
    ABG_dPdef             = ARRAY[ABG_Nvent] (FLOAT, "Pressure difference to open vent hole membrane");
    ABG_dtPdef            = ARRAY[ABG_Nvent] (FLOAT, "Minimum duration pressure exceeds Pdef to open vent hole membrane");
    ABG_IvdP              = ARRAY[ABG_Nvent] (FUNCT, "Outflow velocity function identifier");
    ABG_FvdP              = ARRAY[ABG_Nvent] (FLOAT, "Scale factor on fct_IDV");
    I_dtPdef_arr          = ARRAY[ABG_Nvent] (INT, "Time delay flag");
    ABG_Iport             = ARRAY[ABG_Nvent] (FUNCT, "Porosity vs time function identifier");
    ABG_Iporp             = ARRAY[ABG_Nvent] (FUNCT, "Porosity vs pressure function identifier");
    ABG_IporA             = ARRAY[ABG_Nvent] (FUNCT, "Porosity vs area function identifier");
    Fport                 = ARRAY[ABG_Nvent] (FLOAT, "Scale factor for fct_IDt");
    Fporp                 = ARRAY[ABG_Nvent] (FLOAT, "Scale factor for fct_IDP");
    FporA                 = ARRAY[ABG_Nvent] (FLOAT, "Scale factor for fct_IDA");
    ABG_Iport1            = ARRAY[ABG_Nvent] (FUNCT, "Porosity vs time when contact function identifier");
    ABG_Iporp1            = ARRAY[ABG_Nvent] (FUNCT, "Porosity vs pressure when contact function identifier");
    ABG_IporA1            = ARRAY[ABG_Nvent] (FUNCT, "Porosity vs impacted surface function identifier");
    Fport1                = ARRAY[ABG_Nvent] (FLOAT, "Scale factor for fct_IDt'");
    Fporp1                = ARRAY[ABG_Nvent] (FLOAT, "Scale factor for fct_IDP'");
    FporA1                = ARRAY[ABG_Nvent] (FLOAT, "Scale factor for fct_IDA'");

    // HM INTERNAL
    KEYWORD_STR           = VALUE(STRING, "Solver Keyword");
    TITLE                 = VALUE(STRING, "TITLE");

}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR     = 9000;
    Scal_T          = 4103;
    Scal_P          = 4104;
    Scal_S          = 4105;
    Scal_A          = 4106;
    Scal_D          = 4107;
    MU              = 8143;
    PEXT            = 8144;  
    T_Initial       = 4113;
    Iequil          = 5398;
    I_ttf           = 4759;
    GAMMAi          = 5172;
    ABG_cpai        = 908;
    ABG_cpbi        = 909;
    ABG_cpci        = 910;
    ABG_Njet        = 969;
    ABG_Nvent       = 928;
    ABG_gamma       = 911;
    ABG_cpa         = 912;
    ABG_cpb         = 913;
    ABG_cpc         = 914;
    ABG_Imass       = 915;
    ABG_Iflow       = 916;
    ABG_Smass       = 917;
    ABG_Itemp       = 918;
    ABG_Stemp       = 919;
    ABG_Isensor     = 920;
    ABG_Ijet        = 921;
    ABG_N1          = 922;
    ABG_N2          = 923;
    ABG_N3          = 924;
    ABG_IPt         = 925;
    ABG_IPtheta     = 926;
    ABG_IPdel       = 927;
    Fp1             = 4114;
    Fp2             = 4115;
    Fp3             = 4116;
    SVENT_SETSURFID = 4682;
    ABG_Avent       = 930;
    ABG_Bvent       = 931;
    Tstop_arr_X     = 4636;
    ABG_Tvent       = 932;
    ABG_dPdef       = 933;
    ABG_dtPdef      = 934;
    ABG_IvdP        = 4117;
    ABG_FvdP        = 4118;
    I_dtPdef_arr    = 4760;
    ABG_Iport       = 935;
    ABG_Iporp       = 936;
    ABG_IporA       = 937;
    Fport           = 4110;
    Fporp           = 4111;
    FporA           = 4112;
    ABG_Iport1      = 938;
    ABG_Iporp1      = 939;
    ABG_IporA1      = 940;
    Fport1          = 4119;
    Fporp1          = 4120;
    FporA1          = 4121;
}

DEFAULTS(COMMON) 
{
    Scal_T          = 1.0;
    Scal_P          = 1.0; 
    Scal_S          = 1.0; 
    Scal_A          = 1.0; 
    Scal_D          = 1.0;
    MU              = 0.01;
    T_Initial       = 295;
    ABG_Smass       = 1.0;
    ABG_Stemp       = 1.0;
    Fp1             = 1.0;
    Fp2             = 1.0;
    Fp3             = 1.0;
}

CHECK(COMMON) 
{
}

GUI(COMMON) 
{
    ASSIGN(KEYWORD_STR,"/MONVOL/AIRBAG");
    DATA(entityiddisplayed);
    SCALAR(Scal_T) {DIMENSION="t";}
    SCALAR(Scal_P) {DIMENSION="pressure";}
    SCALAR(Scal_S) {DIMENSION="area";}
    SCALAR(Scal_A) {DIMENSION="a";}
    SCALAR(Scal_D) {DIMENSION="l";}
    SCALAR(MU) {DIMENSION = "DIMENSIONLESS";}
    SCALAR(PEXT) {DIMENSION="pressure";}
    SCALAR(T_Initial) {DIMENSION = "k";}
    RADIO(Iequil)
    {
        ADD(0,"The mass of gas initially filling the airbag is determined with respect to the volume at time zero");
        ADD(1,"The mass of gas initially filling the airbag is determined with respect to the volume at beginning of jetting");
    }
    RADIO(I_ttf)
    {
        ADD(0,"Time dependent porosity curves are not shifted by injection sensor activation time. Tvent and Tstop are ignored");
        ADD(1,"Time dependent porosity curves are not shifted by injection sensor activation time. Tvent and Tstop are ignored");
        ADD(2,"Time dependent porosity curves are shifted by Tinj. Tvent and Tstop are ignored");
        ADD(3,"Time dependent porosity curves are shifted by Tinj + Tvent. Venting is stopped at Tinj + Tstop, when Tstop is specified"); 
    }
    SCALAR(GAMMAi) {DIMENSION = "DIMENSIONLESS";}
    SCALAR(ABG_cpai) {DIMENSION = "thermal_massic_capacity";}
    SCALAR(ABG_cpbi) {DIMENSION = "thermal_massic_capacity_on_temperature";}
    SCALAR(ABG_cpci) {DIMENSION = "thermal_massic_capacity_on_square_of_temperature";}
    SIZE(ABG_Njet);
    if (ABG_Njet > 0)
    {
        ARRAY(ABG_Njet,"")
        {
            SCALAR(ABG_gamma) {DIMENSION = "DIMENSIONLESS";}
            SCALAR(ABG_cpa) {DIMENSION = "thermal_massic_capacity";}
            SCALAR(ABG_cpb) {DIMENSION = "thermal_massic_capacity_on_temperature";}
            SCALAR(ABG_cpc) {DIMENSION = "thermal_massic_capacity_on_square_of_temperature";}
            DATA(ABG_Imass);
            RADIO(ABG_Iflow)
            {
                ADD(0, "Mass is input");
                ADD(1, "Mass flow is input");
            }
            SCALAR(ABG_Smass)  {DIMENSION="m";}
            DATA(ABG_Itemp);
            SCALAR(ABG_Stemp) {DIMENSION = "k";}
            DATA(ABG_Isensor);
            RADIO(ABG_Ijet)
            {
                ADD(0, "No jetting");
                ADD(1, "Jetting");
            }
            DATA(ABG_N1);
            DATA(ABG_N2);
            DATA(ABG_N3);
           // if (ABG_Ijet == 1)
           // {
            DATA(ABG_IPt);
            DATA(ABG_IPtheta);
            DATA(ABG_IPdel);
            SCALAR(Fp1) {DIMENSION="pressure";}
            SCALAR(Fp2) {DIMENSION="pressure";}
            SCALAR(Fp3) {DIMENSION="pressure";}
           // }
        }
    }
    
    SIZE(ABG_Nvent);
    if (ABG_Nvent > 0)
    {
        ARRAY(ABG_Nvent,"")
        {
            DATA(SVENT_SETSURFID);
            SCALAR(ABG_Avent) {DIMENSION="area";}
            SCALAR(ABG_Bvent) {DIMENSION="area";}
            SCALAR(Tstop_arr_X) {DIMENSION="t";}
            SCALAR(ABG_Tvent) {DIMENSION="t";}
            SCALAR(ABG_dPdef) {DIMENSION="pressure";}
            SCALAR(ABG_dtPdef) {DIMENSION="t";}
            DATA(ABG_IvdP);
            SCALAR(ABG_FvdP) {DIMENSION = "DIMENSIONLESS";}
            RADIO(I_dtPdef_arr)
            {
                ADD(0, "Pressure should be over dtPdef during a dtPdef cumulative time to activate venting");
                ADD(1, "Venting is activated dtPdef after dtPdef is reached");
            }
            DATA(ABG_Iport);
            DATA(ABG_Iporp);
            DATA(ABG_IporA);
            SCALAR(Fport) {DIMENSION = "DIMENSIONLESS";}
            SCALAR(Fporp) {DIMENSION = "DIMENSIONLESS";}
            SCALAR(FporA) {DIMENSION = "DIMENSIONLESS";}
            DATA(ABG_Iport1);
            DATA(ABG_Iporp1);
            DATA(ABG_IporA1);
            SCALAR(Fport1) {DIMENSION = "DIMENSIONLESS";}
            SCALAR(Fporp1) {DIMENSION = "DIMENSIONLESS";}
            SCALAR(FporA1) {DIMENSION = "DIMENSIONLESS";}
        }
    }

}



FORMAT(radioss41) 
{
    HEADER("/MONVOL/AIRBAG/%d/%s",_ID_,TITLE);
    COMMENT("#surf_IDex");
    CARD("%8d",entityiddisplayed);
    COMMENT("#         GAMMAi              MU");
    CARD("%16lg%16lg",GAMMAi,MU);
    COMMENT("#           Pext           dPdef           Avent           Tvent");
    CARD("%16lg%16lg%16lg%16lg",PEXT,ABG_dPdef,ABG_Avent,ABG_Tvent);
    COMMENT("#  Imass   Itemp Isensor   Svent    Ijet      NC    Njet     IPt IPtheta IPdelta");
    CARD("%8d%8d%8d%8d%8d%8d%8d%8d%8d%8d",ABG_Imass,ABG_Itemp,ABG_Isensor,SVENT_SETSURFID,ABG_Ijet,ABG_N1,ABG_N2,ABG_IPt,ABG_IPtheta,ABG_IPdel);
    COMMENT("#             Cp           Smass           Stemp   Iflow");
    CARD("%16lg%16lg%16lg%8d",ABG_gamma,ABG_Smass,ABG_Stemp,ABG_Iflow);
}

FORMAT(radioss44) 
{
    HEADER("/MONVOL/AIRBAG/%d/%s",_ID_,TITLE);
    COMMENT("#surf_IDex");
    CARD("%8d",entityiddisplayed);
    COMMENT("#                             MU            Pext              T0");
    CARD("%16s%16lg%16lg%16lg",_BLANK_,MU,PEXT,T_Initial);
    COMMENT("#         GAMMAi            cpai            cpbi            cpci");
    CARD("%16lg%16lg%16lg%16lg",GAMMAi,ABG_cpai,ABG_cpbi,ABG_cpci);
    COMMENT("#   Njet");
    CARD("%8d",ABG_Njet);
    if (ABG_Njet > 0)
    {
        CARD_LIST(ABG_Njet)
        {
            COMMENT("#         GAMMAj             cpa             cpb             cpc");
            CARD("%16lg%16lg%16lg%16lg",ABG_gamma,ABG_cpa,ABG_cpb,ABG_cpc);
            COMMENT("#  Imass   Iflow           Smass   Itemp           Stemp Isensor");
            CARD("%8d%8d%16lg%8d%16lg%8d",ABG_Imass,ABG_Iflow,ABG_Smass,ABG_Itemp,ABG_Stemp,ABG_Isensor);
            COMMENT("#   Ijet      N1      N2      N3     IPt IPtheta IPdelta");
            CARD("%8d%8d%8d%8d%8d%8d%8d",ABG_Ijet,ABG_N1,ABG_N2,ABG_N3,ABG_IPt,ABG_IPtheta,ABG_IPdel);
        }
    }
    COMMENT("#  Nvent");
    CARD("%8d",ABG_Nvent);
    if (ABG_Nvent > 0)
    {
        CARD_LIST(ABG_Nvent)
        {
            COMMENT("#  Svent           Avent           Bvent");
            CARD("%8d%16lg%16lg",SVENT_SETSURFID,ABG_Avent,ABG_Bvent);
            COMMENT("#          Tvent           dPdef          dtPdef");
            CARD("%16lg%16lg%16lg",ABG_Tvent,ABG_dPdef,ABG_dtPdef);
            COMMENT("#  Iport   Iporp   Ipora");
            CARD("%8d%8d%8d",ABG_Iport,ABG_Iporp,ABG_IporA);
            COMMENT("# Iport'  Iporp'  Ipora'");
            CARD("%8d%8d%8d",ABG_Iport1,ABG_Iporp1,ABG_IporA1);
        }
    }
}

FORMAT(radioss51) 
{
    HEADER("/MONVOL/AIRBAG/%d",_ID_);  
    CARD("%-100s",TITLE);
    COMMENT("#surf_IDex");
    CARD("%10d",entityiddisplayed);
    COMMENT("#             Scal_T              Scal_P              Scal_S              Scal_A              Scal_D");
    CARD("%20lg%20lg%20lg%20lg%20lg",Scal_T,Scal_P,Scal_S,Scal_A,Scal_D); 
    COMMENT("#                                     MU                Pext                  T0");
    CARD("%20s%20lg%20lg%20lg",_BLANK_,MU,PEXT,T_Initial);
    COMMENT("#             GAMMAi                cpai                cpbi                cpci");
    CARD("%20lg%20lg%20lg%20lg",GAMMAi,ABG_cpai,ABG_cpbi,ABG_cpci); 
    COMMENT("#     Njet");
    CARD("%10d",ABG_Njet);
    if (ABG_Njet > 0)
    {
        CARD_LIST(ABG_Njet)
        {
            COMMENT("#             GAMMAj                 cpa                 cpb                 cpc");
            CARD("%20lg%20lg%20lg%20lg",ABG_gamma,ABG_cpa,ABG_cpb,ABG_cpc);
            COMMENT("#    Imass     Iflow               Smass     Itemp               Stemp   Isensor");
            CARD("%10d%10d%20lg%10d%20lg%10d",ABG_Imass,ABG_Iflow,ABG_Smass,ABG_Itemp,ABG_Stemp,ABG_Isensor);
            COMMENT("#     Ijet  node_ID1  node_ID2  node_ID3");
            CARD("%10d%10d%10d%10d",ABG_Ijet,ABG_N1,ABG_N2,ABG_N3);
            if (ABG_Ijet==1)
            {
                COMMENT("#      IPt   IPtheta   IPdelta                           Fpt             Fptheta             Fpdelta");
                CARD("%10d%10d%10d%10s%20lg%20lg%20lg",ABG_IPt,ABG_IPtheta,ABG_IPdel,_BLANK_,Fp1,Fp2,Fp3);
            }
        }
    }
    COMMENT("#    Nvent");
    CARD("%10d",ABG_Nvent);
    if (ABG_Nvent > 0)
    {
        CARD_LIST(ABG_Nvent)
        {
            COMMENT("#    Svent               Avent               Bvent");
            CARD("%10d%20lg%20lg",SVENT_SETSURFID,ABG_Avent,ABG_Bvent);
            COMMENT("#              Tvent               dPdef              dtPdef      IvdP                Fvdp");
            CARD("%20lg%20lg%20lg%10d%20lg",ABG_Tvent,ABG_dPdef,ABG_dtPdef,ABG_IvdP,ABG_FvdP);
            COMMENT("#    Iport     IporP     IporA                         Fport               FporP               FporA");
            CARD("%10d%10d%10d%10s%20lg%20lg%20lg",ABG_Iport,ABG_Iporp,ABG_IporA,_BLANK_,Fport,Fporp,FporA);
            COMMENT("#   Iport'    IporP'    IporA'                        Fport'              FporP'              FporA'");
            CARD("%10d%10d%10d%10s%20lg%20lg%20lg",ABG_Iport1,ABG_Iporp1,ABG_IporA1,_BLANK_,Fport1,Fporp1,FporA1);
        }
    }
}

FORMAT(radioss90) 
{
    HEADER("/MONVOL/AIRBAG/%d",_ID_);  
    CARD("%-100s",TITLE);
    COMMENT("#surf_IDex");
    CARD("%10d",entityiddisplayed);
    COMMENT("#            Ascalet             AscaleP             AscaleS             AscaleA             AscaleD");
    CARD("%20lg%20lg%20lg%20lg%20lg",Scal_T,Scal_P,Scal_S,Scal_A,Scal_D); 
    COMMENT("#                                     MU                Pext                  T0     Iequi");
    CARD("%20s%20lg%20lg%20lg%10d",_BLANK_,MU,PEXT,T_Initial,Iequil);
    COMMENT("#             GAMMAi                cpai                cpbi                cpci");
    CARD("%20lg%20lg%20lg%20lg",GAMMAi,ABG_cpai,ABG_cpbi,ABG_cpci); 
    COMMENT("#     Njet");
    CARD("%10d",ABG_Njet);
    if (ABG_Njet > 0)
    {
        CARD_LIST(ABG_Njet)
        {
            COMMENT("#             GAMMAj                 cpa                 cpb                 cpc");
            CARD("%20lg%20lg%20lg%20lg",ABG_gamma,ABG_cpa,ABG_cpb,ABG_cpc);
            COMMENT("#fct_IDmas     Iflow           Fscalemas   fct_IDT             FscaleT   sens_ID");
            CARD("%10d%10d%20lg%10d%20lg%10d",ABG_Imass,ABG_Iflow,ABG_Smass,ABG_Itemp,ABG_Stemp,ABG_Isensor);
            COMMENT("#     Ijet  node_ID1  node_ID2  node_ID3");
            CARD("%10d%10d%10d%10d",ABG_Ijet,ABG_N1,ABG_N2,ABG_N3);
            if (ABG_Ijet==1)
            {
                COMMENT("#      IPt   IPtheta   IPdelta                           Fpt             Fptheta             Fpdelta");
                CARD("%10d%10d%10d%10s%20lg%20lg%20lg",ABG_IPt,ABG_IPtheta,ABG_IPdel,_BLANK_,Fp1,Fp2,Fp3);
            }
        }
    }
    COMMENT("#    Nvent");
    CARD("%10d",ABG_Nvent);
    if (ABG_Nvent > 0)
    {
        CARD_LIST(ABG_Nvent)
        {
            COMMENT("# surf_IDv               Avent               Bvent               Tstop");
            CARD("%10d%20lg%20lg%20lg",SVENT_SETSURFID,ABG_Avent,ABG_Bvent,Tstop_arr_X);
            COMMENT("#              Tvent               dPdef              dtPdef   fct_IDv             Fscalev");
            CARD("%20lg%20lg%20lg%10d%20lg",ABG_Tvent,ABG_dPdef,ABG_dtPdef,ABG_IvdP,ABG_FvdP);
            COMMENT("#  fct_IDt   fct_IDP   fct_IDA                       Fscalet             FscaleP             FscaleA");
            CARD("%10d%10d%10d%10s%20lg%20lg%20lg",ABG_Iport,ABG_Iporp,ABG_IporA,_BLANK_,Fport,Fporp,FporA);
            COMMENT("# fct_IDt'  fct_IDP'  fct_IDA'                      Fscalet'            FscaleP'            FscaleA'");
            CARD("%10d%10d%10d%10s%20lg%20lg%20lg",ABG_Iport1,ABG_Iporp1,ABG_IporA1,_BLANK_,Fport1,Fporp1,FporA1);
        }
    }
}

FORMAT(radioss100) 
{
    HEADER("/MONVOL/AIRBAG/%d",_ID_);  
    CARD("%-100s",TITLE);
    COMMENT("#surf_IDex");
    CARD("%10d",entityiddisplayed);
    COMMENT("#            Ascalet             AscaleP             AscaleS             AscaleA             AscaleD");
    CARD("%20lg%20lg%20lg%20lg%20lg",Scal_T,Scal_P,Scal_S,Scal_A,Scal_D); 
    COMMENT("#                                     MU                Pext                  T0     Iequi      Ittf");
    CARD("%20s%20lg%20lg%20lg%10d%10d",_BLANK_,MU,PEXT,T_Initial,Iequil,I_ttf);
    COMMENT("#             GAMMAi                cpai                cpbi                cpci");
    CARD("%20lg%20lg%20lg%20lg",GAMMAi,ABG_cpai,ABG_cpbi,ABG_cpci); 
    COMMENT("#     Njet");
    CARD("%10d",ABG_Njet);
    if (ABG_Njet > 0)
    {
        CARD_LIST(ABG_Njet)
        {
            COMMENT("#             GAMMAj                 cpa                 cpb                 cpc");
            CARD("%20lg%20lg%20lg%20lg",ABG_gamma,ABG_cpa,ABG_cpb,ABG_cpc);
            COMMENT("#fct_IDmas     Iflow           Fscalemas   fct_IDT             FscaleT   sens_ID");
            CARD("%10d%10d%20lg%10d%20lg%10d",ABG_Imass,ABG_Iflow,ABG_Smass,ABG_Itemp,ABG_Stemp,ABG_Isensor);
            COMMENT("#     Ijet  node_ID1  node_ID2  node_ID3");
            CARD("%10d%10d%10d%10d",ABG_Ijet,ABG_N1,ABG_N2,ABG_N3);
            if (ABG_Ijet==1)
            {
                COMMENT("#      IPt   IPtheta   IPdelta                           Fpt             Fptheta             Fpdelta");
                CARD("%10d%10d%10d%10s%20lg%20lg%20lg",ABG_IPt,ABG_IPtheta,ABG_IPdel,_BLANK_,Fp1,Fp2,Fp3);
            }
        }
    }
    COMMENT("#    Nvent");
    CARD("%10d",ABG_Nvent);
    if (ABG_Nvent > 0)
    {
        CARD_LIST(ABG_Nvent)
        {
            COMMENT("# surf_IDv               Avent               Bvent               Tstop");
            CARD("%10d%20lg%20lg%20lg",SVENT_SETSURFID,ABG_Avent,ABG_Bvent,Tstop_arr_X);
            COMMENT("#              Tvent               dPdef              dtPdef   fct_IDv             Fscalev   IdtPdef");
            CARD("%20lg%20lg%20lg%10d%20lg%10d",ABG_Tvent,ABG_dPdef,ABG_dtPdef,ABG_IvdP,ABG_FvdP,I_dtPdef_arr);
            COMMENT("#  fct_IDt   fct_IDP   fct_IDA                       Fscalet             FscaleP             FscaleA");
            CARD("%10d%10d%10d%10s%20lg%20lg%20lg",ABG_Iport,ABG_Iporp,ABG_IporA,_BLANK_,Fport,Fporp,FporA);
            COMMENT("# fct_IDt'  fct_IDP'  fct_IDA'                      Fscalet'            FscaleP'            FscaleA'");
            CARD("%10d%10d%10d%10s%20lg%20lg%20lg",ABG_Iport1,ABG_Iporp1,ABG_IporA1,_BLANK_,Fport1,Fporp1,FporA1);
        }
    }
}
