//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Thermal Stress Setup File
// 

ATTRIBUTES(COMMON) {
 INITEMP_SET_EXPAND_SUBGRP = VALUE(SUBOBJECT, "INITEMP_SET_EXPAND_SUBGRP");
 entityid           = VALUE(SETS,"Node group on which initial condition is applied") { SUBTYPES = (/SETS/GRNOD); }
 distribution       = VALUE(UINT,"INITEMP flag type");
 magnitude          = VALUE(FLOAT,"Initial temperature");
 displayname        = VALUE(STRING, "Title", "TITLE");
 
 //Attributes for the reader
 grnd_ID          = VALUE(SETS,"Node group" ) { SUBTYPES = (/SETS/GRNOD); }
 T0               = VALUE(FLOAT,"Initial temperature");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
   INITEMP_SET_EXPAND_SUBGRP     = -1;
}

/*
GUI(COMMON) {
  SCALAR(T0) {DIMENSION="k";}     
  
  if (FLD_TYPE==0)
  {
     graphical SUPPORT("Support") {
           OBJECTS=(NODE,COMPONENT);
           ADD(GRNOD_ID);
     }
  }

  RADIO(FLD_TYPE)
  {
     ADD(0,"Initial temperature/node group");
     ADD(1,"Initial temperature/node");
  }

  if (FLD_TYPE==1)
  {
     SIZE(NB_NODE) ;

     ARRAY(NB_NODE,"Initial Temperatures")
     {
         SCALAR(T0_NODAL) {DIMENSION="k";}
         DATA(NODE_ID) ;
     }
  }
}
*/

FORMAT(radioss110) {
  HEADER("/INITEMP/%d",_ID_);
  CARD("%-100s", displayname);
  
  CARD_PREREAD("%20lg%10d%10u",T0,grnd_ID,distribution);
  
  if(distribution == 0)
  {
    COMMENT("#                 T0   grnd_ID  fld_type");
    CARD("%20lg%10d%10u",magnitude,entityid,distribution);
  }
  else if(distribution == 1)
  {
    COMMENT("#                 T0   grnd_ID  fld_type");
    CARD("%20lg%10d%10u",T0,grnd_ID,distribution);
    SUBOBJECTS(INITEMP_SET_EXPAND_SUBGRP,/SUBOBJECT/INITEMP_SET_EXPAND_SUBGRP);
  }
}

FORMAT(radioss90) {
  HEADER("/INITEMP/%d",_ID_);
  CARD("%-100s", displayname);
  COMMENT("#                 T0   grnd_ID");
  CARD("%20lg%10d",magnitude,entityid);
}
