//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- bem_flow.cfg ---

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES

    //Title Card
    displayname                                 = VALUE(STRING, "Incompressible flow block title", "TITLE");

    //Card 1
    surf_IDex                                   = VALUE(SETS,   "Flow external surface identifier")   { SUBTYPES = (/SETS/SURF_IDPOOL); }
    Nio                                         = SIZE("Number of inflow-outflow surfaces");
    Iinside                                     = VALUE(INT,    "Inside or outside flow flag");
    Ifsp                                        = VALUE(CURVE,  "Stagnation pressure curve number");
    Fscalesp                                    = VALUE(FLOAT,  "Stagnation pressure scale factor");
    Ascalesp                                    = VALUE(FLOAT,  "Abcissa scale factor for stagnation pressure curve");

    //Card 2
    grn_IDaux                                   = VALUE(SETS,    "Auxiliary nodes group identifier")  { SUBTYPES = (/SETS/GRNOD); }
    Itest                                       = VALUE(INT,     "Test auxiliary nodes flag");
    Tole                                        = VALUE(FLOAT,   "A dimensional tolerance");

    //Card 3
    rho                                         = VALUE(FLOAT,  "Fluid density");
    Ivinf                                       = VALUE(INT,    "Additional velocity field flag");

    //Card 4
    surf_IDio                                   = ARRAY[Nio](SETS,   "Inflow-Outflow surface identifier")  { SUBTYPES = (/SETS/SURF_IDPOOL); }
    fct_IDvel                                   = ARRAY[Nio](CURVE,  "Normal velocity curve");
    fct_IDpr                                    = ARRAY[Nio](CURVE,  "Imposed pressure curve");
    Fscalenv                                    = ARRAY[Nio](FLOAT,  "Normal velocity scale factor");
    Fscalepres                                  = ARRAY[Nio](FLOAT,  "Imposed pressure scale factor");
    Ascalet                                     = ARRAY[Nio](FLOAT,  "Abscissa scale factor for normal velocity curve and imposed pressure curve");

    //Card 5
    Iform                                       = VALUE(INT,    "Formulation flag");
    Ipri                                        = VALUE(INT,    "Output level");
    Dtflow                                      = VALUE(FLOAT,  "Formulation flag");

    //Card 6
    Ifvinf                                      = VALUE(CURVE,  "Velocity curve");
    Fscalevel                                   = VALUE(FLOAT,  "Velocity scale factor");
    Ascalevel                                   = VALUE(FLOAT,  "Abscissa scale factor for velocity curve");

    //Card 7
    Dirx                                        = VALUE(FLOAT,  "X component of the additional field direction vector");
    Diry                                        = VALUE(FLOAT,  "Y component of the additional field direction vector");
    Dirz                                        = VALUE(FLOAT,  "Z component of the additional field direction vector");

    //HM INTERNAL
    KEYWORD_STR                                 = VALUE(STRING, "Solver Keyword");
}


SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES

    //Card 1
    surf_IDex                                   = -1;
    Nio                                         = -1;
    Iinside                                     = -1;
    Ifsp                                        = -1;
    Fscalesp                                    = -1;
    Ascalesp                                    = -1;

    //Card 2
    grn_IDaux                                   = -1;
    Itest                                       = -1;
    Tole                                        = -1;

    //Card 3
    rho                                         = -1;
    Ivinf                                       = -1;

    //Card 4
    surf_IDio                                   = -1;
    fct_IDvel                                   = -1;
    fct_IDpr                                    = -1;
    Fscalenv                                    = -1;
    Fscalepres                                  = -1;
    Ascalet                                     = -1;

    //Card 5
    Iform                                       = -1;
    Ipri                                        = -1;
    Dtflow                                      = -1;

    //Card 6
    Ifvinf                                      = -1;
    Fscalevel                                   = -1;
    Ascalevel                                   = -1;

    //Card 7
    Dirx                                        = -1;
    Diry                                        = -1;
    Dirz                                        = -1;

    //HM INTERNAL
    KEYWORD_STR                                 = 9000;
}

CHECK(COMMON)
{
    //Card 2
    Itest                                       > 0;

    //Card 3
    Ivinf                                       > 0;

    //Card 5
    Iform                                       > 0;
    Ipri                                        > 1;
}

DEFAULTS(COMMON)
{
    //Card 1
    Fscalesp                                    = 1.0;
    Ascalesp                                    = 1.0;

    //Card 2
    Tole                                        = 1.0E-5;

    //Card 4
    Fscalenv                                    = 1.0;
    Fscalepres                                  = 1.0;
    Ascalet                                     = 1.0;

    //Card 5
    Dtflow                                      = 0.0;

    //Card 6
    Fscalevel                                   = 1.0;
    Ascalevel                                   = 1.0;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "/BEM/FLOW");

    //Title Card
    SCALAR(displayname, "flow_title")           { DIMENSION = "DIMENSIONLESS" ; }

    //Card 1
    DATA(surf_IDex,     "surf_IDex");
    SIZE(Nio,         "Nio");
    mandatory:
    RADIO(Iinside,      "Iinside")
    {
        ADD(1, "1: (Default) Flow is computed inside the surface defined by surf_IDex. The surface element normals must be oriented outwards");
        ADD(2, "2: Flow is computed outside the surface defined by surf_IDex. The surface element normals must be oriented inwards");
    }
    optional:
    DATA(Ifsp,        "Ifsp");
    SCALAR(Fscalesp,  "Fscalesp")               { DIMENSION = "pressure" ; }
    SCALAR(Ascalesp,  "Ascalesp")               { DIMENSION = "t" ; }

    //Card 2
    DATA(grn_IDaux,   "grn_IDaux");
    SCALAR(Itest,     "Itest")                  { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(Tole,      "Tole")                   { DIMENSION = "DIMENSIONLESS" ; }

    //Card 3
    SCALAR(rho,       "rho")                    { DIMENSION = "density" ; }
    SCALAR(Ivinf,     "Ivinf")                  { DIMENSION = "DIMENSIONLESS" ; }

    //Card 4
    ARRAY(Nio, "Inout Surfaces")
    {
      DATA(surf_IDio,   "surf_IDio");
      DATA(fct_IDvel,   "fct_IDvel");
      DATA(fct_IDpr,    "fct_IDpr");
      SCALAR(Fscalenv,  "Fscalenv")               { DIMENSION = "velocity" ; }
      SCALAR(Fscalepres,"Fscalepres")             { DIMENSION = "pressure" ; }
      SCALAR(Ascalet,   "Ascalet")                { DIMENSION = "t" ; }
    }

    //Card 5
    mandatory:
    RADIO(Iform,      "Iform")
    {
        ADD(1, "1: Fluid flow is computed using BEM with a collocation approach to solve the integral equation");
        ADD(2, "2: Fluid flow is computed using BEM with a galerkin approach to solve the integral equation");
    }
    optional:
    SCALAR(Ipri,      "Ipri")                   { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(Dtflow,    "Dtflow")                 { DIMENSION = "t" ; }

    //Card 6
    DATA(Ifvinf,      "Ifvinf");
    SCALAR(Fscalevel, "Fscalevel")              { DIMENSION = "velocity"; }
    SCALAR(Ascalevel, "Ascalevel")              { DIMENSION = "t" ; }

    //Card 7
    SCALAR(Dirx,      "Dirx")                   { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(Diry,      "Diry")                   { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(Dirz,      "Dirz")                   { DIMENSION = "DIMENSIONLESS" ; }
}

// File format
FORMAT(radioss51)
{
    HEADER("/BEM/FLOW/%-d", _ID_);

    //Title Card
    COMMENT("#flow_title                                                                                         ");
    CARD("%-100s", displayname);

    //Card 1
    COMMENT("#     Isur       Nio   Iinside      Ifsp                Sfsp             Scal_sp");
    CARD("%10d%10d%10d%10d%20lg%20lg", surf_IDex, Nio, Iinside, Ifsp, Fscalesp, Ascalesp);

    //Card 2
    COMMENT("#   Igraux     Itest                Tole");
    CARD("%10d%10d%20lg", grn_IDaux, Itest, Tole);

    //Card 3
    COMMENT("#                Rho     Ivinf");
    CARD("%20lg%10d", rho, Ivinf);

    //Card 4
    CARD_LIST(Nio)
    {
      COMMENT("#   Isurio     Ifvel    Ifpres                         Sfvel              Sfpres              Scal_t");
      CARD("%10d%10d%10d%10s%20lg%20lg%20lg", surf_IDio, fct_IDvel, fct_IDpr, _BLANK_, Fscalenv, Fscalepres, Ascalet);
    }

    //Card 5
    COMMENT("#    Iform      Ipri              Dtflow");
    CARD("%10d%10d%20lg", Iform, Ipri, Dtflow);

    //Card 6
    COMMENT("#   Ifvinf              Sfvinf           Scal_vinf");
    CARD("%10d%20lg%20lg", Ifvinf, Fscalevel, Ascalevel);

    //Card 7
    COMMENT("#               Dirx                Diry                Dirz");
    CARD("%20lg%20lg%20lg", Dirx, Diry, Dirz);
}

FORMAT(radioss90)
{
    HEADER("/BEM/FLOW/%-d", _ID_);

    //Title Card
    COMMENT("#flow_title                                                                                         ");
    CARD("%-100s", displayname);

    //Card 1
    COMMENT("#surf_IDex       Nio   Iinside      Ifsp            Fscalesp            Ascalesp");
    CARD("%10d%10d%10d%10d%20lg%20lg", surf_IDex, Nio, Iinside, Ifsp, Fscalesp, Ascalesp);

    //Card 2
    COMMENT("#grn_IDaux     Itest                Tole");
    CARD("%10d%10d%20lg", grn_IDaux, Itest, Tole);

    //Card 3
    COMMENT("#                Rho     Ivinf");
    CARD("%20lg%10d", rho, Ivinf);

    //Card 4
    CARD_LIST(Nio)
    {
      COMMENT("#surf_IDio fct_IDvel  fct_IDpr                      Fscalenv          Fscalepres             Ascalet");
      CARD("%10d%10d%10d%10s%20lg%20lg%20lg", surf_IDio, fct_IDvel, fct_IDpr, _BLANK_, Fscalenv, Fscalepres, Ascalet);
    }

    //Card 5
    COMMENT("#    Iform      Ipri              Dtflow");
    CARD("%10d%10d%20lg", Iform, Ipri, Dtflow);

    //Card 6
    COMMENT("#   Ifvinf           Fscalevel           Ascalevel");
    CARD("%10d%20lg%20lg", Ifvinf, Fscalevel, Ascalevel);

    //Card 7
    COMMENT("#               Dirx                Diry                Dirz");
    CARD("%20lg%20lg%20lg", Dirx, Diry, Dirz);
}