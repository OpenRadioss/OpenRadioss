//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// *PERTURBATION_OPTION MATERIAL and NODE
//

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES
    LSD_Type                                = VALUE(INT, "Type of perturbation");
    LSD_PID                                 = VALUE(COMPONENT, "Part ID");
    LSD_NSID                                = VALUE(SETS, "Node set ID. Specify 0 to perturb all the nodes in the model") { SUBTYPES = (/SETS/SET_NODE_IDPOOL) ; }
    LSD_SCL                                 = VALUE(FLOAT, "Scale factor");
    LSD_CMP                                 = VALUE(INT, "Component");
    LSD_ICOORD                              = VALUE(INT, "Coordinate system");
    LSD_SYSTEM                              = VALUE(SYSTEM, "Coordinate system ID");
    
    ArrayCount                              = SIZE("Number of Harmonic Perturbation Cards");
    LSD_AMPL                                = ARRAY[ArrayCount](FLOAT, "Amplitude of the harmonic perturbation");
    LSD_XWL                                 = ARRAY[ArrayCount](FLOAT, "x wavelength of the harmonic field");
    LSD_XOFF                                = ARRAY[ArrayCount](FLOAT, "x offset of harmonic field"); 
    LSD_YWL                                 = ARRAY[ArrayCount](FLOAT, "y wavelength of the harmonic field");
    LSD_YOFF                                = ARRAY[ArrayCount](FLOAT, "y offset of harmonic field"); 
    LSD_ZWL                                 = ARRAY[ArrayCount](FLOAT, "z wavelength of the harmonic field");
    LSD_ZOFF                                = ARRAY[ArrayCount](FLOAT, "z offset of harmonic field");

    LSD_FADE                                = VALUE(FLOAT, "Parameter controlling the distance over which faded");
    LSD_FNAME                               = VALUE(STRING, "Name of file containing the perturbation definitions");

    LSD_CSTYPE                              = VALUE(INT, "Correlation structure");
    LSD_ELLIP1                              = VALUE(FLOAT, "Elliptic constant for 2D and 3D elliptic fields");
    LSD_ELLIP2                              = VALUE(FLOAT, "Elliptic constant for 3D elliptic field");
    LSD_RND                                 = VALUE(INT, "Seed for random number generator");

    LSD_CFTYPE                              = VALUE(INT, "Correlation function");
    LSD_CFC1                                = VALUE(FLOAT, "Correlation function constant i");
    LSD_CFC2                                = VALUE(FLOAT, "Correlation function constant i");
    LSD_CFC3                                = VALUE(FLOAT, "Correlation function constant i");

    LSD_AMPL2                               = VALUE(FLOAT, "Amplitude of the random perturbation");
    LSD_DTYPE                               = VALUE(FLOAT, "Distribution type");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    IOFLAG                                  = VALUE(INT, "IOFLAG");
    LSD_PerturbOpt                          = VALUE(INT, "Perturbation Options");
    _opt                                    = VALUE(STRING, "Option");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES
    LSD_Type                                = -1;
    LSD_PID                                 = -1;
    LSD_NSID                                = -1;
    LSD_SCL                                 = -1;
    LSD_CMP                                 = -1;
    LSD_ICOORD                              = -1;
    LSD_SYSTEM                              = -1;

    ArrayCount                              = -1;    
    LSD_AMPL                                = -1;
    LSD_XWL                                 = -1;
    LSD_XOFF                                = -1;
    LSD_YWL                                 = -1;
    LSD_YOFF                                = -1;
    LSD_ZWL                                 = -1;
    LSD_ZOFF                                = -1;

    LSD_FADE                                = -1;
    LSD_FNAME                               = -1;

    LSD_CSTYPE                              = -1;
    LSD_ELLIP1                              = -1;
    LSD_ELLIP2                              = -1;
    LSD_RND                                 = -1;

    LSD_CFTYPE                              = -1;
    LSD_CFC1                                = -1;
    LSD_CFC2                                = -1;
    LSD_CFC3                                = -1;

    LSD_AMPL2                               = -1;
    LSD_DTYPE                               = -1;

    //HM INTERNAL
    KEYWORD_STR                             = 9000;
    IOFLAG                                  = -1;
    LSD_PerturbOpt                          = -1;
    _opt                                    = -1;
}

CHECK(COMMON)
{
    LSD_RND                                 >= 0;
}

DEFAULTS(COMMON)
{
    LSD_Type                                = 1;
    LSD_SCL                                 = 1.0;
    LSD_CMP                                 = 7;
    LSD_AMPL                                = 1.0;
    LSD_FADE                                = 1.0;
    LSD_ELLIP1                              = 1.0;
    LSD_ELLIP2                              = 1.0;
    LSD_CFC1                                = 1.0;
    LSD_CFC2                                = 1.0;
    LSD_CFC3                                = 1.0;
    LSD_AMPL2                               = 1.0;
}

GUI(COMMON)
{
    RADIO(LSD_PerturbOpt, "Perturbation Option")
    {
       ADD(1, "1: MAT");
       ADD(2, "2: NODE");
    }
    ASSIGN(KEYWORD_STR, "*PERTURBATION");
    if(LSD_PerturbOpt == 1)
    {
        ASSIGN(KEYWORD_STR, "_MAT");
    }
    else if(LSD_PerturbOpt == 2)
    {
        ASSIGN(KEYWORD_STR, "_NODE");
    }

    RADIO(LSD_Type, "TYPE")
    {
        ADD(1, "Harmonic Field");
        ADD(2, "Fade out all perturbations at this node set");
        ADD(3, "Read perturbations from a file");
        ADD(4, "Spectral field");
    }
    if(LSD_PerturbOpt == 1)
    {
        DATA(LSD_PID,"PID");
    }
    else if(LSD_PerturbOpt == 2)
    {
        DATA(LSD_PID,"PID");
    }
    
    SCALAR(LSD_SCL, "SCL") { DIMENSION="DIMENSIONLESS"; }
    RADIO(LSD_CMP, "CMP")
    {
        ADD(1, "x coordinate");
        ADD(2, "y coordinate");
        ADD(3, "z coordinate");
        ADD(4, "x and y coordinate");
        ADD(5, "y and z coordinate");
        ADD(6, "z and x coordinate");
        ADD(7, "x, y, and z coordinate");
    }
    RADIO(LSD_ICOORD, "ICOORD")
    {
        ADD(0, "Global Cartesian");
        ADD(1, "Cartesian");
        ADD(2, "Cylindrical (computed and applied)");
        ADD(3, "Spherical (computed and applied)");
        ADD(-2, "Computed in cartesian but applied in cylindrical");
        ADD(-3, "Computed in cartesian but applied in spherical");
    }
    DATA(LSD_SYSTEM,"CID");
    if(LSD_Type == 1)
    {
        SIZE(ArrayCount);
        ARRAY(ArrayCount,"")
        {
            SCALAR(LSD_AMPL,"AMPL") { DIMENSION="DIMENSIONLESS"; } //check dimension
            SCALAR(LSD_XWL ,"XWL ") { DIMENSION="DIMENSIONLESS"; } //check dimension
            SCALAR(LSD_XOFF,"XOFF") { DIMENSION="DIMENSIONLESS"; } //check dimension
            SCALAR(LSD_YWL ,"YWL ") { DIMENSION="DIMENSIONLESS"; } //check dimension
            SCALAR(LSD_YOFF,"YOFF") { DIMENSION="DIMENSIONLESS"; } //check dimension
            SCALAR(LSD_ZWL ,"ZWL ") { DIMENSION="DIMENSIONLESS"; } //check dimension
            SCALAR(LSD_ZOFF,"ZOFF") { DIMENSION="DIMENSIONLESS"; } //check dimension
        }
    }
    else if (LSD_Type == 2)
    {
        SCALAR(LSD_FADE,"FADE") { DIMENSION="DIMENSIONLESS"; } //check dimension
    }
    else if (LSD_Type == 3)
    {
        SCALAR(LSD_FNAME,"FNAME") { DIMENSION="DIMENSIONLESS"; }
    }
    else if (LSD_Type == 4)
    {
        RADIO(LSD_CSTYPE, "CSTYPE")
        {
            ADD(1, "3D isotropic. The x, y and z correlations are described using one correlation function. Define CFC1");
            ADD(2, "3D product. The x, y and z correlations are described using a correlation function each. Define CFC1, CFC2 and CFC3");
            ADD(3, "2D isotropic. A correlation function describes the x correlation while the yz isotropic relationship is described using another correlation function. Define CFC1 and CFC2");
            ADD(4, "2D isotropic. The xz isotropic relationship is described using a correlation function, while another correlation function describes the ùë¶ correlation while. Define CFC1 and CFC2");
            ADD(5, "2D isotropic. The xz isotropic relationship is described using a correlation function, while another correlation function describes the ùëß correlation while. Define CFC1 and CFC2");
            ADD(6, "3D elliptic. Define CSE1, CSE2 and CFC1");
            ADD(7, "2D elliptic. A correlation function describes the X correlation while the yz elliptic relationship is described using another correlation function. Define CSE1 and CFC1");
            ADD(8, "2D elliptic. A correlation function describes the y correlation while the zx elliptic relationship is described using another correlation function. Define CSE1 and CFC1");
            ADD(9, "2D elliptic. The ùë•ùë¶ elliptic relationship is described using a correlation function, while another correlation function describes the ùëß correlation while. Define CSE1 and CFC1");
        }
        SCALAR(LSD_ELLIP1,"ELLIP1") { DIMENSION="DIMENSIONLESS"; } //check dimension
        SCALAR(LSD_ELLIP2,"ELLIP2") { DIMENSION="DIMENSIONLESS"; } //check dimension
        SCALAR(LSD_RND,"RND") { DIMENSION="DIMENSIONLESS"; } //check dimension
        RADIO(LSD_CFTYPE, "CFTYPE")
        {
            ADD(1, "Gaussian");
            ADD(2, "Exponential");
            ADD(3, "Exponential Cosine");
            ADD(4, "Rational");
            ADD(5, "Linear");
        }
        SCALAR(LSD_CFC1,"CFC1") { DIMENSION="DIMENSIONLESS"; }
        if(LSD_CSTYPE == 2 || LSD_CSTYPE == 3 || LSD_CSTYPE == 4 || LSD_CSTYPE == 5)
        {
            SCALAR(LSD_CFC2,"CFC2") { DIMENSION="DIMENSIONLESS"; }
        }
        if(LSD_CSTYPE == 2)
        {
            SCALAR(LSD_CFC3,"CFC3") { DIMENSION="DIMENSIONLESS"; }
        } 
    }
    else if (LSD_Type == 8)
    {
        SCALAR(LSD_AMPL2,"AMPL") { DIMENSION="DIMENSIONLESS"; }
        RADIO(LSD_DTYPE, "DTYPE")
        {
            ADD(0.0, "Uniform distribution between SCL √ó [0, AMPL]");
            ADD(1.0, "Uniform distribution between SCL √ó [‚àíAMPL, AMPL]");
        }
    }
}

// File format
FORMAT(Keyword971)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(LSD_PerturbOpt == 1)
        {
            //ASSIGN(KEYWORD_STR, "*PERTURBATION_MAT", EXPORT);
            HEADER("*PERTURBATION_MAT");
        }
        else if(LSD_PerturbOpt == 2)
        {
            //ASSIGN(KEYWORD_STR, "*PERTURBATION_NODE", EXPORT);
            HEADER("*PERTURBATION_NODE");
        }
    }
    else //IMPORT
    {
        HEADER("*PERTURBATION%-s", _opt);
        if(_opt == "_MAT")
        {
            ASSIGN(LSD_PerturbOpt, 1, IMPORT);
        }
        else if(_opt == "_NODE")
        {
            ASSIGN(LSD_PerturbOpt, 2, IMPORT);
        }
    }

    if(LSD_PerturbOpt == 1)
    {
        //Card 1
        COMMENT("$     TYPE       PID       SCL       CMP    ICOORD       CID");
        CARD("%10d%10d%10lg%10d%10d%10d",LSD_Type, LSD_PID, LSD_SCL, LSD_CMP, LSD_ICOORD, LSD_SYSTEM);
    }
    else if(LSD_PerturbOpt == 2)
    {
        //Card 1
        COMMENT("$     TYPE      NSID       SCL       CMP    ICOORD       CID");
        CARD("%10d%10d%10lg%10d%10d%10d",LSD_Type, LSD_NSID, LSD_SCL, LSD_CMP, LSD_ICOORD, LSD_SYSTEM);
    }

    if(LSD_Type == 1)
    {

        COMMENT("$     AMPL       XWL      XOFF       YWL      YOFF       ZWL      ZOFF");
        FREE_CARD_LIST(ArrayCount)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_AMPL,LSD_XWL,LSD_XOFF,LSD_YWL,LSD_YOFF,LSD_ZWL,LSD_ZOFF);
        }

    }
    else if (LSD_Type == 2)
    {
        COMMENT("$     FADE");
        CARD("%10lg",LSD_FADE);
    }
    else if (LSD_Type == 3)
    {
        COMMENT("$     FNAME");
        CARD("%-s",LSD_FNAME);
    }
    else if (LSD_Type == 4)
    {
        COMMENT("$   CSTYPE    ELLIP1    ELLIP2       RND");
        CARD("%10d%10lg%10lg%10d",LSD_CSTYPE,LSD_ELLIP1,LSD_ELLIP2,LSD_RND);

        if(LSD_CSTYPE == 1 || LSD_CSTYPE == 6 || LSD_CSTYPE == 7 || LSD_CSTYPE == 8 || LSD_CSTYPE == 9)
        {
            COMMENT("$   CFTYPE      CFC1");
            CARD("%10d%10lg",LSD_CFTYPE,LSD_CFC1);
        }
        else if(LSD_CSTYPE == 3 || LSD_CSTYPE == 4 || LSD_CSTYPE == 5)
        {
            COMMENT("$   CFTYPE      CFC1      CFC2");
            CARD("%10d%10lg%10lg",LSD_CFTYPE,LSD_CFC1,LSD_CFC2);
        }
        else if(LSD_CSTYPE == 2)
        {
            COMMENT("$   CFTYPE      CFC1      CFC2      CFC3");
            CARD("%10d%10lg%10lg%10lg",LSD_CFTYPE,LSD_CFC1,LSD_CFC2,LSD_CFC3);
        }
    }
}
