//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Generic cfg file for unknown options, which have the ID in the first data card.
// Derived from material law MAT_UNSUPPORTED
//

ATTRIBUTES(COMMON)
{
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    Number_of_datalines                     = SIZE("Number_of_datalines");
    arraydatalines                          = ARRAY[Number_of_datalines](STRING,  "");
    firstdataline                           = VALUE(STRING,  "Line1_Data");
//  mattype                                 = VALUE(STRING,  "type");
    TITLE                                   = VALUE(STRING, "title");
    IO_FLAG                                 = VALUE(INT, "IO");
    TEMP                                    = VALUE(INT, "TEMP VARIABLE");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    LSD_TitleOpt                            = 90;
    Num_Comments                            = 3101;
    Number_of_datalines                     = 5649;
    arraydatalines                          = 5650;
//    firstdataline                           = 5651;
//  mattype                                 = 5647;
    TITLE                                   = -1;
    IO_FLAG                                 = -1;
    TEMP                                    = -1;
}

DEFAULTS(COMMON)
{

}

GUI(COMMON)
{
    // ASSIGN(KEYWORD_STR, "*MAT_");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     

     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
     SCALAR(firstdataline);
     SIZE(Number_of_datalines);
     if(Number_of_datalines > 0)
     {
        ARRAY(Number_of_datalines,"")
        {
           SCALAR(arraydatalines);
        }
     }
}

// File format
FORMAT(Keyword971)
{
    ASSIGN(IO_FLAG,1,IMPORT);
    ASSIGN(IO_FLAG,2,EXPORT);

    //This should be done before writing header card.
    if(IO_FLAG == 2 && LSD_TitleOpt == TRUE)
    {
      //  ASSIGN(mattype,_COMBINE(mattype, "_TITLE"),EXPORT);
    }

    //Header card
    HEADER("%s",KEYWORD_STR);

    if(IO_FLAG == 1)
    {
        ASSIGN(LSD_TitleOpt,_FIND(KEYWORD_STR, "_TITLE"), IMPORT);
    }
    if(LSD_TitleOpt == TRUE)
    {
        CARD("%-80s", TITLE);
    }
    CARD("%10d%-.200s",_ID_,firstdataline);
    FREE_CARD_LIST(Number_of_datalines)
    {
        CARD("%-.200s",arraydatalines);
    }
}
