//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// initial_stress_beam
//
// --- initial_stress_shell_subobj.cfg ---

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES
    //Card 1
    eid                                 = VALUE(MULTIOBJECT,  "Element ID or shell set ID", "EID") { SUBTYPES = (/ELEMS,/SETS); }
    ngaussianpoints                     = VALUE(INT,    "Number of in plane integration points being output","NPLANE");
    nintegrationpoints                  = VALUE(INT,    "Number of integration points through the thickness","NTHICK");
    nhisv                               = SIZE("Number of additional history variables","NHISV");
    ntensr                              = SIZE("Number of components of tensor data taken from the element history variables stored","NTENSR");
    large                               = SIZE("Format size","LARGE");
    nthint                              = SIZE("Number of thermal integration points","NTHINT");
    nthhsv                              = SIZE("Number of thermal history variables per thermal integration point","NTHHSV");

    //Stress Card. Additional Card
    tot_nintegrationpoints              = SIZE("ngaussianpoints × nintegrationpoints");
    t                                   = ARRAY[tot_nintegrationpoints](FLOAT, "Parametric coordinate of through thickness integration point between -1 and 1 inclusive", "T");
    xx                                  = ARRAY[tot_nintegrationpoints](FLOAT, "Define the ij stress component", "SIGXX");
    yy                                  = ARRAY[tot_nintegrationpoints](FLOAT, "Define the ij stress component", "SIGYY");
    zz                                  = ARRAY[tot_nintegrationpoints](FLOAT, "Define the ij stress component", "SIGZZ");
    xy                                  = ARRAY[tot_nintegrationpoints](FLOAT, "Define the ij stress component", "SIGXY");
    yz                                  = ARRAY[tot_nintegrationpoints](FLOAT, "Define the ij stress component", "SIGYZ");
    zx                                  = ARRAY[tot_nintegrationpoints](FLOAT, "Define the ij stress component", "SIGZX");
    eps                                 = ARRAY[tot_nintegrationpoints](FLOAT, "Effective plastic strain", "EPS");

    //History Variable Cards. Additional Cards
    //No_addhist_var                      = SIZE("tot_nintegrationpoints × nhisv");
    hisv                                = ARRAY[tot_nintegrationpoints][nhisv](FLOAT, "Number of additional history variables","HISV");

    //History Variable Cards. Additional Cards
    //No_tensor_var                       = SIZE("tot_nintegrationpoints × ntensr");    
    tensor                              = ARRAY[tot_nintegrationpoints][ntensr](FLOAT, "Number of components of tensor data taken from the element history variables stored","TEN");

    //Thermal Time History Cards
    //No_hist_var                         = SIZE("nthint × nthhsv");    
    thhsv                               = ARRAY[nthint][nthhsv](FLOAT, "nth history variable at the thermal integration point");

    //HM INTERNAL
    solverkeyword                       = VALUE(STRING, "Solver Keyword");
    IOFLAG                              = VALUE(INT,    "IOFLAG");
    set_Option                          = VALUE(INT,    "Enable set keyword");
    option                              = VALUE(STRING, "Option keyword in IMPORT");
}


DEFAULTS(COMMON)
{
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES
    //Card 1
    IOFLAG                                  = -1;
    solverkeyword                           = -1;
}

GUI(COMMON)
{
    ASSIGN(solverkeyword, "*INITIAL_STRESS_SHELL");

    FLAG(set_Option, "set_Option");
    if(set_Option == 1)
    {
        ASSIGN(solverkeyword, "_SET");
    }
    
    DATA(eid);	
    SCALAR(ngaussianpoints);
    SCALAR(nintegrationpoints);

    SCALAR(nhisv);
    SCALAR(ntensr);
    SCALAR(large); 
    SCALAR(nthint);
    SCALAR(nthhsv);
    
    
    SIZE(tot_nintegrationpoints);
    ARRAY(tot_nintegrationpoints, "")
    {
        SCALAR(t);             
        SCALAR(xx);         
        SCALAR(yy);         
        SCALAR(zz);         
        SCALAR(xy);         
        SCALAR(yz);         
        SCALAR(zx);         
        SCALAR(eps);
    }
    /* will use ARRAY inside ARRAY */
    //SIZE(No_addhist_var);
    //ARRAY(No_addhist_var, "")
    //{
    //    SCALAR(hisv);
    //}
    
    //History Vari
    //SIZE(No_tensor_var); 
    //ARRAY(No_tensor_var, "")
    //{
    //    SCALAR(tensor);
    //}

    //SIZE(No_hist_var);
    //ARRAY( No_hist_var, "")
    //{ 
    //   SCALAR(thhsv);
    //}
}

// File format
FORMAT(Keyword971)
{
    //if(eid != NONE)
    //{
        //Card 1
        //COMMENT("$  EID/SID    NPLANE    NTHICK     NHISV    NTENSR     LARGE    NTHINT    NTHHSV");
        CARD("%10d%10d%10d%10d%10d%10d%10d%10d", eid, ngaussianpoints, nintegrationpoints, nhisv, ntensr, large, nthint, nthhsv);

        ASSIGN(tot_nintegrationpoints, _MUL(ngaussianpoints,nintegrationpoints), IMPORT);
        //ASSIGN(No_addhist_var,_MUL(tot_nintegrationpoints,nhisv), EXPORT);
        //ASSIGN(No_tensor_var,_MUL(tot_nintegrationpoints,ntensr), EXPORT);
        //ASSIGN(No_hist_var,_MUL(nthint,nthhsv),EXPORT);

        if(large == 0)
        {
            CARD_LIST(tot_nintegrationpoints)
            {
                //Stress Card
                //COMMENT("$        T     SIGXX     SIGYY     SIGZZ     SIGXY     SIGYZ     SIGZX       EPS");
                CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg", t, xx, yy, zz, xy, yz, zx, eps);

                //History Variable Cards
                if(nhisv > 0)
                {
                    //COMMENT("$    HISV1     HISV2     HISV3     HISV4     HISV5     HISV6     HISV7     HISV8");
                    CELL_LIST(nhisv, "%10lg", hisv);
                }
                //Tensor Cards
                if(ntensr > 0)
                {
                    //COMMENT("$    TENXX     TENYY     TENZZ     TENXY     TENYZ     TENZX");
                    CELL_LIST(ntensr, "%10lg", tensor,60);
                }
            }
        }
        else
        {
            CARD_LIST(tot_nintegrationpoints)
            {
                //Stress Card           
                //COMMENT("$              T           SIGXX           SIGYY           SIGZZ           SIGXY");
                CARD("%16lg%16lg%16lg%16lg%16lg", t, xx, yy, zz, xy);
                //COMMENT("$          SIGYZ           SIGZX             EPS");
                CARD("%16lg%16lg%16lg", yz, zx, eps);
            
                //History Variable Cards
                if(nhisv > 0)
                {
                    //COMMENT("$           HISV            HISV            HISV            HISV            HISV");
                    CELL_LIST(nhisv, "%16lg", hisv,80);
                }

                //Tensor Cards
                if(ntensr > 0)
                {
                    //COMMENT("$          TENXX           TENYY           TENZZ           TENXY           TENYZ");
                    CELL_LIST(ntensr, "%16lg", tensor,80);
                }
            }
        
            if(nthint > 0)  //
            {
                //Thermal Time History Cards
                CARD_LIST(nthint)
                {
                    //COMMENT("$         THHISV          THHISV          THHISV          THHISV          THHISV");
                    CELL_LIST(nthhsv, "%16lg", thhsv,80);
                }
            }
        }
    //}
}
