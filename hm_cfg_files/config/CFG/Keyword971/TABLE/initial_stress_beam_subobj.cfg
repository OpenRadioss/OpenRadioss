//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// initial_stress_beam
//
// --- initial_stress_beam_subobj.cfg ---

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES
    //Card 1
    //EID RULE NPTS LOCAL LARGE NHISV NAXES 
    eid                                     = VALUE(ELEMS,  "Element ID", "EID");
    //RULE not implemented yet
    rule                                    = VALUE(INT,    "Integration rule type number","RULE");
    nintegrationpoints                      = VALUE(INT,    "Number of integration points through the thickness","NPTS");
    local                                  = VALUE(INT,    "Flag for coordinate system of strain components","LOCAL");
    large                                   = SIZE("Format size","large");
    nhisv                                   = SIZE("Number of additional history variables","nhisv");
    naxes                                   = VALUE(INT,    "Number of variables giving beam local axes ","NAXES");
    //NAXES not implemented yet

    //Stress Card. Additional Card
    tot_nintegrationpoints                  = SIZE("nintegrationpoints");
    xx                                      = ARRAY[tot_nintegrationpoints](FLOAT, "Define the ij stress component", "SIGXX");
    yy                                      = ARRAY[tot_nintegrationpoints](FLOAT, "Define the ij stress component", "SIGYY");
    zz                                      = ARRAY[tot_nintegrationpoints](FLOAT, "Define the ij stress component", "SIGZZ");
    xy                                      = ARRAY[tot_nintegrationpoints](FLOAT, "Define the ij stress component", "SIGXY");
    yz                                      = ARRAY[tot_nintegrationpoints](FLOAT, "Define the ij stress component", "SIGYZ");
    zx                                      = ARRAY[tot_nintegrationpoints](FLOAT, "Define the ij stress component", "SIGZX");
    eps                                     = ARRAY[tot_nintegrationpoints](FLOAT, "Effective plastic strain", "EPS");

    ax                                      = ARRAY[12](DOUBLE,"local axes values","AX");

    //History Variable Cards. Additional Cards
    //No_addhist_var                          = SIZE("tot_nintegrationpoints × nhisv");
    hisv                              = ARRAY[tot_nintegrationpoints][nhisv](FLOAT, "Number of additional history variables","HISV");

    //HM INTERNAL
    solverkeyword                           = VALUE(STRING, "Solver Keyword");
    IOFLAG                                  = VALUE(INT,    "IOFLAG");
    set_Option                              = VALUE(INT,    "Enable set keyword");
    option                                  = VALUE(STRING, "Option keyword in IMPORT");
}


DEFAULTS(COMMON)
{
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES
    //Card 1
    IOFLAG                                  = -1;
	solverkeyword                           = -1;
}

GUI(COMMON)
{
    ASSIGN(solverkeyword, "*INITIAL_STRESS_BEAM");

    FLAG(set_Option, "set_Option");
    if(set_Option == 1)
    {
        ASSIGN(solverkeyword, "_SET");
    }

    DATA(eid);
    SCALAR(rule);
    SCALAR(nintegrationpoints);
    SCALAR(local);
    SCALAR(large); 
    SCALAR(nhisv);
    SCALAR(naxes);
    
    
    SIZE(tot_nintegrationpoints);
    ARRAY(tot_nintegrationpoints, "")
    {
        SCALAR(xx);         
        SCALAR(yy);         
        SCALAR(zz);         
        SCALAR(xy);         
        SCALAR(yz);         
        SCALAR(zx);         
        SCALAR(eps);
    }
    
    //SIZE(No_addhist_var);
    //ARRAY(No_addhist_var, "")
    //{
    //    SCALAR(hisv);
    //}

    ARRAY(12, "")
    {
        SCALAR(ax);
    }
}

// File format
FORMAT(Keyword971)
{
  /*  if(eid != NONE)
    {*/
        //Card 1
        // IVEFLG     IALEGP need to revisit for this
        //COMMENT("$  EID/SID     RULE     NPTS      LOCAL    LARGE     NHISV    NAXES");
        CARD("%10d%10d%10d%10d%10d%10d%10d", eid, rule,nintegrationpoints, local,large,nhisv,naxes);

        ASSIGN(tot_nintegrationpoints,nintegrationpoints, IMPORT);
        //ASSIGN(No_addhist_var,_MUL(tot_nintegrationpoints,nhisv), EXPORT);
    
        if(large == 0)
        {
           // COMMENT("$  F11/SIGXX  T11/SIGYY  M12/SIGZZ  M13/SIGXY  M22/SIGYZ  M23/SIGZX  PARM/EPS");
            CARD_LIST(tot_nintegrationpoints)
            {
                //Stress Card
                CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg", xx, yy, zz, xy, yz, zx, eps);
            }
        }
        else
        {
	        //COMMENT("$    F11/SIGXX       T11/SIGYY       M12/SIGZZ       M13/SIGXY       M22/SIGYZ");
            CARD_LIST(tot_nintegrationpoints)
            {
                //Stress Card           
                CARD("%16lg%16lg%16lg%16lg%16lg",xx, yy, zz, xy,yz);
                //COMMENT("$       M23/SIGZX        PARM/EPS          HISV1          HISV2          HISV3");
                CARD("%16lg%16lg%16lg", zx, eps,CELL_LIST(hisv));
            }
        }
        if(naxes == 12)
        {
            CELL_LIST(12,"%16lf",ax,80);
        }
   /* }*/
}
