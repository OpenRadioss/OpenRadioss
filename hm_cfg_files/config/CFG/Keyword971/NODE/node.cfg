//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// NODE
// 

ATTRIBUTES(COMMON) {
// INPUT ATTRIBUTES
    NB_NODE                               = SIZE("Node Number");
//    id                                    = ARRAY[NB_NODE](NODE,"Node identifier");
    id                                    = ARRAY[NB_NODE](INT,"Node identifier");
    globalx                               = ARRAY[NB_NODE](FLOAT,"X coordinate");
    globaly                               = ARRAY[NB_NODE](FLOAT,"Y coordinate");
    globalz                               = ARRAY[NB_NODE](FLOAT,"Z coordinate");
    TC                                    = ARRAY[NB_NODE](FLOAT,"Translational constraint");
    RC                                    = ARRAY[NB_NODE](FLOAT,"Rotational constraint");
// HM INTERNAL
    KEYWORD_STR                           = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                          = SIZE("NUM_COMMENTS");
    CommentEnumField                      = VALUE(INT,"User Comments");
    COMMENTS                              = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                        = 9000;
    COMMENTS                           = 5109;
    CommentEnumField                   = 7951;
    NUM_COMMENTS                       = 5110;
//
    NB_NODE                            = -1;
    id                                 = -1;
    globalx                            = -1;
    globaly                            = -1;
    globalz                            = -1;
    NB_NODE                            = -1;
    TC                                 = -1;
    RC                                 = -1;
}

CHECK(COMMON)
{

}

DEFAULTS(COMMON)
{

}

GUI(COMMON) {
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }

    ASSIGN(KEYWORD_STR, "*NODE");
    SIZE(NB_NODE) ;

    ARRAY(NB_NODE,"Node data")
    {
//         DATA(id) ;
         SCALAR(globalx) {DIMENSION="l";}
         SCALAR(globaly) {DIMENSION="l";}
         SCALAR(globalz) {DIMENSION="l";}
optional:
        
        RADIO(TC)
        {
            ADD(0.0, "0.0: no constraints");
            ADD(1.0, "1.0: constrained x displacement");
            ADD(2.0, "2.0: constrained y displacement");
            ADD(3.0, "3.0: constrained z displacement");
            ADD(4.0, "4.0: constrained x and y displacements");
            ADD(5.0, "5.0: constrained y and z displacements");
            ADD(6.0, "6.0: constrained z and x displacements");
            ADD(7.0, "7.0: constrained x, y, and z displacements");
        }
        
        RADIO(RC)
        {
            ADD(0.0, "0.0: no constraints");
            ADD(1.0, "1.0: constrained x rotation");
            ADD(2.0, "2.0: constrained y rotation");
            ADD(3.0, "3.0: constrained z rotation");
            ADD(4.0, "4.0: constrained x and y rotations");
            ADD(5.0, "5.0: constrained y and z rotations");
            ADD(6.0, "6.0: constrained z and x rotations");
            ADD(7.0, "7.0: constrained x, y, and z rotations");
        }
    }
}

// File format
FORMAT(Keyword971) 
{
    HEADER("*NODE");
    COMMENT("$    NID               X               Y               Z      TC      RC");
    FREE_CARD_LIST(NB_NODE)
    {
        CARD("%8d%16lg%16lg%16lg%16lg%16lg",id,globalx,globaly,globalz,TC,RC);
    }
}

