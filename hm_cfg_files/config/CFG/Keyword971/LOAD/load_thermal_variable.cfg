//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//LOAD_THERMAL_VARIABLE
//

ATTRIBUTES(COMMON) {
  engineering_type                                           = VALUE(UINT, "engineering type");
  distribution_table_count                                   = SIZE("Size of tabular");
  distribution                                               = VALUE(UINT, "Distribution");
  LOAD_THERMAL_VARIABLE_SET_EXPAND_SUBGRP                    = VALUE(SUBOBJECT, "");
  _EXPAND_SET                                                = VALUE(INT, "Expand set");
  _HAS_HEADER                                                = VALUE(BOOL, "Header card flag");
  //
  exempt_nodes                                               = VALUE(SETS, "Nodal set ID containing nodes that are exempted (optional)"){ SUBTYPES = (/SETS/SET_NODE_IDPOOL) ; }
  box_region_def                                             = VALUE(BLOCK, "All nodes in box which belong to NSID are initialized. Others are excluded");
  magnitude                                                  = VALUE(FLOAT, "Base Temperature");
  scaled_temp                                                = VALUE(FLOAT, "Scaled temperature.");
  exempt_node_scaled_temp                                    = VALUE(FLOAT, "Scaled temperature of the exempted nodes");
  exempt_node_temp                                           = VALUE(FLOAT, "Base temperature of the exempted nodes");
  exempt_node_temp_sf_evolve_fn                              = VALUE(FUNCT, "Load curve ID that multiplies the scaled temperature of the exempted nodes (optional)");
  dyn_relax_evolve_fn                                        = VALUE(FUNCT, "Load curve ID that multiplies the scaled temperature during the dynamic relaxation phase");
  exempt_node_dyn_rel_temp_sf_evolve_fn                      = VALUE(FUNCT, "Load curve ID that multiplies the scaled temperature of the exempted nodes (optional) during the dynamic relaxation phase");
  expanded_form_flag                                         = VALUE(BOOL, "");
  entityid                                                   = VALUE(SETS, "Nodal set ID containing nodes") { SUBTYPES = ( /SETS ) ; } 
  curveid                                                    = VALUE(FUNCT, "Load curve ID that multiplies the scaled temperature");
  entityid.type                                              = VALUE(UINT, "type");
  entityid.style                                             = VALUE(UINT, "style");
  location_unit_node                                         = ARRAY[distribution_table_count](MULTIOBJECT, "Nodal set ID containing nodes") { SUBTYPES = ( /SETS ) ; } 
}

DEFINITIONS(COMMON) {
    MAINS               = (location_unit_node);
    _GET_ENTITY_VALUE     = (entityid.type);
    _GET_ENTITY_VALUE     = (entityid.style);
}

DEFAULTS(COMMON) {
    _EXPAND_SET                   = 1;
    _HAS_HEADER                   = TRUE;
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    _EXPAND_SET                   = -1; 
}

GUI(COMMON) {
/*
    graphical SUPPORT("Nodal set containing nodes for initial temperature") {
    OBJECTS=(NODE);
    ADD(NSID);
   }   

   graphical SUPPORT("Nodal set exempted from the imposed temperature") {
      OBJECTS=(NODE);
      ADD(NSIDEX);
   }   

  graphical    DATA(BOXID); 


  SCALAR(TS) { DIMENSION = "THERMODYNAMIC TEMPERATURE" ;}
  SCALAR(TB) { DIMENSION = "THERMODYNAMIC TEMPERATURE" ;}
  mandatory:
  FUNCTION(LCID);
  
  optional:
  SCALAR(TSE) { DIMENSION = "THERMODYNAMIC TEMPERATURE" ;}
  SCALAR(TBE) { DIMENSION = "THERMODYNAMIC TEMPERATURE" ;}
  FUNCTION(LCIDE);  
  FUNCTION(LCIDR);  
  FUNCTION(LCIDEDR);  
*/
}


FORMAT(Keyword971)
{
    if(engineering_type > 0)
    {
        if(distribution == 1)
        {
            HEADER("*LOAD_THERMAL_VARIABLE_NODE");
            SUBOBJECTS(LOAD_THERMAL_VARIABLE_SET_EXPAND_SUBGRP,/SUBOBJECT/LOAD_THERMAL_VARIABLE_SET_EXPAND_SUBGRP);
        }
        else if(entityid.style == 2 || entityid.type != 1 || (distribution == 0 && expanded_form_flag == 0))
        {
            HEADER("*LOAD_THERMAL_VARIABLE");
            COMMENT("$     NSID    NSIDEX     BOXID");
            CARD("%10d%10d%10d",entityid,exempt_nodes,box_region_def);
            COMMENT("$       TS        TB      LCID       TSE       TBE     LCIDE     LCIDR   LCIDEDR");
            CARD("%10lg%10lg%10d%10lg%10lg%10d%10d%10d",scaled_temp,magnitude,curveid,exempt_node_scaled_temp,exempt_node_temp,exempt_node_temp_sf_evolve_fn,dyn_relax_evolve_fn,exempt_node_dyn_rel_temp_sf_evolve_fn);
        }
        else if(distribution == 0 && expanded_form_flag == 1)
        {
            HEADER("*LOAD_THERMAL_VARIABLE_NODE");
            COMMENT("$      NID        TS        TB      LCID");
            CARD_LIST(distribution_table_count)
            {
                CARD("%10d%10lg%10lg%10d",location_unit_node,scaled_temp,magnitude,curveid);
            }
        }
    }
}

