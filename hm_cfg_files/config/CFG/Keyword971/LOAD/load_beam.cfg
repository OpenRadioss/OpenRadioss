//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//LOAD_BEAM
//

ATTRIBUTES(COMMON) {
  engineering_type                                  = VALUE(UINT, "engineering type");
  distribution_table_count                          = SIZE("Size of tabular");
  distribution                                      = VALUE(UINT, "Distribution");
  LOAD_BEAM_SET_EXPAND_SUBGRP                       = VALUE(SUBOBJECT, "");
  _EXPAND_SET                                       = VALUE(INT, "Expand set");
  _HAS_HEADER                                       = VALUE(BOOL, "Header card flag");
  //
  entityid                                          = VALUE(SETS, "Node ID") { SUBTYPES = ( /SETS ) ; }
  magnitude                                         = VALUE(FLOAT, "Temperature at node");
  beam_axial_dir                                    = VALUE(INT, "Direction of applied load");
  expanded_form_flag                                = VALUE(BOOL, "expanded form flag");
  curveid                                           = VALUE(FUNCT, "Load curve");
  entityid.type                                     = VALUE(UINT, "type");
  entityid.style                                    = VALUE(UINT, "style");
  location_unit_element                             = ARRAY[distribution_table_count](MULTIOBJECT,  "EID") { SUBTYPES = ( /NODE , /ELEMS , /SETS , /COMPONENT , /LINE , /POINT ) ; } 
}

DEFINITIONS(COMMON) {
    MAINS                 = (location_unit_element);
    _GET_ENTITY_VALUE       = (entityid.type);
    _GET_ENTITY_VALUE       = (entityid.style);
}

DEFAULTS(COMMON) {
    _EXPAND_SET                   = 1; 
    _HAS_HEADER                   = TRUE;
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    _EXPAND_SET                   = -1; 
}

GUI(COMMON) {
  /*
graphical SUPPORT("Support") {
    OBJECTS=(BEAM,/PART/BEAM);
    ADD(ESID);
  }

  mandatory:
  RADIO(DAL) {
    ADD(1,"along r-axis of beam");
    ADD(2,"along s-axis of beam");
    ADD(3,"along t-axis of beam");
  }
  FUNCTION(LCID);
  optional:
  SCALAR(SF);
  */
}

FORMAT(Keyword971)
{
    if(engineering_type > 0)
    {
        if(distribution == 1)
        {
            HEADER("*LOAD_BEAM_ELEMENT");
            SUBOBJECTS(LOAD_BEAM_SET_EXPAND_SUBGRP,/SUBOBJECT/LOAD_BEAM_SET_EXPAND_SUBGRP);
        }
        else if(entityid.style == 2 || entityid.type != 2 || (distribution == 0 && expanded_form_flag == 0))
        {
            HEADER("*LOAD_BEAM_SET");
            COMMENT("$     ESID       DAL      LCID        SF");
            CARD("%10d%10d%10d%10lg",entityid,beam_axial_dir,curveid,magnitude);
        }
        else if(distribution == 0 && expanded_form_flag == 1)
        {
            HEADER("*LOAD_BEAM_ELEMENT");
            COMMENT("$      EID       DAL      LCID        SF");
            CARD_LIST(distribution_table_count)
            {
                CARD("%10d%10d%10d%10lg",location_unit_element,beam_axial_dir,curveid,magnitude);
            }
        }
    }
}
