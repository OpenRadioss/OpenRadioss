//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//LOAD_MASK
//

ATTRIBUTES(COMMON) {
    _EXPAND_SET                                       = VALUE(INT, "Expand set");
    _HAS_HEADER                                       = VALUE(BOOL, "Header card flag");

    //Card 1
    engineering_type                                  = VALUE(UINT, "engineering type");
    shell_part                                        = VALUE(COMPONENT, "PID");
    curveid                                           = VALUE(FUNCT, "LCID");
    motion_vec_dir                                    = VALUE(VECTOR, "VID1");
    pressure_lower_limit                              = VALUE(FLOAT, "OFF");
    box_region_def                                    = VALUE(BLOCK, "BOXID");
    pressure_mask_fn                                  = VALUE(FUNCT, "LCIDM");
    masking_fn_projection_vec                         = VALUE(VECTOR, "VID2");
    element_inclusion_option                          = VALUE(INT, "INOUT");
    timestep_offset                                   = VALUE(INT, "ICYCLE");
}

DEFAULTS(COMMON) {
   _EXPAND_SET                    = 1;
  _HAS_HEADER                     = TRUE;
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    _EXPAND_SET                   = -1;
}

GUI(COMMON) {
/*
  */
}

FORMAT(Keyword971)
{
    if(engineering_type > 0)
    {
        HEADER("*LOAD_MASK");
        COMMENT("$      PID      LCID      VID1       OFF     BOXID     LCIDM      VID2     INOUT");
        CARD("%10d%10d%10d%10lg%10d%10d%10d%10d",shell_part,curveid,motion_vec_dir,pressure_lower_limit,box_region_def,pressure_mask_fn,masking_fn_projection_vec,element_inclusion_option);
        COMMENT("$   ICYCLE");
        CARD("%10d",timestep_offset);
    }
}