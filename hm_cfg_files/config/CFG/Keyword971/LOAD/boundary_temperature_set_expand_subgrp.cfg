//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//BOUNDARY_TEMPERATURE_NON_UNIFORM
//

ATTRIBUTES(COMMON) {

//standard variables
  distribution_table_count                                      = SIZE("Size of tabular");
  
//Data names
  location_unit_node                                            = ARRAY[distribution_table_count](MULTIOBJECT, "GSETID") { SUBTYPES = ( /SETS ) ; }    
  magnitude                                                     = ARRAY[distribution_table_count](FLOAT, "Temperature at node");
  thk_shell_surf_temp                    = ARRAY[distribution_table_count](INT, "Scaled temperature.");
  curveid                                                       = ARRAY[distribution_table_count](FUNCT, "Load curve ID");
}

DEFINITIONS(COMMON) {
    MAINS               = (location_unit_node);
}

GUI(COMMON) {
/*
    DATA(NID);

   graphical FUNCTION(LCID) {    
      X_TITLE = "Time"; X_DIMENSION = "TIME";
      TITLE = "Load curve ID for temperature versus time"; 
      Y_TITLE = "Temperature"; Y_DIMENSION = "THERMODYNAMIC TEMPERATURE";
      Y_SCALING(CMULT);
   }    
   RADIO(LOC)
   {
    ADD(-1, "lower surface of thermal shell element");
    ADD( 0, "middle surface of thermal shell element");
    ADD( 1, "upper surface of thermal shell element");  
   }
   
   SCALAR(FID);
*/
}


FORMAT(Keyword971)
{
  COMMENT("$      NID     TLCID     TMULT       LOC");
  CARD_LIST(distribution_table_count)
  {          
    CARD("%10d%10d%10lf%10d",location_unit_node, curveid, magnitude, thk_shell_surf_temp);
  }  
 
}
  
  
  
  




