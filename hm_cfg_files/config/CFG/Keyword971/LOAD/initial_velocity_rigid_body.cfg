//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//INITIAL_VELOCITY_RIGID_BODY
//

ATTRIBUTES(COMMON) {
    _EXPAND_SET                         = VALUE(INT, "Expand set");

    inputsystem                         = VALUE(SYSTEM,"Local Coordinate System") ;
    vector_X                            = VALUE(FLOAT, "Initial translational velocity in x-direction");
    vector_Y                            = VALUE(FLOAT, "Initial translational velocity in y-direction");
    vector_Z                            = VALUE(FLOAT, "Initial translational velocity in z-direction");
    init_rot_vel_X                      = VALUE(FLOAT, "Initial rotational velocity about the x-axis");
    init_rot_vel_Y                      = VALUE(FLOAT, "Initial rotational velocity about the y-axis");
    init_rot_vel_Z                      = VALUE(FLOAT, "Initial rotational velocity about the z-axis");
    rigid_part                          = VALUE(COMPONENT, "PID");
    nodal_rigid_body                    = VALUE(ELEMENT, "PID");
    
    // HM internal
    rigidbody_option                    = VALUE(BOOL, "Rigid Body Option");
    engineering_type                    = VALUE(UINT, "engineering type");
    IO_FLAG                             = VALUE(INT,"Temporary flag");
    _opt                                = VALUE(STRING,       "Keyword Option");
    option                              = VALUE(INT,"Options");
}

DEFINITIONS(COMMON) {
    _TRIPLE                 = (vector_X,init_rot_vel_X);
}

DEFAULTS(COMMON) {
    _EXPAND_SET                   = 1;
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    _EXPAND_SET                         = -1;
    IO_FLAG                             = -1;
    _opt                                = -1;
    option                              = -1;
}

GUI(COMMON) {
  /*
  graphical SUPPORT("Nodes Selected") {
    OBJECTS=(NODE);
    ADD(NSID);
  }

  graphical    DATA(BOXID);
  
  
  RADIO(IRIGID_ID,"Overwrite rigid body velocities") {
          ADD( 0," 0: Don't overwrite");
          ADD( 1," 1: Part set with parts to overwrite");
          ADD(-1,"-1: *PART_INERTIA ... within BOXID");
          ADD(-2,"-2: All *PART_INERTIA ...");
  }
      
      
  if(IRIGID_ID > 0)
  {
      graphical SUPPORT("PSID") {
   	       OBJECTS=(PART);
   	       ADD(IRIGID);
      }
  }
//TOOL(ICID) ;
  
  SCALAR(VX)  { DIMENSION = "SPEED"; }
  SCALAR(VY)  { DIMENSION = "SPEED"; }
  SCALAR(VZ)  { DIMENSION = "SPEED"; }
  SCALAR(VXR) { DIMENSION = "ANGULAR SPEED"; }
  SCALAR(VYR) { DIMENSION = "ANGULAR SPEED"; }
  SCALAR(VZR) { DIMENSION = "ANGULAR SPEED"; }

  FLAG(EXFLAG) ;
  if(EXFLAG==1) {

  graphical SUPPORT("Exempted Nodes") {
    OBJECTS=(NODE);
    ADD(NSIDEX);
  }

  SCALAR(VXE) { DIMENSION = "SPEED"; }
  SCALAR(VYE) { DIMENSION = "SPEED"; }
  SCALAR(VZE) { DIMENSION = "SPEED"; }
  SCALAR(VXRE) { DIMENSION = "ANGULAR SPEED"; }
  SCALAR(VYRE) { DIMENSION = "ANGULAR SPEED"; }
  SCALAR(VZRE) { DIMENSION = "ANGULAR SPEED"; }
  }
  */
}

FORMAT(Keyword971)
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    if (engineering_type > 0)
    {
        HEADER("*INITIAL_VELOCITY_RIGID_BODY");
        COMMENT("$      PID        VX        VY        VZ       VXR       VYR       VZR      ICID");
        CARD("%10d%10d%10d%10d%10lg%10d%10lg%10lg", CELL_COND(if (rigidbody_option == 0) rigid_part;else nodal_rigid_body;), vector_X, vector_Y, vector_Z, init_rot_vel_X, init_rot_vel_Y, init_rot_vel_Z, inputsystem);
    }
    else if(IO_FLAG == 1) // IMPORT
    {
        ASSIGN(engineering_type, 1, IMPORT);
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10d", rigid_part, vector_X, vector_Y, vector_Z, init_rot_vel_X, init_rot_vel_Y, init_rot_vel_Z, inputsystem);
    }
}

