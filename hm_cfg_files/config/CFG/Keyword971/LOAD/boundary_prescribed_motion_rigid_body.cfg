//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//BOUNDARY_PRESCRIBED_MOTION_RIGID
//

ATTRIBUTES(COMMON) {
    //standard variables
    _EXPAND_SET                                = VALUE(INT, "Expand set");
    _HAS_HEADER                                = VALUE(BOOL, "Header card flag");

    engineering_type                           = VALUE(UINT, "engineering type");
    displayname                                = VALUE(STRING, "Heading");
    //Data names
    magnitude                                  = VALUE(FLOAT, "Load curve scale factor");
    load_dof                                   = VALUE(INT, "Applicable degrees of freedom");
    motion_type                                = VALUE(INT, "Velocity/Acceleration/Displacement flag");
    curveid                                    = VALUE(FUNCT, "Load curve ID to define motion value versus time");    
    motion_vec_dir                             = VALUE(VECTOR, "Vector ID for DOF values of 4 or 8"); 
    deactivation_time                          = VALUE(FLOAT,"Time imposed motion/constraint is removed");
    activation_time                            = VALUE(FLOAT,"Time imposed motion/constraint is activated");
    keyword_name                               = VALUE(BOOL, "Title");
    motion_rigid_local_option                  = VALUE(BOOL, "Local option");
    rel_disp_ref_body                          = VALUE(COMPONENT, "Main rigid body for measuring the relative displacement");
    plane_node1                                = VALUE(NODE, "Optional orientation node,n1,for relative displacement");
    plane_node2                                = VALUE(NODE, "Optional orientation node,n2,for relative displacement");
    rigidbody_option                           = VALUE(BOOL, "Rigid Body Option");
    rigid_part                                 = VALUE(COMPONENT, "PID");
    nodal_rigid_body                           = VALUE(ELEMENT, "PID");
    BPM_OFFSET1                                = VALUE(FLOAT,        "Offset for DOF types 9 - 11 (y, x, z direction)");
    BPM_OFFSET2                                = VALUE(FLOAT,        "Offset for DOF types 9 - 11 (z, x, y direction)");
    
    empty_string                               = VALUE(STRING, "Used as a local variable for free format case)");
    IO_FLAG                                    = VALUE(INT,"Temporary flag");
    _opt                                       = VALUE(STRING,       "Keyword Option");
    option                                     = VALUE(INT,"Options");
}

DEFINITIONS(COMMON) {
}

DEFAULTS(COMMON) {
    _EXPAND_SET                   = 1;
    empty_string                  = "";
    option                        = 0;
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    _EXPAND_SET                             = -1; 
    IO_FLAG                                 = -1;
    _opt                                    = -1;
    option                                  = -1;
    BPM_OFFSET1                             = 4101;
    BPM_OFFSET2                             = 4102;
    keyword_name                            = 0;
}

GUI(COMMON) {
/*
*/
}


FORMAT(Keyword971)
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    if (engineering_type > 0)
    {
        if(keyword_name != 0)
        {
            if(motion_rigid_local_option != 0)
            {
                HEADER("*BOUNDARY_PRESCRIBED_MOTION_RIGID_LOCAL_ID");
            }
            else
            {
                HEADER("*BOUNDARY_PRESCRIBED_MOTION_RIGID_ID");
            }
            COMMENT("$       IDHEADING");
            CARD("%10d%-70s",_ID_, displayname);
        }
        else
        {
            if(motion_rigid_local_option != 0)
            {
                HEADER("*BOUNDARY_PRESCRIBED_MOTION_RIGID_LOCAL");
            }
            else
            {
                HEADER("*BOUNDARY_PRESCRIBED_MOTION_RIGID");
            }
        }
        COMMENT("$   TYPEID       DOF       VAD      LCID        SF       VID     DEATH     BIRTH");
            if((load_dof==4) || (load_dof==8))
            {
                CARD("%10d%10d%10d%10d%10lg%10d%10lg%10lg", CELL_COND(if (rigidbody_option == 0) rigid_part;else nodal_rigid_body;), load_dof, motion_type, curveid, magnitude, motion_vec_dir, deactivation_time, activation_time);
            }
            else
            {
                CARD("%10d%10d%10d%10d%10lg%10s%10lg%10lg", CELL_COND(if (rigidbody_option == 0) rigid_part;else nodal_rigid_body;), load_dof, motion_type, curveid, magnitude, empty_string, deactivation_time, activation_time);
            }
            if(motion_type == 4)
            {
                COMMENT("$  OFFSET1   OFFSET2       MRB     NODE1     NODE2");
                CARD("%10s%10s%10d%10d%10d", empty_string, empty_string, rel_disp_ref_body, plane_node1, plane_node2);
            }
            /*else if(load_dof == -9 || load_dof == -10 || load_dof == -11 || load_dof == 9 || load_dof == 10 || load_dof == 11 )
            {
                CARD("%10lg%10lg%10d%10d%10d",  BPM_OFFSET1, BPM_OFFSET2, rel_disp_ref_body, plane_node1, plane_node2);
            }*/
    }
    else if(IO_FLAG == 1) // IMPORT
    {
        HEADER("*BOUNDARY_PRESCRIBED_MOTION_RIGID%s", _opt);
        ASSIGN(option,   _FIND(_opt, "_LOCAL"), IMPORT);
        if(option == 1)
        {
            ASSIGN(motion_rigid_local_option, 1, IMPORT);
        }
        ASSIGN(option,  _FIND(_opt, "_ID"), IMPORT);
        if(option == 1)
        {
            ASSIGN(keyword_name, 1, IMPORT);
        }
        /*if(keyword_name == 1)
        {
            CARD("%10d%-70s",_ID_, displayname);
        }*/
        CARD("%10d%10d%10d%10d%10lg%10d%10lg%10lg",rigid_part, load_dof, motion_type, curveid, magnitude, motion_vec_dir, deactivation_time, activation_time);
        //Additional Card 3
        if(load_dof == -9 || load_dof == -10 || load_dof == -11 || load_dof == 9 || load_dof == 10 || load_dof == 11 )
        {
            CARD("%10lg%10lg%10d%10d%10d",  BPM_OFFSET1, BPM_OFFSET2, rel_disp_ref_body, plane_node1, plane_node2);
        }
        else if(motion_type == 4)
        {
            CARD("%10s%10s%10d%10d%10d", empty_string, empty_string, rel_disp_ref_body, plane_node1, plane_node2);
        }
        ASSIGN(engineering_type, 1, IMPORT);
        ASSIGN(empty_string, , IMPORT);
        ASSIGN(displayname, TITLE, IMPORT);
    }
}
  









