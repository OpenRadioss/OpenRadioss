//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//LOAD_SEGMENT
//

ATTRIBUTES(COMMON) {
    engineering_type                                  = VALUE(UINT, "engineering type");
    distribution_table_count                          = SIZE("Size of tabular");
    distribution                                      = VALUE(UINT, "Distribution");
    LOAD_SEGMENT_SET_EXPAND_SUBGRP                    = VALUE(SUBOBJECT, "");
    displayname                                       = VALUE(STRING, "Heading");
    _HAS_HEADER                                       = VALUE(BOOL, "Header card flag");
    //
    entityid                                          = VALUE(SETS, "Node ID") { SUBTYPES = ( /ELEMS , /SETS ) ; }
    magnitude                                         = VALUE(FLOAT, "Temperature at node");
    expanded_form_flag                                = VALUE(BOOL, "expanded form flag");
    keyword_name                                      = VALUE(BOOL, "Title");
    rgd_bdy_vel_opt_overwrite                         = VALUE(INT, "Overwrite vel of all *PART_INERTIA and *CNRB");
    activation_time                                   = VALUE(FLOAT,"Time imposed motion/constraint is activated");
    curveid                                           = VALUE(FUNCT, "Load curve");
    location_unit_facet                               = ARRAY[distribution_table_count](MULTIOBJECT,  "EID") { SUBTYPES = ( /ELEMS , /SETS ) ; } 
    os_g1                                             = ARRAY[distribution_table_count](NODE, "G1");
    os_g2                                             = ARRAY[distribution_table_count](NODE, "G2");
    os_g3                                             = ARRAY[distribution_table_count](NODE, "G3");
    os_g4                                             = ARRAY[distribution_table_count](NODE, "G4");
    entityid.cardimage                                = VALUE(STRING, "cardimage");
    entityid.style                                    = VALUE(UINT, "style");
    entityid.type                                     = VALUE(UINT, "type");
}

DEFINITIONS(COMMON) {
    MAINS                 = (location_unit_facet);
    GET_ALL_ELEMENT_NODES   = (entityid, os_g1,os_g2,os_g3,os_g4);
    _GET_ENTITY_VALUE       = (entityid.cardimage);
    _GET_ENTITY_VALUE       = (entityid.style);
    _GET_ENTITY_VALUE       = (entityid.type);
}

DEFAULTS(COMMON) {
   _HAS_HEADER                   = TRUE;
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    LOAD_SEGMENT_SET_EXPAND_SUBGRP       = -1;
}

GUI(COMMON) {
  /*
  mandatory:
   graphical SUPPORT("Support") {
     OBJECTS=(SEGMENT,SHELL,SH3N,PART);
     ADD(SSID);
  }
  optional:
//FLAG(LCID_FLAG);
//if(LCID_FLAG==0) {
  mandatory:
    FUNCTION(LCID_FUNC);
//}
//if(LCID_FLAG==1) {
//  RADIO(LCID_SCAL) {
//    ADD(-1, "-1");
//    ADD(-2, "-2");
//  } 
//}
  optional:
  SCALAR(SF);
  SCALAR(AT){ DIMENSION = "TIME"; } 
  */
}

FORMAT(Keyword971)
{
    if (engineering_type > 0)
    {
        if(distribution == 1)
        {
            SUBOBJECTS(LOAD_SEGMENT_SET_EXPAND_SUBGRP,/SUBOBJECT/LOAD_SEGMENT_SET_EXPAND_SUBGRP);
        }
        else if(entityid.style == 2 || entityid.type != 2 || (distribution == 0 && expanded_form_flag == 0))
        {
            if(keyword_name != 0)
            {
                HEADER("*LOAD_SEGMENT_SET_ID");
                COMMENT("$       IDHEADING");
                CARD("%10d%-70s",_ID_, displayname);
            }
            else
            {
                HEADER("*LOAD_SEGMENT_SET");
            }
            COMMENT("$     SSID      LCID        SF        AT");
            if(rgd_bdy_vel_opt_overwrite >= 0)
            {
                CARD("%10d%10d%10lg%10lg",entityid,curveid,magnitude,activation_time);
            }
            else
            {
                CARD("%10d%10d%10lg%10lg",entityid,rgd_bdy_vel_opt_overwrite,magnitude,activation_time);
            }
        }
        else if(distribution == 0 && expanded_form_flag == 1)
        {
            if(keyword_name != 0 && distribution_table_count == 1)
            {
                HEADER("*LOAD_SEGMENT_ID");
                COMMENT("$       IDHEADING");
                CARD("%10d%-70s",_ID_, displayname);
            }
            else
            {
                HEADER("*LOAD_SEGMENT");
            }
            COMMENT("$     LCID        SF        AT        N1        N2        N3        N4");
            CARD_LIST(distribution_table_count)
            {
                if(rgd_bdy_vel_opt_overwrite >= 0)
                {
                    CARD("%10d%10lf%10lf%10d%10d%10d%10d",curveid,magnitude,activation_time,os_g1,os_g2,os_g3,os_g4);
                }
                else
                {
                    CARD("%10d%10lf%10lf%10d%10d%10d%10d",rgd_bdy_vel_opt_overwrite,magnitude,activation_time,os_g1,os_g2,os_g3,os_g4);
                }
            }
        }
    }
}
