//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//BOUNDARY_PRESCRIBED_MOTION_DISPLACEMENT
//

ATTRIBUTES(COMMON) {
  //standard variables
  distribution_table_count    = SIZE("Size of tabular");
  
  //Data names
  location_unit_node                            = ARRAY[distribution_table_count](MULTIOBJECT, "GSETID") { SUBTYPES = ( /SETS ) ; }
  magnitude                                     = ARRAY[distribution_table_count](FLOAT, "Load curve scale factor");
  load_dof                                      = VALUE(INT, "Applicable degrees of freedom");
  motion_type                                   = VALUE(INT, "Velocity/Acceleration/Displacement flag");
  curveid                                       = ARRAY[distribution_table_count](FUNCT, "Load curve ID to define motion value versus time");    
  motion_vec_dir                                = ARRAY[distribution_table_count](VECTOR, "Vector ID for DOF values of 4 or 8"); 
  deactivation_time                             = ARRAY[distribution_table_count](FLOAT,"Time imposed motion/constraint is removed");
  activation_time                               = ARRAY[distribution_table_count](FLOAT,"Time imposed motion/constraint is activated");
  keyword_name                                  = ARRAY[distribution_table_count](BOOL, "Title");
  plane_axis_coord1                             = ARRAY[distribution_table_count](FLOAT, "Offset for DOF types 9-11 (y,z,x direction)"); 
  plane_axis_coord2                             = ARRAY[distribution_table_count](FLOAT, "Offset for DOF types 9-11 (z,x,y direction)");

  empty_string                                  = VALUE(STRING, "Used as a local variable for free format case)");
}

DEFINITIONS(COMMON) {
    MAINS               = (location_unit_node);
}

DEFAULTS(COMMON) {
   empty_string           = "";
}

GUI(COMMON) {
/*
  mandatory:
  DATA(NODE);
  
  RADIO(DOF) {
    ADD(1, "x-translational degree-of-freedom");
    ADD(2, "y-translational degree-of-freedom");
    ADD(3, "z-translational degree-of-freedom");
    ADD(4, "translational motion in direction given by VID. Movement on the plane normal to the vector is permitted");
    ADD(-4, "translational motion in direction given by VID. Movement on the plane normal to the vector is not permitted");
    ADD(5, "x-rotational degree of freedom");
    ADD(6, "y-rotational degree of freedom");
    ADD(7, "z-rotational degree of freedom");
    ADD(8, "rotational motion about a vector parallel to vector VID. Rotation about the normal axis is permitted");
    ADD(-8, "rotational motion about a vector parallel to vector VID. Rotation about the normal axis is not permitted");
    ADD(9, "y/z degrees-of-freedom. Radial motion is not permitted");
    ADD(-9, "y/z degrees-of-freedom. Radial motion is permitted");
    ADD(10, "z/x degrees-of-freedom. Radial motion is not permitted");
    ADD(-10, "z/x degrees-of-freedom. Radial motion is permitted");
    ADD(11, "x/y degrees-of-freedom. Radial motion is not permitted");
    ADD(-11, "x/y degrees-of-freedom. Radial motion is permitted");
  }
  optional:
  RADIO(VAD) {
    ADD(2, "displacement (rigid bodies and nodes)");
    ADD(4, "relative displacement (rigid bodies only)");
  }
  mandatory: 
  FUNCTION(LCID){X_TITLE="time";Y_TITLE="motion value";}
  optional:
  SCALAR(SF);
  if((DOF==4) || (DOF==8) || (DOF==-4) || (DOF==-8))
    {
       mandatory:
       DATA(VID);
  }
       optional:
  SCALAR(DEATH) {DIMENSION = "TIME"; }
  SCALAR(BIRTH) {DIMENSION = "TIME"; }
  
  if((DOF==9) || (DOF==10) || (DOF==11) || (DOF==-9) || (DOF==-10)|| (DOF==-11)) {
    SCALAR(OFFSET1);
    SCALAR(OFFSET2);
  }
  
  if(VAD == 4) {
    DATA(MRB) { SUBTYPES=(/MAT/MAT_RIGID); }  
   
    DATA(NODE1);
    DATA(NODE2);
  }
*/
}


FORMAT(Keyword971)
{
    COMMENT("$   TYPEID       DOF       VAD      LCID        SF       VID     DEATH     BIRTH");
    CARD_LIST(distribution_table_count)
    {
        if((load_dof==4) || (load_dof==-4) || (load_dof==8) || (load_dof==-8))
        {
            CARD("%10d%10d%10d%10d%10lg%10d%10lg%10lg",location_unit_node,load_dof,motion_type,curveid,magnitude,motion_vec_dir,deactivation_time,activation_time);
        }
        else
        {
            CARD("%10d%10d%10d%10d%10lg%10s%10lg%10lg",location_unit_node,load_dof,motion_type,curveid,magnitude,empty_string,deactivation_time,activation_time);
        }
        if((load_dof==9) || (load_dof==10) || (load_dof==11) || (load_dof==-9) || (load_dof==-10) || (load_dof==-11))
        {
            CARD("%10d%10d", plane_axis_coord1,plane_axis_coord2);
        }
    }
}


