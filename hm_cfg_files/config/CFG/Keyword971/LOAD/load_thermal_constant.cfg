//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//LOAD_THERMAL_CONSTANT
//

ATTRIBUTES(COMMON) {
  engineering_type                                  = VALUE(UINT, "engineering type");
  distribution_table_count                          = SIZE("Size of tabular");
  distribution                                      = VALUE(UINT, "Distribution");
  LOAD_THERMAL_CONSTANT_SET_EXPAND_SUBGRP           = VALUE(SUBOBJECT, "");
  _EXPAND_SET                                       = VALUE(INT, "Expand set");
  _HAS_HEADER                                       = VALUE(BOOL, "Header card flag");
  //
  exempt_nodes                                      = VALUE(SETS, "Nodal set exempted from the imposed temperature"){ SUBTYPES = (/SETS/SET_NODE_IDPOOL) ; }
  box_region_def                                    = VALUE(BLOCK, "Box selection");
  magnitude                                         = VALUE(FLOAT, "Temperature");
  exempt_node_temp                                  = VALUE(FLOAT, "Temperature of exempted nodes");
  expanded_form_flag                                = VALUE(BOOL, "");
  entityid                                          = VALUE(SETS, "GSETID") { SUBTYPES = ( /SETS ) ; }
  entityid.type                                     = VALUE(UINT, "type");
  entityid.style                                    = VALUE(UINT, "style");
  location_unit_node                                = ARRAY[distribution_table_count](MULTIOBJECT, "GSETID") { SUBTYPES = ( /SETS ) ; } 
}

DEFINITIONS(COMMON) {
    MAINS               = (location_unit_node);
    _GET_ENTITY_VALUE     = (entityid.type);
    _GET_ENTITY_VALUE     = (entityid.style);
}

DEFAULTS(COMMON) {
  // T = 0.0;
   //TE = 0.0;
   _EXPAND_SET                   = 1; 
   _HAS_HEADER                   = TRUE;
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    _EXPAND_SET                   = -1; 
}

GUI(COMMON) {
/*
   optional:
   graphical SUPPORT("Nodal set containing nodes for initial temperature") {
      OBJECTS=(NODE);
      ADD(NSID);
   }
   
   graphical SUPPORT("Nodal set exempted from the imposed temperature") {
      OBJECTS=(NODE);
      ADD(NSIDEX);
   }
   graphical    DATA(BOXID);   
   SCALAR(T) { DIMENSION = "THERMODYNAMIC TEMPERATURE" ;}  
   SCALAR(TE) { DIMENSION = "THERMODYNAMIC TEMPERATURE" ;}
*/
}


FORMAT(Keyword971)
{
    if(engineering_type > 0)
    {
        if(distribution == 1)
        {
            HEADER("*LOAD_THERMAL_CONSTANT_NODE");
            SUBOBJECTS(LOAD_THERMAL_CONSTANT_SET_EXPAND_SUBGRP,/SUBOBJECT/LOAD_THERMAL_CONSTANT_SET_EXPAND_SUBGRP);
        }
        else if(entityid.style == 2 || entityid.type != 1 || (distribution == 0 && expanded_form_flag == 0))
        {
            HEADER("*LOAD_THERMAL_CONSTANT");
            COMMENT("$     NSID    NSIDEX     BOXID");
            CARD("%10d%10d%10d",entityid,exempt_nodes,box_region_def);
            COMMENT("$        T        TE");
            CARD("%10lg%10lg",magnitude,exempt_node_temp);
        }
        else if(distribution == 0 && expanded_form_flag == 1)
        {
            HEADER("*LOAD_THERMAL_CONSTANT_NODE");
            COMMENT("$      NID         T");
            CARD_LIST(distribution_table_count)
            {
                CARD("%10d%10lg",location_unit_node,magnitude);
            }
        }
    }
}

