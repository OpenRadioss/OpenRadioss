//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//LOAD_GRAVITY_PART_SET
//

ATTRIBUTES(COMMON) {
    _HAS_HEADER                                                        = VALUE(BOOL, "Header card flag");

    engineering_type                                                   = VALUE(UINT, "engineering type");
    distribution_table_count                                           = SIZE("Size of tabular");
    //Card 1
    entityid                                                           = VALUE(MULTIOBJECT,  "G1") { SUBTYPES = ( /NODE, /ELEMS, /SETS, /COMPONENT, /LINE, /POINT  ) ;  }
    expanded_form_flag                                                 = VALUE(BOOL, "expanded form flag");
    crash_dir_flag                                                     = VALUE(UINT, "Direction Selection");
    load_dof                                                           = VALUE(INT, "DOF");
    vector_X                                                           = VALUE(FLOAT, "Direction X");
    vector_Y                                                           = VALUE(FLOAT, "Direction Y");
    vector_Z                                                           = VALUE(FLOAT, "Direction Z");
    entity_select_option                                               = VALUE(BOOL, "Select Curve");
    curveid                                                            = VALUE(FUNCT, "LC");
    magnitude                                                          = VALUE(FLOAT, "ACCEL");
    dyn_relax_evolve_fn                                                = VALUE(FUNCT, "LCIDR");
    add_part_construct_stage                                           = VALUE(INT, "STGA");
    rem_part_construct_stage                                           = VALUE(INT, "STGR");
    entityid.type                                                      = VALUE(UINT, "type");
    entityid.style                                                     = VALUE(UINT, "style");

    location_unit_node                                                 = ARRAY[distribution_table_count](MULTIOBJECT, "Part set ID") { SUBTYPES = ( /SETS ) ; }

    local_dof                                                          = VALUE(INT, "DOF");
    local_magnitude                                                    = VALUE(FLOAT, "ACCEL");
    local_zero                                                         = VALUE(INT, "Zero");
}

DEFINITIONS(COMMON) {
    MAINS                 = (location_unit_node);
    _TRIPLE                 = (vector_X);
    _GET_ENTITY_VALUE       = (entityid.type);
    _GET_ENTITY_VALUE       = (entityid.style);
}

DEFAULTS(COMMON) {
    _HAS_HEADER             = TRUE;
    local_dof               = 0;
    local_magnitude         = 0;
    local_zero              = 0;
}

GUI(COMMON) {
/*
  */
}

FORMAT(Keyword971)
{
    ASSIGN(local_zero, 0, EXPORT);
    if (engineering_type > 0 && crash_dir_flag == 0)
    {
        if (entityid.style == 2 || entityid.type != 3 || expanded_form_flag == 0)
        {
            HEADER("*LOAD_GRAVITY_PART_SET");
            COMMENT("$     PSID       DOF        LC     ACCEL      LCDR      STGA      STGR");
            CARD("%10d%10d%10d%10lg%10d%10d%10d", entityid, load_dof, CELL_COND(if(entity_select_option == 1) curveid;else local_zero;), magnitude, dyn_relax_evolve_fn, add_part_construct_stage, rem_part_construct_stage);
        }
        else
        {
            HEADER("*LOAD_GRAVITY_PART");
            COMMENT("$      PID       DOF        LC     ACCEL      LCDR      STGA      STGR");
            CARD_LIST(distribution_table_count)
            {
                CARD("%10d%10d%10d%10lg%10d%10d%10d", location_unit_node, load_dof, CELL_COND(if(entity_select_option == 1) curveid;else local_zero;), magnitude, dyn_relax_evolve_fn, add_part_construct_stage, rem_part_construct_stage);
            }
        }
    }
    else if (engineering_type > 0 && crash_dir_flag == 1)
    {
        if (entityid.style == 2 || entityid.type != 3 || expanded_form_flag == 0)
        {
            if (vector_X != 0 || vector_Y != 0 || vector_Z != 0)
            {
                HEADER("*LOAD_GRAVITY_PART_SET");
                COMMENT("$     PSID       DOF        LC     ACCEL      LCDR      STGA      STGR");
                if(vector_X != 0)
                {
                    ASSIGN(local_dof, 1, EXPORT);
                    ASSIGN(local_magnitude, _MUL(magnitude, vector_X), EXPORT);
                    CARD("%10d%10d%10d%10lg%10d%10d%10d",entityid, local_dof, CELL_COND(if(entity_select_option == 1) curveid;else local_zero;), local_magnitude, dyn_relax_evolve_fn, add_part_construct_stage, rem_part_construct_stage);
                }
                if(vector_Y != 0)
                {
                    ASSIGN(local_dof, 2, EXPORT);
                    ASSIGN(local_magnitude, _MUL(magnitude, vector_Y), EXPORT);
                    CARD("%10d%10d%10d%10lg%10d%10d%10d",entityid, local_dof, CELL_COND(if(entity_select_option == 1) curveid;else local_zero;), local_magnitude, dyn_relax_evolve_fn, add_part_construct_stage, rem_part_construct_stage);
                }
                if(vector_Z != 0)
                {
                    ASSIGN(local_dof, 3, EXPORT);
                    ASSIGN(local_magnitude, _MUL(magnitude, vector_Z), EXPORT);
                    CARD("%10d%10d%10d%10lg%10d%10d%10d",entityid, local_dof, CELL_COND(if(entity_select_option == 1) curveid;else local_zero;), local_magnitude, dyn_relax_evolve_fn, add_part_construct_stage, rem_part_construct_stage);
                }
            }
        }
        else
        {
            if (vector_X != 0 || vector_Y != 0 || vector_Z != 0)
            {
                HEADER("*LOAD_GRAVITY_PART");
                COMMENT("$      PID       DOF        LC     ACCEL      LCDR      STGA      STGR");
                CARD_LIST(distribution_table_count)
                {
                    if(vector_X != 0)
                    {
                        ASSIGN(local_dof, 1, EXPORT);
                        ASSIGN(local_magnitude, _MUL(magnitude, vector_X), EXPORT);
                        CARD("%10d%10d%10d%10lg%10d%10d%10d", location_unit_node, local_dof, CELL_COND(if(entity_select_option == 1) curveid;else local_zero;), local_magnitude, dyn_relax_evolve_fn, add_part_construct_stage, rem_part_construct_stage);
                    }
                    if(vector_Y != 0)
                    {
                        ASSIGN(local_dof, 2, EXPORT);
                        ASSIGN(local_magnitude, _MUL(magnitude, vector_Y), EXPORT);
                        CARD("%10d%10d%10d%10lg%10d%10d%10d", location_unit_node, local_dof, CELL_COND(if(entity_select_option == 1) curveid;else local_zero;), local_magnitude, dyn_relax_evolve_fn, add_part_construct_stage, rem_part_construct_stage);
                    }
                    if(vector_Z != 0)
                    {
                        ASSIGN(local_dof, 3, EXPORT);
                        ASSIGN(local_magnitude, _MUL(magnitude, vector_Z), EXPORT);
                        CARD("%10d%10d%10d%10lg%10d%10d%10d", location_unit_node, local_dof, CELL_COND(if(entity_select_option == 1) curveid;else local_zero;), local_magnitude, dyn_relax_evolve_fn, add_part_construct_stage, rem_part_construct_stage);
                    }
                }
            }
        }
    }
}

