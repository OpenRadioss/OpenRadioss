//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//BOUNDARY_SPC
//

ATTRIBUTES(COMMON) {
    BOUNDARY_SPC_SET_EXPAND_SUBGRP            = VALUE(SUBOBJECT, "");
    _EXPAND_SET                               = VALUE(INT, "Expand set");
    _HAS_HEADER                               = VALUE(BOOL, "Header card flag");

    engineering_type                          = VALUE(UINT, "engineering type");
    distribution_table_count                  = SIZE("Size of tabular");
    distribution                              = VALUE(UINT, "Distribution");
    displayname                               = VALUE(STRING, "Heading");
    entityid                                  = VALUE(SETS, "Node ID") { SUBTYPES = ( /SETS ) ; }
    magnitude                                 = VALUE(FLOAT, "Temperature at node");
    inputsystem                               = VALUE(SYSTEM,"Local Coordinate System") ;
    expanded_form_flag                        = VALUE(BOOL, "expanded form flag");
    dof1                                      = VALUE(BOOL, "Translational constraint in local x-direction");
    dof2                                      = VALUE(BOOL, "Translational constraint in local y-direction");
    dof3                                      = VALUE(BOOL, "Translational constraint in local z-direction");
    dof4                                      = VALUE(BOOL, "Rotational constraint about local x-direction");
    dof5                                      = VALUE(BOOL, "Rotational constraint about local y-direction");
    dof6                                      = VALUE(BOOL, "Rotational constraint about local z-direction");
    time_activate_option                      = VALUE(BOOL, "Birth Death flag");
    activation_time                           = VALUE(FLOAT, "Activation time for constraint");
    deactivation_time                         = VALUE(FLOAT, "Deactivation time for constraint");
    location_unit_node                        = ARRAY[distribution_table_count](MULTIOBJECT, "Nodal set ID containing nodes") { SUBTYPES = ( /SETS ) ; }
    keyword_name                              = VALUE(BOOL, "Title");
    entityid.type                             = VALUE(UINT, "type");
    entityid.style                            = VALUE(UINT, "style");
}

DEFINITIONS(COMMON) {
    MAINS                       = (location_unit_node);
    _GET_ENTITY_VALUE             = (entityid.type);
    _GET_ENTITY_VALUE             = (entityid.style);
}

DEFAULTS(COMMON) {
    _EXPAND_SET                   = 1;
    _HAS_HEADER                   = TRUE;
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    _EXPAND_SET                   = -1;
}

GUI(COMMON) {
/*
    mandatory:
      graphical SUPPORT("Nodal set") {
      OBJECTS=(NODE);
        ADD(NSID);
  }
  optional:
  TOOL(CID);
  
  RADIO(DOFX)
          {ADD(0,"disable");
           ADD(1,"Translational constraint in local x-direction");
      }   
      
  RADIO(DOFY)
          {ADD(0,"disable");
           ADD(1,"Translational constraint in local y-direction");
      }   
      
  RADIO(DOFZ)
          {ADD(0,"disable");
           ADD(1,"Translational constraint in local z-direction");
      }
  RADIO(DOFRX)
        {ADD(0,"disable");
         ADD(1,"Rotational constraint about local x-direction");
      }
  RADIO(DOFRY)
          {ADD(0,"disable");
           ADD(1,"Rotational constraint about local y-direction");
      }
  RADIO(DOFRZ)
          {ADD(0,"disable");
           ADD(1,"Rotational constraint about local z-direction");
      }
  if(time_activate_option == TRUE)
  {  
    SCALAR(BIRTH);
    SCALAR(DEATH);
  }
*/
}


FORMAT(Keyword971)
{
    if (engineering_type > 0)
    {
        if(distribution == 1)
        {
            if(keyword_name != 0 && distribution_table_count == 1)
            {
                if(time_activate_option == 1)
                {
                    HEADER("*BOUNDARY_SPC_NODE_BIRTH_DEATH_ID");
                }
                else
                {
                    HEADER("*BOUNDARY_SPC_NODE_ID");
                }
                COMMENT("$       IDHEADING");
                CARD("%10d%-70s",_ID_, displayname);
            }
            else
            {
                if(time_activate_option == 1)
                {
                    HEADER("*BOUNDARY_SPC_NODE_BIRTH_DEATH");
                }
                else
                {
                    HEADER("*BOUNDARY_SPC_NODE");
                }
            }
            SUBOBJECTS(BOUNDARY_SPC_SET_EXPAND_SUBGRP,/SUBOBJECT/BOUNDARY_SPC_SET_EXPAND_SUBGRP);
        }
        else if(entityid.style == 2 || entityid.type != 1 || (distribution == 0 && expanded_form_flag == 0))
        {
            if(keyword_name != 0)
            {
                if(time_activate_option == 1)
                {
                    HEADER("*BOUNDARY_SPC_SET_BIRTH_DEATH_ID");
                }
                else
                {
                    HEADER("*BOUNDARY_SPC_SET_ID");
                }
                COMMENT("$       IDHEADING");
                CARD("%10d%-70s",_ID_, displayname);
            }
            else
            {
                if(time_activate_option == 1)
                {
                    HEADER("*BOUNDARY_SPC_SET_BIRTH_DEATH");
                }
                else
                {
                    HEADER("*BOUNDARY_SPC_SET");
                }
            }
            COMMENT("$     NSID       CID      DOFX      DOFY      DOFZ     DOFRX     DOFRY     DOFRZ");
            CARD("%10d%10d%10d%10d%10d%10d%10d%10d",entityid,inputsystem,dof1,dof2,dof3,dof4,dof5,dof6);
            if(time_activate_option == 1)
            {
                COMMENT("$    BIRTH     DEATH");
                CARD("%10lg%10lg",activation_time, deactivation_time);
            }
        }
        else if(distribution == 0 && expanded_form_flag == 1)
        {
            if(keyword_name != 0 && distribution_table_count == 1)
            {
                if(time_activate_option == 1)
                {
                    HEADER("*BOUNDARY_SPC_NODE_BIRTH_DEATH_ID");
                }
                else
                {
                    HEADER("*BOUNDARY_SPC_NODE_ID");
                }
                COMMENT("$       IDHEADING");
                CARD("%10d%-70s",_ID_, displayname);
            }
            else
            {
                if(time_activate_option == 1)
                {
                    HEADER("*BOUNDARY_SPC_NODE_BIRTH_DEATH");
                }
                else
                {
                    HEADER("*BOUNDARY_SPC_NODE");
                }
            }
            COMMENT("$      NID       CID      DOFX      DOFY      DOFZ     DOFRX     DOFRY     DOFRZ");
            CARD_LIST(distribution_table_count)
            {
                CARD("%10d%10d%10d%10d%10d%10d%10d%10d",location_unit_node,inputsystem,dof1,dof2,dof3,dof4,dof5,dof6);
                if(time_activate_option == 1)
                {
                    CARD("%10lg%10lg",activation_time, deactivation_time);
                }
            }
        }
    }
}




