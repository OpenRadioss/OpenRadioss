//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//INITIAL_VELOCITY_NODE
//

ATTRIBUTES(COMMON) {
  //standard variables
  distribution_table_count              = SIZE("Size of tabular");
  
  //Data names
  location_unit_node                    = ARRAY[distribution_table_count](MULTIOBJECT, "GSETID") { SUBTYPES = ( /SETS ) ; }
  vector_X                              = ARRAY[distribution_table_count](FLOAT, "Initial translational velocity in x-direction");
  vector_Y                              = ARRAY[distribution_table_count](FLOAT, "Initial translational velocity in y-direction");
  vector_Z                              = ARRAY[distribution_table_count](FLOAT, "Initial translational velocity in z-direction");
  init_rot_vel_X                        = ARRAY[distribution_table_count](FLOAT, "Initial rotational velocity about x-axis");
  init_rot_vel_Y                        = ARRAY[distribution_table_count](FLOAT, "Initial rotational velocity about y-axis");
  init_rot_vel_Z                        = ARRAY[distribution_table_count](FLOAT, "Initial rotational velocity about z-axis");
  inputsystem                           = ARRAY[distribution_table_count](SYSTEM,  "Local Coordinate System");
  
  // HM internal
  IO_FLAG                               = VALUE(INT,"Temporary flag");
}

DEFINITIONS(COMMON) {
    MAINS               = (location_unit_node);
    _TRIPLE               = (vector_X,init_rot_vel_X);
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    IO_FLAG                             = -1;
}

GUI(COMMON) {
/*
  mandatory:
  DATA(NID);  
  optional:
  SCALAR(VX) { DIMENSION = "SPEED"; }
  SCALAR(VY) { DIMENSION = "SPEED"; }
  SCALAR(VZ) { DIMENSION = "SPEED"; }
  SCALAR(VXR) { DIMENSION = "ANGULAR SPEED"; }
  SCALAR(VYR) { DIMENSION = "ANGULAR SPEED"; }
  SCALAR(VZR) { DIMENSION = "ANGULAR SPEED"; }
//TOOL(ICID) ;
*/
}


FORMAT(Keyword971)
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    if(IO_FLAG == 2)
    {
        COMMENT("$      NID        VX        VY        VZ       VXR       VYR       VZR      ICID");
        CARD_LIST(distribution_table_count)
        {
          CARD("%10d%10lf%10lf%10lf%10lf%10lf%10lf%10d",location_unit_node, vector_X,vector_Y,vector_Z,init_rot_vel_X,init_rot_vel_Y,init_rot_vel_Z, inputsystem);
        }
    }
    else
    {
        FREE_CARD_LIST(distribution_table_count)
        {
          CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10d",location_unit_node, vector_X,vector_Y,vector_Z,init_rot_vel_X,init_rot_vel_Y,init_rot_vel_Z, inputsystem);
        }
    }
}

