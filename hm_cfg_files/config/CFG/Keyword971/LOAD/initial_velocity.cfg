//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//INITIAL_VELOCITY
//

ATTRIBUTES(COMMON) {
  distribution_table_count                          = SIZE("Size of tabular");
  //
  entityid                                          = VALUE(SETS, "Node ID") { SUBTYPES = ( /SETS ) ; }
  exempt_nodes                                      = VALUE(SETS, "Exempted nodal set"){ SUBTYPES = (/SETS/SET_NODE_IDPOOL) ; }
  box_region_def                                    = VALUE(BLOCK, "Nodes in box are initialized");
  rgd_bdy_vel_opt_overwrite                         = VALUE(INT, "Overwrite vel of all *PART_INERTIA and *CNRB");
  inputsystem                                       = VALUE(SYSTEM,"Local Coordinate System") ;
  part_set_overwrite_vel                            = VALUE(SETS, "Part Set ID, ID of Parts to overwrite"){ SUBTYPES = (/SETS/SET_PART_IDPOOL) ; }
  vector_X                                          = VALUE(FLOAT, "Initial translational velocity in x-direction"); 
  vector_Y                                          = VALUE(FLOAT, "Initial translational velocity in y-direction"); 
  vector_Z                                          = VALUE(FLOAT, "Initial translational velocity in z-direction");
  init_rot_vel_X                                    = VALUE(FLOAT, "Initial rotational velocity about the x-axis");
  init_rot_vel_Y                                    = VALUE(FLOAT, "Initial rotational velocity about the y-axis");
  init_rot_vel_Z                                    = VALUE(FLOAT, "Initial rotational velocity about the z-axis");
  exempt_node_init_trans_vel_X                      = VALUE(FLOAT, "Initial velocity in x-direction of exempted nodes");
  exempt_node_init_trans_vel_Y                      = VALUE(FLOAT, "Initial velocity in y-direction of exempted nodes");
  exempt_node_init_trans_vel_Z                      = VALUE(FLOAT, "Initial velocity in z-direction of exempted nodes");
  exempt_node_init_rot_vel_X                        = VALUE(FLOAT, "Initial rotational velocity in x-direction of exempted nodes");
  exempt_node_init_rot_vel_Y                        = VALUE(FLOAT, "Initial rotational velocity in y-direction of exempted nodes");
  exempt_node_init_rot_vel_Z                        = VALUE(FLOAT, "Initial rotational velocity in z-direction of exempted nodes");
  location_unit_node                                = ARRAY[distribution_table_count](MULTIOBJECT, "Nodal set ID containing nodes") { SUBTYPES = ( /SETS ) ; } 
  
  // HM internal
  entityid.type                                     = VALUE(UINT, "type");
  entityid.style                                    = VALUE(UINT, "style");
  distribution                                      = VALUE(UINT, "Distribution");
  expanded_form_flag                                = VALUE(BOOL, "expanded form flag");
  INITIAL_VELOCITY_SET_EXPAND_SUBGRP                = VALUE(SUBOBJECT, "INITIAL_VELOCITY_SET_EXPAND_SUBGRP");
  INITIAL_VELOCITY_RIGID_BODY                       = VALUE(SUBOBJECT, "INITIAL_VELOCITY_RIGID_BODY");
  _EXPAND_SET                                       = VALUE(INT, "Expand set");
  _HAS_HEADER                                       = VALUE(BOOL, "Header card flag");
  engineering_type                                  = VALUE(UINT, "engineering type");
  IO_FLAG                                           = VALUE(INT,"Temporary flag");
  _opt                                              = VALUE(STRING,       "Keyword Option");
  option                                            = VALUE(INT,"Options");
}

DEFINITIONS(COMMON) {
    MAINS                 = (location_unit_node);
    _TRIPLE                 = (vector_X,init_rot_vel_X,exempt_node_init_trans_vel_X,exempt_node_init_rot_vel_X);
    _GET_ENTITY_VALUE       = (entityid.type);
    _GET_ENTITY_VALUE       = (entityid.style);
}

DEFAULTS(COMMON) {
  // T = 0.0;
   //TE = 0.0;
   _EXPAND_SET                   = 1; 
   _HAS_HEADER                   = TRUE;
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    _EXPAND_SET                             = -1; 
    IO_FLAG                                 = -1;
    _opt                                    = -1;
    option                                  = -1;
}

GUI(COMMON) {
  /*
  graphical SUPPORT("Nodes Selected") {
    OBJECTS=(NODE);
    ADD(NSID);
  }

  graphical    DATA(BOXID);
  
  
  RADIO(IRIGID_ID,"Overwrite rigid body velocities") {
          ADD( 0," 0: Don't overwrite");
          ADD( 1," 1: Part set with parts to overwrite");
          ADD(-1,"-1: *PART_INERTIA ... within BOXID");
          ADD(-2,"-2: All *PART_INERTIA ...");
  }
      
      
  if(IRIGID_ID > 0)
  {
      graphical SUPPORT("PSID") {
   	       OBJECTS=(PART);
   	       ADD(IRIGID);
      }
  }
//TOOL(ICID) ;
  
  SCALAR(VX)  { DIMENSION = "SPEED"; }
  SCALAR(VY)  { DIMENSION = "SPEED"; }
  SCALAR(VZ)  { DIMENSION = "SPEED"; }
  SCALAR(VXR) { DIMENSION = "ANGULAR SPEED"; }
  SCALAR(VYR) { DIMENSION = "ANGULAR SPEED"; }
  SCALAR(VZR) { DIMENSION = "ANGULAR SPEED"; }

  FLAG(EXFLAG) ;
  if(EXFLAG==1) {

  graphical SUPPORT("Exempted Nodes") {
    OBJECTS=(NODE);
    ADD(NSIDEX);
  }

  SCALAR(VXE) { DIMENSION = "SPEED"; }
  SCALAR(VYE) { DIMENSION = "SPEED"; }
  SCALAR(VZE) { DIMENSION = "SPEED"; }
  SCALAR(VXRE) { DIMENSION = "ANGULAR SPEED"; }
  SCALAR(VYRE) { DIMENSION = "ANGULAR SPEED"; }
  SCALAR(VZRE) { DIMENSION = "ANGULAR SPEED"; }
  }
  */
}

FORMAT(Keyword971)
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    if(engineering_type > 0)
    {
        if(distribution == 1)
        {
            HEADER("*INITIAL_VELOCITY_NODE");
            SUBOBJECTS(INITIAL_VELOCITY_SET_EXPAND_SUBGRP,/SUBOBJECT/INITIAL_VELOCITY_SET_EXPAND_SUBGRP);
        }
        else if(entityid.style == 2 || entityid.type != 1 || (distribution == 0 && expanded_form_flag == 0))
        {
            HEADER("*INITIAL_VELOCITY");
            COMMENT("$     NSID    NSIDEX     BOXID    IRIGID      ICID");
                /* 
                   Use CARD_PREREAD When import is enabled
                   CARD_PREREAD("                              %10d", rgd_bdy_vel_opt_overwrite);
                */
            if(rgd_bdy_vel_opt_overwrite > 0)
            {
                CARD("%10d%10d%10d%10d%10d",entityid,exempt_nodes,box_region_def,part_set_overwrite_vel,inputsystem);
            }
            else
            {
                CARD("%10d%10d%10d%10d%10d",entityid, exempt_nodes, box_region_def, rgd_bdy_vel_opt_overwrite, inputsystem);
            }
            //
            COMMENT("$       VX        VY        VZ       VXR       VYR       VZR");
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",vector_X,vector_Y,vector_Z,init_rot_vel_X,init_rot_vel_Y,init_rot_vel_Z);
            //
            if (exempt_nodes != NONE)
            {
                COMMENT("$      VXE       VYE       VZE      VXRE      VYRE      VZRE");
                CARD("%10lg%10lg%10lg%10lg%10lg%10lg",exempt_node_init_trans_vel_X,exempt_node_init_trans_vel_Y,exempt_node_init_trans_vel_Z,exempt_node_init_rot_vel_X,exempt_node_init_rot_vel_Y,exempt_node_init_rot_vel_Z); 
                //ASSIGN(EXFLAG,1); Use this when import is enabled.
            }
        }
        else if(distribution == 0 && expanded_form_flag == 1)
        {
            HEADER("*INITIAL_VELOCITY_NODE");
            COMMENT("$      NID        VX        VY        VZ       VXR       VYR       VZR      ICID");
            CARD_LIST(distribution_table_count)
            {
                CARD("%10d%10lf%10lf%10lf%10lf%10lf%10lf%10d",location_unit_node, vector_X,vector_Y,vector_Z,init_rot_vel_X,init_rot_vel_Y,init_rot_vel_Z, inputsystem);
            }
        }
    }
    else if(IO_FLAG == 1) // IMPORT
    {
        HEADER("*INITIAL_VELOCITY%s", _opt);
        ASSIGN(option,   _FIND(_opt, "_NODE"), IMPORT);
        if(option == 1)
        {
            ASSIGN(distribution, 1, IMPORT);
            SUBOBJECTS(INITIAL_VELOCITY_SET_EXPAND_SUBGRP,/SUBOBJECT/INITIAL_VELOCITY_SET_EXPAND_SUBGRP);
        }
        else
        {
            COMMENT("$     NSID    NSIDEX     BOXID    IRIGID      ICID");
            CARD_PREREAD("                              %10d", rgd_bdy_vel_opt_overwrite);
            if(rgd_bdy_vel_opt_overwrite > 0)
            {
                CARD("%10d%10d%10d%10d%10d",entityid,exempt_nodes,box_region_def,part_set_overwrite_vel,inputsystem);
            }
            else
            {
                CARD("%10d%10d%10d%10d%10d",entityid, exempt_nodes, box_region_def, rgd_bdy_vel_opt_overwrite, inputsystem);
            }

            COMMENT("$       VX        VY        VZ       VXR       VYR       VZR");
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",vector_X,vector_Y,vector_Z,init_rot_vel_X,init_rot_vel_Y,init_rot_vel_Z);

            if(exempt_nodes != NONE)
            {
                COMMENT("$      VXE       VYE       VZE      VXRE      VYRE      VZRE");
                CARD("%10lg%10lg%10lg%10lg%10lg%10lg",exempt_node_init_trans_vel_X,exempt_node_init_trans_vel_Y,exempt_node_init_trans_vel_Z,exempt_node_init_rot_vel_X,exempt_node_init_rot_vel_Y,exempt_node_init_rot_vel_Z);
            }
        }
        ASSIGN(engineering_type, 1, IMPORT);
    }
}
