//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//BOUNDARY_PRESCRIBED_MOTION_DISPLACEMENT
//

ATTRIBUTES(COMMON) {
    engineering_type                                  = VALUE(UINT, "engineering type");
    distribution_table_count                          = SIZE("Size of tabular");
    distribution                                      = VALUE(UINT, "Distribution");
    BOUNDARY_PRESCRIBED_MOTION_SET_EXPAND_SUBGRP      = VALUE(SUBOBJECT, "");
    BOUNDARY_PRESCRIBED_MOTION_RIGID_BODY             = VALUE(SUBOBJECT, "");
    _EXPAND_SET                                       = VALUE(INT, "Expand set");
    _HAS_HEADER                                       = VALUE(BOOL, "Header card flag");
    displayname                                       = VALUE(STRING, "Heading");
    //
    entityid                                          = VALUE(SETS, "Node ID") { SUBTYPES = ( /SETS ) ; }
    id                                                = VALUE(INT, "Load_id");
    expanded_form_flag                                = VALUE(BOOL, "expanded form flag");
    magnitude                                         = VALUE(FLOAT, "Load curve scale factor");
    load_dof                                          = VALUE(INT, "Applicable degrees of freedom");
    motion_type                                       = VALUE(INT, "Velocity/Acceleration/Displacement flag");
    curveid                                           = VALUE(FUNCT, "Load curve ID to define motion value versus time");    
    motion_vec_dir                                    = VALUE(VECTOR, "Vector ID for DOF values of 4 or 8"); 
    deactivation_time                                 = VALUE(FLOAT,"Time imposed motion/constraint is removed");
    activation_time                                   = VALUE(FLOAT,"Time imposed motion/constraint is activated");
    keyword_name                                      = VALUE(BOOL, "Title");
    plane_axis_coord1                                 = VALUE(FLOAT, "Offset for DOF types 9-11 (y,z,x direction)"); 
    plane_axis_coord2                                 = VALUE(FLOAT, "Offset for DOF types 9-11 (z,x,y direction)");
    entityid.type                                     = VALUE(UINT, "type");
    entityid.style                                    = VALUE(UINT, "style");
    location_unit_node                                = ARRAY[distribution_table_count](MULTIOBJECT, "Nodal set ID containing nodes") { SUBTYPES = ( /SETS ) ; }
    empty_string                                      = VALUE(STRING, "Used as a local variable for free format case)");
}

DEFINITIONS(COMMON) {
    MAINS                 = (location_unit_node);
    _GET_ENTITY_VALUE       = (entityid.type);
    _GET_ENTITY_VALUE       = (entityid.style);
}

DEFAULTS(COMMON) {
  // T = 0.0;
   //TE = 0.0;
   _EXPAND_SET                   = 1; 
   deactivation_time             = 10e+28;
   _HAS_HEADER                   = TRUE;
   empty_string                  = "";
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    _EXPAND_SET                   = -1; 
}

GUI(COMMON) {
  /*
  mandatory:
    graphical SUPPORT("Support") {
      OBJECTS=(NODE);
      ADD(SID);
  }
  mandatory:
  RADIO(DOF) {
    ADD(1, "x-translational degree-of-freedom");
    ADD(2, "y-translational degree-of-freedom");
    ADD(3, "z-translational degree-of-freedom");
    ADD(4, "translational motion in direction given by VID. Movement on the plane normal to the vector is permitted");
    ADD(5, "x-rotational degree of freedom");
    ADD(6, "y-rotational degree of freedom");
    ADD(7, "z-rotational degree of freedom");
    ADD(8, "rotational motion about a vector parallel to vector VID. Rotation about the normal axis is permitted");
  }
  optional:
  RADIO(VAD) {
    ADD(2, "displacement (rigid bodies and nodes)");
    ADD(4, "relative displacement (rigid bodies only)");
  }
  mandatory:  
  FUNCTION(LCID){X_TITLE="time";Y_TITLE="motion value";}
  optional:
  SCALAR(SF);
  if((DOF==4) || (DOF==8) || (DOF==-4) || (DOF==-8))
  {
     mandatory:
     DATA(VID);
  }
     optional:
  SCALAR(DEATH) {DIMENSION = "TIME"; }
  SCALAR(BIRTH) {DIMENSION = "TIME"; }
  
  if((DOF==9) || (DOF==10) || (DOF==11) || (DOF==-9) || (DOF==-10)|| (DOF==-11)) {
    SCALAR(OFFSET1);
    SCALAR(OFFSET2);
  }
  
  if(VAD == 4) {
    DATA(MRB) { SUBTYPES=(/MAT/MAT_RIGID); }
    
    optional:
    DATA(NODE1);
    DATA(NODE2);
  }
  
  */
}

FORMAT(Keyword971)
{
    if (engineering_type > 0)
    {
        if(distribution == 1)
        {
            if(keyword_name != 0 && distribution_table_count == 1)
            {
                HEADER("*BOUNDARY_PRESCRIBED_MOTION_NODE_ID");
                COMMENT("$       IDHEADING");
                CARD("%10d%-70s",_ID_, displayname);
            }
            else
            {
                HEADER("*BOUNDARY_PRESCRIBED_MOTION_NODE");
            }
            SUBOBJECTS(BOUNDARY_PRESCRIBED_MOTION_SET_EXPAND_SUBGRP,/SUBOBJECT/BOUNDARY_PRESCRIBED_MOTION_SET_EXPAND_SUBGRP);
        }
        else if(entityid.style == 2 || entityid.type != 1 || (distribution == 0 && expanded_form_flag == 0))
        {
            if(keyword_name != 0)
            {
                HEADER("*BOUNDARY_PRESCRIBED_MOTION_SET_ID");
                COMMENT("$       IDHEADING");
                CARD("%10d%-70s",_ID_, displayname);
            }
            else
            {
                HEADER("*BOUNDARY_PRESCRIBED_MOTION_SET");
            }
            COMMENT("$   TYPEID       DOF       VAD      LCID        SF       VID     DEATH     BIRTH");
            if((load_dof==4) || (load_dof==-4) || (load_dof==8) || (load_dof==-8))
            {
                CARD("%10d%10d%10d%10d%10lg%10d%10lg%10lg",entityid,load_dof,motion_type,curveid,magnitude,motion_vec_dir,deactivation_time,activation_time);
            }
            else
            {
                CARD("%10d%10d%10d%10d%10lg%10s%10lg%10lg",entityid,load_dof,motion_type,curveid,magnitude,empty_string,deactivation_time,activation_time);
            }
            if((load_dof==9) || (load_dof==10) || (load_dof==11) || (load_dof==-9) || (load_dof==-10) || (load_dof==-11))
            {
                COMMENT("$  OFFSET1   OFFSET2");
                CARD("%10d%10d", plane_axis_coord1,plane_axis_coord2);
            }
        }
        else if(distribution == 0 && expanded_form_flag == 1)
        {
            if(keyword_name != 0 && distribution_table_count == 1)
            {
                HEADER("*BOUNDARY_PRESCRIBED_MOTION_NODE_ID");
                COMMENT("$       IDHEADING");
                CARD("%10d%-70s",_ID_, displayname);
            }
            else
            {
                HEADER("*BOUNDARY_PRESCRIBED_MOTION_NODE");
            }
            COMMENT("$   TYPEID       DOF       VAD      LCID        SF       VID     DEATH     BIRTH");
            CARD_LIST(distribution_table_count)
            {
                if((load_dof==4) || (load_dof==-4) || (load_dof==8) || (load_dof==-8))
                {
                    CARD("%10d%10d%10d%10d%10lg%10d%10lg%10lg",location_unit_node,load_dof,motion_type,curveid,magnitude,motion_vec_dir,deactivation_time,activation_time);
                }
                else
                {
                    CARD("%10d%10d%10d%10d%10lg%10s%10lg%10lg",location_unit_node,load_dof,motion_type,curveid,magnitude,empty_string,deactivation_time,activation_time);
                }
                if((load_dof==9) || (load_dof==10) || (load_dof==11) || (load_dof==-9) || (load_dof==-10) || (load_dof==-11))
                {
                    CARD("%10d%10d", plane_axis_coord1,plane_axis_coord2);
                }
            }
        }
    }
}

/*
DEFINITIONS(COMMON) { 
     LSDYNA_GROUPING=(DOF, VAD, LCID, SF, VID, DEATH, BIRTH, OFFSET1, OFFSET2, MRB, NODE1, NODE2) ; 		
}  
*/
  




