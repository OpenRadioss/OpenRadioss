//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//INITIAL_VELOCITY_GENERATION
// LAST VERSION LS-DYNA manual 971 R5 BEta
//

ATTRIBUTES(COMMON) {
    _HAS_HEADER                         = VALUE(BOOL, "Header card flag");

    entityid                            = VALUE(SETS, "Node ID") { SUBTYPES = ( /SETS ) ; }
    rigid_part                          = VALUE(COMPONENT, "PID");
    set_type                            = VALUE(INT, "Set Type");
    angular_velocity                    = VALUE(FLOAT, "Angular velocity about the rotational axis");
    init_vel_secondary_nodes_part           = VALUE(INT, "Temperature at node");
    inputsystem                         = VALUE(SYSTEM,"Local Coordinate System") ;
    vector_X                            = VALUE(FLOAT, "Initial translational velocity in x-direction"); 
    vector_Y                            = VALUE(FLOAT, "Initial translational velocity in y-direction"); 
    vector_Z                            = VALUE(FLOAT, "Initial translational velocity in z-direction");
    ang_vel_center_X                    = VALUE(FLOAT, "Global x-coordinate on rotational axis."); 
    ang_vel_center_Y                    = VALUE(FLOAT, "Global y-coordinate on rotational axis."); 
    ang_vel_center_Z                    = VALUE(FLOAT, "Global z-coordinate on rotational axis.");
    xcosine                             = VALUE(FLOAT, "x-direction cosine");
    ycosine                             = VALUE(FLOAT, "y-direction cosine");
    zcosine                             = VALUE(FLOAT, "z-direction cosine");
    plane_node1                         = VALUE(NODE, "node 1");
    plane_node2                         = VALUE(NODE, "node 2");
    analysis_phase                      = VALUE(INT, "Flag specifying phase of the analysis the velocities apply to");
    init_vel_hierarchy                  = VALUE(INT, "Controls hierarchy of initial velocities");
    
    // HM internal
    entity_select_option                = VALUE(BOOL, "Select Nodes");
    region_type                         = VALUE(INT, "Region Type");
    engineering_type                    = VALUE(UINT, "engineering type");
    local_zero                          = VALUE(INT, "Zero");
    local_nx                            = VALUE(INT, "Zero");
    IO_FLAG                             = VALUE(INT,"Temporary flag");
    _opt                                = VALUE(STRING,       "Keyword Option");
    option                              = VALUE(INT,"Options");
    empty_string                        = VALUE(STRING, "empty string");
}

DEFINITIONS(COMMON) {
    _TRIPLE                 = (vector_X, ang_vel_center_X);
}

DEFAULTS(COMMON) {
    _HAS_HEADER             = TRUE;
    local_zero              = 0;
    local_nx                = -999;
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    IO_FLAG                             = -1;
    _opt                                = -1;
    option                              = -1;
    empty_string                        = -1;
}

GUI(COMMON) {
/*
  mandatory:
  RADIO(S_TYPE)
  {
    ADD(1, "By part set");
    ADD(2, "By part");
    ADD(3, "Automatic / By node set");
  }
  
  optional:
  if(S_TYPE == 1)
  {
    graphical SUPPORT("Part set") {
      OBJECTS=(PART);
      ADD(S_GRPART);
    }
  }
  else if (S_TYPE == 2)
  {
    DATA(S_PART,"Part"); 	
  }
  else if (S_TYPE == 3) 
  {
    graphical SUPPORT("Node set") {
      OBJECTS=(NODE,ELEMENTS,PART);
      ADD(S_GRNOD);
    }
  }
  
  SCALAR(OMEGA) { DIMENSION = "ANGULAR SPEED"; }
  SCALAR(VX) { DIMENSION = "SPEED"; }
  SCALAR(VY) { DIMENSION = "SPEED"; }
  SCALAR(VZ) { DIMENSION = "SPEED"; }
  RADIO(IVATN) {
    ADD(0, "0:Secondary parts are ignored");
    ADD(1, "1:Assigned initial velocities like main part");
  }  
//TOOL(ICID) ;
  SCALAR(XC);
  SCALAR(YC); 
  SCALAR(ZC); 
  SCALAR(NX);
  SCALAR(NY); 
  SCALAR(NZ);
  RADIO(PHASE) {
    ADD(0, "0:velocities applied immediately");
    ADD(1, "1:velocities applied after dynamic relaxation");
  } 
  FLAG(IRIGID) ;
  */
}

FORMAT(Keyword971)
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    if(engineering_type > 0)
    {
        HEADER("*INITIAL_VELOCITY_GENERATION");
        if(region_type == 0)
        {
            ASSIGN(local_zero, 0, EXPORT);
            COMMENT("$       ID      STYP     OMEGA        VX        VY        VZ     IVATN      ICID");
            CARD("%10d%10d%10lg%10lg%10lg%10lg%10d%10d", local_zero, set_type, angular_velocity ,vector_X, vector_Y, vector_Z, init_vel_secondary_nodes_part, inputsystem);
            COMMENT("$       XC        YC        ZC        NX        NY        NZ     PHASE    IRIGID");
            if(entity_select_option == 1)
            {
                ASSIGN(local_nx, -999, EXPORT);
                CARD("%10lg%10lg%10lg%10d%10d%10d%10d%10d", ang_vel_center_X, ang_vel_center_Y, ang_vel_center_Z, local_nx, plane_node1, plane_node2, analysis_phase, init_vel_hierarchy);
            }
            else
            {
                CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d%10d", ang_vel_center_X, ang_vel_center_Y, ang_vel_center_Z, xcosine, ycosine, zcosine, analysis_phase, init_vel_hierarchy);
            }
        }
        else
        {
            COMMENT("$       ID      STYP     OMEGA        VX        VY        VZ     IVATN      ICID");
            CARD("%10d%10d%10lg%10lg%10lg%10lg%10d%10d", CELL_COND(if(region_type == 2) rigid_part;else entityid;), set_type, angular_velocity ,vector_X, vector_Y, vector_Z, init_vel_secondary_nodes_part, inputsystem);
            COMMENT("$       XC        YC        ZC        NX        NY        NZ     PHASE    IRIGID");
            if(entity_select_option == 1)
            {
                ASSIGN(local_nx, -999, EXPORT);
                CARD("%10lg%10lg%10lg%10d%10d%10d%10d%10d", ang_vel_center_X, ang_vel_center_Y, ang_vel_center_Z, local_nx, plane_node1, plane_node2, analysis_phase, init_vel_hierarchy);
            }
            else
            {
                CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d%10d", ang_vel_center_X, ang_vel_center_Y, ang_vel_center_Z, xcosine, ycosine, zcosine, analysis_phase, init_vel_hierarchy);
            }
        }
    }
    else if(IO_FLAG == 1) // IMPORT
    {
        COMMENT("$       ID      STYP     OMEGA        VX        VY        VZ     IVATN      ICID");
        CARD("%10d%10d%10lg%10lg%10lg%10lg%10d%10d", entityid, set_type, angular_velocity ,vector_X, vector_Y, vector_Z, init_vel_secondary_nodes_part, inputsystem);
        if(set_type == 1 || set_type == 3)
        {
            ASSIGN(region_type,1,IMPORT);
        }
        else if(set_type == 2)
        {
            ASSIGN(region_type,2,IMPORT);
            ASSIGN(rigid_part,entityid,IMPORT);
        }
        else
        {
            ASSIGN(region_type,0,IMPORT);
        }
        CARD_PREREAD("%30s%10lg", empty_string, xcosine);
        COMMENT("$       XC        YC        ZC        NX        NY        NZ     PHASE    IRIGID");
        if(xcosine == -999)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d%10d", ang_vel_center_X, ang_vel_center_Y, ang_vel_center_Z, xcosine, plane_node1, plane_node2, analysis_phase, init_vel_hierarchy);
            ASSIGN(entity_select_option,1,IMPORT);
        }
        else
        {
             CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d%10d", ang_vel_center_X, ang_vel_center_Y, ang_vel_center_Z, xcosine, ycosine, zcosine, analysis_phase, init_vel_hierarchy);
             ASSIGN(entity_select_option,0,IMPORT);
        }
        ASSIGN(engineering_type, 1, IMPORT);
    }
}

