//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//LOAD_RIGID_BODY
//

ATTRIBUTES(COMMON) {
    _EXPAND_SET                          = VALUE(INT, "Expand set");

    engineering_type                     = VALUE(UINT, "Engineering type");
    crash_dir_flag                       = VALUE(UINT, "Direction Selection");
    load_dof                             = VALUE(INT, "DOF");
    vector_X                             = VALUE(FLOAT, "X-direction of load action");
    vector_Y                             = VALUE(FLOAT, "Y-direction of load action");
    vector_Z                             = VALUE(FLOAT, "Z-direction of load action");
    force_ev_fn                          = VALUE(BOOL, "LCID as displacement");
    curveid                              = VALUE(FUNCT, "LCID");
    magnitude                            = VALUE(FLOAT, "SF");
    inputsystem                          = VALUE(SYSTEM,"CID");
    follower_load                        = VALUE(BOOL, "Follower Moment");
    plane_node1                          = VALUE(NODE, "M1");
    plane_node2                          = VALUE(NODE, "M2");
    plane_node3                          = VALUE(NODE, "M3");
    rigid_part                           = VALUE(COMPONENT, "PID");

    local_dof                            = VALUE(INT, "DOF");
    local_magnitude                      = VALUE(FLOAT, "SF");
}

DEFINITIONS(COMMON) {
    _TRIPLE                 = (vector_X);
}

DEFAULTS(COMMON) {
    _EXPAND_SET             = 1;
    local_dof               = 0;
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    _EXPAND_SET             = -1;
}

GUI(COMMON) {
/*
mandatory:
    graphical SUPPORT("Support") {
       OBJECTS=(NODE);
       ADD(NSID);
    }

    RADIO(DOF) {
    ADD(1, "x direction of load action");
    ADD(2, "y direction of load action");
    ADD(3, "z direction of load action");
    ADD(4, "follower force");
    ADD(5, "moment about the x-axis");
    ADD(6, "moment about the y-axis");
    ADD(7, "moment about the z-axis");
    ADD(8, "follower moment");
  }
  
  FUNCTION(LCID);
  
   optional:
    SCALAR(SF);  
    TOOL(CID);    
  if((DOF==4) || (DOF==8)) {
    DATA(M1);
    DATA(M2);
    DATA(M3);
  }
  */
}

FORMAT(Keyword971)
{
    if (engineering_type > 0 && crash_dir_flag == 0)
    {
        HEADER("*LOAD_RIGID_BODY");
        if (load_dof == 8)
        {
            COMMENT("$      PID       DOF      LCID        SF       CID        M1        M2        M3");
            CARD("%10d%10d%10d%10lg%10d%10d%10d%10d", rigid_part, load_dof, FLAGGED_OBJECT(curveid, force_ev_fn), magnitude, inputsystem, plane_node1, plane_node2, plane_node3);
        }
        else
        {
            COMMENT("$      PID       DOF      LCID        SF       CID");
            CARD("%10d%10d%10d%10lg%10d", rigid_part, load_dof, FLAGGED_OBJECT(curveid, force_ev_fn), magnitude, inputsystem);
        }
    }
    else if (engineering_type > 0 && crash_dir_flag == 1)
    {
        if (follower_load == 1)
        {
            HEADER("*LOAD_RIGID_BODY");
            ASSIGN(local_dof, 8, EXPORT);
            COMMENT("$      PID       DOF      LCID        SF       CID        M1        M2        M3");
            CARD("%10d%10d%10d%10lg%10d%10d%10d%10d", rigid_part, local_dof, FLAGGED_OBJECT(curveid, force_ev_fn), magnitude, inputsystem, plane_node1, plane_node2, plane_node3);
        }
        else
        {
            if (vector_X != 0 || vector_Y != 0 || vector_Z != 0)
            {
                HEADER("*LOAD_RIGID_BODY");
                COMMENT("$      PID       DOF      LCID        SF       CID");
                if(vector_X != 0)
                {
                    ASSIGN(local_dof, 5, EXPORT);
                    ASSIGN(local_magnitude, _MUL(magnitude, vector_X), EXPORT);
                    CARD("%10d%10d%10d%10lg%10d", rigid_part, local_dof, FLAGGED_OBJECT(curveid, force_ev_fn), local_magnitude, inputsystem);
                }
                if(vector_Y != 0)
                {
                    ASSIGN(local_dof, 6, EXPORT);
                    ASSIGN(local_magnitude, _MUL(magnitude, vector_Y), EXPORT);
                    CARD("%10d%10d%10d%10lg%10d", rigid_part, local_dof, FLAGGED_OBJECT(curveid, force_ev_fn), local_magnitude, inputsystem);
                }
                if(vector_Z != 0)
                {
                    ASSIGN(local_dof, 7, EXPORT);
                    ASSIGN(local_magnitude, _MUL(magnitude, vector_Z), EXPORT);
                    CARD("%10d%10d%10d%10lg%10d", rigid_part, local_dof, FLAGGED_OBJECT(curveid, force_ev_fn), local_magnitude, inputsystem);
                }
            }
        }
    }
}