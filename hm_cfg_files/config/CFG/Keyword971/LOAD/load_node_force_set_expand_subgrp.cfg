//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//LOAD_NODE_FORCE_NON_UNIFORM
// 

ATTRIBUTES(COMMON) {
    distribution_table_count    = SIZE("Size of tabular");
    location_unit_node          = ARRAY[distribution_table_count](MULTIOBJECT, "GSETID") { SUBTYPES = ( /SETS ) ; }

    crash_dir_flag              = VALUE(UINT, "Direction Selection");

    load_dof                    = ARRAY[distribution_table_count](INT, "DOF");
    vector_X                    = ARRAY[distribution_table_count](FLOAT, "X-direction of load action");
    vector_Y                    = ARRAY[distribution_table_count](FLOAT, "Y-direction of load action");
    vector_Z                    = ARRAY[distribution_table_count](FLOAT, "Z-direction of load action");
    curveid                     = ARRAY[distribution_table_count](FUNCT, "LCID");
    magnitude                   = ARRAY[distribution_table_count](FLOAT, "SF");
    inputsystem                 = ARRAY[distribution_table_count](SYSTEM,"CID");
    follower_load               = ARRAY[distribution_table_count](BOOL, "Follower Force");
    plane_node1                 = ARRAY[distribution_table_count](NODE, "M1");
    plane_node2                 = ARRAY[distribution_table_count](NODE, "M2");
    plane_node3                 = ARRAY[distribution_table_count](NODE, "M3");

    local_dof                   = VALUE(INT, "DOF");
    local_magnitude             = VALUE(FLOAT, "SF");
}

DEFINITIONS(COMMON) {
    MAINS              = (location_unit_node);
    _TRIPLE              = (vector_X);
}

GUI(COMMON) {
/*
  mandatory:
  DATA(NODE);  

  RADIO(DOF) {
    ADD(1, "x direction of load action");
    ADD(2, "y direction of load action");
    ADD(3, "z direction of load action");
    ADD(4, "follower force");
    ADD(5, "moment about the x-axis");
    ADD(6, "moment about the y-axis");
    ADD(7, "moment about the z-axis");
    ADD(8, "follower moment");
  }
  
  FUNCTION(LCID);
  
  optional:
  SCALAR(SF);    
  
  TOOL(CID);  
  if((DOF==4) || (DOF==8)) {
    DATA(M1);
    DATA(M2);
    DATA(M3);
  }
 */
}

// Standard format
FORMAT(Keyword971)
{
    COMMENT("$      NID       DOF      LCID        SF       CID        M1        M2        M3");
    if (crash_dir_flag == 0)
    {
        CARD_LIST(distribution_table_count)
        {
            if (load_dof == 4)
            {
                CARD("%10d%10d%10d%10lg%10d%10d%10d%10d", location_unit_node, load_dof, curveid, magnitude, inputsystem, plane_node1, plane_node2, plane_node3);
            }
            else
            {
                CARD("%10d%10d%10d%10lg%10d", location_unit_node, load_dof, curveid, magnitude, inputsystem);
            }
        }
    }
    else
    {
        CARD_LIST(distribution_table_count)
        {
            if (follower_load == 1)
            {
                ASSIGN(local_dof, 4, EXPORT);
                CARD("%10d%10d%10d%10lg%10d%10d%10d%10d", location_unit_node, local_dof, curveid, magnitude, inputsystem, plane_node1, plane_node2, plane_node3);
            }
            else
            {
                if(vector_X != 0)
                {
                    ASSIGN(local_dof, 1, EXPORT);
                    ASSIGN(local_magnitude, _MUL(magnitude, vector_X), EXPORT);
                    CARD("%10d%10d%10d%10lg%10d", location_unit_node, local_dof, curveid, local_magnitude, inputsystem);
                }
                if(vector_Y != 0)
                {
                    ASSIGN(local_dof, 2, EXPORT);
                    ASSIGN(local_magnitude, _MUL(magnitude, vector_Y), EXPORT);
                    CARD("%10d%10d%10d%10lg%10d", location_unit_node, local_dof, curveid, local_magnitude, inputsystem);
                }
                if(vector_Z != 0)
                {
                    ASSIGN(local_dof, 3, EXPORT);
                    ASSIGN(local_magnitude, _MUL(magnitude, vector_Z), EXPORT);
                    CARD("%10d%10d%10d%10lg%10d", location_unit_node, local_dof, curveid, local_magnitude, inputsystem);
                }
            }
        }
    }
}