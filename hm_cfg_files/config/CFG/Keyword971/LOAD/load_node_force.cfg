//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//LOAD_NODE_FORCE
//

ATTRIBUTES(COMMON) {
    LOAD_NODE_FORCE_SET_EXPAND_SUBGRP   = VALUE(SUBOBJECT, "");
    _HAS_HEADER                         = VALUE(BOOL, "Header card flag");

    engineering_type                    = VALUE(UINT, "Engineering type");
    distribution                        = VALUE(UINT, "Distribution");
    expanded_form_flag                  = VALUE(BOOL, "Expanded form flag");
    distribution_table_count            = SIZE("Size of tabular");
    entityid                            = VALUE(MULTIOBJECT,  "G1") { SUBTYPES = ( /NODE, /ELEMS, /SETS, /COMPONENT, /LINE, /POINT  ) ;  }
    crash_dir_flag                      = VALUE(UINT, "Direction Selection");
    load_dof                            = VALUE(INT, "DOF");
    vector_X                            = VALUE(FLOAT, "X-direction of load action");
    vector_Y                            = VALUE(FLOAT, "Y-direction of load action");
    vector_Z                            = VALUE(FLOAT, "Z-direction of load action");
    curveid                             = VALUE(FUNCT, "LCID");
    magnitude                           = VALUE(FLOAT, "SF");
    inputsystem                         = VALUE(SYSTEM,"CID");
    follower_load                       = VALUE(BOOL, "Follower Force");
    plane_node1                         = VALUE(NODE, "M1");
    plane_node2                         = VALUE(NODE, "M2");
    plane_node3                         = VALUE(NODE, "M3");
    entityid.type                       = VALUE(UINT, "type");
    entityid.style                      = VALUE(UINT, "style");

    location_unit_node                  = ARRAY[distribution_table_count](MULTIOBJECT, "Nodal set ID containing nodes") { SUBTYPES = ( /SETS ) ; }

    local_dof                           = VALUE(INT, "DOF");
    local_magnitude                     = VALUE(FLOAT, "SF");
}

DEFINITIONS(COMMON) {
    MAINS                 = (location_unit_node);
    _TRIPLE                 = (vector_X);
    _GET_ENTITY_VALUE       = (entityid.type);
    _GET_ENTITY_VALUE       = (entityid.style);
}

DEFAULTS(COMMON) {
    _HAS_HEADER             = TRUE;
    local_dof               = 0;
}

GUI(COMMON) {
/*
mandatory:
    graphical SUPPORT("Support") {
       OBJECTS=(NODE);
       ADD(NSID);
    }

    RADIO(DOF) {
    ADD(1, "x direction of load action");
    ADD(2, "y direction of load action");
    ADD(3, "z direction of load action");
    ADD(4, "follower force");
    ADD(5, "moment about the x-axis");
    ADD(6, "moment about the y-axis");
    ADD(7, "moment about the z-axis");
    ADD(8, "follower moment");
  }
  
  FUNCTION(LCID);
  
   optional:
    SCALAR(SF);  
    TOOL(CID);    
  if((DOF==4) || (DOF==8)) {
    DATA(M1);
    DATA(M2);
    DATA(M3);
  }
  */
}

FORMAT(Keyword971)
{
    if (engineering_type > 0 && crash_dir_flag == 0)
    {
        if (distribution == 1)
        {
            HEADER("*LOAD_NODE_POINT");
            SUBOBJECTS(LOAD_NODE_FORCE_SET_EXPAND_SUBGRP,/SUBOBJECT/LOAD_NODE_FORCE_SET_EXPAND_SUBGRP);
        }
        else if (entityid.style == 2 || entityid.type != 1 || (distribution == 0 && expanded_form_flag == 0))
        {
            HEADER("*LOAD_NODE_SET");
            if (load_dof == 4)
            {
                COMMENT("$     NSID       DOF      LCID        SF       CID        M1        M2        M3");
                CARD("%10d%10d%10d%10lg%10d%10d%10d%10d", entityid, load_dof, curveid, magnitude, inputsystem, plane_node1, plane_node2, plane_node3);
            }
            else
            {
                COMMENT("$     NSID       DOF      LCID        SF       CID");
                CARD("%10d%10d%10d%10lg%10d", entityid, load_dof, curveid, magnitude, inputsystem);
            }
        }
        else if (distribution == 0 && expanded_form_flag == 1)
        {
            HEADER("*LOAD_NODE_POINT");
            if (load_dof == 4)
            {
                COMMENT("$      NID       DOF      LCID        SF       CID        M1        M2        M3");
                CARD_LIST(distribution_table_count)
                {
                    CARD("%10d%10d%10d%10lg%10d%10d%10d%10d", location_unit_node, load_dof, curveid, magnitude, inputsystem, plane_node1, plane_node2, plane_node3);
                }
            }
            else
            {
                COMMENT("$      NID       DOF      LCID        SF       CID");
                CARD_LIST(distribution_table_count)
                {
                    CARD("%10d%10d%10d%10lg%10d", location_unit_node, load_dof, curveid, magnitude, inputsystem);
                }
            }
        }
    }
    else if (engineering_type > 0 && crash_dir_flag == 1)
    {
        if (distribution == 1)
        {
            HEADER("*LOAD_NODE_POINT");
            SUBOBJECTS(LOAD_NODE_FORCE_SET_EXPAND_SUBGRP,/SUBOBJECT/LOAD_NODE_FORCE_SET_EXPAND_SUBGRP);
        }
        else if (entityid.style == 2 || entityid.type != 1 || (distribution == 0 && expanded_form_flag == 0))
        {
            HEADER("*LOAD_NODE_SET");
            if (follower_load == 1)
            {
                ASSIGN(local_dof, 4, EXPORT);
                COMMENT("$     NSID       DOF      LCID        SF       CID        M1        M2        M3");
                CARD("%10d%10d%10d%10lg%10d%10d%10d%10d", entityid, local_dof, curveid, magnitude, inputsystem, plane_node1, plane_node2, plane_node3);
            }
            else
            {
                COMMENT("$     NSID       DOF      LCID        SF       CID");
                if(vector_X != 0)
                {
                    ASSIGN(local_dof, 1, EXPORT);
                    ASSIGN(local_magnitude, _MUL(magnitude, vector_X), EXPORT);
                    CARD("%10d%10d%10d%10lg%10d", entityid, local_dof, curveid, local_magnitude, inputsystem);
                }
                if(vector_Y != 0)
                {
                    ASSIGN(local_dof, 2, EXPORT);
                    ASSIGN(local_magnitude, _MUL(magnitude, vector_Y), EXPORT);
                    CARD("%10d%10d%10d%10lg%10d", entityid, local_dof, curveid, local_magnitude, inputsystem);
                }
                if(vector_Z != 0)
                {
                    ASSIGN(local_dof, 3, EXPORT);
                    ASSIGN(local_magnitude, _MUL(magnitude, vector_Z), EXPORT);
                    CARD("%10d%10d%10d%10lg%10d", entityid, local_dof, curveid, local_magnitude, inputsystem);
                }
            }
        }
        else if (distribution == 0 && expanded_form_flag == 1)
        {
            HEADER("*LOAD_NODE_POINT");
            if (follower_load == 1)
            {
                ASSIGN(local_dof, 4, EXPORT);
                COMMENT("$      NID       DOF      LCID        SF       CID        M1        M2        M3");
                CARD_LIST(distribution_table_count)
                {
                    CARD("%10d%10d%10d%10lg%10d%10d%10d%10d", location_unit_node, local_dof, curveid, magnitude, inputsystem, plane_node1, plane_node2, plane_node3);
                }
            }
            else
            {
                COMMENT("$      NID       DOF      LCID        SF       CID");
                CARD_LIST(distribution_table_count)
                {
                    if(vector_X != 0)
                    {
                        ASSIGN(local_dof, 1, EXPORT);
                        ASSIGN(local_magnitude, _MUL(magnitude, vector_X), EXPORT);
                        CARD("%10d%10d%10d%10lg%10d", location_unit_node, local_dof, curveid, local_magnitude, inputsystem);
                    }
                    if(vector_Y != 0)
                    {
                        ASSIGN(local_dof, 2, EXPORT);
                        ASSIGN(local_magnitude, _MUL(magnitude, vector_Y), EXPORT);
                        CARD("%10d%10d%10d%10lg%10d", location_unit_node, local_dof, curveid, local_magnitude, inputsystem);
                    }
                    if(vector_Z != 0)
                    {
                        ASSIGN(local_dof, 3, EXPORT);
                        ASSIGN(local_magnitude, _MUL(magnitude, vector_Z), EXPORT);
                        CARD("%10d%10d%10d%10lg%10d", location_unit_node, local_dof, curveid, local_magnitude, inputsystem);
                    }
                }
            }
        }
    }
}

