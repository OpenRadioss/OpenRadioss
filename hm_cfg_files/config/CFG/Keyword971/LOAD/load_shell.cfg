//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//LOAD_SHELL
//

ATTRIBUTES(COMMON) {
  engineering_type                                  = VALUE(UINT, "engineering type");
  distribution_table_count                          = SIZE("Size of tabular");
  distribution                                      = VALUE(UINT, "Distribution");
  LOAD_SHELL_SET_EXPAND_SUBGRP                      = VALUE(SUBOBJECT, "");
  _EXPAND_SET                                       = VALUE(INT, "Expand set");
  _HAS_HEADER                                       = VALUE(BOOL, "Header card flag");
  displayname                                       = VALUE(STRING, "Heading","TITLE");
  //
  entityid                                          = VALUE(SETS, "Node ID") { SUBTYPES = ( /SETS ) ; }
  magnitude                                         = VALUE(FLOAT, "Temperature at node");
  expanded_form_flag                                = VALUE(BOOL, "expanded form flag");
  keyword_name                                      = VALUE(BOOL, "Title");
  rgd_bdy_vel_opt_overwrite                         = VALUE(INT, "Flag for LCID");
  activation_time                                   = VALUE(FLOAT,"Time imposed motion/constraint is activated");
  curveid                                           = VALUE(FUNCT, "Load curve");
  entityid.type                                     = VALUE(UINT, "type");
  entityid.style                                    = VALUE(UINT, "style");
  location_unit_element                             = ARRAY[distribution_table_count](MULTIOBJECT,  "EID") { SUBTYPES = ( /NODE , /ELEMS , /SETS , /COMPONENT, /LINE , /POINT ) ; }
  
   //HM INTERNAL
  KEYWORD_STR                                       = VALUE(STRING, "Solver Keyword");
  _opt                                              = VALUE(STRING, "Option");
  _dummy                                            = VALUE(INT, "Dummy");
}

DEFINITIONS(COMMON) {
    MAINS                 = (location_unit_element);
    _GET_ENTITY_VALUE       = (entityid.type);
    _GET_ENTITY_VALUE       = (entityid.style);
}

DEFAULTS(COMMON) {
    _EXPAND_SET                   = 1;
    _HAS_HEADER                   = TRUE;
}

SKEYWORDS_IDENTIFIER(COMMON)
{
   _EXPAND_SET                   = -1;
    //HM INTERNAL
    KEYWORD_STR                  = 9000;
    _opt                         = -1;
    _dummy                       = -1;
}

GUI(COMMON) {
  /*
mandatory:
   graphical SUPPORT("Support") {
     OBJECTS=(SHELL,/PART/SHELL);
     ADD(ESID);
  }
  optional:
//FLAG(LCID_FLAG);
//if(LCID_FLAG==0) {
  mandatory:
    FUNCTION(LCID_FUNC);
//}
//if(LCID_FLAG==1) {
//  RADIO(LCID_SCAL) {
//    ADD(-1, "-1");
//    ADD(-2, "-2");
//  }
//}
  optional:
  SCALAR(SF);
  SCALAR(AT) { DIMENSION = "TIME"; }
  */
}

FORMAT(Keyword971)
{
    if(engineering_type > 0)
    {
        if(distribution == 1)
        {
            if(keyword_name != 0 && distribution_table_count == 1)
            {
                HEADER("*LOAD_SHELL_ELEMENT_ID");
                COMMENT("$       IDHEADING");
                CARD("%10d%-70s",_ID_, displayname);
            }
            else
            {
                HEADER("*LOAD_SHELL_ELEMENT");
            }
            SUBOBJECTS(LOAD_SHELL_SET_EXPAND_SUBGRP,/SUBOBJECT/LOAD_SHELL_SET_EXPAND_SUBGRP);
        }
        else if(entityid.style == 2 || entityid.type != 2 || (distribution == 0 && expanded_form_flag == 0))
        {
            if(keyword_name != 0)
            {
                HEADER("*LOAD_SHELL_SET_ID");
                COMMENT("$       IDHEADING");
                CARD("%10d%-70s",_ID_, displayname);
            }
            else
            {
                HEADER("*LOAD_SHELL_SET");
            }
            COMMENT("$     ESID      LCID        SF        AT");
            // use CARD_PREREAD while reading
            if(rgd_bdy_vel_opt_overwrite > 0)
            {
                CARD("%10d%10d%10lg%10lg",entityid,curveid,magnitude,activation_time);
            }
            else
            {
                CARD("%10d%10d%10lg%10lg",entityid,rgd_bdy_vel_opt_overwrite,magnitude,activation_time);
            }
        }
        else if(distribution == 0 && expanded_form_flag == 1)
        {
            if(keyword_name != 0 && distribution_table_count == 1)
            {
                HEADER("*LOAD_SHELL_ELEMENT_ID");
                COMMENT("$       IDHEADING");
                CARD("%10d%-70s",_ID_, displayname);
            }
            else
            {
                HEADER("*LOAD_SHELL_ELEMENT");
            }
            COMMENT("$     ESID      LCID        SF        AT");
            if(rgd_bdy_vel_opt_overwrite > 0)
            {
                CARD_LIST(distribution_table_count)
                {
                    CARD("%10d%10d%10lg%10lg",location_unit_element,curveid,magnitude,activation_time);
                }
            }
            else
            {
                CARD_LIST(distribution_table_count)
                {
                    CARD("%10d%10d%10lg%10lg",location_unit_element,rgd_bdy_vel_opt_overwrite,magnitude,activation_time);
                }
            }
        }
    }
    else
    {
        HEADER("*LOAD_SHELL%-40s", _opt);

        ASSIGN(_dummy, _FIND(_opt, "_ID"), IMPORT);
        if(_dummy != 1) {
            ASSIGN(keyword_name,1,IMPORT);
            CARD("%10d%-70s",_ID_, displayname);
        }

        ASSIGN(_dummy, _FIND(_opt, "_SET"), IMPORT);
        if(_dummy != 1)  {
            SUBOBJECTS(LOAD_SHELL_SET_EXPAND_SUBGRP,/SUBOBJECT/LOAD_SHELL_SET_EXPAND_SUBGRP);
        }
        else
        {
            CARD_PREREAD("%10s%10d",_opt,rgd_bdy_vel_opt_overwrite);
            if(rgd_bdy_vel_opt_overwrite > 0)
            {
                CARD("%10d%10d%10lg%10lg",entityid,curveid,magnitude,activation_time);
            }
            else
            {
                CARD("%10d%10d%10lg%10lg",entityid,rgd_bdy_vel_opt_overwrite,magnitude,activation_time);
            }
        }
    }
}
