//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//BOUNDARY_SPC_NON_UNIFORM
// 

ATTRIBUTES(COMMON) {

    //standard variables
    distribution_table_count                 = SIZE("Size of tabular");

    //Data names
    location_unit_node                       = ARRAY[distribution_table_count](MULTIOBJECT, "GSETID") { SUBTYPES = ( /SETS ) ; }    
    magnitude                                = ARRAY[distribution_table_count](FLOAT, "Temperature at node");
    inputsystem                              = ARRAY[distribution_table_count](SYSTEM,"Local Coordinate System") ;
    expanded_form_flag                       = ARRAY[distribution_table_count](BOOL, "expanded form flag");
    dof1                                     = ARRAY[distribution_table_count](BOOL, "Translational constraint in local x-direction");
    dof2                                     = ARRAY[distribution_table_count](BOOL, "Translational constraint in local y-direction");
    dof3                                     = ARRAY[distribution_table_count](BOOL, "Translational constraint in local z-direction");
    dof4                                     = ARRAY[distribution_table_count](BOOL, "Rotational constraint about local x-direction");
    dof5                                     = ARRAY[distribution_table_count](BOOL, "Rotational constraint about local y-direction");
    dof6                                     = ARRAY[distribution_table_count](BOOL, "Rotational constraint about local z-direction");
    time_activate_option                     = VALUE(BOOL, "Birth Death flag");
    activation_time                          = ARRAY[distribution_table_count](FLOAT, "Activation time for constraint");
    deactivation_time                        = ARRAY[distribution_table_count](FLOAT, "Deactivation time for constraint");
}

DEFINITIONS(COMMON) {
    MAINS               = (location_unit_node);
}

GUI(COMMON) {
/*
    mandatory:
  DATA(NID);
  optional:
  TOOL(CID);
  
  RADIO(DOFX)
          {ADD(0,"disable");
           ADD(1,"Translational constraint in local x-direction");
      }   
      
  RADIO(DOFY)
          {ADD(0,"disable");
           ADD(1,"Translational constraint in local y-direction");
      }   
      
  RADIO(DOFZ)
          {ADD(0,"disable");
           ADD(1,"Translational constraint in local z-direction");
      }
  RADIO(DOFRX)
          {ADD(0,"disable");
           ADD(1,"Rotational constraint about local x-direction");
      }
  RADIO(DOFRY)
          {ADD(0,"disable");
           ADD(1,"Rotational constraint about local y-direction");
      }
  RADIO(DOFRZ)
          {ADD(0,"disable");
           ADD(1,"Rotational constraint about local z-direction");
      }
    SCALAR(BIRTH);
    SCALAR(DEATH); 
    */
}

// Standard format
FORMAT(Keyword971)
{
    COMMENT("$      NID       CID      DOFX      DOFY      DOFZ     DOFRX     DOFRY     DOFRZ");
    if(time_activate_option == 1)
    {
        CARD_LIST(distribution_table_count)
        {
            CARD("%10d%10d%10d%10d%10d%10d%10d%10d",location_unit_node,inputsystem,dof1,dof2,dof3,dof4,dof5,dof6);
            CARD("%10lg%10lg",activation_time, deactivation_time);
        }
    }
    else
    {
        CARD_LIST(distribution_table_count)
        {
            CARD("%10d%10d%10d%10d%10d%10d%10d%10d",location_unit_node,inputsystem,dof1,dof2,dof3,dof4,dof5,dof6);
        }
    }
}