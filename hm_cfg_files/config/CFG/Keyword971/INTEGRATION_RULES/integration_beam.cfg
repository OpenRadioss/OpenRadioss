//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// INTEGRATION_BEAM
//

ATTRIBUTES(COMMON)
{
    //Card 1
    NIP                                     = SIZE(                 "Number of integration points");
    RA                                      = VALUE(FLOAT,          "Relative area of cross section");
    ICST                                    = VALUE(INT,            "Standard cross section type");
    K                                       = VALUE(INT,            "Integration refinement parameter");

    //Standard Cross-Section Card
    D1                                      = VALUE(FLOAT,          "Cross-section dimensions");
    D2                                      = VALUE(FLOAT,          "Cross-section dimensions");
    D3                                      = VALUE(FLOAT,          "Cross-section dimensions");
    D4                                      = VALUE(FLOAT,          "Cross-section dimensions");
    SREF                                    = VALUE(FLOAT,          "Location of reference surface normal to s");
    TREF                                    = VALUE(FLOAT,          "Location of reference surface normal to t");
    D5                                      = VALUE(FLOAT,          "Cross-section dimensions");
    D6                                      = VALUE(FLOAT,          "Cross-section dimensions");

    //Quadrature Cards
    S                                       = ARRAY[NIP](FLOAT,     "Normalized s-coordinate of integration point");
    T                                       = ARRAY[NIP](FLOAT,     "Normalized t-coordinate of integration point");
    WF                                      = ARRAY[NIP](FLOAT,     "Weighting factor");
    PID                                     = ARRAY[NIP](COMPONENT, "Optional PID");

    _HWCOLOR                                = VALUE(INT,            "Entity Color");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    _HWCOLOR                                = -1;
}

DEFAULTS(COMMON)
{
    //Card 1
    NIP                                     = 0;
    RA                                      = 0.0;
    ICST                                    = 0;
    K                                       = 0;

    //Standard Cross-Section Card
    SREF                                    = 0.0;
    TREF                                    = 0.0;
}

CHECK(COMMON) 
{
    //Card 1
    K      >= 0;

    //Standard Cross-Section Card
    SREF   >= -1;
    SREF   <= 1;
    TREF   >= -1;
    TREF   <= 1;
}

GUI(COMMON)
{
    SIZE(NIP);
    ARRAY(NIP, "")
    {
        SCALAR(S)                  { DIMENSION = "l" ; }
        SCALAR(T)                  { DIMENSION = "l" ; }
        SCALAR(WF)                 { DIMENSION = "DIMENSIONLESS" ; }
        DATA(PID);
    }
    SCALAR(RA)                         { DIMENSION = "DIMENSIONLESS" ; }
    RADIO(ICST)
    {
        ADD(0, "0: Default");
        ADD(1, "1: I-Shape");
        ADD(2, "2: Channel");
        ADD(3, "3: L-Shape");
        ADD(4, "4: T-shape");
        ADD(5, "5: Tubular box");
        ADD(6, "6: Z-Shape");
        ADD(7, "7: Trapezoidal");
        ADD(8, "8: Circular");
        ADD(9, "9: Tubular");
        ADD(10, "10: I-Shape 2");
        ADD(11, "11: Solid Box");
        ADD(12, "12: Cross");
        ADD(13, "13: H-Shape");
        ADD(14, "14: T-Shape 2");
        ADD(15, "15: I-Shape 3");
        ADD(16, "16: Channel 2");
        ADD(17, "17: Channel 3");
        ADD(18, "18: T-Shape 3");
        ADD(19, "19: Box-Shape 2");
        ADD(20, "20: Hexagon");
        ADD(21, "21: Hat-Shape");
        ADD(22, "22: Hat-Shape 2");
    }
    SCALAR(K)                          { DIMENSION = "DIMENSIONLESS" ; }
    if(ICST > 0)
    {
        SCALAR(D1)                     { DIMENSION = "area" ; }
        SCALAR(D2)                     { DIMENSION = "area" ; }
        SCALAR(D3)                     { DIMENSION = "area" ; }
        SCALAR(D4)                     { DIMENSION = "area" ; }
        SCALAR(SREF)                   { DIMENSION = "DIMENSIONLESS" ; }
        SCALAR(TREF)                   { DIMENSION = "DIMENSIONLESS" ; }
        SCALAR(D5)                     { DIMENSION = "area" ; }
        SCALAR(D6)                     { DIMENSION = "area" ; }
    }
}

// File format
FORMAT(Keyword971)
{
    //CARD("$HWCOLOR INTEGRATIONRULE%10d%8d",_ID_,_HWCOLOR);

    //Card 1
    COMMENT("$     IRID       NIP        RA      ICST         K");
    CARD("%10d%10d%10lg%10d%10d", _ID_, NIP, RA, ICST, K);

    if(ICST > 0)
    {
        //Standard Cross-Section Card
        COMMENT("$       D1        D2        D3        D4      SREF      TREF        D5        D6");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg", D1, D2, D3, D4, SREF, TREF, D5, D6);
    }

    if(ICST == 0 && NIP > 0)
    {
        //Quadrature Cards
        COMMENT("$        S         T        WF       PID");
        CARD_LIST(NIP)
        {
            CARD("%10lg%10lg%10lg%10d", S, T, WF, PID);
        }
    }
}
