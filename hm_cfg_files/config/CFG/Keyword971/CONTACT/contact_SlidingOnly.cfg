//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// contact_SlidingOnly
//

ATTRIBUTES(COMMON)
{

    //SECONDARY support
    secondaryentityids                  =  VALUE(SETS,  "Secondary Surface Type") { SUBTYPES = (/SETS/SET_NODE_IDPOOL) ; }
    mainentityids                 =  VALUE(SETS,  "Main Surface Type") { SUBTYPES = (/SETS/SET_NODE_IDPOOL) ; }   
    SECONDARY_SURF                      =  VALUE(SETS, "Secondary set segment") { SUBTYPES = (/SETS/SET_SEGMENT_GENERAL_IDPOOL) ; }
    SECONDARY_GRSHEL                    =  VALUE(SETS, "Secondary set shell") { SUBTYPES = (/SETS/SET_SHELL_IDPOOL) ; }
    SECONDARY_GRPART                    =  VALUE(SETS, "Secondary set part") { SUBTYPES = (/SETS/SET_PART_IDPOOL) ; }
    SECONDARY_PART                      =  VALUE(COMPONENT, "Secondary part ID ");   
    
    //SECONDARY_SETS                   =  VALUE(SETS, "Secondary set node") { SUBTYPES = (/SETS/SET_NODE_IDPOOL) ; }
    
    SECONDARY_GRPART_EXEMPTED           =  VALUE(SETS, "Secondary set exempted part") { SUBTYPES = (/SETS/SET_PART_IDPOOL) ; }


    //MAIN support
    
    MAIN_SURF                     =  VALUE(SETS,  "Main set segment") { SUBTYPES = (/SETS/SET_SEGMENT_GENERAL_IDPOOL) ; }
    MAIN_GRSHEL                   =  VALUE(SETS,"Main set shell") { SUBTYPES = (/SETS/SET_SHELL_IDPOOL) ; }
    MAIN_GRPART                   =  VALUE(SETS,  "Main set part") { SUBTYPES = (/SETS/SET_PART_IDPOOL) ; }
    MAIN_PART                     =  VALUE(COMPONENT,  "Main part ID"); 

    // Card2 for MPP option (this is not a real array, NB_MPP_CARD2 will be 0 or 1)
    
    NB_MPP_CARD2                    = SIZE("Write MPP card 2");
    MPP_CARD2                       = ARRAY[NB_MPP_CARD2](SUBOBJECT, "");

    //Support (will not be read directly, because it might get another id)
    
    SECONDARY                           = VALUE(SETS, "[SSID]Secondary surface") { SUBTYPES = (/SETS/SET_SEGMENT_GENERAL_IDPOOL) ; }
    SECONDARY_DEFINE_BOX_RESTRICTING    = VALUE(DEFINE_BOX, "Secondary box");
    MAIN                          = VALUE(SETS,  "[MSID]Main surface") { SUBTYPES = (/SETS/SET_SEGMENT_GENERAL_IDPOOL) ; }
    MAIN_DEFINE_BOX_RESTRICTING   = VALUE(DEFINE_BOX,  "Main box");

    //Card1 of LS-Dyna manual
    SECONDARY_ID                        = VALUE(INT,  "Secondary Surface ID") ;
    MAIN_ID                       = VALUE(INT,  "Main Surface ID") ;

    MAIN_TYPE                     = VALUE(INT,  "Main Surface Type") ;
    SECONDARY_TYPE                      = VALUE(INT, "Secondary Surface Type");

    SPR                             = VALUE(INT,  "Secondary side for interface force: 0 not included/ 1 Included");
    MPR                             = VALUE(INT,  "Main side for interface force: 0 not included/ 1 Included");

    KEYWORD_STR                     = VALUE(STRING, "Solver Keyword");


    ContactOption                   = VALUE(INT, "PenaltyOption");
    mppOpt                          = VALUE(INT, "mppoption");
    Option1                         = VALUE(INT, "OptionalCard");
    TRACKPEN                        = VALUE(INT, "Ignore initial penetrations");
    BUCKET                          = VALUE(INT, "Bucketsort frequency");
    LCBUCKET                        = VALUE(INT, "Loadcurve for bucketsort frequency");
    NSEG2TRACK                      = VALUE(INT, "Number of potential contacts");
    INITITER                        = VALUE(INT, "Number of iterations");
    LSD_PARMAX                      = VALUE(FLOAT, "Parametric extension distance");
    LSD_CPARM8                      = VALUE(INT, "CPARM8");
    LSD_CHKSEGS                     = VALUE(INT, "Segment check at time zero");
    LSD_PENSF                       = VALUE(FLOAT, "Penetration scale factor");
    LSD_GRPABLE                     = VALUE(INT, "Activate beta algorithm");
    ContSecondaryBoxId                  = VALUE(DEFINE_BOX, "SBOXID");
    Num_Comments                    = SIZE("No. of comment lines");
    Comments                        = ARRAY[Num_Comments](STRING, "Entity Comments");
    ContMainBoxId                 = VALUE(DEFINE_BOX, "MBOXID");
    LSDYNA_SPR                      = VALUE(INT, "Secondary side for interface force: 0 not included/ 1 Included");
    LSDYNA_MPR                      = VALUE(INT, "Main side for interface force: 0 not included/ 1 Included");
    LSDYNA_FS                       =  VALUE(FLOAT, "Static coeff. of friction");
    LSDYNA_FD                       = VALUE(FLOAT, "Dynamic coeff. of friction");
    LSDYNA_DC                       = VALUE(FLOAT, "Exponential decay coefficient");
    LSDYNA_VC                       = VALUE(FLOAT, "Coefficient for viscous friction");
    LSDYNA_VDC                      = VALUE(FLOAT, "Viscous Damping coeff. (\% of critical)");
    LSDYNA_PENCHK                   = VALUE(INT, "Small penetration search");
    LSDYNA_BT                       = VALUE(FLOAT, "Birth Time");
    LSDYNA_DT                       = VALUE(FLOAT, "Death Time");
    LSDYNA_SFS                      = VALUE(FLOAT, "Scale Factor Secondary Stiffness");
    LSDYNA_SFM                      = VALUE(FLOAT, "Scale Factor Main Stiffness");
    LSDYNA_SST                      = VALUE(FLOAT, "Optional Secondary Thickness");
    LSDYNA_MST                      = VALUE(FLOAT, "Optional Main Thickness");
    LSDYNA_SFST                     = VALUE(FLOAT, "Secondary Scale Factor Thickness");
    LSDYNA_SFMT                     = VALUE(FLOAT, "Main Scale Factor Thickness");
    LSDYNA_FSF                      = VALUE(FLOAT, "Coulomb Friction Scale Factor");
    LSDYNA_VSF                      = VALUE(FLOAT, "Viscous friction scale factor");
    LSD_LCID2                       = VALUE(FUNCT, "LCIDAB");
    LSD_LCID                        = VALUE(FUNCT, "Curve for bucket sorting frequency vs time (BSORT fun)");
    CONT_DPFRAC_entity              = VALUE(FUNCT, "Curve defining DPRFAC vs time");
    CONT_DTSIF_entity               = VALUE(FUNCT, "Curve defining DTSTIF vs time");

    Group_Option                    = VALUE(INT, "AdditionalCards");
    ContactOptionalCards            = VALUE(INT, "Cards");
    LSDYNA_SOFT                     = VALUE(INT, "Soft constraint option");
    LSDYNA_SOFSCL                   = VALUE(FLOAT, "Scale factor for constraint forces");
    LSDYNA_MAXPAR                   = VALUE(FLOAT, "Maximum parametric coordinate");
    LSDYNA_PENTOL                   = VALUE(FLOAT, "Segment-based contact options");
    LSD_DEPTHOpt                    = VALUE(INT, "Flag for sign DEPTH");
    LSDYNA_DEPTH                    = VALUE(INT, "Search depth in automatic contact");
    LSD_BSORTOpt                    = VALUE(INT, "Flag for sign BSORT");
    LSDYNA_BSORT                    = VALUE(INT, "Number of cycles between bucket sorts BSORT");
    LSDYNA_FRCFRQ                   = VALUE(INT, "Number of cycles for penalty contacts");
    LSD_PENMAX                      = VALUE(FLOAT, "Maximum penetration distance");
    LSD_THKOPT                      = VALUE(INT, "Thickness option");
    LSD_SHLTHK                      = VALUE(INT, "Shell thickness option");
    LSD_ISYM                        = VALUE(INT, "Symmetry plane option");
    LSD_I2D3D                       = VALUE(INT, "Segment searching option");
    LSD_SLDTHK                      = VALUE(FLOAT, "Solid element thickness");
    LSD_SNLOG                       = VALUE(INT, "Disable shooting node logic in thickness offset contact");
    LSD_SLDSTF                      = VALUE(FLOAT, "Solid element stiffness");
    CONT_IGAP                       = VALUE(INT, "Flag to improve implicit convergence behavior");
    CONT_IGNORE                     = VALUE(INT, "Ignore initial penetrations in *CONTACT");
    CONT_DPFRAC_chkbox              = VALUE(INT, "Use DPRFAC function");
    CONT_DPFRAC_field               = VALUE(FLOAT, "Depth of penetration reduction factor");
    CONT_DTSIF_chkbox               = VALUE(INT, "Use DTSTIF function");
    CONT_DTSIF_field                = VALUE(FLOAT, "Time step used in stiffness calculation");
    CONT_FLANGL                     = VALUE(FLOAT, "Angle tolerance in radians");
    CONT_CID_RCF                    = VALUE(SYSTEM, "Coordinate system in which to output RCFORC force resultants");
    CONT_Q2TRI                      = VALUE(INT, "Option to split quadrilateral contacts segments into two triangles");
    CONT_DTPCHK                     = VALUE(FLOAT, "Time interval between shell penetration reports");
    CONT_SFNBR                      = VALUE(FLOAT, "Scale factor for neighbor segment contact");
    CONT_FNLSCL                     = VALUE(FLOAT, "Scale factor for nonlinear force scaling");
    CONT_DNLSCL                     = VALUE(FLOAT, "Distance factor for nonlinear force scaling");
    CONT_TCSO                       = VALUE(INT, "Option to consider only contact segments (not all attached elements) when computing the contact thickness for a node or a segment");
    CONT_TIEDID                     = VALUE(INT, "Incremental displacement update for tied contacts");
    CONT_SHLEDG                     = VALUE(INT, "Flag for assuming edge shape for shells when measuring penetration. (available for segmentbased on contact)");
    CONT_SHAREC                     = VALUE(INT, "Shared constraint flag (only available for segment based contact)");
    LSD_CPARM8_E                    = VALUE(INT, "This is similar to CPARM8 in *CONTACT_..._MPP which is applicable only to MPP");
    LSD_IPBACK_E                    = VALUE(INT, "This option applies to constrained tied contacts only");
    LSD_SRNDE                       = VALUE(INT, "Segment Rounded Edges");
    LSD_LCID6                       = VALUE(FUNCT, "Curve for searching depth vs time");
    CARD_D_EXISTS                   = VALUE(INT,"Write optional card D") ;
    Q2TRI                           = VALUE(INT,"Option to split quadrilateral contacts segments into two triangles") ;
    DTPCHK                          = VALUE(FLOAT,"Time interval between shell penetration reports") ; 
    CARD_A_EXISTS                   = VALUE(INT,"Write optional card A");
    CARD_B_EXISTS                   = VALUE(INT,"Write optional card B");
    CARD_C_EXISTS                   = VALUE(INT,"Write optional card C");
    //CARD_D_EXISTS                 = VALUE(INT,"Write optional card D") ;
    CARD_E_EXISTS                   = VALUE(INT,"Write optional card E") ;
    
}

DEFINITIONS(COMMON)
{
    SELECTION_ROOT              =(SECONDARY_SURF,MAIN_SURF);
}


DEFAULTS(COMMON)
{
//  SECONDARY_TYPE                  = 0;
//  MAIN_TYPE                 = 0;
    BUCKET                      = 200;
    NSEG2TRACK                  = 3;
    INITITER                    = 2;
    LSD_PARMAX                  = 1.0005;
    LSD_PENSF                   = 0.99;
    LSDYNA_DT                   = 1.0E+20;
    LSDYNA_SFS                  = 1.0;
    LSDYNA_SFM                  = 1.0;
    LSDYNA_SFST                 = 1.0;
    LSDYNA_SFMT                 = 1.0;
    LSDYNA_FSF                  = 1.0;
    LSDYNA_VSF                  =1.0;
    LSDYNA_SOFSCL               = 0.1;
    LSDYNA_MAXPAR               = 1.025;
    LSDYNA_DEPTH                = 2;
}

CHECK(COMMON) 
{
   LSD_PENSF <= 0.99;
}


SKEYWORDS_IDENTIFIER(COMMON)
{
    //LSD_TitleOpt              = 90;
    //RHO_I                     = 118;
    //ArrayCount                = 2246;
    KEYWORD_STR                 = 9000;

    //T_VECT                    = 4294;
    //E_VECT                    = 4295;
    //PR_VECT                   = 4296;
    //ALPHA_VECT                = 4297;
    //SIGY_VECT                 = 4298;
    //ETAN_VECT                 = 4299;
    ContactOption               = 97;
    TRACKPEN                    = 4734;
    BUCKET                      = 4735;
    LCBUCKET                    = 4736;
    NSEG2TRACK                  = 4737;
    INITITER                    = 4738;
    LSD_PARMAX                  = 5570;
    LSD_CPARM8                  = 5600;
    mppOpt                      = 4733;
    Option1                     = 686;
    LSD_CHKSEGS                 = 5603;
    LSD_PENSF                   = 5602;
    LSD_GRPABLE                 = 5604;
    ContSecondaryBoxId              = 4154;
    ContMainBoxId             = 4155;
    LSDYNA_SPR                  = 3;
    LSDYNA_MPR                  = 4;
    LSDYNA_FS                   = 5;
    LSDYNA_FD                   = 6;
    LSDYNA_DC                   = 7;
    LSDYNA_VC                   = 8;
    LSDYNA_VDC                  = 9;
    LSDYNA_PENCHK               = 10;
    LSDYNA_BT                   = 11;
    LSDYNA_DT                   = 12;
    LSDYNA_SFS                  = 13;
    LSDYNA_SFM                  = 14;
    LSDYNA_SST                  = 15;
    LSDYNA_MST                  = 16;
    LSDYNA_SFST                 = 18;
    LSDYNA_SFMT                 = 19;
    LSDYNA_FSF                  = 20;
    LSDYNA_VSF                  = 21;
    LSDYNA_SOFSCL               = 23;
    LSD_LCID2                   = 168;
    LSDYNA_MAXPAR               = 25;
    LSDYNA_PENTOL               = 26;
    LSD_DEPTHOpt                = 7739;
    LSDYNA_DEPTH                = 27;
    LSD_SNLOG                   = 94;

    Group_Option                = 997;
    ContactOptionalCards        =5895;
    LSDYNA_SOFT                 = 22;
    LSD_BSORTOpt                = 7740;
    LSDYNA_BSORT                = 28;
    LSDYNA_FRCFRQ               = 29;
    LSD_PENMAX                  = 91;
    LSD_THKOPT                  = 92;
    LSD_SHLTHK                  = 93;
    LSD_ISYM                    = 5878;
    LSD_I2D3D                   = 4461;
    LSD_SLDTHK                  = 4462;
    LSD_SLDSTF                  = 4463;
    CONT_IGAP                   = 4183;
    CONT_IGNORE                 = 4184;
    CONT_DPFRAC_chkbox          = 5670;
    CONT_DPFRAC_field           = 5668;
    CONT_DTSIF_chkbox           = 5673;
    CONT_DTSIF_field            = 5672;
    CONT_FLANGL                 = 5674;
    CONT_CID_RCF                = 5675;
    CONT_Q2TRI                  = 5808;
    CONT_DTPCHK                 = 5809;
    CONT_SFNBR                  = 5810;
    CONT_FNLSCL                 = 5811;
    CONT_DNLSCL                 = 5812;
    CONT_TCSO                   = 5813;
    CONT_TIEDID                 = 5814;
    CONT_SHLEDG                 = 4894;
    CONT_SHAREC                 = 5815;
    LSD_CPARM8_E                = 7741;
    LSD_IPBACK_E                = 7742;
    LSD_SRNDE                   = 7870;
    LSD_LCID6                   = 199;
    LSD_LCID                    = 45;
    CONT_DPFRAC_entity          = 5669;
    CONT_DTSIF_entity           = 5671;
}

GUI(COMMON)
{   
       

    ASSIGN(KEYWORD_STR, "*CONTACT_SLIDING_ONLY");

    FLAG(ContactOption);
    if(ContactOption == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_PENALTY");
    } 
    

    
   FLAG(mppOpt);
    if(mppOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_MPP");
    } 
    
        ASSIGN(KEYWORD_STR, "_ID");
     
    
    if(mppOpt == TRUE)
    {
        FLAG(Option1);
        SCALAR(TRACKPEN);
        SCALAR(BUCKET)                      { DIMENSION="DIMENSIONLESS";}
        SCALAR(LCBUCKET);
        SCALAR(NSEG2TRACK)                  { DIMENSION="DIMENSIONLESS";}
        SCALAR(INITITER)                    { DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_PARMAX)                  { DIMENSION="DIMENSIONLESS";}
        RADIO(LSD_CPARM8)
        {
            //ADD(0, "<OFF>");
            ADD(0, "0: Flag is not set");
            ADD(1, "1: Flag is set");
            ADD(2, "2: Flag is set(Permitting contact treatment of spot weld beams");
        }   
    }

    if( (Option1 == TRUE)  && (mppOpt  == TRUE) )
    {

        SCALAR(LSD_CHKSEGS)                 { DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_PENSF)                   { DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_GRPABLE)                 { DIMENSION="DIMENSIONLESS";}

    }
    
    DATA(ContSecondaryBoxId);
    DATA(ContMainBoxId);
    RADIO(LSDYNA_SPR)
    {
        //ADD(0, "<OFF>");
        ADD(0, "0: Secondary side forces not included");
        ADD(1, "1: Secondary side forces included");
    }

    RADIO(LSDYNA_MPR)
    {
        //ADD(0, "<OFF>");
        ADD(0, "0: Main side forces not included");
        ADD(1, "1: Main side forces included");
    }

    SCALAR(LSDYNA_FS)                       { DIMENSION="pressure"; }
    SCALAR(LSDYNA_FD)                       { DIMENSION="pressure"; }
    SCALAR(LSDYNA_DC)                       { DIMENSION="pressure"; }
    SCALAR(LSDYNA_VC)                       { DIMENSION="pressure"; }
    SCALAR(LSDYNA_VDC)                      { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_PENCHK);
    SCALAR(LSDYNA_BT, "Start Time", "TIME") ;
    SCALAR(LSDYNA_DT, "End Time", "TIME") ;
    SCALAR(LSDYNA_SFS)                      { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_SFM)                      { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_SST)                      { DIMENSION="l"; }
    SCALAR(LSDYNA_MST)                      { DIMENSION="l"; }
    SCALAR(LSDYNA_SFST)                     { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_SFMT)                     { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_FSF)                      { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_VSF)                      { DIMENSION="DIMENSIONLESS"; }
   
    
    
    
    
    FLAG(Group_Option);
    if(Group_Option == TRUE)
    {
        RADIO(ContactOptionalCards)
        {
            ADD(0, "A");
            ADD(1, "AB");
            ADD(2, "ABC");
            ADD(3, "ABCD");
            ADD(4, "ABCDE");
        }

        RADIO(LSDYNA_SOFT)
        {
            //ADD(0, "<OFF>");
            ADD(0, "0: Penalty Formulation");
            ADD(1, "1: Soft Constraint Formulation");
            ADD(2, "2: Segment-based Contact");
            ADD(4, "3: Constraint approach for FORMING contact option");
        }
        SCALAR(LSDYNA_SOFSCL);
        DATA(LSD_LCID2);
        SCALAR(LSDYNA_MAXPAR);
        RADIO(LSDYNA_PENTOL)
        {
            //ADD(0, "<OFF>");
            ADD(0, "0: Default to 2");
            ADD(1, "1: Pinball edge-edge contact(not recommended");
            ADD(2, "2: Assume planer segments");
            ADD(3, "3: Wrapped segment checking");
            ADD(4, "4: Sliding option");
            ADD(5, "5: Do option 3 and 4");
        }
    }
     
    if(Group_Option == TRUE)
    {
       FLAG(LSD_DEPTHOpt);
    }   
    if((Group_Option == TRUE) && (LSD_DEPTHOpt == TRUE))
    {  
        DATA(LSD_LCID6);

    }
    if((Group_Option == TRUE) && (LSD_DEPTHOpt == FALSE))
    {
        SCALAR(LSDYNA_DEPTH);
    }
    if(Group_Option == TRUE)
    {
       FLAG(LSD_BSORTOpt);
    }
    if((Group_Option == TRUE) && (LSD_BSORTOpt == TRUE))
    {  
        DATA(LSD_LCID);

    }
    if((Group_Option == TRUE) && (LSD_BSORTOpt == FALSE))
    {
        SCALAR(LSDYNA_BSORT)            { DIMENSION="DIMENSIONLESS";}
    }
    if(Group_Option == TRUE)
    {
        SCALAR(LSDYNA_FRCFRQ)           { DIMENSION="DIMENSIONLESS";}
    }
    if( Group_Option == TRUE && ( ContactOptionalCards == 1 || ContactOptionalCards == 2 || ContactOptionalCards == 3 || ContactOptionalCards == 4 ) )
    {

        SCALAR(LSD_PENMAX)              { DIMENSION="l";}
        RADIO(LSD_THKOPT)
        {
            //ADD(0, "<OFF>");
            ADD(0, "0");
            ADD(1, "1");
            ADD(2, "2");
        }
        RADIO(LSD_SHLTHK)
        {
            //ADD(0, "<OFF>");
            ADD(0, "0");
            ADD(1, "1");
            ADD(2, "2");
        }
        RADIO(LSD_SNLOG)
        {
            //ADD(0, "<OFF>");
            ADD(0, "0");
            ADD(1, "1");
        }
        RADIO(LSD_ISYM)
        {
            //ADD(0, "<OFF>");
            ADD(0, "0");
            ADD(1, "1");
        }
        RADIO(LSD_I2D3D)
        {
            //ADD(0, "<OFF>");
            ADD(0, "0");
            ADD(1, "1");
        }
        SCALAR(LSD_SLDTHK)                      { DIMENSION="l";}
        SCALAR(LSD_SLDSTF)                      { DIMENSION="lineic_force";}
    }

    if( Group_Option == TRUE && ( ContactOptionalCards == 2 || ContactOptionalCards == 3 || ContactOptionalCards == 4 ) )
    {
        RADIO(CONT_IGAP)
        {
            //ADD(0, "<OFF>");
            ADD(1, "1");
            ADD(2, "2");
        }
        RADIO(CONT_IGNORE)
        {
            //ADD(0, "<OFF>");
            ADD(0, "0");
            ADD(1, "1");
            ADD(2, "2");
            ADD(3, "3");
            ADD(4, "4");
        }

    }
    if(Group_Option == TRUE && (ContactOptionalCards == 2 || ContactOptionalCards == 3 || ContactOptionalCards == 4))
    {
    FLAG(CONT_DPFRAC_chkbox);
    }
    if( (CONT_DPFRAC_chkbox == TRUE && Group_Option == TRUE) && ( ContactOptionalCards == 2 || ContactOptionalCards == 3 || ContactOptionalCards == 4 ) )
    {  
        DATA(CONT_DPFRAC_entity);

    }
    if( (CONT_DPFRAC_chkbox == FALSE && Group_Option == TRUE) && ( ContactOptionalCards == 2 || ContactOptionalCards == 3 || ContactOptionalCards == 4 ) )
    {
        SCALAR(CONT_DPFRAC_field)                   {DIMENSION="DIMENSIONLESS";}
    }
    if(Group_Option == TRUE && (ContactOptionalCards == 2 || ContactOptionalCards == 3 || ContactOptionalCards == 4))
    {
    FLAG(CONT_DTSIF_chkbox);
    }
    if( (CONT_DTSIF_chkbox == TRUE && Group_Option == TRUE) && ( ContactOptionalCards == 2 || ContactOptionalCards == 3 || ContactOptionalCards == 4 ) )
    {  
        DATA(CONT_DTSIF_entity);

    }
    if( (CONT_DTSIF_chkbox == FALSE && Group_Option == TRUE) && ( ContactOptionalCards == 2 || ContactOptionalCards == 3 || ContactOptionalCards == 4 ) )
    {
        SCALAR(CONT_DTSIF_field)                    {DIMENSION="DIMENSIONLESS";}
    }
    if(Group_Option == TRUE && (ContactOptionalCards == 2 || ContactOptionalCards == 3 || ContactOptionalCards == 4))
    {
        SCALAR(CONT_FLANGL)                         {DIMENSION="DIMENSIONLESS";}
        DATA(CONT_CID_RCF);
    }
    if(((ContactOptionalCards == 3) && (Group_Option == TRUE)) || ((ContactOptionalCards == 4) && (Group_Option == TRUE)))
    {
        RADIO(CONT_Q2TRI)
        {
            //ADD(0, "<OFF>");
            ADD(0, "0");
            ADD(1, "1");
            ADD(2, "2");
            ADD(3, "3");
            ADD(4, "4");
        }
        SCALAR(CONT_DTPCHK);
        SCALAR(CONT_SFNBR);
        SCALAR(CONT_FNLSCL);
        SCALAR(CONT_DNLSCL)                         {DIMENSION="l";}
        RADIO(CONT_TCSO)
        {
            //ADD(0, "<OFF>");
            ADD(0, "0");
            ADD(1, "1");
        }
        RADIO(CONT_TIEDID)
        {
            //ADD(0, "<OFF>");
            ADD(0, "0");
            ADD(1, "1");
        }
        RADIO(CONT_SHLEDG)
        {
            //ADD(0, "<OFF>");
            ADD(0, "0");
            ADD(1, "1");
            ADD(2, "2");
        }
    }
    if((ContactOptionalCards == 4) && (Group_Option == TRUE))
    {
        RADIO(CONT_SHAREC)
        {
            //ADD(0, "<OFF>");
            ADD(0, "0");
            ADD(1, "1");
        }
        RADIO(LSD_CPARM8_E)
        {
            //ADD(0, "<OFF>");
            ADD(0, "0");
            ADD(2, "2");
        }
        SCALAR(LSD_IPBACK_E);
        RADIO(LSD_SRNDE)
        {
            //ADD(0, "<OFF>");
            ADD(0, "0");
            ADD(1, "1");
        }
    }

}

//File format
FORMAT(Keyword971)
{
    //CARD id and title
    if(mppOpt!=FALSE)
    {
        COMMENT("$   IGNORE    BUCKET  LCBUCKET  NS2TRACK  INITITER    PARMAX              CPARM8");
        CARD("%10d%10d%10d%10d%10d%10lg          %10d", TRACKPEN,BUCKET,LCBUCKET,NSEG2TRACK,INITITER,LSD_PARMAX,LSD_CPARM8);
    }
    // 2nd MPP card (optional)
    if((mppOpt!=FALSE) && (Option1 > 0))
    {
        COMMENT("$            CHKSEGS     PENSF   GRPABLE");
        CARD("&         %10d%10lg%10d",LSD_CHKSEGS,LSD_PENSF,LSD_GRPABLE);
    }
    if(mppOpt!=FALSE)
    {
        SUBOBJECTS(MPP_CARD2,/SUBOBJECT/CONTACT_MPP_CARD2);
    }
    //
    COMMENT("$     SSID      MSID    SSTYPE    MSTYPE    SBOXID    MBOXID       SPR       MPR");
    CARD("%10d%10d%10d%10d%10d%10d%10d%10d",secondaryentityids, mainentityids,SECONDARY_TYPE,MAIN_TYPE,ContSecondaryBoxId,ContMainBoxId,LSDYNA_SPR,LSDYNA_MPR);
    //
    COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
    if (LSDYNA_FS == 2)
    {
        CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_FS, LSDYNA_FD,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);
    }
    else
    {
        CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_FS, LSDYNA_FD,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);
    }
    //
    COMMENT("$      SFS       SFM       SST       MST      SFST      SFMT       FSF       VSF");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_SFS, LSDYNA_SFM,LSDYNA_SST,LSDYNA_MST,LSDYNA_SFST,LSDYNA_SFMT,LSDYNA_FSF,LSDYNA_VSF);
    //

    if(Group_Option > 0 && ContactOptionalCards >= 0)
    {
        COMMENT("$     SOFT    SOFSCL              MAXPAR     SBOPT     DEPTH     BSORT    FRCFRQ");
        ASSIGN(CARD_A_EXISTS, 1, EXPORT); //A
    }
    
    FREE_CARD(CARD_A_EXISTS, "%10d%10lg          %10lg%10lg%10d%10d%10d", LSDYNA_SOFT,LSDYNA_SOFSCL,LSDYNA_MAXPAR,LSDYNA_PENTOL,SCALAR_OR_FUNCTION(LSD_DEPTHOpt, LSDYNA_DEPTH,LSD_LCID6),SCALAR_OR_FUNCTION(LSD_BSORTOpt,LSDYNA_BSORT,LSD_LCID),LSDYNA_FRCFRQ);
    //
    if(CARD_A_EXISTS == TRUE)
    {
        ASSIGN(ContactOptionalCards, 1, IMPORT); //A
    }


    if(Group_Option > 0 && ContactOptionalCards >= 1)
    {
        COMMENT("$   PENMAX    THKOPT    SHLTHK     SNLOG      ISYM     I2D3D    SLDTHK    SLDSTF");
        ASSIGN(CARD_B_EXISTS, 2, EXPORT); //AB
    }

    FREE_CARD(CARD_B_EXISTS,"%10lg%10d%10d%10d%10d%10d%10lg%10lg",LSD_PENMAX,LSD_THKOPT,LSD_SHLTHK,LSD_SNLOG,LSD_ISYM,LSD_I2D3D,LSD_SLDTHK,LSD_SLDSTF);
    //
    if(CARD_B_EXISTS == TRUE)
    {
        ASSIGN(ContactOptionalCards, 2, IMPORT); //AB
    }


    if(Group_Option > 0 && ContactOptionalCards >= 2)
    {
        COMMENT("$     IGAP    IGNORE    DPRFAC     DTSIF                        FLANGL   CID_RCF");
        ASSIGN(CARD_C_EXISTS, 3, EXPORT); //ABC
    }
    FREE_CARD(CARD_C_EXISTS,"%10d%10d%10lg%10lg                    %10lg%10d",CONT_IGAP,CONT_IGNORE,SCALAR_OR_FUNCTION(CONT_DPFRAC_chkbox,CONT_DPFRAC_field,CONT_DPFRAC_entity),SCALAR_OR_FUNCTION(CONT_DTSIF_chkbox,CONT_DTSIF_field,CONT_DTSIF_entity),CONT_FLANGL,CONT_CID_RCF);
    //
    if(CARD_C_EXISTS == TRUE)
    {
        ASSIGN(ContactOptionalCards, 3, IMPORT); //ABC
    }



    if(Group_Option > 0 && ContactOptionalCards >= 3)
    {
        COMMENT("$    Q2TRI    DTPCHK     SFNBR    FNLSCL    DNLSCL      TCSO    TIEDID    SHLEDG");
        ASSIGN(CARD_D_EXISTS, 4, EXPORT); //ABCD
    }
    FREE_CARD(CARD_D_EXISTS,"%10d%10lg%10lg%10lg%10lg%10d%10d%10d",CONT_Q2TRI,CONT_DTPCHK,CONT_SFNBR,CONT_FNLSCL,CONT_DNLSCL,CONT_TCSO,CONT_TIEDID,CONT_SHLEDG);
    //
    if(CARD_D_EXISTS == TRUE)
    {
        ASSIGN(ContactOptionalCards, 4, IMPORT); //ABCD
    }
    
    
    
    if(Group_Option > 0 && ContactOptionalCards == 4)
    {
        COMMENT("$   SHAREC    CPARM8    IPBACK     SRNDE");
        ASSIGN(CARD_E_EXISTS, 5, EXPORT); //ABCDE
    }
    FREE_CARD(CARD_E_EXISTS,"%10d%10d%10d%10d",CONT_SHAREC,LSD_CPARM8_E,LSD_IPBACK_E,LSD_SRNDE);

    if(CARD_E_EXISTS == TRUE)
    {
        ASSIGN(ContactOptionalCards, 5, IMPORT); //ABCDE
    }

}