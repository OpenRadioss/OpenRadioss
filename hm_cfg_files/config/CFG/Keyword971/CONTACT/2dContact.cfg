//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// CONTACT_2D
// 


 ATTRIBUTES(COMMON) {
  
  // Initial and reference densities
  KEYWORD_STR       = VALUE(STRING, "Solver Keyword");
  ContactOption     = VALUE(INT, "Options");
   AutoOption       = VALUE(INT, "Automatic Options");
   ThermalOpt       = VALUE(INT, "Thermal Option");
   SFACT            = VALUE(FLOAT, "SFACT");
   FREQ             = VALUE(INT, "FREQ");
   FS               = VALUE(FLOAT, "Static coeff. of friction");
   FD               = VALUE(FLOAT, "Dynamic coeff. of friction");
   DC               = VALUE(FLOAT, "Exponential decay coefficient");
   TBIRTH           = VALUE(FLOAT, "Birth time at which adaptive remeshing begins");
   TDEATH           = VALUE(FLOAT, "Death time at which adaptive remeshing ends");
   SOS              = VALUE(FLOAT, "Surface offset from midline of secondary surface");
   SOM              = VALUE(FLOAT, "Surface offset from midline of main surface");
   NDS              = VALUE(INT, "Normal direction flag of secondary surface");
   NDM              = VALUE(INT, "Normal direction flag of main surface");
   IPF              = VALUE(INT, "Closing/Opening flag");
   INIT             = VALUE(INT, "Anisotropy eigenvalues");
   CF               = VALUE(FLOAT, "Thermal conductivity of fluid between the slide surfaces");
   FRAD             = VALUE(FLOAT, "Radiation factor");
   HTC              = VALUE(FLOAT, "Heat transfer conductance for closed gaps");
   GCRIT            = VALUE(FLOAT, "Critical gap");
   GMAX             = VALUE(FLOAT, "No thermal contact if gap is greater than this value");
   CD_FACT          = VALUE(FLOAT, "A multiplier used on the element characteristic dist for the search routine");
   LSD_BC_FLAG      = VALUE(INT, "Thermal boundary condition flag");
   LSD_ALGO         = VALUE(INT, "Contact algorithm type");
   Group_Option     = VALUE(INT, "AdditionalCard A");
   LSDYNA_VC        = VALUE(FLOAT, "Coefficient for viscous friction");
   LSDYNA_VDC       = VALUE(FLOAT, "Viscous Damping coeff. (\% of critical)");
   LSD_IPF          = VALUE(INT, "Initial penetration flag");
   LSD_SLIDE        = VALUE(INT, "Sliding option.");
   LSD_ISTIFF       = VALUE(INT, "Stiffness scaling option");
   LSD_TIEDGAP      = VALUE(FLOAT, "Search gap for tied contacts");
 
}
DEFAULTS(COMMON)
{
    SFACT           = 1.0;
    FREQ            = 50;
    TDEATH          = 1e+020;
    SOS             = 1.0;
    SOM             = 1.0;
    LSDYNA_VDC      = 10.0;
   
}

SKEYWORDS_IDENTIFIER(COMMON)
{

 KEYWORD_STR        = 9000;
 ContactOption      = 97;
 AutoOption         = 571;
 ThermalOpt         = 4301;
 SFACT              = 4396;
 FREQ               = 4397;
 FS                 = 4398;
 FD                 = 4399;
 DC                 = 4400;
 TBIRTH             = 4402;
 TDEATH             = 4403;
 SOS                = 4404;
 SOM                = 4405;
 NDS                = 4406;
 NDM                = 4407;
 IPF                = 4408;
 INIT               = 4409;
 CF                 = 4302;
 FRAD               = 4303;
 HTC                = 4304;
 GCRIT              = 4305;
 GMAX               = 4306;
 CD_FACT            = 4307;
 LSD_BC_FLAG        = 5605;
 LSD_ALGO           = 5606;
 Group_Option       = 997;
 LSDYNA_VC          = 8;
 LSDYNA_VDC         = 9;
 LSD_IPF            = 505;
 LSD_SLIDE          = 506;
 LSD_ISTIFF         = 507;
 LSD_TIEDGAP        = 508;

}


GUI(COMMON) 
{

    ASSIGN(KEYWORD_STR, "*CONTACT_2D");
    RADIO(ContactOption)
    {
        ADD(0 , "Automatic");
    }
    
     RADIO(AutoOption)
     {
        ADD(0, "0: Surface To surface");
        ADD(1, "1: Tied");
     }
    if(AutoOption == 0)
    {
        ASSIGN(KEYWORD_STR, "_AUTOMATIC_SURFACE_TO_SURFACE");
    
        FLAG(ThermalOpt);
    }
    if(AutoOption == 1)
    {
        ASSIGN(KEYWORD_STR, "_AUTOMATIC_TIED");
  
    }
    if(ThermalOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_THERMAL");
    }

    ASSIGN(KEYWORD_STR, "_TITLE");
    
    SCALAR(SFACT);
    SCALAR(FREQ);
    SCALAR(FS)                  { DIMENSION="pressure"; }
    SCALAR(FD)                  { DIMENSION="pressure"; }
    SCALAR(DC)                  { DIMENSION="pressure"; }
    SCALAR(TBIRTH)              {DIMENSION="t";}
    SCALAR(TDEATH)              {DIMENSION="t";}
    SCALAR(SOS);
    SCALAR(SOM);
    RADIO(NDS)
    {
        ADD(0,  " 0: Normal direction is determined automatically");
        ADD(1,  " 1: Normal direction is in the positive direction");
        ADD(-1, "-1: Normal direction is in the negative direction");
    }
    RADIO(NDM)
    {
        ADD(0,  " 0: Normal direction is determined automatically");
        ADD(1,  " 1: Normal direction is in the positive direction");
        ADD(-1, "-1: Normal direction is in the negative direction");        
    }
    RADIO(IPF)
    {
        ADD(0, "0: Recommended for most problem where gaps are only closing");
        ADD(1, "1: Recommended when gaps are opening to avoid sticking");
    }
    RADIO(INIT)
    {
        ADD(0, "0: No special processing");
        ADD(1, "1: Forming option");        
    }
    if(AutoOption == 0 && ThermalOpt == TRUE)
    {
        SCALAR(CF)                  {DIMENSION="DIMENSIONLESS";}
        SCALAR(FRAD)                {DIMENSION="DIMENSIONLESS";}
        SCALAR(HTC)                 {DIMENSION="DIMENSIONLESS";}
        SCALAR(GCRIT)               {DIMENSION="l";}
        SCALAR(GMAX)                {DIMENSION="l";}
        SCALAR(CD_FACT)             {DIMENSION="DIMENSIONLESS";}
        RADIO(LSD_BC_FLAG)
        {
            //ADD(0, "<OFF>");
            ADD(0, "0 Thermal boundary conditions are on when parts are in contact");
            ADD(1, "1 Thermal boundary conditions are off when parts are in contact");
        }
        RADIO(LSD_ALGO)
        {
            //ADD(0, "<OFF>");
            ADD(0, "0");
            ADD(1, "1");
        }
    }
    FLAG(Group_Option);
    if(Group_Option == TRUE)
    {
        SCALAR(LSDYNA_VC)               { DIMENSION="pressure"; }
        SCALAR(LSDYNA_VDC)              { DIMENSION="DIMENSIONLESS"; }
        RADIO (LSD_IPF)
        {
            ADD(0, "0: Allow initial penetrations to remain");
            ADD(1, "1: Push apart initially penetrated surfaces");
        }
        RADIO (LSD_SLIDE)
        {
            ADD(0, "0: OFF");
            ADD(1, "1: ON");
        }
        RADIO (LSD_ISTIFF)
        {
            ADD(0, "0: Use default option");
            ADD(1, "1: Scale stiffness using segment masses and explicit time step");
            ADD(2, "2: Scale stiffness using segment stiffness and dimensions");
        }
        SCALAR(LSD_TIEDGAP);
    }
    
}
// File format
FORMAT(Keyword971) {
  //
  COMMENT("$    PSIDS     PSIDM     SFACT      FREQ        FS        FD        DC");
  CARD("                    %10lg%10d%10lg%10lg%10lg",SFACT,FREQ,FS,FD,DC);
  //
  COMMENT("$   TBIRTH    TDEATH       SOS       SOM       NDS       NDM       COF      INIT");
  CARD("%10lg%10lg%10lg%10lg%10d%10d%10d%10d",TBIRTH,TDEATH,SOS,SOM,NDS,NDM,IPF,INIT);
  //
  if(AutoOption == 0 && ThermalOpt == TRUE)
  {
      //
      COMMENT("$        K      FRAD        HO      LMIN      LMAX      CHLM   BG_FLAG      ALGO");
      CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d%10d",CF,FRAD,HTC,GCRIT,GMAX,CD_FACT,LSD_BC_FLAG,LSD_ALGO);
      //
  }
  if(Group_Option == TRUE)
  {
    //
    COMMENT("$       VC       VDC       IPF     SLIDE    ISTIFF   TIEDGAP");
    CARD("%10lg%10lg%10d%10d%10d%10lg",LSDYNA_VC,LSDYNA_VDC,LSD_IPF,LSD_SLIDE,LSD_ISTIFF,LSD_TIEDGAP);
    //
  }
}
