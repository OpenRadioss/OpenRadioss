//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//Section  (SOLID_EFG) Setup File
//


ATTRIBUTES(COMMON){

  _GEOM_TYPE = VALUE(INT, "");


  //Card1 of LS-Dyna manual
  ELFORM    = VALUE(INT,"[ELFORM] Element formulation options"); //LSD_ELFORM
  AET       = VALUE(INT,"Ambient Element type");  //LSD_AET


  //Card3 of LS-Dyna manual
  DX    = VALUE(FLOAT,"Normalized dilation (in  X direction)");
  DY    = VALUE(FLOAT,"Normalized dilation (in  Y direction)");
  DZ    = VALUE(FLOAT,"Normalized dilation (in  Z direction)");
  ISPLINE  = VALUE(INT,"ISPLINE");
  IDILA  = VALUE(INT,"IDILA");
  IEBT  = VALUE(INT,"[IEBT] Essential boundary condition treatment");
  IDIM  = VALUE(INT,"[IDIM] Domain Integration method");
  TOLDEF  = VALUE(FLOAT,"Deformation tolerance");

  IPS       = VALUE(INT,"[IPS] Pressure treatment") ;
  STIME     = VALUE(FLOAT,"Time to switch from stabilized EFG to standard EFG formulation");
  IKEN      = VALUE(INT,"[IKEN] Approximation");
  SF        = VALUE(INT,"Failure strain");
  CMID      = VALUE(MAT,"Cohesive material for EFG fracture analysis");
  CMID2      = VALUE(MAT,"[CMID2] Cohesive material for EFG fracture analysis");
  CMID3      = VALUE(MAT,"[CMID2] Cohesive material for EFG fracture analysis");
  IBR       = VALUE(INT,"[IBR] Branching");
  DS        = VALUE(FLOAT,"Normalized support");
  ECUT      = VALUE(FLOAT,"Define the minimum distance to the node");

  NIP       = SIZE("Number of integration points") ;
  NXDOF     = VALUE(INT,"Number of extra degrees of freedom for user-defined solid ") ;
  IHGF      = VALUE(INT,"Flag for using hourglass stabilization NIP.GT.0") ;
  ITAJ      = VALUE(INT,"Flag for setting up finite element matrices") ;
  LMC       = SIZE("Number of property parameters") ;
  NHSV      = VALUE(INT,"Number of history variable") ;

  XI        =ARRAY[NIP](FLOAT,"First isoparametric coordinates");
  ETA       =ARRAY[NIP](FLOAT,"Second isoparametric coordinates");
  ZETA      =ARRAY[NIP](FLOAT,"Third isoparametric coordinates");
  WGT       =ARRAY[NIP](FLOAT,"Isoparametric weight");

  PI        =ARRAY[LMC](FLOAT,"Property parameters") ;
 aleOption  = VALUE(INT, "Options"); 
  //_IDPOOL   = VALUE(INT, "Value of ID pool");
}
DEFAULTS(COMMON)
{ 
  _GEOM_TYPE = 1;
  //_IDPOOL =  20 ;
  aleOption = 3;
}

SKEYWORDS_IDENTIFIER(COMMON)
{
   ELFORM = 399;
   aleOption = 4540;
   DX = 4678 ; 
   DY = 4679 ;
   DZ = 4680 ;
   ISPLINE = 557 ;
   IDILA  = 558 ;
   IEBT   = 559 ;
   IDIM   = 568 ;
   
   TOLDEF = 560 ;
   IPS    = 561 ;
   STIME = 569;
   IKEN   = 562 ;
   SF     = 563 ;
   CMID   = 564 ;
   CMID2   = 10067 ;
      CMID3   = 10068 ;
   IBR    = 565 ;
   DS     = 566 ;
   ECUT   = 567 ;
   NIP    = 427 ; 

   NXDOF  = 6275;
   IHGF   = 6277;
   ITAJ   = 6278;
   LMC    = 6279;
   NHSV   = 6280;
   
   XI     = 6282;
   ETA    = 6283;
   WGT    = 6284;
   PI      = 6285;
}

GUI(COMMON){
    RADIO(ELFORM)
    {
//    ADD(-2, "[-2]    Fully integrated S/R solid intended for elements with poor aspect ratio, accurate formulation") ;
//    ADD(-1, "[-1]    Fully integrated S/R solid intended for elements with poor aspect ratio, efficient formulation") ;
      ADD(0,  "[0]   1 point corotational for *MAT_MODIFIED_HONEYCOMB") ;
      ADD(1,  "[1]   Constant stress solid element") ;
      ADD(2,  "[2]   Fully integrated S/R solid") ;
      ADD(3,  "[3]   Fully integrated quadratic 8 node element with nodal rotations") ;
      ADD(4,  "[4]   S/R integrated quadratic tetrahedron element with nodal rotations") ;
      ADD(5,  "[5]   1 point ALE") ;
      ADD(6,  "[6]   1 point Eulerian") ;
      ADD(7,  "[7]   1 point Eulerian ambient") ;
      ADD(8,  "[8]   Acoustic") ;
      ADD(9,  "[9]   1 point corotational for *MAT_MODIFIED_HONEYCOMB") ;
      ADD(10, "[10]  1 point tetrahedron") ;
      ADD(11, "[11]  1 point ALE multi-material element") ;
      ADD(12, "[12]  1 point integration with single material and void") ;
      ADD(13, "[13]  1 point nodal pressure tetrahedron") ;
      ADD(14, "[14]  8 point acoustic") ;
      ADD(15, "[15]  2 point pentahedron element") ;
      ADD(16, "[16]  4 or 5 point 10-noded tetrahedron") ;
      ADD(17, "[17]  10-noded composite tetrahedron") ;
      ADD(18, "[18]  8 point enhanced strain solid element for linear statics only") ;
      ADD(19, "[19]  4 point cohesive element") ;
      ADD(20, "[20]  4 point cohesive element with offsets for use with shells") ;
      ADD(41, "[41]  Mesh-free solid formulation") ;
      ADD(99, "[99]  Simplified linear element for time-domain vibration studies") ;
      ADD(101,"[101] User defined solid") ;
      ADD(102,"[102] User defined solid") ;
      ADD(103,"[103] User defined solid") ;
      ADD(104,"[104] User defined solid") ;
      ADD(105,"[105] User defined solid") ;
    }
    if ((ELFORM==7)|| (ELFORM==11)|| (ELFORM==12))
    {
       RADIO(AET)
       {
         ADD(1,"Temperature (not currently available)") ;
         ADD(2,"Pressure and temperature (not currently available)") ;
         ADD(3,"Pressure outflow") ;
         ADD(4,"Pressure inflow (ELFORM 7)") ;
         ADD(5,"Receptor for blast load (ELFORM 11)") ;
       }
    }

    SCALAR(DX)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(DY)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(DZ)      {DIMENSION="DIMENSIONLESS";}
    RADIO(ISPLINE)
    {
      ADD(0,"[0] Cubic spline function") ;
      ADD(1,"[1] Quadratic spline function") ;
      ADD(2,"[2] Cubic spline function with circular shape") ;
    }
    RADIO(IDILA)
    {
      ADD(0,"[0] Maximum distance based on the background elements") ;
      ADD(1,"[1] Maximum distance based on the surrounding nodes") ;
    }
    RADIO(IEBT)
    {
      ADD(0,"[0] Full transformation method") ;
      ADD(1,"[1] Full transformation method") ;
      ADD(-1,"[-1] (w/o transformation)") ;
      ADD(2,"[2] Mixed transformation method") ;
      ADD(3,"[3] Coupled FEM/EFG method") ;
      ADD(4,"[4] Fast transformation method") ;
      ADD(-4,"[-4] (w/o transformation)") ;
      ADD(5,"[5] Fluid particle method for EOS and *MAT_ELASTIC_FLUID") ;
    }
    RADIO(IDIM)
    {
      ADD(0,"[0] Local boundary integration") ;
      ADD(1,"[1] Local boundary integration") ;
      ADD(2,"[2] Two-point Gauss integration") ;
      ADD(3,"[3] Improved Gauss integration for IEBT=4 or -4") ;
    }
    SCALAR(TOLDEF) ;

    RADIO(IPS)
    {
       ADD(0,"[0] No pressure smoothing");
       ADD(1,"[1] Moving-least squared pressure recovery");
    }
    SCALAR(STIME) {DIMENSION="t";}
    RADIO(IKEN)
    {
       ADD(0,"[0] Moving-least-square approximation (default, recommended)");
       ADD(1,"[1] Maximum entropy approximation");
    }
    SCALAR(SF) ;
    
    DATA(CMID) {SUBTYPES=(/MAT/MATL185,/MAT/MATL1);}
    
    
    DATA(CMID2) {SUBTYPES=(/MAT/MATL1);}
    DATA(CMID3) {SUBTYPES=(/MAT/MATL3);}
    
    RADIO(IBR)
    {
       ADD(0,"[0] No branching allowed");
       ADD(1,"[1] Branching is allowed");
    }
    SCALAR(DS);
    SCALAR(ECUT) {DIMENSION="l";}

     if ((ELFORM>100) && (ELFORM<106))
  {
     SIZE(NIP) ;
     SCALAR(NXDOF) ;
     SCALAR(IHGF ) ;
     SCALAR(ITAJ) ; 
     SIZE(LMC) ;
     SCALAR(NHSV) ;
  }
  if ((ELFORM>100) && (ELFORM<106)&&(NIP>0))
  {
     ARRAY(NIP,"Isoparametric data")
     {
       SCALAR(XI) ;
       SCALAR(ETA) ;
       SCALAR(ZETA) ;
       SCALAR(WGT) ;
     }
  }
  if ((ELFORM>100) && (ELFORM<106)&&(LMC>0))
  {
     ARRAY(LMC,"Property Parameters") 
     {
       SCALAR(PI) ;
     }
  }

}

//File format
FORMAT(Keyword971){
  COMMENT("$    SECID    ELFORM       AET");
  CARD("%10d%10d%10d",_ID_,ELFORM,AET);
//ELFORM,  
  
  
  COMMENT("$       DX        DY        DZ   ISPLINE     IDILA      IEBT      IDIM    TOLDEF");
  CARD("%10lg%10lg%10lg%10d%10d%10d%10d%10lg",DX,DY,DZ,ISPLINE,IDILA,IEBT,IDIM,TOLDEF);
  //LSD_DX, DY, DZ, 
  
  COMMENT("$      IPS     STIME      IKEN        SF      CMID       IBR        DS      ECUT");
  CARD("%10d%10lg%10d%10lg%10d%10d%10lg%10lg",IPS,STIME,IKEN,SF,CMID,IBR,DS,ECUT);
   if ((ELFORM>100) && (ELFORM<106))
  {
     COMMENT("$      NIP     NXDOF      IHGT      ITAJ       LMC      NHSV");
     CARD("%10d%10d%10d%10d%10d%10d",NIP,NXDOF,IHGF,ITAJ,LMC,NHSV);
  }
  if ((ELFORM>100) && (ELFORM<106)&&(NIP>0))
  {
     COMMENT("$       XI       ETA      ZETA       WGT");
     CARD_LIST(NIP)
     {
       CARD("%10lg%10lg%10lg%10lg",XI,ETA,ZETA,WGT);
     }
  }
  if ((ELFORM>100) && (ELFORM<106)&&(LMC>0))
  {
     COMMENT("$       P1        P2        P3        P4        P5        P6        P7        P8") ;
     CELL_LIST(LMC,"%10lg",PI) ;
  }
}
