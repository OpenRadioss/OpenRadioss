//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// TimeStep
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    LSD_DTINIT                              = VALUE(FLOAT,  "Initial time step size");
    LSD_TSSFAC                              = VALUE(FLOAT,  "Scale factor for computed time step");
    LSD_ISDO                                = VALUE(INT,  "Basis of time size calculation for 4-node shell elements");
    LSD_TSLIMT                              = VALUE(FLOAT,  "Shell element minimum time step assignment");
    LSD_DT2MS                               = VALUE(FLOAT,  "Time step size for mass scaled solutions");
    LSD_LCTM                                = VALUE(CURVE,  "Load curve ID that limits the maximum time step size");
    LSD_DT2MSF                              = VALUE(FLOAT,  "Reduction factor for initial time step size");
    LSD_DT2MSLC                             = VALUE(CURVE,  "Load curve specifying DT2MS as a function of time");
    LSD_CARD_1_EXISTS                       = VALUE(INT,  "Optional card");
    IMSCLOptFlag                            = VALUE(INT,  "Selective mass scaling by part set");
    LSD_DTMIN                               = VALUE(INT,  "Erosion flag for solid and t-shell elements");
    LSD_MSIST                               = VALUE(INT,  "Limit mass scaling to first step");
    LSD_RMSCL                               = VALUE(FLOAT,  "Flag for using rotational option in selective mass scaling");
    LSD_IMSCL_flag                          = VALUE(INT,  "Flag for Selective mass scaling");   
    LSD_IMSCL                               = VALUE(SETS,  "Part Set ID"); /// ?????? entiti or int
    DUMMY                                   = VALUE(INT,"");
    IO_FLAG                                 = VALUE(INT,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 1959;
    IMSCLOptFlag                            = 798;
    LSD_CARD_1_EXISTS                       = 2506;
    LSD_DT2MS                               = 2070;
    LSD_DT2MSF                              = 2505;
    LSD_DT2MSLC                             = 4479;
    LSD_DTINIT                              = 2066;
    LSD_DTMIN                               = 2072;
    LSD_IMSCL_flag                          = -1;
    LSD_ISDO                                = 2068;
    LSD_LCTM                                = 45;
    LSD_MSIST                               = 2073;
    LSD_RMSCL                               = 591;
    LSD_TSLIMT                              = 2069;
    LSD_TSSFAC                              = 2067;
    LSD_IMSCL                               = 797;
    IO_FLAG                                 = -1;

}

DEFAULTS(COMMON)
{
    LSD_TSSFAC                              = 0.90;
}

GUI(COMMON)
{
    SCALAR(LSD_DTINIT) {DIMENSION ="DIMENSIONLESS";}
    SCALAR(LSD_TSSFAC) {DIMENSION="DIMENSIONLESS";}
    RADIO(LSD_ISDO)
    {
        ADD(0,"0: Characteristic length=area/min. of longest side/diagonal");
        ADD(1,"1: Characteristic length=area/(longest diagonal)");
        ADD(2,"2: Based on bar wave speed  and MAX [shortest side,area/(minimum of longest side/diagonal]");
        ADD(3,"3: Time step size based on maximum eigenvalue");
    }
    SCALAR(LSD_TSLIMT) {DIMENSION ="DIMENSIONLESS";}
    SCALAR(LSD_DT2MS)  {DIMENSION ="DIMENSIONLESS";}
    DATA(LSD_LCTM);
    RADIO(LSD_DTMIN)
    {
        ADD(0,"0: No");
        ADD(1,"1: Yes");
    }
    RADIO(LSD_MSIST)
    {
        ADD(0,"0: No");
        ADD(1,"1: Yes");
    }
    SEPARATOR("Optionl Card");
    FLAG(LSD_CARD_1_EXISTS);
    if (LSD_CARD_1_EXISTS != FALSE)
    {
        SCALAR(LSD_DT2MSF) {DIMENSION ="DIMENSIONLESS";}
        DATA(LSD_DT2MSLC);
        RADIO(IMSCLOptFlag)
        {
           ADD(1,"0: No selective mass scaling");
           ADD(2,"1: All parts undergo selective mass scaling");
           ADD(3,"2: Selected parts undergo selective mass scaling");
        }
    }
    if ((LSD_CARD_1_EXISTS != FALSE) && (IMSCLOptFlag == 3))
    {
        DATA(LSD_IMSCL);
    }
    
    if(LSD_CARD_1_EXISTS != FALSE)
    {
        SCALAR(LSD_RMSCL) {DIMENSION ="DIMENSIONLESS";}
    }

    SEPARATOR();
}


// File format
FORMAT(Keyword971) 
{   
    ASSIGN(IO_FLAG, 0, IMPORT);
    ASSIGN(IO_FLAG, 1, EXPORT);
    HEADER("*CONTROL_TIMESTEP");
    COMMENT("$   DTINIT    TSSFAC      ISDO    TSLIMT     DT2MS      LCTM     ERODE     MS1ST");
    CARD("%10lg%10lg%10d%10lg%10lg%10d%10d%10d",LSD_DTINIT,LSD_TSSFAC,LSD_ISDO,LSD_TSLIMT,LSD_DT2MS,LSD_LCTM,LSD_DTMIN,LSD_MSIST);

    if(LSD_CARD_1_EXISTS != FALSE)
    {
        COMMENT("$   DT2MSF   DT2MSLC     IMSCL                         RMSCL");
    }
    
    if(IO_FLAG == 1 && IMSCLOptFlag == 3)
    {
        ASSIGN(LSD_IMSCL_flag , 1, EXPORT);
    }
    else if(IO_FLAG == 1 && IMSCLOptFlag == 1)
    {
        ASSIGN(IMSCLOptFlag , 0, EXPORT);
    }
    else if(IO_FLAG == 1 && IMSCLOptFlag == 2)
    {
        ASSIGN(IMSCLOptFlag , 1, EXPORT);
    }
    
    FREE_CARD(LSD_CARD_1_EXISTS,"%10lg%10d%10d%10s%10s%10lg",LSD_DT2MSF,LSD_DT2MSLC,SCALAR_OR_OBJECT(LSD_IMSCL_flag,IMSCLOptFlag,LSD_IMSCL),_BLANK_,_BLANK_,LSD_RMSCL);
    
    if(IO_FLAG == 0 && LSD_IMSCL_flag == TRUE)
    {
        ASSIGN(IMSCLOptFlag,3,IMPORT);
    }
    else
    {
        if(IO_FLAG == 0 && IMSCLOptFlag == 0)
        {
            ASSIGN(LSD_IMSCL_flag , 1, IMPORT);
        }
        else if(IO_FLAG == 1 && IMSCLOptFlag == 1)
        {
            ASSIGN(LSD_IMSCL_flag , 2, IMPORT);
        }
    }

}
