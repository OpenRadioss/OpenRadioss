//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//CONTROL_IMPLICIT_STATIC_CONDENSATION
//

ATTRIBUTES(COMMON)
{
// INPUT ATTRIBUTES
    BINARY_OPT                                = VALUE(INT,"BinaryOption");
    LSD_FLAG                                  = VALUE(INT,"Static condensation control flag");
    LSD_SC_NSID                               = VALUE(SETS,"Node set ID for node to be preserved in static condensation procedure")  { SUBTYPES = (/SETS/SET_NODE_IDPOOL) ; }
    LSD_SC_PSID                               = VALUE(SETS,"Part set ID for parts to be included in the static condensation procedure") { SUBTYPES = (/SETS/SET_PART_IDPOOL) ; }
    LSD_SE_MASS                               = VALUE(STRING,"Name of the superelement mass matrix");
    LSD_SE_STIFF                              = VALUE(STRING,"Name of the superelement stiffness matrix");
    LSD_SE_INERT                              = VALUE(STRING,"Name of the superelement inertia matrix, required for gravity loading applications of the superelement");
    LSD_SE_FILENAME                           = VALUE(STRING,"If any of SE_MASS, SE_DAMP, SE_STIFF, or SE_INERT is blank then the second line is required and contains the file name for the superelement");

// HM INTERNAL
    KEYWORD_STR                               = VALUE(STRING,"Solver Keyword");
    IO_FLAG                                   = VALUE(INT, "");
    option                                    = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                               = 9000;
    BINARY_OPT                                = 7749;
    LSD_FLAG                                  = 2825;
    LSD_SC_NSID                               = 8810;
    LSD_SC_PSID                               = 8811;
    LSD_SE_MASS                               = 6306;
    LSD_SE_STIFF                              = 6308;
    LSD_SE_INERT                              = 6309;
    LSD_SE_FILENAME                           = 6310;

    IO_FLAG                                   = -1;
    option                                    = -1;
}

DEFAULTS(COMMON)
{
    LSD_FLAG                                  = 0;
}


GUI(COMMON)
{
  FLAG(BINARY_OPT);
  if(BINARY_OPT == 0)
  {
    ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_STATIC_CONDENSATION");
  }
  else
  {
    ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_STATIC_CONDENSATION_BINARY");
  }

  RADIO(LSD_FLAG)
  {
    ADD(0,"0: No static condensation will be performed");
    ADD(1,"1: Create suprelement representation based on static condensation");
    ADD(2,"2: Use static condensation to build a linearized representation for a part and use that linearized representation in the following analysis");
  }
  if(LSD_FLAG==1)
  {
     DATA(LSD_SC_NSID);
  }

  if(LSD_FLAG==2)
  {
     DATA(LSD_SC_PSID);
  }

  SCALAR(LSD_SE_MASS)  {DIMENSION="DIMENSIONLESS";}
  SCALAR(LSD_SE_STIFF) {DIMENSION="DIMENSIONLESS";}
  SCALAR(LSD_SE_INERT) {DIMENSION="DIMENSIONLESS";}
  SCALAR(LSD_SE_FILENAME) {DIMENSION="DIMENSIONLESS";}
}

//file format

FORMAT(Keyword971)
{
  ASSIGN(IO_FLAG,0,IMPORT);
  ASSIGN(IO_FLAG,1,EXPORT);

  if(IO_FLAG == 0)
  {
    HEADER("*CONTROL_IMPLICIT_STATIC_CONDENSATION%s",option);
  }
  if(IO_FLAG == 1 && BINARY_OPT == 1)
  {
     HEADER("*CONTROL_IMPLICIT_STATIC_CONDENSATION_BINARY");
  }
  else
  {
     HEADER("*CONTROL_IMPLICIT_STATIC_CONDENSATION");
  }

  if(IO_FLAG == 0)
  {
    if(option == "")
    {
      ASSIGN(BINARY_OPT,0);
    }
    else
    {
      ASSIGN(BINARY_OPT,1);
    }
  }

  COMMENT("$  SC_FLAG   SC_NSID   SC_PSIDSE_MASS   SE_STIFF  SE_INERT  ");
  CARD("%10d%10d%10d%-10s%-10s%-10s",LSD_FLAG,LSD_SC_NSID,LSD_SC_PSID,LSD_SE_MASS,LSD_SE_STIFF,LSD_SE_INERT);

  COMMENT("$SE_FILENAME                                                                    ");
  CARD("%-80s",LSD_SE_FILENAME);
}
