//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//CONTROL_IMPLICIT_JOINTS
//

ATTRIBUTES(COMMON)
{
  KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
  LSD_ISPHER                              = VALUE(INT,"Treatment of spherical joints");
  LSD_IREVOL                              = VALUE(INT,"Treatment of revolute joints");
  LSD_ICYLIN                              = VALUE(INT,"Treatment of cylindrical joints");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
  KEYWORD_STR                             = 9000;
  LSD_ISPHER                              = 8806;
  LSD_IREVOL                              = 8807;
  LSD_ICYLIN                              = 8808;
}

CHECK(COMMON)
{

}

DEFAULTS(COMMON)
{
  LSD_ISPHER    = 1;
  LSD_IREVOL    = 1;
  LSD_ICYLIN    = 1;
}


GUI(COMMON)
{
  ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_JOINTS");
  RADIO(LSD_ISPHER)
  {
    ADD(1,"1: Use constraint method for all spherical joints (Default)");
    ADD(2,"2: Use penalty method for all spherical joints ");
  }
  RADIO(LSD_IREVOL)
  {
    ADD(1,"1: Use constraint method for all revolute joints (Default)");
    ADD(2,"2: Use penalty method for all revolute joints ");
  }
  RADIO(LSD_ICYLIN)
  {
    ADD(1,"1: Use constraint method for all cylindrical joints (Default)");
    ADD(2,"2: Use penalty method for all cylindrical joints");
  }
}

//File format
FORMAT(Keyword971)
{
  HEADER("*CONTROL_IMPLICIT_JOINTS"); 
  COMMENT("$   ISPHER    IREVOL    ICYLIN");
  CARD("%10d%10d%10d",LSD_ISPHER,LSD_IREVOL,LSD_ICYLIN);
}
