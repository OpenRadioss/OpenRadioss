//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- dynrelax.cfg ---
//		GROUP	CONTROL_DYNAMIC_RELAXATION	1983	5
//		 12/02/2020
ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    
    LSD_NRCYCK                              = VALUE(INT,  "Number of time steps between convergence checks for explicit dynamic relaxation");
    LSD_DRTOL                               = VALUE(FLOAT,  "Convergence tolerance for explicit dynamic relaxation");
    LSD_DRFCTR                              = VALUE(FLOAT,  "Dynamic relaxation factor");
    LSD_DRTERM                              = VALUE(FLOAT,  "Optional termination time for dynamic relaxation. Termination occurs at this time or when convergence is attained");
    LSD_TSSFDR                              = VALUE(FLOAT,  "Scale factor for computed time step during explicit dynamic relaxation");
    LSD_IRELAL                              = VALUE(INT,  "Automatic control for dynamic relaxation option based on algorithm of Papadrakakis");
    LSD_EDTTL                               = VALUE(FLOAT,  "Convergence tolerance on automatic control of dynamic relaxation");
    LSD_IDRFLG                              = VALUE(INT,  "Dynamic relaxation flag which controls how the preloaded state is computed");
    LSD_DRPSET                              = VALUE(SETS,  "Part set ID for convergence checking") { SUBTYPES = (/SETS/SET_PART_IDPOOL); }

}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    
    LSD_DRFCTR                              = 2112;
    LSD_DRPSET                              = 6304;
    LSD_DRTERM                              = 2113;
    LSD_DRTOL                               = 2111;
    LSD_EDTTL                               = 2116;
    LSD_IDRFLG                              = 2109;
    LSD_IRELAL                              = 2115;
    LSD_NRCYCK                              = 2110;
    LSD_TSSFDR                              = 2114;
}

DEFAULTS(COMMON)
{
    LSD_DRFCTR    = 0.9950;
    LSD_DRTOL    = 0.0010;
    LSD_EDTTL    = 0.040;
    LSD_NRCYCK    = 250;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*CONTROL_DYNAMIC_RELAXATION");
    SCALAR(LSD_NRCYCK);
    SCALAR(LSD_DRTOL);
    SCALAR(LSD_DRFCTR);
    SCALAR(LSD_DRTERM);
    SCALAR(LSD_TSSFDR);
    RADIO(LSD_IRELAL)
    {
       ADD(0, "0: not active");
       ADD(1, "1: active");
    }
    SCALAR(LSD_EDTTL);
    RADIO(LSD_IDRFLG)
    {
        ADD(-999,"-999: dynamic relaxation not activated even if specified on a load curve");
        ADD(-1,"-1: dynamic relaxation is activated and timehystory output id produced during dynamic relaxation");
        ADD(0,"0: not active");
        ADD(1,"1: dynamic relaxation is activated");
        ADD(2,"2: initialization to a prescribed geometry");
        ADD(3,"3: dynamic relaxation is activated as with IDRFLG=1, but with a part set ID for convergence checking");
        ADD(5,"5: initialize implicitly and run explicitly");
    }

    if( LSD_IDRFLG == 3)
    {
        DATA(LSD_DRPSET)  { SUBTYPES = (/SETS/SET_PART_IDPOOL); }
    }
}

// File format
//tested with ML
FORMAT(Keyword971) 
{
    HEADER("*CONTROL_DYNAMIC_RELAXATION");

    COMMENT("$   NRCYCK     DRTOL    DRFCTR    DRTERM    TSSFDR    IRELAL     EDTTL    IDRFLG");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_NRCYCK,LSD_DRTOL,LSD_DRFCTR,LSD_DRTERM,LSD_TSSFDR,LSD_IRELAL,LSD_EDTTL,LSD_IDRFLG);

    if(LSD_IDRFLG == 3)
    {
        COMMENT("$   DRPSET");
        CARD("%10d",LSD_DRPSET);
    }
}
