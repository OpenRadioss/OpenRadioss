//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//CONTROL_IMPLICIT_GENERAL
//

ATTRIBUTES(COMMON)
{
// INPUT ATTRIBUTES
    LSD_LCIDOpt                               = VALUE(INT,"IMFLAG_Option");
    LSD_IMFLAG                                = VALUE(INT,"Implicit/Explicit analysis type flag ");
    LSD_LCID10                                = VALUE(FUNCT,"Curve ID=n gives IMFLAG as a function of time");
    LSD_DT0                                   = VALUE(FLOAT,"Initial time step size for implicit analysis");
    LSD_IMFORM                                = VALUE(INT,"Element formulation flag for seamless springback(IMFLAG=2 or *INTERFACE_SPRINGBACK_SEAMLESS)");
    LSD_NSBS                                  = VALUE(INT,"Number of implicit steps in seamless springback(IMFLAG=2 or *INTERFACE_SPRINGBACK_SEAMLESS)");
    LSD_IGS                                   = VALUE(INT,"Geometric (initial stress) stiffness flag");
    LSD_CNSTN                                 = VALUE(INT,"Indicator for consistent tangent stiffness (solid materials 3 & 115 only):");
    LSD_FORM                                  = VALUE(INT,"Fully integrated element formulation (IMFLAG=2 and IMFORM=1 only)");
    LSD_ZEROV                                 = VALUE(INT,"Zero out the velocity before switching from explicit to implicit");

// HM INTERNAL
    KEYWORD_STR                               = VALUE(STRING, "Solver Keyword");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                               = 9000;
    LSD_LCIDOpt                               = 5091;
    LSD_IMFLAG                                = 5010;
    LSD_LCID10                                = 1142;
    LSD_DT0                                   = 5011;
    LSD_IMFORM                                = 3148;
    LSD_NSBS                                  = 3149;
    LSD_IGS                                   = 3150;
    LSD_CNSTN                                 = 3151;
    LSD_FORM                                  = 3152;
    LSD_ZEROV                                 = 3241;
}

CHECK(COMMON)
{

}

DEFAULTS(COMMON)
{
    LSD_IMFLAG                                = 0;
    LSD_IMFORM                                = 2;
    LSD_NSBS                                  = 1;
    LSD_IGS                                   = 2;
    LSD_CNSTN                                 = 0;
    LSD_FORM                                  = 0;
    LSD_ZEROV                                 = 0;
}


GUI(COMMON)
{
  ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_GENERAL");
  FLAG(LSD_LCIDOpt);
  if (LSD_LCIDOpt!=FALSE)
  {
    FUNCTION(LSD_LCID10) {X_TITLE="Time";Y_TITLE="IMFLAG";}
  }
  else
  {
    RADIO(LSD_IMFLAG)
    {
      ADD(0,"0: Explicit analysis");
      ADD(1,"1: Implicit analysis");
      ADD(2,"2: Explicit followed by implicit (activates “seamless” springback)");
      ADD(4,"4: Implicit with automatic implicit-explicit switching");
      ADD(5,"5: Implicit with automatic switching and mandatory implicit finish");
      ADD(6,"6: Explicit with intermittent eigenvalue extraction");
    }
  }
  SCALAR(LSD_DT0) {DIMENSION="DIMENSIONLESS";}
  RADIO(LSD_IMFORM)
  {
    ADD(1,"1: Switch to fully integrated shell formulation for springback");
    ADD(2,"2: Retain original element formulation (default)");
  }
  SCALAR(LSD_NSBS) {DIMENSION="DIMENSIONLESS";}
  RADIO(LSD_IGS)
  {
    ADD(1,"1: Include");
    ADD(2,"2: Ignore");
  }
  RADIO(LSD_CNSTN)
  {
    ADD(0,"0: Do not use (default)");
    ADD(1,"1: Use");
  }
  RADIO(LSD_FORM)
  {
    ADD(0,"0: Type 16");
    ADD(1,"1: Type 6");
  }
  RADIO(LSD_ZEROV)
  {
    ADD(0,"0: Velocities are not zeroed out");
    ADD(1,"1: Velocities are set to zero");
  }
}

//File format
FORMAT(Keyword971)
{
  COMMENT("$   IMFLAG       DTO    IMFORM      NSBS       IGS     CNSTN      FORM    ZERO_V");
  CARD("%10d%10lg%10d%10d%10d%10d%10d%10d",SCALAR_OR_FUNCTION(LSD_LCIDOpt,LSD_IMFLAG,LSD_LCID10),LSD_DT0,LSD_IMFORM,LSD_NSBS,LSD_IGS,LSD_CNSTN,LSD_FORM,LSD_ZEROV);
}
