//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//CONTROL_ADAPTIVE
//

ATTRIBUTES(COMMON)
{
    // INPUT ATTRIBUTES
    LSD_ADPFREQ       = VALUE(FLOAT,"Time interval between adaptive refinements");
    LSD_ADPTOL        = VALUE(FLOAT,"Adaptive error tolerance in degrees for ADPOPT set to 1 or 2 below");
    LSD_ADPOPT        = VALUE(INT,"Adaptive options");
    LSD_MAXLVL        = VALUE(INT,"Maximum number of refinement levels");
    LSD_TBIRTH        = VALUE(FLOAT,"Birth time at which adaptive remeshing begins");
    LSD_TDEATH        = VALUE(FLOAT,"Death time at which adaptive remeshing ends");
    LSD_LCID          = VALUE(CURVE,"Adaptive interval is changed as function of time");
    LSD_IOFLAG        = VALUE(INT,"Flag to generate adaptive mesh at exit");

    LSD_ADPSIZE       = VALUE(FLOAT,"Minimum element size to be adapt based on element edge length");
    LSD_ADPASS        = VALUE(INT,"One or two pass adaptivity flag");
    LSD_IREFLG        = VALUE(INT,"Uniform refinement level");
    LSD_LCID10        = VALUE(CURVE,"Load curve ID, the abscissa values define the refinement time, and the ordinate values define the minimum element size");
    LSD_ADPENE        = VALUE(FLOAT,"Adapt the mesh when the contact surfaces approach or penetrate the tooling surface");
    LSD_ADPTH         = VALUE(FLOAT,"Thickness options for adaptivity");
    LSD_MEMORY        = VALUE(INT,"Memory flag");
    LSD_ORIENT        = VALUE(INT,"This option applies to the FORMING contact option only");
    LSD_MAXEL         = VALUE(INT,"Adaptivity is stopped if this number of elements is exceeded");

    LSD_IADPE90       = VALUE(INT,"Maximum number of elements covering 90 degree of radii");
    LSD_IADPGH        = VALUE(INT,"Fission flag for neighbor splitting");
    LSD_NCFREQ        = VALUE(INT,"Frequency of fission to fusion steps");
    LSD_IADPCL        = VALUE(INT,"Fusion will not occur until the fission level reaches IADPCL");
    LSD_ADPCTL        = VALUE(FLOAT,"Adaptivity error tolerance in degrees for activating fusion");
    LSD_CBIRTH        = VALUE(FLOAT,"Birth time for adaptive fusion");
    LSD_CDEATH        = VALUE(FLOAT,"Death time for adaptive fusion");
    LSD_LCID2         = VALUE(CURVE,"Load curve ID of a curve that defines the maximum refinement level as a function of time");

    LSD_CNLA          = VALUE(FLOAT,"Limit angle for corner nodes");
    LSD_MMM2D         = VALUE(INT,"If non-zero, common boundaries of all adapted materials will be merged");
    LSD_ADPERR        = VALUE(INT,"3-digit number, as “XYY”, where “X” and “YY” define the options for the recovery techniques and the error estimators");

    // HM INTERNAL
    KEYWORD_STR               = VALUE(STRING, "Solver Keyword");
    Card_Option               = VALUE(INT, "Card2");
    LSD_LCIDOpt               = VALUE(INT, "");
    CONT_ADAPTIVE_OPT_CARD3   = VALUE(INT, "Card3");
    CONT_ADAPTIVE_OPT_CARD4   = VALUE(INT, "Card4");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR = 9000;
    LSD_ADPFREQ = 2234;
    LSD_ADPTOL  = 2235;
    LSD_ADPOPT  = 463;
    LSD_MAXLVL  = 2237;
    LSD_TBIRTH  = 2238;
    LSD_TDEATH  = 2239;
    LSD_LCID    = 45;
    LSD_IOFLAG  = 2241;
    LSD_ADPSIZE = 2242;
    LSD_ADPASS  = 2243;
    LSD_IREFLG  = 191;
    LSD_LCID10  = 1142;
    LSD_ADPENE  = 192;
    LSD_ADPTH   = 193;
    LSD_MEMORY  = 4423;
    LSD_ORIENT  = 4424;
    LSD_MAXEL   = 4425;
    LSD_IADPE90 = 5301;
    LSD_IADPGH  = 803;
    LSD_NCFREQ  = 5302;
    LSD_IADPCL  = 5303;
    LSD_ADPCTL  = 5304;
    LSD_CBIRTH  = 5305;
    LSD_CDEATH  = 5306;
    LSD_LCID2   = 168;
    LSD_CNLA    = 805;
    LSD_MMM2D   = 592;
    LSD_ADPERR  = 593; 

    Card_Option = 998;
    LSD_LCIDOpt = 5091;
    CONT_ADAPTIVE_OPT_CARD3 = 5300;
    CONT_ADAPTIVE_OPT_CARD4 =804;

}

DEFAULTS(COMMON)
{
    LSD_ADPTOL  = 1.0E+20;
    LSD_ADPOPT  = 1;
    LSD_MAXLVL  = 3;
    LSD_TDEATH  = 1.0E+20;
    LSD_IADPCL  = 1;
    LSD_CDEATH  = 1.0E+20;
}

GUI(COMMON) 
{
    ASSIGN(KEYWORD_STR, "*CONTROL_ADAPTIVE");
    SCALAR(LSD_ADPFREQ) {DIMENSION = "DIMENSIONLESS";}
    SCALAR(LSD_ADPTOL)  {DIMENSION = "DIMENSIONLESS";}
    RADIO(LSD_ADPOPT,"ADPOPT")
    {
        ADD(1,"1: Angle change in degrees per adaptive refinement relative to the surrounding elements for each element to be refined");
        ADD(2,"2: Total angle change in degrees relative to the surrounding element for each element to be refined");
        ADD(4,"4: Adapts when the shell error in the energy norm exceeds ADPTOL/100 times the mean energy norm within the part");
        ADD(7,"7: 3D r-adaptive remeshing for solid elements");
        ADD(8,"8: 2D r-adaptive remeshing for axisymmetric and plane strain solid elements");
    }
    SCALAR(LSD_MAXLVL)  {DIMENSION = "DIMENSIONLESS";}
    SCALAR(LSD_TBIRTH)  {DIMENSION="t";}
    SCALAR(LSD_TDEATH)  {DIMENSION="t";}
    DATA(LSD_LCID);
    RADIO(LSD_IOFLAG)
    {
        ADD(0,"0");
        ADD(1,"1: Generate adaptive mesh");
    }

    FLAG(Card_Option,"Card2");
    SEPARATOR("Card2");
    if(Card_Option != FALSE) 
    {
        SCALAR(LSD_ADPSIZE) {DIMENSION = "DIMENSIONLESS";}
        RADIO(LSD_ADPASS,"One or two pass adaptivity flag")
        {
            ADD(0,"0: Two pass adaptivity");
            ADD(1,"1: One pass adaptivity");
        }
        FLAG(LSD_LCIDOpt);
    }


    if (LSD_LCIDOpt != 0 && Card_Option != FALSE)
    {
            DATA(LSD_LCID10);
    }

    if (LSD_LCIDOpt == 0 && Card_Option != FALSE)
    {
        SCALAR(LSD_IREFLG)  {DIMENSION = "DIMENSIONLESS";}
    }


    if(Card_Option != FALSE) 
    {
        SCALAR(LSD_ADPENE)  {DIMENSION = "DIMENSIONLESS";}
        SCALAR(LSD_ADPTH) {DIMENSION = "DIMENSIONLESS";}
        SCALAR(LSD_MEMORY)  {DIMENSION = "DIMENSIONLESS";}
        RADIO(LSD_ORIENT,"One or two pass adaptivity flag")
        {
            ADD(0,"0: global orientation of the contact surface");
            ADD(1,"1: The user orientation for the contact interface is used");
        }
        SCALAR(LSD_MAXEL)   {DIMENSION = "DIMENSIONLESS";}
        FLAG(CONT_ADAPTIVE_OPT_CARD3);
    }
    
    SEPARATOR("Card3");
    if(Card_Option != FALSE && CONT_ADAPTIVE_OPT_CARD3 != FALSE)
    {
        
        SCALAR(LSD_IADPE90) {DIMENSION = "DIMENSIONLESS";}
        RADIO(LSD_IADPGH)
        {
            ADD(0,"0: Split all neighbor elements");
            ADD(1,"1: Do not split neighbor elements");
        }
        SCALAR(LSD_NCFREQ)  {DIMENSION = "DIMENSIONLESS";}
        SCALAR(LSD_IADPCL)  {DIMENSION = "DIMENSIONLESS";}
        SCALAR(LSD_ADPCTL)   {DIMENSION = "DIMENSIONLESS";}
        SCALAR(LSD_CBIRTH)  {DIMENSION="t";}
        SCALAR(LSD_CDEATH)  {DIMENSION="t";}
        DATA(LSD_LCID2); 
        
        FLAG(CONT_ADAPTIVE_OPT_CARD4);
        
    }
    
    SEPARATOR("Card4");
    if(Card_Option != FALSE && CONT_ADAPTIVE_OPT_CARD3 != FALSE && CONT_ADAPTIVE_OPT_CARD4 != FALSE)
    {
        SCALAR(LSD_CNLA) {DIMENSION = "DIMENSIONLESS";}
        SCALAR(LSD_MMM2D) {DIMENSION = "DIMENSIONLESS";}
        SCALAR(LSD_ADPERR) {DIMENSION = "DIMENSIONLESS";}
    }
    SEPARATOR();
    SEPARATOR();
    SEPARATOR();
}

//File format
FORMAT(Keyword971)
{
    HEADER("*CONTROL_ADAPTIVE");
    COMMENT("$  ADPFREQ    ADPTOL    ADPOPT    MAXLVL    TBIRTH    TDEATH     LCADP    IOFLAG");
    CARD("%10lg%10lg%10d%10d%10lg%10lg%10d%10d",LSD_ADPFREQ,LSD_ADPTOL,LSD_ADPOPT,LSD_MAXLVL,LSD_TBIRTH,LSD_TDEATH,LSD_LCID,LSD_IOFLAG);

    if(Card_Option != FALSE)
        COMMENT("$  ADPSIZE    ADPASS    IREFLG    ADPENE     ADPTH    MEMORY    ORIENT     MAXEL");
    FREE_CARD(Card_Option,"%10lg%10d%10d%10lg%10lg%10d%10d%10d",LSD_ADPSIZE,LSD_ADPASS,SCALAR_OR_OBJECT(LSD_LCIDOpt,LSD_IREFLG,LSD_LCID10),LSD_ADPENE,LSD_ADPTH,LSD_MEMORY,LSD_ORIENT,LSD_MAXEL);

    if((Card_Option != FALSE) && (CONT_ADAPTIVE_OPT_CARD3 != FALSE))
        COMMENT("$  IADPN90    IADPGH    NCFREQ    IADPCL    ADPCTL    CBIRTH    CDEATH     LCLVL");
    FREE_CARD(CONT_ADAPTIVE_OPT_CARD3,"%10d%10d%10d%10d%10lg%10lg%10lg%10d",LSD_IADPE90,LSD_IADPGH,LSD_NCFREQ,LSD_IADPCL,LSD_ADPCTL,LSD_CBIRTH,LSD_CDEATH,LSD_LCID2);

    if((Card_Option != FALSE) && (CONT_ADAPTIVE_OPT_CARD3 != FALSE) && (CONT_ADAPTIVE_OPT_CARD4 != FALSE))
        COMMENT("$     CNLA                         MMM2D    ADPERR");
    FREE_CARD(CONT_ADAPTIVE_OPT_CARD4,"%10lg%20s%10d%10d",LSD_CNLA,_BLANK_,LSD_MMM2D,LSD_ADPERR);
}
