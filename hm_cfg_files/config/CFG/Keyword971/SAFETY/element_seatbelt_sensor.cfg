//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//ELEMENT_SEATBELT_SENSOR
//


ATTRIBUTES(COMMON) {

  _IDPOOL = VALUE(INT, "ID Pool");
 
  //SBSID Sensor ID
  SBSTYP    = VALUE(INT,"Sensor type");
  SBSFL     = VALUE(INT,"Sensor Flag");

// Card 2 of LS Dyna Manual
  if(SBSTYP==1) {
    NID       = VALUE(NODE,"Node ID of sensor");
    DOF       = VALUE(INT,"Degree of freedom");
    ACC       = VALUE(FLOAT,"Activating acceleration");
    ATIME     = VALUE(FLOAT,"Time over which acceleration must be exceeded");
  } else 
  if(SBSTYP==2) {
    SBRID     = VALUE(RETRACTOR,"Retractor ID");
    PULRAT    = VALUE(FLOAT,"Rate of pull-out (length/time units)");
    PULTIM    = VALUE(FLOAT,"Time over which rate of pull-out must be exceeded");
  } else
  if(SBSTYP==3) {
    TIME      = VALUE(FLOAT,"Time at which sensor triggers");
  } else
  if(SBSTYP==4) {
    NID1      = VALUE(NODE,"Node 1 ID");
    NID2      = VALUE(NODE,"Node 2 ID");
    DMX       = VALUE(FLOAT,"Maximum distance");
    DMN       = VALUE(FLOAT,"Minimum distance");
  } 

  
}


DEFAULTS(COMMON) {
 
  _IDPOOL = 17;
}


CHECK(COMMON) {
}


GUI(COMMON) { 
         
	RADIO(SBSTYP) {
		ADD(1,"Acceleration of node");
		ADD(2,"Retractor pull-out rate");
		ADD(3,"Time");
		ADD(4,"Distance between nodes");	
	}
	

	RADIO(SBSFL,"Sensor flag") {
		ADD(0,"Sensor active during dynamic relaxation");
		ADD(1,"Sensor can be triggered during dynamic relaxation");
	}

  if(SBSTYP==1) {
	
	mandatory:
	DATA(NID);
	optional:
        RADIO(DOF) {
		ADD(1,"x");
		ADD(2,"y");
		ADD(3,"z");
	}
	SCALAR(ACC) {DIMENSION="acceleration";}
	SCALAR(ATIME) {DIMENSION="t";}
  }
  
  if(SBSTYP==2) {
	
	mandatory:
	DATA(SBRID);
	optional:
        SCALAR(PULRAT);
	SCALAR(PULTIM);
  }

  if(SBSTYP==3) {
	
	SCALAR(TIME) {DIMENSION="t";}
  }

  if(SBSTYP==4) {
	
	mandatory:
	DATA(NID1);
        DATA(NID2);
        optional:
	SCALAR(DMX) {DIMENSION="l";}
        SCALAR(DMN) {DIMENSION="l";}
  }	  
}
	
	


FORMAT(Keyword971) {
  COMMENT("$    SBSID    SBSTYP     SBSFL");
  CARD("%10d%10d%10d",_ID_,SBSTYP,SBSFL);
  if(SBSTYP==1) {
    COMMENT("$      NID       DOF       ACC     ATIME");
    CARD("%10d%10d%10lg%10lg",NID,DOF,ACC,ATIME);
  } else 
  if(SBSTYP==2) {
    COMMENT("$    SBRID    PULRAT    PULTIM");
    CARD("%10d%10lg%10lg",SBRID,PULRAT,PULTIM);
  } else 
  if(SBSTYP==3) {
    COMMENT("$     TIME");
    CARD("%10lg",TIME);
  } else 
  if(SBSTYP==4) {
    COMMENT("$     NID1      NID2       DMX       DMN");
    CARD("%10d%10d%10lg%10lg",NID1,NID2,DMX,DMN);
  }
}
