//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- mat_add_erosion.cfg ---

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES

    //Card 1
    LSD_MID                                 = VALUE(MAT,               "Material identification for which this erosion definition applies");
    LSD_EXCL                                = VALUE(FLOAT,             "The exclusion number, which applies to the failure values");
    LSD_MXPRES                              = VALUE(FLOAT,             "Maximum pressure at failure, Pmax");
    LSD_MNEPS                               = VALUE(FLOAT,             "Minimum principal strain at failure, Emin");
    LSD_EFFEPS                              = VALUE(FLOAT,             "Maximum effective strain at failure");
    LSD_VOLEPS                              = VALUE(FLOAT,             "Volumetric strain at failure");
    LSD_NUMFIP                              = VALUE(FLOAT,             "Number of failed integration points prior to element deletion");
    LSD_NCS                                 = VALUE(FLOAT,             "Number of failure conditions to satisfy before failure occurs");

    //Card 2
    LSD_MNPRES                              = VALUE(FLOAT,             "Minimum pressure at failure, Pmin");
    LSD_SIGP1                               = VALUE(FLOAT,             "Maximum principal stress at failure, SigmaMax");
    LSD_SIGVM                               = VALUE(FLOAT,             "Equivalent stress at failure, SigmaMax");
    LSD_MXEPS                               = VALUE(FLOAT,             "Maximum principal strain at failure, EpsilonMax");
    LSD_MXEPS_CURVE                         = VALUE(CURVE,             "-MXEPS is the ID of a curve giving maximum principal strain at failure as a function of effective strain rate");
    LSD_EPSSH                               = VALUE(FLOAT,             "Tensorial shear strain at failure, GammaMax/2");
    LSD_SIGTH                               = VALUE(FLOAT,             "Threshold stress, Sigma");
    LSD_IMPULSE                             = VALUE(FLOAT,             "Stress impulse for failure, Kf");
    LSD_FAILTM                              = VALUE(FLOAT,             "Failure time");

    //Optional Card 3
    LSD_IDAM                                = VALUE(INT,               "Flag for damage model");
    LSD_IDAM2                               = VALUE(INT,               "Flag for damage model");
    LSD_DMGTYP                              = VALUE(FLOAT,             "Damage Type");
    LSD_LCSDG                               = VALUE(CURVE,             "Load curve ID or Table ID");
    LSD_ECRIT                               = VALUE(FLOAT,             "Critical plastic strain (material instability)");
    LSD_ECRIT_CURVE                         = VALUE(CURVE,             "|ECRIT| is load curve ID defining critical equivalent plastic strain vs. triaxiality");
    LSD_DMGEXP                              = VALUE(FLOAT,             "Exponent for nonlinear damage accumulation");
    LSD_DCRIT                               = VALUE(FLOAT,             "Damage threshold value (critical damage)");
    LSD_FADEXP                              = VALUE(FLOAT,             "Exponent for damage-related stress fadeout");
    LSD_FADEXP_CURVE                        = VALUE(CURVE,             "|FADEXP| is load curve ID defining element-size dependent fading exponent");
    LSD_LCREGD                              = VALUE(CURVE,             "Load curve ID defining element size dependent regularization factors");

    //If IDAM.GT.0
    LSD_SIZFLG                              = VALUE(FLOAT,             "Flag for method of element size determination");
    LSD_REFSZ                               = VALUE(FLOAT,             "Reference element size, for which an additional output of damage will be generated");
    LSD_NAHSV                               = VALUE(FLOAT,             "Number of history variables from damage model which should be stored in standard material history array for Postprocessing");
    LSD_LCSRS                               = VALUE(CURVE,             "Load curve ID defining failure strain scaling factor vs. strain rate, scale ECRIT, too");
    LSD_LCSRS_CURVE                         = VALUE(CURVE,             "Load curve ID defining failure strain scaling factor vs. strain rate, do not scale ECRIT");
    LSD_SHRF                                = VALUE(FLOAT,             "Reduction factor for regularization at triaxiality=0 (shear)");
    LSD_BIAXF                               = VALUE(FLOAT,             "Reduction factor for regularization at triaxiality=2/3 (biaxial)");

    //HM INTERNAL - size and value for IDAM & IDAM2
    _dummy_IDAM                             = VALUE(INT,               "_dummy_IDAM");
    _size_IDAM                              = SIZE(                    "_size_IDAM");

    //If IDAM LT.0
    LSD_DITYP                               = ARRAY[_size_IDAM](FLOAT, "Damage initiation type");
    LSD_P1_CURVE                            = ARRAY[_size_IDAM](CURVE, "Damage initiation parameter");
    LSD_P2_ARRAY                            = ARRAY[_size_IDAM](FLOAT, "Damage initiation parameter");
    LSD_P3_ARRAY                            = ARRAY[_size_IDAM](FLOAT, "Damage initiation parameter");


    LSD_DETYP                               = ARRAY[_size_IDAM](FLOAT, "Damage evolution type");
    LSD_DCTYP                               = ARRAY[_size_IDAM](FLOAT, "Damage composition option for multiple criteria");
    LSD_Q1_ARRAY                            = ARRAY[_size_IDAM](FLOAT, "Damage evolution parameter");
    LSD_Q1_CURVE                            = ARRAY[_size_IDAM](CURVE, "Damage evolution parameter");
    LSD_Q2_ARRAY                            = ARRAY[_size_IDAM](FLOAT, "Set to 1.0 to output information to log files (message and d3hsp) when an integration point fails");

    //Optional Cards with additional failure criteria

    //Card 4
    LSD_LCFLD                               = VALUE(CURVE,             "Load curve ID or Table ID");
    LSD_NSFF                                = VALUE(INT,               "Number of explicit time step cycles for stress fade-out used in the LCFLD criterion");
    LSD_EPSTHIN                             = VALUE(FLOAT,             "Thinning strain at failure for thin and thick shells");
    LSD_ENGCRT                              = VALUE(FLOAT,             "Critical energy for nonlocal failure criterion");
    LSD_RADCRT                              = VALUE(FLOAT,             "Critical radius for nonlocal failure criterion");
    LSD_LCEPS12                             = VALUE(CURVE,             "Load curve ID defining in-plane shear strain limit Gamma12 c vs. element size");
    LSD_LCEPS13                             = VALUE(CURVE,             "Load curve ID defining through-thickness shear strain limit Gamma13 c vs. element size");
    LSD_LCEPSMX                             = VALUE(CURVE,             "Load curve ID defining in-plane major strain limit Epsilon1 c");

    //Card 5
    LSD_DTEFLT                              = VALUE(FLOAT,             "The time period (or inverse of the cutoff frequency) for the lowpass filter applied to the effective strain rate when MXEPS is negative");
    LSD_MXTMP                               = VALUE(FLOAT,             "Maximum temperature at failure");
    LSD_DTMIN1                              = VALUE(FLOAT,             "Minimum time step size at failure");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING,            "Solver Keyword");
    LSD_TitleOpt                            = VALUE(INT,               "Title flag");
    LSD_OPT_MXEPS_curve                     = VALUE(INT,               "MXEPS flag");
    LSD_OPT_CARD3                           = VALUE(INT,               "Optional Card3 flag");
    flagforIDAM                             = VALUE(INT,               "IDAM flag");
    LSD_FlagforQ1                           = VALUE(INT,               "Q1 flag");
    optionalCards                           = VALUE(INT,               "Optional Cards flag");
    // Temporary variable to read card5 as optional card to support reading of version < lsDynaR11.1.
    optionalCards_card5                     = VALUE(INT,               "Optional Cards flag");
    LSD_OPT_ECRIT_curve                     = VALUE(INT,               "ECRIT flag");
    LSD_OPT_FADEXP_curve                    = VALUE(INT,               "FADEXP flag");
    LSD_OPT_LCSRS_negative                  = VALUE(INT,               "LCSRS flag");

    IOFLAG                                  = VALUE(INT,               "IOFLAG");
    _TITLE                                  = VALUE(STRING,            "Title");
    _opt                                    = VALUE(STRING,            "Keyword option");
    _dummy_LCSRS                            = VALUE(INT,               "LCSRS value");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES

    //Card 1
    LSD_MID                                 = 2458;
    LSD_EXCL                                = 4980;
    LSD_MXPRES                              = 4981;
    LSD_MNEPS                               = 4982;
    LSD_EFFEPS                              = 6079;
    LSD_VOLEPS                              = 6080;
    LSD_NUMFIP                              = 6081;
    LSD_NCS                                 = 6082;

    //Card 2
    LSD_MNPRES                              = 4983;
    LSD_SIGP1                               = 4984;
    LSD_SIGVM                               = 4985;
    LSD_MXEPS                               = 4986;
    LSD_MXEPS_CURVE                         = 6110;
    LSD_EPSSH                               = 4987;
    LSD_SIGTH                               = 4988;
    LSD_IMPULSE                             = 4989;
    LSD_FAILTM                              = 4990;

    //Optional Card 3
    LSD_IDAM                                = 6084;
    LSD_IDAM2                               = 8385;
    LSD_DMGTYP                              = 6085;
    LSD_LCSDG                               = 6086;
    LSD_ECRIT                               = 6087;
    LSD_ECRIT_CURVE                         = 6103;
    LSD_DMGEXP                              = 6088;
    LSD_DCRIT                               = 6089;
    LSD_FADEXP                              = 6090;
    LSD_FADEXP_CURVE                        = 6108;
    LSD_LCREGD                              = 6091;

    //If IDAM.GT.0
    LSD_SIZFLG                              = 6094;
    LSD_REFSZ                               = 6095;
    LSD_NAHSV                               = 6096;
    LSD_LCSRS                               = 6097;
    LSD_LCSRS_CURVE                         = 8536;
    LSD_SHRF                                = 402;
    LSD_BIAXF                               = 6098;

    //HM INTERNAL - size and value for IDAM & IDAM2
    _dummy_IDAM                             = -1;
    _size_IDAM                              = -1;

    //If IDAM LT.0
    LSD_DITYP                               = 6099;
    LSD_P1_CURVE                            = 6104;
    LSD_P2_ARRAY                            = 6105;
    LSD_P3_ARRAY                            = 8533;

    LSD_DETYP                               = 6100;
    LSD_DCTYP                               = 6101;
    LSD_Q1_ARRAY                            = 6106;
    LSD_Q1_CURVE                            = 7990;
    LSD_Q2_ARRAY                            = 8534;

    //Optional Cards with additional failure criteria

    //Card 4
    LSD_LCFLD                               = 6092;
    LSD_NSFF                                = -1;
    LSD_EPSTHIN                             = 6093;
    LSD_ENGCRT                              = 6414;
    LSD_RADCRT                              = 6413;
    LSD_LCEPS12                             = -1;
    LSD_LCEPS13                             = -1;
    LSD_LCEPSMX                             = -1;

    //Card 5
    LSD_DTEFLT                              = -1;
    LSD_MXTMP                               = -1;
    LSD_DTMIN1                              = 3173;

    //HM INTERNAL
    KEYWORD_STR                             = 9000;
    LSD_TitleOpt                            = 90;
    LSD_OPT_MXEPS_curve                     = 6109;
    LSD_OPT_CARD3                           = 6083;
    flagforIDAM                             = 8419;
    LSD_OPT_LCSRS_negative                  = 6290;
    LSD_FlagforQ1                           = 11710;
    optionalCards                           = 4772;
    // Temporary variable to read card5 as optional card to support reading of version < lsDynaR11.1.
    optionalCards_card5                     = -1;
    LSD_OPT_ECRIT_curve                     = 6102;
    LSD_OPT_FADEXP_curve                    = 6107;

    IOFLAG                                  = -1;
    _TITLE                                  = -1;
    _opt                                    = -1;
    _dummy_LCSRS                            = -1;
}

CHECK(COMMON)
{
    LSD_IDAM2                               <0;
    LSD_ECRIT                               >=0.0;
    LSD_FADEXP                              >0.0;
}

DEFAULTS(COMMON)
{
    //INPUT ATTRIBUTES

    //Card 1
    LSD_EXCL                                = 0.0;
    LSD_NCS                                 = 1.0;

    //Optional Card 3
    LSD_IDAM2                               = 0.0;

    //If IDAM GT.0
    LSD_SIZFLG                              = 0.0;
    LSD_REFSZ                               = 0.0;
    LSD_NAHSV                               = 0.0;
    LSD_SHRF                                = 0.0;
    LSD_BIAXF                               = 0.0;

    //If IDAM.LT.0
    LSD_DITYP                               = 0.0;
    LSD_P2_ARRAY                            = 0.0;
    LSD_DETYP                               = 0.0;
    LSD_DCTYP                               = 0.0;
    LSD_Q1_ARRAY                            = 0.0;

    //Optional Cards with additional failure criteria

    //Card 4
    LSD_NSFF                                = 0.0;
    LSD_EPSTHIN                             = 0.0;
    LSD_ENGCRT                              = 0.0;
    LSD_RADCRT                              = 0.0;
}

GUI(COMMON)
{
    FLAG(LSD_TitleOpt, "LSD_TitleOpt");

    if(LSD_TitleOpt == 0)
    {
        ASSIGN(KEYWORD_STR, "*MAT_ADD_EROSION");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "*MAT_ADD_EROSION_TITLE");
    }

    //check for all DIMENSIONS
    DATA(LSD_MID,      "MID");
    SCALAR(LSD_EXCL,   "EXCL")                  { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_MXPRES, "MXPRES")                { DIMENSION = "pressure" ; }
    SCALAR(LSD_MNEPS,  "MNEPS")                 { DIMENSION = "strain_rate" ; }
    SCALAR(LSD_EFFEPS, "EFFEPS")                { DIMENSION = "strain_rate" ; }
    SCALAR(LSD_VOLEPS, "VOLEPS")                { DIMENSION = "strain_rate" ; }
    SCALAR(LSD_NUMFIP, "NUMFIP")                { DIMENSION = "strain_rate" ; }
    SCALAR(LSD_NCS,    "NCS")                   { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_MNPRES, "MNPRES")                { DIMENSION = "pressure" ; }
    SCALAR(LSD_SIGP1,  "SIGP1")                 { DIMENSION = "pressure" ; }
    SCALAR(LSD_SIGVM,  "SIGVM")                 { DIMENSION = "pressure" ; }

    FLAG(LSD_OPT_MXEPS_curve, "LSD_OPT_MXEPS_curve");
    if(LSD_OPT_MXEPS_curve == 0)
    {
        SCALAR(LSD_MXEPS, "MXEPS")              { DIMENSION = "DIMENSIONLESS" ; }
    }
    else
    {
        DATA(LSD_MXEPS_CURVE, "MXEPS");
    }

    SCALAR(LSD_EPSSH,   "EPSSH")                { DIMENSION = "strain_rate" ; }
    SCALAR(LSD_SIGTH,   "SIGTH")                { DIMENSION = "pressure" ; }
    SCALAR(LSD_IMPULSE, "IMPULSE")              { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_FAILTM,  "FAILTM")               { DIMENSION = "t" ; }

    FLAG(LSD_OPT_CARD3, "LSD_OPT_CARD3");

    SEPARATOR("Optional Card 3");
        if(LSD_OPT_CARD3 == 1)
        {
            FLAG(flagforIDAM, "flagforIDAM");
        }
        if( flagforIDAM == 0)
        {
            RADIO(LSD_IDAM, "IDAM")
            {
                ADD(0, "0: No damage model is used");
                ADD(1, "1: Damage models GISSMO or DIEM");
            }
        }
        else
        {
            SCALAR(LSD_IDAM2, "IDAM")               { DIMENSION = "DIMENSIONLESS" ; }
        }

        FLAG(optionalCards, "optionalCards");
            SEPARATOR("Optional Cards");
                if(optionalCards == 1)
                {
                    DATA(LSD_LCFLD,     "LCFLD");
                    SCALAR(LSD_NSFF,    "NSFF")     { DIMENSION = "DIMENSIONLESS" ; }
                    SCALAR(LSD_EPSTHIN, "EPSTHIN")  { DIMENSION = "strain_rate" ; }
                    SCALAR(LSD_ENGCRT,  "ENGCRT")   { DIMENSION = "energy" ; }
                    SCALAR(LSD_RADCRT,  "RADCRT")   { DIMENSION = "energy" ; }
                    DATA(LSD_LCEPS12,   "LCEPS12");
                    DATA(LSD_LCEPS13,   "LCEPS13");
                    DATA(LSD_LCEPSMX,   "LCEPSMX");
                    SCALAR(LSD_DTEFLT,  "DTEFLT")   { DIMENSION = "t" ; }
                    SCALAR(LSD_MXTMP,   "MXTMP")    { DIMENSION = "k" ; }
                    SCALAR(LSD_DTMIN1,  "DTMIN")    { DIMENSION = "t" ; }
                }
            SEPARATOR();
    SEPARATOR();
}

// File format
FORMAT(Keyword971)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(LSD_TitleOpt == 0)
        {
            HEADER("*MAT_ADD_EROSION");
        }
        else
        {
            HEADER("*MAT_ADD_EROSION_TITLE");
        }
    }
    else //IMPORT
    {
        HEADER("*MAT_ADD_EROSION%-s", _opt);

        if(_opt == "")
        {
            ASSIGN(LSD_TitleOpt, 0, IMPORT);
        }
        else
        {
            ASSIGN(LSD_TitleOpt, 1, IMPORT);
        }
    }

    if(IOFLAG == 0)
    {
        COMMENT("$NAME");
        CARD("%-70s", _TITLE);
    }

    //Card 1
    COMMENT("$      MID      EXCL    MXPRES     MNEPS    EFFEPS    VOLEPS    NUMFIP       NCS");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg", LSD_MID, LSD_EXCL, LSD_MXPRES, LSD_MNEPS, LSD_EFFEPS, LSD_VOLEPS, LSD_NUMFIP, LSD_NCS);

    //Card 2
    COMMENT("$   MNPRES     SIGP1     SIGVM     MXEPS     EPSSH     SIGTH   IMPULSE    FAILTM");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg", LSD_MNPRES, LSD_SIGP1, LSD_SIGVM, SCALAR_OR_OBJECT(LSD_OPT_MXEPS_curve, LSD_MXEPS, LSD_MXEPS_CURVE), LSD_EPSSH, LSD_SIGTH, LSD_IMPULSE, LSD_FAILTM);

    //Optional card 3
    if(LSD_OPT_CARD3 == 1 && IOFLAG == 0 && flagforIDAM == 1)
    {
        COMMENT("$     IDAM    DMGTYP     LCSDG     ECRIT    DMGEXP     DCRIT    FADEXP    LCREGD");
        ASSIGN(_dummy_IDAM, LSD_IDAM2, EXPORT);
    }
    else if(LSD_OPT_CARD3 == 1 && IOFLAG == 0 && flagforIDAM == 0)
    {
        COMMENT("$     IDAM    DMGTYP     LCSDG     ECRIT    DMGEXP     DCRIT    FADEXP    LCREGD");
        ASSIGN(_dummy_IDAM, LSD_IDAM, EXPORT);
    }

    FREE_CARD(LSD_OPT_CARD3, "%10d%10lg%10lg%10lg%10lg%10lg%10lg%10d", _dummy_IDAM, LSD_DMGTYP, LSD_LCSDG, SCALAR_OR_OBJECT(LSD_OPT_ECRIT_curve, LSD_ECRIT, LSD_ECRIT_CURVE), LSD_DMGEXP, LSD_DCRIT, SCALAR_OR_OBJECT(LSD_OPT_FADEXP_curve, LSD_FADEXP, LSD_FADEXP_CURVE), LSD_LCREGD);

    if(LSD_OPT_CARD3 == 1)
    {
        if(IOFLAG == 1 && _dummy_IDAM >= 0)
        {
            ASSIGN(flagforIDAM, 0, IMPORT);
            ASSIGN(LSD_IDAM, _dummy_IDAM, IMPORT);
        }
        else if(IOFLAG == 1 && _dummy_IDAM < 0)
        {
            ASSIGN(flagforIDAM, 1, IMPORT);
            ASSIGN(LSD_IDAM2, _dummy_IDAM, IMPORT);
        }

        //If IDAM GT.0
        if(flagforIDAM == 0 && LSD_IDAM > 0)
        {
            COMMENT("$   SIZFLG     REFSZ     NAHSV     LCSRS      SHRF     BIAXF");

            if(IOFLAG == 0)
            {
                if(LSD_OPT_LCSRS_negative == 0)
                {
                    CARD("%10lg%10lg%10lg%10d%10lg%10lg", LSD_SIZFLG, LSD_REFSZ, LSD_NAHSV, LSD_LCSRS, LSD_SHRF, LSD_BIAXF);
                }
                else
                {
                    ASSIGN(_dummy_LCSRS, LSD_LCSRS_CURVE, EXPORT);
                    ASSIGN(_dummy_LCSRS, _dummy_LCSRS*-1, EXPORT);

                    CARD("%10lg%10lg%10lg%10d%10lg%10lg", LSD_SIZFLG, LSD_REFSZ, LSD_NAHSV, _dummy_LCSRS, LSD_SHRF, LSD_BIAXF);
                }
            }
            else //IMPORT
            {
                CARD_PREREAD("%30s%10d", _BLANK_, _dummy_LCSRS);
                if(_dummy_LCSRS >= 0)
                {
                    CARD("%10lg%10lg%10lg%10d%10lg%10lg", LSD_SIZFLG, LSD_REFSZ, LSD_NAHSV, LSD_LCSRS, LSD_SHRF, LSD_BIAXF);
                    ASSIGN(LSD_OPT_LCSRS_negative, 0, IMPORT);
                }
                else
                {
                    CARD("%10lg%10lg%10lg%10d%10lg%10lg", LSD_SIZFLG, LSD_REFSZ, LSD_NAHSV, _dummy_LCSRS, LSD_SHRF, LSD_BIAXF);
                    ASSIGN(LSD_LCSRS_CURVE,_dummy_LCSRS*-1, IMPORT);
                    ASSIGN(LSD_OPT_LCSRS_negative, 1, IMPORT);
                }
            }
        }

        //If IDAM LT.0
        else if(flagforIDAM == 1 && LSD_IDAM2 < 0)
        {
            ASSIGN(_size_IDAM, LSD_IDAM2*-1, IMPORT);
            ASSIGN(_size_IDAM, LSD_IDAM2*-1, EXPORT);
            CARD_LIST(_size_IDAM)
            {
                COMMENT("$    DITYP        P1        P2");
                CARD("%10lg%10d%10lg", LSD_DITYP, LSD_P1_CURVE, LSD_P2_ARRAY);

                COMMENT("$    DETYP     DCTYP        Q1");
                CARD("%10lg%10lg%10lg", LSD_DETYP, LSD_DCTYP, SCALAR_OR_OBJECT(LSD_FlagforQ1, LSD_Q1_ARRAY, LSD_Q1_CURVE));
            }
        }

        //Optional card 4
        if(optionalCards == 1 && IOFLAG == 1)
        {
            COMMENT("$    LCFLD             EPSTHIN");
        }
        FREE_CARD(optionalCards, "%10d%10s%10lg", LSD_LCFLD, _BLANK_, LSD_EPSTHIN);
    }
}

FORMAT(Keyword971_R7.1)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(LSD_TitleOpt == 0)
        {
            HEADER("*MAT_ADD_EROSION");
        }
        else
        {
            HEADER("*MAT_ADD_EROSION_TITLE");
        }
    }
    else //IMPORT
    {
        HEADER("*MAT_ADD_EROSION%-s", _opt);

        if(_opt == "")
        {
            ASSIGN(LSD_TitleOpt, 0, IMPORT);
        }
        else
        {
            ASSIGN(LSD_TitleOpt, 1, IMPORT);
        }
    }

    if(IOFLAG == 0)
    {
        COMMENT("$NAME");
        CARD("%-70s", _TITLE);
    }

    //Card 1
    COMMENT("$      MID      EXCL    MXPRES     MNEPS    EFFEPS    VOLEPS    NUMFIP       NCS");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg", LSD_MID, LSD_EXCL, LSD_MXPRES, LSD_MNEPS, LSD_EFFEPS, LSD_VOLEPS, LSD_NUMFIP, LSD_NCS);

    //Card 2
    COMMENT("$   MNPRES     SIGP1     SIGVM     MXEPS     EPSSH     SIGTH   IMPULSE    FAILTM");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg", LSD_MNPRES, LSD_SIGP1, LSD_SIGVM, SCALAR_OR_OBJECT(LSD_OPT_MXEPS_curve, LSD_MXEPS, LSD_MXEPS_CURVE), LSD_EPSSH, LSD_SIGTH, LSD_IMPULSE, LSD_FAILTM);
    
    //Optional card 3
    if(LSD_OPT_CARD3 == 1 && IOFLAG == 0 && flagforIDAM == 1)
    {
        COMMENT("$     IDAM    DMGTYP     LCSDG     ECRIT    DMGEXP     DCRIT    FADEXP    LCREGD");
        ASSIGN(_dummy_IDAM, LSD_IDAM2, EXPORT);
    }
    else if(LSD_OPT_CARD3 == 1 && IOFLAG == 0 && flagforIDAM == 0)
    {
        COMMENT("$     IDAM    DMGTYP     LCSDG     ECRIT    DMGEXP     DCRIT    FADEXP    LCREGD");
        ASSIGN(_dummy_IDAM, LSD_IDAM, EXPORT);
    }

    FREE_CARD(LSD_OPT_CARD3, "%10d%10lg%10lg%10lg%10lg%10lg%10lg%10d", _dummy_IDAM, LSD_DMGTYP, LSD_LCSDG, SCALAR_OR_OBJECT(LSD_OPT_ECRIT_curve, LSD_ECRIT, LSD_ECRIT_CURVE), LSD_DMGEXP, LSD_DCRIT, SCALAR_OR_OBJECT(LSD_OPT_FADEXP_curve, LSD_FADEXP, LSD_FADEXP_CURVE), LSD_LCREGD);

    if(LSD_OPT_CARD3 == 1)
    {
        if(IOFLAG == 1 && _dummy_IDAM >= 0)
        {
            ASSIGN(flagforIDAM, 0, IMPORT);
            ASSIGN(LSD_IDAM, _dummy_IDAM, IMPORT);
        }
        else if(IOFLAG == 1 && _dummy_IDAM < 0)
        {
            ASSIGN(flagforIDAM, 1, IMPORT);
            ASSIGN( LSD_IDAM2, _dummy_IDAM, IMPORT);
        }

        //If IDAM GT.0
        if(flagforIDAM == 0 && LSD_IDAM > 0)
        {
            COMMENT("$   SIZFLG     REFSZ     NAHSV     LCSRS      SHRF     BIAXF");

            if(IOFLAG == 0)
            {
                if(LSD_OPT_LCSRS_negative == 0)
                {
                    CARD("%10lg%10lg%10lg%10d%10lg%10lg", LSD_SIZFLG, LSD_REFSZ, LSD_NAHSV, LSD_LCSRS, LSD_SHRF, LSD_BIAXF);
                }
                else
                {
                    ASSIGN(_dummy_LCSRS, LSD_LCSRS_CURVE, EXPORT);
                    ASSIGN(_dummy_LCSRS, _dummy_LCSRS*-1, EXPORT);

                    CARD("%10lg%10lg%10lg%10d%10lg%10lg", LSD_SIZFLG, LSD_REFSZ, LSD_NAHSV, _dummy_LCSRS, LSD_SHRF, LSD_BIAXF);
                }
            }
            else //IMPORT
            {
                CARD_PREREAD("%30s%10d", _BLANK_, _dummy_LCSRS);
                if(_dummy_LCSRS >= 0)
                {
                    CARD("%10lg%10lg%10lg%10d%10lg%10lg", LSD_SIZFLG, LSD_REFSZ, LSD_NAHSV, LSD_LCSRS, LSD_SHRF, LSD_BIAXF);
                    ASSIGN(LSD_OPT_LCSRS_negative, 0, IMPORT);
                }
                else
                {
                    CARD("%10lg%10lg%10lg%10d%10lg%10lg", LSD_SIZFLG, LSD_REFSZ, LSD_NAHSV, _dummy_LCSRS, LSD_SHRF, LSD_BIAXF);
                    ASSIGN(LSD_LCSRS_CURVE,_dummy_LCSRS*-1, IMPORT);
                    ASSIGN(LSD_OPT_LCSRS_negative, 1, IMPORT);
                }
            }
        }

        //If IDAM LT.0
        else if(flagforIDAM == 1 && LSD_IDAM2 < 0)
        {
            ASSIGN(_size_IDAM, LSD_IDAM2*-1, IMPORT);
            ASSIGN(_size_IDAM, LSD_IDAM2*-1, EXPORT);
            CARD_LIST(_size_IDAM)
            {
                COMMENT("$    DITYP        P1        P2");
                CARD("%10lg%10d%10lg", LSD_DITYP, LSD_P1_CURVE, LSD_P2_ARRAY);

                COMMENT("$    DETYP     DCTYP        Q1");
                CARD("%10lg%10lg%10lg", LSD_DETYP, LSD_DCTYP, SCALAR_OR_OBJECT(LSD_FlagforQ1, LSD_Q1_ARRAY, LSD_Q1_CURVE));
            }
        }

        //Optional card 4
        if(optionalCards == 1 && IOFLAG == 1)
        {
            COMMENT("$    LCFLD             EPSTHIN    ENGCRT    RADCRT");
        }
        FREE_CARD(optionalCards, "%10d%10s%10lg%10lg%10lg", LSD_LCFLD, _BLANK_, LSD_EPSTHIN, LSD_ENGCRT, LSD_RADCRT);
    }
}

FORMAT(Keyword971_R9.3)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(LSD_TitleOpt == 0)
        {
            HEADER("*MAT_ADD_EROSION");
        }
        else
        {
            HEADER("*MAT_ADD_EROSION_TITLE");
        }
    }
    else //IMPORT
    {
        HEADER("*MAT_ADD_EROSION%-s", _opt);

        if(_opt == "")
        {
            ASSIGN(LSD_TitleOpt, 0, IMPORT);
        }
        else
        {
            ASSIGN(LSD_TitleOpt, 1, IMPORT);
        }
    }

    if(IOFLAG == 0)
    {
        COMMENT("$NAME");
        CARD("%-70s", _TITLE);
    }

    //Card 1
    COMMENT("$      MID      EXCL    MXPRES     MNEPS    EFFEPS    VOLEPS    NUMFIP       NCS");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg", LSD_MID, LSD_EXCL, LSD_MXPRES, LSD_MNEPS, LSD_EFFEPS, LSD_VOLEPS, LSD_NUMFIP, LSD_NCS);

    //Card 2
    COMMENT("$   MNPRES     SIGP1     SIGVM     MXEPS     EPSSH     SIGTH   IMPULSE    FAILTM");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg", LSD_MNPRES, LSD_SIGP1, LSD_SIGVM, SCALAR_OR_OBJECT(LSD_OPT_MXEPS_curve, LSD_MXEPS, LSD_MXEPS_CURVE), LSD_EPSSH, LSD_SIGTH, LSD_IMPULSE, LSD_FAILTM);


    if(LSD_OPT_CARD3 == 1 && IOFLAG == 0 && flagforIDAM == 1)
    {
        //Optional card 3
        COMMENT("$     IDAM    DMGTYP     LCSDG     ECRIT    DMGEXP     DCRIT    FADEXP    LCREGD");
        ASSIGN(_dummy_IDAM, LSD_IDAM2, EXPORT);
    }
    else if(LSD_OPT_CARD3 == 1 && IOFLAG == 0 && flagforIDAM == 0)
    {
        //Optional card 3
        COMMENT("$     IDAM    DMGTYP     LCSDG     ECRIT    DMGEXP     DCRIT    FADEXP    LCREGD");
        ASSIGN(_dummy_IDAM, LSD_IDAM, EXPORT);
    }

    FREE_CARD(LSD_OPT_CARD3, "%10d%10lg%10lg%10lg%10lg%10lg%10lg%10d", _dummy_IDAM, LSD_DMGTYP, LSD_LCSDG, SCALAR_OR_OBJECT(LSD_OPT_ECRIT_curve, LSD_ECRIT, LSD_ECRIT_CURVE), LSD_DMGEXP, LSD_DCRIT, SCALAR_OR_OBJECT(LSD_OPT_FADEXP_curve, LSD_FADEXP, LSD_FADEXP_CURVE), LSD_LCREGD);
    if(LSD_OPT_CARD3 == 1)
    {
        if(IOFLAG == 1 && _dummy_IDAM >= 0)
        {
            ASSIGN(flagforIDAM, 0, IMPORT);
            ASSIGN(LSD_IDAM, _dummy_IDAM, IMPORT);
        }
        else if(IOFLAG == 1 && _dummy_IDAM < 0)
        {
            ASSIGN(flagforIDAM, 1, IMPORT);
            ASSIGN(LSD_IDAM2, _dummy_IDAM, IMPORT);
        }

        //If IDAM GT.0
        if(flagforIDAM == 0 && LSD_IDAM > 0)
        {
            COMMENT("$   SIZFLG     REFSZ     NAHSV     LCSRS      SHRF     BIAXF");

            if(IOFLAG == 0)
            {
                if(LSD_OPT_LCSRS_negative == 0)
                {
                    CARD("%10lg%10lg%10lg%10d%10lg%10lg", LSD_SIZFLG, LSD_REFSZ, LSD_NAHSV, LSD_LCSRS, LSD_SHRF, LSD_BIAXF);
                }
                else
                {
                    ASSIGN(_dummy_LCSRS, LSD_LCSRS_CURVE, EXPORT);
                    ASSIGN(_dummy_LCSRS, _dummy_LCSRS*-1, EXPORT);

                    CARD("%10lg%10lg%10lg%10d%10lg%10lg", LSD_SIZFLG, LSD_REFSZ, LSD_NAHSV, _dummy_LCSRS, LSD_SHRF, LSD_BIAXF);
                }
            }
            else //IMPORT
            {
                CARD_PREREAD("%30s%10d", _BLANK_, _dummy_LCSRS);
                if(_dummy_LCSRS >= 0)
                {
                    CARD("%10lg%10lg%10lg%10d%10lg%10lg", LSD_SIZFLG, LSD_REFSZ, LSD_NAHSV, LSD_LCSRS, LSD_SHRF, LSD_BIAXF);
                    ASSIGN(LSD_OPT_LCSRS_negative, 0, IMPORT);
                }
                else
                {
                    CARD("%10lg%10lg%10lg%10d%10lg%10lg", LSD_SIZFLG, LSD_REFSZ, LSD_NAHSV, _dummy_LCSRS, LSD_SHRF, LSD_BIAXF);
                    ASSIGN(LSD_LCSRS_CURVE,_dummy_LCSRS*-1, IMPORT);
                    ASSIGN(LSD_OPT_LCSRS_negative, 1, IMPORT);
                }
            }
        }

        //If IDAM LT.0
        else if(flagforIDAM == 1 && LSD_IDAM2 < 0)
        {
            ASSIGN(_size_IDAM, LSD_IDAM2*-1, IMPORT);
            ASSIGN(_size_IDAM, LSD_IDAM2*-1, EXPORT);
            CARD_LIST(_size_IDAM)
            {
                COMMENT("$    DITYP        P1        P2        P3");
                CARD("%10lg%10d%10lg%10lg", LSD_DITYP, LSD_P1_CURVE, LSD_P2_ARRAY, LSD_P3_ARRAY);

                COMMENT("$    DETYP     DCTYP        Q1        Q2");
                CARD("%10lg%10lg%10lg%10lg", LSD_DETYP, LSD_DCTYP, SCALAR_OR_OBJECT(LSD_FlagforQ1, LSD_Q1_ARRAY, LSD_Q1_CURVE), LSD_Q2_ARRAY);
            }
        }

        //Optional card 4
        if(optionalCards == 1 && IOFLAG == 0)
        {
            COMMENT("$    LCFLD             EPSTHIN    ENGCRT    RADCRT");
        }
        FREE_CARD(optionalCards, "%10d%10s%10lg%10lg%10lg", LSD_LCFLD, _BLANK_, LSD_EPSTHIN, LSD_ENGCRT, LSD_RADCRT);
    }
}

FORMAT(Keyword971_R11.1)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(LSD_TitleOpt == 0)
        {
            HEADER("*MAT_ADD_EROSION");
        }
        else
        {
            HEADER("*MAT_ADD_EROSION_TITLE");
        }
    }
    else //IMPORT
    {
        HEADER("*MAT_ADD_EROSION%-s", _opt);

        if(_opt == "")
        {
            ASSIGN(LSD_TitleOpt, 0, IMPORT);
        }
        else
        {
            ASSIGN(LSD_TitleOpt, 1, IMPORT);
        }
    }

    if(IOFLAG == 0)
    {
        COMMENT("$NAME");
        CARD("%-70s", _TITLE);
    }

    //Card 1
    COMMENT("$      MID      EXCL    MXPRES     MNEPS    EFFEPS    VOLEPS    NUMFIP       NCS");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg", LSD_MID, LSD_EXCL, LSD_MXPRES, LSD_MNEPS, LSD_EFFEPS, LSD_VOLEPS, LSD_NUMFIP, LSD_NCS);

    //Card 2
    COMMENT("$   MNPRES     SIGP1     SIGVM     MXEPS     EPSSH     SIGTH   IMPULSE    FAILTM");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg", LSD_MNPRES, LSD_SIGP1, LSD_SIGVM, SCALAR_OR_OBJECT(LSD_OPT_MXEPS_curve, LSD_MXEPS, LSD_MXEPS_CURVE), LSD_EPSSH, LSD_SIGTH, LSD_IMPULSE, LSD_FAILTM);

    if(LSD_OPT_CARD3 == 1 && IOFLAG == 0 && flagforIDAM == 1)
    {
        ASSIGN(_dummy_IDAM, LSD_IDAM2, EXPORT);
    }
    else if(LSD_OPT_CARD3 == 1 && IOFLAG == 0 && flagforIDAM == 0)
    {
        ASSIGN(_dummy_IDAM, LSD_IDAM, EXPORT);
    }
    //Optional card 3
    if(LSD_OPT_CARD3 == 1 && IOFLAG == 0 )
    {
        COMMENT("$     IDAM    DMGTYP     LCSDG     ECRIT    DMGEXP     DCRIT    FADEXP    LCREGD");
    }
    FREE_CARD(LSD_OPT_CARD3, "%10d%10lg%10lg%10lg%10lg%10lg%10lg%10d", _dummy_IDAM, LSD_DMGTYP, LSD_LCSDG, SCALAR_OR_OBJECT(LSD_OPT_ECRIT_curve, LSD_ECRIT, LSD_ECRIT_CURVE), LSD_DMGEXP, LSD_DCRIT, SCALAR_OR_OBJECT(LSD_OPT_FADEXP_curve, LSD_FADEXP, LSD_FADEXP_CURVE), LSD_LCREGD);
    if(LSD_OPT_CARD3 == 1)
    {
        if(_dummy_IDAM > 0)
        {
            ASSIGN(flagforIDAM, 0, IMPORT);
            ASSIGN(LSD_IDAM, _dummy_IDAM, IMPORT);
            
            // For reading deck from < R11.1 
            //Additional card for IDAM > 0.
            COMMENT("$   SIZFLG     REFSZ     NAHSV     LCSRS      SHRF     BIAXF");
            if(IOFLAG == 0)
            {
                if(LSD_OPT_LCSRS_negative == 0)
                {
                    CARD("%10lg%10lg%10lg%10d%10lg%10lg", LSD_SIZFLG, LSD_REFSZ, LSD_NAHSV, LSD_LCSRS, LSD_SHRF, LSD_BIAXF);
                }
                else
                {
                    ASSIGN(_dummy_LCSRS, LSD_LCSRS_CURVE, EXPORT);
                    ASSIGN(_dummy_LCSRS, _dummy_LCSRS*-1, EXPORT);
                    CARD("%10lg%10lg%10lg%10d%10lg%10lg", LSD_SIZFLG, LSD_REFSZ, LSD_NAHSV, _dummy_LCSRS, LSD_SHRF, LSD_BIAXF);
                }
            }
            else //IMPORT
            {
                CARD_PREREAD("%30s%10d", _BLANK_, _dummy_LCSRS);
                if(_dummy_LCSRS >= 0)
                {
                    CARD("%10lg%10lg%10lg%10d%10lg%10lg", LSD_SIZFLG, LSD_REFSZ, LSD_NAHSV, LSD_LCSRS, LSD_SHRF, LSD_BIAXF);
                    ASSIGN(LSD_OPT_LCSRS_negative, 0, IMPORT);
                }
                else
                {
                    CARD("%10lg%10lg%10lg%10d%10lg%10lg", LSD_SIZFLG, LSD_REFSZ, LSD_NAHSV, _dummy_LCSRS, LSD_SHRF, LSD_BIAXF);
                    ASSIGN(LSD_LCSRS_CURVE,_dummy_LCSRS*-1, IMPORT);
                    ASSIGN(LSD_OPT_LCSRS_negative, 1, IMPORT);
                }
            }
        }
        // For reading deck from < R11.1 
        // Damage Initiation and Evolution Card Pairs. For IDAM < 0 include | IDAM | pairs of
        // Cards 5 and 6.
        else if(_dummy_IDAM < 0)
        {
            ASSIGN(flagforIDAM, 1, IMPORT);
            ASSIGN(LSD_IDAM2, _dummy_IDAM, IMPORT);

            ASSIGN(_size_IDAM, LSD_IDAM2*-1, IMPORT);
            ASSIGN(_size_IDAM, LSD_IDAM2*-1, EXPORT);
            CARD_LIST(_size_IDAM)
            {
                COMMENT("$    DITYP        P1        P2        P3");
                CARD("%10lg%10d%10lg%10lg", LSD_DITYP, LSD_P1_CURVE, LSD_P2_ARRAY, LSD_P3_ARRAY);

                COMMENT("$    DETYP     DCTYP        Q1        Q2");
                CARD("%10lg%10lg%10lg%10lg", LSD_DETYP, LSD_DCTYP, SCALAR_OR_OBJECT(LSD_FlagforQ1, LSD_Q1_ARRAY, LSD_Q1_CURVE), LSD_Q2_ARRAY);
            }
        }
        else
        {
            ASSIGN(flagforIDAM, 0, IMPORT);
            ASSIGN(LSD_IDAM, _dummy_IDAM, IMPORT);
        }

        //Optional Cards with additional failure criteria
        //Card 4
        if(optionalCards == 1 && IOFLAG == 0 )
        {
            COMMENT("$    LCFLD      NSFF   EPSTHIN    ENGCRT    RADCRT   LCEPS12   LCEPS13   LCEPSMX");
        }
        FREE_CARD(optionalCards, "%10d%10d%10lg%10lg%10lg%10d%10d%10d", LSD_LCFLD, LSD_NSFF, LSD_EPSTHIN, LSD_ENGCRT, LSD_RADCRT, LSD_LCEPS12, LSD_LCEPS13, LSD_LCEPSMX);

        //Card 5
        if(optionalCards == 1)
        {
            // Read card5 as optional card to support reading of version < lsDynaR11.1.
            if(optionalCards_card5 == 1 && IOFLAG == 0 )
            {
                COMMENT("$   DTEFLT               MXTMP     DTMIN");
            }
            FREE_CARD(optionalCards_card5, "%10lg%10s%10lg%10lg", LSD_DTEFLT, _BLANK_, LSD_MXTMP, LSD_DTMIN1);
        }
    }
}
