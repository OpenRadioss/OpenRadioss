//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Property
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    LSD_AAFAC                               = VALUE(FLOAT,  "AAFAC");
    LSD_AFAC                                = VALUE(FLOAT,  "AFAC");
    LSD_NIP                                 = SIZE("No of rows");
    LSD_B                                   = ARRAY[LSD_NIP](FLOAT,  "B");
    LSD_BASELM                              = VALUE(INT,  "BASELM");
    LSD_BFAC                                = VALUE(FLOAT,  "BFAC");
    LSD_CFAC                                = VALUE(FLOAT,  "CFAC");
    LSD_DFAC                                = VALUE(FLOAT,  "DFAC");
    LSD_DOMINT                              = VALUE(INT,  "DOMINT");
    LSD_DX                                  = VALUE(FLOAT,  "DX");
    LSD_DY                                  = VALUE(FLOAT,  "DY");
    LSD_EFAC                                = VALUE(FLOAT,  "EFAC");
    LSD_ELFORM                              = VALUE(INT,  "ELFORM");
    LSD_END                                 = VALUE(FLOAT,  "END");
    LSD_NIPP                                = SIZE("LSD_NIPP");
    LSD_ETA                                 = ARRAY[LSD_NIPP](FLOAT,  "ETA");
    LSD_FAILCR                              = VALUE(INT,  "FAILCR");
    LSD_ICOMP                               = VALUE(INT,  "ICOMP");
    LSD_IDILA                               = VALUE(INT,  "IDILA");
    LSD_IDOF                                = VALUE(FLOAT,  "IDOF");
    LSD_IDOF2                               = VALUE(FLOAT,  "LSD_IDOF2");
    LSD_IEBT                                = VALUE(INT,  "IEBT");
    LSD_IHGF                                = VALUE(INT,  "IHGF");
    LSD_ILOC                                = VALUE(INT,  "ILOC");
    LSD_IRID                                = VALUE(INTEGRATIONRULE,  "IRID");
    LSD_ISPLINE                             = VALUE(INT,  "ISPLINE");
    LSD_ITAJ                                = VALUE(INT,  "ITAJ");
    LSD_ITHELFM                             = VALUE(INT,  "ITHELFM");
    LSD_IUNF                                = VALUE(INT,  "IUNF");
    LSD_LMC                                 = SIZE("LSD_LMC");
    LSD_LPRINT                              = VALUE(INT,  "LPRINT");
    LSD_NHSV                                = VALUE(INT,  "NHSV");
    LSD_NLOC                                = VALUE(FLOAT,  "NLOC");
    LSD_NSID                                = VALUE(SETS,  "EDGSET")      { SUBTYPES = ( /SETS/SET_NODE_IDPOOL  ) ;  }   
    LSD_NXDOF                               = VALUE(INT,  "NXDOF");
    LSD_PROPCR                              = VALUE(INT,  "PROPCR");
    LSD_PROPT                               = VALUE(FLOAT,  "PROPT");
    LSD_QR                                  = VALUE(FLOAT,  "QR");
    LSD_SEC_CMID                            = VALUE(MAT,  "CMID");
    LSD_SEC_IDIM                            = VALUE(INT,  "IDIM");
    LSD_SEC_P                               = ARRAY[LSD_LMC](FLOAT,  "P");
    LSD_SEC_WGT                             = ARRAY[LSD_NIPP](FLOAT,  "WGT");
    LSD_SETYP                               = VALUE(INT,  "SETYP");
    LSD_SHRF                                = VALUE(FLOAT,  "SHRF");
    LSD_START                               = VALUE(FLOAT,  "START");
    LSD_T1                                  = VALUE(FLOAT,  "T1");
    LSD_T2                                  = VALUE(FLOAT,  "T2");
    LSD_T3                                  = VALUE(FLOAT,  "T3");
    LSD_T4                                  = VALUE(FLOAT,  "T4");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    LSD_XI                                  = ARRAY[LSD_NIPP](FLOAT,  "XI");
    NonUniformOpt                           = VALUE(INT,  "NonUniformThickness");
    Option1                                 = VALUE(INT,  "NegativeIDOF");
    SectShell_MAREA                         = VALUE(FLOAT,  "MAREA");
    Sect_Option                             = VALUE(INT,  "Int_Rule_ID");
    aleOption                               = VALUE(INT,  "Options");
    LSD_ELFORM2                             = VALUE(INT,  "ELFORM");
    LSD_ELFORMOPT                           = VALUE(INT,  "GE1000");
    
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    LSD_AAFAC                               = 451;
    LSD_AFAC                                = 445;
    LSD_B                                   = 436;
    LSD_BASELM                              = 6270;
    LSD_BFAC                                = 446;
    LSD_CFAC                                = 447;
    LSD_DFAC                                = 448;
    LSD_DOMINT                              = 6271;
    LSD_DX                                  = 4678;
    LSD_DY                                  = 4679;
    LSD_EFAC                                = 3225;
    LSD_ELFORM                              = 399;
    LSD_END                                 = 450;
    LSD_ETA                                 = 6283;
    LSD_FAILCR                              = 6272;
    LSD_ICOMP                               = 430;
    LSD_IDILA                               = 558;
    LSD_IDOF                                = 2015;
    LSD_IDOF2                               = 509;
    LSD_IEBT                                = 559;
    LSD_IHGF                                = 6277;
    LSD_ILOC                                = 6281;
    LSD_IRID                                = 1649;
    LSD_ISPLINE                             = 557;
    LSD_ITAJ                                = 6278;
    LSD_ELFORM2                             = 8246;
    LSD_ELFORMOPT                           = 8247;
    LSD_ITHELFM                             = 6269;
    LSD_IUNF                                = 6276;
    LSD_LMC                                 = 6279;
    LSD_LPRINT                              = 3154;
    LSD_NHSV                                = 6280;
    LSD_NIP                                 = 427;
    LSD_NIPP                                = 6274;
    LSD_NLOC                                = 435;
    LSD_NSID                                = 745;
    LSD_NXDOF                               = 6275;
    LSD_PROPCR                              = 6273;
    LSD_PROPT                               = 428;
    LSD_QR                                  = 429;
    LSD_SEC_CMID                            = 6286;
    LSD_SEC_IDIM                            = 568;
    LSD_SEC_P                               = 6285;
    LSD_SEC_WGT                             = 6284;
    LSD_SETYP                               = 4428;
    LSD_SHRF                                = 402;
    LSD_START                               = 449;
    LSD_T1                                  = 431;
    LSD_T2                                  = 432;
    LSD_T3                                  = 433;
    LSD_T4                                  = 434;
    LSD_TitleOpt                            = 90;
    LSD_XI                                  = 6282;
    NonUniformOpt                           = 457;
    Option1                                 = 686;
    SectShell_MAREA                         = 4190;
    Sect_Option                             = 458;
    aleOption                               = 4540;

}

CHECK(COMMON)
{

    LSD_IDOF2                                 < 0.0;
    LSD_ELFORM2                               >= 1000; 
}

DEFAULTS(COMMON)
{

    LSD_DX          = 1.1;
    LSD_DY          = 1.1;
    LSD_ELFORM      = 0;
    LSD_IDOF        = 0.0;
    LSD_IEBT        = -1;
    LSD_NIP         = 2;
    LSD_SEC_IDIM    = 2;
    LSD_SHRF        = 1.0;
    
}

DRAWABLES(COMMON) {
public:
  SIMPLE_AVERAGE=SCALAR(LSD_AFAC);
  VOLUME_WEIGHTING=SCALAR(LSD_BFAC);
  ISOPARAMETRIC=SCALAR(LSD_CFAC);
  EQUIPOTENTIAL=SCALAR(LSD_DFAC);
  START_TIME_FOR_SMOOTHING=SCALAR(LSD_START);
  END_TIME_FOR_SMOOTHING=SCALAR(LSD_END);
  ALE_ADVECTION_FACTOR=SCALAR(LSD_AAFAC);
}

GUI(COMMON)
{

    ASSIGN(KEYWORD_STR, "*SECTION_SHELL");
    RADIO(aleOption)
    {
       ADD(1, "NONE");
       ADD(2, "ALE");
       ADD(3, "EFG");
       ADD(4, "THERMAL");
       ADD(5, "XFEM");
    }
    if(aleOption == 2)
    {
        ASSIGN(KEYWORD_STR, "_ALE");
    }
    if(aleOption == 3)
    {
        ASSIGN(KEYWORD_STR, "_EFG");
    }
    if(aleOption == 4)
    {
        ASSIGN(KEYWORD_STR, "_THERMAL");
    }
    if(aleOption == 5)
    {
        ASSIGN(KEYWORD_STR, "_XFEM");
    }
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    }
    FLAG(LSD_ELFORMOPT);
    if(LSD_ELFORMOPT == FALSE)
    {
        RADIO(LSD_ELFORM)
        {
            ADD(0,   "0: Default");
            ADD(1,   "1: Hughes-Liu");
            ADD(2,   "2: Belytschko-Tsay");
            ADD(3,   "3: BCIZ triangular shell");
            ADD(4,   "4: C0 triangular shell");
            ADD(5,   "5: Belytschko-Tsay membrane");
            ADD(6,   "6: S/R Hughes-Liu");
            ADD(7,   "7: S/R co-rotational Hughes-Liu");
            ADD(8,   "8: Belytschko-Leviathan shell");
            ADD(9,   "9: Fully integrated Belytschko-Tsay membrane");
            ADD(10,  "10: Belytschko-Wong-Chian");
            ADD(11,  "11: Fast (co-rotational) Hughes-Liu");
            ADD(12,  "12: Plane stress (x-y plane)");
            ADD(13,  "13: Plane strain (x-y plane)");
            ADD(14,  "14: Axisymmetric solid (y-axis of symmetry)");
            ADD(15,  "15: Axisymmetric solid (y-axis of symmetry)");
            ADD(16,  "16: Fully integrated shell element (very fast)");
            ADD(-16, "-16: Fully integrated shell element modified for higher accuracy,");
            ADD(17,  "17: Fully integrated DKT, triangular shell element");
            ADD(18,  "18: Fully integrated linear DK quad./triang. shell");
            ADD(20,  "20: Fully integrated linear assumed strain C0 shell");
            ADD(21,  "21: Fully integrated linear assumed strain C0 shell");
            ADD(22,  "22: Linear shear panel element");
            ADD(23,  "23: 8-node quadratic quadrilateral shell");
            ADD(24,  "24: 6-node quadratic triangular shell");
            ADD(25,  "25: Belytschko-Tsay shell with thickness stretch");
            ADD(26,  "26: Fully integrated shell with thickness stretch");
            ADD(27,  "27: C0 triangular shell with thickness stretch");
            ADD(29,  "29: Cohesive shell element for edge-to-edge shell connection");
            ADD(41,  "41: Mesh-free shell local approach");
            ADD(42,  "42: Mesh-free shell global approach");
            ADD(43,  "43: Mesh-free plane strain formulation");
            ADD(44,  "44: Mesh-free axisymmetric solid formulation (y-axis of symm.)");
            ADD(46,  "46: Cohesive element for two-dimensional plane strain, plane stress, and area-weighted axisymmetric problems (type 14 shells)");
            ADD(47,  "47: Cohesive element for two-dimensional volumeweighted axisymmetric problems (type 15 shells)");
            ADD(52,  "52: Plane strain (x-y plane) XFEM, base element type 13");
            ADD(54,  "54: Shell XFEM, base element type defined by BASELM (default 16)");
            ADD(55,  "55: 8-node singular plane strain finite element");
            ADD(98,  "98: Interpolation shell");
            ADD(99,  "99: Simplified linear element for time-domain vibration studies");
            ADD(101, "101: User defined shell");
            ADD(102, "102: User defined shell");
            ADD(103, "103: User defined shell");
            ADD(104, "104: User defined shell");
            ADD(105, "105: User defined shell");
            ADD(201, "201: Isogeometric shells with NURBS");
        }
    }
    if(LSD_ELFORMOPT == TRUE)
    {
        SCALAR(LSD_ELFORM2);
    }
    SCALAR(LSD_SHRF)                            {DIMENSION="DIMENSIONLESS";}
    SIZE(LSD_NIP);
    RADIO(LSD_PROPT)
    {
        ADD(0.0, "0.0: Default");
        ADD(1.0, "1.0: Average resultants and fiber lengths");
        ADD(2.0, "2.0: Resultants at plan points and fiber lengths");
        ADD(3.0, "3.0: Resultants, stresses at all points, fiber lengths");
    }
    FLAG(Sect_Option);
    if(Sect_Option == FALSE)
    {
        SCALAR(LSD_QR);
    }
    if(Sect_Option == TRUE)
    {
        DATA(LSD_IRID); //{SUBTYPE}
    }
    RADIO(LSD_ICOMP)
    {
        ADD(0, "0: Default");
        ADD(1, "1: A material angle in degrees is defined for each through thickness integration point");
    }
    RADIO(LSD_SETYP)
    {
        ADD(1, "1");
        ADD(2, "2");
        ADD(3, "3");
    }
    FLAG(NonUniformOpt);
    if(NonUniformOpt == FALSE || NonUniformOpt == TRUE)
    {
        SCALAR(LSD_T1)                          {DIMENSION="l";}
    }
    if(NonUniformOpt == TRUE)
    {
        SCALAR(LSD_T2)                          {DIMENSION="l";}
        SCALAR(LSD_T3)                          {DIMENSION="l";}
        SCALAR(LSD_T4)                          {DIMENSION="l";}
    }
    
    
    SCALAR(LSD_NLOC);
    SCALAR(SectShell_MAREA)                     {DIMENSION="surfacic_mass";}
    FLAG(Option1);
    if(Option1 == FALSE)
    {
        RADIO(LSD_IDOF)
        {
            ADD(0.0, "0.0: Default");
            ADD(1.0, "1.0: Continuous (metalforming)");
            ADD(2.0, "2.0: Discontinuous (crashworthiness)");
            ADD(3.0, "3.0: The thickness strain is governed by the contact stress");
        }
    }
    if(Option1 == FALSE)
    {
        SCALAR(LSD_IDOF2);
    }
    DATA(LSD_NSID);
    if(LSD_ICOMP == 1)
    {
        SIZE(LSD_NIP);
        ARRAY(LSD_NIP,"Material angle at integration points")
        {
           SCALAR(LSD_B)                        {DIMENSION="a";}
        }
    }
    if(aleOption == 2)
    {
        SCALAR(LSD_AFAC)                        {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_BFAC)                        {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_CFAC)                        {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_DFAC)                        {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_EFAC)                        {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_START)                       {DIMENSION="t";}
        SCALAR(LSD_END)                         {DIMENSION="t";}
        SCALAR(LSD_AAFAC)                       {DIMENSION="DIMENSIONLESS";}
    }
    if(aleOption == 3)
    {
        SCALAR(LSD_DX);
        SCALAR(LSD_DY);
        SCALAR(LSD_ISPLINE);
        SCALAR(LSD_IDILA);
        RADIO(LSD_IEBT)
        {
            ADD(-1, "-1: Without full transformation");
            ADD( 1, " 1: Full transformation");
            ADD( 3, " 3: Coupled FEM/EFG");
            ADD( 7, " 7: Maximum entropy approximation");
        }
        RADIO(LSD_SEC_IDIM)
        {
            ADD(1, "1: First-kind local boundary condition method");
            ADD(2, "2: Gauss integration/Second Method" );
        }
    }
    if(aleOption == 4)
    {
        RADIO(LSD_ITHELFM)
        {
            ADD(0, "0: Default");
            ADD(1, "1: Thick thermal shell");
            ADD(2, "2: Thin thermal shell");
        }
    }
    if(aleOption == 5)
    {
        DATA(LSD_SEC_CMID);
        SCALAR(LSD_BASELM);
        RADIO(LSD_DOMINT)
        {
            ADD(0, "0: Phantom element integration");
            ADD(1, "1: Subdomain integration with triangular local boundary integration");
        }
        RADIO(LSD_FAILCR)
        {
            ADD(1, "1: Maximum tensile stress");
            ADD(2, "2: Maximum shear stress");
        }
        SCALAR(LSD_PROPCR);
        RADIO(LSD_LPRINT)
        {
            ADD(0, "0: No debug printout");
            ADD(1, "1: Print debug message");
        }
    }
    if(LSD_ELFORMOPT == FALSE && (LSD_ELFORM == 101 || LSD_ELFORM == 102 || LSD_ELFORM == 103 || LSD_ELFORM == 104 || LSD_ELFORM == 105))
    {
        SIZE(LSD_NIPP);
    }
    if(LSD_ELFORMOPT == FALSE && (LSD_ELFORM == 101 || LSD_ELFORM == 102 || LSD_ELFORM == 103 || LSD_ELFORM == 104 || LSD_ELFORM == 105) && LSD_NIPP > 0)
    {
        ARRAY(LSD_NIPP,"")
        {
           SCALAR(LSD_XI);
           SCALAR(LSD_ETA);
           SCALAR(LSD_SEC_WGT);
        }
    }
    if(LSD_ELFORMOPT == FALSE && (LSD_ELFORM == 101 || LSD_ELFORM == 102 || LSD_ELFORM == 103 || LSD_ELFORM == 104 || LSD_ELFORM == 105))
    {
        SCALAR(LSD_NXDOF);
        RADIO(LSD_IUNF)
        {
            ADD(0, "0: Nodal fiber vectors are not used");
            ADD(1, "1: Nodal fiber vectors are used");
        }
        RADIO(LSD_IHGF)
        {
            ADD(0, "0: Hourglass stabilization is not used");
            ADD(1, "1: LS-DYNA hourglass stabilization is used");
            ADD(2, "2: User-defined hourglass stabilization is used");
            ADD(3, "3: Same as 2, but the resultant material tangent moduli are passed");
        }
        
        RADIO(LSD_ITAJ)
        {
            ADD(0, "0: Set up matrices wrt isoparametric domain");
            ADD(1, "1: Set up matrices wrt physical domain");        
        }
     }   
    if(LSD_ELFORMOPT == FALSE && (LSD_ELFORM == 101 || LSD_ELFORM == 102 || LSD_ELFORM == 103 || LSD_ELFORM == 104 || LSD_ELFORM == 105))
    {
        SIZE(LSD_LMC);
    }
    if(LSD_ELFORMOPT == FALSE && (LSD_ELFORM == 101 || LSD_ELFORM == 102 || LSD_ELFORM == 103 || LSD_ELFORM == 104 || LSD_ELFORM == 105) && LSD_LMC > 0)
    {
        ARRAY(LSD_LMC,"")
        {
           SCALAR(LSD_SEC_P);
        }
    }    
    if(LSD_ELFORMOPT == FALSE && (LSD_ELFORM == 101 || LSD_ELFORM == 102 || LSD_ELFORM == 103 || LSD_ELFORM == 104 || LSD_ELFORM == 105))
    {
        SCALAR(LSD_NHSV);
        RADIO(LSD_ILOC)
        {
            ADD(0, "0: Pass all variables in LS-DYNA local coordinate system");
            ADD(1, "1: Pass all variables in global coordinate system");
        }
    }             

/*
    graphical SUPPORT("Part(s) to which property is applied") {
      OBJECTS=(/COMPONENT/TETRA4,/COMPONENT/BRICK,/COMPONENT/LINEAR_3D,/COMPONENT/TETRA10);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    //
    if(LSD_ELFORMOPT == 1)
    {
        ASSIGN(LSD_ELFORM, _ATTRIB(LSD_ELFORM2), EXPORT);
    }
    COMMENT("$    SECID    ELFORM      SHRF       NIP     PROPT   QR/IRID     ICOMP     SETYP");
    CARD("%10d%10d%10lg%10lg%10lg%10lg%10d%10d",_ID_,LSD_ELFORM,LSD_SHRF,LSD_NIP,LSD_PROPT,SCALAR_OR_OBJECT(Sect_Option,LSD_QR,LSD_IRID),LSD_ICOMP,LSD_SETYP);
    if(LSD_ELFORM >= 1000)
    {
        ASSIGN(LSD_ELFORMOPT, 1, IMPORT);
        ASSIGN(LSD_ELFORM2, _ATTRIB(LSD_ELFORM), IMPORT);
    }
    //
    COMMENT("$       T1        T2        T3        T4      NLOC     MAREA      IDOF    EDGSET");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10d",LSD_T1,LSD_T2,LSD_T3,LSD_T4,LSD_NLOC,SectShell_MAREA,SCALAR_OR_OBJECT(Option1,LSD_IDOF,LSD_IDOF2),LSD_NSID);
    //
    COMMENT("$       B1        B2        B3        B4        B5        B6        B7        B8");
    CELL_LIST(LSD_NIP,"%10lg",LSD_B,8);
    //
    if(aleOption == 3)
    {
        //
        COMMENT("$       DX        DY   ISPLINE     IDILA      IEBT      IDIM");
        CARD("%10lg%10lg%10d%10d%10d%10d",LSD_DX,LSD_DY,LSD_ISPLINE,LSD_IDILA,LSD_IEBT,LSD_SEC_IDIM);
        //
    }
    if(aleOption == 4)
    {
        //
        COMMENT("$  ITHELFM");
        CARD("%10d",LSD_ITHELFM);
        //
    }
    if(aleOption == 5)
    {
        //
        COMMENT("$     CMID    BASELM    DOMINT    FAILCR    PROPCR    LPRINT");
        CARD("%10d%10d%10d%10d%10d%10d",LSD_SEC_CMID,LSD_BASELM,LSD_DOMINT,LSD_FAILCR,LSD_PROPCR,LSD_LPRINT);
        //
    }
    if(LSD_ELFORM == 101 || LSD_ELFORM == 102 || LSD_ELFORM == 103 || LSD_ELFORM == 104 || LSD_ELFORM == 105)
    {
        //
        COMMENT("$     NIPP     NXDOF      IUNF      IHGF      ITAJ       LMC      NHSV      ILOC");
        CARD("%10d%10d%10d%10d%10d%10d%10d%10d",LSD_NIPP,LSD_NXDOF,LSD_IUNF,LSD_IHGF,LSD_ITAJ,LSD_LMC,LSD_NHSV,LSD_ILOC);
        //
    }
    //
    COMMENT("$       XI       ETA       WGT");
    CELL_LIST(LSD_NIPP,"%10lg%10lg%10lg",LSD_XI,LSD_ETA,LSD_SEC_WGT);
    //
    COMMENT("$       P1        P2        P3        P4        P5        P6        P7        P8");
    CELL_LIST(LSD_LMC,"%10lg",LSD_SEC_P,8);
    //


}