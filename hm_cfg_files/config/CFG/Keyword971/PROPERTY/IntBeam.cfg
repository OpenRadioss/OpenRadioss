//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Property
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    LSD971_K                                = VALUE(INT,  "K");
    LSD_D                                   = VALUE(FLOAT,  "D");
    LSD_ICST                                = VALUE(INT,  "ISCT");
    LSD_NIP                                 = SIZE("LSD_NIP");
    LSD_RA                                  = VALUE(FLOAT,  "RA");
    LSD_S                                   = ARRAY[LSD_NIP](FLOAT,  "S");
    LSD_SREF                                = VALUE(FLOAT,  "SREF");
    LSD_T                                   = ARRAY[LSD_NIP](FLOAT,  "T");
    LSD_TF                                  = VALUE(FLOAT,  "TF");
    LSD_TREF                                = VALUE(FLOAT,  "TREF");
    LSD_TW                                  = VALUE(FLOAT,  "TW");
    LSD_W                                   = VALUE(FLOAT,  "W");
    LSD_WF                                  = ARRAY[LSD_NIP](FLOAT,  "WF");
    PID_array                               = ARRAY[LSD_NIP](PROP,  "PID");
    intbeam_D5                              = VALUE(FLOAT,  "D5");
    intbeam_D6                              = VALUE(FLOAT,  "D6");

}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    LSD971_K                                = 1043;
    LSD_D                                   = 1640;
    LSD_ICST                                = 1637;
    LSD_NIP                                 = 427;
    LSD_RA                                  = 1636;
    LSD_S                                   = 1644;
    LSD_SREF                                = 1642;
    LSD_T                                   = 1645;
    LSD_TF                                  = 1639;
    LSD_TREF                                = 1643;
    LSD_TW                                  = 1641;
    LSD_W                                   = 1638;
    LSD_WF                                  = 1646;
    PID_array                               = 4338;
    intbeam_D5                              = 869;
    intbeam_D6                              = 870;

}

GUI(COMMON)
{
/*
    if(@repeatkeywordtitles() == 0)
    {
       ASSIGN(KEYWORD_STR, "*INTEGRATION_BEAM");
    }
    if(@repeatkeywordtitles() == 1)
    {
       ASSIGN(KEYWORD_STR, "*INTEGRATION_BEAM");
    }

*/


    ASSIGN(KEYWORD_STR, "*INTEGRATION_BEAM");
 mandatory:
    SIZE(LSD_NIP);
    if(LSD_ICST == 0 && LSD_NIP > 0)
    {
       ARRAY(LSD_NIP,"")
       {
 mandatory:  
           SCALAR(LSD_S);
           SCALAR(LSD_T);
           SCALAR(LSD_WF);
 optional:
           DATA(PID_array);
       }
    }
    SCALAR(LSD_RA);
 optional:
    RADIO(LSD_ICST)
    {
       ADD(0,  "0: Default");
       ADD(1,  "1: I-Shape");
       ADD(2,  "2: Channel");
       ADD(3,  "3: L-shape");
       ADD(4,  "4: T-shape");
       ADD(5,  "5: Tubular box");
       ADD(6,  "6: Z-Shape 2");
       ADD(7,  "7: Trapezoidal");
       ADD(8,  "8: Circular");
       ADD(9,  "9: Tubular");
       ADD(10, "10: I-Shape 2" );
       ADD(11, "11: Solid Box");
       ADD(12, "12: Cross");
       ADD(13, "13: H-Shape");
       ADD(14, "14: T-Shape 2");
       ADD(15, "15: I-Shape 3");
       ADD(16, "16: Channel 2");
       ADD(17, "17: Channel 3");
       ADD(18, "18: T-Shape 3");
       ADD(19, "19: Box-Shape 2");
       ADD(20, "20: Hexagon");
       ADD(21, "21: Hat-Shape");
       ADD(22, "22: Hat-Shape 2");
    }
 mandatory:  
    SCALAR(LSD971_K);
    if(LSD_ICST > 0)
    {
       SCALAR(LSD_W);
       SCALAR(LSD_TF);
       SCALAR(LSD_D);
       SCALAR(LSD_TW);
       SCALAR(LSD_SREF);
       SCALAR(LSD_TREF);
       SCALAR(intbeam_D5);
       SCALAR(intbeam_D6);
    }

}

// File format
FORMAT(Keyword971) 
{
    //
    COMMENT("$     IRID       NIP        RA      ICST         K");
    CARD("%10d%10d%10lg%10d%10d",_ID_, LSD_NIP,LSD_RA,LSD_ICST,LSD971_K);   
    if(LSD_ICST > 0)
    {
        //
        COMMENT("$       D1        D2        D3        D4      SREF      TREF        D5        D6");
        CARD("%10lf%10lf%10lf%10lf%10lf%10lf%10lf%10lf",LSD_W,LSD_TF,LSD_D,LSD_TW,LSD_SREF,LSD_TREF,intbeam_D5,intbeam_D6);
        //
    }   
    if(LSD_ICST == 0 && LSD_NIP != 0)
    {
          COMMENT("$        S         T        WF       PID");
          CARD_LIST(LSD_NIP)
          {
             CARD("%10lf%10lf%10lf%10d",LSD_S,LSD_T,LSD_WF,PID_array);   
          }
    }


}