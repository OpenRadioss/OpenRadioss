//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Property
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    LSD_AISC_K                              = VALUE(INT,  "K");
    LSD_AISC_LABEL                          = VALUE(STRING,  "Label");
    LSD_AISC_LFAC                           = VALUE(FLOAT,  "LFAC");
    LSD_ELFORM                              = VALUE(INT,  "ELFORM");
    LSD_NSLOC                               = VALUE(FLOAT,  "NSLOC");
    LSD_NSM                                 = VALUE(FLOAT,  "NSM");
    LSD_NTLOC                               = VALUE(FLOAT,  "NTLOC");
    LSD_RAMPT                               = VALUE(FLOAT,  "RAMPT");
    LSD_SHRF                                = VALUE(FLOAT,  "SHRF");
    LSD_STRESS                              = VALUE(FLOAT,  "STRESS");
    LSD_TitleOpt                            = VALUE(INT,  "Title");

}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    LSD_AISC_K                              = 1149;
    LSD_AISC_LABEL                          = 1148;
    LSD_AISC_LFAC                           = 1150;
    LSD_ELFORM                              = 399;
    LSD_NSLOC                               = 408;
    LSD_NSM                                 = 5296;
    LSD_NTLOC                               = 409;
    LSD_RAMPT                               = 2037;
    LSD_SHRF                                = 402;
    LSD_STRESS                              = 2038;
    LSD_TitleOpt                            = 90;

}

DEFAULTS(COMMON)
{

    LSD_SHRF    = 1.0;

}

DRAWABLES(COMMON) {
public:
  SHEAR_FACTOR=SCALAR(LSD_SHRF);
  NONSTRUCTURAL_MASS_PER_UNIT_LENGTH=SCALAR(LSD_NSM);
  LOCATION_OF_REFERENCE_SURFACE_NORMAL_TO_S_AXIS=SCALAR(LSD_NSLOC);
  LOCATION_OF_REFERENCE_SURFACE_NORMAL_TO_T_AXIS=SCALAR(LSD_NTLOC);
  
                    // Need to be checked because we didn't got the CFG file in HC

}

GUI(COMMON)
{

    ASSIGN(KEYWORD_STR, "*SECTION_BEAM_AISC");
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR,"_TITLE");
    }
    SCALAR(LSD_AISC_LABEL);
    RADIO(LSD_ELFORM)
    {
        ADD(1,  " 1: Hughes-Liu with cross section integration");
        ADD(2,  " 2: Belytschko-Schwer resultant beam");
        ADD(3,  " 3: Truss");
        ADD(4,  " 4: Belytschko-Schwer full cross-section integration");
        ADD(5,  " 5: Belytschko-Schwer tubular beam with cross-section integration");
        ADD(11, "11: Integrated Warped Beam");
        ADD(12, "12: Resultant Warped Beam");
    }
    if(LSD_ELFORM != 3)
    {
       SCALAR(LSD_SHRF)                             {DIMENSION="DIMENSIONLESS";}
       SCALAR(LSD_NSM)                              {DIMENSION="lineic_mass";}
       SCALAR(LSD_AISC_LFAC);
    }
    if(LSD_ELFORM == 1 || LSD_ELFORM == 11)
    {
       SCALAR(LSD_NSLOC)                            {DIMENSION="DIMENSIONLESS";}
       SCALAR(LSD_NTLOC)                            {DIMENSION="DIMENSIONLESS";}
    }
    if(LSD_ELFORM != 2 && LSD_ELFORM != 12)
    {
       SCALAR(LSD_AISC_K);
    }
    if(LSD_ELFORM == 3)
    {
       SCALAR(LSD_AISC_LFAC);
       SCALAR(LSD_RAMPT)                            {DIMENSION="t";}
       SCALAR(LSD_STRESS)                           {DIMENSION="pressure";}
    }

}

// File format
FORMAT(Keyword971) 
{
    //
    COMMENT("$    SECID                                   LABEL                              ");
    CARD("%10d%70s",_ID_, LSD_AISC_LABEL);
    //
    CARD_PREREAD("%10d",LSD_ELFORM) ;    
    if(LSD_ELFORM == 1 || LSD_ELFORM == 11)
    {
        //
        COMMENT("$   ELFORM      SHRF       NSM      LFAC     NSLOC     NTLOC         K");
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10d",LSD_ELFORM,LSD_SHRF,LSD_NSM,LSD_AISC_LFAC,LSD_NSLOC,LSD_NTLOC,LSD_AISC_K);
        //
    }
    if(LSD_ELFORM == 2 || LSD_ELFORM == 12)
    {
        //
        COMMENT("$   ELFORM      SHRF       NSM      LFAC");
        CARD("%10d%10lg%10lg%10lg",LSD_ELFORM,LSD_SHRF,LSD_NSM,LSD_AISC_LFAC);
        //
        
    }
    if(LSD_ELFORM == 3)
    {
        //
        COMMENT("$   ELFORM      LFAC     RAMPT    STRESS");
        CARD("%10d%10lg%10lg%10lg",LSD_ELFORM,LSD_AISC_LFAC,LSD_RAMPT,LSD_STRESS);
        //
        
    }
    if(LSD_ELFORM == 4 || LSD_ELFORM == 5)
    {
        //
        COMMENT("$   ELFORM      SHRF       NSM      LFAC         K");
        CARD("%10d%10lg%10lg%10lg%10d",LSD_ELFORM,LSD_SHRF,LSD_NSM,LSD_AISC_LFAC,LSD_AISC_K);
        //
        
    }
}
