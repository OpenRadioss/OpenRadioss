//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Property
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    BeamSecA                                = VALUE(BEAMSECTS,  "beamsects");
    LSD_A                                   = VALUE(FLOAT,  "Area");
    LSD_CA                                  = VALUE(FLOAT,  "CA/DOF1");
    LSD_CID                                 = VALUE(SYSTEM,  "CID");
    LSD_CST                                 = VALUE(FLOAT,  "CST");
    LSD_ELFORM                              = VALUE(INT,  "ELFORM");
    LSD_INER                                = VALUE(FLOAT,  "INER");
    LSD_IOVPR                               = VALUE(FLOAT,  "IOVPR");
    LSD_IPRSTR                              = VALUE(FLOAT,  "IPRSTR");
    LSD_IRID                                = VALUE(INTEGRATIONRULE,  "IRID");
    LSD_IRR                                 = VALUE(FLOAT,  "IRR");
    LSD_ISS                                 = VALUE(FLOAT,  "ISS");
    LSD_IST                                 = VALUE(FLOAT,  "IST");
    LSD_ITT                                 = VALUE(FLOAT,  "ITT");
    LSD_IW                                  = VALUE(FLOAT,  "IW");
    LSD_IWR                                 = VALUE(FLOAT,  "IWR");
    LSD_IYR                                 = VALUE(FLOAT,  "IYR");
    LSD_IZR                                 = VALUE(FLOAT,  "IZR");
    LSD_J                                   = VALUE(FLOAT,  "J");
    LSD_NSLOC                               = VALUE(FLOAT,  "NSLOC");
    LSD_NSM                                 = VALUE(FLOAT,  "NSM");
    LSD_NTLOC                               = VALUE(FLOAT,  "NTLOC");
    LSD_OFFSET                              = VALUE(FLOAT,  "OFSET/DOF2");
    LSD_PR                                  = VALUE(FLOAT,  "PR");
    LSD_QR                                  = VALUE(FLOAT,  "QR");
    LSD_RAMPT                               = VALUE(FLOAT,  "RAMPT");
    LSD_RRCON                               = VALUE(FLOAT,  "RRCON");
    LSD_SA                                  = VALUE(FLOAT,  "SA");
    LSD_SCOOR                               = VALUE(FLOAT,  "SCOOR");
    LSD_SHRF                                = VALUE(FLOAT,  "SHRF");
    LSD_SRCON                               = VALUE(FLOAT,  "SRCON");
    LSD_STRESS                              = VALUE(FLOAT,  "STRESS");
    LSD_Sect_D1                             = VALUE(FLOAT,  "D1");
    LSD_Sect_D2                             = VALUE(FLOAT,  "D2");
    LSD_Sect_D3                             = VALUE(FLOAT,  "D3");
    LSD_Sect_D4                             = VALUE(FLOAT,  "D4");
    LSD_Sect_D5                             = VALUE(FLOAT,  "D5");
    LSD_Sect_D6                             = VALUE(FLOAT,  "D6");
    LSD_THIC1s                              = VALUE(FLOAT,  "THIC1s");
    LSD_THIC1t                              = VALUE(FLOAT,  "THIC1t");
    LSD_THIC2s                              = VALUE(FLOAT,  "THIC2s");
    LSD_THIC2t                              = VALUE(FLOAT,  "THIC2t");
    LSD_TPRINT                              = VALUE(FLOAT,  "PRINT");
    LSD_TRCON                               = VALUE(FLOAT,  "TRCON");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    LSD_VOL                                 = VALUE(FLOAT,  "VOL");
    LSD_YS                                  = VALUE(FLOAT,  "YS");
    LSD_ZS                                  = VALUE(FLOAT,  "ZS");
    SectBeamOpt                             = VALUE(INT,  "Options");
    SectType                                = VALUE(STRING,  "STYPE");
    Sect_Option                             = VALUE(INT,  "Int_Rule_ID");

}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    BeamSecA                                = 4362;
    LSD_A                                   = 718;
    LSD_CA                                  = 413;
    LSD_CID                                 = 412;
    LSD_CST                                 = 403;
    LSD_ELFORM                              = 399;
    LSD_INER                                = 411;
    LSD_IOVPR                               = 7999;
    LSD_IPRSTR                              = 8000;
    LSD_IRID                                = 1649;
    LSD_IRR                                 = 721;
    LSD_ISS                                 = 719;
    LSD_IST                                 = 1146;
    LSD_ITT                                 = 720;
    LSD_IW                                  = 2028;
    LSD_IWR                                 = 2029;
    LSD_IYR                                 = 2026;
    LSD_IZR                                 = 2027;
    LSD_J                                   = 2030;
    LSD_NSLOC                               = 408;
    LSD_NSM                                 = 5296;
    LSD_NTLOC                               = 409;
    LSD_OFFSET                              = 716;
    LSD_PR                                  = 7998;
    LSD_QR                                  = 429;
    LSD_RAMPT                               = 2037;
    LSD_RRCON                               = 3123;
    LSD_SA                                  = 722;
    LSD_SCOOR                               = 3122;
    LSD_SHRF                                = 402;
    LSD_SRCON                               = 3124;
    LSD_STRESS                              = 2038;
    LSD_Sect_D1                             = 2031;
    LSD_Sect_D2                             = 2032;
    LSD_Sect_D3                             = 2033;
    LSD_Sect_D4                             = 2034;
    LSD_Sect_D5                             = 2035;
    LSD_Sect_D6                             = 2036;
    LSD_THIC1s                              = 723;
    LSD_THIC1t                              = 725;
    LSD_THIC2s                              = 724;
    LSD_THIC2t                              = 726;
    LSD_TPRINT                              = 2216;
    LSD_TRCON                               = 3125;
    LSD_TitleOpt                            = 90;
    LSD_VOL                                 = 410;
    LSD_YS                                  = 2024;
    LSD_ZS                                  = 2025;
    SectBeamOpt                             = 2023;
    SectType                                = 2039;
    Sect_Option                             = 458;

}

DEFAULTS(COMMON)
{

    LSD_QR    = 2.0;
    LSD_SHRF    = 1.0;

}

DRAWABLES(COMMON) {
public:
  SHEAR_FACTOR=SCALAR(LSD_SHRF);
  QUADRATURE_RULE=SCALAR(LSD_QR);
  CROSS_SECTION_TYPE=SCALAR(LSD_CST);
  LOCATION_OF_TRIAD=SCALAR(LSD_SCOOR);
  NONSTRUCTURAL_MASS_PER_UNIT_LENGTH=SCALAR(LSD_NSM);
  BEAM_THICKNESS_OR_OUTER_DIAMETER_S_N1=SCALAR(LSD_THIC1s);
  BEAM_THICKNESS_OR_OUTER_DIAMETER_S_N2=SCALAR(LSD_THIC2s);
  BEAM_THICKNESS_OR_INNER_DIAMETER_T_N1=SCALAR(LSD_THIC1t);
  BEAM_THICKNESS_OR_INNER_DIAMETER_T_N2=SCALAR(LSD_THIC2t);
  LOCATION_OF_REFERENCE_SURFACE_NORMAL_TO_S_AXIS=SCALAR(LSD_NSLOC);
  LOCATION_OF_REFERENCE_SURFACE_NORMAL_TO_T_AXIS=SCALAR(LSD_NTLOC);
  CROSS-SECTIONAL_AREA=SCALAR(LSD_A);
  ISS=SCALAR(LSD_ISS);
  ITT=SCALAR(LSD_ITT);
  IRR=SCALAR(LSD_IRR);
  SHEAR_AREA=SCALAR(LSD_SA);
  VOLUME_OF_DISCRETE_BEAM=SCALAR(LSD_VOL);
  MASS_MOMENT_OF_INERTIA=SCALAR(LSD_INER);
//  COORDINATE_SYSTEM_ID_FOR_ORIENTATION=SCALAR(LSD_CID);
  ACTIVE_DEGREE-OF-FREEDOM_AT_NODE_1=SCALAR(LSD_CA);
  ACTIVE_DEGREE-OF-FREEDOM_AT_NODE_2=SCALAR(LSD_OFFSET);
  OUTPUT_SPOT_FORCE_RESULTANT=SCALAR(LSD_TPRINT);
}


GUI(COMMON)
{

    if(LSD_ELFORM == 2 || LSD_ELFORM == 3|| LSD_ELFORM == 12)
    {
       DATA(BeamSecA);
    }
    ASSIGN(KEYWORD_STR, "*SECTION_BEAM");
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR,"_TITLE");
    }
    RADIO(LSD_ELFORM)
    {
        ADD(1,  " 1: Hughes-Liu with cross section integration");
        ADD(2,  " 2: Belytschko-Schwer resultant beam");
        ADD(3,  " 3: Truss");
        ADD(4,  " 4: Belytschko-Schwer full cross-section integration");
        ADD(5,  " 5: Belytschko-Schwer tubular beam with cross-section integration");
        ADD(6,  " 6: Discrete beam/Cable");
        ADD(7,  " 7: 2D plane strain shell element (xy plane)");
        ADD(8,  " 8: 2D axisymmetric volume weighted shell element (xy plane)");
        ADD(9,  " 9: Spotweld Beam");
        ADD(11, "11: Integrated Warped Beam");
        ADD(12, "12: Resultant Warped Beam");
        ADD(13, "13: Small displacement, linear Timoshenko beam with exact stiffness");
        ADD(14, "14: Elbow integrated tubular beam element. An user defined");
    }
    SCALAR(LSD_SHRF)                        {DIMENSION="DIMENSIONLESS";}
    FLAG(Sect_Option);
    if(Sect_Option == FALSE)
    {
        RADIO(LSD_QR)
        {
            ADD(1.0, "1.0: One Integration Point");
            ADD(2.0, "2.0: 2 x 2 Gauss Quadrature (default beam)");
            ADD(3.0, "3.0: 3 x 3 Gauss Quadrature,");
            ADD(4.0, "4.0: 3 x 3 Lobatto Quadrature,");
            ADD(5.0, "5.0: 4 x 4 Gauss Quadrature");
        }
    }
    if(Sect_Option == TRUE)
    {
        DATA(LSD_IRID);
    }
    RADIO(LSD_CST)
    {
        ADD(0.0, "0.0: Rectangular");
        ADD(1.0, "1.0: Tubular (Circular Only),");
        ADD(2.0, "2.0: Arbitrary (User Defined Integration Rule).");
    }
    RADIO(LSD_SCOOR)
    {
        ADD(-3.0, "-3.0: Node 1 rotates");
        ADD(-2.0, "-2.0: Node 1 rotates and r-axis adjusted");
        ADD(-1.0, "-1.0: Node 1 rotates");
        ADD( 0.0, " 0.0: Centered");
        ADD( 1.0, " 1.0: Node 2 rotates");
        ADD( 2.0, " 2.0: Node 2 rotates and r-axis adjusted");
        ADD( 3.0, " 3.0: Node 2 rotates");
    }
    SCALAR(LSD_NSM)                         {DIMENSION="lineic_mass";}
    if(LSD_ELFORM==1 || LSD_ELFORM==4 || LSD_ELFORM==5 || LSD_ELFORM==7 || LSD_ELFORM==8 || LSD_ELFORM==9 || LSD_ELFORM==11)
    {
 mandatory:
       SCALAR(LSD_THIC1s)                   {DIMENSION="l";}
       SCALAR(LSD_THIC2s)                   {DIMENSION="l";}
 optional:
       SCALAR(LSD_THIC1t)                   {DIMENSION="l";}
       SCALAR(LSD_THIC2t)                   {DIMENSION="l";}
    }
    if(LSD_ELFORM == 1 || LSD_ELFORM == 11)
    {
        RADIO(LSD_NSLOC)
        {
            ADD( 1.0, " 1.0: Side at s = 1.0");
            ADD( 0.0, " 0.0: Center");
            ADD(-1.0, "-1.0: Side at s = -1.0");
        }
        RADIO(LSD_NTLOC)
        {
            ADD( 1.0, " 1.0: Side at t = 1.0");
            ADD( 0.0, " 0.0: Center");
            ADD(-1.0, "-1.0: Side at t = -1.0");
        }
    }
    if(LSD_ELFORM == 9)
    {
        RADIO(LSD_TPRINT)
        {
            ADD(0.0, "0.0");
            ADD(1.0, "1.0");
        }
    }
    if(LSD_ELFORM==2 || LSD_ELFORM==3 || LSD_ELFORM==12)
    {
        RADIO(SectBeamOpt)
        {
            ADD(0, "GENERIC");
            ADD(1, "STANDARD");
        }
    }
    if(((LSD_ELFORM == 2 || LSD_ELFORM == 12) && SectBeamOpt  == 0) || LSD_ELFORM == 13 || (LSD_ELFORM == 3 && SectBeamOpt == 1))
    {
 mandatory:
        SCALAR(LSD_A)                       {DIMENSION="area";}
    }
    if(((LSD_ELFORM == 2 || LSD_ELFORM == 12) && SectBeamOpt  == 0) || LSD_ELFORM == 13)
    {
 mandatory:
        SCALAR(LSD_ISS)                     {DIMENSION="inertia";}
        SCALAR(LSD_ITT)                     {DIMENSION="inertia";}
 optional:
        SCALAR(LSD_SA)                      {DIMENSION="area";}
        SCALAR(LSD_IST)                     {DIMENSION="inertia";}
    }
    if(LSD_ELFORM == 12)
    { 
        SCALAR(LSD_YS)                      {DIMENSION="l";}
        SCALAR(LSD_ZS)                      {DIMENSION="l";}
        SCALAR(LSD_IYR)                     {DIMENSION="inertia";}
        SCALAR(LSD_IZR)                     {DIMENSION="inertia";}
    }
    if(LSD_ELFORM == 2 || LSD_ELFORM == 12 || LSD_ELFORM == 13)
    {
        SCALAR(LSD_IRR)                     {DIMENSION="inertia";}
    }
    if(LSD_ELFORM == 2)
    {   
        SCALAR(LSD_J)                       {DIMENSION="inertia";}
    }
    if(LSD_ELFORM == 12)
    { 
        SCALAR(LSD_IW)                      {DIMENSION="inertia";}
        SCALAR(LSD_IWR)                     {DIMENSION="inertia";}
    }    
    if(LSD_ELFORM == 14)
    {
        SCALAR(LSD_PR);
        RADIO(LSD_IOVPR)
        {
            ADD(0.0, "0.0");
            ADD(1.0, "1.0");
        }
        RADIO(LSD_IPRSTR)
        {
            ADD(0.0, "0.0");
            ADD(1.0, "1.0");
        }
    }
    if(LSD_ELFORM == 3 && SectBeamOpt == 1)
    {
        SCALAR(LSD_RAMPT)                   {DIMENSION="t";}
        SCALAR(LSD_STRESS)                  {DIMENSION="pressure";}
    }
    if((LSD_ELFORM == 2 || LSD_ELFORM == 3 || LSD_ELFORM == 12) && SectBeamOpt == 1)
    {
        RADIO(SectType)
        {
            ADD("SECTION_01", "SECTION_01: I-Shape");
            ADD("SECTION_02", "SECTION_02: Channel");
            ADD("SECTION_03", "SECTION_03: L-Shape");
            ADD("SECTION_04", "SECTION_04: T-Shape");
            ADD("SECTION_05", "SECTION_05: Tubular Box");
            ADD("SECTION_06", "SECTION_06: Z-Shape 2");
            ADD("SECTION_07", "SECTION_07: Trapezoidal");
            ADD("SECTION_08", "SECTION_08: Circular");
            ADD("SECTION_09", "SECTION_09: Tubular");
            ADD("SECTION_10", "SECTION_10: I-Shape 2");
            ADD("SECTION_11", "SECTION_11: Solid Box");
            ADD("SECTION_12", "SECTION_12: Cross");
            ADD("SECTION_13", "SECTION_13: H-Shape");
            ADD("SECTION_14", "SECTION_14: T-Shape 2");
            ADD("SECTION_15", "SECTION_15: I-Shape 3");
            ADD("SECTION_16", "SECTION_16: Channel 2");
            ADD("SECTION_17", "SECTION_17: Channel 3");
            ADD("SECTION_18", "SECTION_18: T-Shape 3");
            ADD("SECTION_19", "SECTION_19: Box-Shape 2");
            ADD("SECTION_20", "SECTION_20: Hexagon");
            ADD("SECTION_21", "SECTION_21: Hat-Shape");
            ADD("SECTION_22", "SECTION_22: Hat-Shape 2");
        }
    }
    if(((LSD_ELFORM == 2 || LSD_ELFORM == 3 || LSD_ELFORM == 12) && SectBeamOpt == 1)   && (SectType != "SECTION_18")) 
    {
        SCALAR(LSD_Sect_D1)                         {DIMENSION="DIMENSIONLESS";}
    }
    if(((LSD_ELFORM == 2 || LSD_ELFORM == 3 || LSD_ELFORM == 12) && SectBeamOpt == 1)   && (SectType != "SECTION_08")) 
    {
        SCALAR(LSD_Sect_D2)                         {DIMENSION="DIMENSIONLESS";}
    }
    if(((LSD_ELFORM == 2 || LSD_ELFORM == 3 || LSD_ELFORM == 12) && SectBeamOpt == 1)   && (SectType != "SECTION_08" || SectType != "SECTION_09" || SectType != "SECTION_11"))
    {
        SCALAR(LSD_Sect_D3)                         {DIMENSION="DIMENSIONLESS";}
    }
    if(((LSD_ELFORM == 2 || LSD_ELFORM == 3 || LSD_ELFORM == 12) && SectBeamOpt == 1)   && (SectType != "SECTION_07" || SectType != "SECTION_08" || SectType != "SECTION_09" || SectType != "SECTION_11" || SectType != "SECTION_20"))
    {
        SCALAR(LSD_Sect_D4)                         {DIMENSION="DIMENSIONLESS";}
    }
    if(((LSD_ELFORM == 2 || LSD_ELFORM == 3 || LSD_ELFORM == 12) && SectBeamOpt == 1)   && (SectType == "SECTION_10" || SectType == "SECTION_19" || SectType == "SECTION_22"))
    {
        SCALAR(LSD_Sect_D5)                         {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_Sect_D6)                         {DIMENSION="DIMENSIONLESS";}
    }
    if(LSD_ELFORM == 6)
    {
 mandatory:
        SCALAR(LSD_VOL)                             {DIMENSION="volume";}
 optional:
        SCALAR(LSD_INER)                            {DIMENSION="DIMENSIONLESS";}
        DATA(LSD_CID);
        SCALAR(LSD_CA)                              {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_OFFSET)                          {DIMENSION="DIMENSIONLESS";}
        RADIO(LSD_RRCON)
        {
            ADD(0.0, "0.0: Coordinate ID rotates about r axis with nodes");
            ADD(1.0, "1.0: Rotation is constrained about the r-axis");
        }
        RADIO(LSD_SRCON)
        {
            ADD(0.0, "0.0: Coordinate ID rotates about s axis with nodes");
            ADD(1.0, "1.0: Rotation is constrained about the s-axis");
        }
        RADIO(LSD_TRCON)
        {
            ADD(0.0, "0.0: Coordinate ID rotates about t axis with nodes");
            ADD(1.0, "1.0: Rotation is constrained about the t-axis");
        }
    }

}

// File format
FORMAT(Keyword971) 
{
    //
    COMMENT("$    SECID    LSD_ELFORM      SHRF   QR/IRID       CST     SCOOR       NSM");
    CARD("%10d%10d%10lg%10lg%10lg%10lg%10lg",_ID_,LSD_ELFORM,LSD_SHRF, SCALAR_OR_OBJECT(Sect_Option,LSD_QR, LSD_IRID),LSD_CST,LSD_SCOOR,LSD_NSM);
    //
//    CARD_PREREAD("%10lg",SCALAR_OR_STRING(HAS_A_STRING,A,A_STRING));
    if (LSD_ELFORM == 1 || LSD_ELFORM == 11)
    {
        //
        COMMENT("$      TS1       TS2       TT1       TT2     NSLOC     NTLOC");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_THIC1s,LSD_THIC2s,LSD_THIC1t,LSD_THIC2t,LSD_NSLOC,LSD_NTLOC);      
        //
    }
    else if (LSD_ELFORM == 2 || LSD_ELFORM == 3 || LSD_ELFORM == 12)
    {
        //
        COMMENT("$    STYPE        D1        D2        D3        D4        D5        D6");
        CARD("%10s%10lg%10lg%10lg%10lg%10lg%10lg",SectType,LSD_Sect_D1,LSD_Sect_D2,LSD_Sect_D3,LSD_Sect_D4,LSD_Sect_D5,LSD_Sect_D6);
        //
    }
    else if (LSD_ELFORM == 2 || LSD_ELFORM == 12 || LSD_ELFORM == 13)
    {
        //
        COMMENT("$        A       ISS       ITT         J        SA       IST");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_A,LSD_ISS,LSD_ITT,LSD_IRR,LSD_SA,LSD_IST);
        //
    }
    else if (LSD_ELFORM == 12)
    {
        //
        COMMENT("$        A       ISS       ITT        J         SA       IST");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_A,LSD_ISS,LSD_ITT,LSD_J,LSD_SA,LSD_IST);
        //
        COMMENT("$       YS        ZS       IYR       IZR       IRR        IW       IWR");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_YS,LSD_ZS,LSD_IYR,LSD_IZR,LSD_IRR, LSD_IW, LSD_IWR);
        //
    }      
    else if (LSD_ELFORM == 3)
    {
        //
        COMMENT("$        A     RAMPT    STRESS                    ");
        CARD("%10lg%10lg%10lg",LSD_A,LSD_RAMPT,LSD_STRESS);
        //
    }  
    else if (LSD_ELFORM==4 || LSD_ELFORM == 5 || LSD_ELFORM==7 || LSD_ELFORM==8)
    {
        //
        COMMENT("$      TS1       TS2       TT1       TT2");
        CARD("%10lg%10lg%10lg%10lg",LSD_THIC1s,LSD_THIC2s,LSD_THIC1t,LSD_THIC2t);  
        //
    }
    else if (LSD_ELFORM == 6)
    {
        //
        COMMENT("$      VOL      INER       CID     DOFN1     DOFN2     RRCON     SRCON     TRCON");
        CARD("%10lg%10lg%10lg%10lg%10lg%10d%10d%10d",LSD_VOL,LSD_INER,LSD_CID,LSD_CA,LSD_OFFSET,LSD_RRCON,LSD_SRCON,LSD_TRCON);
        //
    }
    else if (LSD_ELFORM == 9)
    {
        //
        COMMENT("$      TS1       TS2       TT1       TT2     PRINT");
        CARD("%10lg%10lg%10lg%10lg%10lg",LSD_THIC1s,LSD_THIC2s,LSD_THIC1t,LSD_THIC2t,LSD_TPRINT);
        //
    }
    else if (LSD_ELFORM == 14)
    {
        //
        COMMENT("$       PR     IOVPR    IPRSTR");
        CARD("%10lg%10lg%10lg", LSD_PR, LSD_IOVPR, LSD_IPRSTR);
        //
    }  
    else
    {
        //
        BLANK ;
        //
    }

}
