//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Property
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    ArrayCount                              = SIZE("ArrayCount");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("Num_Comments");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    LSD_A_ARRAY                             = ARRAY[ArrayCount](FLOAT,  "Ai");
    LSD_B_ARRAY                             = ARRAY[ArrayCount](FLOAT,  "Bi");
    LSD_LCID                                = VALUE(FUNCT,  "LCID");
    LSD_LTYPE                               = VALUE(INT,  "LTYPE");
    LSD_MAT_A                               = VALUE(FLOAT,  "A");
    LSD_MAT_B                               = VALUE(FLOAT,  "B");
    LSD_MID                                 = VALUE(MAT,  "MID");
    LSD_SNLIMT                              = VALUE(INT,  "SNLIMT");
    LSD_SNTYPE                              = VALUE(INT,  "SNTYPE");
    LSD_STHRES                              = VALUE(FLOAT,  "STHRES");
    LSD_STHRES_ARRAY                        = ARRAY[ArrayCount](FLOAT,  "STHRESi");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    LSD_equation                            = VALUE(INT,  "LCID");
    curveOption                             = VALUE(INT,  "Options");

}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    ArrayCount                              = 2246;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    LSD_A_ARRAY                             = 7849;
    LSD_B_ARRAY                             = 8416;
    LSD_LCID                                = 45;
    LSD_LTYPE                               = 8412;
    LSD_MAT_A                               = 310;
    LSD_MAT_B                               = 311;
    LSD_MID                                 = 2458;
    LSD_SNLIMT                              = 8414;
    LSD_SNTYPE                              = 8415;
    LSD_STHRES                              = 8413;
    LSD_STHRES_ARRAY                        = 8417;
    LSD_TitleOpt                            = 90;
    LSD_equation                            = 8411;
    Num_Comments                            = 3101;
    curveOption                             = 8410;

}

DEFAULTS(COMMON)
{

    LSD_equation    = -1;

}

GUI(COMMON)
{

    ASSIGN(KEYWORD_STR, "*MAT_ADD_FATIGUE");
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    } 
    if(CommentEnumField == 2)
    {  
       SIZE(Num_Comments);
       ARRAY(Num_Comments,"")
       {
          SCALAR(Comments);
       }
    } 
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
       ASSIGN(KEYWORD_STR, "_TITLE");
    } 
    DATA(LSD_MID);
    RADIO(curveOption)
    {
       ADD(1, "Curve Equation");
       ADD(2, "Curve ID");
    }
    if( curveOption == 1)
    {
       RADIO(LSD_equation)
       {
          ADD(-1, "-1: S-N fatigue curve uses equation NSb = a");
          ADD(-2, "-2: S-N fatigue curve uses equation log(S) = a - b log(N)");
          ADD(-3, "-3: S-N fatigue curve uses equation S = a Nb");
       }

    }
    if( curveOption == 2)
    {
       DATA(LSD_LCID);
    }
    RADIO(LSD_LTYPE)
    {
       ADD(0, "0: Semi-log interpolation");
       ADD(1, "1: Log-Log interpolation");
       ADD(2, "2: Linear-Linear interpolation");
    }
    SCALAR(LSD_MAT_A);
    SCALAR(LSD_MAT_B);
    if( curveOption == 1)
    {
       SCALAR(LSD_STHRES);
    }
    RADIO(LSD_SNLIMT)
    {
       ADD(0, "0: use the life at the last point on S-N curve");
       ADD(1, "1: extrapolation from the last two points on S-N curve (applicable for LCID > 0)");
       ADD(2, "2: infinity");
    }
    RADIO(LSD_SNTYPE)
    {
       ADD(0, "0: stress range");
       ADD(1, "1: stress amplitude");
    }
    SIZE_RADIO(ArrayCount)
    {
       ADD(0, "0");
       ADD(1, "1");
       ADD(2, "2");
       ADD(3, "3");
       ADD(4, "4");
       ADD(5, "5");
       ADD(6, "6");
       ADD(7, "7");
    }
    if(ArrayCount > 0)
    {
        ARRAY(ArrayCount,"")
        {
           SCALAR(LSD_A_ARRAY);
           SCALAR(LSD_B_ARRAY);
           SCALAR(LSD_STHRES_ARRAY);
        }
    }

}

// File format
FORMAT(Keyword971) 
{
    //
    COMMENT("$      MID      LCID     LTYPE         A         B    STHRES    SNLIMT    SNTYPE");
    CARD("%10d%10d%10d%10lg%10lg%10lg%10d%10d",LSD_MID,SCALAR_OR_OBJECT(curveOption,LSD_equation,LSD_LCID),LSD_LTYPE,LSD_MAT_A,LSD_MAT_B,LSD_STHRES,LSD_SNLIMT,LSD_SNTYPE);
    //
    COMMENT("$                                     Ai        Bi   STHRESi");
    FREE_CELL_LIST(ArrayCount,"                              %10lg%10lg%10lg",LSD_A_ARRAY,LSD_B_ARRAY,LSD_STHRES_ARRAY);
    //

}
