//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Property
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    LSDYNA_SP_CDL                           = VALUE(FLOAT,  "CDL");
    LSDYNA_SP_CL                            = VALUE(FLOAT,  "CL");
    LSDYNA_SP_DRO                           = VALUE(INT,  "DRO");
    LSDYNA_SP_FD                            = VALUE(FLOAT,  "FD");
    LSDYNA_SP_KD                            = VALUE(FLOAT,  "KD");
    LSDYNA_SP_TDL                           = VALUE(FLOAT,  "TDL");
    LSDYNA_SP_VO                            = VALUE(FLOAT,  "V0");
    LSD_TitleOpt                            = VALUE(INT,  "Title");

}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    LSDYNA_SP_CDL                           = 443;
    LSDYNA_SP_CL                            = 441;
    LSDYNA_SP_DRO                           = 438;
    LSDYNA_SP_FD                            = 442;
    LSDYNA_SP_KD                            = 439;
    LSDYNA_SP_TDL                           = 444;
    LSDYNA_SP_VO                            = 440;
    LSD_TitleOpt                            = 90;

}

DRAWABLES(COMMON) {
public:
  DYNAMIC_MAGNIFICATION_FACTOR=SCALAR(LSDYNA_SP_KD);
  TEST_VELOCITY=SCALAR(LSDYNA_SP_VO);
  CLEARANCE=SCALAR(LSDYNA_SP_CL);
  FAILURE_DEFLECTION=SCALAR(LSDYNA_SP_FD);
  DEFLECTION_LIMIT_IN_COMPRESSION=SCALAR(LSDYNA_SP_CDL);
  DEFLECTION_LIMIT_IN_TENSION=SCALAR(LSDYNA_SP_TDL);
}

GUI(COMMON)
{

    ASSIGN(KEYWORD_STR, "*SECTION_DISCRETE");
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR,"_TITLE");
    }
 mandatory:
    RADIO(LSDYNA_SP_DRO)
    {
       ADD(0, "0: The material describes a translational spring/damper");
       ADD(1, "1: The material describes a torsional spring/damper");
    }
    SCALAR(LSDYNA_SP_KD)                {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_SP_VO)                {DIMENSION="velocity";}
    SCALAR(LSDYNA_SP_CL)                {DIMENSION="l";}
    SCALAR(LSDYNA_SP_FD)                {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_SP_CDL)               {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_SP_TDL)               {DIMENSION="DIMENSIONLESS";}
/*
  mandatory:
    graphical SUPPORT("Part(s) to which property is applied") {
      OBJECTS=(/COMPONENT/SPRING);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    //
    COMMENT("$    SECID       DRO        KD        V0        CL        FD");
    CARD("%10d%10d%10lg%10lg%10lg%10lg",_ID_,LSDYNA_SP_DRO,LSDYNA_SP_KD,LSDYNA_SP_VO,LSDYNA_SP_CL,LSDYNA_SP_FD);
    //
    COMMENT("$      CDL       TDL");
    CARD("%10lg%10lg",LSDYNA_SP_CDL,LSDYNA_SP_TDL);
    //
}
