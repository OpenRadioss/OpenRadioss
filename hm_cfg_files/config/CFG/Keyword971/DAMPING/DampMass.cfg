//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
ATTRIBUTES(COMMON) {

  
    IO_FLAG                             = VALUE(INT, "Import/Export flag");
    _HMCOMMENTSFLAG                     = VALUE(INT, "Write HM Comments");
    _HWCOLOR                            = VALUE(INT, "Entity Color");
    TITLE                               = VALUE(STRING, "TITLE");
    
    SID_TYPE                            = VALUE(INT, "PID or PSID option");
    PID	                                = VALUE(COMPONENT,"Part");
    PSID                                = VALUE(SETS,"Set ID") { SUBTYPES = (/SETS/SET_PART_IDPOOL) ; }
    LCID                                = VALUE(FUNCT,"Load curve");
    SF                                  = VALUE(FLOAT,"Scale factor for load curve");
    FLAG                                = VALUE(INT,"Flag for global component of damping forces.");
	
    STX                                 = VALUE(FLOAT,"Scale factor on global x translational damping forces");
    STY                                 = VALUE(FLOAT,"Scale factor on global y translational damping forces");
    STZ                                 = VALUE(FLOAT,"Scale factor on global z translational damping forces");
    SRX                                 = VALUE(FLOAT,"Scale factor on global x rotational damping moments");
    SRY                                 = VALUE(FLOAT,"Scale factor on global y rotational damping moments");
    SRZ                                 = VALUE(FLOAT,"Scale factor on global z rotational damping moments");

    TYPE                                = VALUE(STRING,"");
    
    IS_STRING                           = VALUE(INT, "Is parameter");
    PARAM_STR                           = VALUE(STRING, "Parameter name");
    empty_string                        = VALUE(STRING, "empty string");
  
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    IO_FLAG=-1;
    _HMCOMMENTSFLAG=-1;
    _HWCOLOR=-1;
    TYPE=-1;
    
    IS_STRING = -1;
    PARAM_STR = -1;
    empty_string = -1;
}
/*
DEFAULTS(COMMON)
{

}
*/


// File format
FORMAT(Keyword971) {
    
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
	
  
    if(IO_FLAG == 2 && SID_TYPE==0)
    {
        HEADER("*DAMPING_PART_MASS");
        COMMENT("$      PID      LCID       SF       FLAG");
        CARD("%10d%10d%10lg%10d",PID,LCID,SF,FLAG);
    }
    if(IO_FLAG == 2 && SID_TYPE==1)  
    {
        HEADER("*DAMPING_PART_MASS_SET");
        COMMENT("$     PSID      LCID       SF       FLAG");
        CARD("%10d%10d%10lg%10d",PSID,LCID,SF,FLAG);
    }
    if(IO_FLAG == 2 ){
    
        if(FLAG==1){
            COMMENT("$      STX       STY       STZ       SRX       SRY       SRZ");
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",STX,STY,STZ,SRX,SRY,SRZ);
        }   
    }
    
    if(IO_FLAG == 1)
    {
        HEADER("*DAMPING_PART_MASS%4s",TYPE);
        
        // this is added to support the use-case of IFLAG is parameterized, 
        // at present in ml we have a limitation for those attribute which is parameterized and used in conditional statement

        CARD_PREREAD("%10s%10s%10s%10d",empty_string,empty_string,empty_string,SCALAR_OR_STRING(IS_STRING, FLAG, PARAM_STR));
        
        if(TYPE=="_SET")
        {
            ASSIGN(SID_TYPE,1);
            CARD("%10d%10d%10lg%10d",PSID,LCID,SF,FLAG);
        }
        else{
            ASSIGN(SID_TYPE,0);
            CARD("%10d%10d%10lg%10d",PID,LCID,SF,FLAG);
        }
        
        if(IS_STRING == TRUE && PARAM_STR != "")
        {
           FREE_CARD(FLAG, "%10lg%10lg%10lg%10lg%10lg%10lg",STX,STY,STZ,SRX,SRY,SRZ);
        }
        else if(FLAG == 1)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",STX,STY,STZ,SRX,SRY,SRZ);
        }
    }
}

