//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 127
//

ATTRIBUTES(COMMON)
{
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    ArrayCount                              = SIZE("ArrayCount");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    LSDYNA_K                                = VALUE(FLOAT,  "Bulk modulus");
    LSD_G                                   = VALUE(FLOAT,  "Shear modulus");
    LSD_LCID                                = VALUE(FUNCT,  "Optional load curve ID of relaxation curve if constants are determined via a least squares fit");
    LSD_MAT_Beta                            = ARRAY[ArrayCount](FLOAT,  "Optional decay constant if ith term");
    LSD_MAT_Gi                              = ARRAY[ArrayCount](FLOAT,  "Optional shear relaxation modulus for the ith term");
    LSD_NT                                  = VALUE(FLOAT,  "Number of Prony series terms in optional fit");
    LSD_NUM                                 = VALUE(INT,  "Number of statistical links");
    LSD_TRAMP                               = VALUE(FLOAT,  "Optional ramp time for loading");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    Rho                                     = VALUE(FLOAT,  "Mass Density");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    ArrayCount                              = 2246;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    LSDYNA_K                                = 124;
    LSD_G                                   = 1560;
    LSD_LCID                                = 45;
    LSD_MAT_Beta                            = 355;
    LSD_MAT_Gi                              = 354;
    LSD_NT                                  = 5227;
    LSD_NUM                                 = 5225;
    LSD_TRAMP                               = 5226;
    LSD_TitleOpt                            = 90;
    Num_Comments                            = 3101;
    Rho                                     = 118;
}

DRAWABLES(COMMON)
{
public:
  MASS_DENSITY=SCALAR(Rho);
  BULK_MODULUS=SCALAR(LSDYNA_K);
  SHEAR_MODULUS=SCALAR(LSD_G);
  OPTIONAL_RAMP_TIME_FOR_LOADING=SCALAR(LSD_TRAMP);
  NUMBER_OF_PRONY_SERIES_TERMS=SCALAR(LSD_NT);
  YOUNG_MODULUS = EVAL(9*SHEAR_MODULUS*BULK_MODULUS/(3.*BULK_MODULUS+SHEAR_MODULUS)) ;
  POISSON_RATIO     = EVAL((3.*BULK_MODULUS-2.*SHEAR_MODULUS)/(6.*BULK_MODULUS+2.*SHEAR_MODULUS));
 public:
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 public:
  SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+BULK_MODULUS)/MASS_DENSITY)^0.5);
}

GUI(COMMON)
{
     ASSIGN(KEYWORD_STR, "*MAT_ARRUDA_BOYCE_RUBBER");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                    {DIMENSION="density";}
 optional:
     SCALAR(LSDYNA_K)               {DIMENSION="pressure";}
     SCALAR(LSD_G)                  {DIMENSION="pressure";}
 mandatory:
     SCALAR(LSD_NUM)                {DIMENSION="DIMENSIONLESS";}
 optional:
     DATA(LSD_LCID);
     SCALAR(LSD_TRAMP)              {DIMENSION="t";}
     SCALAR(LSD_NT)                 {DIMENSION="DIMENSIONLESS";}
     SIZE_RADIO(ArrayCount)
     {
        ADD(0, "<OFF>");
        ADD(1, "1");
        ADD(2, "2");
        ADD(3, "3");
        ADD(4, "4");
        ADD(5, "5");
        ADD(6, "6");
     }
     ARRAY(ArrayCount,"")
     {
        SCALAR(LSD_MAT_Gi)          {DIMENSION="pressure";}
        SCALAR(LSD_MAT_Beta)        {DIMENSION="DIMENSIONLESS";}
     }  
/*
    graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    COMMENT("$      MID       RHO         K         G         N");
    CARD("%10d%10lg%10lg%10lg%10d",_ID_,Rho,LSDYNA_K,LSD_G,LSD_NUM);
    //
    COMMENT("$     LCID     TRAMP        NT");
    CARD("%10lg%10lg%10lg",LSD_LCID,LSD_TRAMP,LSD_NT);

    if(ArrayCount > 0)
    {
        COMMENT("$       GI     BETAI");
    }
    FREE_CARD_LIST(ArrayCount)
    {
        CARD("%10lg%10lg",LSD_MAT_Gi,LSD_MAT_Beta);
    }
}
