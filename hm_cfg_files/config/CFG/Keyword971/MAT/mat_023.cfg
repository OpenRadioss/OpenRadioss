//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 023
// 


ATTRIBUTES(COMMON)
{
    // Initial and reference densities
    KEYWORD_STR                     = VALUE(STRING, "Solver Keyword");
    LSD_TitleOpt                    = VALUE(INT, "Title");
    CommentEnumField                = VALUE(INT, "User Comments");
    Num_Comments                    = SIZE("No. of comment lines");
    Comments                        = ARRAY[Num_Comments](STRING, "Entity Comments");
    Rho                             = VALUE(FLOAT, "Rho");  
    LSDYNA_AOPT                     = VALUE(FLOAT, "AOPT"); 
    LSD_MAT_REF                     = VALUE(FLOAT, "REF"); 
    LSD_MAT142_MACF                 = VALUE(INT, "MACF");
    LSDYNA_XP                       = VALUE(FLOAT, "XP");
    LSDYNA_YP                       = VALUE(FLOAT, "YP");
    LSDYNA_ZP                       = VALUE(FLOAT, "ZP");
    LSDYNA_A1                       = VALUE(FLOAT, "A1");
    LSDYNA_A2                       = VALUE(FLOAT, "A2");
    LSDYNA_A3                       = VALUE(FLOAT, "A3");
    LSDYNA_V1                       = VALUE(FLOAT, "V1");
    LSDYNA_V2                       = VALUE(FLOAT, "V2");
    LSDYNA_V3                       = VALUE(FLOAT, "V3");
    LSDYNA_D1                       = VALUE(FLOAT, "D1");
    LSDYNA_D2                       = VALUE(FLOAT, "D2");
    LSDYNA_D3                       = VALUE(FLOAT, "D3");
    LSDYNA_BETA                     = VALUE(FLOAT, "BETA");
    ArrayCount                      = SIZE("ArrayCount");
    LSDYNA_EA_array                 = ARRAY[ArrayCount](FLOAT, "EA");
    LSDYNA_EB_array                 = ARRAY[ArrayCount](FLOAT, "EB");
    LSDYNA_EC_array                 = ARRAY[ArrayCount](FLOAT, "EC");
    LSDYNA_PRBA_array               = ARRAY[ArrayCount](FLOAT, "PRBA");
    LSDYNA_PRCA_array               = ARRAY[ArrayCount](FLOAT, "PRCA");
    LSDYNA_PRCB_array               = ARRAY[ArrayCount](FLOAT, "PRCB");
    LSD_aA_array                    = ARRAY[ArrayCount](FLOAT, "AA");
    LSD_aB_array                    = ARRAY[ArrayCount](FLOAT, "AB");
    LSD_aC_array                    = ARRAY[ArrayCount](FLOAT, "AC");
    LSDYNA_GAB_array                = ARRAY[ArrayCount](FLOAT, "GAB");
    LSDYNA_GBC_array                = ARRAY[ArrayCount](FLOAT, "GBC");
    LSDYNA_GCA_array                = ARRAY[ArrayCount](FLOAT, "GCA");
    LSDYNA_T_array                  = ARRAY[ArrayCount](FLOAT, "T");
    //empty_string               = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                   = 9000;
    CommentEnumField              = 3220;
    Num_Comments                  = 3101;
    LSD_TitleOpt                  = 90;
    Comments                      = 3100;
    Rho                           = 118;
    LSDYNA_AOPT                   = 135;
    LSD_MAT_REF                   = 359;
    LSD_MAT142_MACF               = 1045;
    LSDYNA_XP                     = 136;
    LSDYNA_YP                     = 137;
    LSDYNA_ZP                     = 138;
    LSDYNA_A1                     = 139;
    LSDYNA_A2                     = 140;
    LSDYNA_A3                     = 141;
    LSDYNA_V1                     = 142;
    LSDYNA_V2                     = 143;
    LSDYNA_V3                     = 144;
    LSDYNA_D1                     = 145;
    LSDYNA_D2                     = 146;
    LSDYNA_D3                     = 147;
    LSDYNA_BETA                   = 148;
    ArrayCount                    = 2246;
    LSDYNA_EA_array               = 4827;
    LSDYNA_EB_array               = 4828;
    LSDYNA_EC_array               = 4829;
    LSDYNA_PRBA_array             = 4830;
    LSDYNA_PRCA_array             = 4831;
    LSDYNA_PRCB_array             = 4832;
    LSD_aA_array                  = 4833;
    LSD_aB_array                  = 4834;
    LSD_aC_array                  = 4835;
    LSDYNA_GAB_array              = 4836;
    LSDYNA_GBC_array              = 4837;
    LSDYNA_GCA_array              = 4838;
    LSDYNA_T_array                = 4867;
    //empty_string             = -1;
}

DRAWABLES(COMMON) {
private:
    MATERIAL_AXES_OPTION=SCALAR(LSDYNA_AOPT);
    REFERENCE_GEOMETRY=SCALAR(LSD_MAT_REF);
    MATERIAL_ANGLE=SCALAR(LSDYNA_BETA);
    MAX_EA = MAX(LSDYNA_EA_array);
    MAX_EB = MAX(LSDYNA_EB_array);
    MAX_EC = MAX(LSDYNA_EC_array);
    MAX_PARBA = MAX(LSDYNA_PRBA_array);
    MAX_PRCA = MAX(LSDYNA_PRCA_array);
    MAX_PRCB = MAX(LSDYNA_PRCB_array);
public:
    MASS_DENSITY  = SCALAR(Rho);
    YOUNG_MODULUS = MAX(MAX_EA,MAX_EB,MAX_EC);
    POISSON_RATIO = MAX(MAX_PARBA,MAX_PRCA,MAX_PRCB);
    //SOUND_SPEED is speed for ISDO = 0 and 1
    SOUND_SPEED             = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
    SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON) 
{
    ASSIGN(KEYWORD_STR, "*MAT_TEMPERATURE_DEPENDENT_ORTHOTROPIC");
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
            SCALAR(Comments);
        }
    }     
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    } 
mandatory:
    SCALAR(Rho)                     { DIMENSION="density";}
    RADIO(LSDYNA_AOPT)
    {
        ADD(0.0, "0.0: Locally orthotropic : axis given by nodes 1,2, and 4");
        ADD(1.0, "1.0: A-direction given by a point and global location of element center");
        ADD(2.0, "2.0: Axis given by vectors");
        ADD(3.0, "3.0: Axis given by rotating the material axes by an angle BETA");
        ADD(4.0, "4.0: Cylindrical coordinate given by vector v and point p");
    }
optional:
    RADIO(LSD_MAT_REF)
    {
        ADD(0.0, "0: Off");
        ADD(1.0, "1: On");
    }
    RADIO(LSD_MAT142_MACF)
    {
        ADD(1, "1: No change (default)");
        ADD(2, "2: Switch material axes a and b");
        ADD(3, "3: Switch material axes a and c");
        ADD(4, "4: Switch material axes b and c");
    }
    if(LSDYNA_AOPT == 1.0 || LSDYNA_AOPT == 4.0)
    {
mandatory:
        SCALAR(LSDYNA_XP)           {DIMENSION="l";}
        SCALAR(LSDYNA_YP)           {DIMENSION="l";}
        SCALAR(LSDYNA_ZP)           {DIMENSION="l";}
    }
    if(LSDYNA_AOPT == 2.0)
    {
mandatory:
        SCALAR(LSDYNA_A1);
        SCALAR(LSDYNA_A2);
        SCALAR(LSDYNA_A3);
        SCALAR(LSDYNA_D1);
        SCALAR(LSDYNA_D2);
        SCALAR(LSDYNA_D3);

    }
    if(LSDYNA_AOPT == 3.0 || LSDYNA_AOPT == 4.0)
    {
mandatory:
        SCALAR(LSDYNA_V1);
        SCALAR(LSDYNA_V2);
        SCALAR(LSDYNA_V3);
    }
    if(LSDYNA_AOPT == 3.0)
    {
mandatory:
        SCALAR(LSDYNA_BETA)         {DIMENSION="a";}
    }
mandatory:
    SIZE_RADIO(ArrayCount)
    {
        ADD(0, "OFF");
        ADD(1, "1");
        ADD(2, "2");
        ADD(3, "3");
        ADD(4, "4");
        ADD(5, "5");
        ADD(6, "6");
        ADD(7, "7");
        ADD(8, "8");
        ADD(9, "9");
        ADD(10, "10");
        ADD(11, "11");
        ADD(12, "12");
        ADD(13, "13");
        ADD(14, "14");
        ADD(15, "15");
        ADD(16, "16");        
        ADD(17, "17");
        ADD(18, "18");
        ADD(19, "19");
        ADD(20, "20");
        ADD(21, "21");
        ADD(22, "22");
        ADD(23, "23");
        ADD(24, "24");
        ADD(25, "25");
        ADD(26, "26");        
        ADD(27, "27");
        ADD(28, "28");
        ADD(29, "29");
        ADD(30, "30");
        ADD(31, "31");
        ADD(32, "32");
        ADD(33, "33");        
        ADD(34, "34");
        ADD(35, "35");
        ADD(36, "36");        
        ADD(37, "37");
        ADD(38, "38");
        ADD(39, "39");
        ADD(40, "40");
        ADD(41, "41");        
        ADD(42, "42");
        ADD(43, "43");
        ADD(44, "44");
        ADD(45, "45");        
        ADD(46, "46");
        ADD(47, "47");
        ADD(48, "48");
    }
    ARRAY(ArrayCount,"")
    {
optional:
        SCALAR(LSDYNA_EA_array)             {DIMENSION="pressure";}    
        SCALAR(LSDYNA_EB_array)             {DIMENSION="pressure";}
        SCALAR(LSDYNA_EC_array)             {DIMENSION="pressure";}
        SCALAR(LSDYNA_PRBA_array)           {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_PRCA_array)           {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_PRCB_array)           {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_aA_array)                {DIMENSION="e";}
        SCALAR(LSD_aB_array)                {DIMENSION="e";}
        SCALAR(LSD_aC_array)                {DIMENSION="e";}
        SCALAR(LSDYNA_GAB_array)            {DIMENSION="pressure";}
        SCALAR(LSDYNA_GBC_array)            {DIMENSION="pressure";}
        SCALAR(LSDYNA_GCA_array)            {DIMENSION="pressure";}
        SCALAR(LSDYNA_T_array)              {DIMENSION="k";}
    }
    /*
    graphical SUPPORT("Part(s) to which material is applied") {
    OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/SHELL,/COMPONENT/PENTA6,/COMPONENT/SHEL16,/COMPONENT/TSHELL);
    ADD(COMPONENT,"Parts");
    }
    */
}

// File format
FORMAT(Keyword971) 
{
    COMMENT("$      MID        RO      AOPT       REF      MACF");
    CARD("%10d%10lg%10lg%10lg%10d",_ID_,Rho,LSDYNA_AOPT,LSD_MAT_REF,LSD_MAT142_MACF);
    
    COMMENT("$       XP        YP        ZP        A1        A2        A3");
    if(LSDYNA_AOPT == 1.0)
    {
        CARD("%10lg%10lg%10lg",LSDYNA_XP ,LSDYNA_YP ,LSDYNA_ZP);
    }
    else if(LSDYNA_AOPT == 2.0)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_, _BLANK_, _BLANK_, LSDYNA_A1 ,LSDYNA_A2 ,LSDYNA_A3);
    }    
    else if(LSDYNA_AOPT == 3.0)
    {
        BLANK;
    }    
    else if(LSDYNA_AOPT == 4.0)
    {
        CARD("%10lg%10lg%10lg",LSDYNA_XP ,LSDYNA_YP ,LSDYNA_ZP);
    }        
    else
    {
        BLANK;
    }
    
    COMMENT("$       V1        V2        V3        D1        D2        D3      BETA");
    if(LSDYNA_AOPT == 1.0)
    {
        BLANK;
    }
    else if(LSDYNA_AOPT == 2.0)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_, _BLANK_, _BLANK_, LSDYNA_D1 ,LSDYNA_D2 ,LSDYNA_D3);
    }    
    else if(LSDYNA_AOPT == 3.0)
    {
        CARD("%10lg%10lg%10lg%10s%10s%10s%10lg",LSDYNA_V1 ,LSDYNA_V2 ,LSDYNA_V3 ,_BLANK_, _BLANK_, _BLANK_, LSDYNA_BETA);
    }    
    else if(LSDYNA_AOPT == 4.0)
    {
        CARD("%10lg%10lg%10lg",LSDYNA_V1 ,LSDYNA_V2 ,LSDYNA_V3);
    }        
    else
    {
        BLANK;
    }

    FREE_CARD_LIST(ArrayCount)
    {
        COMMENT("$      EAi       EBi       ECi     PRBAi     PRCAi     PRCBi");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_EA_array ,LSDYNA_EB_array ,LSDYNA_EC_array ,LSDYNA_PRBA_array ,LSDYNA_PRCA_array ,LSDYNA_PRCB_array);

        COMMENT("$      AAi       ABi       ACi      GABi      GBCi      GCAi        Ti");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_aA_array ,LSD_aB_array ,LSD_aC_array ,LSDYNA_GAB_array ,LSDYNA_GBC_array ,LSDYNA_GCA_array ,LSDYNA_T_array);
    }
}
