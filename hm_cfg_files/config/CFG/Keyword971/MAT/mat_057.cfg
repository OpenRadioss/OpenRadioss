//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 057
// 


 ATTRIBUTES(COMMON) 
 {
  // Initial and reference densities
  KEYWORD_STR                       = VALUE(STRING, "Solver Keyword");
  LSD_TitleOpt                      = VALUE(INT, "Title");
  CommentEnumField                  = VALUE(INT, "User Comments");
  Num_Comments                      = SIZE("No. of comment lines");
  Comments                          = ARRAY[Num_Comments](STRING, "Entity Comments");
  Rho                               = VALUE(FLOAT, "Mass density");  
  E                                 = VALUE(FLOAT, "Young’s modulus used in tension");
  LSD_LCID                          = VALUE(FUNCT, "Load curve or table ID");
  LSDYNA_TC                         = VALUE(FLOAT, "Cut-off for the nominal tensile stress");
  LSDYNA_HU                         = VALUE(FLOAT, "Hysteretic unloading factor between 0 and 1");
  LSDYNA_BETA                       = VALUE(FLOAT, "decay constant to model creep in unloading");
  DAMP_CURVES_FLAG                  = VALUE(INT, "DAMP_CURVES_FLAG");
  LSDYNA_DAMP                       = VALUE(FLOAT, "Viscous coefficient");
  LSDYNA_DAMP_CURVES                = VALUE(FUNCT, "DAMP");
  LSDYNA_SHAPE                      = VALUE(FLOAT, "Shape factor for unloading");
  LSDYNA_FAIL                       = VALUE(FLOAT, "Failure option after cutoff stress is reached");
  LSDYNA_BVFLAG                     = VALUE(FLOAT, "Bulk viscosity activation flag");
  LSDYNA_ED                         = VALUE(FLOAT, "Optional Young's relaxation modulus");
  LSDYNA_BETA1                      = VALUE(FLOAT, "Optional decay constant");
  LSDYNA_KCON                       = VALUE(FLOAT, "Stiffness coefficient for contact interface stiffness");
  LSD_MAT_REF                       = VALUE(FLOAT, "Use reference geometry to initialize the stress tensor");
  LOC_NU                            = VALUE(FLOAT, "Temp poisson ratio");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
  KEYWORD_STR                   = 9000;
  CommentEnumField              = 3220;
  Num_Comments                  = 3101;
  LSD_TitleOpt                  = 90;
  Comments                      = 3100;
  Rho                           = 118;
  E                             = 119;
  LSD_LCID                      = 45;
  LSDYNA_TC                     = 251;
  LSDYNA_HU                     = 252;
  LSDYNA_BETA                   = 148;
  DAMP_CURVES_FLAG              = 1496;
  LSDYNA_DAMP                   = 254;
  LSDYNA_DAMP_CURVES            = 1495;
  LSDYNA_SHAPE                  = 255; 
  LSDYNA_FAIL                   = 256;
  LSDYNA_BVFLAG                 = 257;
  LSDYNA_ED                     = 258;
  LSDYNA_BETA1                  = 259;
  LSDYNA_KCON                   = 260;
  LSD_MAT_REF                   = 359;
  LOC_NU                        = -1;
}

DEFAULTS(COMMON)
{
    LSDYNA_TC           = 1.0E+20;
    LSDYNA_HU           = 1.0;
    LSDYNA_DAMP         = 0.05;
    LOC_NU              = 0.0;
}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  YOUNG_MODULUS=SCALAR(E);
  TENSION_CUTOFF_STRESS=SCALAR(LSDYNA_TC);
  HYSTERETIC_UNLOADING_FACTOR=SCALAR(LSDYNA_HU);
  DECAY_CONSTANT=SCALAR(LSDYNA_BETA);
  VISCOUS_COEFFICIENT=SCALAR(LSDYNA_DAMP);
  SHAPE_FACTOR_FOR_UNLOADING=SCALAR(LSDYNA_SHAPE);
  FAILURE_OPTION=SCALAR(LSDYNA_FAIL);
  BULK_VISCOSITY_ACTIVATION_FLAG=SCALAR(LSDYNA_BVFLAG);
  YOUNG_RELAXATION_MODULUS=SCALAR(LSDYNA_ED);
  DECAY_CONSTANT=SCALAR(LSDYNA_BETA1);
  STIFFNESS_COEFFICIENT=SCALAR(LSDYNA_KCON);
  REFERENCE_GEOMETRY=SCALAR(LSD_MAT_REF);
  POISSON_RATIO=SCALAR(LOC_NU);
  // FOR THIS MAT POISSON_RATIO EQUAL TO ZERO
 //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED        = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2));
  C1                = EVAL(YOUNG_MODULUS/(3));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON) 
{
     ASSIGN(KEYWORD_STR, "*MAT_LOW_DENSITY_FOAM");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
       {
             ASSIGN(KEYWORD_STR, "_TITLE");
       } 
 mandatory:
     SCALAR(Rho)                        { DIMENSION="density";}
 optional:
     SCALAR(E)                          {DIMENSION="pressure";}
 mandatory:
    FUNCTION(LSD_LCID)
    {
      X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
      Y_TITLE = "Stress"; Y_DIMENSION = "pressure";
      Z_TITLE = "Temperature"; Z_DIMENSION = "k";
    }
 optional:
     SCALAR(LSDYNA_TC)                  {DIMENSION="pressure";}
     SCALAR(LSDYNA_HU)                  {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_BETA)                {DIMENSION="strain_rate";}
     FLAG(DAMP_CURVES_FLAG);
     if(DAMP_CURVES_FLAG == FALSE)
     {
        SCALAR(LSDYNA_DAMP)             { DIMENSION="DIMENSIONLESS";}
     }
     if(DAMP_CURVES_FLAG == TRUE)
     {
        DATA(LSDYNA_DAMP_CURVES);
     }
     SCALAR(LSDYNA_SHAPE)               { DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_FAIL)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_BVFLAG)              {DIMENSION="DIMENSIONLESS";} 
     SCALAR(LSDYNA_ED)                  {DIMENSION="pressure";}
     SCALAR(LSDYNA_BETA1)               {DIMENSION="strain_rate";}
     SCALAR(LSDYNA_KCON)                {DIMENSION="stiffness";}
     RADIO(LSD_MAT_REF)
     {
        ADD(0.0, "0.0: Off");
        ADD(1.0, "1.0: On");
     }
/*
      graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/SPHCEL);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    //
    COMMENT("$      MID       RHO         E      LCID        TC        HU      BETA      DAMP");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,LSD_LCID,LSDYNA_TC,LSDYNA_HU,LSDYNA_BETA,SCALAR_OR_OBJECT(DAMP_CURVES_FLAG,LSDYNA_DAMP,LSDYNA_DAMP_CURVES));
    //
    COMMENT("$    SHAPE      FAIL    BVFLAG        ED     BETA1      KCON       REF");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_SHAPE,LSDYNA_FAIL,LSDYNA_BVFLAG,LSDYNA_ED,LSDYNA_BETA1,LSDYNA_KCON,LSD_MAT_REF);
    //
}