//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 025
// 


 ATTRIBUTES(COMMON) 
 
 {
  
  // Initial and reference densities
  KEYWORD_STR                       = VALUE(STRING, "Solver Keyword");
  LSD_TitleOpt                      = VALUE(INT, "Title");
  CommentEnumField                  = VALUE(INT, "User Comments");
  Num_Comments                      = SIZE("No. of comment lines");
  Comments                          = ARRAY[Num_Comments](STRING, "Entity Comments");
  Rho                               = VALUE(FLOAT, "Rho");  
  LSD_MAT_BULK                      = VALUE(FLOAT, "BULK"); 
  G                                 = VALUE(FLOAT, "G"); 
  LSD_ALPHA                         = VALUE(FLOAT, "ALPHA"); 
  LSD_THETA                         = VALUE(FLOAT, "THETA");  
  LSD_GAMMA                         = VALUE(FLOAT, "GAMMA"); 
  LSDYNA_BETA                       = VALUE(FLOAT, "BETA"); 
  LSD_R                             = VALUE(FLOAT, "R");
  LSD_MAT_D                         = VALUE(FLOAT, "D");  
  LSD_W                             = VALUE(FLOAT, "W"); 
  LSD_X0                            = VALUE(FLOAT, "X0"); 
  LSD_MAT_C                         = VALUE(FLOAT, "C");
  LSDYNA_N                          = VALUE(FLOAT, "N");  
  LSD_NPLOT                         = VALUE(FLOAT, "PLOT"); 
  LSD_FFIT                          = VALUE(FLOAT, "FTYPE"); 
  LSD_EFIT                          = VALUE(FLOAT, "VEC");
  LSD_SECP                          = VALUE(FLOAT, "TOFF");

}

SKEYWORDS_IDENTIFIER(COMMON)

{

  KEYWORD_STR                   = 9000;
  CommentEnumField              = 3220;
  Num_Comments                  = 3101;
  LSD_TitleOpt                  = 90;
  Comments                      = 3100;
  Rho                           = 118;
  LSD_MAT_BULK                  = 278;
  G                             = 121;
  LSD_ALPHA                     = 1651;
  LSD_THETA                     = 4793;
  LSD_GAMMA                     = 4336;
  LSDYNA_BETA                   = 148;
  LSD_R                         = 1166;
  LSD_MAT_D                     = 1133;
  LSD_W                         = 1638;
  LSD_X0                        = 4799;
  LSD_MAT_C                     = 313;
  LSDYNA_N                      = 71;
  LSD_NPLOT                     = 4808;
  LSD_FFIT                      = 4795;
  LSD_EFIT                      = 4794;
  LSD_SECP                      = 4801;
  
}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  BULK_MODULUS=SCALAR(LSD_MAT_BULK);
  SHEAR_MODULUS=SCALAR(G);
  FAILURE_ENVELOPE_PARAMETER=SCALAR(LSD_ALPHA);
  FAILURE_ENVELOPE_LINEAR_COEFFICIENT=SCALAR(LSD_THETA);
  FAILURE_ENVELOPE_EXPONENTIAL_COEFFICIENT=SCALAR(LSD_GAMMA);
  FAILURE_ENVELOPE_EXPONENT=SCALAR(LSDYNA_BETA);
  R=SCALAR(LSD_R);
  D=SCALAR(LSD_MAT_D);
  W=SCALAR(LSD_W);
  X0=SCALAR(LSD_X0);
  C=SCALAR(LSD_MAT_C);
  N=SCALAR(LSDYNA_N);
  PLOTTING_IN_TAURUS=SCALAR(LSD_NPLOT);
  FORMULATION_FLAG=SCALAR(LSD_FFIT);
  VECTORIZATION_FLAG=SCALAR(LSD_EFIT);
  TENSION_CUT_OFF=SCALAR(LSD_SECP);
  YOUNG_MODULUS = EVAL(9*SHEAR_MODULUS*BULK_MODULUS/(3.*BULK_MODULUS+SHEAR_MODULUS)) ;
  POISSON_RATIO     = EVAL((3.*BULK_MODULUS-2.*SHEAR_MODULUS)/(6.*BULK_MODULUS+2.*SHEAR_MODULUS));
 public:
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED        = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 public:
  SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+BULK_MODULUS)/MASS_DENSITY)^0.5);
}

GUI(COMMON) 

{


    ASSIGN(KEYWORD_STR, "*MAT_GEOLOGIC_CAP_MODEL");
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    }
    if(CommentEnumField == 2)
    {  
       SIZE(Num_Comments);
       ARRAY(Num_Comments,"")
       {
          SCALAR(Comments);
       }
    }     
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
          ASSIGN(KEYWORD_STR, "_TITLE");
    } 
 mandatory:
    SCALAR(Rho)                         { DIMENSION="density";}
 optional:
    SCALAR(LSD_MAT_BULK)                {DIMENSION="pressure";}
    SCALAR(G)                           {DIMENSION="pressure";}
    SCALAR(LSD_ALPHA)                   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_THETA)                   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_GAMMA)                   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_BETA)                 {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_R)                       {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_D)                   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_W)                       {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_X0)                      {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_C)                   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_N)                    {DIMENSION="DIMENSIONLESS";}
    RADIO (LSD_NPLOT)
    {
        ADD(1.0, "1: Hardening parameter");
        ADD(2.0, "2: Cap-J1 axis intercept,X(k)");
        ADD(3.0, "3: Volumetric plastic strain");
        ADD(4.0, "4: First stress invariant");
        ADD(5.0, "5: Second stress invariant");
        ADD(6.0, "6: Not used");
        ADD(7.0, "7: Not used");
        ADD(8.0, "8: Response mode number");
        ADD(9.0, "9: Number of iterations");
    }
 mandatory:
    RADIO (LSD_FFIT)
    {
       ADD(1.0, "1: Soils (Cap surface may contract)");
       ADD(2.0, "2: Concrete and rock (Cap surface may contract)");
    }
 optional:
    RADIO (LSD_EFIT)
    {
        ADD(0.0, "0: Vectorized (fixed number of iterations)");
        ADD(1.0, "1: Fully iterative");
    }
    SCALAR(LSD_SECP)                    {DIMENSION="pressure";}
/*
     graphical SUPPORT("Part(s) to which material is applied") {
    OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{   
    //
    COMMENT("$      MID       RHO      BULK         G     ALPHA     THETA     GAMMA      BETA");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSD_MAT_BULK,G,LSD_ALPHA,LSD_THETA,LSD_GAMMA,LSDYNA_BETA);
    //
    COMMENT("$        R         D         W        X0         C         N");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_R,LSD_MAT_D,LSD_W,LSD_X0,LSD_MAT_C,LSDYNA_N);
    //
    COMMENT("$     PLOT     FTYPE       VEC      TOFF");
    CARD("%10lg%10lg%10lg%10lg",LSD_NPLOT,LSD_FFIT,LSD_EFIT,LSD_SECP);
    //

}