//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 100
//

ATTRIBUTES(COMMON)
{
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    EncTypeEnumField                        = VALUE(INT,  "Type");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    LSD_MAT100_PR                           = VALUE(FLOAT,  "Poissons ratio");
    E                                       = VALUE(FLOAT,  "Youngs modulus");
    LCATU_OPT                               = VALUE(INT,    "LCATU_Option");
    LCAX_OPT                                = VALUE(INT,    "LCAX_Option");
    LSD_BETA                                = VALUE(FLOAT,  "Damage model decay rate");
    LSD_LCAX                                = VALUE(FLOAT,  "Maximum axial stress at failure");
    LSD_LCID                                = VALUE(FUNCT,  "maximum shear stress at failure VS effective strain rate");
    LSD_LCID2                               = VALUE(FUNCT,  "maximum axial stress at failure VS effective strain rate");
    LSD_LCTAU                               = VALUE(FLOAT,  "Maximum shear stress at failure");
    LSD_MAT100_ASFF                         = VALUE(INT,    "Weld assembly simultaneous failure flag");
    LSD_MAT100_DMGOPT                       = VALUE(FLOAT,  "Damage option flag");
    LSD_MAT100_DT                           = VALUE(FLOAT,  "Time step size for mass scaling");
    LSD_MAT100_EFAIL                        = VALUE(FLOAT,  "Effective plastic strain in weld material at failure");
    LSD_MAT100_ET                           = VALUE(FLOAT,  "Plastic hardening modulus");
    LSD_MAT100_LCAX                         = VALUE(FUNCT,  "max axial stress VS effective strain rate");
    LSD_MAT100_LCTAU                        = VALUE(FUNCT,  "max shear stress VS effective strain rate");
    LSD_MAT100_MRR                          = VALUE(FLOAT,  "Torsional moment resultant at failure");
    LSD_MAT100_MSS                          = VALUE(FLOAT,  "Moment resultant at failure");
    LSD_MAT100_MTT                          = VALUE(FLOAT,  "Moment resultant at failure");
    LSD_MAT100_NF                           = VALUE(FLOAT,  "Number of force vectors stored for filtering");
    LSD_MAT100_NF1                          = VALUE(FLOAT,  "Number of force vectors stored for filtering");
    LSD_MAT100_NRR                          = VALUE(FLOAT,  "Axial force resultant");
    LSD_MAT100_NRS                          = VALUE(FLOAT,  "maximum shear stress at failure");
    LSD_MAT100_NRT                          = VALUE(FLOAT,  "Force resultant at failure");
    LSD_MAT100_OPT                          = VALUE(FLOAT,  "Failure option");
    LSD_MAT100_RS                           = VALUE(FLOAT,  "Rupture strain.");
    LSD_MAT100_SIGY                         = VALUE(FLOAT,  "Initial yield stress");
    LSD_MAT100_TFAIL                        = VALUE(FLOAT,  "Failure time if nonzero");
    LSD_MAT100_USERV1                       = VALUE(FLOAT,  "Failure constants for user failure subroutine");
    LSD_MAT100_USERV2                       = VALUE(FLOAT,  "Failure constants for user failure subroutine");
    LSD_MAT100_USERV3                       = VALUE(FLOAT,  "Failure constants for user failure subroutine");
    LSD_MAT100_USERV4                       = VALUE(FLOAT,  "Failure constants for user failure subroutine");
    LSD_MAT100_USERV5                       = VALUE(FLOAT,  "Failure constants for user failure subroutine");
    LSD_MAT100_USERV6                       = VALUE(FLOAT,  "Failure constants for user failure subroutine");
    LSD_MAT100_ZALP1                        = VALUE(FLOAT,  "Correction factor alpha1");
    LSD_MAT100_ZALP2                        = VALUE(FLOAT,  "Correction factor alpha2");
    LSD_MAT100_ZALP3                        = VALUE(FLOAT,  "Correction factor alpha3");
    LSD_MAT100_ZD                           = VALUE(FLOAT,  "Notch diameter");
    LSD_MAT100_ZRRAD                        = VALUE(FLOAT,  "Notch root radius");
    LSD_MAT100_ZT                           = VALUE(FLOAT,  "Sheet thickness");
    LSD_MAT100_ZT2                          = VALUE(FLOAT,  "Sheet thickness");
    LSD_MAT100_damageOpt                    = VALUE(INT,    "Damage-Failure");
    LSD_MATL100_FVAL                        = VALUE(FLOAT,  "Failure parameter");
    LSD_MATL100_TRUET                       = VALUE(FLOAT,  "True weld thickness");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    NRRFlag                                 = VALUE(INT,  "LCID_NRR");
    NRSFlag                                 = VALUE(INT,  "LCID_NRS");
    NRTFlag                                 = VALUE(INT,  "LCID_NRT");
    MRRFlag                                 = VALUE(INT,  "LCID_MRR");
    MSSFlag                                 = VALUE(INT,  "LCID_MSS");
    MTTFlag                                 = VALUE(INT,  "LCID_MTT");
    LSD_NRTID                               = VALUE(FUNCT,  "Curve ID for Force resultant at failure");
    LSD_MRRID                               = VALUE(FUNCT,  "Curve ID for Torsional moment resultant at failure");
    LSD_MSSID                               = VALUE(FUNCT,  "Curve ID for Moment resultant at failure");
    LSD_MTTID                               = VALUE(FUNCT,  "Curve ID for Moment resultant at failure");
    RegTypeEnumField                        = VALUE(INT,    "Type");
    SIGY_AsCurve                            = VALUE(FUNCT,  "yield curve");
    SigyAsCurve                             = VALUE(INT,  "SigyAsCurve");
    IO_FLAG                                 = VALUE(INT, "io flag");
    OPT_TYPE_STR                            = VALUE(STRING, "OPT");
    TITLE                                   = VALUE(STRING, "Title");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
    _HAS_HEADER                             = VALUE(BOOL,"Has Header Card");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    EncTypeEnumField                        = 5828;
    LCATU_OPT                               = 5362;
    LCAX_OPT                                = 5361;
    LSD_BETA                                = 1662;
    LSD_LCAX                                = 5357;
    LSD_LCID                                = 45;
    LSD_LCID2                               = 168;
    LSD_LCTAU                               = 5358;
    LSD_MAT100_ASFF                         = 6130;
    LSD_MAT100_DMGOPT                       = 6131;
    LSD_MAT100_DT                           = 2531;
    E                                       = 119;
    LSD_MAT100_EFAIL                        = 2532;
    LSD_MAT100_ET                           = 2530;
    LSD_MAT100_LCAX                         = 5359;
    LSD_MAT100_LCTAU                        = 5360;
    LSD_MAT100_MRR                          = 2536;
    LSD_MAT100_MSS                          = 2537;
    LSD_MAT100_MTT                          = 2538;
    LSD_MAT100_NF                           = 3236;
    LSD_MAT100_NF1                          = 5368;
    LSD_MAT100_NRR                          = 2533;
    LSD_MAT100_NRS                          = 2534;
    LSD_MAT100_NRT                          = 2535;
    LSD_MAT100_OPT                          = 4440;
    LSD_MAT100_PR                           = 2528;
    LSD_MAT100_RS                           = 4439;
    Rho                                     = 118;
    LSD_MAT100_SIGY                         = 2529;
    LSD_MAT100_TFAIL                        = 3235;
    LSD_MAT100_USERV1                       = 4451;
    LSD_MAT100_USERV2                       = 4452;
    LSD_MAT100_USERV3                       = 4453;
    LSD_MAT100_USERV4                       = 4454;
    LSD_MAT100_USERV5                       = 4455;
    LSD_MAT100_USERV6                       = 4456;
    LSD_MAT100_ZALP1                        = 4445;
    LSD_MAT100_ZALP2                        = 4446;
    LSD_MAT100_ZALP3                        = 4447;
    LSD_MAT100_ZD                           = 4444;
    LSD_MAT100_ZRRAD                        = 4448;
    LSD_MAT100_ZT                           = 4450;
    LSD_MAT100_ZT2                          = 6129;
    LSD_MAT100_damageOpt                    = 4449;
    LSD_MATL100_FVAL                        = 5352;
    LSD_MATL100_TRUET                       = 5353;
    LSD_TitleOpt                            = 90;
    NRRFlag                                 = 5288;
    NRSFlag                                 = 5208;
    NRTFlag                                 = 11167;
    MRRFlag                                 = 11168;
    MSSFlag                                 = 11169;
    MTTFlag                                 = 11170;
    LSD_NRTID                               = 11171;
    LSD_MRRID                               = 11172;
    LSD_MSSID                               = 11173;
    LSD_MTTID                               = 11174;
    Num_Comments                            = 3101;
    RegTypeEnumField                        = 5827;
    SIGY_AsCurve                            = 1851;
    SigyAsCurve                             = 1850;
    IO_FLAG                                 = -1;
    OPT_TYPE_STR                            = -1;
    TITLE                                   = -1;
    //empty_string                       = -1;
    _HAS_HEADER                             = -1;
}

CHECK(COMMON)
{
    LSD_LCAX                                  >=0;
    LSD_LCTAU                                 >=0;
    LSD_MAT100_NRR                            >=0;
    LSD_MAT100_NRR                            >=0;
    LSD_MAT100_NRS                            >=0;
    LSD_MAT100_NRS                            >=0;
}

DEFAULTS(COMMON)
{
    _HAS_HEADER             = TRUE;
}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  YOUNG_MODULUS=SCALAR(E);
  POISSON_RATIO=SCALAR(LSD_MAT100_PR);
  INITIAL_YIELD_STRESS=SCALAR(LSD_MAT100_SIGY);
  HARDENING_MODULUS=SCALAR(LSD_MAT100_ET);
  TIME_STEP_SIZE_FOR_MASS_SCALING=SCALAR(LSD_MAT100_DT);
  FAILURE_TIME_IF_NONZERO=SCALAR(LSD_MAT100_TFAIL);
  
 public:
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON)
{
     ASSIGN(KEYWORD_STR, "*MAT_SPOTWELD");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     } 
     RADIO(RegTypeEnumField)
     {
        ADD(0, "Regular");
     }
     FLAG(LSD_MAT100_damageOpt);
     if(LSD_MAT100_damageOpt == TRUE)
     {
        ASSIGN(KEYWORD_STR, "_DAMAGE-FAILURE");
     }
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                             {DIMENSION="density";}
     SCALAR(E)                               {DIMENSION="pressure";}
 optional:
     SCALAR(LSD_MAT100_PR)                              {DIMENSION="DIMENSIONLESS";}
     
     FLAG(SigyAsCurve);
     if(SigyAsCurve == FALSE)
     {
        SCALAR(LSD_MAT100_SIGY)                         {DIMENSION="pressure";}
     }
     if(SigyAsCurve == TRUE)
     {
        FUNCTION(SIGY_AsCurve)
        {
          X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
          Y_TITLE = "Stress"; Y_DIMENSION = "pressure";
          Z_TITLE = "Strain Rate"; Z_DIMENSION = "strain_rate";
        }
     }
     SCALAR(LSD_MAT100_ET)                              {DIMENSION="pressure";}
     SCALAR(LSD_MAT100_DT)                              {DIMENSION="t";}
     SCALAR(LSD_MAT100_TFAIL)                           {DIMENSION="t";}
     
     if(LSD_MAT100_damageOpt == FALSE || (LSD_MAT100_damageOpt == TRUE && (LSD_MAT100_OPT == 2.0 || LSD_MAT100_OPT == 3.0 || LSD_MAT100_OPT == 4.0 || LSD_MAT100_OPT == 5.0 || LSD_MAT100_OPT == 6.0 || LSD_MAT100_OPT == 7.0 || LSD_MAT100_OPT == 9.0)))
     {
        SCALAR(LSD_MAT100_EFAIL)                        {DIMENSION="DIMENSIONLESS";}
     }
     if(LSD_MAT100_damageOpt == FALSE || (LSD_MAT100_damageOpt == TRUE && LSD_MAT100_OPT == -2.0 || LSD_MAT100_OPT == -1.0 || LSD_MAT100_OPT == 0.0))
     {
         FLAG(NRRFlag);
         FLAG(NRSFlag);
         FLAG(NRTFlag);
         FLAG(MRRFlag);
         FLAG(MSSFlag);
         FLAG(MTTFlag);
     }
     if(NRRFlag == FALSE)
     {
        SCALAR(LSD_MAT100_NRR)                      {DIMENSION="force";}
     }
     if(NRRFlag == TRUE)
     {
        FUNCTION(LSD_LCID2)
        {
          X_TITLE = "Strain rate"; X_DIMENSION = "DIMENSIONLESS";
          Y_TITLE = "Force at failure"; Y_DIMENSION = "force";
        } 
     }
     if(NRSFlag == FALSE)
     {
        SCALAR(LSD_MAT100_NRS)                      {DIMENSION="force";}
     }
     if(NRSFlag == TRUE)
     {
        FUNCTION(LSD_LCID)
        {
          X_TITLE = "Strain rate"; X_DIMENSION = "DIMENSIONLESS";
          Y_TITLE = "Force at failure"; Y_DIMENSION = "force";
        } 
     }
     if(NRTFlag == FALSE)
     {
         SCALAR(LSD_MAT100_NRT)                         {DIMENSION="force";}
     }
     if(MRRFlag == FALSE)
     {
         SCALAR(LSD_MAT100_MRR)                         {DIMENSION="moment";}
     }
     if(MSSFlag == FALSE)
     {
         SCALAR(LSD_MAT100_MSS)                         {DIMENSION="moment";}
     }
     if(MTTFlag == FALSE)
     {
         SCALAR(LSD_MAT100_MTT)                         {DIMENSION="moment";}
     }
     if(NRTFlag == TRUE)
     {
        FUNCTION(LSD_NRTID)
        {
          X_TITLE = "Strain rate"; X_DIMENSION = "DIMENSIONLESS";
          Y_TITLE = "Force at failure"; Y_DIMENSION = "force";
        }                        
     }
     if(MRRFlag == TRUE)
     {
        FUNCTION(LSD_MRRID)
        {
          X_TITLE = "Strain rate"; X_DIMENSION = "DIMENSIONLESS";
          Y_TITLE = "Moment at failure"; Y_DIMENSION = "moment";
        }                         
     }
     if(MSSFlag == TRUE)
     {
        FUNCTION(LSD_MSSID)
        {
          X_TITLE = "Strain rate"; X_DIMENSION = "DIMENSIONLESS";
          Y_TITLE = "Moment at failure"; Y_DIMENSION = "moment";
        }                         
     }
     if(MTTFlag == TRUE)
     {
        FUNCTION(LSD_MTTID)
        {
          X_TITLE = "Strain rate"; X_DIMENSION = "DIMENSIONLESS";
          Y_TITLE = "Moment at failure"; Y_DIMENSION = "moment";
        }                        
     }

     if(LSD_MAT100_damageOpt == FALSE || (LSD_MAT100_damageOpt == TRUE && (LSD_MAT100_OPT == 2.0 || LSD_MAT100_OPT == 3.0 || LSD_MAT100_OPT == 4.0 || LSD_MAT100_OPT == 5.0 || LSD_MAT100_OPT == 6.0 || LSD_MAT100_OPT == 7.0 || LSD_MAT100_OPT == 9.0)))
     {
         SCALAR(LSD_MAT100_NF)                          {DIMENSION="DIMENSIONLESS";}
     }
     if(LSD_MAT100_damageOpt == TRUE && LSD_MAT100_OPT == 1)
     {
        FLAG(LCAX_OPT);
     }
     if((LSD_MAT100_damageOpt == TRUE && LSD_MAT100_OPT == 1) && LCAX_OPT == FALSE)
     {
         SCALAR(LSD_LCAX)                         {DIMENSION="pressure";}
     }
     if((LSD_MAT100_damageOpt == TRUE && LSD_MAT100_OPT == 1) && LCAX_OPT == TRUE)
     {
        FUNCTION(LSD_MAT100_LCAX)
        {
          X_TITLE = "Strain rate"; X_DIMENSION = "DIMENSIONLESS";
          Y_TITLE = "Axial stress at failure"; Y_DIMENSION = "pressure";
        }  
     }
     if(LSD_MAT100_damageOpt == TRUE && LSD_MAT100_OPT == 1)
     {
        FLAG(LCATU_OPT);
     }
     if((LSD_MAT100_damageOpt == TRUE && LSD_MAT100_OPT == 1) && LCATU_OPT == FALSE)
     {
         SCALAR(LSD_LCTAU)                         {DIMENSION="pressure";}
     }
     if((LSD_MAT100_damageOpt == TRUE && LSD_MAT100_OPT == 1) && LCATU_OPT == TRUE)
     {
        FUNCTION(LSD_MAT100_LCTAU)
        {
          X_TITLE = "Strain rate"; X_DIMENSION = "DIMENSIONLESS";
          Y_TITLE = "Shear stress at failure"; Y_DIMENSION = "pressure";
        }  
     }
     if(LSD_MAT100_damageOpt == TRUE && LSD_MAT100_OPT == 1)
     {
        SCALAR(LSD_MAT100_NF1)                          {DIMENSION="DIMENSIONLESS";}
     }
     if(LSD_MAT100_damageOpt == TRUE && LSD_MAT100_OPT == 2)
     {
        SCALAR(LSD_MAT100_USERV1)                       {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT100_USERV2)                       {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT100_USERV3)                       {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT100_USERV4)                       {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT100_USERV5)                       {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT100_USERV6)                       {DIMENSION="DIMENSIONLESS";}
     }

     if(LSD_MAT100_damageOpt == TRUE &&  LSD_MAT100_OPT == 3.0 || LSD_MAT100_OPT == 4.0 || LSD_MAT100_OPT == 5.0)
     {
        SCALAR(LSD_MAT100_ZD)                           {DIMENSION="l";}
        SCALAR(LSD_MAT100_ZT)                           {DIMENSION="l";}
     }
     if(LSD_MAT100_damageOpt == TRUE &&  LSD_MAT100_OPT == 3.0 || LSD_MAT100_OPT == 4.0)
     {
     
        SCALAR(LSD_MAT100_ZALP1)                        {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT100_ZALP2)                        {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT100_ZALP3)                        {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT100_ZRRAD)                        {DIMENSION="DIMENSIONLESS";}
     }
     if(LSD_MAT100_damageOpt == TRUE && LSD_MAT100_OPT == 5.0)
     {
        SCALAR(LSD_MAT100_ZT2)                          {DIMENSION="l";}
     }
     if(LSD_MAT100_damageOpt == TRUE)
     {
        SCALAR(LSD_MAT100_RS)                           {DIMENSION="DIMENSIONLESS";}
/*
        RADIO(LSD_MAT100_OPT)
        {
            ADD(-2.0, "-2.0: Failure criteria FC computed based on force and moment resultants");
            ADD(-1.0, "-1.0: Failure criteria FC computed based on force and moment resultants");
            ADD(0.0,  "0.0: Resultant based failure");
            ADD(1.0,  "1.0: Stress based failure computed from resultants");
            ADD(2.0,  "2.0: User subroutine uweldfail to determine failure");
            ADD(3.0,  "3.0: Notch stress based failure (beam and hex assembly welds only)");
            ADD(4.0,  "4.0: Stress intensity factor at failure (beam and hex assembly welds only)");
            ADD(5.0,  "5.0: Structural stress at failure (beam and hex assembly welds only)");
            ADD(6.0,  "6.0: Stress based failure computed from resultants");
            ADD(7.0,  "7.0: Stress based failure for solid elements ");
            ADD(9.0,  "9.0: Stress based failure from resultants");
            ADD(12.0, "12.0: User subroutine uweldfail12 with 22 material constants to determine damage and failure");
            ADD(14.0, "14.0");
        }
*/
        SCALAR(LSD_MATL100_FVAL)                        {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MATL100_TRUET)                       {DIMENSION="l";} 
        SCALAR(LSD_MAT100_ASFF);
        SCALAR(LSD_BETA)                                {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT100_DMGOPT);
       
     }
/*
    graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/SOLID,/COMPONENT/BRICK);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    if(IO_FLAG == 1)
    {
        HEADER("*MAT_100%21s",OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR != "_DAMAGE-FAILURE" || OPT_TYPE_STR != "_DAMAGE-FAILURE_TITLE"))
    {
         HEADER("*MAT_SPOTWELD%21s", OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "_DAMAGE-FAILURE" || OPT_TYPE_STR == "_DAMAGE-FAILURE_TITLE"))
    {
        ASSIGN(LSD_MAT100_damageOpt, 1, IMPORT);
    }
    if(IO_FLAG == 2 && LSD_MAT100_damageOpt == FALSE && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_SPOTWELD");
    }  
    else if(IO_FLAG == 2 && LSD_MAT100_damageOpt == FALSE && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_SPOTWELD_TITLE");
        CARD("%-80s", TITLE);
    } 
    else if(IO_FLAG == 2 && LSD_MAT100_damageOpt == TRUE && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_SPOTWELD_DAMAGE-FAILURE");
    }   
    else if(IO_FLAG == 2 && LSD_MAT100_damageOpt == TRUE && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_SPOTWELD_DAMAGE-FAILURE_TITLE");
        CARD("%-80s", TITLE);
    }

    COMMENT("$      MID        RO         E        PR      SIGY        EH        DT     TFAIL");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,LSD_MAT100_PR,SCALAR_OR_OBJECT(SigyAsCurve,LSD_MAT100_SIGY,SIGY_AsCurve),LSD_MAT100_ET,LSD_MAT100_DT,LSD_MAT100_TFAIL);

    if(LSD_MAT100_damageOpt == FALSE || (LSD_MAT100_damageOpt == TRUE && (LSD_MAT100_OPT == -1.0 || LSD_MAT100_OPT == 0.0)))
    {
        COMMENT("$    EFAIL       NRR       NRS       NRT       MRR       MSS       MTT        NF");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT100_EFAIL,SCALAR_OR_OBJECT(NRRFlag,LSD_MAT100_NRR,LSD_LCID2),SCALAR_OR_OBJECT(NRSFlag,LSD_MAT100_NRS,LSD_LCID),SCALAR_OR_OBJECT(NRTFlag,LSD_MAT100_NRT,LSD_NRTID),SCALAR_OR_OBJECT(MRRFlag,LSD_MAT100_MRR,LSD_MRRID),SCALAR_OR_OBJECT(MSSFlag,LSD_MAT100_MSS,LSD_MSSID),SCALAR_OR_OBJECT(MTTFlag,LSD_MAT100_MTT,LSD_MTTID),LSD_MAT100_NF);
    }
    if(LSD_MAT100_damageOpt == TRUE && LSD_MAT100_OPT == 1.0)
    {
        COMMENT("$    EFAIL     SIGAX    SIGTAU                                                NF");
        CARD("%10lg%10lg%10lg%10s%10s%10s%10s%10lg",LSD_MAT100_EFAIL,SCALAR_OR_OBJECT(LCAX_OPT,LSD_LCAX,LSD_MAT100_LCAX),SCALAR_OR_OBJECT(LCATU_OPT,LSD_LCTAU,LSD_MAT100_LCTAU),_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_MAT100_NF1);
    }

    if(LSD_MAT100_damageOpt == TRUE && (LSD_MAT100_OPT == 2.0 || LSD_MAT100_OPT == 12.0 || LSD_MAT100_OPT == 22.0))
    {
        COMMENT("$    EFAIL     USRV1     USRV2     USRV3     USRV4     USRV5     USRV6        NF");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT100_EFAIL,LSD_MAT100_USERV1,LSD_MAT100_USERV2,LSD_MAT100_USERV3,LSD_MAT100_USERV4,LSD_MAT100_USERV5,LSD_MAT100_USERV6,LSD_MAT100_NF);
    }
    if(LSD_MAT100_damageOpt == TRUE && (LSD_MAT100_OPT == 3.0 || LSD_MAT100_OPT == 4.0))
    {
        COMMENT("$    EFAIL        ZD        ZT     ZALP1     ZALP2     ZALP3     ZRRAD        NF");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT100_EFAIL,LSD_MAT100_ZD,LSD_MAT100_ZT,LSD_MAT100_ZALP1,LSD_MAT100_ZALP2,LSD_MAT100_ZALP3,LSD_MAT100_ZRRAD,LSD_MAT100_NF);    
    }
    if(LSD_MAT100_damageOpt == TRUE && LSD_MAT100_OPT == 5.0)
    {
        COMMENT("$    EFAIL         ZD         ZT        ZT2");
        CARD("%10lg%10lg%10lg%10lg",LSD_MAT100_EFAIL,LSD_MAT100_ZD,LSD_MAT100_ZT,LSD_MAT100_ZT2);    
    }
    if(LSD_MAT100_damageOpt == TRUE && (LSD_MAT100_OPT == 6.0 || LSD_MAT100_OPT == 7.0 || LSD_MAT100_OPT == 9.0 || LSD_MAT100_OPT == 10.0))
    {
        COMMENT("$    EFAIL                                                                    NF");
        CARD("%10lg%10s%10s%10s%10s%10s%10s%10lg",LSD_MAT100_EFAIL,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_MAT100_NF);    
    }
    if(LSD_MAT100_damageOpt == TRUE)
    {
        COMMENT("$       RS       OPT      FVAL    TRUE_T      ASFF      BETA              DMGOPT");
        CARD("%10lg%10lg%10lg%10lg%10d%10lg%10s%10lg",LSD_MAT100_RS,LSD_MAT100_OPT,LSD_MATL100_FVAL,LSD_MATL100_TRUET,LSD_MAT100_ASFF,LSD_BETA,_BLANK_,LSD_MAT100_DMGOPT);    
    }
}
