//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 119
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    LSD_MAT_K                               = VALUE(FLOAT,  "Translational stiffness for unloading option 2.0");
    IUR                                     = VALUE(FLOAT,  "Initial translational displacement along local r-axis");
    IUS                                     = VALUE(FLOAT,  "Initial translational displacement along local s-axis");
    IUT                                     = VALUE(FLOAT,  "Initial translational displacement along local t-axis");
    IWR                                     = VALUE(FLOAT,  "Initial rotational displacement about the local r-axis");
    IWS                                     = VALUE(FLOAT,  "Initial rotational displacement about the local s-axis");
    IWT                                     = VALUE(FLOAT,  "Initial rotational displacement about the local t-axis");
    LSDYNA_KCON                             = VALUE(FLOAT,  "Rotational stiffness for unloading option 2.0");
    LSD_LCID                                = VALUE(FUNCT,  "translational force resultant along local raxis vs relative translational displacement");
    LSD_LCID10                              = VALUE(FUNCT,  "rotational moment resultant about local raxis vs relative rotational displacement");
    LSD_LCID11                              = VALUE(FUNCT,  "rotational moment resultant about local saxis vs relative rotational displacement");
    LSD_LCID12                              = VALUE(FUNCT,  "rotational moment resultant about local taxis vs relative rotational displacement");
    LSD_LCID13                              = VALUE(FUNCT,  "translational damping force resultant along local r-axis vs relative translational velocity");
    LSD_LCID14                              = VALUE(FUNCT,  "translational damping force resultant along local s-axis vs relative translational velocity");
    LSD_LCID15                              = VALUE(FUNCT,  "translational damping force resultant along local t-axis vs relative translational velocity");
    LSD_LCID16                              = VALUE(FUNCT,  "rotational damping moment resultant about local r-axis vs relative rotational velocity");
    LSD_LCID17                              = VALUE(FUNCT,  "rotational damping moment resultant about local s-axis vs relative rotational velocity");
    LSD_LCID18                              = VALUE(FUNCT,  "rotational damping moment resultant about local t-axis vs relative rotational velocity");
    LSD_LCID19                              = VALUE(FUNCT,  "translational damping force scale factor vs relative displacement in local r-direction");
    LSD_LCID2                               = VALUE(FUNCT,  "translational force resultant along local saxis vs relative translational displacement");
    LSD_LCID20                              = VALUE(FUNCT,  "translational damping force scale factor vs relative displacement in local s-direction");
    LSD_LCID21                              = VALUE(FUNCT,  "translational damping force scale factor vs relative displacement in local t-direction");
    LSD_LCID22                              = VALUE(FUNCT,  "rotational damping moment resultant scale factor vs relative displacement in local r-rotation");
    LSD_LCID23                              = VALUE(FUNCT,  "rotational damping moment resultant scale factor vs relative displacement in local s-rotation");
    LSD_LCID24                              = VALUE(FUNCT,  "rotational damping moment resultant scale factor vs relative displacement in local t-rotation");
    LSD_LCID3                               = VALUE(FUNCT,  "translational force resultant along local taxis vs relative translational displacement");
    LSD_LCID4                               = VALUE(FUNCT,  "rotational moment resultant about local raxis vs relative rotational displacement");
    LSD_LCID5                               = VALUE(FUNCT,  "rotational moment resultant about local saxis vs relative rotational displacement");
    LSD_LCID6                               = VALUE(FUNCT,  "rotational moment resultant about local taxis vs relative rotational displacement");
    LSD_LCID7                               = VALUE(FUNCT,  "translational force resultant along local raxis vs relative translational displacement");
    LSD_LCID8                               = VALUE(FUNCT,  "translational force resultant along local saxis vs relative translational displacement");
    LSD_LCID9                               = VALUE(FUNCT,  "translational force resultant along local taxis vs relative translational displacement");
    LSD_MAT_DF                              = VALUE(FLOAT,  "Damping factor for stability");
    LSD_OFFSET                              = VALUE(FLOAT,  "Offset factor");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    LSD_iFlag                               = VALUE(INT,  "Flag between the displacement and linear strain");
    UCFAILR                                 = VALUE(FLOAT,  "translational displacement at failure in compression");
    UCFAILS                                 = VALUE(FLOAT,  "translational displacement at failure in compression");
    UCFAILT                                 = VALUE(FLOAT,  "translational displacement at failure in compression");
    UNLDOPT                                 = VALUE(INT,  "Unloading option");
    UTFAILR                                 = VALUE(FLOAT,  "translational displacement at failure in tension");
    UTFAILS                                 = VALUE(FLOAT,  "translational displacement at failure in tension");
    UTFAILT                                 = VALUE(FLOAT,  "translational displacement at failure in tension");
    WCFAILR                                 = VALUE(FLOAT,  "rotational displacement at failure in compression");
    WCFAILS                                 = VALUE(FLOAT,  "rotational displacement at failure in compression");
    WCFAILT                                 = VALUE(FLOAT,  "rotational displacement at failure in compression");
    WTFAILR                                 = VALUE(FLOAT,  "rotational displacement at failure in tension");
    WTFAILS                                 = VALUE(FLOAT,  "rotational displacement at failure in tension");
    WTFAILT                                 = VALUE(FLOAT,  "rotational displacement at failure in tension");

}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    IUR                                     = 4568;
    IUS                                     = 4569;
    IUT                                     = 4570;
    IWR                                     = 4571;
    IWS                                     = 4572;
    IWT                                     = 4573;
    LSDYNA_KCON                             = 260;
    LSD_LCID                                = 45;
    LSD_LCID10                              = 1142;
    LSD_LCID11                              = 1175;
    LSD_LCID12                              = 1176;
    LSD_LCID13                              = 1189;
    LSD_LCID14                              = 4602;
    LSD_LCID15                              = 4603;
    LSD_LCID16                              = 4604;
    LSD_LCID17                              = 4605;
    LSD_LCID18                              = 4606;
    LSD_LCID19                              = 4607;
    LSD_LCID2                               = 168;
    LSD_LCID20                              = 4608;
    LSD_LCID21                              = 4609;
    LSD_LCID22                              = 4610;
    LSD_LCID23                              = 4611;
    LSD_LCID24                              = 4612;
    LSD_LCID3                               = 170;
    LSD_LCID4                               = 171;
    LSD_LCID5                               = 172;
    LSD_LCID6                               = 199;
    LSD_LCID7                               = 200;
    LSD_LCID8                               = 224;
    LSD_LCID9                               = 1141;
    LSD_MAT_DF                              = 353;
    LSD_MAT_K                               = 1131;
    LSD_OFFSET                              = 716;
    LSD_TitleOpt                            = 90;
    LSD_iFlag                               = 4869;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    UCFAILR                                 = 4596;
    UCFAILS                                 = 4597;
    UCFAILT                                 = 4598;
    UNLDOPT                                 = 4566;
    UTFAILR                                 = 4590;
    UTFAILS                                 = 4591;
    UTFAILT                                 = 4592;
    WCFAILR                                 = 4599;
    WCFAILS                                 = 4600;
    WCFAILT                                 = 4601;
    WTFAILR                                 = 4593;
    WTFAILS                                 = 4594;
    WTFAILT                                 = 4595;

}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  TRANSLATIONAL_STIFFNESS=SCALAR(LSD_MAT_K);
  ROTATIONAL_STIFFNESS=SCALAR(LSDYNA_KCON);
  OFFSET_FACTOR=SCALAR(LSD_OFFSET);
  DAMPING_FACTOR_FOR_STABILITY=SCALAR(LSD_MAT_DF);
  ELASTIC_STIFFNESS = MAX(TRANSLATIONAL_STIFFNESS,ROTATIONAL_STIFFNESS);
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_GENERAL_NONLINEAR_6DOF_DISCRETE_BEAM");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:     
     SCALAR(Rho)                            {DIMENSION="density";}
 optional:    
     SCALAR(LSD_MAT_K)                      {DIMENSION="pressure";}
     SCALAR(LSDYNA_KCON)                    {DIMENSION="pressure";}
     RADIO(UNLDOPT)
     {
        ADD(0, "0.0: Loading and unloading follow loading curve");
        ADD(1, "1.0: Loading follows loading curve, unloading follows unloading curve");
        ADD(2, "2.0: Loading follows loading curve, unloading follows unloading stiffness, KT or KR, to the unloading curve");
        ADD(3, "3.0: Quadratic unloading from peak displacement value to permanent offset");
     }
     SCALAR(LSD_OFFSET)                     {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_DF)                     {DIMENSION="DIMENSIONLESS";}
     RADIO(LSD_iFlag)
     {
        ADD(0, "0: Displacement formulation");
        ADD(1, "1: Linear strain formulation");
     }
     
     DATA(LSD_LCID);
     DATA(LSD_LCID2);
     DATA(LSD_LCID3);
     DATA(LSD_LCID4);
     DATA(LSD_LCID5);
     DATA(LSD_LCID6);
     DATA(LSD_LCID7);
     DATA(LSD_LCID8);
     DATA(LSD_LCID9);
     DATA(LSD_LCID10);
     DATA(LSD_LCID11);
     DATA(LSD_LCID12);
     DATA(LSD_LCID13);
     DATA(LSD_LCID14);
     DATA(LSD_LCID15);
     DATA(LSD_LCID16);
     DATA(LSD_LCID17);
     DATA(LSD_LCID18);
     DATA(LSD_LCID19);
     DATA(LSD_LCID20);
     DATA(LSD_LCID21);
     DATA(LSD_LCID22);
     DATA(LSD_LCID23);
     DATA(LSD_LCID24);     
     SCALAR(UTFAILR)                            {DIMENSION="l";}
     SCALAR(UTFAILS)                            {DIMENSION="l";}
     SCALAR(UTFAILT)                            {DIMENSION="l";}
     SCALAR(WTFAILR)                            {DIMENSION="l";}
     SCALAR(WTFAILS)                            {DIMENSION="l";}
     SCALAR(WTFAILT)                            {DIMENSION="l";}
     SCALAR(UCFAILR)                            {DIMENSION="l";}
     SCALAR(UCFAILS)                            {DIMENSION="l";}
     SCALAR(UCFAILT)                            {DIMENSION="l";}
     SCALAR(WCFAILR)                            {DIMENSION="l";}
     SCALAR(WCFAILS)                            {DIMENSION="l";}
     SCALAR(WCFAILT)                            {DIMENSION="l";}
     SCALAR(IUR)                                {DIMENSION="l";}
     SCALAR(IUS)                                {DIMENSION="l";}
     SCALAR(IUT)                                {DIMENSION="l";}
     SCALAR(IWR)                                {DIMENSION="l";}
     SCALAR(IWS)                                {DIMENSION="l";}
     SCALAR(IWT)                                {DIMENSION="l";}
/*
    graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/BEAM,/COMPONENT/SPRING,/COMPONENT/TRUSS,/COMPONENT/RIVET,/COMPONENT/SHELL,/COMPONENT/PENTA6,/COMPONENT/SHEL16);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    //
    COMMENT("$      MID       RHO        KT        KR   UNLDOPT    OFFSET     DAMPF     IFLAG");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10d",_ID_,Rho,LSD_MAT_K,LSDYNA_KCON,UNLDOPT,LSD_OFFSET,LSD_MAT_DF,LSD_iFlag);
    //
    COMMENT("$   LCIDTR    LCIDTS    LCIDTT    LCIDRR    LCIDRS    LCIDRT");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_LCID,LSD_LCID2,LSD_LCID3,LSD_LCID4,LSD_LCID5,LSD_LCID6);
    //
    COMMENT("$  LCIDTUR   LCIDTUS   LCIDTUT   LCIDRUR   LCIDRUS   LCIDRUT");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_LCID7,LSD_LCID8,LSD_LCID9,LSD_LCID10,LSD_LCID11,LSD_LCID12);
    //
    COMMENT("$  LCIDTDR   LCIDTDS   LCIDTDT   LCIDRDR   LCIDRDS   LCIDRDT");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_LCID13,LSD_LCID14,LSD_LCID15,LSD_LCID16,LSD_LCID17,LSD_LCID18);
    //
    COMMENT("$  LCIDTER   LCIDTES   LCIDTET   LCIDRER   LCIDRES   LCIDRET");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_LCID19,LSD_LCID20,LSD_LCID21,LSD_LCID22,LSD_LCID23,LSD_LCID24);
    //
    COMMENT("$  UTFAILR   UTFAILS   UTFAILT   WTFAILR   WTFAILS   WTFAILT");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",UTFAILR,UTFAILS,UTFAILT,WTFAILR,WTFAILS,WTFAILT);
    //
    COMMENT("$  UCFAILR   UCFAILS   UCFAILT   WCFAILR   WCFAILS   WCFAILT");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",UCFAILR,UCFAILS,UCFAILT,WCFAILR,WCFAILS,WCFAILT);
    //
    COMMENT("$      IUR       IUS       IUT       IWR       IWS       IWT");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",IUR,IUS,IUT,IWR,IWS,IWT);
    //

}
