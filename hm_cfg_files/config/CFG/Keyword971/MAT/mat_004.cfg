//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 004 (ELASTIC_PLASTIC_THERMAL) Setup File
// 

ATTRIBUTES(COMMON)
{
    KEYWORD_STR       = VALUE(STRING, "Solver Keyword");
    CommentEnumField  = VALUE(INT, "User Comments");
    Num_Comments      = SIZE("No. of comment lines");
    Comments          = ARRAY[Num_Comments](STRING, "Entity Comments");
    LSD_TitleOpt      = VALUE(INT, "Title");
    NB_PARTS          = SIZE("Number of connected parts"); 
    COMPONENT         = ARRAY[NB_PARTS](COMPONENT,"Connected parts");
    ArrayCount        =  SIZE("Array count");
    Rho               = VALUE(FLOAT, " Mass density ");
    T_VECT            =ARRAY[ArrayCount](FLOAT, "T");
    E_VECT            =ARRAY[ArrayCount](FLOAT, "E");
    PR_VECT           =ARRAY[ArrayCount](FLOAT, "PR");
    ALPHA_VECT        =ARRAY[ArrayCount](FLOAT, "ALPHA");
    SIGY_VECT         =ARRAY[ArrayCount](FLOAT, "SIGY");
    ETAN_VECT         =ARRAY[ArrayCount](FLOAT, "ETAN");
    IO_FLAG           = VALUE(INT, "IO");
    LOCAL_T1          = VALUE(STRING, "LOCAL T1");
    LOCAL_T2          = VALUE(STRING, "LOCAL T2");
    LOCAL_T3          = VALUE(STRING, "LOCAL T3");
    LOCAL_T4          = VALUE(STRING, "LOCAL T4");
    LOCAL_T5          = VALUE(STRING, "LOCAL T5");
    LOCAL_T6          = VALUE(STRING, "LOCAL T6");
    LOCAL_T7          = VALUE(STRING, "LOCAL T7");
    LOCAL_T8          = VALUE(STRING, "LOCAL T8");
}

DEFAULTS(COMMON)
{
    T_VECT      = 0.0;
    E_VECT      = 0.0;
    PR_VECT     = 0.0;
    ALPHA_VECT  = 0.0;
    SIGY_VECT   = 0.0;
    ETAN_VECT   = 0.0;
    ArrayCount  = 0;
}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY    = SCALAR(Rho);
    YOUNG_MODULUS   = MAX(E_VECT);
    POISSON_RATIO   = MAX(PR_VECT);
public:
    //SOUND_SPEED is speed for ISDO = 0 and 1
    SOUND_SPEED             = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
    SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    LSD_TitleOpt      = 90;
    Rho               = 118;
    ArrayCount        = 2246;
    KEYWORD_STR       = 9000;
    T_VECT            = 4294;
    E_VECT            = 4295;
    PR_VECT           = 4296;
    ALPHA_VECT        = 4297;
    SIGY_VECT         = 4298;
    ETAN_VECT         = 4299;
    CommentEnumField  = 3220;
    Num_Comments      = 3101;
    Comments          = 3100;
    IO_FLAG           = -1;
    LOCAL_T1          = -1;
    LOCAL_T2          = -1;
    LOCAL_T3          = -1;
    LOCAL_T4          = -1;
    LOCAL_T5          = -1;
    LOCAL_T6          = -1;
    LOCAL_T7          = -1;
    LOCAL_T8          = -1;
}


GUI(COMMON) {

    ASSIGN(KEYWORD_STR, "*MAT_ELASTIC_PLASTIC_THERMAL");

    RADIO(CommentEnumField)
    {
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    }

    if(CommentEnumField == 2)
    {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
            SCALAR(Comments);
        }
    }

    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    } 

mandatory:
    SCALAR(Rho)                               { DIMENSION="density";          }

optional:

    SIZE_RADIO(ArrayCount)
    {
        //      TITLE       = MY_NEW_TITLE; 
        //      ORIENTATION = MY_NEW_ORIENTATION; 
        //      DO_PREFIX_VALUE = TRUE;

        ADD(0, "<OFF>     ");
        ADD(2, "2         ");
        ADD(3, "3         ");
        ADD(4, "4         ");
        ADD(5, "5         ");
        ADD(6, "6         ");
        ADD(7, "7         ");
        ADD(8, "8         ");
    }

    ARRAY(ArrayCount,"")
    {
        SCALAR(T_VECT)                     { DIMENSION="k";          }
        SCALAR(E_VECT)                     { DIMENSION="pressure";          }
        SCALAR(PR_VECT)                    { DIMENSION="DIMENSIONLESS";          }
        SCALAR(ALPHA_VECT)                 { DIMENSION="DIMENSIONLESS";          }
        SCALAR(SIGY_VECT)                  { DIMENSION="pressure";          }
        SCALAR(ETAN_VECT)                  { DIMENSION="pressure";          }
    }
    /*
    graphical SUPPORT("Part(s) to which material is applied") {
    OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/BEAM,/COMPONENT/SPRING,/COMPONENT/TRUSS,/COMPONENT/RIVET,/COMPONENT/SHELL,/COMPONENT/PENTA6,/COMPONENT/SHEL16,/COMPONENT/TSHELL);
    ADD(COMPONENT,"Parts");
    }
    */
}

// File format
FORMAT(Keyword971) {

    //
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    //    
    COMMENT("$      MID       RHO");
    CARD("%10d%10lg",_ID_,Rho);

    CARD_PREREAD("%10s%10s%10s%10s%10s%10s%10s%10s",LOCAL_T1 ,LOCAL_T2 ,LOCAL_T3 ,LOCAL_T4 ,LOCAL_T5 ,LOCAL_T6 ,LOCAL_T7 ,LOCAL_T8);
    if(IO_FLAG == 1 && LOCAL_T8 != "")
    {
        ASSIGN(ArrayCount, 8,IMPORT);
    }
    else if(IO_FLAG == 1 && LOCAL_T7 != "")
    {
        ASSIGN(ArrayCount, 7,IMPORT);
    }  
    else if(IO_FLAG == 1 && LOCAL_T6 != "")
    {
        ASSIGN(ArrayCount, 6,IMPORT);
    }  
    else if(IO_FLAG == 1 && LOCAL_T5 != "")
    {
        ASSIGN(ArrayCount, 5,IMPORT);
    }  
    else if(IO_FLAG == 1 && LOCAL_T4 != "")
    {
        ASSIGN(ArrayCount, 4,IMPORT);
    }  
    else if(IO_FLAG == 1 && LOCAL_T3 != "")
    {
        ASSIGN(ArrayCount, 3,IMPORT);
    }  
    else if(IO_FLAG == 1 && (LOCAL_T2 != "" || LOCAL_T1 != ""))
    {
        ASSIGN(ArrayCount, 2,IMPORT);
    }  
    else if(IO_FLAG == 1 && LOCAL_T2 == "" && LOCAL_T1 == "")
    {
        ASSIGN(ArrayCount, 0,IMPORT);
    }
    if(ArrayCount > 0)
    {

        COMMENT("$       T1        T2        T3        T4        T5        T6        T7        T8");
        CELL_LIST(ArrayCount,"%10lg",T_VECT);

        COMMENT("$       E1        E2        E3        E4        E5        E6        E7        E8");
        CELL_LIST(ArrayCount,"%10lg",E_VECT);

        COMMENT("$      PR1       PR2       PR3       PR4       PR5       PR6       PR7       PR8");
        CELL_LIST(ArrayCount,"%10lg",PR_VECT);

        COMMENT("$   ALPHA1    ALPHA2    ALPHA3    ALPHA4    ALPHA5    ALPHA6    ALPHA7    ALPHA8");
        CELL_LIST(ArrayCount,"%10lg",ALPHA_VECT);

        COMMENT("$    SIGY1     SIGY2     SIGY3     SIGY4     SIGY5     SIGY6     SIGY7     SIGY8");
        CELL_LIST(ArrayCount,"%10lg",SIGY_VECT);

        COMMENT("$    ETAN1     ETAN2     ETAN3     ETAN4     ETAN5     ETAN6     ETAN7     ETAN8");
        CELL_LIST(ArrayCount,"%10lg",ETAN_VECT);
    }
    else
    {
        BLANK;
        BLANK;
        BLANK;
        BLANK;
        BLANK;
        BLANK;
    }
}

