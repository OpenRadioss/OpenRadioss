//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 161_162
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    LSDYNA_A1                               = VALUE(FLOAT,  "A1");
    LSDYNA_A2                               = VALUE(FLOAT,  "A2");
    LSDYNA_A3                               = VALUE(FLOAT,  "A3");
    LSDYNA_BETA                             = VALUE(FLOAT,  "BETA");
    LSDYNA_D1                               = VALUE(FLOAT,  "D1");
    LSDYNA_D2                               = VALUE(FLOAT,  "D2");
    LSDYNA_D3                               = VALUE(FLOAT,  "D3");
    LSDYNA_EA                               = VALUE(FLOAT,  "EA");
    LSDYNA_EB                               = VALUE(FLOAT,  "EB");
    LSDYNA_EC                               = VALUE(FLOAT,  "EC");
    LSDYNA_GAB                              = VALUE(FLOAT,  "GAB");
    LSDYNA_GBC                              = VALUE(FLOAT,  "GBC");
    LSDYNA_GCA                              = VALUE(FLOAT,  "GCA");
    LSDYNA_PRBA                             = VALUE(FLOAT,  "PRBA");
    LSDYNA_PRCA                             = VALUE(FLOAT,  "PRCA");
    LSDYNA_PRCB                             = VALUE(FLOAT,  "PRCB");
    LSDYNA_V1                               = VALUE(FLOAT,  "V1");
    LSDYNA_V2                               = VALUE(FLOAT,  "V2");
    LSDYNA_V3                               = VALUE(FLOAT,  "V3");
    LSDYNA_XP                               = VALUE(FLOAT,  "XP");
    LSDYNA_YP                               = VALUE(FLOAT,  "YP");
    LSDYNA_ZP                               = VALUE(FLOAT,  "ZP");
    LSD_MAT161_AM1                          = VALUE(FLOAT,  "AM1");
    LSD_MAT161_AM2                          = VALUE(FLOAT,  "AM2");
    LSD_MAT161_AM3                          = VALUE(FLOAT,  "AM3");
    LSD_MAT161_AM4                          = VALUE(FLOAT,  "AM4");
    LSD_MAT161_AMODEL                       = VALUE(FLOAT,  "AMODEL");
    LSD_MAT161_CERATE1                      = VALUE(FLOAT,  "CERATE1");
    LSD_MAT161_CERATE2                      = VALUE(FLOAT,  "CERATE2");
    LSD_MAT161_CERATE3                      = VALUE(FLOAT,  "CERATE3");
    LSD_MAT161_CERATE4                      = VALUE(FLOAT,  "CERATE4");
    LSD_MAT161_ECRSH                        = VALUE(FLOAT,  "ECRSH");
    LSD_MAT161_EEXPN                        = VALUE(FLOAT,  "EEXPN");
    LSD_MAT161_E_LIMT                       = VALUE(FLOAT,  "E_LIMT");
    LSD_MAT161_OMGMX                        = VALUE(FLOAT,  "OMGMX");
    LSD_MAT161_PHIC                         = VALUE(FLOAT,  "PHIC");
    LSD_MAT161_SAB                          = VALUE(FLOAT,  "SAB");
    LSD_MAT161_SAC                          = VALUE(FLOAT,  "SAC");
    LSD_MAT161_SAT                          = VALUE(FLOAT,  "SAT");
    LSD_MAT161_SBC                          = VALUE(FLOAT,  "SBC");
    LSD_MAT161_SBC1                         = VALUE(FLOAT,  "SBC");
    LSD_MAT161_SBT                          = VALUE(FLOAT,  "SBT");
    LSD_MAT161_SCA                          = VALUE(FLOAT,  "SCA");
    LSD_MAT161_SCT                          = VALUE(FLOAT,  "SCT");
    LSD_MAT161_SFC                          = VALUE(FLOAT,  "SFC");
    LSD_MAT161_SFFC                         = VALUE(FLOAT,  "SFFC");
    LSD_MAT161_SFS                          = VALUE(FLOAT,  "SFS");
    LSD_MAT161_S_DELM                       = VALUE(FLOAT,  "S_DELM");
    LSD_MAT_USER_DEF_MACF                   = VALUE(INT,  "MACF");
    LSD_NODE1                               = VALUE(NODE,  "Node");
    LSD_NODE3                               = VALUE(NODE,  "Node1");
    LSD_NODE4                               = VALUE(NODE,  "Node2");
    LSD_NODE5                               = VALUE(NODE,  "Node1");
    LSD_NODE6                               = VALUE(NODE,  "Node2");
    LSD_NODE7                               = VALUE(NODE,  "Node1");
    LSD_NODE8                               = VALUE(NODE,  "Node2");
    LSD_SYSTEM                              = VALUE(SYSTEM,  "AOPT");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    MatlOption                              = VALUE(INT,  "Options");
    Rho                                     = VALUE(FLOAT,  "Rho");
    axisOptFlag                             = VALUE(INT,  "Anisotropy axis definition");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    LOC_AOPT                                = VALUE(FLOAT, "");
    IO_FLAG                                 = VALUE(INT, "io flag");
    OPT_TYPE_STR                            = VALUE(STRING, "OPT");
    TITLE                                   = VALUE(STRING, "");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
    _HAS_HEADER                             = VALUE(BOOL,"Has Header Card");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    LSDYNA_A1                               = 139;
    LSDYNA_A2                               = 140;
    LSDYNA_A3                               = 141;
    LSDYNA_BETA                             = 148;
    LSDYNA_D1                               = 145;
    LSDYNA_D2                               = 146;
    LSDYNA_D3                               = 147;
    LSDYNA_EA                               = 126;
    LSDYNA_EB                               = 127;
    LSDYNA_EC                               = 128;
    LSDYNA_GAB                              = 132;
    LSDYNA_GBC                              = 133;
    LSDYNA_GCA                              = 134;
    LSDYNA_PRBA                             = 129;
    LSDYNA_PRCA                             = 130;
    LSDYNA_PRCB                             = 131;
    LSDYNA_V1                               = 142;
    LSDYNA_V2                               = 143;
    LSDYNA_V3                               = 144;
    LSDYNA_XP                               = 136;
    LSDYNA_YP                               = 137;
    LSDYNA_ZP                               = 138;
    LSD_MAT161_AM1                          = 6172;
    LSD_MAT161_AM2                          = 6173;
    LSD_MAT161_AM3                          = 6174;
    LSD_MAT161_AM4                          = 6175;
    LSD_MAT161_AMODEL                       = 6164;
    LSD_MAT161_CERATE1                      = 6171;
    LSD_MAT161_CERATE2                      = 6176;
    LSD_MAT161_CERATE3                      = 6177;
    LSD_MAT161_CERATE4                      = 6178;
    LSD_MAT161_ECRSH                        = 6169;
    LSD_MAT161_EEXPN                        = 6170;
    LSD_MAT161_E_LIMT                       = 6166;
    LSD_MAT161_OMGMX                        = 6168;
    LSD_MAT161_PHIC                         = 6165;
    LSD_MAT161_SAB                          = 6160;
    LSD_MAT161_SAC                          = 6154;
    LSD_MAT161_SAT                          = 6179;
    LSD_MAT161_SBC                          = 6156;
    LSD_MAT161_SBC1                         = 6161;
    LSD_MAT161_SBT                          = 6155;
    LSD_MAT161_SCA                          = 6162;
    LSD_MAT161_SCT                          = 6157;
    LSD_MAT161_SFC                          = 6158;
    LSD_MAT161_SFFC                         = 6163;
    LSD_MAT161_SFS                          = 6159;
    LSD_MAT161_S_DELM                       = 6167;
    LSD_MAT_USER_DEF_MACF                   = 1296;
    LSD_NODE1                               = 86;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_NODE7                               = 5080;
    LSD_NODE8                               = 5081;
    LSD_SYSTEM                              = 184;
    LSD_TitleOpt                            = 90;
    MatlOption                              = 104;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    axisOptFlag                             = 4946;
    AOPT_SKEW_FLAG                          = -1;
    LOC_AOPT                                = -1;
    IO_FLAG                                 = -1;
    OPT_TYPE_STR                            = -1;
    TITLE                                   = -1;
    //empty_string                       = -1;
    _HAS_HEADER                             = -1;
}

DEFAULTS(COMMON)
{
    _HAS_HEADER     = TRUE;
    LSD_MAT_USER_DEF_MACF    = 1;
}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  YOUNG_MODULUS_LONGITUDINAL_DIRECTION=SCALAR(LSDYNA_EA);
  YOUNG_MODULUS_TRANSVERSE_DIRECTION=SCALAR(LSDYNA_EB);
  YOUNG_MODULUS_THICKNESS_DIRECTION=SCALAR(LSDYNA_EC);
  POISSON_RATIO_BA=SCALAR(LSDYNA_PRBA);
  POISSON_RATIO_CA=SCALAR(LSDYNA_PRCA);
  POISSON_RATIO_CB=SCALAR(LSDYNA_PRCB);
  SHEAR_MODULUS_AB=SCALAR(LSDYNA_GAB);
  SHEAR_MODULUS_BC=SCALAR(LSDYNA_GBC);
  SHEAR_MODULUS_CA=SCALAR(LSDYNA_GCA);
  MATERIAL_AXES_OPTION=SCALAR(axisOptFlag);
  LAYER_IN_PLANE_ROTATIONAL_ANGLE=SCALAR(LSDYNA_BETA);
  LONGITUDINAL_TENSILE_STRENGTH=SCALAR(LSD_MAT161_SAT);
  LONGITUDINAL_COMPRESSIVE_STRENGTH=SCALAR(LSD_MAT161_SAC);
  TRANSVERSE_TENSILE_STRENGTH=SCALAR(LSD_MAT161_SBT);
  TRANSVERSE_COMPRESSIVE_STRENGTH=SCALAR(LSD_MAT161_SBC);
  THROUGH_THICKNESS_TENSILE_STRENGTH=SCALAR(LSD_MAT161_SCT);
  CRUSH_STRENGTH=SCALAR(LSD_MAT161_SFC);
  FIBER_MODE_SHEAR_STRENGTH=SCALAR(LSD_MAT161_SFS);
  SCALE_FACTOR=SCALAR(LSD_MAT161_SFFC);
  MATERIAL_MODELS=SCALAR(LSD_MAT161_AMODEL);
  COULOMB_FRICTION_ANGLE=SCALAR(LSD_MAT161_PHIC);
  ELEMENT_ERODING_AXIAL_STRAIN=SCALAR(LSD_MAT161_E_LIMT);
  SCALE_FACTOR_FOR_DELAMINATION_CRITERION=SCALAR(LSD_MAT161_S_DELM);
  LIMIT_DAMAGE_PARAMETER=SCALAR(LSD_MAT161_OMGMX);
  LIMIT_COMPRESSIVE_VOLUME_STRAIN=SCALAR(LSD_MAT161_ECRSH);
  LIMIT_TENSILE_VOLUME_STRAIN=SCALAR(LSD_MAT161_EEXPN);
  CERATE1=SCALAR(LSD_MAT161_CERATE1);
  AM1=SCALAR(LSD_MAT161_AM1);
  AM2=SCALAR(LSD_MAT161_AM2);
  AM3=SCALAR(LSD_MAT161_AM3);
  AM4=SCALAR(LSD_MAT161_AM4);
  CERATE2=SCALAR(LSD_MAT161_CERATE2);
  CERATE3=SCALAR(LSD_MAT161_CERATE3);
  CERATE4=SCALAR(LSD_MAT161_CERATE4);
  YOUNG_MODULUS = MAX(YOUNG_MODULUS_LONGITUDINAL_DIRECTION,YOUNG_MODULUS_TRANSVERSE_DIRECTION,YOUNG_MODULUS_THICKNESS_DIRECTION);
  POISSON_RATIO = MAX(POISSON_RATIO_BA,POISSON_RATIO_CA,POISSON_RATIO_CB);
  SHEAR_MODULUS = MAX(SHEAR_MODULUS_AB,SHEAR_MODULUS_BC,SHEAR_MODULUS_CA);

     //SOUND_SPEED is speed for ISDO = 0 and 1
      SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
      SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
      C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
      SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_COMPOSITE_MSC");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     RADIO(MatlOption)
     {
        ADD(1, "None");
        ADD(2, "DMG");
     }
     if(MatlOption == 2)
     {
        ASSIGN(KEYWORD_STR, "_DMG");
     }
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                        {DIMENSION="density";}
 optional:
     SCALAR(LSDYNA_EA)                  {DIMENSION="pressure";}
     SCALAR(LSDYNA_EB)                  {DIMENSION="pressure";}
     SCALAR(LSDYNA_EC)                  {DIMENSION="pressure";}
     SCALAR(LSDYNA_PRBA)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_PRCA)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_PRCB)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_GAB)                 {DIMENSION="pressure";}
     SCALAR(LSDYNA_GBC)                 {DIMENSION="pressure";}
     SCALAR(LSDYNA_GCA)                 {DIMENSION="pressure";}
     RADIO(axisOptFlag)
     {
        ADD(1, "0.0: Locally orthotropic: axis given by nodes 1,2 and 4");
        ADD(2, "1.0: Locally orthotropic: a-dir given by a point and global location of element center");
        ADD(3, "2.0: Globally orthotropic: axis given by vectors");
        ADD(4, "3.0: Locally orthotropic: axis given by rotating the material axes by an angle BETA");
        ADD(5, "4.0: Locally orhtotropic: cylindrical coordinate given by vector v and point P");
        ADD(6, "By System");
     }
     if(axisOptFlag == 6)
     {
        DATA(LSD_SYSTEM);
     }
     RADIO(LSD_MAT_USER_DEF_MACF)
     {
        ADD(1, "1: No Change");
        ADD(2, "2: Switch material axes a and b");
        ADD(3, "3: Switch material axes a and c");
        ADD(4, "4: Switch material axes b and c");
     }
     if(axisOptFlag == 2 || axisOptFlag == 5)
     {
        DATA(LSD_NODE1);
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],FALSE);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],FALSE);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],FALSE);

     }
     if(axisOptFlag == 3)
     {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],FALSE);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],FALSE);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],FALSE);

        DATA(LSD_NODE7);                
        DATA(LSD_NODE8);   
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],FALSE);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],FALSE);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],FALSE);             


     }
     if(axisOptFlag == 4 || axisOptFlag == 5)
     {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],FALSE);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],FALSE);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],FALSE);

     }
     SCALAR(LSDYNA_BETA)                {DIMENSION="a";}
     SCALAR(LSD_MAT161_SAT)             {DIMENSION="pressure";}
     SCALAR(LSD_MAT161_SAC)             {DIMENSION="pressure";}
     SCALAR(LSD_MAT161_SBT)             {DIMENSION="pressure";}
     SCALAR(LSD_MAT161_SBC)             {DIMENSION="pressure";}
     SCALAR(LSD_MAT161_SCT)             {DIMENSION="pressure";}
     SCALAR(LSD_MAT161_SFC)             {DIMENSION="pressure";}
     SCALAR(LSD_MAT161_SFS)             {DIMENSION="pressure";}
     SCALAR(LSD_MAT161_SAB)             {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT161_SBC1)            {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT161_SCA)             {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT161_SFFC)            {DIMENSION="DIMENSIONLESS";}
     RADIO(LSD_MAT161_AMODEL)           
     {
        ADD(1.0, "1.0: Unidirectional layer model");
        ADD(2.0, "2.0: Fabric layer model");
        
     }
     SCALAR(LSD_MAT161_PHIC)            {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT161_E_LIMT)          {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT161_S_DELM)          {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT161_OMGMX)           {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT161_ECRSH)           {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT161_EEXPN)           {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT161_CERATE1)         {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT161_AM1)             {DIMENSION="DIMENSIONLESS";}
     if(MatlOption == 1)
     {
        SCALAR(LSD_MAT161_AM2)          {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT161_AM3)          {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT161_AM4)          {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT161_CERATE2)      {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT161_CERATE3)      {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT161_CERATE4)      {DIMENSION="DIMENSIONLESS";}
    }
/*
    graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);

    //
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE8 != NONE && LSD_NODE7 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    //
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 5 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,4.0,EXPORT);
    }

    if(IO_FLAG == 1)
    {
         HEADER("*MAT%10s", OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "_161" || OPT_TYPE_STR == "_161_TITLE"))
    {
         ASSIGN(MatlOption, 1);
    }
    else if(IO_FLAG == 1 && (OPT_TYPE_STR == "_162" || OPT_TYPE_STR == "_162_TITLE"))
    {
         ASSIGN(MatlOption, 2);
    }
    else if(IO_FLAG == 1)
    {
        HEADER("*MAT_COMPOSITE%14s", OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "_MSC" || OPT_TYPE_STR == "_MSC_TITLE"))
    {
         ASSIGN(MatlOption, 1);
    }
    else if(IO_FLAG == 1 && (OPT_TYPE_STR == "_DMG_MSC" || OPT_TYPE_STR == "_DMG_MSC_TITLE" || OPT_TYPE_STR == "_MSC_DMG" || OPT_TYPE_STR == "_MSC_DMG_TITLE"))
    {
        ASSIGN(MatlOption, 2);
    }
    if(IO_FLAG == 2 && MatlOption == 1 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_COMPOSITE_MSC");
    }   
    else if(IO_FLAG == 2 && MatlOption == 1 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_COMPOSITE_MSC_TITLE");
        CARD("%-80s", TITLE);
    }
    else if(IO_FLAG == 2 && MatlOption == 2 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_COMPOSITE_MSC_DMG");
    }   
    else if(IO_FLAG == 2 && MatlOption == 2 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_COMPOSITE_MSC_DMG_TITLE");
        CARD("%-80s", TITLE);
    } 
    //
    COMMENT("$      MID       RHO        EA        EB        EC      PRBA      PRCA      PRCB");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSDYNA_EA,LSDYNA_EB,LSDYNA_EC,LSDYNA_PRBA,LSDYNA_PRCA,LSDYNA_PRCB);
    //
    COMMENT("$      GAB       GBC       GCA      AOPT      MACF");
    
    if(IO_FLAG == 2)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 6)
        {
            CARD("%10lg%10lg%10lg%10lg%10d",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,LOC_AOPT,LSD_MAT_USER_DEF_MACF);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10lg%10d",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,LOC_AOPT,LSD_SYSTEM),LSD_MAT_USER_DEF_MACF); 
        }
    }
    CARD_PREREAD("%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,4,IMPORT);
    }
    else if(LOC_AOPT == 4.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,5,IMPORT);
    }

    if(IO_FLAG == 1)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 6)
        {
            CARD("%10lg%10lg%10lg%10d%10d",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,LOC_AOPT,LSD_MAT_USER_DEF_MACF);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10lg%10d",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM),LSD_MAT_USER_DEF_MACF); 
            ASSIGN(axisOptFlag, 6, IMPORT);
        }
    }
    //
    COMMENT("$       XP        YP        ZP        A1        A2        A3");
    if(axisOptFlag == 2 || axisOptFlag == 5)
    {
        CARD("%10lg%10lg%10lg",LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP);
    }
    else if(axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg%10s%10s",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3,_BLANK_,_BLANK_);
    }
    else
    {
        BLANK;
    }
    //
    COMMENT("$       V1        V2        V3        D1        D2        D3      BETA");
    if(axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3,LSDYNA_BETA);
    }
    else if(axisOptFlag == 4 || axisOptFlag == 5)
    {
        CARD("%10lg%10lg%10lg%10s%10s%10s%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,LSDYNA_BETA);
    }
    else
    {
        CARD("%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSDYNA_BETA);
    }
    //
    COMMENT("$      SAT       SAC       SBT       SBC       SCT       SFC       SFS       SAB");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT161_SAT,LSD_MAT161_SAC,LSD_MAT161_SBT,LSD_MAT161_SBC,LSD_MAT161_SCT,LSD_MAT161_SFC,LSD_MAT161_SFS,LSD_MAT161_SAB);
    //
    COMMENT("$      SBC       SCA      SFFC    AMODEL      PHIC    E_LIMT    S_DELM");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10s",LSD_MAT161_SBC1,LSD_MAT161_SCA,LSD_MAT161_SFFC,LSD_MAT161_AMODEL,LSD_MAT161_PHIC,LSD_MAT161_E_LIMT,LSD_MAT161_S_DELM,_BLANK_);
    //
    COMMENT("$    OMGMX     ECRSH     EEXPN   CERATE1       AM1");
    CARD("%10lg%10lg%10lg%10lg%10lg%10s%10s%10s",LSD_MAT161_OMGMX,LSD_MAT161_ECRSH,LSD_MAT161_EEXPN,LSD_MAT161_CERATE1,LSD_MAT161_AM1,_BLANK_,_BLANK_,_BLANK_);
    //
    if(MatlOption == 2)
    {
        COMMENT("$      AM2       AM3       AM4   CERATE2   CERATE3   CERATE4");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10s%10s", LSD_MAT161_AM2,LSD_MAT161_AM3,LSD_MAT161_AM4,LSD_MAT161_CERATE2,LSD_MAT161_CERATE3,LSD_MAT161_CERATE4,_BLANK_,_BLANK_);
    }
    
}