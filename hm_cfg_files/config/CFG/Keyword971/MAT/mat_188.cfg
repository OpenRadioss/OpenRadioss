//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 188
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    E                                       = VALUE(FLOAT,  "Youngs modulus");
    LSDYNA_C                                = VALUE(FLOAT,  "Viscous material parameter");
    LSDYNA_P                                = VALUE(FLOAT,  "Viscous material parameter");
    LSDYNA_SIGY                             = VALUE(FLOAT,  "Initial yield stress");
    LSD_ALPHA                               = VALUE(FLOAT,  "Thermal expansion coefficient");
    LSD_MAT103_CR1                          = VALUE(FLOAT,  "Isotropic hardening parameter");
    LSD_MAT103_CR2                          = VALUE(FLOAT,  "Isotropic hardening parameter");
    LSD_MAT103_CX1                          = VALUE(FLOAT,  "Kinematic hardening parameter");
    LSD_MAT103_CX2                          = VALUE(FLOAT,  "Kinematic hardening parameter");
    LSD_MAT103_QR1                          = VALUE(FLOAT,  "Isotropic hardening parameter");
    LSD_MAT103_QR2                          = VALUE(FLOAT,  "Isotropic hardening parameter");
    LSD_MAT103_QX1                          = VALUE(FLOAT,  "Kinematic hardening parameter");
    LSD_MAT103_QX2                          = VALUE(FLOAT,  "Kinematic hardening parameter");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    MATL188_CRPA                            = VALUE(FLOAT,  "Creep law parameter");
    MATL188_CRPB                            = VALUE(FLOAT,  "Creep law parameter");
    MATL188_CRPM                            = VALUE(FLOAT,  "Creep law parameter");
    MATL188_CRPQ                            = VALUE(FLOAT,  "Creep law parameter");
    MATL188_LCALPH                          = VALUE(FUNCT,  "Load curve for scaling the thermal expansion coefficient vs temp.");
    MATL188_LCC                             = VALUE(FUNCT,  "Load curve for scaling the viscous material parameter C vs temperature");
    MATL188_LCCR                            = VALUE(FUNCT,  "Load curve for scaling the isotropic hardening parameters CR1 and CR2 vs temperature");
    MATL188_LCCX                            = VALUE(FUNCT,  "Load curve for scaling the kinematic hardening parameters CX1 and CX2 vs temperature");
    MATL188_LCE                             = VALUE(FUNCT,  "Load curve for scaling Youngs modulus as a function of temp.");
    MATL188_LCP                             = VALUE(FUNCT,  "Load curve for scaling the viscous material parameter P vs temp.");
    MATL188_LCPR                            = VALUE(FUNCT,  "Load curve for scaling Poisson's ratio as a function of temp.");
    MATL188_LCQR                            = VALUE(FUNCT,  "Load curve for scaling the isotropic hardening parameters");
    MATL188_LCQX                            = VALUE(FUNCT,  "Load curve for scaling the kinematic hardening parameters");
    MATL188_LCSIGY                          = VALUE(FUNCT,  "Load curve for scaling initial yield stress as a function of temp.");
    MATL188_LCSS                            = VALUE(FUNCT,  "table defines for each temp. value a load curve giving the stress vs effective plastic strain");
    MATL188_REFTEM                          = VALUE(FLOAT,  "Reference temp. that defines thermal expansion coefficient");
    Nu                                      = VALUE(FLOAT,  "Poissons ratio");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    CRPAFunctOfTemperature                  = VALUE(FUNCT,  "A as a function of temperature");
    CRPAFunctionOfTemperature               = VALUE(INT,  "CRPAFunctionOfTemperature");
    CRPBFunctOfTemperature                  = VALUE(FUNCT,  "B as a function of temperature");
    CRPBFunctionOfTemperature               = VALUE(INT,  "CRPBFunctionOfTemperature");
    CRPMFunctOfTemperature                  = VALUE(FUNCT,  "m as a function of temperature");
    CRPMFunctionOfTemperature               = VALUE(INT,  "CRPMFunctionOfTemperature");
    CRPQFunctOfTemperature                  = VALUE(FUNCT,  "Q as a function of temperature");
    CRPQFunctionOfTemperature               = VALUE(INT,  "CRPQFunctionOfTemperature");
    CommentEnumField                        = VALUE(INT,  "User Comments");

}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CRPAFunctOfTemperature                  = 1716;
    CRPAFunctionOfTemperature               = 1715;
    CRPBFunctOfTemperature                  = 1719;
    CRPBFunctionOfTemperature               = 1718;
    CRPMFunctOfTemperature                  = 1725;
    CRPMFunctionOfTemperature               = 1724;
    CRPQFunctOfTemperature                  = 1722;
    CRPQFunctionOfTemperature               = 1721;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    E                                       = 119;
    LSDYNA_C                                = 197;
    LSDYNA_P                                = 198;
    LSDYNA_SIGY                             = 152;
    LSD_ALPHA                               = 1651;
    LSD_MAT103_CR1                          = 2655;
    LSD_MAT103_CR2                          = 2657;
    LSD_MAT103_CX1                          = 2659;
    LSD_MAT103_CX2                          = 2661;
    LSD_MAT103_QR1                          = 2654;
    LSD_MAT103_QR2                          = 2656;
    LSD_MAT103_QX1                          = 2658;
    LSD_MAT103_QX2                          = 2660;
    LSD_TitleOpt                            = 90;
    MATL188_CRPA                            = 1714;
    MATL188_CRPB                            = 1717;
    MATL188_CRPM                            = 1723;
    MATL188_CRPQ                            = 1720;
    MATL188_LCALPH                          = 1709;
    MATL188_LCC                             = 1710;
    MATL188_LCCR                            = 1712;
    MATL188_LCCX                            = 1713;
    MATL188_LCE                             = 1704;
    MATL188_LCP                             = 1711;
    MATL188_LCPR                            = 1705;
    MATL188_LCQR                            = 1707;
    MATL188_LCQX                            = 1708;
    MATL188_LCSIGY                          = 1706;
    MATL188_LCSS                            = 1702;
    MATL188_REFTEM                          = 1703;
    Nu                                      = 120;
    Num_Comments                            = 3101;
    Rho                                     = 118;

}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY=SCALAR(Rho);
    YOUNG_MODULUS = SCALAR(E);
    POISSON_RATIO = SCALAR(Nu);
    //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED= EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
  private:
  G = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1 = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
  public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5); 
}


GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_THERMO_ELASTO_VISCOPLASTIC_CREEP");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
        ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                                    { DIMENSION="density";  } 
     SCALAR(E)                                      { DIMENSION="pressure";      } 
 optional:
     SCALAR(Nu)                                     { DIMENSION="DIMENSIONLESS"; }
     SCALAR(LSDYNA_SIGY)                            { DIMENSION="pressure"; } 
     SCALAR(LSD_ALPHA)                              { DIMENSION="DIMENSIONLESS"; } 
     DATA(MATL188_LCSS);
     SCALAR(MATL188_REFTEM)                         { DIMENSION="k"; }
     SCALAR(LSD_MAT103_QR1)                         { DIMENSION="DIMENSIONLESS"; }
     SCALAR(LSD_MAT103_CR1)                         { DIMENSION="DIMENSIONLESS"; }
     SCALAR(LSD_MAT103_QR2)                         { DIMENSION="DIMENSIONLESS"; }
     SCALAR(LSD_MAT103_CR2)                         { DIMENSION="DIMENSIONLESS"; }
     SCALAR(LSD_MAT103_QX1)                         { DIMENSION="DIMENSIONLESS"; }
     SCALAR(LSD_MAT103_CX1)                         { DIMENSION="DIMENSIONLESS"; }
     SCALAR(LSD_MAT103_QX2)                         { DIMENSION="DIMENSIONLESS"; }
     SCALAR(LSD_MAT103_CX2)                         { DIMENSION="DIMENSIONLESS"; }
     SCALAR(LSDYNA_C)                               { DIMENSION="DIMENSIONLESS"; }
     SCALAR(LSDYNA_P)                               { DIMENSION="DIMENSIONLESS"; }
     DATA(MATL188_LCE);
     DATA(MATL188_LCPR);
     DATA(MATL188_LCSIGY);
     DATA(MATL188_LCQR);
     DATA(MATL188_LCQX);
     DATA(MATL188_LCALPH);
     DATA(MATL188_LCC);
     DATA(MATL188_LCP);
     DATA(MATL188_LCCR);
     DATA(MATL188_LCCX);
     FLAG(CRPAFunctionOfTemperature);
     if(CRPAFunctionOfTemperature == FALSE)
     {
        SCALAR(MATL188_CRPA)                        { DIMENSION="DIMENSIONLESS"; }
     }
     if(CRPAFunctionOfTemperature == TRUE)
     {
        DATA(CRPAFunctOfTemperature);
     }
     FLAG(CRPBFunctionOfTemperature);
     if(CRPBFunctionOfTemperature == FALSE)
     {
        SCALAR(MATL188_CRPB)                        { DIMENSION="DIMENSIONLESS"; }
     }
     if(CRPBFunctionOfTemperature == TRUE)
     {
        DATA(CRPBFunctOfTemperature);
     }
     FLAG(CRPQFunctionOfTemperature);
     if(CRPQFunctionOfTemperature == FALSE)
     {
        SCALAR(MATL188_CRPQ)                        { DIMENSION="DIMENSIONLESS"; }
     }
     if(CRPQFunctionOfTemperature == TRUE)
     {
        DATA(CRPQFunctOfTemperature);
     }
     FLAG(CRPMFunctionOfTemperature);
     if(CRPMFunctionOfTemperature == FALSE)
     {
        SCALAR(MATL188_CRPM)                        { DIMENSION="DIMENSIONLESS"; }
     }
     if(CRPMFunctionOfTemperature == TRUE)
     {
        DATA(CRPMFunctOfTemperature);
     }
/*
        graphical SUPPORT("Part(s) to which material is applied") {  
          OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/TETRA10,/COMPONENT/SHELL);
          ADD(COMPONENT,"Parts");
        }
*/
}

// File format
FORMAT(Keyword971) 
{
    //
    COMMENT("$      MID       RHO         E        PR      SIGY     ALPHA      LCSS    REFTEM");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10d%10lg",_ID_,Rho,E,Nu,LSDYNA_SIGY,LSD_ALPHA,MATL188_LCSS,MATL188_REFTEM);
    //
    COMMENT("$      QR1       CR1       QR2       CR2       QX1       CX1       QX2       CX2");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT103_QR1,LSD_MAT103_CR1,LSD_MAT103_QR2,LSD_MAT103_CR2,LSD_MAT103_QX1,LSD_MAT103_CX1,LSD_MAT103_QX2,LSD_MAT103_CX2);
    //
    COMMENT("$        C         P       LCE      LCPR    LCSIGY      LCQR      LCQX    LCALPH");
    CARD("%10lg%10lg%10d%10d%10d%10d%10d%10d",LSDYNA_C,LSDYNA_P,MATL188_LCE,MATL188_LCPR,MATL188_LCSIGY,MATL188_LCQR,MATL188_LCQX,MATL188_LCALPH);
    //
    COMMENT("$      LCC       LCP      LCCR      LCCX      CRPA      CRPB      CRPQ      CRPM");
    CARD("%10d%10d%10d%10d%10lg%10lg%10lg%10lg",MATL188_LCC,MATL188_LCP,MATL188_LCCR,MATL188_LCCX,SCALAR_OR_OBJECT(CRPAFunctionOfTemperature,MATL188_CRPA,CRPAFunctOfTemperature),SCALAR_OR_OBJECT(CRPBFunctionOfTemperature,MATL188_CRPB,CRPBFunctOfTemperature),SCALAR_OR_OBJECT(CRPQFunctionOfTemperature,MATL188_CRPQ,CRPQFunctOfTemperature),SCALAR_OR_OBJECT(CRPMFunctionOfTemperature,MATL188_CRPM,CRPMFunctOfTemperature));
    //
    
}
