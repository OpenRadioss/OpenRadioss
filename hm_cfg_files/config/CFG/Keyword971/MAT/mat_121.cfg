//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 121
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    IU                                      = VALUE(FLOAT,  "IU");
    LSD_LCID                                = VALUE(FUNCT,  "LCIDT");
    LSD_LCID2                               = VALUE(FUNCT,  "LCIDTU");
    LSD_LCID3                               = VALUE(FUNCT,  "LCIDTD");
    LSD_LCID4                               = VALUE(FUNCT,  "LCIDTE");
    LSD_MAT_DF                              = VALUE(FLOAT,  "DAMPF");
    LSD_MAT_K                               = VALUE(FLOAT,  "K");
    LSD_OFFSET                              = VALUE(FLOAT,  "OFFSET");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    Rho                                     = VALUE(FLOAT,  "Rho");
    UCFAIL                                  = VALUE(FLOAT,  "UCFAIL");
    UNLDOPT                                 = VALUE(INT,  "UNLDOPT");
    UTFAIL                                  = VALUE(FLOAT,  "UTFAIL");

}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    IU                                      = 4565;
    LSD_LCID                                = 45;
    LSD_LCID2                               = 168;
    LSD_LCID3                               = 170;
    LSD_LCID4                               = 171;
    LSD_MAT_DF                              = 353;
    LSD_MAT_K                               = 1131;
    LSD_OFFSET                              = 716;
    LSD_TitleOpt                            = 90;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    UCFAIL                                  = 4564;
    UNLDOPT                                 = 4566;
    UTFAIL                                  = 4563;

}

DRAWABLES(COMMON) {
 public:
  MASS_DENSITY      = SCALAR(Rho);
  TRANS_STIFFNESS   = SCALAR(LSD_MAT_K);
  OFFSET_PERMANENT  = SCALAR(LSD_OFFSET);
  STABILITY_FACTOR  =SCALAR(LSD_MAT_DF);
  TENSION_FAILURE   =SCALAR(UCFAIL);
  COMPRESSION_FAILURE    =SCALAR(UCFAIL);
  INITIAL_DISPLACEMENT   =SCALAR(IU); 
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_GENERAL_NONLINEAR_1DOF_DISCRETE_BEAM");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:     
     SCALAR(Rho)                { DIMENSION="density";}
 optional:
     SCALAR(LSD_MAT_K)          { DIMENSION="translation_stiffness";}
     RADIO(UNLDOPT)
     {
        ADD(0, "0.0: Loading and unloading follow loading curve");
        ADD(0, "1.0: Loading follows loading curve, unloading follows unloading curve");
        ADD(0, "2.0: Loading follows loading curve, unloading follows unloading stiffness to the unloading curve");
        ADD(0, "3.0: Quadratic unloading from peak displacement value to permanent offset");
     }
     
     SCALAR(LSD_OFFSET)         { DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_DF)         { DIMENSION="t";}
     DATA(LSD_LCID);
     DATA(LSD_LCID2);
     DATA(LSD_LCID3);
     DATA(LSD_LCID4);
     SCALAR(UTFAIL)             { DIMENSION="l";}
     SCALAR(UCFAIL)             { DIMENSION="l";}
     SCALAR(IU)                 { DIMENSION="l";}
/*
    graphical SUPPORT("Part(s) to which material is applied") {
    OBJECTS=(/COMPONENT/BEAM,/COMPONENT/SPRING,/COMPONENT/TRUSS,/COMPONENT/RIVET);
    ADD(COMPONENT,"Parts");
  }
*/

}

// File format
FORMAT(Keyword971) 
{
    //
    COMMENT("$      MID       RHO         K   UNLDOPT    OFFSET     DAMPF");
    CARD("%10d%10lg%10lg%10d%10lg%10lg",_ID_,Rho,LSD_MAT_K,UNLDOPT,LSD_OFFSET,LSD_MAT_DF);
    //
    COMMENT("$    LCIDT    LCIDTU    LCIDTD    LCIDTE");
    CARD("%10d%10d%10d%10d",LSD_LCID,LSD_LCID2,LSD_LCID3,LSD_LCID4);
    //
    COMMENT("$   UTFAIL    UCFAIL        IU");
    CARD("%10lg%10lg%10lg",UTFAIL,UCFAIL,IU);
    //

}
