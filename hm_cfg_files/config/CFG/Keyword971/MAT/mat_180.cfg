//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 180
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    E                                       = VALUE(FLOAT,  "E");
    LSDYNA_BETA                             = VALUE(FLOAT,  "BETA");
    LSDYNA_BETA1                            = VALUE(FLOAT,  "BETA1");
    LSDYNA_BVFLAG                           = VALUE(FLOAT,  "BVFLAG");
    LSDYNA_ED                               = VALUE(FLOAT,  "ED");
    LSDYNA_FAIL                             = VALUE(FLOAT,  "FAIL");
    LSDYNA_HU                               = VALUE(FLOAT,  "HU");
    LSDYNA_KCON                             = VALUE(FLOAT,  "KCON");
    LSDYNA_SHAPE                            = VALUE(FLOAT,  "SHAPE");
    LSD_LCID                                = VALUE(FUNCT,  "LCID1");
    LSD_LCID10                              = VALUE(FUNCT,  "DAMP");
    LSD_LCID1OPTIONS_FLAG                   = VALUE(INT,  "LCID1");
    LSD_LCID2                               = VALUE(FUNCT,  "LCID2");
    LSD_LCID2OPTIONS_FLAG                   = VALUE(INT,  "LCID2");
    LSD_LCIDOpt                             = VALUE(INT,  "DAMP_Option");
    LSD_MAT179_EH                           = VALUE(FLOAT,  "EH");
    LSD_MAT179_GAMA1                        = VALUE(FLOAT,  "GAMA1");
    LSD_MAT179_GAMA2                        = VALUE(FLOAT,  "GAMA2");
    LSD_MAT179_K                            = VALUE(FLOAT,  "K");
    LSD_MAT180_OPTIONS_FLAG                 = VALUE(INT,  "With-Failure");
    LSD_MAT_DAMP                            = VALUE(FLOAT,  "DAMP");
    LSD_MAT_DTRT                            = VALUE(FLOAT,  "DTRT");
    LSD_MAT_REF                             = VALUE(FLOAT,  "REF");
    LSD_MAT_RFLAG                           = VALUE(FLOAT,  "RFLAG");
    LSD_MAT_TC                              = VALUE(FLOAT,  "TC");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    Rho                                     = VALUE(FLOAT,  "Rho");
    IO_FLAG                                 = VALUE(INT, "io flag");
    _HMCOMMENTSFLAG                         = VALUE(INT, "Write HM Comments");
    TITLE                                   = VALUE(STRING, "Title");
    EncTypeEnumField                        = VALUE(INT,  "Type");
    RegTypeEnumField                        = VALUE(INT,  "Type");
    OPT_TYPE_STR                            = VALUE(STRING, "OPT");
    LCID1_FLAG                              = VALUE(INT,  "");
    LCID2_FLAG                              = VALUE(INT,  "");
    _HAS_HEADER                             = VALUE(BOOL,"Has Header Card");
    LOC_NU                                  = VALUE(FLOAT, "Temp poisson ratio");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    E                                       = 119;
    LSDYNA_BETA                             = 148;
    LSDYNA_BETA1                            = 259;
    LSDYNA_BVFLAG                           = 257;
    LSDYNA_ED                               = 258;
    LSDYNA_FAIL                             = 256;
    LSDYNA_HU                               = 252;
    LSDYNA_KCON                             = 260;
    LSDYNA_SHAPE                            = 255;
    LSD_LCID                                = 45;
    LSD_LCID10                              = 1142;
    LSD_LCID1OPTIONS_FLAG                   = 5865;
    LSD_LCID2                               = 168;
    LSD_LCID2OPTIONS_FLAG                   = 5866;
    LSD_LCIDOpt                             = 5091;
    LSD_MAT179_EH                           = 1052;
    LSD_MAT179_GAMA1                        = 1050;
    LSD_MAT179_GAMA2                        = 1051;
    LSD_MAT179_K                            = 1049;
    LSD_MAT180_OPTIONS_FLAG                 = 5515;
    LSD_MAT_DAMP                            = 1121;
    LSD_MAT_DTRT                            = 1046;
    LSD_MAT_REF                             = 359;
    LSD_MAT_RFLAG                           = 1047;
    LSD_MAT_TC                              = 1198;
    LSD_TitleOpt                            = 90;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    EncTypeEnumField                        = 5828;
    RegTypeEnumField                        = 5827;
    TITLE                                   = -1;
    OPT_TYPE_STR                            = -1;
    IO_FLAG                                 = -1;
    LCID1_FLAG                              = -1;
    LCID2_FLAG                              = -1;
    _HAS_HEADER                             = -1;
    LOC_NU                                  = -1;
}

CHECK(COMMON)
{
    LSD_MAT_DAMP                              >=0;
}

DEFAULTS(COMMON)
{

    LSDYNA_SHAPE    = 1.0;
    LSD_MAT_DAMP    = 0.05;
    LSD_MAT_TC      = 1E+20;
    _HAS_HEADER     = TRUE;
    LOC_NU          = 0.0;
}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  YOUNG_MODULUS=SCALAR(E);
  HYSTERETIC_UNLOADING_FACTOR_BETWEEN=SCALAR(LSDYNA_HU);
  BETA=SCALAR(LSDYNA_BETA);
  VISCOUS_COEFFICIENT=SCALAR(LSD_MAT_DAMP);
  SHAPE_FACTOR_FOR_UNLOADING=SCALAR(LSDYNA_SHAPE);
  FAILURE_OPTION=SCALAR(LSDYNA_FAIL);
  BULK_VISCOSITY_ACTIVATION_FLAG=SCALAR(LSDYNA_BVFLAG);
  YOUNG_RELAXATION_MODULUS=SCALAR(LSDYNA_ED);
  BETA1=SCALAR(LSDYNA_BETA1);
  STIFFNESS_COEFFICIENT=SCALAR(LSDYNA_KCON);
  REFERENCE_GEOMETRY=SCALAR(LSD_MAT_REF);
  TC=SCALAR(LSD_MAT_TC);
  POISSON_RATIO=SCALAR(LOC_NU);
//SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED= EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
  private:
  G = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1 = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
  public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5); 
}

GUI(COMMON)
{
     ASSIGN(KEYWORD_STR, "*MAT_LOW_DENSITY_SYNTHETIC_FOAM_ORTHO");
     RADIO(CommentEnumField)
     {
         //ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     RADIO(LSD_LCID1OPTIONS_FLAG)
     {
        ADD(1, "Curve");
        ADD(2, "Table");
     }
     RADIO(LSD_LCID2OPTIONS_FLAG)
     {
        ADD(1, "Curve");
        ADD(2, "Table");
     }
     FLAG(LSD_MAT180_OPTIONS_FLAG);
     if(LSD_MAT180_OPTIONS_FLAG == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_WITH_FAILURE");
     }
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                                                {DIMENSION="density";}
 optional:
     SCALAR(E)                                                  {DIMENSION="pressure";}
     if(LSD_LCID1OPTIONS_FLAG == 1 || LSD_LCID1OPTIONS_FLAG == 2)
     {
 mandatory:
        DATA(LSD_LCID);
     }
        /*
             if(LSD_LCID1OPTIONS_FLAG == 0)
             {
         mandatory:
                DATA(LSD_LCID);
             }
             if(LSD_LCID1OPTIONS_FLAG == 1)
             {
         mandatory:
                DATA(LSD_LCID);
             }

             if(LSD_LCID2OPTIONS_FLAG == 0)
             {
         mandatory:
                DATA(LSD_LCID2);
             }
             if(LSD_LCID2OPTIONS_FLAG == 1)
             {
         mandatory:
                DATA(LSD_LCID2);
             }
         */

     if(LSD_LCID2OPTIONS_FLAG == 1 || LSD_LCID2OPTIONS_FLAG == 2)
     {
 mandatory:
        DATA(LSD_LCID2);
     }
 optional:
     SCALAR(LSDYNA_HU)                                          {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_BETA)                                        {DIMENSION="DIMENSIONLESS";}
     FLAG(LSD_LCIDOpt);
     if(LSD_LCIDOpt == FALSE)
     {
        SCALAR(LSD_MAT_DAMP)                                    {DIMENSION="DIMENSIONLESS";}
     }
     if(LSD_LCIDOpt == TRUE)
     {
        DATA(LSD_LCID10);
     }
     SCALAR(LSDYNA_SHAPE)                                       {DIMENSION="DIMENSIONLESS";}
     RADIO(LSDYNA_FAIL)
     {
        ADD(0.0, "0.0: Tensile stress remains at cut-off value");
        ADD(1.0, "1.0: Tensile stress is reset to zero");
     }
     RADIO(LSDYNA_BVFLAG)
     {
        ADD(0.0, "0.0: No bulk viscosity, recommended");
        ADD(1.0, "1.0: Bulk viscosity active");
     }
     SCALAR(LSDYNA_ED)                                          {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_BETA1)                                       {DIMENSION="DIMENSIONLESS";} 
     SCALAR(LSDYNA_KCON)                                        {DIMENSION="DIMENSIONLESS";}
     RADIO(LSD_MAT_REF)
     {
        ADD(0.0, "0.0: Off");
        ADD(1.0, "1.0: On");
     }
     SCALAR(LSD_MAT_TC)                                         {DIMENSION="DIMENSIONLESS";}
     if(LSD_LCID1OPTIONS_FLAG == 2 && LSD_LCID != NONE)
     {
         RADIO(LSD_MAT_RFLAG)
         {
            ADD(0.0, "0.0: LC1D1 and LC1D2 should be input as functions of true strain rate");
            ADD(1.0, "1.0: LC1D1 and LC1D2 should be input as functions of engineering strain rate");
         }
         SCALAR(LSD_MAT_DTRT)                                   {DIMENSION="DIMENSIONLESS";}
     }
     if(LSD_MAT180_OPTIONS_FLAG == TRUE)
     {
         SCALAR(LSD_MAT179_K)                                   {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_MAT179_GAMA1)                               {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_MAT179_GAMA2)                               {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_MAT179_EH)                                  {DIMENSION="DIMENSIONLESS";}
     }
/*    graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D);
      ADD(COMPONENT,"Parts");
    }
*/

}

// File format
FORMAT(Keyword971) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    //
    if(IO_FLAG == 1 )
    {
         HEADER("*MAT_180%19s", OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "" || OPT_TYPE_STR != "_TITLE" || OPT_TYPE_STR != "_WITH_FAILURE" || OPT_TYPE_STR != "_WITH_FAILURE_TITLE"))
    {
         HEADER("*MAT_LOW_DENSITY_SYNTHETIC_FOAM_ORTHO%19s", OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "" || OPT_TYPE_STR == "_TITLE"))
    {
        ASSIGN(LSD_MAT180_OPTIONS_FLAG, 0);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "_WITH_FAILURE" || OPT_TYPE_STR == "_WITH_FAILURE_TITLE"))
    {
        ASSIGN(LSD_MAT180_OPTIONS_FLAG, 1);
    }
    if(IO_FLAG == 2 && LSD_MAT180_OPTIONS_FLAG == 0 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_LOW_DENSITY_SYNTHETIC_FOAM_ORTHO");
    }   
    else if(IO_FLAG == 2 && LSD_MAT180_OPTIONS_FLAG == 0 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_LOW_DENSITY_SYNTHETIC_FOAM_ORTHO_TITLE");
        CARD("%-80s", TITLE);
    }
    else if(IO_FLAG == 2 && LSD_MAT180_OPTIONS_FLAG == 1 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_LOW_DENSITY_SYNTHETIC_FOAM_ORTHO_WITH_FAILURE");
    }   
    else if(IO_FLAG == 2 && LSD_MAT180_OPTIONS_FLAG == 1 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_LOW_DENSITY_SYNTHETIC_FOAM_ORTHO_WITH_FAILURE_TITLE");
        CARD("%-80s", TITLE);
    }
    //
    if(LSD_LCID1OPTIONS_FLAG == 2)
    {
        ASSIGN(LCID1_FLAG, 1, EXPORT);
    }
    else
    {
        ASSIGN(LCID1_FLAG, 0, EXPORT);
    }
    if(LSD_LCID2OPTIONS_FLAG == 2)
    {
        ASSIGN(LCID2_FLAG, 1, EXPORT);
    }
    else
    {
        ASSIGN(LCID2_FLAG, 0, EXPORT);
    }
    //
    COMMENT("$      MID       RHO         E     LCID1     LCID2        HU      BETA      DAMP");
    CARD("%10d%10lg%10lg%10d%10d%10lg%10lg%10lg",_ID_,Rho,E,FLAGGED_OBJECT(LSD_LCID,LCID1_FLAG),FLAGGED_OBJECT(LSD_LCID2,LCID2_FLAG),LSDYNA_HU,LSDYNA_BETA,SCALAR_OR_OBJECT(LSD_LCIDOpt,LSD_MAT_DAMP,LSD_LCID10));
    //
    if(IO_FLAG == 1)
    {
        if(LCID1_FLAG == 1)
        {
            ASSIGN(LSD_LCID1OPTIONS_FLAG, 2, IMPORT);
        }
        else
        {
            ASSIGN(LSD_LCID1OPTIONS_FLAG, 1, IMPORT);
        }
        if(LCID2_FLAG == 1)
        {
            ASSIGN(LSD_LCID2OPTIONS_FLAG, 2, IMPORT);
        }
        else
        {
            ASSIGN(LSD_LCID2OPTIONS_FLAG, 1, IMPORT);
        }
    }
    //
    COMMENT("$    SHAPE      FAIL    BVFLAG        ED     BETA1      KCON       REF        TC");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_SHAPE,LSDYNA_FAIL,LSDYNA_BVFLAG,LSDYNA_ED,LSDYNA_BETA1,LSDYNA_KCON,LSD_MAT_REF,LSD_MAT_TC);
    //
    if(LSD_LCID1OPTIONS_FLAG == 2 && LSD_LCID!= NONE)
    {
         COMMENT("$    RFLAG      DTRT");
         CARD("%10lg%10lg",LSD_MAT_RFLAG,LSD_MAT_DTRT);
    }
    //
    if(LSD_MAT180_OPTIONS_FLAG == TRUE && IO_FLAG == 2)
    {
        COMMENT("$        K     GAMA1     GAMA2        EH");
    }
    FREE_CARD(LSD_MAT180_OPTIONS_FLAG,"%10lg%10lg%10lg%10lg",LSD_MAT179_K,LSD_MAT179_GAMA1,LSD_MAT179_GAMA2,LSD_MAT179_EH);

}
