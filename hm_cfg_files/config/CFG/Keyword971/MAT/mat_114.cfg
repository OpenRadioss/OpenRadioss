//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 114
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    E                                       = VALUE(FLOAT,  "Youngs modulus");
    MATL112_PR                              = VALUE(FLOAT,  "Poissons ratio");
    LSDYNA_C                                = VALUE(FLOAT,  "Strain rate parameter");
    LSDYNA_EPS1                             = VALUE(FLOAT,  "Effective plastic strain values");
    LSDYNA_EPS2                             = VALUE(FLOAT,  "Effective plastic strain values");
    LSDYNA_EPS3                             = VALUE(FLOAT,  "Effective plastic strain values");
    LSDYNA_EPS4                             = VALUE(FLOAT,  "Effective plastic strain values");
    LSDYNA_EPS5                             = VALUE(FLOAT,  "Effective plastic strain values");
    LSDYNA_EPS6                             = VALUE(FLOAT,  "Effective plastic strain values");
    LSDYNA_EPS7                             = VALUE(FLOAT,  "Effective plastic strain values");
    LSDYNA_EPS8                             = VALUE(FLOAT,  "Effective plastic strain values");
    LSDYNA_ES1                              = VALUE(FLOAT,  "Corresponding yield stress values");
    LSDYNA_ES2                              = VALUE(FLOAT,  "Corresponding yield stress values");
    LSDYNA_ES3                              = VALUE(FLOAT,  "Corresponding yield stress values");
    LSDYNA_ES4                              = VALUE(FLOAT,  "Corresponding yield stress values");
    LSDYNA_ES5                              = VALUE(FLOAT,  "Corresponding yield stress values");
    LSDYNA_ES6                              = VALUE(FLOAT,  "Corresponding yield stress values");
    LSDYNA_ES7                              = VALUE(FLOAT,  "Corresponding yield stress values");
    LSDYNA_ES8                              = VALUE(FLOAT,  "Corresponding yield stress values");
    LSDYNA_ETAN                             = VALUE(FLOAT,  "Tangent modulus");
    LSDYNA_FAIL                             = VALUE(FLOAT,  "Failure flag");
    LSDYNA_P                                = VALUE(FLOAT,  "Strain rate parameter");
    LSDYNA_SIGY                             = VALUE(FLOAT,  "Yield stress");
    LSDYNA_TDEL                             = VALUE(FLOAT,  "Minimum time step size for automatic element deletion");
    LSD_LCID                                = VALUE(FUNCT,  "effective stress vs effective plastic strain");
    LSD_LCID8                               = VALUE(FUNCT,  "strain rate scaling effect on yield stress");
    LSD_TitleOpt                            = VALUE(INT,  "Title");

}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    E                                       = 119;
    LSDYNA_C                                = 197;
    LSDYNA_EPS1                             = 201;
    LSDYNA_EPS2                             = 202;
    LSDYNA_EPS3                             = 203;
    LSDYNA_EPS4                             = 204;
    LSDYNA_EPS5                             = 205;
    LSDYNA_EPS6                             = 206;
    LSDYNA_EPS7                             = 207;
    LSDYNA_EPS8                             = 208;
    LSDYNA_ES1                              = 209;
    LSDYNA_ES2                              = 210;
    LSDYNA_ES3                              = 211;
    LSDYNA_ES4                              = 212;
    LSDYNA_ES5                              = 213;
    LSDYNA_ES6                              = 214;
    LSDYNA_ES7                              = 215;
    LSDYNA_ES8                              = 216;
    LSDYNA_ETAN                             = 153;
    LSDYNA_FAIL                             = 256;
    LSDYNA_P                                = 198;
    LSDYNA_SIGY                             = 152;
    LSDYNA_TDEL                             = 173;
    LSD_LCID                                = 45;
    LSD_LCID8                               = 224;
    LSD_TitleOpt                            = 90;
    MATL112_PR                              = 4245;
    Num_Comments                            = 3101;
    Rho                                     = 118;

}

DEFAULTS(COMMON)
{

    LSDYNA_FAIL    = 1.000e+20;

}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  YOUNG_MODULUS=SCALAR(E);
  POISSON_RATIO=SCALAR(MATL112_PR);
  YIELD_STRESS=SCALAR(LSDYNA_SIGY);
  TANGENT_MODULUS=SCALAR(LSDYNA_ETAN);
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_LAYERED_LINEAR_PLASTICITY");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:    
     SCALAR(Rho)                        {DIMENSION="density";}
     SCALAR(E)                          {DIMENSION="pressure";}
 optional:    
     SCALAR(MATL112_PR)                 {DIMENSION="DIMENSIONLESS";}
 mandatory:    
     SCALAR(LSDYNA_SIGY)                {DIMENSION="pressure";}
 optional:    
     SCALAR(LSDYNA_ETAN)                {DIMENSION="pressure";}
     SCALAR(LSDYNA_FAIL)                {DIMENSION="pressure";}
     SCALAR(LSDYNA_TDEL)                {DIMENSION="t";}
     SCALAR(LSDYNA_C)                   {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_P)                   {DIMENSION="f";}
     DATA(LSD_LCID);
     DATA(LSD_LCID8);
     SCALAR(LSDYNA_EPS1)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_EPS2)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_EPS3)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_EPS4)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_EPS5)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_EPS6)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_EPS7)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_EPS8)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_ES1)                 {DIMENSION="pressure";}
     SCALAR(LSDYNA_ES2)                 {DIMENSION="pressure";}
     SCALAR(LSDYNA_ES3)                 {DIMENSION="pressure";}
     SCALAR(LSDYNA_ES4)                 {DIMENSION="pressure";}
     SCALAR(LSDYNA_ES5)                 {DIMENSION="pressure";}
     SCALAR(LSDYNA_ES6)                 {DIMENSION="pressure";}
     SCALAR(LSDYNA_ES7)                 {DIMENSION="pressure";}
     SCALAR(LSDYNA_ES8)                 {DIMENSION="pressure";}
/*
    graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/SHELL,/COMPONENT/BRICK,/COMPONENT/PENTA6,/COMPONENT/SHEL16);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    //
    COMMENT("$      MID       RHO         E        PR      SIGY      ETAN      FAIL      TDEL");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,MATL112_PR,LSDYNA_SIGY,LSDYNA_ETAN,LSDYNA_FAIL,LSDYNA_TDEL);
    //
    COMMENT("$        C         P      LCSS      LCSR");
    CARD("%10lg%10lg%10lg%10lg",LSDYNA_C,LSDYNA_P,LSD_LCID,LSD_LCID8);
    //
    COMMENT("$     EPS1      EPS2      EPS3      EPS4      EPS5      EPS6      EPS7      EPS8");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_EPS1,LSDYNA_EPS2,LSDYNA_EPS3,LSDYNA_EPS4,LSDYNA_EPS5,LSDYNA_EPS6,LSDYNA_EPS7,LSDYNA_EPS8);
    //
    COMMENT("$      ES1       ES2       ES3       ES4       ES5       ES6       ES7       ES8");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_ES1,LSDYNA_ES2,LSDYNA_ES3,LSDYNA_ES4,LSDYNA_ES5,LSDYNA_ES6,LSDYNA_ES7,LSDYNA_ES8);
    //
}
