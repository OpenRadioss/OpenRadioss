//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 013
// 


 ATTRIBUTES(COMMON) 
 {
  
  // Initial and reference densities
  KEYWORD_STR                     = VALUE(STRING, "Solver Keyword");
  LSD_TitleOpt                    = VALUE(INT, "Title");
  CommentEnumField                = VALUE(INT, "User Comments");
  Num_Comments                    = SIZE("No. of comment lines");
  Comments                        = ARRAY[Num_Comments](STRING, "Entity Comments");
  Rho                             = VALUE(FLOAT, "Rho");  
  G                               = VALUE(FLOAT, "G");
  LSDYNA_SIGY                     = VALUE(FLOAT, "SIGY");
  LSDYNA_ETAN                     = VALUE(FLOAT, "ETAN");
  LSD_MAT_BULK                    = VALUE(FLOAT, "BULK");
  LSD_MAT_D2                      = VALUE(FLOAT, "EPF");
  LSD_MAT_D3                      = VALUE(FLOAT, "PRF");
  LSD_MAT_D4                      = VALUE(FLOAT, "REM");
  LSD_MAT_D5                      = VALUE(FLOAT, "TREM");


}

SKEYWORDS_IDENTIFIER(COMMON)
{

  KEYWORD_STR                 = 9000;
  CommentEnumField            = 3220;
  Num_Comments                = 3101;
  LSD_TitleOpt                = 90;
  Comments                    = 3100;
  Rho                         = 118;
  G                           = 121;
  LSDYNA_SIGY                 = 152;
  LSDYNA_ETAN                 = 153;
  LSD_MAT_BULK                = 278;
  LSD_MAT_D2                  = 321;
  LSD_MAT_D3                  = 322;
  LSD_MAT_D4                  = 323;
  LSD_MAT_D5                  = 324;


}

DRAWABLES(COMMON) {
 public:
      MASS_DENSITY=SCALAR(Rho);
      SHEAR_MODULUS=SCALAR(G);
      YIELD_STRESS=SCALAR(LSDYNA_SIGY);
      PLASTIC_HARDENING_MODULUS=SCALAR(LSDYNA_ETAN);
      BULK_MODULUS=SCALAR(LSD_MAT_BULK);
      PLASTIC_FAILURE_STRAIN=SCALAR(LSD_MAT_D2);
      FAILURE_PRESSURE=SCALAR(LSD_MAT_D3);
      ELEMENT_EROSION_OPTION=SCALAR(LSD_MAT_D4);
      TREM=SCALAR(LSD_MAT_D5);
      YOUNG_MODULUS = EVAL(9*SHEAR_MODULUS*BULK_MODULUS/(3.*BULK_MODULUS+SHEAR_MODULUS));
      POISSON_RATIO     = EVAL((3.*BULK_MODULUS-2.*SHEAR_MODULUS)/(6.*BULK_MODULUS+2.*SHEAR_MODULUS));
 public:
      //SOUND_SPEED is speed for ISDO = 0 and 1
      SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
      SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 public:
      SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+BULK_MODULUS)/MASS_DENSITY)^0.5);
}

GUI(COMMON) 
{


    ASSIGN(KEYWORD_STR, "*MAT_ISOTROPIC_ELASTIC_FAILURE");
    RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
    FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
       {
             ASSIGN(KEYWORD_STR, "_TITLE");
       } 
 mandatory:
    SCALAR(Rho)     { DIMENSION="density";}
    SCALAR(G)               {DIMENSION="pressure";}
 optional:
    SCALAR(LSDYNA_SIGY)     {DIMENSION="pressure";}
    SCALAR(LSDYNA_ETAN)     {DIMENSION="pressure";}
 mandatory:
    SCALAR(LSD_MAT_BULK)    {DIMENSION="pressure";}
 optional:
    SCALAR(LSD_MAT_D2)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_D3)      {DIMENSION="pressure";}
    SCALAR(LSD_MAT_D4)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_D5)      {DIMENSION="t";}
/*
 graphical SUPPORT("Part(s) to which material is applied") {
OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D);
  ADD(COMPONENT,"Parts");
}
*/
}

// File format
FORMAT(Keyword971) 
{
        //
        COMMENT("$      MID       RHO         G      SIGY      ETAN      BULK");
        CARD("%10d%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,G,LSDYNA_SIGY,LSDYNA_ETAN,LSD_MAT_BULK);
        //
        COMMENT("$      EPF       PRF       REM      TREM");
        CARD("%10lg%10lg%10lg%10lg",LSD_MAT_D2,LSD_MAT_D3,LSD_MAT_D4,LSD_MAT_D5);
        //
}