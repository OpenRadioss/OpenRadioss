//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 143
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    LSDYNA_A1                               = VALUE(FLOAT,  "Components of vector a for AOPT = 2.");
    LSDYNA_A2                               = VALUE(FLOAT,  "Components of vector a for AOPT = 2.");
    LSDYNA_A3                               = VALUE(FLOAT,  "Components of vector a for AOPT = 2.");
    LSDYNA_BETA                             = VALUE(FLOAT,  "Material angle in degrees for AOPT = 3, may be overridden on the element card");
    LSDYNA_D1                               = VALUE(FLOAT,  "Components of vector d for AOPT = 2.");
    LSDYNA_D2                               = VALUE(FLOAT,  "Components of vector d for AOPT = 2.");
    LSDYNA_D3                               = VALUE(FLOAT,  "Components of vector d for AOPT = 2.");
    LSDYNA_IVOL                             = VALUE(INT,  "Flag to invoke erosion based on negative volume or strain increments greater than 0.01.");
    LSDYNA_NPLOT                            = VALUE(INT,  "Controls what is written as component 7 to the d3plot database. LSPrePost always blindly labels this component as effective plastic strain");
    LSDYNA_SXY                              = VALUE(FLOAT,  "Parallel shear strength");
    LSDYNA_SYZ                              = VALUE(FLOAT,  "Perpendicular shear strength.");
    LSDYNA_V1                               = VALUE(FLOAT,  "Define components of vector v for AOPT = 3 and 4.");
    LSDYNA_V2                               = VALUE(FLOAT,  "Define components of vector v for AOPT = 3 and 4.");
    LSDYNA_V3                               = VALUE(FLOAT,  "Define components of vector v for AOPT = 3 and 4.");
    LSDYNA_XP                               = VALUE(FLOAT,  "Coordinates of point p for AOPT = 1 and 4.");
    LSDYNA_YP                               = VALUE(FLOAT,  "Coordinates of point p for AOPT = 1 and 4.");
    LSDYNA_ZP                               = VALUE(FLOAT,  "Coordinates of point p for AOPT = 1 and 4.");
    LSD_CPAR                                = VALUE(FLOAT,  "Parallel hardening rate");
    LSD_CPER                                = VALUE(FLOAT,  "Perpendicular hardening rate.");
    LSD_FLPAR                               = VALUE(FLOAT,  "Parallel fluidity parameter for tension and shear.");
    LSD_FLPARC                              = VALUE(FLOAT,  "Parallel fluidity parameter for compression.");
    LSD_FLPER                               = VALUE(FLOAT,  "Perpendicular fluidity parameter for tension and shear.");
    LSD_FLPERC                              = VALUE(FLOAT,  "Perpendicular fluidity parameter for compression.");
    LSD_GF1_PAR                             = VALUE(FLOAT,  "Parallel fracture energy in tension.");
    LSD_GF1_PREP                            = VALUE(FLOAT,  "Perpendicular fracture energy in tension.");
    LSD_GF2_PAR                             = VALUE(FLOAT,  "Parallel fracture energy in shear.");
    LSD_GF2_PREP                            = VALUE(FLOAT,  "Perpendicular fracture energy in shear.");
    LSD_GHARD                               = VALUE(FLOAT,  "Perfect plasticity override.");
    LSD_GLT                                 = VALUE(FLOAT,  "Parallel shear modulus");
    LSD_GTR                                 = VALUE(FLOAT,  "Perpendicular shear modulus.");
    LSD_IFAIL                               = VALUE(INT,  "Erosion perpendicular to the grain.");
    LSD_IQUAL                               = VALUE(INT,  "Apply quality factors perpendicular to the grain");
    LSD_IRATE                               = VALUE(INT,  "Rate effects option");
    LSD_ITERS                               = VALUE(INT,  "Number of plasticity algorithm iterations. The default is one iteration.");
    LSD_MAT100_ET                           = VALUE(FLOAT,  "Perpendicular normal modulus.");
    LSD_MAT_BFIT                            = VALUE(FLOAT,  "Parallel softening parameter.");
    LSD_MAT_DFIT                            = VALUE(FLOAT,  "Perpendicular softening parameter.");
    LSD_MAT_DMAX1                           = VALUE(FLOAT,  "Parallel maximum damage.");
    LSD_MAT_DMAX2                           = VALUE(FLOAT,  "Perpendicular maximum damage");
    LSD_MAT_EL                              = VALUE(FLOAT,  "Parallel normal modulus");
    LSD_MAT_USER_DEF_MACF                   = VALUE(INT,    "Material axes change flag");
    LSD_MAT_XC                              = VALUE(FLOAT,  "Parallel compressive strength.");
    LSD_MAT_XT                              = VALUE(FLOAT,  "Parallel tensile strength.");
    LSD_MAT_YC                              = VALUE(FLOAT,  "Perpendicular compressive strength.");
    LSD_MAT_YT                              = VALUE(FLOAT,  "Perpendicular tensile strength");
    LSD_MOIS                                = VALUE(FLOAT,  "Percent moisture content.");
    LSD_NODE1                               = VALUE(NODE,  "Node");
    LSD_NODE3                               = VALUE(NODE,  "Node1");
    LSD_NODE4                               = VALUE(NODE,  "Node2");
    LSD_NODE5                               = VALUE(NODE,  "Node1");
    LSD_NODE6                               = VALUE(NODE,  "Node2");
    LSD_NODE7                               = VALUE(NODE,  "Node1");
    LSD_NODE8                               = VALUE(NODE,  "Node2");
    LSD_NPAR                                = VALUE(FLOAT,  "Parallel hardening initiation.");
    LSD_NPER                                = VALUE(FLOAT,  "Perpendicular hardening initiation.");
    LSD_POWPAR                              = VALUE(FLOAT,  "Parallel power.");
    LSD_POWPER                              = VALUE(FLOAT,  "Perpendicular power.");
    LSD_QUAL_C                              = VALUE(FLOAT,  "User defined quality factor in compression.");
    LSD_QUAL_T                              = VALUE(FLOAT,  "Quality factor options");
    LSD_SYSTEM                              = VALUE(SYSTEM,  "AOPT");
    LSD_TEMP                                = VALUE(FLOAT,  "Temperature in C. If left blank, temperature defaults to room temperature at 20 C");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    LSD_UNITS                               = VALUE(INT,  "Units options");
    MatlOption                              = VALUE(INT,  "Options");
    Nu                                      = VALUE(FLOAT,  "Parallel major Poisson's ratio.");
    QualityFactOpt                          = VALUE(INT,  "Quality factor options");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    axisOptFlag                             = VALUE(INT,  "Anisotropy axis definition");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    LOC_AOPT                                = VALUE(FLOAT, "");
    IO_FLAG                                 = VALUE(INT, "io flag");
    OPT_TYPE_STR                            = VALUE(STRING, "OPT");
    TITLE                                   = VALUE(STRING, "");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
    _HAS_HEADER                             = VALUE(BOOL,"Has Header Card");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    LSDYNA_A1                               = 139;
    LSDYNA_A2                               = 140;
    LSDYNA_A3                               = 141;
    LSDYNA_BETA                             = 148;
    LSDYNA_D1                               = 145;
    LSDYNA_D2                               = 146;
    LSDYNA_D3                               = 147;
    LSDYNA_IVOL                             = 5540;
    LSDYNA_NPLOT                            = 5535;
    LSDYNA_SXY                              = 5543;
    LSDYNA_SYZ                              = 4711;
    LSDYNA_V1                               = 142;
    LSDYNA_V2                               = 143;
    LSDYNA_V3                               = 144;
    LSDYNA_XP                               = 136;
    LSDYNA_YP                               = 137;
    LSDYNA_ZP                               = 138;
    LSD_CPAR                                = 5559;
    LSD_CPER                                = 5561;
    LSD_FLPAR                               = 5552;
    LSD_FLPARC                              = 5553;
    LSD_FLPER                               = 5555;
    LSD_FLPERC                              = 5556;
    LSD_GF1_PAR                             = 5544;
    LSD_GF1_PREP                            = 5548;
    LSD_GF2_PAR                             = 5545;
    LSD_GF2_PREP                            = 5549;
    LSD_GHARD                               = 5538;
    LSD_GLT                                 = 5541;
    LSD_GTR                                 = 5542;
    LSD_IFAIL                               = 5539;
    LSD_IQUAL                               = 5569;
    LSD_IRATE                               = 5537;
    LSD_ITERS                               = 5536;
    LSD_MAT100_ET                           = 2530;
    LSD_MAT_BFIT                            = 5546;
    LSD_MAT_DFIT                            = 5550;
    LSD_MAT_DMAX1                           = 5547;
    LSD_MAT_DMAX2                           = 5551;
    LSD_MAT_EL                              = 1118;
    LSD_MAT_USER_DEF_MACF                   = 1296;
    LSD_MAT_XC                              = 1126;
    LSD_MAT_XT                              = 346;
    LSD_MAT_YC                              = 348;
    LSD_MAT_YT                              = 347;
    LSD_MOIS                                = 5564;
    LSD_NODE1                               = 86;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_NODE7                               = 5080;
    LSD_NODE8                               = 5081;
    LSD_NPAR                                = 5558;
    LSD_NPER                                = 5560;
    LSD_POWPAR                              = 5554;
    LSD_POWPER                              = 5557;
    LSD_QUAL_C                              = 5567;
    LSD_QUAL_T                              = 5566;
    LSD_SYSTEM                              = 184;
    LSD_TEMP                                = 4289;
    LSD_TitleOpt                            = 90;
    LSD_UNITS                               = 5568;
    MatlOption                              = 104;
    Nu                                      = 120;
    Num_Comments                            = 3101;
    QualityFactOpt                          = 5563;
    Rho                                     = 118;
    axisOptFlag                             = 4946;
    AOPT_SKEW_FLAG                          = -1;
    LOC_AOPT                                = -1;
    IO_FLAG                                 = -1;
    OPT_TYPE_STR                            = -1;
    TITLE                                   = -1;
    //empty_string                       = -1;
    _HAS_HEADER                             = -1;
}

DEFAULTS(COMMON)
{

    LSDYNA_NPLOT    = 1;
    LSD_IQUAL       = 0;
    LSD_ITERS       = 1;
    LSD_MAT_USER_DEF_MACF    = 1;
    LSD_MOIS        = 30.0;
    LSD_QUAL_T      = 1.0;
    LSD_TEMP        = 20.0;
    LSD_UNITS       = 0;
    _HAS_HEADER     = TRUE;
}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  PERFECT_PLASTICITY_OVERRIDE=SCALAR(LSD_GHARD);
  PERCENT_MOISTURE_CONTENT=SCALAR(LSD_MOIS);
  TEMPERATURE=SCALAR(LSD_TEMP);
  QUALITY_FACTOR_OPTIONS=SCALAR(LSD_QUAL_T);
  QUALITY_FACTOR_COMPRESSION=SCALAR(LSD_QUAL_C);
  MATERIAL_AXES_OPTION=SCALAR(axisOptFlag);
}

GUI(COMMON)
{
     ASSIGN(KEYWORD_STR, "*MAT_WOOD");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     } 
     RADIO(MatlOption)
     {
        ADD(1, "None");
        ADD(2, "Pine");
        ADD(3, "Fir");
     }
     if(MatlOption == 2)
     {
             ASSIGN(KEYWORD_STR, "_PINE");
     }
     if(MatlOption == 3)
     {
             ASSIGN(KEYWORD_STR, "_FIR");
     }
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 optional:
     SCALAR(Rho)                                    {DIMENSION="density";}
     RADIO(LSDYNA_NPLOT)
     {
        ADD(1, "1: Parallel damage (default)");
        ADD(2, "2: Perpendicular damage");
     }
     SCALAR(LSD_ITERS)                              {DIMENSION="DIMENSIONLESS";}
     RADIO(LSD_IRATE)
     {
        ADD(1, "0: Rate effects model turned off (default)");
        ADD(2, "1: Rate effects model turned on");
     }     
     SCALAR(LSD_GHARD)                              {DIMENSION="DIMENSIONLESS";}
     RADIO(LSD_IFAIL)
     {
        ADD(1, "0: No (default)");
        ADD(2, "1: Yes, not recommended unless debugging");
     }
     RADIO(LSDYNA_IVOL)
     {
        ADD(1, "0: No, do not apply erosion criteria");
        ADD(2, "1: Yes, apply erosion criteria");
     }
     if(MatlOption == 2 || MatlOption == 3)
     {
         SCALAR(LSD_MOIS)                           {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_TEMP)                           {DIMENSION="k";}
         RADIO(QualityFactOpt)
         {
              ADD(1, "Grade 1, 1D, 2, 2D");
              ADD(2, "DS-65 or SE1 STR");
              ADD(3, "Clear wood");
              ADD(4, "User defined");
         }
         SCALAR(LSD_QUAL_T)                          {DIMENSION="DIMENSIONLESS";}          
         SCALAR(LSD_QUAL_C)                         {DIMENSION="DIMENSIONLESS";}

         RADIO(LSD_UNITS)
         {
            ADD(1, "0: GPa, mm, msec, Kg/mm3, kN");
            ADD(2, "1: MPa, mm, msec, g/mm3, Nt");
            ADD(3, "2: MPa, mm, sec, Mg/mm3, Nt");
            ADD(4, "3: Pst, inch, sec, lb-s2/inch4, lb");
            ADD(5, "4: Pa, m, sec, kg/m3, N");
         }
         RADIO(LSD_IQUAL)
         {
            ADD(1, "0: Yes");
            ADD(2, "1: No");
         }

     }
     if(MatlOption == 1)
     {
         SCALAR(LSD_MAT_EL)                         {DIMENSION="pressure";}
         SCALAR(LSD_MAT100_ET)                      {DIMENSION="pressure";}
         SCALAR(LSD_GLT)                            {DIMENSION="pressure";}
         SCALAR(LSD_GTR)                            {DIMENSION="pressure";}
         SCALAR(Nu)                                 {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_MAT_XT)                         {DIMENSION="pressure";}
         SCALAR(LSD_MAT_XC)                         {DIMENSION="pressure";}
         SCALAR(LSD_MAT_YT)                         {DIMENSION="pressure";}
         SCALAR(LSD_MAT_YC)                         {DIMENSION="pressure";}
         SCALAR(LSDYNA_SXY)                         {DIMENSION="pressure";}
         SCALAR(LSDYNA_SYZ)                         {DIMENSION="pressure";}
         SCALAR(LSD_GF1_PAR)                        {DIMENSION="energy";}
         SCALAR(LSD_GF2_PAR)                        {DIMENSION="energy";}
         SCALAR(LSD_MAT_BFIT)                       {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_MAT_DMAX1)                      {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_GF1_PREP)                       {DIMENSION="energy";}
         SCALAR(LSD_GF2_PREP)                       {DIMENSION="energy";}
         SCALAR(LSD_MAT_DFIT)                       {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_MAT_DMAX2)                      {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_FLPAR)                          {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_FLPARC)                         {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_POWPAR)                         {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_FLPER)                          {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_FLPERC)                         {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_POWPER)                         {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_NPAR)                           {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_CPAR)                           {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_NPER)                           {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_CPER)                           {DIMENSION="DIMENSIONLESS";}
     }
     RADIO(axisOptFlag)
     {
        ADD(1, "0: Locally orthotropic: axis given by nodes 1,2 and 4");
        ADD(2, "1: Locally orthotropic: a-dir given by a point and global location of element center");
        ADD(3, "2: Globally orthotropic: axis given by vectors");
        ADD(4, "3: Locally orthotropic: axis given by rotating the material axes by an angle BETA");
        ADD(5, "4: Locally orhtotropic: cylindrical coordinate given by vector v and point P");
        ADD(6, "By System");
     }
     if(axisOptFlag == 6)
     {
        DATA(LSD_SYSTEM);
     }
     RADIO(LSD_MAT_USER_DEF_MACF)
     {
        ADD(1, "1: No change (default)");
        ADD(2, "2: Switch material axes a and b");
        ADD(3, "3: Switch material axes a and c");
        ADD(4, "4: Switch material axes b and c");
     }
     SCALAR(LSDYNA_BETA)                {DIMENSION="a";}
     if(axisOptFlag == 2 || axisOptFlag == 5)
     {
        DATA(LSD_NODE1);
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],FALSE);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],FALSE);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],FALSE);
     }
     if(axisOptFlag == 3)
     {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],FALSE);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],FALSE);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],FALSE);
        DATA(LSD_NODE7);                
        DATA(LSD_NODE8);                
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],FALSE);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],FALSE);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],FALSE);
     }
     if(axisOptFlag == 4 || axisOptFlag == 5)
     {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],FALSE);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],FALSE);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],FALSE);
     }     
/*
    graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/BEAM,/COMPONENT/SPRING,/COMPONENT/TRUSS,/COMPONENT/RIVET,/COMPONENT/SHELL,/COMPONENT/PENTA6,/COMPONENT/SHEL16);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);

    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE8 != NONE && LSD_NODE7 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    //Import
    if(IO_FLAG == 1)
    {
        HEADER("*MAT_143%11s", OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "" || OPT_TYPE_STR != "_TITLE" || OPT_TYPE_STR != "_PINE" || OPT_TYPE_STR != "_PINE_TITLE" || OPT_TYPE_STR != "_FIR" || OPT_TYPE_STR != "_FIR_TITLE"))
    {
        HEADER("*MAT_WOOD%11s", OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "" || OPT_TYPE_STR == "_TITLE" ))
    {
        ASSIGN(MatlOption, 1);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "_PINE" || OPT_TYPE_STR == "_PINE_TITLE"))
    {
        ASSIGN(MatlOption, 2);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "_FIR" || OPT_TYPE_STR == "_FIR_TITLE"))
    {
        ASSIGN(MatlOption, 3);
    }
    //Export
    if(IO_FLAG == 2 && MatlOption == 1 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_WOOD");
    }
    else if(IO_FLAG == 2 && MatlOption == 1 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_WOOD_TITLE");
        CARD("%-80s", TITLE);
    }
    else if(IO_FLAG == 2 && MatlOption == 2 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_WOOD_PINE");
    }
    else if(IO_FLAG == 2 && MatlOption == 2 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_WOOD_PINE_TITLE");
        CARD("%-80s", TITLE);
    }
    else if(IO_FLAG == 2 && MatlOption == 3 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_WOOD_FIR");
    }
    else if(IO_FLAG == 2 && MatlOption == 3 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_WOOD_FIR_TITLE");
        CARD("%-80s", TITLE);
    }   
    
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 5 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,4.0,EXPORT);
    }

    //
    COMMENT("$      MID       RHO     NPLOT     ITERS     IRATE     GHARD     IFAIL      IVOL"); CARD("%10d%10lg%10d%10d%10d%10lg%10d%10d",_ID_,Rho,LSDYNA_NPLOT,LSD_ITERS,LSD_IRATE,LSD_GHARD,LSD_IFAIL,LSDYNA_IVOL);

    if(MatlOption == 2 || MatlOption == 3)
    {
        COMMENT("$     MOIS      TEMP    QUAL_T    QUAL_C     UNITS     IQUAL");       CARD("%10lg%10lg%10lg%10lg%10d%10d",LSD_MOIS,LSD_TEMP,LSD_QUAL_T,LSD_QUAL_C,LSD_UNITS,LSD_IQUAL);
    }
    
    //
    if (MatlOption == 1)
    {
        COMMENT("$       EL        ET       GLT       GTR        PR");
        CARD("%10lg%10lg%10lg%10lg%10lg",LSD_MAT_EL,LSD_MAT100_ET,LSD_GLT,LSD_GTR,Nu);
        //
        COMMENT("$       XT        XC        YT        YC       SXY       SYZ");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_XT,LSD_MAT_XC,LSD_MAT_YT,LSD_MAT_YC,LSDYNA_SXY,LSDYNA_SYZ);
        //
        COMMENT("$  GF1_PAR   GF2_PAR      BFIT  DMAX_PAR  GF1_PERP  GF2_PERP      DFIT DMAX_PERP");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_GF1_PAR,LSD_GF2_PAR,LSD_MAT_BFIT,LSD_MAT_DMAX1,LSD_GF1_PREP,LSD_GF2_PREP,LSD_MAT_DFIT,LSD_MAT_DMAX2);
        //
        COMMENT("$    FLPAR    FLPARC    POWPAR     FLPER    FLPERC    POWPER");        CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_FLPAR,LSD_FLPARC,LSD_POWPAR,LSD_FLPER,LSD_FLPERC,LSD_POWPER);
        //
        COMMENT("$     NPAR      CPAR      NPER      CPER");
        CARD("%10lg%10lg%10lg%10lg",LSD_NPAR,LSD_CPAR,LSD_NPER,LSD_CPER);
        //
    }
    COMMENT("$     AOPT      MACF      BETA");
    if(IO_FLAG == 2)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 6)
        {
            CARD("%10lg%10d%10lg",LOC_AOPT,LSD_MAT_USER_DEF_MACF,LSDYNA_BETA);
        }
        else
        {
            CARD("%10lg%10d%10lg",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,LOC_AOPT,LSD_SYSTEM),LSD_MAT_USER_DEF_MACF,LSDYNA_BETA);
        }
    }
    CARD_PREREAD("%10lg",LOC_AOPT);

    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,4,IMPORT);
    }
    else if(LOC_AOPT == 4.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,5,IMPORT);
    }

    if(IO_FLAG == 1)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 6)
        {
            CARD("%10lg%10d%10lg",LOC_AOPT,LSD_MAT_USER_DEF_MACF,LSDYNA_BETA);
        }
        else
        {
            CARD("%10lg%10d%10lg",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM),LSD_MAT_USER_DEF_MACF,LSDYNA_BETA);
            ASSIGN(axisOptFlag, 6, IMPORT);
        }
    }
    //
    COMMENT("$       XP        YP        ZP        A1        A2        A3");
    if(axisOptFlag == 2 || axisOptFlag == 5)
    {
        CARD("%10lg%10lg%10lg",LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP);
    }
    else if(axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg%10s%10s",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3,_BLANK_,_BLANK_);
    }
    else
    {
        BLANK;
    }
    //
    COMMENT("$       D1        D2        D3        V1        V2        V3");
    if(axisOptFlag == 3)
    {
        CARD("%10lg%10lg%10lg%10s%10s%10s",LSDYNA_D1,LSDYNA_D2,LSDYNA_D3,_BLANK_,_BLANK_,_BLANK_);
    }
    else if(axisOptFlag == 4 || axisOptFlag == 5)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_V1,LSDYNA_V2,LSDYNA_V3);
    }
    else
    {
        BLANK;
    }
    //    

}
