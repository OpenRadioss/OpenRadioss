//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 059
// 


 ATTRIBUTES(COMMON) 
 {
  
  // Initial and reference densities
  KEYWORD_STR                       = VALUE(STRING, "Solver Keyword");
  LSD_TitleOpt                      = VALUE(INT, "Title");
  CommentEnumField                  = VALUE(INT, "User Comments");
  Num_Comments                      = SIZE("No. of comment lines");
  Comments                          = ARRAY[Num_Comments](STRING, "Entity Comments");
  MatlOption                        = VALUE(INT, "Options");
  Rho                               = VALUE(FLOAT, "Mass Density");  
  LSD_MAT_EA                        = VALUE(FLOAT, "EA Young’s modulus");
  LSD_MAT_EB                        = VALUE(FLOAT, "EB Young’s modulus");
  LSD_MAT_EC                        = VALUE(FLOAT, "EC Young’s modulus");
  LSD_MAT_PRBA                      = VALUE(FLOAT, "Poisson’s ratio BA");
  LSD_MAT_PRCA                      = VALUE(FLOAT, "Poisson’s ratio CA");
  LSD_MAT_PRCB                      = VALUE(FLOAT, "Poisson’s ratio CB");
  LSD_MAT_GAB                       = VALUE(FLOAT, "GAB Shear Modulus");
  LSD_MAT_GBC                       = VALUE(FLOAT, "GBC Shear Modulus");
  LSD_MAT_GCA                       = VALUE(FLOAT, "GCA Shear Modulus");
  LSD_MAT_BULK                      = VALUE(FLOAT, "KF Bulk modulus of failed material");
  axisOptFlag                       = VALUE(INT, "Anisotropy axis definition");
  LSD_SYSTEM                        = VALUE(SYSTEM, "Material axes option");
  LSDYNA_MAT59_MAFLAG               = VALUE(INT, "Material axes change flag for brick elements.");
  LSD_NODE1                         = VALUE(NODE, "Node");
  LSDYNA_XP                         = VALUE(FLOAT, "Define coordinates of point p");
  LSDYNA_YP                         = VALUE(FLOAT, "Define coordinates of point p");
  LSDYNA_ZP                         = VALUE(FLOAT, "Define coordinates of point p");
  LSD_NODE3                         = VALUE(NODE, "Node1");
  LSD_NODE4                         = VALUE(NODE, "Node2");
  LSDYNA_A1                         = VALUE(FLOAT, "Define components of vector a");
  LSDYNA_A2                         = VALUE(FLOAT, "Define components of vector a");
  LSDYNA_A3                         = VALUE(FLOAT, "Define components of vector a");
  LSD_NODE7                         = VALUE(NODE, "Node1");
  LSD_NODE8                         = VALUE(NODE, "Node2");
  LSDYNA_D1                         = VALUE(FLOAT, "Define components of vector d");
  LSDYNA_D2                         = VALUE(FLOAT, "Define components of vector d");
  LSDYNA_D3                         = VALUE(FLOAT, "Define components of vector d");  
  LSD_NODE5                         = VALUE(NODE, "Node1");
  LSD_NODE6                         = VALUE(NODE, "Node2");
  LSDYNA_V1                         = VALUE(FLOAT, "Define components of vector v");
  LSDYNA_V2                         = VALUE(FLOAT, "Define components of vector v");
  LSDYNA_V3                         = VALUE(FLOAT, "Define components of vector v");
  LSDYNA_BETA                       = VALUE(FLOAT, "Material angle in degrees");
  LSD_TSIZE                         = VALUE(FLOAT, "Time step for automatic element deletion");
  LSD_ALP                           = VALUE(FLOAT, "Nonlinear shear stress parameter");
  LSD_SOFT                          = VALUE(FLOAT, "SSoftening reduction factor for strength in crushOFT");
  LSD_FBRT                          = VALUE(FLOAT, "FBSoftening of fiber tensile strengthRT");
  LSD_SR                            = VALUE(FLOAT, "reduction factor");
  LSD_SF                            = VALUE(FLOAT, "softening factor");
  LSD_MAT_XC                        = VALUE(FLOAT, "Longitudinal compressive strength");
  LSD_MAT_XT                        = VALUE(FLOAT, "Longitudinal tensile strength");
  LSD_MAT_YC                        = VALUE(FLOAT, "Transverse compressive strength");
  LSD_MAT_YT                        = VALUE(FLOAT, "Transverse tensile strength");
  LSD_MAT_SC                        = VALUE(FLOAT, "Shear strength,");
  LSD_SBA                           = VALUE(FLOAT, "In plane shear strength");
  LSD_SCA                           = VALUE(FLOAT, "Transverse shear strength.");
  LSD_SCB                           = VALUE(FLOAT, "Transverse shear strength.");
  LSD_XXC                           = VALUE(FLOAT, "Longitudinal compressive strength");
  LSD_YYC                           = VALUE(FLOAT, "Transverse compressive strength");
  LSD_ZZC                           = VALUE(FLOAT, "Normal compressive strength");
  LSD_XXT                           = VALUE(FLOAT, "Longitudinal tensile strength");
  LSD_YYT                           = VALUE(FLOAT, "Transverse tensile strength");
  LSD_ZZT                           = VALUE(FLOAT, "Normal tensile strength");
  AOPT_SKEW_FLAG                    = VALUE(INT,  "Flag for defining coordinate system ID number");
  LOC_AOPT                          = VALUE(FLOAT, "");
  IO_FLAG                           = VALUE(INT, "io flag");
  OPT_TYPE_STR                      = VALUE(STRING, "OPT");
  TITLE                             = VALUE(STRING, "");
  //empty_string                 = VALUE(STRING, "Used as a local variable for free format case");
  _HAS_HEADER                       = VALUE(BOOL,"Has Header Card");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

  KEYWORD_STR                   = 9000;
  CommentEnumField              = 3220;
  Num_Comments                  = 3101;
  LSD_TitleOpt                  = 90;
  Comments                      = 3100;
  MatlOption                    = 104;
  Rho                           = 118;
  LSD_MAT_EA                    = 325;
  LSD_MAT_EB                    = 326;
  LSD_MAT_EC                    = 327;
  LSD_MAT_PRBA                  = 329;
  LSD_MAT_PRCA                  = 330;
  LSD_MAT_PRCB                  = 331;
  LSD_MAT_GAB                   = 332;
  LSD_MAT_GBC                   = 333;
  LSD_MAT_GCA                   = 334;
  LSD_MAT_BULK                  = 278;  
  axisOptFlag                   = 4946;
  LSD_SYSTEM                    = 184;
  LSDYNA_MAT59_MAFLAG           = 3227;
  LSD_NODE1                     = 86;
  LSDYNA_XP                     = 136;
  LSDYNA_YP                     = 137;
  LSDYNA_ZP                     = 138;  
  LSD_NODE3                     = 2802;
  LSD_NODE4                     = 2803;
  LSDYNA_A1                     = 139;
  LSDYNA_A2                     = 140;
  LSDYNA_A3                     = 141;
  LSD_NODE5                     = 5078;
  LSD_NODE6                     = 5079;
  LSDYNA_V1                     = 142;
  LSDYNA_V2                     = 143;
  LSDYNA_V3                     = 144;
  LSD_NODE7                     = 5080;
  LSD_NODE8                     = 5081;
  LSDYNA_D1                     = 145;
  LSDYNA_D2                     = 146;
  LSDYNA_D3                     = 147; 
  LSDYNA_BETA                   = 148;
  LSD_TSIZE                     = 360;
  LSD_ALP                       = 361;
  LSD_SOFT                      = 362;
  LSD_FBRT                      = 363;
  LSD_SR                        = 1254;
  LSD_SF                        = 714;
  LSD_MAT_XC                    = 1126;
  LSD_MAT_XT                    = 346;
  LSD_MAT_YC                    = 348;
  LSD_MAT_YT                    = 347;
  LSD_MAT_SC                    = 345;
  LSD_SBA                       = 1255;
  LSD_SCA                       = 1256;
  LSD_SCB                       = 1257;
  LSD_XXC                       = 1258;
  LSD_YYC                       = 1259;
  LSD_ZZC                       = 1260;
  LSD_XXT                       = 1261;
  LSD_YYT                       = 1262;
  LSD_ZZT                       = 1263;
  AOPT_SKEW_FLAG                = -1;
  LOC_AOPT                      = -1;
  IO_FLAG                       = -1;
  OPT_TYPE_STR                  = -1;
  TITLE                         = -1;
  //empty_string             = -1;
  _HAS_HEADER                   = -1;
}

DEFAULTS(COMMON)
{
    LSD_SR                  = 0.447;
    _HAS_HEADER             = TRUE;
}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  YOUNG_MODULUS_LONGITUDINAL_DIRECTION=SCALAR(LSD_MAT_EA);
  YOUNG_MODULUS_TRANSVERSE_DIRECTION=SCALAR(LSD_MAT_EB);
  YOUNG_MODULUS_NORMAL_DIRECTION=SCALAR(LSD_MAT_EC);
  POISSON_RATIO_BA=SCALAR(LSD_MAT_PRBA);
  POISSON_RATIO_CA=SCALAR(LSD_MAT_PRCA);
  POISSON_RATIO_CB=SCALAR(LSD_MAT_PRCB);
  SHEAR_STRESS_AB=SCALAR(LSD_MAT_GAB);
  SHEAR_STRESS_BC=SCALAR(LSD_MAT_GBC);
  SHEAR_STRESS_CA=SCALAR(LSD_MAT_GCA);
  BULK_MODULUS =SCALAR(LSD_MAT_BULK);
  MATERIAL_AXES_OPTION=SCALAR(axisOptFlag);
  MATERIAL_AXES_CHANGE_FLAG=SCALAR(LSDYNA_MAT59_MAFLAG);
  MATERIAL_ANGLE=SCALAR(LSDYNA_BETA);
  TIME_STEP=SCALAR(LSD_TSIZE);
  NONLINEAR_SHEAR_STRESS_PARAMETER=SCALAR(LSD_ALP);
  SOFTENING_REDUCTION_FACTOR=SCALAR(LSD_SOFT);
  SOFTENING_OF_FIBER_TENSILE_STRENGTH=SCALAR(LSD_FBRT);
  REDUCTION_FACTOR_SR=SCALAR(LSD_SR);
  REDUCTION_FACTOR_SF=SCALAR(LSD_SF);
  LONGITUDINAL_COMPRESSIVE_STRENGTH=SCALAR(LSD_MAT_XC);
  LONGITUDINAL_TENSILE_STRENGTH=SCALAR(LSD_MAT_XT);
  TRANSVERSE_COMPRESSIVE_STRENGTH=SCALAR(LSD_MAT_YC);
  TRANSVERSE_TENSILE_STRENGTH=SCALAR(LSD_MAT_YT);
  SHEAR_STRENGTH_AB_PLANE=SCALAR(LSD_MAT_SC);
  YOUNG_MODULUS = MAX(YOUNG_MODULUS_LONGITUDINAL_DIRECTION,YOUNG_MODULUS_TRANSVERSE_DIRECTION,YOUNG_MODULUS_NORMAL_DIRECTION);
  POISSON_RATIO = MAX(POISSON_RATIO_BA,POISSON_RATIO_CA,POISSON_RATIO_CB);
  SHEAR_MODULUS = MAX(SHEAR_STRESS_AB,SHEAR_STRESS_BC,SHEAR_STRESS_CA);

    //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);

  SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+BULK_MODULUS)/MASS_DENSITY)^0.5);

}

GUI(COMMON) 
{


     ASSIGN(KEYWORD_STR, "*MAT_COMPOSITE_FAILURE");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }  
     RADIO(MatlOption)
     {
        ADD(1, "SHELL");
        ADD(2, "SOLID");
        ADD(3, "SPH");
     }
     if(MatlOption == 1)
     {
           ASSIGN(KEYWORD_STR, "_SHELL");
     } 
     if(MatlOption == 2)
     {
           ASSIGN(KEYWORD_STR, "_SOLID");
     }  
     if(MatlOption == 3)
     {
           ASSIGN(KEYWORD_STR, "_SPH");
     }
     ASSIGN(KEYWORD_STR, "_MODEL");
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
           ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                        { DIMENSION="density";}
     SCALAR(LSD_MAT_EA)                 {DIMENSION="pressure";}
     SCALAR(LSD_MAT_EB)                 {DIMENSION="pressure";}
     SCALAR(LSD_MAT_EC)                 {DIMENSION="pressure";}
     SCALAR(LSD_MAT_PRBA)               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_PRCA)               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_PRCB)               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_GAB)                {DIMENSION="pressure";}
     SCALAR(LSD_MAT_GBC)                {DIMENSION="pressure";}
     SCALAR(LSD_MAT_GCA)                {DIMENSION="pressure";}
     SCALAR(LSD_MAT_BULK)               {DIMENSION="pressure";}
     RADIO(axisOptFlag)
     {
        ADD(1, "0.0: Locally orthotropic: axis given by nodes 1,2 and 4");
        ADD(2, "1.0: Locally orthotropic: a-dir given by a point and global location of element center");
        ADD(3, "2.0: Globally orthotropic: axis given by vectors");
        ADD(4, "3.0: Locally orthotropic: axis given by rotating the material axes by an angle BETA");
        ADD(5, "4.0: Locally orhtotropic: cylindrical coordinate given by vector v and point P");
        ADD(6, "By System");
     }
     if(axisOptFlag == 5)
     {
        DATA(LSD_SYSTEM);
     }
     RADIO(LSDYNA_MAT59_MAFLAG)
     {
        ADD(1, "1: No change (default)");
        ADD(2, "2: Switch material axes a and b");
        ADD(3, "3: Switch material axes a and c");
        ADD(4, "4: Switch material axes b and c");
     }
     if(axisOptFlag == 1.0 || axisOptFlag == 4.0)
     {
        DATA(LSD_NODE1);
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],FALSE);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],FALSE);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],FALSE);
     }
     if(axisOptFlag == 3.0 || axisOptFlag == 4.0)
     {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],FALSE);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],FALSE);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],FALSE);
     }
     if(axisOptFlag == 0.0 && MatlOption == 1 || axisOptFlag == 3.0)
     {
        SCALAR(LSDYNA_BETA)             {DIMENSION="a";}
     }
     if(axisOptFlag == 2.0)
     {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],FALSE);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],FALSE);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],FALSE);
     }
     if(axisOptFlag == 2.0)
     {
        DATA(LSD_NODE7);                
        DATA(LSD_NODE8);                
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],FALSE);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],FALSE);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],FALSE);    
     }
     if(MatlOption == 1)
     {
        SCALAR(LSD_TSIZE)               {DIMENSION="t";}
        SCALAR(LSD_ALP)                 {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_SOFT)                {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_FBRT)                {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_SR)                  {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_SF)                  {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_XC)              {DIMENSION="pressure";}
        SCALAR(LSD_MAT_XT)              {DIMENSION="pressure";}
        SCALAR(LSD_MAT_YC)              {DIMENSION="pressure";}
        SCALAR(LSD_MAT_YT)              {DIMENSION="pressure";}
        SCALAR(LSD_MAT_SC)              {DIMENSION="pressure";}
     }
     if(MatlOption == 2 || MatlOption== 3)
     {
        SCALAR(LSD_SBA)                 {DIMENSION="pressure";}
        SCALAR(LSD_SCA)                 {DIMENSION="pressure";}
        SCALAR(LSD_SCB)                 {DIMENSION="pressure";}
        SCALAR(LSD_XXC)                 {DIMENSION="pressure";}
        SCALAR(LSD_YYC)                 {DIMENSION="pressure";}
        SCALAR(LSD_ZZC)                 {DIMENSION="pressure";}
        SCALAR(LSD_XXT)                 {DIMENSION="pressure";}
        SCALAR(LSD_YYT)                 {DIMENSION="pressure";}
        SCALAR(LSD_ZZT)                 {DIMENSION="pressure";}
     }
/*
  mandatory:
    graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/SHELL);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);

    if(IO_FLAG == 1)
    {
        HEADER("*MAT_COMPOSITE_FAILURE%4s",OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && OPT_TYPE_STR != "_SHE" && OPT_TYPE_STR != "_SOL" && OPT_TYPE_STR != "_SPH")
    {
        HEADER("*MAT_059%4s",OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && OPT_TYPE_STR == "_SHE")
    {
        ASSIGN(MatlOption, 1, IMPORT);
    }
    if(IO_FLAG == 1 && OPT_TYPE_STR == "_SOL")
    {
        ASSIGN(MatlOption, 2, IMPORT);
    }
    if(IO_FLAG == 1 && OPT_TYPE_STR == "_SPH")
    {
        ASSIGN(MatlOption, 3, IMPORT);
    }
    if(IO_FLAG == 2 && MatlOption == 1 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_COMPOSITE_FAILURE_SHELL_MODEL");
    }
    else if(IO_FLAG == 2 && MatlOption == 2 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_COMPOSITE_FAILURE_SOLID_MODEL");
    }
    else if(IO_FLAG == 2 && MatlOption == 3 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_COMPOSITE_FAILURE_SPH_MODEL");
    }
    else if(IO_FLAG == 2 && MatlOption == 1 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_COMPOSITE_FAILURE_SHELL_MODEL_TITLE");
        CARD("%-80s", TITLE);
    }
    else if(IO_FLAG == 2 && MatlOption == 2 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_COMPOSITE_FAILURE_SOLID_MODEL_TITLE");
        CARD("%-80s", TITLE);
    }
    else if(IO_FLAG == 2 && MatlOption == 3 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_COMPOSITE_FAILURE_SPH_MODEL_TITLE");
        CARD("%-80s", TITLE);
    }

    //
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE8 != NONE && LSD_NODE7 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    //
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 5 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,4.0,EXPORT);
    }

      //
      COMMENT("$      MID       RHO        EA        EB        EC      PRBA      PRCA      PRCB");
      CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSD_MAT_EA,LSD_MAT_EB,LSD_MAT_EC,LSD_MAT_PRBA,LSD_MAT_PRCA,LSD_MAT_PRCB);
      //
      COMMENT("$      GAB       GBC       GCA        KF      AOPT      MACF");
      CARD_PREREAD("%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,LOC_AOPT);
    if(IO_FLAG == 2)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 6)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_GAB,LSD_MAT_GBC,LSD_MAT_GCA,LSD_MAT_BULK,LOC_AOPT,LSDYNA_MAT59_MAFLAG);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_GAB,LSD_MAT_GBC,LSD_MAT_GCA,LSD_MAT_BULK,SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,LOC_AOPT,LSD_SYSTEM),LSDYNA_MAT59_MAFLAG); 
        }
    }
    CARD_PREREAD("%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,4,IMPORT);
    }
    else if(LOC_AOPT == 4.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,5,IMPORT);
    }

    if(IO_FLAG == 1)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 6)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_GAB,LSD_MAT_GBC,LSD_MAT_GCA,LSD_MAT_BULK,LOC_AOPT,LSDYNA_MAT59_MAFLAG);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_GAB,LSD_MAT_GBC,LSD_MAT_GCA,LSD_MAT_BULK,SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM),LSDYNA_MAT59_MAFLAG); 
            ASSIGN(axisOptFlag, 6, IMPORT);
        }
    }
      //
    COMMENT("$       XP        YP        ZP        A1        A2        A3");
    if(axisOptFlag == 2 || axisOptFlag == 5)
    {
        CARD("%10lg%10lg%10lg",LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP);
    }
    else if(axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
    }
    else
    {
        BLANK;
    }
    //
    COMMENT("$       V1        V2        V3        D1        D2        D3      BETA");
    if(axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
    }
    else if(axisOptFlag == 4)
    {
        CARD("%10lg%10lg%10lg%10s%10s%10s%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,LSDYNA_BETA);
    }
    else if(axisOptFlag == 5)
    {
        CARD("%10lg%10lg%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3);
    }
    else if(axisOptFlag == 1)
    {
        CARD("%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSDYNA_BETA);
    }
    else
    {
        BLANK;
    }
      //
     if(MatlOption == 1)
     {
          //
          COMMENT("$    TSIZE       ALP      SOFT      FBRT        SR        SF");
          CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_TSIZE,LSD_ALP,LSD_SOFT,LSD_FBRT,LSD_SR,LSD_SF);
          //
          COMMENT("$     XC        XT        YC        YT        SC");
          CARD("%10lg%10lg%10lg%10lg%10lg",LSD_MAT_XC,LSD_MAT_XT,LSD_MAT_YC,LSD_MAT_YT,LSD_MAT_SC);
          //
     }
     if(MatlOption == 2 || MatlOption == 3)
     {
          //
          COMMENT("$      SBA       SCA       SCB       XXC       YYC       ZZC");
          CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_SBA,LSD_SCA,LSD_SCB,LSD_XXC,LSD_YYC,LSD_ZZC);
          //
          COMMENT("$      XXT       YYT       ZZT");
          CARD("%10lg%10lg%10lg",LSD_XXT,LSD_YYT,LSD_ZZT);
          //
     }

}