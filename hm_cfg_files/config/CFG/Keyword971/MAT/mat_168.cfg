//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 168
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    E                                       = VALUE(FLOAT,  "E");
    LSD_CR                                  = VALUE(FLOAT,  "CR");
    LSD_DG                                  = VALUE(FLOAT,  "DG");
    LSD_GAMMA0                              = VALUE(FLOAT,  "GAMMA0");
    LSD_MAT_C                               = VALUE(FLOAT,  "C");
    LSD_MAT_K                               = VALUE(FLOAT,  "K");
    LSD_MAT_N                               = VALUE(FLOAT,  "N");
    LSD_MAT_SC                              = VALUE(FLOAT,  "SC");
    LSD_MAT_ST                              = VALUE(FLOAT,  "ST");
    LSD_TEMP                                = VALUE(FLOAT,  "TEMP");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    Nu                                      = VALUE(FLOAT,  "PR");
    Rho                                     = VALUE(FLOAT,  "Rho");

}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    E                                       = 119;
    LSD_CR                                  = 7615;
    LSD_DG                                  = 6067;
    LSD_GAMMA0                              = 6066;
    LSD_MAT_C                               = 313;
    LSD_MAT_K                               = 1131;
    LSD_MAT_N                               = 312;
    LSD_MAT_SC                              = 345;
    LSD_MAT_ST                              = 352;
    LSD_TEMP                                = 4289;
    LSD_TitleOpt                            = 90;
    Nu                                      = 120;
    Num_Comments                            = 3101;
    Rho                                     = 118;

}

DRAWABLES(COMMON)
{  
  public:  
  MASS_DENSITY=SCALAR(Rho);  
  YOUNG_MODULUS=SCALAR(E);  
  POISSON_RATIO=SCALAR(Nu);   
  ENERGY_BARRIER_TO_FLOW=SCALAR(LSD_DG);  
  ABSOLUTE_TEMPERATURE=SCALAR(LSD_TEMP); 
  
  public:
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
  private:
   G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
   C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
   public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^(1/2));
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_POLYMER");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
     SCALAR(Rho)                            {DIMENSION="density";}  
     SCALAR(E)                              {DIMENSION="pressure";}  
     SCALAR(Nu)                             {DIMENSION="DIMENSIONLESS";}  
     SCALAR(LSD_GAMMA0)                     {DIMENSION="DIMENSIONLESS";}  
     SCALAR(LSD_DG)                         {DIMENSION="DIMENSIONLESS";}  
     SCALAR(LSD_MAT_SC)                     {DIMENSION="DIMENSIONLESS";}  
     SCALAR(LSD_MAT_ST)                     {DIMENSION="DIMENSIONLESS";}  
     SCALAR(LSD_TEMP)                       {DIMENSION="k";}
     SCALAR(LSD_MAT_K)                      {DIMENSION="DIMENSIONLESS";}  
     SCALAR(LSD_CR)                         {DIMENSION="DIMENSIONLESS";}  
     SCALAR(LSD_MAT_N)                      {DIMENSION="DIMENSIONLESS";}  
     SCALAR(LSD_MAT_C)                      {DIMENSION="DIMENSIONLESS";}
/*
  graphical SUPPORT("Part(s) to which material is applied")
  {
        OBJECTS=(/COMPONENT/BRICK);
        ADD(COMPONENT,"Parts");
  }
*/
}

// File format
FORMAT(Keyword971) 
{
    //
    COMMENT("$      MID       RHO         E        PR    GAMMA0        DG        SC        ST");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,LSD_GAMMA0,LSD_DG,LSD_MAT_SC,LSD_MAT_ST);
    //
    COMMENT("$     TEMP         K        CR         N         C");
    CARD("%10lg%10lg%10lg%10lg%10lg",LSD_TEMP,LSD_MAT_K,LSD_MAT_N,LSD_MAT_N,LSD_MAT_C);  
    //

}
