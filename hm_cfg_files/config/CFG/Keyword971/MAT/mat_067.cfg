//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 067
// 

ATTRIBUTES(COMMON)  
{
    // Initial and reference densities
    KEYWORD_STR                       = VALUE(STRING, "Solver Keyword");
    LSD_TitleOpt                      = VALUE(INT, "Title");
    CommentEnumField                  = VALUE(INT, "User Comments");
    Num_Comments                      = SIZE("No. of comment lines");
    Comments                          = ARRAY[Num_Comments](STRING, "Entity Comments");
    Rho                               = VALUE(FLOAT, "Rho");  
    MATL67_LCIDTR                     = VALUE(FUNCT, "translational force along local r-axis VS relative translational disp.");
    MATL67_LCIDTS                     = VALUE(FUNCT, "translational force along local s-axis VS relative translational disp.");
    MATL67_LCIDTT                     = VALUE(FUNCT, "translational force along local t-axis VS relative translational disp.");
    MATL67_LCIDRR                     = VALUE(FUNCT, "rotational moment along local r-axis VS relative rotational disp.");
    MATL67_LCIDRS                     = VALUE(FUNCT, "rotational moment along local s-axis VS relative rotational disp.");
    MATL67_LCIDRT                     = VALUE(FUNCT, "rotational moment along local t-axis VS relative rotational disp.");
    MATL67_LCIDTDR                    = VALUE(FUNCT, "translational damping force along local r-axis VS relative translational velocity");
    MATL67_LCIDTDS                    = VALUE(FUNCT, "translational damping force along local s-axis VS relative translational velocity");
    MATL67_LCIDTDT                    = VALUE(FUNCT, "translational damping force along local t-axis VS relative translational velocity");
    MATL67_LCIDRDR                    = VALUE(FUNCT, "rotational damping moment along local r-axis VS relative rotational velocity");
    MATL67_LCIDRDS                    = VALUE(FUNCT, "rotational damping moment along local s-axis VS relative rotational velocity");
    MATL67_LCIDRDT                    = VALUE(FUNCT, "rotational damping moment along local t-axis VS relative rotational velocity");
    LSDYNA_FOR                        = VALUE(FLOAT, "Preload force in r-direction");
    LSDYNA_FOS                        = VALUE(FLOAT, "Preload force in s-direction");
    LSDYNA_FOT                        = VALUE(FLOAT, "Preload force in t-direction");
    LSDYNA_MOR                        = VALUE(FLOAT, "Preload moment about r-axis");
    LSDYNA_MOS                        = VALUE(FLOAT, "Preload moment about s-axis");
    LSDYNA_MOT                        = VALUE(FLOAT, "Preload moment about t-axis");
    LSD_MAT67_FailureOpt              = VALUE(INT, "Failure");
    LSD_MAT68_FFAILR                  = VALUE(FLOAT, "Optional failure parameter");
    LSD_MAT68_FFAILS                  = VALUE(FLOAT, "Optional failure parameter");
    LSD_MAT68_FFAILT                  = VALUE(FLOAT, "Optional failure parameter");
    LSD_MAT68_MFAILR                  = VALUE(FLOAT, "Optional failure parameter");
    LSD_MAT68_MFAILS                  = VALUE(FLOAT, "Optional failure parameter");
    LSD_MAT68_MFAILT                  = VALUE(FLOAT, "Optional failure parameter");
    LSD_MAT68_UFAILR                  = VALUE(FLOAT, "Optional failure parameter");
    LSD_MAT68_UFAILS                  = VALUE(FLOAT, "Optional failure parameter");
    LSD_MAT68_UFAILT                  = VALUE(FLOAT, "Optional failure parameter");
    LSD_MAT68_TFAILR                  = VALUE(FLOAT, "Optional failure parameter");
    LSD_MAT68_TFAILS                  = VALUE(FLOAT, "Optional failure parameter");
    LSD_MAT68_TFAILT                  = VALUE(FLOAT, "Optional failure parameter");
    OptionalCard                      = VALUE(INT,   "Optional card");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                   = 9000;
    CommentEnumField              = 3220;
    Num_Comments                  = 3101;
    LSD_TitleOpt                  = 90;
    Comments                      = 3100;
    Rho                           = 118; 
    MATL67_LCIDTR                 = 3501;
    MATL67_LCIDTS                 = 3502;
    MATL67_LCIDTT                 = 3503;
    MATL67_LCIDRR                 = 3504;
    MATL67_LCIDRS                 = 3505;
    MATL67_LCIDRT                 = 3506;
    MATL67_LCIDTDR                = 3507;
    MATL67_LCIDTDS                = 3508;
    MATL67_LCIDTDT                = 3509;
    MATL67_LCIDRDR                = 3510;
    MATL67_LCIDRDS                = 3511;
    MATL67_LCIDRDT                = 3512;
    LSDYNA_FOR                    = 5517;
    LSDYNA_FOS                    = 5518;
    LSDYNA_FOT                    = 5519;
    LSDYNA_MOR                    = 5520;
    LSDYNA_MOS                    = 5521;
    LSDYNA_MOT                    = 5522;
    LSD_MAT67_FailureOpt          = 6250;
    LSD_MAT68_FFAILR              = 2754;
    LSD_MAT68_FFAILS              = 2755;
    LSD_MAT68_FFAILT              = 2756;
    LSD_MAT68_MFAILR              = 2757;
    LSD_MAT68_MFAILS              = 2758;
    LSD_MAT68_MFAILT              = 2759;
    LSD_MAT68_UFAILR              = 2760;
    LSD_MAT68_UFAILS              = 2761;
    LSD_MAT68_UFAILT              = 2762;
    LSD_MAT68_TFAILR              = 2763;
    LSD_MAT68_TFAILS              = 2764;
    LSD_MAT68_TFAILT              = 2765;
    OptionalCard                  = -1;
}

DRAWABLES(COMMON)
{
public:
  MASS_DENSITY=SCALAR(Rho);
}

GUI(COMMON) 
{
    ASSIGN(KEYWORD_STR, "*MAT_NONLINEAR_ELASTIC_DISCRETE_BEAM");
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    }
    if(CommentEnumField == 2)
    {  
    SIZE(Num_Comments);
    ARRAY(Num_Comments,"")
    {
        SCALAR(Comments);
    }
    }     
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    } 
 mandatory:
    SCALAR(Rho)                         { DIMENSION="density";}
 optional:
    FUNCTION(MATL67_LCIDTR)
    {
      X_TITLE = "Trans disp r-axis"; X_DIMENSION = "l";
      Y_TITLE = "Trans force r-axis"; Y_DIMENSION = "force";
    }
    FUNCTION(MATL67_LCIDTS)
    {
      X_TITLE = "Trans disp s-axis"; X_DIMENSION = "l";
      Y_TITLE = "Trans force s-axis"; Y_DIMENSION = "force";
    }
    FUNCTION(MATL67_LCIDTT)
    {
      X_TITLE = "Trans disp t-axis"; X_DIMENSION = "l";
      Y_TITLE = "Trans force t-axis"; Y_DIMENSION = "force";
    }
    FUNCTION(MATL67_LCIDRR)
    {
      X_TITLE = "Rotation r-axis"; X_DIMENSION = "a";
      Y_TITLE = "Moment r-axis"; Y_DIMENSION = "moment";
    }
    FUNCTION(MATL67_LCIDRS)
    {
      X_TITLE = "Rotation s-axis"; X_DIMENSION = "a";
      Y_TITLE = "Moment s-axis"; Y_DIMENSION = "moment";
    }
    FUNCTION(MATL67_LCIDRT)
    {
      X_TITLE = "Rotation t-axis"; X_DIMENSION = "a";
      Y_TITLE = "Moment t-axis"; Y_DIMENSION = "moment";
    }
    FUNCTION(MATL67_LCIDTDR)
    {
      X_TITLE = "Velocity r-axis"; X_DIMENSION = "velocity";
      Y_TITLE = "Damping force r-axis"; Y_DIMENSION = "force";
    }
    FUNCTION(MATL67_LCIDTDS)
    {
      X_TITLE = "Velocity s-axis"; X_DIMENSION = "velocity";
      Y_TITLE = "Damping force s-axis"; Y_DIMENSION = "force";
    }
    FUNCTION(MATL67_LCIDTDT)
    {
      X_TITLE = "Velocity t-axis"; X_DIMENSION = "velocity";
      Y_TITLE = "Damping force t-axis"; Y_DIMENSION = "force";
    }
    FUNCTION(MATL67_LCIDRDR)
    {
      X_TITLE = "Rotation velocity r-axis"; X_DIMENSION = "ang_velocity";
      Y_TITLE = "Moment r-axis"; Y_DIMENSION = "moment";
    }
    FUNCTION(MATL67_LCIDRDS)
    {
      X_TITLE = "Rotation velocity s-axis"; X_DIMENSION = "ang_velocity";
      Y_TITLE = "Moment s-axis"; Y_DIMENSION = "moment";
    }
    FUNCTION(MATL67_LCIDRDT)
    {
      X_TITLE = "Rotation velocity t-axis"; X_DIMENSION = "ang_velocity";
      Y_TITLE = "Moment t-axis"; Y_DIMENSION = "moment";
    }
    SCALAR(LSDYNA_FOR)                  {DIMENSION="force";}
    SCALAR(LSDYNA_FOS)                  {DIMENSION="force";}
    SCALAR(LSDYNA_FOT)                  {DIMENSION="force";}
    SCALAR(LSDYNA_MOR)                  {DIMENSION="moment";}
    SCALAR(LSDYNA_MOS)                  {DIMENSION="moment";}
    SCALAR(LSDYNA_MOT)                  {DIMENSION="moment";}
    FLAG(LSD_MAT67_FailureOpt);
    if(LSD_MAT67_FailureOpt == TRUE)
    {
    SCALAR(LSD_MAT68_FFAILR)        {DIMENSION="force";}
    SCALAR(LSD_MAT68_FFAILS)        {DIMENSION="force";}
    SCALAR(LSD_MAT68_FFAILT)        {DIMENSION="force";}
    SCALAR(LSD_MAT68_MFAILR)        {DIMENSION="moment";}
    SCALAR(LSD_MAT68_MFAILS)        {DIMENSION="moment";}
    SCALAR(LSD_MAT68_MFAILT)        {DIMENSION="moment";}
    SCALAR(LSD_MAT68_UFAILR)        {DIMENSION="l";}
    SCALAR(LSD_MAT68_UFAILS)        {DIMENSION="l";}
    SCALAR(LSD_MAT68_UFAILT)        {DIMENSION="l";}
    SCALAR(LSD_MAT68_TFAILR)        {DIMENSION="a";}
    SCALAR(LSD_MAT68_TFAILS)        {DIMENSION="a";}
    SCALAR(LSD_MAT68_TFAILT)        {DIMENSION="a";}
    }
/*
    graphical SUPPORT("Part(s) to which material is applied") {
    OBJECTS=(/COMPONENT/BEAM,/COMPONENT/SPRING,/COMPONENT/TRUSS,/COMPONENT/RIVET);
    ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    COMMENT("$      MID       RHO    LCIDTR    LCIDTS    LCIDTT    LCIDRR    LCIDRS    LCIDRT");
    CARD("%10d%10lg%10d%10d%10d%10d%10d%10d",_ID_,Rho,MATL67_LCIDTR,MATL67_LCIDTS,MATL67_LCIDTT,MATL67_LCIDRR,MATL67_LCIDRS,MATL67_LCIDRT);

    COMMENT("$  LCIDTDR   LCIDTDS   LCIDTDT   LCIDRDR   LCIDRDS   LCIDRDT");
    CARD("%10d%10d%10d%10d%10d%10d",MATL67_LCIDTDR,MATL67_LCIDTDS,MATL67_LCIDTDT,MATL67_LCIDRDR,MATL67_LCIDRDS,MATL67_LCIDRDT);

    ASSIGN(OptionalCard, 1, EXPORT);
    COMMENT("$      FOR       FOS       FOT       MOR       MOS       MOT");
    FREE_CARD(OptionalCard,"%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_FOR,LSDYNA_FOS,LSDYNA_FOT,LSDYNA_MOR,LSDYNA_MOS,LSDYNA_MOT);

    if (LSD_MAT67_FailureOpt == TRUE)
    {
        COMMENT("$   FFAILR    FFAILS    FFAILT    MFAILR    MFAILS    MFAILT");
    }
    FREE_CARD(LSD_MAT67_FailureOpt,"%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT68_FFAILR,LSD_MAT68_FFAILS,LSD_MAT68_FFAILT,LSD_MAT68_MFAILR,LSD_MAT68_MFAILS,LSD_MAT68_MFAILT);

    if (LSD_MAT67_FailureOpt == TRUE)
    {
        COMMENT("$   UFAILR    UFAILS    UFAILT    TFAILR    TFAILS    TFAILT");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT68_UFAILR,LSD_MAT68_UFAILS,LSD_MAT68_UFAILT,LSD_MAT68_TFAILR,LSD_MAT68_TFAILS,LSD_MAT68_TFAILT);
    }
}
