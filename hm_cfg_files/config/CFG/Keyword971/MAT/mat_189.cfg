//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 189
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    LSDYNA_A1                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A2                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A3                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_BETA                             = VALUE(FLOAT,  "Material angle in degrees");
    LSDYNA_D1                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D2                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D3                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_V1                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V2                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V3                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_XP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSDYNA_YP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSDYNA_ZP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSD_MAT_REF                             = VALUE(FLOAT,  "Use initial geometry to initialize the stress tensor");
    LSD_NODE1                               = VALUE(NODE,  "Node");
    LSD_NODE3                               = VALUE(NODE,  "Node1");
    LSD_NODE4                               = VALUE(NODE,  "Node2");
    LSD_NODE5                               = VALUE(NODE,  "Node1");
    LSD_NODE6                               = VALUE(NODE,  "Node2");
    LSD_NODE7                               = VALUE(NODE,  "Node1");
    LSD_NODE8                               = VALUE(NODE,  "Node2");
    LSD_SYSTEM                              = VALUE(SYSTEM,  "coordinate system ID number");
    LSD_TREF                                = VALUE(FLOAT,  "Reference temperature for the calculation of thermal loads");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    MAT221_MACF                             = VALUE(INT,  "Material axis change flag for brick elements");
    MATL189_C11                             = VALUE(FUNCT,  "Curve IDs defining the 6*6 symmetric constitutive matrix as function of temp.");
    MATL189_C12                             = VALUE(FUNCT,  "Curve IDs defining the 6*6 symmetric constitutive matrix as function of temp.");
    MATL189_C13                             = VALUE(FUNCT,  "Curve IDs defining the 6*6 symmetric constitutive matrix as function of temp.");
    MATL189_C14                             = VALUE(FUNCT,  "Curve IDs defining the 6*6 symmetric constitutive matrix as function of temp.");
    MATL189_C15                             = VALUE(FUNCT,  "Curve IDs defining the 6*6 symmetric constitutive matrix as function of temp.");
    MATL189_C16                             = VALUE(FUNCT,  "Curve IDs defining the 6*6 symmetric constitutive matrix as function of temp.");
    MATL189_C22                             = VALUE(FUNCT,  "Curve IDs defining the 6*6 symmetric constitutive matrix as function of temp.");
    MATL189_C23                             = VALUE(FUNCT,  "Curve IDs defining the 6*6 symmetric constitutive matrix as function of temp.");
    MATL189_C24                             = VALUE(FUNCT,  "Curve IDs defining the 6*6 symmetric constitutive matrix as function of temp.");
    MATL189_C25                             = VALUE(FUNCT,  "Curve IDs defining the 6*6 symmetric constitutive matrix as function of temp.");
    MATL189_C26                             = VALUE(FUNCT,  "Curve IDs defining the 6*6 symmetric constitutive matrix as function of temp.");
    MATL189_C33                             = VALUE(FUNCT,  "Curve IDs defining the 6*6 symmetric constitutive matrix as function of temp.");
    MATL189_C34                             = VALUE(FUNCT,  "Curve IDs defining the 6*6 symmetric constitutive matrix as function of temp.");
    MATL189_C35                             = VALUE(FUNCT,  "Curve IDs defining the 6*6 symmetric constitutive matrix as function of temp.");
    MATL189_C36                             = VALUE(FUNCT,  "Curve IDs defining the 6*6 symmetric constitutive matrix as function of temp.");
    MATL189_C44                             = VALUE(FUNCT,  "Curve IDs defining the 6*6 symmetric constitutive matrix as function of temp.");
    MATL189_C45                             = VALUE(FUNCT,  "Curve IDs defining the 6*6 symmetric constitutive matrix as function of temp.");
    MATL189_C46                             = VALUE(FUNCT,  "Curve IDs defining the 6*6 symmetric constitutive matrix as function of temp.");
    MATL189_C55                             = VALUE(FUNCT,  "Curve IDs defining the 6*6 symmetric constitutive matrix as function of temp.");
    MATL189_C56                             = VALUE(FUNCT,  "Curve IDs defining the 6*6 symmetric constitutive matrix as function of temp.");
    MATL189_C66                             = VALUE(FUNCT,  "Curve IDs defining the 6*6 symmetric constitutive matrix as function of temp.");
    MATL189_TA1                             = VALUE(FUNCT,  "Coefficients of thermal expansion vs temperature");
    MATL189_TA2                             = VALUE(FUNCT,  "Coefficients of thermal expansion vs temperature");
    MATL189_TA3                             = VALUE(FUNCT,  "Coefficients of thermal expansion vs temperature");
    MATL189_TA4                             = VALUE(FUNCT,  "Coefficients of thermal expansion vs temperature");
    MATL189_TA5                             = VALUE(FUNCT,  "Coefficients of thermal expansion vs temperature");
    MATL189_TA6                             = VALUE(FUNCT,  "Coefficients of thermal expansion vs temperature");
    MATL189_TGE                             = VALUE(FUNCT,  "Curve defining the structural damping coefficient as function of temp.");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    axisOptFlag                             = VALUE(INT,  "Anisotropy axis definition");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    IO_FLAG                                 = VALUE(INT, "io flag");
    _HMCOMMENTSFLAG                         = VALUE(INT, "Write HM Comments");
    TITLE                                   = VALUE(STRING, "Title");
    EncTypeEnumField                        = VALUE(INT,  "Type");
    RegTypeEnumField                        = VALUE(INT,  "Type");
    LOC_AOPT                                = VALUE(FLOAT, "");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    LSDYNA_A1                               = 139;
    LSDYNA_A2                               = 140;
    LSDYNA_A3                               = 141;
    LSDYNA_BETA                             = 148;
    LSDYNA_D1                               = 145;
    LSDYNA_D2                               = 146;
    LSDYNA_D3                               = 147;
    LSDYNA_V1                               = 142;
    LSDYNA_V2                               = 143;
    LSDYNA_V3                               = 144;
    LSDYNA_XP                               = 136;
    LSDYNA_YP                               = 137;
    LSDYNA_ZP                               = 138;
    LSD_MAT_REF                             = 359;
    LSD_NODE1                               = 86;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_NODE7                               = 5080;
    LSD_NODE8                               = 5081;
    LSD_SYSTEM                              = 184;
    LSD_TREF                                = 1643;
    LSD_TitleOpt                            = 90;
    MAT221_MACF                             = 1451;
    MATL189_C11                             = 8008;
    MATL189_C12                             = 8009;
    MATL189_C13                             = 8010;
    MATL189_C14                             = 8011;
    MATL189_C15                             = 8012;
    MATL189_C16                             = 8013;
    MATL189_C22                             = 8014;
    MATL189_C23                             = 8015;
    MATL189_C24                             = 8016;
    MATL189_C25                             = 8017;
    MATL189_C26                             = 8018;
    MATL189_C33                             = 8019;
    MATL189_C34                             = 8020;
    MATL189_C35                             = 8021;
    MATL189_C36                             = 8022;
    MATL189_C44                             = 8023;
    MATL189_C45                             = 8024;
    MATL189_C46                             = 8025;
    MATL189_C55                             = 8026;
    MATL189_C56                             = 8027;
    MATL189_C66                             = 8028;
    MATL189_TA1                             = 8002;
    MATL189_TA2                             = 8003;
    MATL189_TA3                             = 8004;
    MATL189_TA4                             = 8005;
    MATL189_TA5                             = 8006;
    MATL189_TA6                             = 8007;
    MATL189_TGE                             = 8029;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    axisOptFlag                             = 4946;
    AOPT_SKEW_FLAG                          = -1;
    EncTypeEnumField                        = 5828;
    RegTypeEnumField                        = 5827;
    TITLE                                   = -1;
    LOC_AOPT                                = -1;
    IO_FLAG                                 = -1;
    //empty_string                       = -1;       
}

DRAWABLES(COMMON) {
 public:
      MASS_DENSITY=SCALAR(Rho);
       AXES_OPTION = SCALAR(axisOptFlag);
       //
       MATERIAL_ANGLE= SCALAR(LSDYNA_BETA);
       REFERENCE_GEOMETRY= SCALAR(LSD_MAT_REF);
}

DEFAULTS(COMMON)
{
}

CHECK(COMMON){
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_ANISOTROPIC_THERMOELASTIC");
     RADIO(CommentEnumField)
     {
         ////ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory: 
     SCALAR(Rho)                                        {DIMENSION="density";}
     DATA(MATL189_TA1);
     DATA(MATL189_TA2);
     DATA(MATL189_TA3);
     DATA(MATL189_TA4);
     DATA(MATL189_TA5);
     DATA(MATL189_TA6);
     DATA(MATL189_C11);
     DATA(MATL189_C12);
     DATA(MATL189_C13);
     DATA(MATL189_C14);
     DATA(MATL189_C15);
     DATA(MATL189_C16);
     DATA(MATL189_C22);
     DATA(MATL189_C23);
     DATA(MATL189_C24);
     DATA(MATL189_C25);
     DATA(MATL189_C26);
     DATA(MATL189_C33);
     DATA(MATL189_C34);
     DATA(MATL189_C35);
     DATA(MATL189_C36);
     DATA(MATL189_C44);
     DATA(MATL189_C45);
     DATA(MATL189_C46);
     DATA(MATL189_C55);
     DATA(MATL189_C56);
     DATA(MATL189_C66);
     DATA(MATL189_TGE);
     SCALAR(LSD_TREF)                                   {DIMENSION="k";}
     RADIO(axisOptFlag)
     {
          ADD(1, "0.0: Locally orthotropic: axis given by nodes 1,2 and 4");
          ADD(2, "1.0: Locally orthotropic: a-dir given by a point and global location of element center");
          ADD(3, "2.0: Globally orthotropic: axis given by vectors");
          ADD(4, "3.0: Locally orthotropic: axis given by rotating the material axes by an angle BETA");
          ADD(5, "4.0: Locally orhtotropic: cylindrical coordinate given by vector v and point P");
          ADD(6, "By System");
     }
     if(axisOptFlag == 6)
     {
        DATA(LSD_SYSTEM);
     }
     if(axisOptFlag == 2 || axisOptFlag == 5)
     {
 mandatory:
        DATA(LSD_NODE1);
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],FALSE);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],FALSE);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],FALSE);
        //SCALAR(LSDYNA_XP)               {DIMENSION="l";}
        //SCALAR(LSDYNA_YP)               {DIMENSION="l";}
        //SCALAR(LSDYNA_ZP)               {DIMENSION="l";}
     }
     if(axisOptFlag == 3)
     {
 mandatory:
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],FALSE);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],FALSE);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],FALSE);
        //SCALAR(LSDYNA_A1)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_A2)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_A3)               {DIMENSION="DIMENSIONLESS";}
     }
     RADIO(MAT221_MACF)
     {
        ADD(1, "1: No change (default)");
        ADD(2, "2: Switch material axes a and b");
        ADD(3, "3: Switch material axes a and c");
        ADD(4, "4: Switch material axes b and c");
     }
     if(axisOptFlag == 4 || axisOptFlag == 5)
     {
 mandatory:
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],FALSE);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],FALSE);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],FALSE);
        //SCALAR(LSDYNA_V1)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_V2)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_V3)               {DIMENSION="DIMENSIONLESS";}
     }     
     else if(axisOptFlag == 3)
     {
        DATA(LSD_NODE7);                
        DATA(LSD_NODE8);                
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],FALSE);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],FALSE);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],FALSE);
        //SCALAR(LSDYNA_D1)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_D2)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_D3)               {DIMENSION="DIMENSIONLESS";}
     }     
     if(axisOptFlag == 4)
     {
         SCALAR(LSDYNA_BETA)            {DIMENSION="a";}
     }
     RADIO(LSD_MAT_REF)
     {
        ADD(0.0, "0.0: Off");
        ADD(1.0, "1.0: On");
     }     
/*
    graphical SUPPORT("Part(s) to which material is applied") {
        OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/SHELL,/COMPONENT/PENTA6,/COMPONENT/SHEL16,/COMPONENT/TSHELL);
        ADD(COMPONENT,"Parts");
    }
*/     
}

// File format
FORMAT(Keyword971) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);
    //
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE8 != NONE && LSD_NODE7 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    //
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 5 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,4.0,EXPORT);
    }
    //
    COMMENT("$      MID       RHO       TA1       TA2       TA3       TA4       TA5       TA6");
    CARD("%10d%10lg%10d%10d%10d%10d%10d%10d",_ID_,Rho,MATL189_TA1,MATL189_TA2,MATL189_TA3,MATL189_TA4,MATL189_TA5,MATL189_TA6);
    //
    COMMENT("$      C11       C12       C13       C14       C15       C16       C22       C23");
    CARD("%10d%10d%10d%10d%10d%10d%10d%10d",MATL189_C11,MATL189_C12,MATL189_C13,MATL189_C14,MATL189_C15,MATL189_C16,MATL189_C22,MATL189_C23);
    //
    COMMENT("$      C24       C25       C26       C33       C34       C35       C36       C44");
    CARD("%10d%10d%10d%10d%10d%10d%10d%10d",MATL189_C24,MATL189_C25,MATL189_C26,MATL189_C33,MATL189_C34,MATL189_C35,MATL189_C36,MATL189_C44);
    //
    COMMENT("$      C45       C46       C55       C56       C66       TGE      TREF      AOPT");
    if(IO_FLAG == 2)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 6)
        {
            CARD("%10d%10d%10d%10d%10d%10d%10lg%10lg",MATL189_C45,MATL189_C46,MATL189_C55,MATL189_C56,MATL189_C66,MATL189_TGE,LSD_TREF,LOC_AOPT);
        }
        else
        {
            CARD("%10d%10d%10d%10d%10d%10d%10lg%10lg",MATL189_C45,MATL189_C46,MATL189_C55,MATL189_C56,MATL189_C66,MATL189_TGE,LSD_TREF,SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM));
        }
    }
    CARD_PREREAD("%10s%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,4,IMPORT);
    }
    else if(LOC_AOPT == 4.0 && IO_FLAG == 1)
    {
          ASSIGN(axisOptFlag, 5, IMPORT);
    }
    if(IO_FLAG == 1)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 6)
        {
            CARD("%10d%10d%10d%10d%10d%10d%10lg%10lg",MATL189_C45,MATL189_C46,MATL189_C55,MATL189_C56,MATL189_C66,MATL189_TGE,LSD_TREF,LOC_AOPT);
        }
        else
        {
            CARD("%10d%10d%10d%10d%10d%10d%10lg%10lg",MATL189_C45,MATL189_C46,MATL189_C55,MATL189_C56,MATL189_C66,MATL189_TGE,LSD_TREF,SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM));
            ASSIGN(axisOptFlag, 6, IMPORT);
        }
    }
    //
    COMMENT("$       XP        YP        ZP        A1        A2        A3      MACF");
    if(axisOptFlag == 2 || axisOptFlag == 5)
    {
        CARD("%10lg%10lg%10lg%10s%10s%10s%10d",LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP,_BLANK_,_BLANK_,_BLANK_,MAT221_MACF);
    }
    else if(axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg%10d",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3,MAT221_MACF);
    }
    else
    {
        CARD("%10s%10s%10s%10s%10s%10s%10d",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,MAT221_MACF);
    }
    //
    COMMENT("$       V1        V2        V3        D1        D2        D3      BETA       REF   ");
    if(axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg%10s%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3,_BLANK_,LSD_MAT_REF);
    }
    else if(axisOptFlag == 4)
    {
        CARD("%10lg%10lg%10lg%10s%10s%10s%10lg%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,LSDYNA_BETA,LSD_MAT_REF);
    }
    else if(axisOptFlag == 5)
    {
        CARD("%10lg%10lg%10lg%10s%10s%10s%10s%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_MAT_REF);
    }
    else
    {
        CARD("%10s%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_MAT_REF);
    }
    //
}
