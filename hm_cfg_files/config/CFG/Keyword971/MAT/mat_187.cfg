//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 187
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    DEPRPTFunctCURVE                        = VALUE(FUNCT,  "DEPRPT is defined as function of the triaxiality");
    DEPRPT_CURVE_FLAG                       = VALUE(INT,  "DEPRPT_CURVE_FLAG");
    EPFAILPSFail                            = VALUE(FUNCT,  "EPFAIL as a function of the plastic strain rate");
    EPFAILPlasticStrainFlag                 = VALUE(INT,  "EPFAILPlasticStrainFlag");
    LCIDDStressStrainFlag                   = VALUE(INT,  "LCIDDStressStrainFlag");
    LSD_ASAF                                = VALUE(FLOAT,  "Safety factor");
    LSD_DEPRPT                              = VALUE(FLOAT,  "Increment of equivalent plastic strain between failure point and rupture point");
    LSD_EMOD                                = VALUE(FLOAT,  "Youngs modulus");
    LSD_GMOD                                = VALUE(FLOAT,  "Shear modulus");
    LSD_ICONV                               = VALUE(INT,  "Formulation flag");
    LSD_IQUAD                               = VALUE(INT,  "Flag to control the failure evolution as a function of triaxiality");
    LSD_LCID                                = VALUE(FUNCT,  "Load curve or table giving the yield stress as a function of plastic strain");
    LSD_LCID2                               = VALUE(FUNCT,  "Load curve giving the yield stress as a function of plastic strain");
    LSD_LCID3                               = VALUE(FUNCT,  "Load curve giving the yield stress as a function of plastic strain");
    LSD_LCID4                               = VALUE(FUNCT,  "Load curve giving the yield stress as a function of plastic strain");
    LSD_LCID5                               = VALUE(FUNCT,  "Load curve giving the plastic Poisson's ratio as a function of plastic strain");
    LSD_LCID6                               = VALUE(FUNCT,  "damage parameter vs equivalent plastic strain during uniaxial tensile testing");
    LSD_LCID7                               = VALUE(FUNCT,  "Load curve that specifies a factor that works multiplicatively on the value of EPFAIL depending on the triaxiality");
    LSD_LCID8                               = VALUE(FUNCT,  "Load curve that specifies a factor that works multiplicatively on the value of EPFAIL depending on a characteristic element length");
    LSD_MAT_BULK                            = VALUE(FLOAT,  "Bulk modulus");
    LSD_MAT_DC                              = VALUE(FLOAT,  "Parameter is the equivalent plastic strain at failure");
    LSD_MIPS                                = VALUE(INT,  "Maximum number of iterations in the secant iteration performed to enforce plane stress");
    LSD_MITER                               = VALUE(INT,  "Maximum number of iterations in the cutting plane algorithm");
    LSD_NUE                                 = VALUE(FLOAT,  "Poisson ratio");
    LSD_NUEP                                = VALUE(FLOAT,  "Plastic Poissons ratio");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    MAT187_INCDAM                           = VALUE(INT,  "Flag to control the damage evolution as a function of triaxiality");
    MAT187_NUMINT                           = VALUE(INT,  "Number of integration points which must fail before the element is deleted");
    MAT187_RBCFAC                           = VALUE(FLOAT,  "Ratio of yield in biaxial compression vs yield in uniaxial compression");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    IO_FLAG                                 = VALUE(INT, "io flag");
    _HMCOMMENTSFLAG                         = VALUE(INT, "Write HM Comments");
    TITLE                                   = VALUE(STRING, "Title");
    EncTypeEnumField                        = VALUE(INT,  "Type");
    RegTypeEnumField                        = VALUE(INT,  "Type");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");       
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    DEPRPTFunctCURVE                        = 7195;
    DEPRPT_CURVE_FLAG                       = 7194;
    EPFAILPSFail                            = 7196;
    EPFAILPlasticStrainFlag                 = 7189;
    LCIDDStressStrainFlag                   = 7190;
    LSD_ASAF                                = 821;
    LSD_DEPRPT                              = 816;
    LSD_EMOD                                = 813;
    LSD_GMOD                                = 812;
    LSD_ICONV                               = 820;
    LSD_IQUAD                               = 819;
    LSD_LCID                                = 45;
    LSD_LCID2                               = 168;
    LSD_LCID3                               = 170;
    LSD_LCID4                               = 171;
    LSD_LCID5                               = 172;
    LSD_LCID6                               = 199;
    LSD_LCID7                               = 200;
    LSD_LCID8                               = 224;
    LSD_MAT_BULK                            = 278;
    LSD_MAT_DC                              = 1186;
    LSD_MIPS                                = 817;
    LSD_MITER                               = 2089;
    LSD_NUE                                 = 814;
    LSD_NUEP                                = 815;
    LSD_TitleOpt                            = 90;
    MAT187_INCDAM                           = 7191;
    MAT187_NUMINT                           = 7188;
    MAT187_RBCFAC                           = 7187;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    EncTypeEnumField                        = 5828;
    RegTypeEnumField                        = 5827;
    TITLE                                   = -1;
    IO_FLAG                                 = -1;
    //empty_string                       = -1;
}

DEFAULTS(COMMON)
{
    LSD_MAT_DC    = 1.0e+5;
    LSD_ASAF    = 1.0;
    LSD_MITER   = 400.0;
}

CHECK(COMMON){
}

DRAWABLES(COMMON){
  MASS_DENSITY= SCALAR(Rho) ;
  BULK_MODULUS     = SCALAR(LSD_MAT_BULK);
  SHEAR_MODULUS     = SCALAR(LSD_GMOD);
  YOUNG_MODULUS = SCALAR(LSD_EMOD) ;
  POISSON_RATIO = SCALAR(LSD_NUE);
 public:
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 public:
  SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+BULK_MODULUS)/MASS_DENSITY)^0.5);
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_SAMP-1");
     RADIO(CommentEnumField)
     {
         ////ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                                {DIMENSION="density";}
 optional:    
     SCALAR(LSD_MAT_BULK)                       {DIMENSION="pressure";}
     SCALAR(LSD_GMOD)                           {DIMENSION="pressure";}
 mandatory:    
     SCALAR(LSD_EMOD)                           {DIMENSION="pressure";}
 optional:
     SCALAR(LSD_NUE)                            {DIMENSION="DIMENSIONLESS";}
     SCALAR(MAT187_RBCFAC);
     SCALAR(MAT187_NUMINT)                      {DIMENSION="DIMENSIONLESS";} 
 mandatory:
     DATA(LSD_LCID);
 optional:
     DATA(LSD_LCID2);
     DATA(LSD_LCID3);
     DATA(LSD_LCID4);
     SCALAR(LSD_NUEP)                           {DIMENSION="DIMENSIONLESS";} 
     DATA(LSD_LCID5);
     RADIO(MAT187_INCDAM)
     {
        ADD(0, "0: Damage evolution is independent of the triaxiality");
        ADD(1, "1: An incremental formulation is used to compute the damage");
     }
     FLAG(LCIDDStressStrainFlag);
     if(LCIDDStressStrainFlag == FALSE || LCIDDStressStrainFlag == TRUE)
     {
        DATA(LSD_LCID6);
     }
     FLAG(EPFAILPlasticStrainFlag);
     if(EPFAILPlasticStrainFlag == FALSE)
     {
        SCALAR(LSD_MAT_DC)                      {DIMENSION="DIMENSIONLESS";} 
     }
     if(EPFAILPlasticStrainFlag == TRUE)
     {
        DATA(EPFAILPSFail);
     }
     FLAG(DEPRPT_CURVE_FLAG);
     if(DEPRPT_CURVE_FLAG == FALSE)
     {
        SCALAR(LSD_DEPRPT)                      {DIMENSION="DIMENSIONLESS";} 
     }
     if(DEPRPT_CURVE_FLAG == TRUE)
     {
        DATA(DEPRPTFunctCURVE);
     }
     DATA(LSD_LCID7);
     DATA(LSD_LCID8);
     SCALAR(LSD_MITER)                          {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MIPS)                           {DIMENSION="DIMENSIONLESS";}
     RADIO(LSD_IQUAD)
     {
        ADD(-1, "-1: The failure model is deactivated");
        ADD( 0, " 0: Failure evolution is independent of the triaxiality");
        ADD( 1, " 1: Incremental formulation is used to compute the failure value");
     }
     RADIO(LSD_ICONV)
     {
        ADD(0, "0: Default");
        ADD(1, "1: Yield surf; internally modified by increasing the shear yield surface is achieved");
     }
     if(LSD_ICONV == 1)
     {
        SCALAR(LSD_ASAF)                           {DIMENSION="DIMENSIONLESS";}
     }
/*
    graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/SHELL);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    //
    COMMENT("$      MID       RHO      BULK      GMOD      EMOD       NUE    RBCFAC    NUMINT");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10d",_ID_,Rho,LSD_MAT_BULK,LSD_GMOD,LSD_EMOD,LSD_NUE,MAT187_RBCFAC,MAT187_NUMINT);
    //
    COMMENT("$   LCID-T    LCID-C    LCID-S    LCID-B      NUEP    LCID-P              INCDAM");
    CARD("%10d%10d%10d%10d%10lg%10d%10s%10d",LSD_LCID,LSD_LCID2,LSD_LCID3,LSD_LCID4,LSD_NUEP,LSD_LCID5,_BLANK_,MAT187_INCDAM);
    //
    COMMENT("$   LCID-D    EPFAIL    DEPRPT  LCID-TRI   LCID_LC                              ");
    CARD("%10d%10lg%10lg%10d%10d",FLAGGED_OBJECT(LSD_LCID6,LCIDDStressStrainFlag),SCALAR_OR_OBJECT(EPFAILPlasticStrainFlag,LSD_MAT_DC,EPFAILPSFail),SCALAR_OR_OBJECT(DEPRPT_CURVE_FLAG,LSD_DEPRPT,DEPRPTFunctCURVE),LSD_LCID7,LSD_LCID8);
    //
    COMMENT("$    MITER      MIPS               IQUAD     ICONV      ASAF                    ");
    CARD_PREREAD("%10s%10s%10s%10s%10d",_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_ICONV);
    if(LSD_ICONV == 1)
    {
        CARD("%10d%10d%10s%10d%10d%10lg",LSD_MITER,LSD_MIPS,_BLANK_,LSD_IQUAD,LSD_ICONV,LSD_ASAF);
    }
    else
    {
        CARD("%10d%10d%10s%10d%10d",LSD_MITER,LSD_MIPS,_BLANK_,LSD_IQUAD,LSD_ICONV);
    }
    //
}
