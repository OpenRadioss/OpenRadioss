//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 146
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    DOF                                     = VALUE(INT,  "Active dof at node 1");
    DOF1                                    = VALUE(INT,  "Active dof at node 2");
    LSD_CID                                 = VALUE(SYSTEM,  "Coordinate system at node 1");
    LSD_CID2                                = VALUE(SYSTEM,  "Coordinate system at node 2");
    LSD_MAT_K                               = VALUE(FLOAT,  "Spring stiffness");
    LSD_MAT_C                               = VALUE(FLOAT,  "Damping constant");
    LSD_MAT_SFS1                            = VALUE(FLOAT,  "Scale factor on force at node 1");
    LSD_MAT_SFS2                            = VALUE(FLOAT,  "Scale factor on force at node 2");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    Rho                                     = VALUE(FLOAT,  "Mass Density");

}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    DOF                                     = 2774;
    DOF1                                    = 4561;
    LSD_CID                                 = 412;
    LSD_CID2                                = 414;
    LSD_MAT_C                               = 313;
    LSD_MAT_K                               = 1131;
    LSD_MAT_SFS1                            = 375;
    LSD_MAT_SFS2                            = 377;
    LSD_TitleOpt                            = 90;
    Num_Comments                            = 3101;
    Rho                                     = 118;

}

DEFAULTS(COMMON)
{

    LSD_MAT_SFS1    = 1.0;
    LSD_MAT_SFS2    = 1.0;

}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  SPRING_STIFFNESS=SCALAR(LSD_MAT_K);
  DAMPING_CONSTANT=SCALAR(LSD_MAT_C);
  SCALE_FACTOR_ON_FORCE_AT_NODE_1=SCALAR(LSD_MAT_SFS1);
  SCALE_FACTOR_ON_FORCE_AT_NODE_2=SCALAR(LSD_MAT_SFS2);
}

GUI(COMMON)
{
     ASSIGN(KEYWORD_STR, "*MAT_1DOF_GENERALIZED_SPRING");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {
         SIZE(Num_Comments );
         ARRAY(Num_Comments,"")
         {
           SCALAR(Comments );
         }
     }
     FLAG( LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
          ASSIGN(KEYWORD_STR,"_TITLE");
     }
 mandatory:
     SCALAR(Rho)                        {DIMENSION="density";}
 optional:
     SCALAR(LSD_MAT_K)                  {DIMENSION="translation_stiffness";}
     SCALAR(LSD_MAT_C)                  {DIMENSION="eddyviscosity";}
     SCALAR(LSD_MAT_SFS1)               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_SFS2)               {DIMENSION="DIMENSIONLESS";}
     RADIO(DOF)
     {
        ADD(1, "1: X translation");
        ADD(2, "2: Y translation");
        ADD(3, "3: Z translation");
        ADD(4, "4: X rotation");
        ADD(5, "5: Y rotation");
        ADD(6, "6: Z rotation");
     }
     RADIO(DOF1)
     {
        ADD(1, "1: X translation");
        ADD(2, "2: Y translation");
        ADD(3, "3: Z translation");
        ADD(4, "4: X rotation");
        ADD(5, "5: Y rotation");
        ADD(6, "6: Z rotation");
     }     
     DATA(LSD_CID);
     DATA(LSD_CID2);
/*
    graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/SPRING);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    //
    COMMENT("$      MID       RHO         K         C     SCLN1     SCLN2     DOFN1     DOFN2");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10d%10d",_ID_,Rho,LSD_MAT_K,LSD_MAT_C,LSD_MAT_SFS1,LSD_MAT_SFS2,DOF,DOF1);
    //
    COMMENT("$     CID1      CID2");
    CARD("%10d%10d",LSD_CID,LSD_CID2);
    //
}
