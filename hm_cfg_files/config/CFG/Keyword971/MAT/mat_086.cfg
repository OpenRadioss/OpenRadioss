//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 086
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");    
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    LSDYNA_K                                = VALUE(FLOAT,  "Elastic bulk modulus");
    LSDYNA_EA                               = VALUE(FLOAT,  "Youngs Modulus");
    LSDYNA_EB                               = VALUE(FLOAT,  "Youngs Modulus");
    LSDYNA_EC                               = VALUE(FLOAT,  "Youngs Modulus");
    LSDYNA_GAB                              = VALUE(FLOAT,  "Shear modulus");
    LSDYNA_GBC                              = VALUE(FLOAT,  "Shear modulus");
    LSDYNA_GCA                              = VALUE(FLOAT,  "Shear modulus");
    LSDYNA_PRBA                             = VALUE(FLOAT,  "Poissons ratio");
    LSDYNA_PRCA                             = VALUE(FLOAT,  "Poissons ratio");
    LSDYNA_PRCB                             = VALUE(FLOAT,  "Poissons ratio");
    G                                       = VALUE(FLOAT,  "short-time shear modulus");
    LSDYNA_A1                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A2                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A3                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_D1                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D2                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D3                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_V1                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V2                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V3                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_BETA                             = VALUE(FLOAT,  "decay constant");
    LSDYNA_DA                               = VALUE(FLOAT,  "long-time shear modulus");
    LSDYNA_VF                               = VALUE(FLOAT,  "Volume fraction of viscoelastic material");
    LSD_MANGLE                              = VALUE(FLOAT,  "Material angle in degrees");
    LSD_NODE3                               = VALUE(NODE,  "Node1");
    LSD_NODE4                               = VALUE(NODE,  "Node2");
    LSD_NODE5                               = VALUE(NODE,  "Node1");
    LSD_NODE6                               = VALUE(NODE,  "Node2");
    LSD_NODE7                               = VALUE(NODE,  "Node1");
    LSD_NODE8                               = VALUE(NODE,  "Node2");
    LSD_SYSTEM                              = VALUE(SYSTEM,  "AOPT");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    axisOptFlag                             = VALUE(INT,  "Anisotropy axis definition");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    OPT_TYPE_STR                            = VALUE(STRING, "OPT");
    IO_FLAG                                 = VALUE(INT, "io flag");
    LOC_AOPT                                = VALUE(FLOAT, "");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    G                                       = 121;
    LSDYNA_A1                               = 139;
    LSDYNA_A2                               = 140;
    LSDYNA_A3                               = 141;
    LSDYNA_BETA                             = 148;
    LSDYNA_D1                               = 145;
    LSDYNA_D2                               = 146;
    LSDYNA_D3                               = 147;
    LSDYNA_DA                               = 122;
    LSDYNA_EA                               = 126;
    LSDYNA_EB                               = 127;
    LSDYNA_EC                               = 128;
    LSDYNA_GAB                              = 132;
    LSDYNA_GBC                              = 133;
    LSDYNA_GCA                              = 134;
    LSDYNA_K                                = 124;
    LSDYNA_PRBA                             = 129;
    LSDYNA_PRCA                             = 130;
    LSDYNA_PRCB                             = 131;
    LSDYNA_V1                               = 142;
    LSDYNA_V2                               = 143;
    LSDYNA_V3                               = 144;
    LSDYNA_VF                               = 221;
    LSD_MANGLE                              = 4716;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_NODE7                               = 5080;
    LSD_NODE8                               = 5081;
    LSD_SYSTEM                              = 184;
    LSD_TitleOpt                            = 90;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    axisOptFlag                             = 4946;
    AOPT_SKEW_FLAG                          = -1;
    IO_FLAG                                 = -1;
    OPT_TYPE_STR                            = -1;
    LOC_AOPT                                = -1;
    //empty_string                       = -1;
}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  YOUNG_MODULUS_EA=SCALAR(LSDYNA_EA);
  YOUNG_MODULUS_EB=SCALAR(LSDYNA_EB);
  YOUNG_MODULUS_EC=SCALAR(LSDYNA_EC);
  VOLUME_FRACTION_OF_VISCOELASTIC_MATERIAL=SCALAR(LSDYNA_VF);
  ELASTIC_BULK_MODULUS=SCALAR(LSDYNA_K);
  SHORT-TIME_SHEAR_MODULUS=SCALAR(G);
  LONG-TIME_SHEAR_MODULUS=SCALAR(LSDYNA_DA);
  DECAY_CONSTANT=SCALAR(LSDYNA_BETA);
  POISSON_RATIO_VBA=SCALAR(LSDYNA_PRBA);
  POISSON_RATIO_VCA=SCALAR(LSDYNA_PRCA);
  POISSON_RATIO_VCB=SCALAR(LSDYNA_PRCB);
  SHEAR_MODULUS_GAB=SCALAR(LSDYNA_GAB);
  SHEAR_MODULUS_GBC=SCALAR(LSDYNA_GBC);
  SHEAR_MODULUS_GCA=SCALAR(LSDYNA_GCA);
  MATERIAL_AXES_OPTION=SCALAR(axisOptFlag);
  MATERIAL_ANGLE_IN_DEGREES_FOR_AOPT3=SCALAR(LSD_MANGLE);
  YOUNG_MODULUS = MAX(YOUNG_MODULUS_EA,YOUNG_MODULUS_EB,YOUNG_MODULUS_EC);
  POISSON_RATIO = MAX(POISSON_RATIO_VBA,POISSON_RATIO_VCA,POISSON_RATIO_VCB);
  SHEAR_MODULUS = MAX(SHEAR_MODULUS_GAB,SHEAR_MODULUS_GBC,SHEAR_MODULUS_GCA);
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 public:
  SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+ELASTIC_BULK_MODULUS)/MASS_DENSITY)^0.5);
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_ORTHOTROPIC_VISCOELASTIC");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                        {DIMENSION="density";}
 optional:
     SCALAR(LSDYNA_EA)                  {DIMENSION="pressure";}
     SCALAR(LSDYNA_EB)                  {DIMENSION="pressure";}
     SCALAR(LSDYNA_EC)                  {DIMENSION="pressure";}
     SCALAR(LSDYNA_VF)                  {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_K)                   {DIMENSION="pressure";}
     SCALAR(G)                          {DIMENSION="pressure";}
     SCALAR(LSDYNA_DA)                  {DIMENSION="pressure";}
     SCALAR(LSDYNA_BETA)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_PRBA)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_PRCA)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_PRCB)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_GAB)                 {DIMENSION="pressure";}
     SCALAR(LSDYNA_GBC)                 {DIMENSION="pressure";}
     SCALAR(LSDYNA_GCA)                 {DIMENSION="pressure";}
     RADIO(axisOptFlag)
     {
        ADD(1, "By element nodes");
        ADD(2, "Define global vector");
        ADD(3, "Define local vector");
        ADD(4, "Pick system");
     }
     if(axisOptFlag == 4)
     {
        DATA(LSD_SYSTEM);
     }
     if(axisOptFlag == 1 || axisOptFlag == 3)
     {
        SCALAR(LSD_MANGLE)                       {DIMENSION="a";}
     }
     if(axisOptFlag == 2)
     {     
         DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],FALSE);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],FALSE);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],FALSE);
        DATA(LSD_NODE7);                
        DATA(LSD_NODE8);                
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],FALSE);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],FALSE);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],FALSE);

     }
     if(axisOptFlag == 3)
     {     
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],FALSE);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],FALSE);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],FALSE);
     }
/*
      graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/SHELL,/COMPONENT/TSHELL);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971)
{
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    if(LSD_NODE7 != NONE && LSD_NODE8 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    //
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    //
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);
    //
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,4.0,EXPORT);
    }
    //
    COMMENT("$      MID       RHO        EA        EB        EC        VF         K");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSDYNA_EA,LSDYNA_EB,LSDYNA_EC,LSDYNA_VF,LSDYNA_K);
    //
    COMMENT("$       G0      GINF      BETA      PRBA      PRCA      PRCB");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",G,LSDYNA_DA,LSDYNA_BETA,LSDYNA_PRBA,LSDYNA_PRCA,LSDYNA_PRCB);
    //
    COMMENT("$      GAB       GBC       GCA      AOPT    MANGLE");
    if(IO_FLAG == 2)
    {
        if(axisOptFlag == 3)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,LOC_AOPT,LSD_MANGLE);
        }
        else if(axisOptFlag == 1 || axisOptFlag == 2)
        {
            CARD("%10lg%10lg%10lg%10lg",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,LOC_AOPT);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10d",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,FLAGGED_OBJECT(LSD_SYSTEM,AOPT_SKEW_FLAG));
        }
    }
    CARD_PREREAD("%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    if(IO_FLAG == 1)
    {
        if(axisOptFlag == 3)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,LOC_AOPT,LSD_MANGLE);
        }
        else if(axisOptFlag == 1 || axisOptFlag == 2)
        {
            CARD("%10lg%10lg%10lg%10lg",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,LOC_AOPT);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10d",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,FLAGGED_OBJECT(LSD_SYSTEM,AOPT_SKEW_FLAG));
            ASSIGN(axisOptFlag, 4, IMPORT);
        }
    }
    //
    COMMENT("$                                     A1        A2        A3");
    if(axisOptFlag == 2)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
    }
    else
    {
        BLANK;
    }
    //
    COMMENT("$       V1        V2        V3        D1        D2        D3");
    if(axisOptFlag == 2)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
    }
    else if(axisOptFlag == 3)
    {
        CARD("%10lg%10lg%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3);
    }
    else
    {
        BLANK;
    }
}
