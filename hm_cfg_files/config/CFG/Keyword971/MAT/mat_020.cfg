//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 020
//


ATTRIBUTES(COMMON)
{
    // Initial and reference densities
    KEYWORD_STR                     = VALUE(STRING, "Solver Keyword");
    LSD_TitleOpt                    = VALUE(INT, "Title");
    CommentEnumField                = VALUE(INT, "User Comments");
    Num_Comments                    = SIZE("No. of comment lines");
    Comments                        = ARRAY[Num_Comments](STRING, "Entity Comments");
    RegTypeEnumField                = VALUE(INT, "Type");
    Rho                             = VALUE(FLOAT, "Rho");  
    E                               = VALUE(FLOAT, "E");
    Nu                              = VALUE(FLOAT, "NU");
    LSDYNA_N                        = VALUE(FLOAT, "N");
    LSDYNA_COUPLE                   = VALUE(FLOAT, "COUPLE");
    LSDYNA_M                        = VALUE(FLOAT, "M");
    LSDYNA_ALIAS                    = VALUE(STRING, "ALIAS");
    LSDYNA_CMO                      = VALUE(FLOAT, "CMO");
    LSD_CON1                        = VALUE(INT, "CON1");
    LSD_CON2int                     = VALUE(INT, "CON2");
    LSD_CID                         = VALUE(SYSTEM, "CON1");
    ConstrainedXTranslation         = VALUE(INT, "ConstrainedXTranslation");
    ConstrainedYTranslation         = VALUE(INT, "ConstrainedYTranslation");
    ConstrainedZTranslation         = VALUE(INT, "ConstrainedZTranslation");
    ConstrainedXRotation            = VALUE(INT, "ConstrainedXRotation");
    ConstrainedYRotation            = VALUE(INT, "ConstrainedYRotation");
    ConstrainedZRotation            = VALUE(INT, "ConstrainedZRotation");
    MATL_OPTION                     = VALUE(INT, "LocalCoordinateSystem");
    LSDYNA_A1                       = VALUE(FLOAT, "A1");  
    LSDYNA_A2                       = VALUE(FLOAT, "A2");
    LSDYNA_A3                       = VALUE(FLOAT, "A3");
    LSDYNA_V1                       = VALUE(FLOAT, "V1");
    LSDYNA_V2                       = VALUE(FLOAT, "V2");
    LSDYNA_V3                       = VALUE(FLOAT, "V3");
    LSD_SYSTEM                      = VALUE(SYSTEM, "LCO");
    IO_FLAG                         = VALUE(INT, "IO");
    LOCAL_A2                        = VALUE(STRING, "To check for the coordinate flag");
    LOCAL_XT                        = VALUE(STRING, "XT");
    LOCAL_YT                        = VALUE(STRING, "YT");
    LOCAL_ZT                        = VALUE(STRING, "ZT");
    LOCAL_XR                        = VALUE(STRING, "XR");
    LOCAL_YR                        = VALUE(STRING, "YR");
    LOCAL_ZR                        = VALUE(STRING, "ZR");
    LOCAL_CON2                      = VALUE(INT, "local (SPC) constraint");
    LOCAL_CON2_TEMP                 = VALUE(INT, "local (SPC) constraint");
    empty_string    = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    IO_FLAG                       = -1;
    LOCAL_A2                      = -1;
    LOCAL_XT                      = -1;
    LOCAL_YT                      = -1;
    LOCAL_ZT                      = -1;
    LOCAL_XR                      = -1;
    LOCAL_YR                      = -1;
    LOCAL_ZR                      = -1;
    LOCAL_CON2                    = -1;
    LOCAL_CON2_TEMP               = -1;
    KEYWORD_STR                   = 9000;
    CommentEnumField              = 3220;
    Num_Comments                  = 3101;
    LSD_TitleOpt                  = 90;
    Comments                      = 3100;
    RegTypeEnumField              =5827;
    Rho                           = 118;
    E                             = 119;
    Nu                            = 120;
    LSDYNA_N                      = 71;
    LSDYNA_COUPLE                 = 178;
    LSDYNA_M                      = 72;
    LSDYNA_ALIAS                  = 180;
    LSDYNA_CMO                    = 181;
    LSD_CON1                      = 3090;
    LSD_CON2int                   = 3091;
    LSD_CID                       = 412;
    ConstrainedXTranslation       = 6471;
    ConstrainedYTranslation       = 6472;
    ConstrainedZTranslation       = 6473;
    ConstrainedXRotation          = 6474;
    ConstrainedYRotation          = 6475;
    ConstrainedZRotation          = 6476;  
    MATL_OPTION                   = 999;
    LSDYNA_A1                     = 139;
    LSDYNA_A2                     = 140;
    LSDYNA_A3                     = 141;
    LSDYNA_V1                     = 142;
    LSDYNA_V2                     = 143;
    LSDYNA_V3                     = 144;
    LSD_SYSTEM                    = 184;
    empty_string                  = -1;
}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY=SCALAR(Rho);
    YOUNG_MODULUS=SCALAR(E);
    POISSON_RATIO=SCALAR(Nu);
    COUPLING_FLAG_N=SCALAR(LSDYNA_N);
    COUPLING_OPTION=SCALAR(LSDYNA_COUPLE);
    COUPLING_FLAG_M=SCALAR(LSDYNA_M);

    CENTER_OF_MASS_CONSTRAINT_OPTION=SCALAR(LSDYNA_CMO);
    FIRST_CONSTRAINT_PARAMETER=SCALAR(LSD_CON1);
    SECOND_CONSTRAINT_PARAMETER=SCALAR(LSD_CON2int);
public:
    //SOUND_SPEED is speed for ISDO = 0 and 1
    SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
    SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
private:
    G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*MAT_RIGID");
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
            SCALAR(Comments);
        }
    }  
    RADIO(RegTypeEnumField)
    {
        ADD(1, "Regular");
    }
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    } 
mandatory:
    SCALAR(Rho)             { DIMENSION="density";}
    SCALAR(E)               {DIMENSION="pressure";}
optional:
    SCALAR(Nu)              { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_N)        {DIMENSION="DIMENSIONLESS";}
    RADIO(LSDYNA_COUPLE)
    {
        ADD(-1.0, "-1: Attach VDA surface");
        ADD( 0.0, " 0: Undeformed geometry corresponds to the local system for MADYMO/CAL3D");
        ADD( 1.0, " 1: Undeformed geometry corresponds to the global system for MADYMO/CAL3D");
        ADD( 2.0, " 2: Generate a mesh for the ellipsoids and planes internally in LS-DYNA");
    }
    SCALAR(LSDYNA_M)        {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_ALIAS)    {DIMENSION="DIMENSIONLESS";}
    RADIO(LSDYNA_CMO)
    {
        ADD(-1.0, "-1.0: Constraints applied in local directions (SPC constraint)");
        ADD( 0.0, " 0.0: No constraints");
        ADD( 1.0, " 1.0: Constraints applied in global directions");
    }
    if(LSDYNA_CMO == 1.0)
    {
        RADIO(LSD_CON1)
        {
            ADD(0, "0: No constraints");
            ADD(1, "1: Constrained x displacement");
            ADD(2, "2: Constrained y displacement");
            ADD(3, "3: Constrained z displacement");
            ADD(4, "4: Constrained x and y displacement");
            ADD(5, "5: Constrained y and z displacement");
            ADD(6, "6: Constrained z and x displacement");
            ADD(7, "7: Constrained x,y, and z displacement");
        }
        RADIO(LSD_CON2int)
        {
            ADD(0, "0: No constraints");
            ADD(1, "1: Constrained x rotation");
            ADD(2, "2: Constrained y rotation");
            ADD(3, "3: Constrained z rotation");
            ADD(4, "4: Constrained x and y rotation");
            ADD(5, "5: Constrained y and z rotation");
            ADD(6, "6: Constrained z and x rotation");
            ADD(7, "7: Constrained x,y, and z rotation");
        }
    }
    if(LSDYNA_CMO == -1.0)
    {
        DATA(LSD_CID);
        FLAG(ConstrainedXTranslation);
        FLAG(ConstrainedYTranslation);
        FLAG(ConstrainedZTranslation);
        FLAG(ConstrainedXRotation);
        FLAG(ConstrainedYRotation);
        FLAG(ConstrainedZRotation);        
    }
    /*
    if(LSDYNA_CMO == -1.0 && ConstrainedXTranslation == TRUE)
    {
    ASSIGN(CON2, CON2 + 100000)
    }
    if(LSDYNA_CMO == -1.0 && ConstrainedYTranslation == TRUE)
    {
    ASSIGN(CON2, CON2 + 10000)
    }
    if(LSDYNA_CMO == -1.0 && ConstrainedZTranslation == TRUE)       //--------------------CON2 IS HARD CODED--------------------
    {
    ASSIGN(CON2, CON2 + 1000)
    }
    if(LSDYNA_CMO == -1.0 && ConstrainedXRotation == TRUE)
    {
    ASSIGN(CON2, CON2 + 100)
    }
    if(LSDYNA_CMO == -1.0 && ConstrainedYRotation == TRUE)
    {
    ASSIGN(CON2, CON2 + 10)
    }
    if(LSDYNA_CMO == -1.0 && ConstrainedZRotation == TRUE)
    {
    ASSIGN(CON2, CON2 + 1)
    }
    */
    FLAG(MATL_OPTION);
    if(MATL_OPTION == FALSE)
    {
        SCALAR(LSDYNA_A1)       {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_A2)       {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_A3)       {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_V1)       {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_V2)       {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_V3)       {DIMENSION="DIMENSIONLESS";}
    }
    if(MATL_OPTION == TRUE)
    {
        DATA(LSD_SYSTEM);
    }
    /*
    optional:
    graphical SUPPORT("Part(s) to which material is applied") {
    OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/BEAM,/COMPONENT/SPRING,/COMPONENT/TRUSS,/COMPONENT/RIVET,/COMPONENT/SHELL,/COMPONENT/PENTA6,/COMPONENT/SHEL16,/COMPONENT/TSHELL);
    ADD(COMPONENT,"Parts");
    }
    */

}

// File format
FORMAT(Keyword971)
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    ASSIGN(LOCAL_CON2,0, EXPORT);
    
    COMMENT("$      MID       RHO         E        PR         N    COUPLE         M     ALIAS");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10s",_ID_,Rho,E,Nu,LSDYNA_N,LSDYNA_COUPLE,LSDYNA_M,LSDYNA_ALIAS);

    //Following code is to handle export
    if(IO_FLAG == 2 && LSDYNA_CMO == -1.0)
    {
        if(ConstrainedXTranslation == 1)
        {
            ASSIGN(LOCAL_CON2,_ADD(LOCAL_CON2,100000), EXPORT);
        }
        if(ConstrainedYTranslation == 1)
        {
            ASSIGN(LOCAL_CON2,_ADD(LOCAL_CON2,10000), EXPORT);
        }
        if(ConstrainedZTranslation == 1)
        {
            ASSIGN(LOCAL_CON2,_ADD(LOCAL_CON2,1000), EXPORT);
        }
        if(ConstrainedXRotation == 1)
        {
            ASSIGN(LOCAL_CON2,_ADD(LOCAL_CON2,100), EXPORT);
        }
        if(ConstrainedYRotation == 1)
        {
            ASSIGN(LOCAL_CON2,_ADD(LOCAL_CON2,10), EXPORT);
        }
        if(ConstrainedZRotation == 1)
        {
            ASSIGN(LOCAL_CON2,_ADD(LOCAL_CON2,1), EXPORT);
        }
    }

    CARD_PREREAD("%10lg",LSDYNA_CMO);
    if(LSDYNA_CMO == 0.0)
    {
        COMMENT("$      CMO");
        CARD("%10lg",LSDYNA_CMO);      
    }
    else if(LSDYNA_CMO == 1.0)
    {
        COMMENT("$      CMO      CON1      CON2");
        CARD("%10lg%10d%10d",LSDYNA_CMO,LSD_CON1,LSD_CON2int);
    }
    else if(LSDYNA_CMO == -1.0)
    {
        COMMENT("$      CMO      CON1      CON2");
        CARD("%10lg%10d%10d",LSDYNA_CMO,LSD_CID, LOCAL_CON2);
    }

    //Following code is added to handle long format as well.
    ASSIGN(LOCAL_CON2_TEMP,_SUB(LOCAL_CON2,100000),IMPORT);
    if(IO_FLAG == 1 && LSDYNA_CMO == -1.0 && LOCAL_CON2_TEMP >= 0)
    {
        ASSIGN(ConstrainedXTranslation, 1, IMPORT);
        ASSIGN(LOCAL_CON2,_SUB(LOCAL_CON2,100000),IMPORT);
    }

    ASSIGN(LOCAL_CON2_TEMP,_SUB(LOCAL_CON2,10000),IMPORT);
    if(IO_FLAG == 1 && LSDYNA_CMO == -1.0 && LOCAL_CON2_TEMP >= 0)
    {
        ASSIGN(ConstrainedYTranslation, 1, IMPORT);
        ASSIGN(LOCAL_CON2,_SUB(LOCAL_CON2,10000),IMPORT);
    }

    ASSIGN(LOCAL_CON2_TEMP,_SUB(LOCAL_CON2,1000),IMPORT);
    if(IO_FLAG == 1 && LSDYNA_CMO == -1.0 && LOCAL_CON2_TEMP >= 0)
    {
        ASSIGN(ConstrainedZTranslation, 1, IMPORT);
        ASSIGN(LOCAL_CON2,_SUB(LOCAL_CON2,1000),IMPORT);
    }

    ASSIGN(LOCAL_CON2_TEMP,_SUB(LOCAL_CON2,100),IMPORT);
    if(IO_FLAG == 1 && LSDYNA_CMO == -1.0 && LOCAL_CON2_TEMP >= 0)
    {
        ASSIGN(ConstrainedXRotation, 1, IMPORT);
        ASSIGN(LOCAL_CON2,_SUB(LOCAL_CON2,100),IMPORT);
    }

    ASSIGN(LOCAL_CON2_TEMP,_SUB(LOCAL_CON2,10),IMPORT);
    if(IO_FLAG == 1 && LSDYNA_CMO == -1.0 && LOCAL_CON2_TEMP >= 0)
    {
        ASSIGN(ConstrainedYRotation, 1, IMPORT);
        ASSIGN(LOCAL_CON2,_SUB(LOCAL_CON2,10),IMPORT);
    }

    if(IO_FLAG == 1 && LSDYNA_CMO == -1.0 && LOCAL_CON2 == 1)
    {
        ASSIGN(ConstrainedZRotation, 1, IMPORT);
    }

    CARD_PREREAD("%10s%50s",empty_string,LOCAL_A2);
    if(IO_FLAG == 1 && LOCAL_A2 == "")
    {
        ASSIGN(MATL_OPTION, 1, IMPORT);
    }
    else if(IO_FLAG == 1 && LOCAL_A2 != "")
    {
        ASSIGN(MATL_OPTION, 0, IMPORT);
    }
    if(MATL_OPTION == TRUE)
    {
        COMMENT("$      LCO");
        CARD("%10lg",LSD_SYSTEM);
    }
    if(MATL_OPTION == FALSE)
    {
        COMMENT("$       A1        A2        A3        V1        V2        V3");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_A1,LSDYNA_A2,LSDYNA_A3,LSDYNA_V1,LSDYNA_V2,LSDYNA_V3);
    }
}
