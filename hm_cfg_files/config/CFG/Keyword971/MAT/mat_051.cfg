//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 051
// 


 ATTRIBUTES(COMMON) 
 
 {
  
  // Initial and reference densities
  KEYWORD_STR                       = VALUE(STRING, "Solver Keyword");
  LSD_TitleOpt                      = VALUE(INT, "Title");
  CommentEnumField                  = VALUE(INT, "User Comments");
  Num_Comments                      = SIZE("No. of comment lines");
  Comments                          = ARRAY[Num_Comments](STRING, "Entity Comments");
  Rho                               = VALUE(FLOAT, "Mass density");  
  E                                 = VALUE(FLOAT, "Young’s modulus");
  LSD_MAT52_PR                      = VALUE(FLOAT, "Poisson’s ratio");
  LSD_MAT52_T                       = VALUE(FLOAT, "Initial temperature");
  LSD_MAT52_HC                      = VALUE(FLOAT, "Heat generation coefficient");
  LSD_MAT52_C1                      = VALUE(FLOAT, "Psi");
  LSD_MAT52_C2                      = VALUE(FLOAT, "R");
  LSD_MAT52_C3                      = VALUE(FLOAT, "Psi");
  LSD_MAT52_C4                      = VALUE(FLOAT, "R");
  LSD_MAT52_C5                      = VALUE(FLOAT, "1/s");
  LSD_MAT52_C6                      = VALUE(FLOAT, "R");
  LSD_MAT52_C7                      = VALUE(FLOAT, "1/psi");
  LSD_MAT52_C8                      = VALUE(FLOAT, "R");
  LSD_MAT52_C9                      = VALUE(FLOAT, "Psi");
  LSD_MAT52_C10                     = VALUE(FLOAT, "R");
  LSD_MAT52_C11                     = VALUE(FLOAT, "1/psi-s");
  LSD_MAT52_C12                     = VALUE(FLOAT, "R");
  LSD_MAT52_C13                     = VALUE(FLOAT, "1/psi");
  LSD_MAT52_C14                     = VALUE(FLOAT, "R");
  LSD_MAT52_C15                     = VALUE(FLOAT, "psi");
  LSD_MAT52_C16                     = VALUE(FLOAT, "R");
  LSD_MAT52_C17                     = VALUE(FLOAT, "1/psi-s");
  LSD_MAT52_C18                     = VALUE(FLOAT, "R");
  LSD_MAT52_A1                      = VALUE(FLOAT, "initial value of internal state variable");
  LSD_MAT52_A2                      = VALUE(FLOAT, "initial value of internal state variable");
  LSD_MAT52_A3                      = VALUE(FLOAT, "initial value of internal state variable");
  LSD_MAT52_A4                      = VALUE(FLOAT, "initial value of internal state variable");
  LSD_MAT52_A5                      = VALUE(FLOAT, "initial value of internal state variable");
  LSD_MAT52_A6                      = VALUE(FLOAT, "initial value of internal state variable");

}

SKEYWORDS_IDENTIFIER(COMMON)

{

  KEYWORD_STR                   = 9000;
  CommentEnumField              = 3220;
  Num_Comments                  = 3101;
  LSD_TitleOpt                  = 90;
  Comments                      = 3100;
  Rho                           = 118;
  E                             = 119;
  LSD_MAT52_PR                  = 1225;
  LSD_MAT52_T                   = 1226;
  LSD_MAT52_HC                  = 1227;
  LSD_MAT52_C1                  = 1228;
  LSD_MAT52_C2                  = 1229;
  LSD_MAT52_C3                  = 1230;
  LSD_MAT52_C4                  = 1231;
  LSD_MAT52_C5                  = 1232;
  LSD_MAT52_C6                  = 1233;
  LSD_MAT52_C7                  = 1234;
  LSD_MAT52_C8                  = 1235;
  LSD_MAT52_C9                  = 1236;
  LSD_MAT52_C10                 = 1237;
  LSD_MAT52_C11                 = 1238;
  LSD_MAT52_C12                 = 1239;
  LSD_MAT52_C13                 = 1240;
  LSD_MAT52_C14                 = 1241;
  LSD_MAT52_C15                 = 1242;
  LSD_MAT52_C16                 = 1243;
  LSD_MAT52_C17                 = 1244;
  LSD_MAT52_C18                 = 1245;
  LSD_MAT52_A1                  = 1246;
  LSD_MAT52_A2                  = 1247;
  LSD_MAT52_A3                  = 1248;
  LSD_MAT52_A4                  = 1249;
  LSD_MAT52_A5                  = 1250;
  LSD_MAT52_A6                  = 1251;
  
}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  YOUNG_MODULUS=SCALAR(E);
  POISSON_RATIO=SCALAR(LSD_MAT52_PR);
  INITIAL_TEMPERATURE=SCALAR(LSD_MAT52_T);
  HEAT_GENERATION_COEFFICIENT=SCALAR(LSD_MAT52_HC);
  C1=SCALAR(LSD_MAT52_C1);
  C2=SCALAR(LSD_MAT52_C2);
  C3=SCALAR(LSD_MAT52_C3);
  C4=SCALAR(LSD_MAT52_C4);
  C5=SCALAR(LSD_MAT52_C5);
  C6=SCALAR(LSD_MAT52_C6);
  C7=SCALAR(LSD_MAT52_C7);
  C8=SCALAR(LSD_MAT52_C8);
  C9=SCALAR(LSD_MAT52_C9);
  C10=SCALAR(LSD_MAT52_C10);
  C11=SCALAR(LSD_MAT52_C11);
  C12=SCALAR(LSD_MAT52_C12);
  C13=SCALAR(LSD_MAT52_C13);
  C14=SCALAR(LSD_MAT52_C14);
  C15=SCALAR(LSD_MAT52_C15);
  C16=SCALAR(LSD_MAT52_C16);
  C17=SCALAR(LSD_MAT52_C17);
  C18=SCALAR(LSD_MAT52_C18);
  A1=SCALAR(LSD_MAT52_A1);
  A2=SCALAR(LSD_MAT52_A2);
  A3=SCALAR(LSD_MAT52_A3);
  A4=SCALAR(LSD_MAT52_A4);
  A5=SCALAR(LSD_MAT52_A5);
 public:
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON) 
{


     ASSIGN(KEYWORD_STR, "*MAT_BAMMAN");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
       {
             ASSIGN(KEYWORD_STR, "_TITLE");
       } 
 mandatory:
     SCALAR(Rho)                        { DIMENSION="density";}
     SCALAR(E)                          {DIMENSION="pressure";}
 optional:
     SCALAR(LSD_MAT52_PR)               {DIMENSION="DIMENSIONLESS";}
 mandatory:
     SCALAR(LSD_MAT52_T)                {DIMENSION="k";}
     SCALAR(LSD_MAT52_HC)               {DIMENSION="DIMENSIONLESS";}
 optional:
     SCALAR(LSD_MAT52_C1)               {DIMENSION="pressure";}
     SCALAR(LSD_MAT52_C2)               {DIMENSION="k";}
 mandatory:
     SCALAR(LSD_MAT52_C3)               {DIMENSION="pressure";}
 optional:
     SCALAR(LSD_MAT52_C4)               {DIMENSION="k";}
 mandatory: 
     SCALAR(LSD_MAT52_C5)               {DIMENSION="f";}
 optional:
     SCALAR(LSD_MAT52_C6)               {DIMENSION="k";}
     SCALAR(LSD_MAT52_C7)               {DIMENSION="inverse_of_pressure";}
     SCALAR(LSD_MAT52_C8)               {DIMENSION="k";}
     SCALAR(LSD_MAT52_C9)               {DIMENSION="pressure";}
     SCALAR(LSD_MAT52_C10)              {DIMENSION="k";}
     SCALAR(LSD_MAT52_C11)              {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT52_C12)              {DIMENSION="k";}
     SCALAR(LSD_MAT52_C13)              {DIMENSION="inverse_of_pressure";}
     SCALAR(LSD_MAT52_C14)              {DIMENSION="k";}
     SCALAR(LSD_MAT52_C15)              {DIMENSION="pressure";}
     SCALAR(LSD_MAT52_C16)              {DIMENSION="k";}
     SCALAR(LSD_MAT52_C17)              {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT52_C18)              {DIMENSION="k";}
     SCALAR(LSD_MAT52_A1)               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT52_A2)               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT52_A3)               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT52_A4)               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT52_A5)               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT52_A6)               {DIMENSION="DIMENSIONLESS";}
/*
    graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/SHELL,/COMPONENT/PENTA6,/COMPONENT/SHEL16,/COMPONENT/TSHELL);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
      //
      COMMENT("$      MID       RHO         E        PR         T        HC");
      CARD("%10d%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,LSD_MAT52_PR,LSD_MAT52_T,LSD_MAT52_HC);
      //
      COMMENT("$       C1        C2        C3        C4        C5        C6        C7        C8");
      CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT52_C1,LSD_MAT52_C2,LSD_MAT52_C3,LSD_MAT52_C4,LSD_MAT52_C5,LSD_MAT52_C6,LSD_MAT52_C7,LSD_MAT52_C8);
      //
      COMMENT("$       C9       C10       C11       C12       C13       C14       C15       C16");
      CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT52_C9,LSD_MAT52_C10,LSD_MAT52_C11,LSD_MAT52_C12,LSD_MAT52_C13,LSD_MAT52_C14,LSD_MAT52_C15,LSD_MAT52_C16);
      //
      COMMENT("$      C17       C18        A1        A2        A3        A4        A5     KAPPA");
      CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT52_C17,LSD_MAT52_C18,LSD_MAT52_A1,LSD_MAT52_A2,LSD_MAT52_A3,LSD_MAT52_A4,LSD_MAT52_A5,LSD_MAT52_A6);
      //
}