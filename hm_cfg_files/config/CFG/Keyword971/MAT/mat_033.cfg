//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 033
// 

ATTRIBUTES(COMMON)
{
  // Initial and reference densities
    KEYWORD_STR                       = VALUE(STRING, "Solver Keyword");
    LSD_TitleOpt                      = VALUE(INT, "Title");
    CommentEnumField                  = VALUE(INT, "User Comments");
    Num_Comments                      = SIZE("No. of comment lines");
    Comments                          = ARRAY[Num_Comments](STRING, "Entity Comments");
    Rho                               = VALUE(FLOAT, "Mass density");  
    E                                 = VALUE(FLOAT, "Youngs modulus");
    Nu                                = VALUE(FLOAT, "Poissons ratio");
    LSDYNA_K                          = VALUE(FLOAT, "strength coefficient");
    LSD_E0                            = VALUE(FLOAT, "strain corresponding to the initial yield");
    LSDYNA_N                          = VALUE(FLOAT, "hardening exponent for yield strength");
    LSDYNA_M                          = VALUE(FLOAT, "flow potential exponent");
    LSD_A                             = VALUE(FLOAT, "anisotropy coefficient");    
    LSD_MAT_B                         = VALUE(FLOAT, "anisotropy coefficient"); 
    LSD_C                             = VALUE(FLOAT, "anisotropy coefficient"); 
    LSD_F                             = VALUE(FLOAT, "anisotropy coefficient"); 
    LSD_G                             = VALUE(FLOAT, "anisotropy coefficient"); 
    LSD_H                             = VALUE(FLOAT, "anisotropy coefficient"); 
    LSD_LCID                          = VALUE(FUNCT, "effective stress versus effective plastic strain");
    axisOptFlag                       = VALUE(INT, "Material axes option");
    LSD_SYSTEM                        = VALUE(SYSTEM, "coordinate system ID");
    LSDYNA_A1                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A2                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A3                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_D1                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D2                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D3                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_V1                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V2                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V3                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_XP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSDYNA_YP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSDYNA_ZP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSD_NODE1                               = VALUE(NODE, "Node");
    LSD_NODE3                               = VALUE(NODE, "Node1");
    LSD_NODE4                               = VALUE(NODE, "Node2");
    LSD_NODE7                               = VALUE(NODE, "Node1");
    LSD_NODE8                               = VALUE(NODE, "Node2");
    LSD_NODE5                               = VALUE(NODE, "Node1");
    LSD_NODE6                               = VALUE(NODE, "Node2");
    LSD_OFFANG                              = VALUE(FLOAT, "Material angle in degrees");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    IO_FLAG                                 = VALUE(INT, "io flag");
    _HMCOMMENTSFLAG                         = VALUE(INT, "Write HM Comments");
    TITLE                                   = VALUE(STRING, "Title");
    LOC_AOPT                                = VALUE(FLOAT, "");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                   = 9000;
    CommentEnumField              = 3220;
    Num_Comments                  = 3101;
    LSD_TitleOpt                  = 90;
    Comments                      = 3100;
    Rho                           = 118;
    E                             = 119;
    Nu                            = 120;
    LSDYNA_K                      = 124;
    LSD_E0                        = 1507;
    LSDYNA_N                      = 71;
    LSDYNA_M                      = 72;
    LSD_A                         = 718;
    LSD_MAT_B                     = 311;
    LSD_C                         = 1519;
    LSD_F                         = 5283;
    LSD_G                         = 1560;
    LSD_H                         = 1561;
    LSD_LCID                      = 45;
    axisOptFlag                   = 4946;
    LSD_SYSTEM                    = 184;
    LSD_NODE1                     = 86;
    LSDYNA_XP                     = 136;
    LSDYNA_YP                     = 137;
    LSDYNA_ZP                     = 138;
    LSD_NODE3                     = 2802;
    LSD_NODE4                     = 2803;
    LSDYNA_A1                     = 139;
    LSDYNA_A2                     = 140;
    LSDYNA_A3                     = 141;
    LSD_NODE5                     = 5078;
    LSD_NODE6                     = 5079;
    LSDYNA_V1                     = 142;
    LSDYNA_V2                     = 143;
    LSDYNA_V3                     = 144;
    LSD_NODE7                     = 5080;
    LSD_NODE8                     = 5081;
    LSDYNA_D1                     = 145;
    LSDYNA_D2                     = 146;
    LSDYNA_D3                     = 147;
    LSD_OFFANG                    = 5217;
    AOPT_SKEW_FLAG                  = -1;
    IO_FLAG                         = -1;
    TITLE                           = -1;
    LOC_AOPT                        = -1;
    //empty_string               = -1;
}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  YOUNG_MODULUS=SCALAR(E);
  POISSON_RATIO=SCALAR(Nu);
  K=SCALAR(LSDYNA_K);
  EO=SCALAR(LSD_E0);
  N=SCALAR(LSDYNA_N);
  M=SCALAR(LSDYNA_M);
  A=SCALAR(LSD_A);
  B=SCALAR(LSD_MAT_B);
  C=SCALAR(LSD_C);
  F=SCALAR(LSD_F);
  G=SCALAR(LSD_G);
  H=SCALAR(LSD_H);
  MATERIAL_AXES_OPTION=SCALAR(axisOptFlag);
  OFFSET_ANGLE_AOPT3=SCALAR(LSD_OFFANG);
  COORDINATES_XP=SCALAR(LSDYNA_XP);
  COORDINATES_YP=SCALAR(LSDYNA_YP);
  COORDINATES_ZP=SCALAR(LSDYNA_ZP);
 public:
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON) 

{


    ASSIGN(KEYWORD_STR, "*MAT_BARLAT_ANISOTROPIC_PLASTICITY");
    RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
       {
             ASSIGN(KEYWORD_STR, "_TITLE");
       } 
 mandatory:
     SCALAR(Rho)                         { DIMENSION="density";}
     SCALAR(E)                           {DIMENSION="pressure";}
 optional:
     SCALAR(Nu)                          {DIMENSION="DIMENSIONLESS";}
 mandatory:
     SCALAR(LSDYNA_K)                    {DIMENSION="pressure";}
 optional:
     SCALAR(LSD_E0)                      {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_N)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_M)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_A)                       {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_B)                   {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_C)                       {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_F)                       {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_G)                       {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_H)                       {DIMENSION="DIMENSIONLESS";}
    FUNCTION(LSD_LCID)
    {
      X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
      Y_TITLE = "Stress"; Y_DIMENSION = "pressure";
    }
     
     RADIO(axisOptFlag)
     {
        ADD(0, "0.0: Locally orthotropic : axis given by nodes 1,2, and 4");
        ADD(1, "1.0: A-direction given by a point and global location of element center");
        ADD(2, "2.0: Axis given by vectors");
        ADD(3, "3.0: Axis given by rotating the material axes by an angle BETA");
        ADD(4, "Pick System");

     }
     if(axisOptFlag == 4)
     {
        DATA(LSD_SYSTEM);
     }
     
     if(axisOptFlag == 1)
     {
        DATA(LSD_NODE1);
        SCALAR(LSDYNA_XP)               {DIMENSION="l";}
        SCALAR(LSDYNA_YP)               {DIMENSION="l";}
        SCALAR(LSDYNA_ZP)               {DIMENSION="l";}
     }
     if(axisOptFlag == 2)
     {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        SCALAR(LSDYNA_A1)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_A2)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_A3)               {DIMENSION="DIMENSIONLESS";}
        DATA(LSD_NODE5);                
        DATA(LSD_NODE6);                
        SCALAR(LSDYNA_D1)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_D2)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_D3)               {DIMENSION="DIMENSIONLESS";}
     }
     if(axisOptFlag == 3)
     {
        SCALAR(LSD_OFFANG)              {DIMENSION="a";}
        DATA(LSD_NODE7);
        DATA(LSD_NODE8);
        SCALAR(LSDYNA_V1)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_V2)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_V3)               {DIMENSION="DIMENSIONLESS";}
     }     
/*
 optional:
       graphical SUPPORT("Part(s) to which material is applied") {
    OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/SHELL,/COMPONENT/PENTA6,/COMPONENT/SHEL16,/COMPONENT/TSHELL);
      ADD(COMPONENT,"Parts");
    }
*/
     
}

// File format
FORMAT(Keyword971) 
{
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    if(LSD_NODE7 != NONE && LSD_NODE8 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    //
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    //
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);
  //
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    //
  COMMENT("$      MID       RHO         E        PR         K        E0         N         M");
  CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,LSDYNA_K,LSD_E0,LSDYNA_N,LSDYNA_M);
  //
  COMMENT("$        A         B         C         F         G         H      LCID");
  CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_A,LSD_MAT_B,LSD_C,LSD_F,LSD_G,LSD_H,LSD_LCID);
  //
  COMMENT("$     AOPT      BETA");
    if(IO_FLAG == 2)
    {
        if(axisOptFlag != 5)
        {
            CARD("%10lg%10lg",LOC_AOPT,CELL_COND( if(axisOptFlag == 4) LSD_OFFANG;));
        }
        else
        {
            CARD("%10lg",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM));
        }
    }
    CARD_PREREAD("%10lg",LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,4,IMPORT);
    }
    if(IO_FLAG == 1)
    {
        
        if(axisOptFlag >= 1 && axisOptFlag < 5)
        {
            CARD("%10lg%10lg",LOC_AOPT,CELL_COND( if(axisOptFlag == 4) LSD_OFFANG;));
        }
        else
        {
            CARD("%10lg",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM));
            ASSIGN(axisOptFlag, 5, IMPORT);
        }
    }
  
  //
  COMMENT("$       XP        YP        ZP        A1        A2        A3");
    if(axisOptFlag == 2 || axisOptFlag == 3)
    {
        if(axisOptFlag == 3)
        {
            CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
        }
        else
        {
            CARD("%10lg%10lg%10lg",LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP);
        }
    }
    else
    {
        BLANK;
    }
    //
    COMMENT("$       V1        V2        V3        D1        D2        D3");
    if(axisOptFlag == 3  ||  axisOptFlag == 4)
    {
        if(axisOptFlag == 3)
        {
            CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
        }
        else
        {
            CARD("%10lg%10lg%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3);
        }
    }
    else
    {
        BLANK;
    }

}