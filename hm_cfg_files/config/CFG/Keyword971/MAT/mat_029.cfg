//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 029
// 


ATTRIBUTES(COMMON)
{
    // Initial and reference densities
    KEYWORD_STR                       = VALUE(STRING, "Solver Keyword");
    LSD_TitleOpt                      = VALUE(INT, "Title");
    CommentEnumField                  = VALUE(INT, "User Comments");
    Num_Comments                      = SIZE("No. of comment lines");
    Comments                          = ARRAY[Num_Comments](STRING, "Entity Comments");
    Rho                               = VALUE(FLOAT, "Rho");  
    E                                 = VALUE(FLOAT, "E");
    Nu                                = VALUE(FLOAT, "Nu");
    LSD_MAT_DF                        = VALUE(FLOAT, "DF");
    LSD_MAT_AOPT                      = VALUE(FLOAT, "AOPT");  
    LSD_MAT_YTFLAG                    = VALUE(FLOAT, "YTFLAG");
    LSD_MAT_ASOFT                     = VALUE(FLOAT, "ASOFT");
    ArrayCount                        = SIZE("ArrayCount");
    LSD_MAT_Mn                        = ARRAY[ArrayCount](FLOAT, "M");
    LSD_LCID                          = VALUE(FUNCT, "LC1");
    LSD_LCID2                         = VALUE(FUNCT, "LC2");
    LSD_LCID3                         = VALUE(FUNCT, "LC3");
    LSD_LCID4                         = VALUE(FUNCT, "LC4");
    LSD_LCID5                         = VALUE(FUNCT, "LC5");
    LSD_LCID6                         = VALUE(FUNCT, "LC6");
    LSD_LCID7                         = VALUE(FUNCT, "LC7");
    LSD_LCID8                         = VALUE(FUNCT, "LC8");
    LSD_LCID9                         = VALUE(FUNCT, "LPS1");
    LSD_MAT_SFS1                      = VALUE(FLOAT, "SFS1");
    LSD_LCID10                        = VALUE(FUNCT, "LPS2");
    LSD_MAT_SFS2                      = VALUE(FLOAT, "SFS2");  
    LSD_MAT_YMS1                      = VALUE(FLOAT, "YMS1");
    LSD_MAT_YMS2                      = VALUE(FLOAT, "YMS2");
    LSD_LCID11                        = VALUE(FUNCT, "LPT1");
    LSD_MAT_SFT1                      = VALUE(FLOAT, "SFT1");  
    LSD_LCID12                        = VALUE(FUNCT, "LPT2");
    LSD_MAT_SFT2                      = VALUE(FLOAT, "SFT2");
    LSD_MAT_YMT1                      = VALUE(FLOAT, "YMT1");  
    LSD_MAT_YMT2                      = VALUE(FLOAT, "YMT2");
    LSD_LCID13                        = VALUE(FUNCT, "LPR");
    LSD_MAT_SFR                       = VALUE(FLOAT, "SFR");
    LSD_MAT_YMR                       = VALUE(FLOAT, "YMR");  
    IO_FLAG                           = VALUE(INT, "IO");
    LOCAL_M1                          = VALUE(STRING, "LOCAL T1");
    LOCAL_M2                          = VALUE(STRING, "LOCAL T2");
    LOCAL_M3                          = VALUE(STRING, "LOCAL T3");
    LOCAL_M4                          = VALUE(STRING, "LOCAL T4");
    LOCAL_M5                          = VALUE(STRING, "LOCAL T5");
    LOCAL_M6                          = VALUE(STRING, "LOCAL T6");
    LOCAL_M7                          = VALUE(STRING, "LOCAL T7");
    LOCAL_M8                          = VALUE(STRING, "LOCAL T8");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                   = 9000;
    CommentEnumField              = 3220;
    Num_Comments                  = 3101;
    LSD_TitleOpt                  = 90;
    Comments                      = 3100;
    Rho                           = 118;
    E                             = 119;
    Nu                            = 120;
    LSD_MAT_DF                    = 353;
    LSD_MAT_AOPT                  = 336;
    LSD_MAT_YTFLAG                = 356;
    LSD_MAT_ASOFT                 = 357;
    ArrayCount                    = 2246;
    LSD_MAT_Mn                    = 358;
    LSD_LCID                      = 45;
    LSD_LCID2                     = 168;
    LSD_LCID3                     = 170;
    LSD_LCID4                     = 171;
    LSD_LCID5                     = 172;
    LSD_LCID6                     = 199;
    LSD_LCID7                     = 200;
    LSD_LCID8                     = 224;
    LSD_LCID9                     = 1141;
    LSD_MAT_SFS1                  = 375;
    LSD_LCID10                    = 1142;
    LSD_MAT_SFS2                  = 377;
    LSD_MAT_YMS1                  = 378;
    LSD_MAT_YMS2                  = 379;
    LSD_LCID11                    = 1175;
    LSD_MAT_SFT1                  = 381;
    LSD_LCID12                    = 1176;
    LSD_MAT_SFT2                  = 382;
    LSD_MAT_YMT1                  = 383;
    LSD_MAT_YMT2                  = 384;
    LSD_LCID13                    = 1189;
    LSD_MAT_SFR                   = 386;
    LSD_MAT_YMR                   = 387;
    IO_FLAG                       = -1;
    LOCAL_M1                      = -1;
    LOCAL_M2                      = -1;
    LOCAL_M3                      = -1;
    LOCAL_M4                      = -1;
    LOCAL_M5                      = -1;
    LOCAL_M6                      = -1;
    LOCAL_M7                      = -1;
    LOCAL_M8                      = -1;
}
DEFAULTS(COMMON)
{
    LSD_MAT_SFS2            = 1.0;
    LSD_MAT_YMS1            = 1.0E+20;
    LSD_MAT_SFT1            = 1.0;
    LSD_MAT_SFT2            = 1.0;
    LSD_MAT_YMT1            = 1.0E+20;
    LSD_MAT_SFR             = 1.0;
    LSD_MAT_YMR             = 1.0E+20;
}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY=SCALAR(Rho);
    YOUNG_MODULUS=SCALAR(E);
    POISSON_RATIO=SCALAR(Nu);
    DAMPING_FACTOR=SCALAR(LSD_MAT_DF);
    AXIAL_LOAD_CURVE_OPTION=SCALAR(LSD_MAT_AOPT);
    FLAG_ALLOW_BEAM=SCALAR(LSD_MAT_YTFLAG);
    AXIAL_ELASTIC_SOFTENING_FACTOR=SCALAR(LSD_MAT_ASOFT);
    SCALE_FACTOR_S_1=SCALAR(LSD_MAT_SFS1);
    SCALE_FACTOR_S_2=SCALAR(LSD_MAT_SFS2);
    YIELD_MOMENT_S_1=SCALAR(LSD_MAT_YMS1);
    YIELD_MOMENT_S_2=SCALAR(LSD_MAT_YMS2);
    SCALE_FACTOR_T_1=SCALAR(LSD_MAT_SFT1);
    SCALE_FACTOR_T_2=SCALAR(LSD_MAT_SFT2);
    YIELD_MOMENT_T_1=SCALAR(LSD_MAT_YMT1);
    YIELD_MOMENT_T_2=SCALAR(LSD_MAT_YMT2);
    SCALE_FACTOR_ROTATION=SCALAR(LSD_MAT_SFR);
    TORSIONAL_YIELD_MOMENT_INTERACTION_CALCULATIONS=SCALAR(LSD_MAT_YMR);
public:
    //SOUND_SPEED is speed for ISDO = 0 and 1
    SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
    SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
private:
    G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON) 
{
    ASSIGN(KEYWORD_STR, "*MAT_FORCE_LIMITED");
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
            SCALAR(Comments);
        }
    }     
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    } 
mandatory:
    SCALAR(Rho)                        { DIMENSION="density";}
    SCALAR(E)                          {DIMENSION="pressure";}
optional:
    SCALAR(Nu)                         {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_DF)                 {DIMENSION="DIMENSIONLESS";}
    RADIO(LSD_MAT_AOPT)
    {
        ADD(0.0, "0.0: Axial load curves are force versus strain");
        ADD(1.0, "1.0: Axial load curves are force versus change in length");
    }
    RADIO(LSD_MAT_YTFLAG)
    {
        ADD(0.0, "0.0: Beam does not yield in tension");
        ADD(1.0, "1.0: Beam can yield in tension");
    }
    SCALAR(LSD_MAT_ASOFT)              {DIMENSION="DIMENSIONLESS";}

    SIZE_RADIO(ArrayCount)
    {
        ADD(-1, "OFF");
        ADD(0, "0");
        ADD(2, "2");
        ADD(3, "3");
        ADD(4, "4");
        ADD(5, "5");
        ADD(6, "6");
        ADD(7, "7");
        ADD(8, "8");
    }     
    if(ArrayCount> 0)
    {
        ARRAY(ArrayCount,"")
        {
            SCALAR(LSD_MAT_Mn)           {DIMENSION="moment";}
        }
    }

    FUNCTION(LSD_LCID)
    {
     X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
     Y_TITLE = "Force"; Y_DIMENSION = "force";
    }
    FUNCTION(LSD_LCID2)
    {
     X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
     Y_TITLE = "Force"; Y_DIMENSION = "force";
    }
    FUNCTION(LSD_LCID3)
    {
     X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
     Y_TITLE = "Force"; Y_DIMENSION = "force";
    }
    FUNCTION(LSD_LCID4)
    {
     X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
     Y_TITLE = "Force"; Y_DIMENSION = "force";
    }
    FUNCTION(LSD_LCID5)
    {
     X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
     Y_TITLE = "Force"; Y_DIMENSION = "force";
    }
    FUNCTION(LSD_LCID6)
    {
     X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
     Y_TITLE = "Force"; Y_DIMENSION = "force";
    }
    FUNCTION(LSD_LCID7)
    {
     X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
     Y_TITLE = "Force"; Y_DIMENSION = "force";
    }
    FUNCTION(LSD_LCID8)
    {
     X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
     Y_TITLE = "Force"; Y_DIMENSION = "force";
    }
    FUNCTION(LSD_LCID9)
    {
     X_TITLE = "Rotation"; X_DIMENSION = "a";
     Y_TITLE = "Moment"; Y_DIMENSION = "moment";
    }
    SCALAR(LSD_MAT_SFS1)                   {DIMENSION="DIMENSIONLESS";}
    FUNCTION(LSD_LCID10)
    {
     X_TITLE = "Rotation"; X_DIMENSION = "a";
     Y_TITLE = "Moment"; Y_DIMENSION = "moment";
    }
    SCALAR(LSD_MAT_SFS2)                   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_YMS1)                   {DIMENSION="moment";}
    SCALAR(LSD_MAT_YMS2)                   {DIMENSION="moment";}
    FUNCTION(LSD_LCID11)
    {
     X_TITLE = "Rotation"; X_DIMENSION = "a";
     Y_TITLE = "Moment"; Y_DIMENSION = "moment";
    } 
    SCALAR(LSD_MAT_SFT1)                   {DIMENSION="DIMENSIONLESS";}
    FUNCTION(LSD_LCID12)
    {
     X_TITLE = "Rotation"; X_DIMENSION = "a";
     Y_TITLE = "Moment"; Y_DIMENSION = "moment";
    }
    SCALAR(LSD_MAT_SFT2)                   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_YMT1)                   {DIMENSION="moment";}
    SCALAR(LSD_MAT_YMT2)                   {DIMENSION="moment";}
    FUNCTION(LSD_LCID13)
    {
     X_TITLE = "Rotation"; X_DIMENSION = "a";
     Y_TITLE = "Moment"; Y_DIMENSION = "moment";
    }
    SCALAR(LSD_MAT_SFR)                    {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_YMR)                    {DIMENSION="moment";}
    /*
    graphical SUPPORT("Part(s) to which material is applied") {
    OBJECTS=(/COMPONENT/BEAM);
    ADD(COMPONENT,"Parts");
    }
    */
}

// File format
FORMAT(Keyword971) 
{
    //
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    //
    COMMENT("$      MID       RHO         E        PR        DF      AOPT    YTFLAG     ASOFT");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,LSD_MAT_DF,LSD_MAT_AOPT,LSD_MAT_YTFLAG,LSD_MAT_ASOFT);
    //
    CARD_PREREAD("%10s%10s%10s%10s%10s%10s%10s%10s",LOCAL_M1 ,LOCAL_M2 ,LOCAL_M3 ,LOCAL_M4 ,LOCAL_M5 ,LOCAL_M6 ,LOCAL_M7 ,LOCAL_M8);
    COMMENT("$       M1        M2        M3        M4        M5        M6        M7        M8");
    ASSIGN(ArrayCount, 0, IMPORT);
    if(IO_FLAG == 1 && LOCAL_M8 != "")
    {
        ASSIGN(ArrayCount, 8);
    }
    else if(IO_FLAG == 1 && LOCAL_M7 != "")
    {
        ASSIGN(ArrayCount, 7);
    }  
    else if(IO_FLAG == 1 && LOCAL_M6 != "")
    {
        ASSIGN(ArrayCount, 6);
    }  
    else if(IO_FLAG == 1 && LOCAL_M5 != "")
    {
        ASSIGN(ArrayCount, 5);
    }  
    else if(IO_FLAG == 1 && LOCAL_M4 != "")
    {
        ASSIGN(ArrayCount, 4);
    }  
    else if(IO_FLAG == 1 && LOCAL_M3 != "")
    {
        ASSIGN(ArrayCount, 3);
    }  
    else if(IO_FLAG == 1 && LOCAL_M2 != "")
    {
        ASSIGN(ArrayCount, 2);
    }  
    else if(IO_FLAG == 1 && LOCAL_M1 != "")
    {
        ASSIGN(ArrayCount, 1);
    }  
    else if(ArrayCount == 0 && IO_FLAG == 2)
    {
        BLANK;
    }
    //
    if(IO_FLAG == 2 && ArrayCount != 0)
    {
        CARD("$$ HM Moments for Stress-Strain Curve = %10d",ArrayCount);
    }
    CELL_LIST(ArrayCount,"%10lg",LSD_MAT_Mn);

    //
    COMMENT("$      LC1       LC2       LC3       LC4       LC5       LC6       LC7       LC8");
    CARD("%10d%10d%10d%10d%10d%10d%10d%10d",LSD_LCID,LSD_LCID2,LSD_LCID3,LSD_LCID4,LSD_LCID5,LSD_LCID6,LSD_LCID7,LSD_LCID8);
    //
    COMMENT("$     LPS1      SFS1      LPS2      SFS2      YMS1      YMS2");
    CARD("%10d%10lg%10d%10lg%10lg%10lg",LSD_LCID9,LSD_MAT_SFS1,LSD_LCID10,LSD_MAT_SFS2,LSD_MAT_YMS1,LSD_MAT_YMS2);
    //
    COMMENT("$     LPT1      SFT1      LPT2      SFT2      YMT1      YMT2");
    CARD("%10d%10lg%10d%10lg%10lg%10lg",LSD_LCID11,LSD_MAT_SFT1,LSD_LCID12,LSD_MAT_SFT2,LSD_MAT_YMT1,LSD_MAT_YMT2);
    //
    COMMENT("$      LPR       SFR       YMR");
    CARD("%10d%10lg%10lg",LSD_LCID13,LSD_MAT_SFR,LSD_MAT_YMR);
    //
}