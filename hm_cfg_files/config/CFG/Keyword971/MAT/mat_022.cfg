//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 022
// 

ATTRIBUTES(COMMON) 
{
    KEYWORD_STR                     = VALUE(STRING, "Solver Keyword");
    LSD_TitleOpt                    = VALUE(INT, "Title");
    CommentEnumField                = VALUE(INT, "User Comments");
    Num_Comments                    = SIZE("No. of comment lines");
    Comments                        = ARRAY[Num_Comments](STRING, "Entity Comments");
    Rho                             = VALUE(FLOAT, "Rho");  
    LSD_MAT_EA                      = VALUE(FLOAT, "EA");
    LSD_MAT_EB                      = VALUE(FLOAT, "EB");
    LSD_MAT_EC                      = VALUE(FLOAT, "EC");
    LSD_MAT_PRBA                    = VALUE(FLOAT, "PRBA");
    LSD_MAT_PRCA                    = VALUE(FLOAT, "PRCA");
    LSD_MAT_PRCB                    = VALUE(FLOAT, "PRCB");
    LSD_MAT_GAB                     = VALUE(FLOAT, "GAB");
    LSD_MAT_GBC                     = VALUE(FLOAT, "GBC");
    LSD_MAT_GCA                     = VALUE(FLOAT, "GCA");
    LSD_MAT_KFAIL                   = VALUE(FLOAT, "KFAIL");
    AnisoAxisDefiniFlag             = VALUE(INT, "Anisotropy axis definition");
    LSD_MAT_MACF                    = VALUE(FLOAT, "MACF");
    LSD_MAT_SC                      = VALUE(FLOAT, "SC");
    LSD_MAT_XT                      = VALUE(FLOAT, "XT");
    LSD_MAT_YT                      = VALUE(FLOAT, "YT");
    LSD_MAT_YC                      = VALUE(FLOAT, "YC");
    LSD_MAT_ALPH                    = VALUE(FLOAT, "ALPH");
    LSDYNA_SN                       = VALUE(FLOAT, "SN");
    LSDYNA_SYZ                      = VALUE(FLOAT, "SYZ");
    LSDYNA_SZX                      = VALUE(FLOAT, "SZX");
    LSD_NODE1                       = VALUE(NODE, "Node");
    LSD_MAT_XP                      = VALUE(FLOAT, "XP");
    LSD_MAT_YP                      = VALUE(FLOAT, "YP");
    LSD_MAT_ZP                      = VALUE(FLOAT, "ZP");
    LSD_NODE3                       = VALUE(NODE, "Node1");
    LSD_NODE4                       = VALUE(NODE, "Node2");
    LSD_MAT_A1                      = VALUE(FLOAT, "A1");
    LSD_MAT_A2                      = VALUE(FLOAT, "A2");
    LSD_MAT_A3                      = VALUE(FLOAT, "A3");
    LSD_NODE7                       = VALUE(NODE, "Node1");
    LSD_NODE8                       = VALUE(NODE, "Node2");
    LSD_MAT_D1                      = VALUE(FLOAT, "D1");
    LSD_MAT_D2                      = VALUE(FLOAT, "D2");
    LSD_MAT_D3                      = VALUE(FLOAT, "D3");
    LSD_NODE5                       = VALUE(NODE, "Node1");
    LSD_NODE6                       = VALUE(NODE, "Node2");
    LSD_MAT_V1                      = VALUE(FLOAT, "V1");
    LSD_MAT_V2                      = VALUE(FLOAT, "V2");
    LSD_MAT_V3                      = VALUE(FLOAT, "V3");
    LSDYNA_BETA                     = VALUE(FLOAT, "BETA");
    LSD_SYSTEM                      = VALUE(SYSTEM,  "AOPT");
    IO_FLAG                         = VALUE(INT, "IO");
    AOPT                            = VALUE(FLOAT, "AOPT");
    AOPT_FLAG                       = VALUE(INT, "AOPT FLAG");
    LOCAL_MACF                      = VALUE(STRING, "LOCAL MACF");
    //empty_string               = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                   = 9000;
    CommentEnumField              = 3220;
    Num_Comments                  = 3101;
    LSD_TitleOpt                  = 90;
    Comments                      = 3100;
    Rho                           = 118;
    LSD_MAT_EA                    = 325;
    LSD_MAT_EB                    = 326;
    LSD_MAT_EC                    = 327;
    LSD_MAT_PRBA                  = 329;
    LSD_MAT_PRCA                  = 330;
    LSD_MAT_PRCB                  = 331;
    LSD_MAT_GAB                   = 332;
    LSD_MAT_GBC                   = 333;
    LSD_MAT_GCA                   = 334;
    LSD_MAT_KFAIL                 = 335;
    AnisoAxisDefiniFlag           = 1053;
    LSD_MAT_MACF                  = 337;
    LSD_MAT_SC                    = 345;
    LSD_MAT_XT                    = 346;
    LSD_MAT_YT                    = 347;
    LSD_MAT_YC                    = 348;
    LSD_MAT_ALPH                  = 349;
    LSDYNA_SN                     = 69;
    LSDYNA_SYZ                    = 4711;
    LSDYNA_SZX                    = 4712;
    LSD_NODE1                     = 86;
    LSD_MAT_XP                    = 338;
    LSD_MAT_YP                    = 339;
    LSD_MAT_ZP                    = 340;
    LSD_NODE3                     = 2802;
    LSD_NODE4                     = 2803;
    LSD_MAT_A1                    = 280;
    LSD_MAT_A2                    = 281;
    LSD_MAT_A3                    = 341;
    LSD_NODE7                     = 5080;
    LSD_NODE8                     = 5081;
    LSD_MAT_D1                    = 320;
    LSD_MAT_D2                    = 321;
    LSD_MAT_D3                    = 322;
    LSD_NODE5                     = 5078;
    LSD_NODE6                     = 5079;
    LSD_MAT_V1                    = 342;
    LSD_MAT_V2                    = 343;
    LSD_MAT_V3                    = 344;
    LSDYNA_BETA                   = 148;
    LSD_SYSTEM                    = 184;
    IO_FLAG                       = -1;
    AOPT                          = -1;
    AOPT_FLAG                     = -1;
    LOCAL_MACF                    = -1;
    //empty_string             = -1;
}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY=SCALAR(Rho);
    YOUNG_MODULUS_IN_A-DIRECTION=SCALAR(LSD_MAT_EA);
    YOUNG_MODULUS_B=SCALAR(LSD_MAT_EB);
    YOUNG_MODULUS_C=SCALAR(LSD_MAT_EC);
    POISSON_RATIO_BA=SCALAR(LSD_MAT_PRBA);
    POISSON_RATIO_CA=SCALAR(LSD_MAT_PRCA);
    POISSON_RATIO_CB=SCALAR(LSD_MAT_PRCB);
    SHEAR_MODULUS_AB=SCALAR(LSD_MAT_GAB);
    SHEAR_MODULUS_BC=SCALAR(LSD_MAT_GBC);
    SHEAR_MODULUS_CA=SCALAR(LSD_MAT_GCA);
    BULK_MODULUS=SCALAR(LSD_MAT_KFAIL);
    MATERIAL_AXES_OPTION=SCALAR(AnisoAxisDefiniFlag);
    MATERIAL_AXES_CHANGE_FLAG=SCALAR(LSD_MAT_MACF);
    MATERIAL_ANGLE=SCALAR(LSDYNA_BETA);
    SHEAR_STRENGTH=SCALAR(LSD_MAT_SC);
    LONGITUDINAL_TENSILE_STRENGTH=SCALAR(LSD_MAT_XT);
    TRANSVERSE_TENSILE_STRENGTH=SCALAR(LSD_MAT_YT);
    TRANSVERSE_COMPRESSIVE_STRENGTH=SCALAR(LSD_MAT_YC);
    SHEAR_STRESS_PARAMETER=SCALAR(LSD_MAT_ALPH);
    NORMAL_TENSILE_STRENGTH=SCALAR(LSDYNA_SN);
    SHEAR_STRENGTH_YZ=SCALAR(LSDYNA_SYZ);
    SHEAR_STRENGTH_ZX=SCALAR(LSDYNA_SZX);
    YOUNG_MODULUS = MAX(YOUNG_MODULUS_IN_A-DIRECTION,YOUNG_MODULUS_B,YOUNG_MODULUS_C);
    POISSON_RATIO = MAX(POISSON_RATIO_BA,POISSON_RATIO_CA,POISSON_RATIO_CB);
    SHEAR_MODULUS = MAX(SHEAR_MODULUS_AB,SHEAR_MODULUS_BC,SHEAR_MODULUS_CA);
    //SOUND_SPEED is speed for ISDO = 0 and 1
    SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
    SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
    
    SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+BULK_MODULUS)/MASS_DENSITY)^0.5);
}

GUI(COMMON) 
{
    ASSIGN(KEYWORD_STR, "*MAT_COMPOSITE_DAMAGE");
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
            SCALAR(Comments);
        }
    }     
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    } 
mandatory:
    SCALAR(Rho)                     { DIMENSION="density";}
    SCALAR(LSD_MAT_EA)              {DIMENSION="pressure";}
    SCALAR(LSD_MAT_EB)              {DIMENSION="pressure";}
optional:
    SCALAR(LSD_MAT_EC)              {DIMENSION="pressure";}
    SCALAR(LSD_MAT_PRBA)            {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_PRCA)            {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_PRCB)            {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_GAB)             {DIMENSION="pressure";}
    SCALAR(LSD_MAT_GBC)             {DIMENSION="pressure";}
    SCALAR(LSD_MAT_GCA)             {DIMENSION="pressure";}
optional:
    SCALAR(LSD_MAT_KFAIL)           {DIMENSION="pressure";}

    RADIO(AnisoAxisDefiniFlag)
    {
        ADD(0, "0: Locally orthotropic: axis given by nodes 1,2 and 4");
        ADD(1, "1: Locally orthotropic: a-dir given by a point and global location of element center");
        ADD(2, "2: Globally orthotropic: axis given by vectors");
        ADD(3, "3: Locally orthotropic: axis given by rotating the material axes by an angle BETA");
        ADD(4, "By Default");
    }
    RADIO(LSD_MAT_MACF)
    {
        ADD(1.0, "1.0: No change (default)");
        ADD(2.0, "2.0: Switch material axes a and b");
        ADD(3.0, "3.0: Switch material axes a and c");
    }
    if(AnisoAxisDefiniFlag == 1 || AnisoAxisDefiniFlag == 4)
    {
        DATA(LSD_NODE1);
        SCALAR(LSD_MAT_XP)          {DIMENSION="l";}
        SCALAR(LSD_MAT_YP)          {DIMENSION="l";}
        SCALAR(LSD_MAT_ZP)          {DIMENSION="l";}
    }
    if(AnisoAxisDefiniFlag == 1 || AnisoAxisDefiniFlag == 2)
    {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        SCALAR(LSD_MAT_A1)          {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_A2)          {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_A3)          {DIMENSION="DIMENSIONLESS";}
    }
    if(AnisoAxisDefiniFlag == 2)
    {
        DATA(LSD_NODE7);
        DATA(LSD_NODE8);
        SCALAR(LSD_MAT_D1)          {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_D2)          {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_D3)          {DIMENSION="DIMENSIONLESS";}
    }
    if(AnisoAxisDefiniFlag == 3 || AnisoAxisDefiniFlag == 4)
    {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        SCALAR(LSD_MAT_V1)          {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_V2)          {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_V3)          {DIMENSION="DIMENSIONLESS";}
    }
    if(AnisoAxisDefiniFlag == 3)
    {
        SCALAR(LSDYNA_BETA)         { DIMENSION="a"; }
    }

    SCALAR(LSD_MAT_SC)              {DIMENSION="pressure";}
    SCALAR(LSD_MAT_XT)              {DIMENSION="pressure";}
    SCALAR(LSD_MAT_YT)              {DIMENSION="pressure";}
    SCALAR(LSD_MAT_YC)              {DIMENSION="pressure";}
    SCALAR(LSD_MAT_ALPH)            {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_SN)               {DIMENSION="pressure";}
    SCALAR(LSDYNA_SYZ)              {DIMENSION="pressure";}
    SCALAR(LSDYNA_SZX)              {DIMENSION="pressure";}

    /*
    graphical SUPPORT("Part(s) to which material is applied") {
    OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/SHELL,/COMPONENT/PENTA6,/COMPONENT/SHEL16,/COMPONENT/TSHELL);
    ADD(COMPONENT,"Parts");
    }
    */
}

FORMAT(Keyword971) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    //
    ASSIGN(AOPT, AnisoAxisDefiniFlag - 1, EXPORT);
    //
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSD_MAT_A1, [@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)], EXPORT);
        ASSIGN(LSD_MAT_A2, [@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)], EXPORT);
        ASSIGN(LSD_MAT_A3, [@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)], EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSD_MAT_V1, [@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)], EXPORT);
        ASSIGN(LSD_MAT_V2, [@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)], EXPORT);
        ASSIGN(LSD_MAT_V3, [@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)], EXPORT);
    }
    if(LSD_NODE7 != NONE && LSD_NODE8 != NONE)
    {
        ASSIGN(LSD_MAT_D1, [@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)], EXPORT);
        ASSIGN(LSD_MAT_D2, [@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)], EXPORT);
        ASSIGN(LSD_MAT_D3, [@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)], EXPORT);
    }
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSD_MAT_XP, [@getentityvalue(nodes,$LSD_NODE1,x)], EXPORT);
        ASSIGN(LSD_MAT_YP, [@getentityvalue(nodes,$LSD_NODE1,y)], EXPORT);
        ASSIGN(LSD_MAT_ZP, [@getentityvalue(nodes,$LSD_NODE1,z)], EXPORT);
    }
    if(LSD_MAT_MACF == 1.0)
    {
        ASSIGN(LOCAL_MACF, 1, EXPORT);
    }
    if(LSD_MAT_MACF == 2.0)
    {
        ASSIGN(LOCAL_MACF, 2, EXPORT);
    }
    if(LSD_MAT_MACF == 3.0)
    {
        ASSIGN(LOCAL_MACF, 3, EXPORT);
    }
    if(LSD_MAT_MACF == 4.0)
    {
        ASSIGN(LOCAL_MACF, 4, EXPORT);
    }
    //
    COMMENT("$      MID       RHO        EA        EB        EC      PRBA      PRCA      PRCB");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSD_MAT_EA,LSD_MAT_EB,LSD_MAT_EC,LSD_MAT_PRBA,LSD_MAT_PRCA,LSD_MAT_PRCB);
    //
    CARD_PREREAD("%10s%10s%10s%10s%10lg%10s",_BLANK_,_BLANK_,_BLANK_,_BLANK_,AOPT,LOCAL_MACF);
    if(AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(AnisoAxisDefiniFlag,1,IMPORT);
    }
    else if(AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(AnisoAxisDefiniFlag,2,IMPORT);
    }
    else if(AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(AnisoAxisDefiniFlag,3,IMPORT);
    }
    else if(AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(AnisoAxisDefiniFlag,4,IMPORT);
    }
    else if(AOPT == 4.0 && IO_FLAG == 1)
    {
        ASSIGN(AnisoAxisDefiniFlag,5,IMPORT);
    }
    else if(IO_FLAG == 1)
    {
        ASSIGN(AnisoAxisDefiniFlag, 6,IMPORT);
    }    

    if(IO_FLAG == 1 && LOCAL_MACF == "1")
    {
        ASSIGN(LSD_MAT_MACF, 1.0,IMPORT);
    }
    else if(IO_FLAG == 1 && LOCAL_MACF == "2")
    {
        ASSIGN(LSD_MAT_MACF, 2.0,IMPORT);
    }
    else if(IO_FLAG == 1 && LOCAL_MACF == "3")
    {
        ASSIGN(LSD_MAT_MACF, 3.0,IMPORT);
    }
    else if(IO_FLAG == 1 && LOCAL_MACF == "4")
    {
        ASSIGN(LSD_MAT_MACF, 4.0,IMPORT);
    }
    else if(IO_FLAG == 1 && LOCAL_MACF == "")
    {
        ASSIGN(LSD_MAT_MACF, 0.0,IMPORT);
    }
    //
    COMMENT("$      GAB       GBC       GCA     KFAIL      AOPT      MACF");
    if(AnisoAxisDefiniFlag >= 1 && AnisoAxisDefiniFlag < 6)
    {
        //
        CARD("%10lg%10lg%10lg%10lg%10lg%10s",LSD_MAT_GAB,LSD_MAT_GBC,LSD_MAT_GCA,LSD_MAT_KFAIL,AOPT,LOCAL_MACF);
        //
    }
    else
    {
        ASSIGN(AOPT_FLAG, 1, IMPORT);
        ASSIGN(AOPT_FLAG, 1, EXPORT);
        ASSIGN(AOPT, 0.0, IMPORT);
        ASSIGN(AOPT, 0.0, EXPORT);
        //
        CARD("%10lg%10lg%10lg%10lg%10d%10s",LSD_MAT_GAB,LSD_MAT_GBC,LSD_MAT_GCA,LSD_MAT_KFAIL,SCALAR_OR_OBJECT(AOPT_FLAG,AOPT, LSD_SYSTEM),LOCAL_MACF);
        //      
        ASSIGN(AnisoAxisDefiniFlag, 6, IMPORT);
    }
    if(AnisoAxisDefiniFlag == 2)
    {
        //
        COMMENT("$       XP        YP        ZP");
        CARD("%10lg%10lg%10lg",LSD_MAT_XP,LSD_MAT_YP,LSD_MAT_ZP);
        //
        COMMENT("$                                     A1        A2        A3");
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSD_MAT_A1,LSD_MAT_A2,LSD_MAT_A3);
        //      
    }
    else if(AnisoAxisDefiniFlag == 3)
    {
        //
        COMMENT("$                                     A1        A2        A3");
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSD_MAT_A1,LSD_MAT_A2,LSD_MAT_A3);
        //
        COMMENT("$                                     D1        D2        D3");
        CARD("%10s%10s%10s%10lg%10lg%10lg%10s",_BLANK_,_BLANK_,_BLANK_,LSD_MAT_D1,LSD_MAT_D2,LSD_MAT_D3,_BLANK_);
        //      
    }
    else if(AnisoAxisDefiniFlag == 4)
    {
        //
        BLANK;
        //
        COMMENT("$       V1        V2        V3                                    BETA");
        CARD("%10lg%10lg%10lg%10s%10s%10s%10lg",LSD_MAT_V1,LSD_MAT_V2,LSD_MAT_V3,_BLANK_,_BLANK_,_BLANK_,LSDYNA_BETA);
        //      
    }
    else if(AnisoAxisDefiniFlag == 5)
    {
        //
        COMMENT("$       XP        YP        ZP");
        CARD("%10lg%10lg%10lg",LSD_MAT_XP,LSD_MAT_YP,LSD_MAT_ZP);
        //
        COMMENT("$       V1        V2        V3");
        CARD("%10lg%10lg%10lg%10s%10s%10s%10s",LSD_MAT_V1,LSD_MAT_V2,LSD_MAT_V3,_BLANK_,_BLANK_,_BLANK_,_BLANK_);
        //      
    }
    else
    {
        //
        BLANK;
        //
        BLANK;
        //      
    }
    /*      
    COMMENT("$       XP        YP        ZP        A1        A2        A3");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_XP,LSD_MAT_YP,LSD_MAT_ZP,LSD_MAT_A1,LSD_MAT_A2,LSD_MAT_A3);
    //
    COMMENT("$       V1        V2        V3        D1        D2        D3      BETA");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_V1,LSD_MAT_V2,LSD_MAT_V3,LSD_MAT_D1,LSD_MAT_D2,LSD_MAT_D3,LSDYNA_BETA);
    */
    //
    COMMENT("$       SC        XT        YT        YC      ALPH        SN       SYZ       SZX");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_SC,LSD_MAT_XT,LSD_MAT_YT,LSD_MAT_YC,LSD_MAT_ALPH,LSDYNA_SN,LSDYNA_SYZ,LSDYNA_SZX);
    //
}
