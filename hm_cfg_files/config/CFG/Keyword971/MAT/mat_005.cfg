//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 005
// 

ATTRIBUTES(COMMON)
{
    KEYWORD_STR           = VALUE(STRING, "Solver Keyword");
    CommentEnumField      = VALUE(INT, "User Comments");
    Num_Comments          = SIZE("No. of comment lines");
    Comments              = ARRAY[Num_Comments](STRING, "Entity Comments");
    LSD_TitleOpt          = VALUE(INT, "Title");
    Rho                   = VALUE(FLOAT, "Rho");  
    G                     = VALUE(FLOAT, "G");
    LSD_MAT_BULK          = VALUE(FLOAT, "BULK");
    LSD_MAT_A0            = VALUE(FLOAT, "A0"); 
    LSD_MAT_A1            = VALUE(FLOAT, "A1");
    LSD_MAT_A2            = VALUE(FLOAT, "A2");
    LSD_MAT_PC            = VALUE(FLOAT, "PC"); 
    LSD_MAT_VCR           = VALUE(FLOAT, "VCR");
    LSD_MAT_REF           = VALUE(FLOAT, "REF");
    LSDYNA_EPS1             = VALUE(FLOAT,  "Volumetric strain values");
    LSDYNA_EPS2             = VALUE(FLOAT,  "Volumetric strain values");
    LSDYNA_EPS3             = VALUE(FLOAT,  "Volumetric strain values");
    LSDYNA_EPS4             = VALUE(FLOAT,  "Volumetric strain values");
    LSDYNA_EPS5             = VALUE(FLOAT,  "Volumetric strain values");
    LSDYNA_EPS6             = VALUE(FLOAT,  "Volumetric strain values");
    LSDYNA_EPS7             = VALUE(FLOAT,  "Volumetric strain values");
    LSDYNA_EPS8             = VALUE(FLOAT,  "Volumetric strain values");
    LSDYNA_EPS9             = VALUE(FLOAT,  "Volumetric strain values");
    LSDYNA_EPS10            = VALUE(FLOAT,  "Volumetric strain values");
    MATL84_85_P1            = VALUE(FLOAT,  "Pressures corresponding to volumetric strain values");
    MATL84_85_P2            = VALUE(FLOAT,  "Pressures corresponding to volumetric strain values");
    MATL84_85_P3            = VALUE(FLOAT,  "Pressures corresponding to volumetric strain values");
    MATL84_85_P4            = VALUE(FLOAT,  "Pressures corresponding to volumetric strain values");
    MATL84_85_P5            = VALUE(FLOAT,  "Pressures corresponding to volumetric strain values");
    MATL84_85_P6            = VALUE(FLOAT,  "Pressures corresponding to volumetric strain values");
    MATL84_85_P7            = VALUE(FLOAT,  "Pressures corresponding to volumetric strain values");
    MATL84_85_P8            = VALUE(FLOAT,  "Pressures corresponding to volumetric strain values");
    LSDYNA_P9               = VALUE(FLOAT,  "Pressures corresponding to volumetric strain values");
    LSDYNA_P10              = VALUE(FLOAT,  "Pressures corresponding to volumetric strain values");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    LSD_TitleOpt      = 90;
    Rho               = 118;
    KEYWORD_STR       = 9000;

    /*  T_VECT            = 4294;
    E_VECT            = 4295;
    PR_VECT           = 4296;
    ALPHA_VECT        = 4297;
    SIGY_VECT         = 4298;
    ETAN_VECT         = 4299;*/
    CommentEnumField  = 3220;
    Num_Comments      = 3101;
    Comments          = 3100;

    G                 = 121;
    LSD_MAT_BULK      = 278;
    LSD_MAT_A0        = 279;
    LSD_MAT_A1        = 280;
    LSD_MAT_A2        = 281;
    LSD_MAT_PC        = 282;
    LSD_MAT_VCR       = 283;
    LSD_MAT_REF       = 359;

    LSDYNA_EPS1                             = 201;
    LSDYNA_EPS2                             = 202;
    LSDYNA_EPS3                             = 203;
    LSDYNA_EPS4                             = 204;
    LSDYNA_EPS5                             = 205;
    LSDYNA_EPS6                             = 206;
    LSDYNA_EPS7                             = 207;
    LSDYNA_EPS8                             = 208;
    LSDYNA_EPS9                             = 11500;
    LSDYNA_EPS10                            = 11501;

    MATL84_85_P1                            = 932;
    MATL84_85_P2                            = 933;
    MATL84_85_P3                            = 934;
    MATL84_85_P4                            = 935;
    MATL84_85_P5                            = 936;
    MATL84_85_P6                            = 937;
    MATL84_85_P7                            = 938;
    MATL84_85_P8                            = 939;
    LSDYNA_P9                               = 11516;
    LSDYNA_P10                              = 11517;
}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY= SCALAR(Rho);
    SHEAR_MODULUS= SCALAR(G);
    BULK_MODULUS= SCALAR(LSD_MAT_BULK);
    YIELD_FUNCTION_CONSTANT0= SCALAR(LSD_MAT_A0);
    YIELD_FUNCTION_CONSTANT1 = SCALAR(LSD_MAT_A1);
    YIELD_FUNCTION_CONSTANT2 = SCALAR(LSD_MAT_A2);
    PRESSURE_CUTOFF= SCALAR(LSD_MAT_PC);
    //
    VOLUMETRIC_CRUSHING_OPTION= SCALAR(LSD_MAT_VCR);
    REFERENCE_GEOMETRIY= SCALAR(LSD_MAT_REF);
    YOUNG_MODULUS = EVAL(9*SHEAR_MODULUS*BULK_MODULUS/(3.*BULK_MODULUS+SHEAR_MODULUS)) ;
    POISSON_RATIO     = EVAL((3.*BULK_MODULUS-2.*SHEAR_MODULUS)/(6.*BULK_MODULUS+2.*SHEAR_MODULUS));
public:
    //SOUND_SPEED is speed for ISDO = 0 and 1
    SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
    SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
public:
    SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+BULK_MODULUS)/MASS_DENSITY)^0.5);
}

GUI(COMMON) 
{

    ASSIGN(KEYWORD_STR, "*MAT_SOIL_AND_FOAM");

    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
            SCALAR(Comments);
        }
    } 
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    } 
mandatory:
    SCALAR(Rho)         {DIMENSION="density";}
optional:
    SCALAR(G)           { DIMENSION="pressure";        }
mandatory:
    SCALAR(LSD_MAT_BULK){ DIMENSION="pressure";        }
optional:
    SCALAR(LSD_MAT_A0)  { DIMENSION="square_of_pressure";}
    SCALAR(LSD_MAT_A1)  { DIMENSION="square_of_pressure"; }
    SCALAR(LSD_MAT_A2)  { DIMENSION="square_of_pressure";}
    SCALAR(LSD_MAT_PC)  { DIMENSION="pressure";        }
    RADIO(LSD_MAT_VCR)
    {
        ADD(0, "0: On");
        ADD(1, "1: Loading and unloading path are the same");
    }
    RADIO(LSD_MAT_REF)
    {
        ADD(0.0, "0: Off");
        ADD(1.0, "1: On");
    }
    
    SCALAR(LSDYNA_EPS1)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_EPS2)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_EPS3)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_EPS4)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_EPS5)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_EPS6)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_EPS7)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_EPS8)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_EPS9)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_EPS10)      {DIMENSION="DIMENSIONLESS";}

    SCALAR(MATL84_85_P1)      { DIMENSION="pressure"; }
    SCALAR(MATL84_85_P2)      { DIMENSION="pressure"; }
    SCALAR(MATL84_85_P3)      { DIMENSION="pressure"; }
    SCALAR(MATL84_85_P4)      { DIMENSION="pressure"; }
    SCALAR(MATL84_85_P5)      { DIMENSION="pressure"; }
    SCALAR(MATL84_85_P6)      { DIMENSION="pressure"; }
    SCALAR(MATL84_85_P7)      { DIMENSION="pressure"; }
    SCALAR(MATL84_85_P8)      { DIMENSION="pressure"; }
    SCALAR(LSDYNA_P9)         { DIMENSION="pressure"; }
    SCALAR(LSDYNA_P10)        { DIMENSION="pressure"; }
    /*
    graphical SUPPORT("Part(s) to which material is applied") {
    OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D);
    ADD(COMPONENT,"Parts");
    }
    */
}

// File format
FORMAT(Keyword971) 
{
    COMMENT("$      MID       RHO         G      BULK        A0        A1        A2        PC");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,G,LSD_MAT_BULK,LSD_MAT_A0,LSD_MAT_A1,LSD_MAT_A2,LSD_MAT_PC);

    COMMENT("$      VCR       REF");
    CARD("%10lg%10lg",LSD_MAT_VCR,LSD_MAT_REF);

    COMMENT("$     EPS1      EPS2      EPS3      EPS4      EPS5      EPS6      EPS7      EPS8");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_EPS1,LSDYNA_EPS2,LSDYNA_EPS3,LSDYNA_EPS4,LSDYNA_EPS5,LSDYNA_EPS6,LSDYNA_EPS7,LSDYNA_EPS8);

    COMMENT("$     EPS9     EPS10");
    CARD("%10lg%10lg",LSDYNA_EPS9,LSDYNA_EPS10);

    COMMENT("$       P1        P2        P3        P4        P5        P6        P7        P8");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",MATL84_85_P1,MATL84_85_P2,MATL84_85_P3,MATL84_85_P4,MATL84_85_P5,MATL84_85_P6,MATL84_85_P7,MATL84_85_P8);

    COMMENT("$       P9       P10");
    CARD("%10lg%10lg",LSDYNA_P9,LSDYNA_P10);
}
