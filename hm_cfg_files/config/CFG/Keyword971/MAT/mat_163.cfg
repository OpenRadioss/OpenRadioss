//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 163
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    E                                       = VALUE(FLOAT,  "Youngs modulus");
    LSDYNA_TSC                              = VALUE(FLOAT,  "Tensile stress cutoff");
    LSD_MAT_DAMP                            = VALUE(FLOAT,  "Rate sensitivity via damping coefficient");
    LSD_NCYCLE                              = VALUE(FLOAT,  "Number of cycles to determine the average volumetric strain rate");
    LSD_SRCLMT                              = VALUE(FLOAT,  "Strain rate change limit");
    LSD_TID                                 = VALUE(FLOAT,  "yield stress versus volumetric strain");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    Nu                                      = VALUE(FLOAT,  "Poissons ratio");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    NRSFlag                                 = VALUE(INT , "strain rate in the table");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    E                                       = 119;
    LSDYNA_TSC                              = 262;
    LSD_MAT_DAMP                            = 1121;
    LSD_NCYCLE                              = 4582;
    LSD_SRCLMT                              = 4583;
    LSD_TID                                 = 4581;
    LSD_TitleOpt                            = 90;
    Nu                                      = 120;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    NRSFlag                                 = 5208;
}

DEFAULTS(COMMON)
{

    LSD_MAT_DAMP    = 0.10;
    LSD_NCYCLE    = 12.0;
    LSD_SRCLMT    = 1E+20;

}

DRAWABLES(COMMON) {
 public:
  MASS_DENSITY=SCALAR(Rho);
  YOUNG_MODULUS=SCALAR(E);
  POISSON_RATIO=SCALAR(Nu);
//  TABLE_ID=SCALAR(TID);//OC/2378/22/05/2006
  TENSILE_STRESS_CUTOFF=SCALAR(LSDYNA_TSC);
  RATE_SENITIVITY_VIA_DAMPING_COEFFICIENT=SCALAR(LSD_MAT_DAMP);
  NUMBER_OF_CYCLES=SCALAR(LSD_NCYCLE);
  STRAIN_RATE_CHANGE_LIMIT=SCALAR(LSD_SRCLMT);
 public:
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_MODIFIED_CRUSHABLE_FOAM");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                            {DIMENSION="density";}
 optional:
     SCALAR(E)                              {DIMENSION="pressure";}
     SCALAR(Nu)                             {DIMENSION="DIMENSIONLESS";}
 mandatory:
     SCALAR(LSD_TID);
 optional:
     SCALAR(LSDYNA_TSC)                     {DIMENSION="pressure";}
     SCALAR(LSD_MAT_DAMP)                   {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_NCYCLE)                     {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_SRCLMT)                     {DIMENSION="DIMENSIONLESS";}
     SCALAR(NRSFlag);
/*
     graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    //
    COMMENT("$      MID       RHO         E        PR       TID       TSC      DAMP    NCYCLE");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,LSD_TID,LSDYNA_TSC,LSD_MAT_DAMP,LSD_NCYCLE);
    //
    COMMENT("$   SRCLMT     SFLAG");
    CARD("%10lg%10d",LSD_SRCLMT,NRSFlag);
    //

}
