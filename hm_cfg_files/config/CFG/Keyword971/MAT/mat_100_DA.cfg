//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 100_DA
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    LSD_MAT100DA_CONID                      = VALUE(PROPERTY,  "Connection ID of *DEFINE_CONNECTION card.") { SUBTYPES = (/PROPERTY/DEFINE_CONNECTION_PROPERTIES) ; }
    LSD_MAT100_ASFF                         = VALUE(INT,  "Weld assembly simultaneous failure flag");
    LSD_MAT100_DT                           = VALUE(FLOAT,  "Time step size for mass scaling,");
    E                                       = VALUE(FLOAT,  "Young's Modulus");
    LSD_MAT100_EFAIL                        = VALUE(FLOAT,  "Effective plastic strain in weld material at failure");
    LSD_MAT100_NF                           = VALUE(FLOAT,  "Number of failure function evaluations stored for filtering by time averaging.");
    LSD_MAT100_PR                           = VALUE(FLOAT,  "Poissonâ€™s ratio");
    LSD_MAT100_RS                           = VALUE(FLOAT,  "Rupture strain");
    LSD_MAT100_TFAIL                        = VALUE(FLOAT,  "Failure time if nonzero");
    LSD_MATL100_TRUET                       = VALUE(FLOAT,  "True weld thickness for single hexahedron solid weld elements. See comments below");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    Rho                                     = VALUE(FLOAT,  "Mass density.");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");

}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    LSD_MAT100DA_CONID                      = 941;
    LSD_MAT100_ASFF                         = 6130;
    LSD_MAT100_DT                           = 2531;
    E                                       = 119;
    LSD_MAT100_EFAIL                        = 2532;
    LSD_MAT100_NF                           = 3236;
    LSD_MAT100_PR                           = 2528;
    LSD_MAT100_RS                           = 4439;
    LSD_MAT100_TFAIL                        = 3235;
    LSD_MATL100_TRUET                       = 5353;
    LSD_TitleOpt                            = 90;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    //empty_string                       = -1;

}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  YOUNG_MODULUS=SCALAR(E);
  POISSON_RATIO=SCALAR(LSD_MAT100_PR);
  TIME_STEP_SIZE_FOR_MASS_SCALING=SCALAR(LSD_MAT100_DT);
  FAILURE_TIME_IF_NONZERO=SCALAR(LSD_MAT100_TFAIL);
  EFFECTIVE_PLASTIC_STRAIN_IN_WELD_MATERIAL_AT_FAILURE=SCALAR(LSD_MAT100_EFAIL);
  NUMBER_OF_FORCE_VECTORS_STORED_FOR_FILTERING=SCALAR(LSD_MAT100_NF);
 public:
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);

}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_SPOTWELD_DAIMLERCHRYSLER");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                            {DIMENSION="density";}
     SCALAR(E)                              {DIMENSION="pressure";}
 optional:
     SCALAR(LSD_MAT100_PR)                  {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT100_DT)                  {DIMENSION="t";}
     SCALAR(LSD_MAT100_TFAIL)               {DIMENSION="t";}
     SCALAR(LSD_MAT100_EFAIL)               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT100_NF)                  {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT100_RS)                  {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT100_ASFF);
     SCALAR(LSD_MATL100_TRUET)              {DIMENSION="l";}
     DATA(LSD_MAT100DA_CONID)               {SUBTYPES = (/PROP/DEFINE_CONNECTION_PROPERTIES, /PROP/SECTION_SHELL);}
/*
      graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/SOLID,/COMPONENT/BRICK);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    //
    COMMENT("$      MID       RHO         E        PR                            DT     TFAIL");
    CARD("%10d%10lg%10lg%10lg%10s%10s%10lg%10lg",_ID_,Rho,E,LSD_MAT100_PR,_BLANK_,_BLANK_,LSD_MAT100_DT,LSD_MAT100_TFAIL);
    //
    COMMENT("$    EFAIL                                                                    NF");
    CARD("%10lg%10s%10s%10s%10s%10s%10s%10lg",LSD_MAT100_EFAIL,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_MAT100_NF);
    //
    COMMENT("$       RS      ASFF              TRUE_T    CON_ID");
    CARD("%10lg%10d%10s%10lg%10d",LSD_MAT100_RS,LSD_MAT100_ASFF,_BLANK_,LSD_MATL100_TRUET,LSD_MAT100DA_CONID);
    //
}
