//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 011
// 


ATTRIBUTES(COMMON) 

{

    // Initial and reference densities
    _HAS_HEADER                     = VALUE(BOOL, "Has Header Card");
    KEYWORD_STR                     = VALUE(STRING, "Solver Keyword");
    TITLE                           = VALUE(STRING, "Title");
    spall_option                    = VALUE(INT, "LUND");
    LSD_TitleOpt                    = VALUE(INT, "Title");
    CommentEnumField                = VALUE(INT, "User Comments");
    Num_Comments                    = SIZE("No. of comment lines");
    Comments                        = ARRAY[Num_Comments](STRING, "Entity Comments");
    Rho                             = VALUE(FLOAT, "Rho");  
    G                               = VALUE(FLOAT, "GO");
    LSDYNA_SIGY                     = VALUE(FLOAT, "SIGY");
    LSDYNA_BETA                     = VALUE(FLOAT, "BETA");     
    LSD_MAT_N                       = VALUE(FLOAT,"N");
    LSD_GAMMA                       = VALUE(FLOAT,"GAMMA");
    LSD_MAT_BULK                    = VALUE(FLOAT,"SIGM");
    LSD_B1                          = VALUE(FLOAT,"B");
    LSD_BP                          = VALUE(FLOAT,"BP");
    LSD_H                           = VALUE(FLOAT,"H");
    LSD_G                           = VALUE(FLOAT,"F");
    LSD_A                           = VALUE(FLOAT,"A");
    LSD_ITT                         = VALUE(FLOAT,"TMO");
    LSD_IRR                         = VALUE(FLOAT,"GAMO");
    LSD_SA                          = VALUE(FLOAT,"SA");
    LSD_MAT_PC                      = VALUE(FLOAT,"PC");
    LSD_MAT_SPALL                   = VALUE(FLOAT,"SPALL");
    LSD_RP                          = VALUE(FLOAT,"RP");
    LSD_MAT103_FLAG                 = VALUE(FLOAT,"FLAG");
    LSD_MMN                         = VALUE(FLOAT,"MMN");
    LSD_MMX                         = VALUE(FLOAT,"MMX");
    LSD_ECO                         = VALUE(FLOAT,"EC0");
    LSD_EC1                         = VALUE(FLOAT,"EC1");
    LSD_EC2                         = VALUE(FLOAT,"EC2");
    LSD_EC3                         = VALUE(FLOAT,"EC3");
    LSD_EC4                         = VALUE(FLOAT,"EC4");
    LSD_EC5                         = VALUE(FLOAT,"EC5");
    LSD_EC6                         = VALUE(FLOAT,"EC6");
    LSD_EC7                         = VALUE(FLOAT,"EC7");
    LSD_EC8                         = VALUE(FLOAT,"EC8");
    LSD_EC9                         = VALUE(FLOAT,"EC9");
    LSD_A110                        = VALUE(FLOAT,"UK");
    LSD_C1                          = VALUE(FLOAT,"C1");
    LSD_C2                          = VALUE(FLOAT,"C2");
    LSDYNA_YP                       = VALUE(FLOAT,"YP");
    LSDYNA_A2                       = VALUE(FLOAT,"YA");
    E                               = VALUE(FLOAT,"YM");
    IO_FLAG                         = VALUE(INT, "IO");
    OPT_TYPE_STR                    = VALUE(STRING, "OPT");
    HAS_TITLE                       = VALUE(STRING, "has title option");

}

SKEYWORDS_IDENTIFIER(COMMON)

{
    IO_FLAG                     = -1;
    OPT_TYPE_STR                = -1;
    HAS_TITLE                   = -1;  
    TITLE                       = -1;
    KEYWORD_STR                 = 9000;
    CommentEnumField            = 3220;
    Num_Comments                = 3101;
    spall_option                = 3010;
    LSD_TitleOpt                = 90;
    Comments                    = 3100;
    Rho                         = 118;
    G                           = 121;
    LSDYNA_SIGY                 = 152;
    LSDYNA_BETA                 = 148;
    LSD_MAT_N                   = 312;
    LSD_GAMMA                   = 4336;
    LSD_MAT_BULK                = 278;
    LSD_B1                      = 1517;
    LSD_BP                      = 1555;
    LSD_H                       = 1561;
    LSD_G                       = 1560;
    LSD_A                       = 718;
    LSD_ITT                     = 720;
    LSD_IRR                     = 721;
    LSD_SA                      = 722;
    LSD_MAT_PC                  = 282;
    LSD_MAT_SPALL               = 319;
    LSD_RP                      = 5376;
    LSD_MAT103_FLAG             = 2652;
    LSD_MMN                     = 5377;
    LSD_MMX                     = 5378;
    LSD_ECO                     = 5379;
    LSD_EC1                     = 5380;
    LSD_EC2                     = 5381;
    LSD_EC3                     = 5382;
    LSD_EC4                     = 5383;
    LSD_EC5                     = 5384;
    LSD_EC6                     = 5385;
    LSD_EC7                     = 5386;
    LSD_EC8                     = 5387;
    LSD_EC9                     = 5388;
    LSD_A110                    = 3011;
    LSD_C1                      = 1501;
    LSD_C2                      = 1502;
    LSDYNA_YP                   = 137;
    LSDYNA_A2                   = 140;
    E                           = 119;
    _HAS_HEADER                 = -1;
}

DEFAULTS(COMMON)
{
    //spall_option = 1;
}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY=SCALAR(Rho);
    BASIC_SHEAR_MODULUS=SCALAR(G);
    SIGO=SCALAR(LSDYNA_SIGY);
    SCALE_FACTOR=SCALAR(LSDYNA_BETA);
    N=SCALAR(LSD_MAT_N);
    INITIAL_PLASTIC_STRAIN=SCALAR(LSD_GAMMA);
    SIGM=SCALAR(LSD_MAT_BULK);
    B=SCALAR(LSD_B1);
    BP=SCALAR(LSD_BP);
    H=SCALAR(LSD_H);
    F=SCALAR(LSD_G);
    ATOMIC_WEIGHT=SCALAR(LSD_A);
    TMO=SCALAR(LSD_ITT);
    GAMO=SCALAR(LSD_IRR);
    SA=SCALAR(LSD_SA);
    PC=SCALAR(LSD_MAT_PC);
    SPALL_TYPE=SCALAR(LSD_MAT_SPALL);
    RP=SCALAR(LSD_RP);
    FLAG=SCALAR(LSD_MAT103_FLAG);
    MMN=SCALAR(LSD_MMN);
    MMN=SCALAR(LSD_MMX);
    ACTIVATION_ENERGY=SCALAR(LSD_A110);
    EXPONENT_PREFACTOR=SCALAR(LSD_C1);
    COEFFICIENT_DRAG_TERM=SCALAR(LSD_C2);
    PEIERLS_STRESS=SCALAR(LSDYNA_YP);
    ATHERMAL_YIELD_STRESS=SCALAR(LSDYNA_A2);
    WORK_HARDENING_MAXIMUM=SCALAR(E);
    YOUNG_MODULUS=EVAL(2*1.463*BASIC_SHEAR_MODULUS);
    BULK_MODULUS=EVAL(YOUNG_MODULUS/(3*0.074));
    POISSON_RATIO     = EVAL((3.*BULK_MODULUS-2.*BASIC_SHEAR_MODULUS)/(6.*BULK_MODULUS+2.*BASIC_SHEAR_MODULUS));

  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);

  SOUND_SPEED_SOLID = EVAL(((4*BASIC_SHEAR_MODULUS/3+BULK_MODULUS)/MASS_DENSITY)^0.5);
}

DEFAULTS(COMMON) {
    _HAS_HEADER = TRUE;
}

GUI(COMMON) 

{


    ASSIGN(KEYWORD_STR, "*MAT_STEINBERG");
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
            SCALAR(Comments);
        }
    }
    FLAG(spall_option);
    if(spall_option == 1)
    {
        ASSIGN(KEYWORD_STR, "_LUND");
    } 

    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    } 
mandatory:
    SCALAR(Rho)             { DIMENSION="density";          }
optional:
    SCALAR(G)               {DIMENSION="pressure";}
    SCALAR(LSDYNA_SIGY)     {DIMENSION="pressure";}
    SCALAR(LSDYNA_BETA)     {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_N)       {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_GAMMA)       {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_BULK)    {DIMENSION="pressure";}
    SCALAR(LSD_B1)          {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_BP)          {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_H)           {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_G)           {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_A)           {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_ITT)         {DIMENSION="k";}
    SCALAR(LSD_IRR)         {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_SA)          {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_PC)      {DIMENSION="pressure";}

    RADIO(LSD_MAT_SPALL)
    {   
        ADD(0.0, "0: Default set to, 2.0");
        ADD(1.0, "1: p >= PC");
        ADD(2.0, "2: If sigma-max >= -PC element spalls and tension, p < 0, is never allowed");
        ADD(3.0, "3: p < PC element spalls and tension, p < 0 is never allowed");
    }

    SCALAR(LSD_RP)          {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT103_FLAG) {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MMN)         {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MMX)         {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_ECO)         {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_EC1)         {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_EC2)         {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_EC3)         {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_EC4)         {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_EC5)         {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_EC6)         {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_EC7)         {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_EC8)         {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_EC9)         {DIMENSION="DIMENSIONLESS";}

    if(spall_option == 1)
    {
        SCALAR(LSD_A110)    {DIMENSION="energy";}
        SCALAR(LSD_C1)      {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_C2)      {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_YP)   {DIMENSION="pressure";}
        SCALAR(LSDYNA_A2)   {DIMENSION="pressure";}
        SCALAR(E)           {DIMENSION="pressure";}

    }
    /*
    graphical SUPPORT("Part(s) to which material is applied") {
    OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D);
    ADD(COMPONENT,"Parts");
    }
    */

}

// File format
FORMAT(Keyword971) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    //while reading
    if(IO_FLAG == 1)
    {
        HEADER("*MAT_011_%4s",OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && OPT_TYPE_STR != "LUND")
    {
        HEADER("*MAT_STEINBERG_%4s%6s",OPT_TYPE_STR, HAS_TITLE);
    }
    if(IO_FLAG == 1 && OPT_TYPE_STR == "LUND")
    {
        ASSIGN(spall_option, 1);
    }
    else if(IO_FLAG == 1 && OPT_TYPE_STR == "TITL")
    {
        ASSIGN(LSD_TitleOpt, 1);
    }
    if(IO_FLAG == 1 && HAS_TITLE == "_TITLE")
    {
        ASSIGN(LSD_TitleOpt, 1);
    }


    //while exporting
    if(IO_FLAG == 2 && spall_option == 1 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_STEINBERG_LUND");
    }   
    else if(IO_FLAG == 2 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_STEINBERG");
    }
    else if(IO_FLAG == 2 && spall_option == 1 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_STEINBERG_LUND_TITLE");
        CARD("%-80s", TITLE);
    }   
    else if(IO_FLAG == 2 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_STEINBERG_TITLE");
        CARD("%-80s", TITLE);
    }   



    //
    COMMENT("$      MID       RHO        G0      SIGO      BETA         N      GAMA      SIGM");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,G,LSDYNA_SIGY,LSDYNA_BETA,LSD_MAT_N,LSD_GAMMA,LSD_MAT_BULK);
    //
    COMMENT("$        B        BP         H         F         A       TMO      GAMO        SA");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_B1,LSD_BP,LSD_H,LSD_G,LSD_A,LSD_ITT,LSD_IRR,LSD_SA);
    //
    COMMENT("$       PC     SPALL        RP      FLAG       MMN       MMX       EC0       EC1");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_PC,LSD_MAT_SPALL,LSD_RP,LSD_MAT103_FLAG,LSD_MMN,LSD_MMX,LSD_ECO,LSD_EC1);
    //
    COMMENT("$      EC2       EC3       EC4       EC5       EC6       EC7       EC8       EC9");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_EC2,LSD_EC3,LSD_EC4,LSD_EC5,LSD_EC6,LSD_EC7,LSD_EC8,LSD_EC9);
    //
    if(spall_option == 1)
    {
        //
        COMMENT("$       UK        C1        C2        YP        YA        YM");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_A110,LSD_C1,LSD_C2,LSDYNA_YP,LSDYNA_A2,E);
        //
    }
    //FREE_CARD(spall_option, "%10lg%10lg%10lg%10lg%10lg%10lg",LSD_A110,LSD_C1,LSD_C2,LSDYNA_YP,LSDYNA_A2,E);
}