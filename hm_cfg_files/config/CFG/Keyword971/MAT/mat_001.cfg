//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 001 (ELAST) Setup File
// 

ATTRIBUTES(COMMON) {

    _HMCOMMENTSFLAG         = VALUE(INT, "Write HM Comments");
    _HWCOLOR                = VALUE(INT, "Entity Color");
    CommentEnumField        = VALUE(INT, "User Comments");
    Num_Comments            = SIZE("No. of comment lines");
    Comments                = ARRAY[Num_Comments](STRING, "Entity Comments");
    LSD_TitleOpt            = VALUE(INT, "Title");
    TITLE                   = VALUE(STRING, "Title");
    // Initial and reference densities
    Rho                     = VALUE(FLOAT,"Initial density");  
  // Other values
  E          = VALUE(FLOAT, "Young modulus");
    Nu                      = VALUE(FLOAT, "Poisson ratio");
    LSDYNA_DA               = VALUE(FLOAT, "Axial Damping Factor") ;
    LSDYNA_DB               = VALUE(FLOAT, "Bending Damping Factor") ;
    LSDYNA_K                = VALUE(FLOAT, "Bulk Modulus");
  //Card2
    LSDYNA_VC               = VALUE(FLOAT, "Tensor viscosity coefficient");
    LSDYNA_CP               = VALUE(FLOAT, "Cavitation pressure");  
  MAT_OPTION = VALUE(INT, "Material option");
  //For testing if condition
  IO_FLAG = VALUE(INT, "io flag");
  KEYWORD_STR = VALUE(STRING, "Solver Keyword");
    OPT_TYPE_STR            = VALUE(STRING, "OPT");
    TYPE                    = VALUE(STRING, "");
    _HAS_HEADER             = VALUE(BOOL,"Has Header Card");

}
DEFAULTS(COMMON)
{
  IO_FLAG = 0;
  _HMCOMMENTSFLAG = 0;
    LSDYNA_CP                  = 1.0e+20;
    _HAS_HEADER         = FALSE;
}

SKEYWORDS_IDENTIFIER(COMMON)
{
  LSD_TitleOpt = 90;
    Rho                     = 118;
  E     = 119;   
    Nu                      = 120;
    LSDYNA_DA               = 122;
    LSDYNA_DB               = 123;
    LSDYNA_K                = 124;
    LSDYNA_VC               = 8;
    LSDYNA_CP               = 125;
  MAT_OPTION = 999;  
  KEYWORD_STR = 9000;
    CommentEnumField        = 3220;
   Num_Comments  = 3101; 
    Comments                = 3100;
   IO_FLAG = -1;
    OPT_TYPE_STR            = -1;
    TYPE                    = -1;
    _HAS_HEADER             = -1;
    TITLE                   = -1;
}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY            = SCALAR(Rho);
  YOUNG_MODULUS     = SCALAR(E);
    POISSON_RATIO           = SCALAR(Nu);
    AXIAL_DAMPING           = SCALAR(LSDYNA_DA);
    BENDING_DAMPING         = SCALAR(LSDYNA_DB);
    BULK_MODULUS            = SCALAR(LSDYNA_K);
    VISCOSITY_COEFFICIENT   = SCALAR(LSDYNA_VC);
    CAVITATION_PRESSURE     = SCALAR(LSDYNA_CP);
public:
    //SOUND_SPEED is speed for ISDO = 0 and 1
    SOUND_SPEED             = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
    SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON) {
 
 ASSIGN(KEYWORD_STR, "*MAT_ELASTIC");
 
 RADIO(CommentEnumField)
 {
     ADD(1, "Hide in Menu/Export");
     ADD(2, "Show in Menu/Export");
     ADD(3, "Do not export");
 }
 
 if(CommentEnumField == 2)
 {  
    SIZE(Num_Comments);
    ARRAY(Num_Comments,"")
    {
       SCALAR(Comments);
    }
 }
 FLAG(MAT_OPTION);
 
 if(MAT_OPTION == TRUE)
 {
   ASSIGN(KEYWORD_STR, "_FLUID");
 }
 FLAG(LSD_TitleOpt);
 
 if(LSD_TitleOpt == TRUE)
 {
    ASSIGN(KEYWORD_STR, "_TITLE");
 }
mandatory:  
    SCALAR(Rho)    { DIMENSION="density";  } 
    SCALAR(E)        { DIMENSION="pressure";      } 
optional:
    SCALAR(Nu)       { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_DA)       { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_DB)       { DIMENSION="DIMENSIONLESS"; }
mandatory:
    SCALAR(LSDYNA_K)        { DIMENSION="pressure";      }
  
  if(MAT_OPTION > 0)
  {
optional:
        SCALAR(LSDYNA_VC)     { DIMENSION="DIMENSIONLESS"; }
        SCALAR(LSDYNA_CP)     { DIMENSION="pressure";}
  }
    /*
  graphical SUPPORT("Part(s) to which material is applied") {
    OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/BEAM,/COMPONENT/SPRING,/COMPONENT/TRUSS,/COMPONENT/RIVET,/COMPONENT/SHELL,/COMPONENT/PENTA6,/COMPONENT/SHEL16,/COMPONENT/TSHELL);
    ADD(COMPONENT,"Parts");
  }
    */
}

// File format
FORMAT(Keyword971) {
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    //Import
    if(IO_FLAG == 1)
    {
       HEADER("*MAT_%Fs",TYPE);
       ASSIGN(MAT_OPTION,_FIND(TYPE,"_FLUID"),IMPORT);
       ASSIGN(LSD_TitleOpt,_FIND(TYPE,"_TITLE"),IMPORT);
    }

    //Export
    if(IO_FLAG == 2 && MAT_OPTION == 0 && LSD_TitleOpt == 0)
    {
        HEADER("*MAT_ELASTIC");
    }
    else if(IO_FLAG == 2 && MAT_OPTION == 0 && LSD_TitleOpt == 1)
    {
        HEADER("*MAT_ELASTIC_TITLE");
    }  
    else if(IO_FLAG == 2 && MAT_OPTION == 1 && LSD_TitleOpt == 0)
    {
        HEADER("*MAT_ELASTIC_FLUID");
    }  
    else if(IO_FLAG == 2 && MAT_OPTION == 1 && LSD_TitleOpt == 1)
    {
        HEADER("*MAT_ELASTIC_FLUID_TITLE");
    }

    if(IO_FLAG == 2 && LSD_TitleOpt == 1)
    {
        CARD("%-80s", TITLE);
    }
    COMMENT("$      MID       RHO         E        PR        DA        DB         K");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg",_ID_, Rho, E, Nu, LSDYNA_DA, LSDYNA_DB, LSDYNA_K);
 
    if(MAT_OPTION == 1)
  {
     COMMENT("$       VC        CP");
  }
    if(MAT_OPTION == 1 || IO_FLAG == 2)
    {
       FREE_CARD(MAT_OPTION, "%10lg%10lg", LSDYNA_VC, LSDYNA_CP); 
    }
}
