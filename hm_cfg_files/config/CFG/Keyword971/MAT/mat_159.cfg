//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 159
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    LSDYNA_K                                = VALUE(FLOAT,  "Bulk modulus");
    LSD_G                                   = VALUE(FLOAT,  "Shear modulus");
    LSDYNA_BETA                             = VALUE(FLOAT,  "Tri-axial compression surface exponent");
    LSDYNA_BETA1                            = VALUE(FLOAT,  "Torsion surface exponent");
    LSDYNA_NPLOT                            = VALUE(INT,  "Controls component 7 to the d3plot database");
    LSD_ALPHA                               = VALUE(FLOAT,  "Tri-axial compression surface constant term");
    LSD_ALPHA1                              = VALUE(FLOAT,  "Torsion surface constant term");
    LSD_ALPHA2                              = VALUE(FLOAT,  "Tri-axial extension surface constant term");
    LSD_BETA2                               = VALUE(FLOAT,  "Tri-axial extension surface exponent");
    LSD_CH                                  = VALUE(FLOAT,  "Hardening rate");
    LSD_DAGG                                = VALUE(FLOAT,  "Maximum aggregate size");
    LSD_ERODE                               = VALUE(FLOAT,  "Erosion");
    LSD_ETA0C                               = VALUE(FLOAT,  "Rate effects parameter for uniaxial compressive stress");
    LSD_ETA0T                               = VALUE(FLOAT,  "Rate effects parameter for uniaxial tensile stress");
    LSD_FPC                                 = VALUE(FLOAT,  "Unconfined compression strength");
    LSD_GAMMA                               = VALUE(FLOAT,  "Tri-axial compression surface nonlinear term");
    LSD_GAMMA1                              = VALUE(FLOAT,  "Torsion surface nonlinear term");
    LSD_GAMMA2                              = VALUE(FLOAT,  "Tri-axial extension surface nonlinear term");
    LSD_GFC                                 = VALUE(FLOAT,  "Fracture energy in uniaxial stress");
    LSD_GFS                                 = VALUE(FLOAT,  "Fracture energy in pure shear stress");
    LSD_GFT                                 = VALUE(FLOAT,  "Fracture energy in uniaxial tension");
    LSD_INCRE                               = VALUE(FLOAT,  "Maximum strain increment for subincrementation");
    LSD_IRATE                               = VALUE(INT,  "Rate effects options");
    LSD_ITRETRC                             = VALUE(INT,  "Cap retraction option");
    LSD_MAT_B                               = VALUE(FLOAT,  "Ductile shape softening parameter");
    LSD_MAT_D                               = VALUE(FLOAT,  "Brittle shape softening parameter");
    LSD_MAT_D1                              = VALUE(FLOAT,  "Linear shape parameter");
    LSD_MAT_D2                              = VALUE(FLOAT,  "Quadratic shape parameter");
    LSD_NC                                  = VALUE(FLOAT,  "Rate effects power for uniaxial compressive stress");
    LSD_NH                                  = VALUE(FLOAT,  "Hardening initiation");
    LSD_NT                                  = VALUE(FLOAT,  "Rate effects power for uniaxial tensile stress");
    LSD_OVERC                               = VALUE(FLOAT,  "Maximum overstress allowed in compression");
    LSD_OVERT                               = VALUE(FLOAT,  "Maximum overstress allowed in tension.");
    LSD_PMOD                                = VALUE(FLOAT,  "Modify moderate pressure softening parameter");
    LSD_PRED                                = VALUE(FLOAT,  "Pre-existing damage");
    LSD_PWRC                                = VALUE(FLOAT,  "Shear-to-compression transition parameter");
    LSD_PWRT                                = VALUE(FLOAT,  "Shear-to-tension transition parameter");
    LSD_R                                   = VALUE(FLOAT,  "Cap aspect ratio");
    LSD_RECOV                               = VALUE(FLOAT,  "modulus is recovered in compression when RECOV is equal to 0");
    LSD_REPOW                               = VALUE(FLOAT,  "Power which increases fracture energy with rate effects");
    LSD_SRATE                               = VALUE(FLOAT,  "Ratio of effective shear stress to tensile stress fluidity parameters");
    LSD_THETA                               = VALUE(FLOAT,  "Tri-axial compression surface linear term");
    LSD_THETA1                              = VALUE(FLOAT,  "Torsion surface linear term");
    LSD_THETA2                              = VALUE(FLOAT,  "Tri-axial extension surface linear term");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    LSD_UNITS                               = VALUE(INT,  "Units options");
    LSD_W                                   = VALUE(FLOAT,  "Maximum plastic volume compaction");
    LSD_X0                                  = VALUE(FLOAT,  "Cap initial location");
    MatlOption                              = VALUE(INT,  "Options");
    RecovOption                             = VALUE(INT,  "RECOV Options");
    IO_FLAG                                 = VALUE(INT, "io flag");
    OPT_TYPE_STR                            = VALUE(STRING, "OPT");
    TITLE                                   = VALUE(STRING, "Title");
    _HAS_HEADER                             = VALUE(BOOL,"Has Header Card");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    LSDYNA_BETA                             = 148;
    LSDYNA_BETA1                            = 259;
    LSDYNA_K                                = 124;
    LSDYNA_NPLOT                            = 5535;
    LSD_ALPHA                               = 1651;
    LSD_ALPHA1                              = 4817;
    LSD_ALPHA2                              = 4579;
    LSD_BETA2                               = 4822;
    LSD_CH                                  = 5578;
    LSD_DAGG                                = 5592;
    LSD_ERODE                               = 5573;
    LSD_ETA0C                               = 5584;
    LSD_ETA0T                               = 5586;
    LSD_FPC                                 = 5591;
    LSD_G                                   = 1560;
    LSD_GAMMA                               = 4336;
    LSD_GAMMA1                              = 4820;
    LSD_GAMMA2                              = 4823;
    LSD_GFC                                 = 5579;
    LSD_GFS                                 = 5580;
    LSD_GFT                                 = 5593;
    LSD_INCRE                               = 5572;
    LSD_IRATE                               = 5537;
    LSD_ITRETRC                             = 5575;
    LSD_MAT_B                               = 311;
    LSD_MAT_D                               = 1133;
    LSD_MAT_D1                              = 320;
    LSD_MAT_D2                              = 321;
    LSD_NC                                  = 5585;
    LSD_NH                                  = 5577;
    LSD_NT                                  = 5227;
    LSD_OVERC                               = 5587;
    LSD_OVERT                               = 5588;
    LSD_PMOD                                = 5583;
    LSD_PRED                                = 5576;
    LSD_PWRC                                = 5581;
    LSD_PWRT                                = 5582;
    LSD_R                                   = 1166;
    LSD_RECOV                               = 5574;
    LSD_REPOW                               = 5590;
    LSD_SRATE                               = 5589;
    LSD_THETA                               = 4793;
    LSD_THETA1                              = 4818;
    LSD_THETA2                              = 4821;
    LSD_TitleOpt                            = 90;
    LSD_UNITS                               = 5568;
    LSD_W                                   = 1638;
    LSD_X0                                  = 4799;
    MatlOption                              = 104;
    Num_Comments                            = 3101;
    RecovOption                             = 5652;
    Rho                                     = 118;
    IO_FLAG                                 = -1;
    OPT_TYPE_STR                            = -1;
    TITLE                                   = -1;
    _HAS_HEADER                             = -1;
}

CHECK(COMMON)
{

    LSD_RECOV                                 >=0.0;
    LSD_RECOV                                 <=1.0;
}

DEFAULTS(COMMON)
{

    LSDYNA_NPLOT    = 1;
    LSD_ERODE       = 1.0;
    LSD_INCRE       = 1.0;
    LSD_RECOV       = 0.0;
    LSD_UNITS       = 0;
    _HAS_HEADER     = TRUE;
}

DRAWABLES(COMMON)
{
  
 public:
  
      MASS_DENSITY=SCALAR(Rho);
      MAXIMUM_STRAIN_INCREMENT=SCALAR(LSD_INCRE);  
      SHEAR_MODULUS=SCALAR(LSD_G);
      BULK_MODULUS=SCALAR(LSDYNA_K); 
      MAXIMUM_PLASTIC_VOLUME_COMPACTION=SCALAR(LSD_W); 
      FRACTURE_ENERGY_IN_UNIAXIAL_STRESS=SCALAR(LSD_GFC); 
      FRACTURE_ENERGY_IN_UNIAXIAL_TENSION=SCALAR(LSD_GFT);
      FRACTURE_ENERGY_IN_IN_PURE_SHEAR_STRESS=SCALAR(LSD_GFS);  
      RATE_EFFECT_PARAMETER_FOR_UNIAXIAL_COMPRESSIVE_STRESS_ETA0C=SCALAR(LSD_ETA0C);
      RATE_EFFECT_PARAMETER_FOR_UNIAXIAL_COMPRESSIVE_STRESS_ETA0T=SCALAR(LSD_ETA0T);
      MAXIMUM_OVERSTRESS_ALLOWED_IN_COMPRESSION=SCALAR(LSD_OVERC);
      MAXIMUM_OVERSTRESS_ALLOWED_IN_TENSION=SCALAR(LSD_OVERT);
      POWER_WHICH_INCREASES_FRACTURE_ENERGY=SCALAR(LSD_REPOW);  

 private:  
      POISSON_RATIO     = EVAL((3.*BULK_MODULUS-2.*SHEAR_MODULUS)/(6.*BULK_MODULUS+2.*SHEAR_MODULUS));
      YOUNG_MODULUS=EVAL(3*(1-2*POISSON_RATIO)*SHEAR_MODULUS) ;

 public:
     //SOUND_SPEED is speed for ISDO = 0 and 1
      SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
      SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 public:
      SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+BULK_MODULUS)/MASS_DENSITY)^0.5);
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_CSCM");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }   
     RADIO(MatlOption)
     {
        ADD(1, "None");
        ADD(2, "Concrete");
     }
     if(MatlOption == 2)
     {
        ASSIGN(KEYWORD_STR, "_CONCRETE");
     }
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == 1)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 

     SCALAR(Rho)                                        {DIMENSION="density";}
     RADIO(LSDYNA_NPLOT)
     {
        ADD(1, "1: Maximum of brittle and ductile damage (default)");
        ADD(2, "2: Maximum of brittle and ductile damage, with recovery of brittle damage");
        ADD(3, "3: Brittle damage");
        ADD(4, "4: Ductile damage");
        ADD(5, "5: k, Intersection of cap with shear surface");
        ADD(6, "6: XO, Intersection of cap with pressure axis");
        ADD(7, "7: Plastic volume strain");

     }
     SCALAR(LSD_INCRE)                                  {DIMENSION="DIMENSIONLESS";}
     RADIO(LSD_IRATE)
     {
          ADD(0, "0: Rate effects model turned off (default)");
          ADD(1, "1: Rate effects model turned on");
     }
     SCALAR(LSD_ERODE)                                  {DIMENSION="DIMENSIONLESS";}
     RADIO(RecovOption)
     {
          ADD(1, "1");
          ADD(2, "2");
     }
     if(RecovOption == 1 || RecovOption == 2)
     {                                             //to be checked // When the RecovOption == 1 the limit of LSD_RECOV should be >= 0.0 to <= 1.0
         SCALAR(LSD_RECOV);                                                                   
     }                                             //to be checked // When the RecovOption == 1 the limit of LSD_RECOV should be >= 10.0 to <= 11.0
     RADIO(LSD_ITRETRC)
     {
          ADD(0, "0: Cap does not retract");
          ADD(1, "1: Cap retracts");
     }
     SCALAR(LSD_PRED);
     if(MatlOption == 1)
     {
         SCALAR(LSD_G)                                  {DIMENSION="pressure";}
         SCALAR(LSDYNA_K)                               {DIMENSION="pressure";}
         SCALAR(LSD_ALPHA)                              {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_THETA)                              {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_GAMMA)                              {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSDYNA_BETA)                            {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_NH)                                 {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_CH)                                 {DIMENSION="DIMENSIONLESS";}
         
         SCALAR(LSD_ALPHA1)                             {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_THETA1)                             {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_GAMMA1)                             {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSDYNA_BETA1)                           {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_ALPHA2)                             {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_THETA2)                             {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_GAMMA2)                             {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_BETA2)                              {DIMENSION="DIMENSIONLESS";}

         SCALAR(LSD_R)                                  {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_X0)                                 {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_W)                                  {DIMENSION="volume";}
         SCALAR(LSD_MAT_D1)                             {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_MAT_D2)                             {DIMENSION="DIMENSIONLESS";}
         
         SCALAR(LSD_MAT_B)                              {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_GFC)                                {DIMENSION="energy";}
         SCALAR(LSD_MAT_D)                              {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_GFT)                                {DIMENSION="energy";}
         SCALAR(LSD_GFS)                                {DIMENSION="energy";}
         SCALAR(LSD_PWRC)                               {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_PWRT)                               {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_PMOD)                               {DIMENSION="DIMENSIONLESS";}
         
         SCALAR(LSD_ETA0C)                              {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_NC)                                 {DIMENSION="t";} 
         SCALAR(LSD_ETA0T)                              {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_NT)                                 {DIMENSION="t";}  
         SCALAR(LSD_OVERC)                              {DIMENSION="pressure";}
         SCALAR(LSD_OVERT)                              {DIMENSION="pressure";}  
         SCALAR(LSD_SRATE)                              {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_REPOW)                              {DIMENSION="DIMENSIONLESS";}  
     }
     if(MatlOption == 2)
     {
         SCALAR(LSD_FPC)                                {DIMENSION="pressure";}
         SCALAR(LSD_DAGG)                               {DIMENSION="l";}
         RADIO(LSD_UNITS)
         {
            ADD(0, "0: GPa, mm, msec, Kg/mm3, kN");
            ADD(1, "1: MPa, mm, msec, g/mm3, Nt");
            ADD(2, "2: MPa, mm, sec, Mg/mm3, Nt");
            ADD(3, "3: Pst, inch, sec, lb-s2/inch4, lb");
            ADD(4, "4: Pa, m, sec, kg/m3, N");
         }
     }
/*
  graphical SUPPORT("Part(s) to which material is applied") 
  {
    OBJECTS=(/COMPONENT/SOLID);
    ADD(COMPONENT,"Parts");
  } 
*/
}

// File format
FORMAT(Keyword971) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    //
    if(IO_FLAG == 1)
    {
        HEADER("*MAT_159_%8s",OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && OPT_TYPE_STR != "CONCRETE")
    {
         HEADER("*MAT_CSCM_%8s", OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && OPT_TYPE_STR == "CONCRETE")
    {
        ASSIGN(MatlOption, 2);
    }
    else if(IO_FLAG == 1)
    {
        ASSIGN(MatlOption, 1);
    }
    if(IO_FLAG == 2 && MatlOption == 1 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_CSCM");
    }   
    else if(IO_FLAG == 2 && MatlOption == 1 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_CSCM_TITLE");
        CARD("%-80s", TITLE);
    }
    else if(IO_FLAG == 2 && MatlOption == 2 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_CSCM_CONCRETE");
    }   
    else if(IO_FLAG == 2 && MatlOption == 2 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_CSCM_CONCRETE_TITLE");
        CARD("%-80s", TITLE);
    }
    //
    COMMENT("$      MID       RHO     NPLOT     INCRE     IRATE     ERODE     RECOV    IRETRC");
    CARD("%10d%10lg%10d%10lg%10d%10lg%10lg%10d",_ID_,Rho,LSDYNA_NPLOT,LSD_INCRE,LSD_IRATE,LSD_ERODE,LSD_RECOV,LSD_ITRETRC);

    //  
    COMMENT("$     PRED");
    CARD("%10lg",LSD_PRED);
    //
    if(MatlOption == 1)
    {
        //  
        COMMENT("$        G         K     ALPHA     THETA     LAMDA      BETA        NH        CH");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_G,LSDYNA_K,LSD_ALPHA,LSD_THETA,LSD_GAMMA,LSDYNA_BETA,LSD_NH,LSD_CH);
        //  
        COMMENT("$   ALPHA1    THETA1    LAMDA1     BETA1    ALPHA2    THETA2    LAMDA2     BETA2");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_ALPHA1,LSD_THETA1,LSD_GAMMA1,LSDYNA_BETA1,LSD_ALPHA2,LSD_THETA2,LSD_GAMMA2,LSD_BETA2);
        //  
        COMMENT("$        R        X0         W        D1        D2");
        CARD("%10lg%10lg%10lg%10lg%10lg",LSD_R,LSD_X0,LSD_W,LSD_MAT_D1,LSD_MAT_D2);
        // 
        COMMENT("$        B       GFC         D       GFT       GFS      PWRC      PWRT      PMOD");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_B,LSD_GFC,LSD_MAT_D,LSD_GFT,LSD_GFS,LSD_PWRC,LSD_PWRT,LSD_PMOD);
        //  
        COMMENT("$    ETA0C        NC     ETA0T        NT     OVERC     OVERT     SRATE     REPOW");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_ETA0C,LSD_NC,LSD_ETA0T,LSD_NT,LSD_OVERC,LSD_OVERT,LSD_SRATE,LSD_REPOW);
        //
    }
    if(MatlOption == 2)
    {
        //    
        COMMENT("$      FPC      DAGG     UNITS");
        CARD("%10lg%10lg%10d",LSD_FPC,LSD_DAGG,LSD_UNITS);
        //
    }
}
