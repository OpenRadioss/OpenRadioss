//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 090
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    LSD_MAT90_ATMOS                         = VALUE(FLOAT,  "Atmospheric pressure");
    LSD_MAT90_BETA                          = VALUE(FLOAT,  "Damping factor");
    LSD_MAT90_C                             = VALUE(FLOAT,  "Sound speed");
    LSD_MAT90_CF                            = VALUE(FLOAT,  "Cavitation flag");
    LSD_MAT90_GRAV                          = VALUE(FLOAT,  "Gravitational acceleration constant");
    LSD_MAT90_XN                            = VALUE(FLOAT,  "x-direction cosine of free surface normal vector");
    LSD_MAT90_XP                            = VALUE(FLOAT,  "x-coordinate of free surface point");
    LSD_MAT90_YN                            = VALUE(FLOAT,  "y-direction cosine of free surface normal vector");
    LSD_MAT90_YP                            = VALUE(FLOAT,  "y-coordinate of free surface point");
    LSD_MAT90_ZN                            = VALUE(FLOAT,  "z-direction cosine of free surface normal vector");
    LSD_MAT90_ZP                            = VALUE(FLOAT,  "z-coordinate of free surface point");
    LSD_TitleOpt                            = VALUE(INT,  "Title");

}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    LSD_MAT90_ATMOS                         = 2544;
    LSD_MAT90_BETA                          = 2542;
    LSD_MAT90_C                             = 2541;
    LSD_MAT90_CF                            = 2543;
    LSD_MAT90_GRAV                          = 2545;
    Rho                                     = 118;
    LSD_MAT90_XN                            = 2549;
    LSD_MAT90_XP                            = 2546;
    LSD_MAT90_YN                            = 2550;
    LSD_MAT90_YP                            = 2547;
    LSD_MAT90_ZN                            = 2551;
    LSD_MAT90_ZP                            = 2548;
    LSD_TitleOpt                            = 90;
    Num_Comments                            = 3101;

}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  SOUND_SPEED=SCALAR(LSD_MAT90_C);
  SOUND_SPEED_SOLID=SCALAR(LSD_MAT90_C);
  DAMPING_FACTOR=SCALAR(LSD_MAT90_BETA);
  CAVITATION_FLAG=SCALAR(LSD_MAT90_CF);
  ATMOSPHERIC_PRESSURE=SCALAR(LSD_MAT90_ATMOS);
  GRAVITATIONAL_ACCELERATION_CONSTANT=SCALAR(LSD_MAT90_GRAV);
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_ACOUSTIC");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                        {DIMENSION="density";}
 optional:
     SCALAR(LSD_MAT90_C)                {DIMENSION="velocity";}
     SCALAR(LSD_MAT90_BETA)             {DIMENSION="DIMENSIONLESS";}
     RADIO(LSD_MAT90_CF)                
     {
        ADD(0.0, "0.0: Off");
        ADD(1.0, "1.0: On");
     }
 optional:
     SCALAR(LSD_MAT90_ATMOS)            {DIMENSION="pressure";}
 optional:
     SCALAR(LSD_MAT90_GRAV)             {DIMENSION="acceleration";}
 mandatory:
     SCALAR(LSD_MAT90_XP)               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT90_YP)               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT90_ZP)               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT90_XN)               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT90_YN)               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT90_ZN)               {DIMENSION="DIMENSIONLESS";}
/*
    graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
      //
      COMMENT("$      MID       RHO         C      BETA        CF     ATMOS      GRAV");
      CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSD_MAT90_C,LSD_MAT90_BETA,LSD_MAT90_CF,LSD_MAT90_ATMOS,LSD_MAT90_GRAV);
      //
      COMMENT("$       XP        YP        ZP        XN        YN        ZN");
      CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT90_XP,LSD_MAT90_YP,LSD_MAT90_ZP,LSD_MAT90_XN,LSD_MAT90_YN,LSD_MAT90_ZN);
      //
}
