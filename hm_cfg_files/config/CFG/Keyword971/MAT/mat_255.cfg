//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 255
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    Num_Comments                            = SIZE("No. of comment lines");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    EncTypeEnumField                        = VALUE(INT,  "Type");
    RegTypeEnumField                        = VALUE(INT,  "Type");
    E                                       = VALUE(FLOAT,  "Young's modulus");
    LALPHA_CURVE_OPTION                     = VALUE(INT,  "NegLALPHAFlag");
    LSDYNA_C                                = VALUE(FLOAT,  "Strain rate parameter");
    LSDYNA_P                                = VALUE(FLOAT,  "Strain rate parameter");
    LSDYNA_TDEL                             = VALUE(FLOAT,  "min time step");
    LSD_ALPHA                               = VALUE(FLOAT,  "Coefficient of thermal expansion");
    LSD_LALPHA                              = VALUE(FUNCT,  "thermal expansion coefficient vs temperature");
    LSD_LCID                                = VALUE(FUNCT,  "Young's modulus vs temp. curve");
    LSD_LCID2                               = VALUE(FUNCT,  "Poisson's ratio vs temperature");
    LSD_PRCurve                             = VALUE(INT,  "PoissonRatioCurve");
    LSD_TABIDC                              = VALUE(FUNCT,  "Table ID for yield stress in compression");
    LSD_TABIDT                              = VALUE(FUNCT,  "Table ID for yield stress in tension");
    LSD_TREF                                = VALUE(FLOAT,  "Reference temperature");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    LSD_VP                                  = VALUE(FLOAT,  "Formulation for rate effects");
    LSD_YMCurve                             = VALUE(INT,  "Young's modulus");
    MAT255_FAIL                             = VALUE(FLOAT,  "Effective plastic strain at failure");
    Nu                                      = VALUE(FLOAT,  "Poisson's ratio");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    IO_FLAG                                 = VALUE(INT, "io flag");
    _HMCOMMENTSFLAG                         = VALUE(INT, "Write HM Comments");
    TITLE                                   = VALUE(STRING, "Title");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    E                                       = 119;
    LALPHA_CURVE_OPTION                     = 8368;
    LSDYNA_C                                = 197;
    LSDYNA_P                                = 198;
    LSDYNA_TDEL                             = 173;
    LSD_ALPHA                               = 1651;
    LSD_LALPHA                              = 8364;
    LSD_LCID                                = 45;
    LSD_LCID2                               = 168;
    LSD_PRCurve                             = 8216;
    LSD_TABIDC                              = 8362;
    LSD_TABIDT                              = 8363;
    LSD_TREF                                = 1643;
    LSD_TitleOpt                            = 90;
    LSD_VP                                  = 2826;
    LSD_YMCurve                             = 8215;
    MAT255_FAIL                             = 8366;
    Nu                                      = 120;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    IO_FLAG                                 = -1;
    EncTypeEnumField                        = 5828;
    RegTypeEnumField                        = 5827;
    //empty_string                       = -1;
}
DRAWABLES(COMMON) {
public:
    MASS_DENSITY=SCALAR(Rho);
    YOUNG_MODULUS = SCALAR(E);
    POISSON_RATIO = SCALAR(Nu);
        //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}
DEFAULTS(COMMON)
{
}

CHECK(COMMON)
{
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*MAT_PIECEWISE_LINEAR_PLASTIC_THERMAL");
    RADIO(CommentEnumField)
     {
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
mandatory:
    SCALAR(Rho);
    FLAG( LSD_YMCurve);
    if(LSD_YMCurve == FALSE)
    {
        SCALAR(E);
    }
    else
    {
        DATA(LSD_LCID);
    }
    FLAG( LSD_PRCurve);
    if(LSD_PRCurve == FALSE)
    {
        SCALAR(Nu);
    }
    else
    {
        DATA(LSD_LCID2);
    }
optional:
    SCALAR(LSDYNA_C);
    SCALAR(LSDYNA_P);
    SCALAR(MAT255_FAIL);
    SCALAR(LSDYNA_TDEL);
     DATA(LSD_TABIDC);
     DATA(LSD_TABIDT);
    FLAG( LALPHA_CURVE_OPTION);
    if(LALPHA_CURVE_OPTION == FALSE)
    {
        DATA(LSD_LALPHA);
    }
    else
    {
        DATA(LSD_LALPHA);
    }
    SCALAR(LSD_VP);
    SCALAR(LSD_ALPHA);
    SCALAR(LSD_TREF);

}

// File format
FORMAT(Keyword971) 
{
    
    //
    COMMENT("$      MID       RHO         E        PR         C         P      FAIL      TDEL");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,SCALAR_OR_OBJECT(LSD_YMCurve,E,LSD_LCID),SCALAR_OR_OBJECT(LSD_PRCurve,Nu,LSD_LCID2),LSDYNA_C,LSDYNA_P,MAT255_FAIL,LSDYNA_TDEL);
    //
    COMMENT("$   TABIDC    TABIDT    LALPHA                  VP");
    CARD("%10d%10d%10lg%10s%10lg",LSD_TABIDC,LSD_TABIDT,FLAGGED_OBJECT(LSD_LALPHA,LALPHA_CURVE_OPTION),_BLANK_,LSD_VP);
    //
    COMMENT("$    ALPHA      TREF");
    CARD("%10lg%10lg",LSD_ALPHA,LSD_TREF);
}
