//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 053
// 


 ATTRIBUTES(COMMON)  
 {
  
  // Initial and reference densities
  KEYWORD_STR                       = VALUE(STRING, "Solver Keyword");
  LSD_TitleOpt                      = VALUE(INT, "Title");
  CommentEnumField                  = VALUE(INT, "User Comments");
  Num_Comments                      = SIZE("No. of comment lines");
  Comments                          = ARRAY[Num_Comments](STRING, "Entity Comments");
  Rho                               = VALUE(FLOAT, "Mass density");  
  E                                 = VALUE(FLOAT, "Young’s modulus");
  LSD_MAT_A                         = VALUE(FLOAT, "A factor for yield stress definition");
  LSD_MAT_B                         = VALUE(FLOAT, "B factor for yield stress definition");
  LSD_MAT_C                         = VALUE(FLOAT, "C factor for yield stress definition");
  LSD_MAT_P0                        = VALUE(FLOAT, "P0 Initial foam pressure");
  LSD_MAT_PHI                       = VALUE(FLOAT, "PHI Ratio of foam to polymer density");
  LSD_MAT_GAMA0                     = VALUE(FLOAT, "Initial volumetric strain");
  LSD_LCID                          = VALUE(FUNCT, "Optional load curve defining the von Mises yield stress versus gamma");
  LOC_NU                            = VALUE(FLOAT, "Temp poisson ratio");



}

SKEYWORDS_IDENTIFIER(COMMON)
{

  KEYWORD_STR                   = 9000;
  CommentEnumField              = 3220;
  Num_Comments                  = 3101;
  LSD_TitleOpt                  = 90;
  Comments                      = 3100;
  Rho                           = 118;
  E                             = 119;
  LSD_MAT_A                     = 310;
  LSD_MAT_B                     = 311;
  LSD_MAT_C                     = 313;
  LSD_MAT_P0                    = 1122;
  LSD_MAT_PHI                   = 1123;
  LSD_MAT_GAMA0                 = 1124;
  LSD_LCID                      = 45;
  LOC_NU                        = -1;  
}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  YOUNG_MODULUS=SCALAR(E);
  YIELD_STRESS_A=SCALAR(LSD_MAT_A);
  YIELD_STRESS_B=SCALAR(LSD_MAT_B);
  YIELD_STRESS_C=SCALAR(LSD_MAT_C);
  INITIAL_FOAM_PRESSURE_PO=SCALAR(LSD_MAT_P0);
  RATIO_OF_FOAM=SCALAR(LSD_MAT_PHI);
  GAMA0=SCALAR(LSD_MAT_GAMA0);
// FOR THIS MAT POISSON_RATIO EQUAL TO ZERO
  POISSON_RATIO=SCALAR(LOC_NU);
 public:
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED        = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2));
  C1                = EVAL(YOUNG_MODULUS/(3));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

DEFAULTS(COMMON)
{
    LOC_NU        = 0.0;
}
GUI(COMMON) 
{


     ASSIGN(KEYWORD_STR, "*MAT_CLOSED_CELL_FOAM");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
       {
             ASSIGN(KEYWORD_STR, "_TITLE");
       } 
 mandatory:
     SCALAR(Rho)                        { DIMENSION="density";}
 optional:
     SCALAR(E)                          {DIMENSION="pressure";}
     SCALAR(LSD_MAT_A)                  {DIMENSION="pressure";}
     SCALAR(LSD_MAT_B)                  {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_C)                  {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_P0)                 {DIMENSION="pressure";}
     SCALAR(LSD_MAT_PHI)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_GAMA0)              {DIMENSION="DIMENSIONLESS";}
     FUNCTION(LSD_LCID)
     {
       X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
       Y_TITLE = "Stress"; Y_DIMENSION = "pressure";
     }     
/*
    graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    //
    COMMENT("$      MID       RHO         E         A         B         C        P0       PHI");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,LSD_MAT_A,LSD_MAT_B,LSD_MAT_C,LSD_MAT_P0,LSD_MAT_PHI);
    //
    COMMENT("$    GAMA0      LCID");
    CARD("%10lg%10d",LSD_MAT_GAMA0,LSD_LCID);
    //
}