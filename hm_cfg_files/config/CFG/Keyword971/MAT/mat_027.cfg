//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 027
// 


 ATTRIBUTES(COMMON) 
 
 {
  
  // Initial and reference densities
  KEYWORD_STR                       = VALUE(STRING, "Solver Keyword");
  LSD_TitleOpt                      = VALUE(INT, "Title");
  CommentEnumField                  = VALUE(INT, "User Comments");
  Num_Comments                      = SIZE("No. of comment lines");
  Comments                          = ARRAY[Num_Comments](STRING, "Entity Comments");
  Rho                               = VALUE(FLOAT, "Rho");  
  Nu                                = VALUE(FLOAT, "NU");
  LSD_MAT_A                         = VALUE(FLOAT, "A");
  LSD_MAT_B                         = VALUE(FLOAT, "B");
  LSD_MAT_REF                       = VALUE(FLOAT, "REF");
  LSD_MAT_SGL                       = VALUE(FLOAT, "SGL");
  LSD_MAT_SW                        = VALUE(FLOAT, "SW");
  LSD_MAT_ST                        = VALUE(FLOAT, "ST");
  LSD_LCID                          = VALUE(FUNCT, "LCID");

}

SKEYWORDS_IDENTIFIER(COMMON)

{
  KEYWORD_STR                   = 9000;
  CommentEnumField              = 3220;
  Num_Comments                  = 3101;
  LSD_TitleOpt                  = 90;
  Comments                      = 3100;
  Rho                           = 118;
  Nu                            = 120;
  LSD_MAT_A                     = 310;
  LSD_MAT_B                     = 311;
  LSD_MAT_REF                   = 359;
  LSD_MAT_SGL                   = 350;
  LSD_MAT_SW                    = 351;
  LSD_MAT_ST                    = 352;
  LSD_LCID                      = 45;

}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  POISSON_RATIO=SCALAR(Nu);
  A=SCALAR(LSD_MAT_A);
  B=SCALAR(LSD_MAT_B);
  REFERENCE_GEOMETRY=SCALAR(LSD_MAT_REF);
  SPECIMEN_GAUGE_LENGTH=SCALAR(LSD_MAT_SGL);
  SPECIMEN_WIDTH=SCALAR(LSD_MAT_SW);
  SPECIMEN_THICKNESS=SCALAR(LSD_MAT_ST);
  SHEAR_MODULUS=EVAL(2*(A+B));
  YOUNG_MODULUS=EVAL(2*(1+POISSON_RATIO)*SHEAR_MODULUS);
  BULK_MODULUS = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED        = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 public:
  SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+BULK_MODULUS)/MASS_DENSITY)^0.5);
}

GUI(COMMON) 

{


    ASSIGN(KEYWORD_STR, "*MAT_MOONEY-RIVLIN_RUBBER");
    RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
    FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
       {
             ASSIGN(KEYWORD_STR, "_TITLE");
       }
 mandatory:
    SCALAR(Rho)                         { DIMENSION="density";}
 optional:
    SCALAR(Nu)                          {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_A)                   {DIMENSION="pressure";}
    SCALAR(LSD_MAT_B)                   {DIMENSION="pressure";}
    RADIO(LSD_MAT_REF)
    {
        ADD(0.0, "0.0: Off");
        ADD(1.0, "1.0: On");
    }
    SCALAR(LSD_MAT_SGL)                 {DIMENSION="l";}
    SCALAR(LSD_MAT_SW)                  {DIMENSION="l";}
    SCALAR(LSD_MAT_ST)                  {DIMENSION="l";}
    FUNCTION(LSD_LCID)
    {
      X_TITLE = "Gauge delta L"; X_DIMENSION = "l";
      Y_TITLE = "Force"; Y_DIMENSION = "force";
    }
/*
     graphical SUPPORT("Part(s) to which material is applied") {
    OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/SHELL);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
          //
          COMMENT("$      MID       RHO        PR         A         B       REF");
          CARD("%10d%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,Nu,LSD_MAT_A,LSD_MAT_B,LSD_MAT_REF);
          //
          COMMENT("$      SGL        SW        ST      LCID");
          CARD("%10lg%10lg%10lg%10d",LSD_MAT_SGL,LSD_MAT_SW,LSD_MAT_ST,LSD_LCID);
          //

}