//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 00
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("Num_Comments");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    E                                       = VALUE(FLOAT,  "Young's Modulus");
    LSDYNA_A1                               = VALUE(FLOAT,  "define components of vector a");
    LSDYNA_A2                               = VALUE(FLOAT,  "define components of vector a");
    LSDYNA_A3                               = VALUE(FLOAT,  "define components of vector a");
    LSDYNA_BETA                             = VALUE(FLOAT,  "Material angle in degrees");
    LSDYNA_D1                               = VALUE(FLOAT,  "define components of vector d");
    LSDYNA_D2                               = VALUE(FLOAT,  "define components of vector d");
    LSDYNA_D3                               = VALUE(FLOAT,  "define components of vector d");
    LSDYNA_DC                               = VALUE(FLOAT,  "Critical damage value DC");
    LSDYNA_M                                = VALUE(FLOAT,  "M for brick");
    LSDYNA_N                                = VALUE(FLOAT,  "N for brick");
    LSDYNA_S                                = VALUE(FLOAT,  "Damage material constant");
    LSDYNA_SIGY                             = VALUE(FLOAT,  "Initial yield stress");
    LSDYNA_V1                               = VALUE(FLOAT,  "define components of vector d");
    LSDYNA_V2                               = VALUE(FLOAT,  "define components of vector d");
    LSDYNA_V3                               = VALUE(FLOAT,  "define components of vector d");
    LSDYNA_XP                               = VALUE(FLOAT,  "define coordinates of point p");
    LSDYNA_YP                               = VALUE(FLOAT,  "define coordinates of point p");
    LSDYNA_ZP                               = VALUE(FLOAT,  "define coordinates of point p");
    LSD_ALPHA                               = VALUE(FLOAT,  "Exponent for enhanced damage");
    LSD_CPH                                 = VALUE(FLOAT,  "Microdefects closure parameter");
    LSD_EPSD                                = VALUE(FLOAT,  "Damage threshold");
    LSD_F                                   = VALUE(FLOAT,  "F for brick");
    LSD_FLAG                                = VALUE(INT,  "Flag");
    LSD_G                                   = VALUE(FLOAT,  "G for brick");
    LSD_H                                   = VALUE(FLOAT,  "H for brick");
    LSD_L                                   = VALUE(FLOAT,  "L for brick");
    LSD_LCDS                                = VALUE(FUNCT,  "Load curve ID defining nonlinear damage curve");
    LSD_LCSS                                = VALUE(FUNCT,  "Load curve ID defining effective stress versus effective plastic strain.");
    LSD_MAT103_VK                           = VALUE(FLOAT,  "Viscous material parameter");
    LSD_MAT103_VM                           = VALUE(FLOAT,  "Viscous material parameter");
    LSD_MAT_C1                              = VALUE(FLOAT,  "Isotropic hardening parameter C1");
    LSD_MAT_C2                              = VALUE(FLOAT,  "Isotropic hardening parameter C2");
    LSD_MAT_EPSR                            = VALUE(FLOAT,  "Effective plastic strain at which material ruptures (logarithmic).");
    LSD_MAT_R00                             = VALUE(FLOAT,  "R00 for shell");
    LSD_MAT_R45                             = VALUE(FLOAT,  "R45 for shell");
    LSD_MAT_R90                             = VALUE(FLOAT,  "R90 for shell");
    LSD_NODE1                               = VALUE(FUNCT,  "variable4");
    LSD_NODE3                               = VALUE(FUNCT,  "Node1");
    LSD_NODE4                               = VALUE(FUNCT,  "variable7");
    LSD_NODE5                               = VALUE(FUNCT,  "Node1");
    LSD_NODE6                               = VALUE(FUNCT,  "variable10");
    LSD_NODE7                               = VALUE(FUNCT,  "Node1");
    LSD_NODE8                               = VALUE(FUNCT,  "variable13");
    LSD_Q1                                  = VALUE(FLOAT,  "Isotropic hardening parameter Q1");
    LSD_Q2                                  = VALUE(FLOAT,  "Isotropic hardening parameter Q2");
    LSD_RETA                                = VALUE(FLOAT,  "Exponent for enhanced damage");
    LSD_SYSTEM                              = VALUE(FUNCT,  "AOPT");
    LSD_THETA                               = VALUE(FLOAT,  "Exponent for enhanced damage");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    LSD_Y0                                  = VALUE(FLOAT,  "Initial damage energy release rate");
    MAT221_MACF                             = VALUE(INT,  "Material axes change flag for brick elements");
    Nu                                      = VALUE(FLOAT,  "Poissonâ€™s ratio");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    axisOptFlag                             = VALUE(INT,  "Anisotropy axis definition");
    LOC_AOPT                                = VALUE(FLOAT, "");
    IO_FLAG                                 = VALUE(INT, "io flag");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    LOC_FLAG                                = VALUE(FLOAT,"");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    E                                       = 119;
    LSDYNA_A1                               = 139;
    LSDYNA_A2                               = 140;
    LSDYNA_A3                               = 141;
    LSDYNA_BETA                             = 148;
    LSDYNA_D1                               = 145;
    LSDYNA_D2                               = 146;
    LSDYNA_D3                               = 147;
    LSDYNA_DC                               = 7;
    LSDYNA_M                                = 72;
    LSDYNA_N                                = 71;
    LSDYNA_S                                = 2297;
    LSDYNA_SIGY                             = 152;
    LSDYNA_V1                               = 142;
    LSDYNA_V2                               = 143;
    LSDYNA_V3                               = 144;
    LSDYNA_XP                               = 136;
    LSDYNA_YP                               = 137;
    LSDYNA_ZP                               = 138;
    LSD_ALPHA                               = 1651;
    LSD_CPH                                 = 8144;
    LSD_EPSD                                = 4575;
    LSD_F                                   = 5283;
    LSD_FLAG                                = 2825;
    LSD_G                                   = 1560;
    LSD_H                                   = 1561;
    LSD_L                                   = 32;
    LSD_LCDS                                = 8143;
    LSD_LCSS                                = 8138;
    LSD_MAT103_VK                           = 2662;
    LSD_MAT103_VM                           = 2663;
    LSD_MAT_C1                              = 1139;
    LSD_MAT_C2                              = 1140;
    LSD_MAT_EPSR                            = 5847;
    LSD_MAT_R00                             = 4932;
    LSD_MAT_R45                             = 4933;
    LSD_MAT_R90                             = 4934;
    LSD_NODE1                               = 86;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_NODE7                               = 5080;
    LSD_NODE8                               = 5081;
    LSD_Q1                                  = 2101;
    LSD_Q2                                  = 2102;
    LSD_RETA                                = 8145;
    LSD_SYSTEM                              = 184;
    LSD_THETA                               = 4793;
    LSD_TitleOpt                            = 90;
    LSD_Y0                                  = 5331;
    MAT221_MACF                             = 1451;
    Nu                                      = 120;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    axisOptFlag                             = 4946;
    LOC_AOPT                                = -1;
    IO_FLAG                                 = -1;
    LOC_FLAG                                = -1;
    AOPT_SKEW_FLAG                          = -1;
    //empty_string                       = -1;
}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY=SCALAR(Rho);
    YOUNG_MODULUS = SCALAR(E);
    POISSON_RATIO = SCALAR(Nu);
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

DEFAULTS(COMMON)
{

    LSDYNA_DC    = 0.5;
    LSDYNA_M    = 1.5;
    LSDYNA_N    = 1.5;
    LSD_F    = 0.5;
    LSD_FLAG    = 0;
    LSD_G    = 0.5;
    LSD_H    = 0.5;
    LSD_L    = 1.5;
    LSD_MAT_R00    = 1.0;
    LSD_MAT_R45    = 1.0;
    LSD_MAT_R90    = 1.0;

}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
       ADD(1, "");
       ADD(2, "");
       ADD(3, "");
    }
    if( CommentEnumField == 2)
    {
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
    }
    ASSIGN(KEYWORD_STR, "*MAT_DAMAGE_1");
    FLAG( LSD_TitleOpt);
         if(LSD_TitleOpt == 0)
         {
    ASSIGN(KEYWORD_STR,);
    }
    SCALAR(LSD_FLAG);
    SCALAR(Rho);
    SCALAR(E);
    SCALAR(Nu);
    SCALAR(LSDYNA_SIGY);
     DATA(LSD_LCSS);
    if( LSD_FLAG == -1)
    {
        DATA(LSD_LCDS);
    }
    if( LSD_FLAG == -1)
    {
        DATA(LSD_LCDS);
    }
    SCALAR(LSD_Q1);
    SCALAR(LSD_MAT_C1);
    SCALAR(LSD_Q2);
    SCALAR(LSD_MAT_C2);
    SCALAR(LSD_EPSD);
    if( LSD_FLAG >= 0)
    {
       SCALAR(LSDYNA_S);
       SCALAR(LSDYNA_DC);
    }
    if( LSD_FLAG >= 0)
    {
       SCALAR(LSDYNA_S);
       SCALAR(LSDYNA_DC);
    }
    if( LSD_FLAG == -1)
    {
       SCALAR(LSD_MAT_EPSR);
       ASSIGN(KEYWORD_STR, "          ");
    }
    if( LSD_FLAG == -1)
    {
       SCALAR(LSD_MAT_EPSR);
       ASSIGN(KEYWORD_STR, "          ");
    }
    SCALAR(LSD_MAT103_VK);
    SCALAR(LSD_MAT103_VM);
    if( LSD_FLAG == 1 || LSD_FLAG == 11)
    {
       SCALAR(LSD_MAT_R00);
       SCALAR(LSD_MAT_R45);
       SCALAR(LSD_MAT_R90);
       ASSIGN(KEYWORD_STR, "                              ");
    }
    if( LSD_FLAG == 1 || LSD_FLAG == 11)
    {
       SCALAR(LSD_MAT_R00);
       SCALAR(LSD_MAT_R45);
       SCALAR(LSD_MAT_R90);
       ASSIGN(KEYWORD_STR, "                              ");
    }
    if( LSD_FLAG == -1 || LSD_FLAG == 0 || LSD_FLAG == 10)
    {
       SCALAR(LSD_F);
       SCALAR(LSD_G);
       SCALAR(LSD_H);
       SCALAR(LSD_L);
       SCALAR(LSDYNA_M);
       SCALAR(LSDYNA_N);
    }
    if( LSD_FLAG == -1 || LSD_FLAG == 0 || LSD_FLAG == 10)
    {
       SCALAR(LSD_F);
       SCALAR(LSD_G);
       SCALAR(LSD_H);
       SCALAR(LSD_L);
       SCALAR(LSDYNA_M);
       SCALAR(LSDYNA_N);
    }
    RADIO(axisOptFlag)
    {
       ADD(0, "");
       ADD(1, "");
       ADD(2, "");
       ADD(3, "");
       ADD(4, "");
       ADD(5, "");
    }
    if( axisOptFlag == 1)
    {
      // SCALAR();
    }
    if( axisOptFlag == 2)
    {
      // SCALAR();
    }
    if( axisOptFlag == 3)
    {
      // SCALAR();
    }
    if( axisOptFlag == 4)
    {
      // SCALAR();
    }
    if( axisOptFlag == 5)
    {
     //  SCALAR();
    }
    if( axisOptFlag == 6)
    {
       SCALAR(LSD_SYSTEM);
    }
    ASSIGN(KEYWORD_STR, "          ");
    if( LSD_FLAG >= 10)
    {
       SCALAR(LSD_CPH);
    }
    if( LSD_FLAG >= 10)
    {
       SCALAR(LSD_CPH);
    }
    if( LSD_FLAG < 10)
    {
       ASSIGN(KEYWORD_STR, "          ");
    }
    if( LSD_FLAG < 10)
    {
       ASSIGN(KEYWORD_STR, "          ");
    }
    RADIO(MAT221_MACF)
    {
       ADD(1, "1: No Change");
       ADD(2, "2:switch material axes a and b,");
       ADD(3, "3:switch material axes a and c,");
       ADD(4, "4:switch material axes b and c.");
    }
    if( LSD_FLAG >= 10)
    {
       SCALAR(LSD_Y0);
       SCALAR(LSD_ALPHA);
       SCALAR(LSD_THETA);
       SCALAR(LSD_RETA);
    }
    if( LSD_FLAG >= 10)
    {
       SCALAR(LSD_Y0);
       SCALAR(LSD_ALPHA);
       SCALAR(LSD_THETA);
       SCALAR(LSD_RETA);
    }
    /*
    if( variable1 == 1.0 || variable1 == 4.0)
    {
        DATA(LSD_NODE1);
    }
    if( variable1 == 2.0)
    {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
       ASSIGN(KEYWORD_STR, "                              ");
    }
    if( variable1 == 3.0 || variable1 == 4.0)
    {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
    }
    if( variable1 == 3.0 || variable1 == 4.0 && variable1 == 3.0)
    {
       ASSIGN(KEYWORD_STR, "                              ");
       SCALAR(LSDYNA_BETA);
    }
    if( variable1 == 2.0)
    {
        DATA(LSD_NODE7);
        DATA(LSD_NODE8);
       ASSIGN(KEYWORD_STR, "                              ");
    }
    if( variable1 == 0.0  && variable15 == 0)
    {
       ASSIGN(KEYWORD_STR, "                                                            ");
       SCALAR(LSDYNA_BETA);
    }
    if( variable1 == 0.0  && variable15 == 0)
    {
       ASSIGN(KEYWORD_STR, "                                                            ");
       SCALAR(LSDYNA_BETA);
    }
    */
}

// File format
FORMAT(Keyword971) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);

    //
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE8 != NONE && LSD_NODE7 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    //
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 5 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,4.0,EXPORT);
    }
    COMMENT("$      MID        RO         E        PR      SIGY      LCSS      LCDS");
    if(IO_FLAG == 2)
    {
        CARD("%10d%10lg%10lg%10lg%10lg%10d%10d",_ID_,Rho,E,Nu,LSDYNA_SIGY,CELL_COND( if(LSD_FLAG==-1) LSD_LCSS;),CELL_COND( if(LSD_FLAG==-1) LSD_LCDS;));
    }
    else
    {
        CARD("%10d%10lg%10lg%10lg%10lg%10d%10d",_ID_,Rho,E,Nu,LSDYNA_SIGY, LSD_LCSS,LSD_LCDS);
    }

    CARD_PREREAD("%10s%10s%10s%10s%10s%10s%10s%10d",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_FLAG);

    if(LSD_FLAG != -1 && IO_FLAG == 1)
    {
        ASSIGN(LSD_LCSS,NONE);
        ASSIGN(LSD_LCDS,NONE);
    }

    COMMENT("$       Q1        C1        Q2        C2      EPSD         S        DC      FLAG");
    if(LSD_FLAG == -1)
    {
        ASSIGN(LOC_FLAG,-1.0,EXPORT);
    }
    else if(LSD_FLAG == 11)
    {
        ASSIGN(LOC_FLAG,11.0,EXPORT);
    }
    else if(LSD_FLAG == 0)
    {
        ASSIGN(LOC_FLAG,0.0,EXPORT);
    }
    else if(LSD_FLAG == 1)
    {
        ASSIGN(LOC_FLAG,1.0,EXPORT);
    }
    else if(LSD_FLAG == 10)
    {
        ASSIGN(LOC_FLAG,10.0,EXPORT);
    }

    if(LSD_FLAG >= 0)
    {
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_Q1,LSD_MAT_C1,LSD_Q2,LSD_MAT_C2,LSD_EPSD,LSDYNA_S,LSDYNA_DC,LOC_FLAG);
    }
    else 
    {
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10s%10lg",LSD_Q1,LSD_MAT_C1,LSD_Q2,LSD_MAT_C2,LSD_EPSD,LSD_MAT_EPSR,_BLANK_,LOC_FLAG);
    }

    COMMENT("$       VK        VM     R00/F     R45/G     R90/H         L         M         N");
    if(LSD_FLAG==1 || LSD_FLAG==11)
    {
        CARD("%10lg%10lg%10lg%10lg%10lg",LSD_MAT103_VK,LSD_MAT103_VM,LSD_MAT_R00,LSD_MAT_R45,LSD_MAT_R90);
    }
    else //if(LSD_FLAG==-1 || LSD_FLAG==0 || LSD_FLAG==10)
    {
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT103_VK,LSD_MAT103_VM,LSD_F,LSD_G,LSD_H,LSD_L,LSDYNA_M,LSDYNA_N);
    }

    COMMENT("$     AOPT                          MACF");
    if(IO_FLAG == 2)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 6)
        {
            CARD("%10lg%10s%10s%10d",LOC_AOPT,_BLANK_,_BLANK_,MAT221_MACF);
        }
        else
        {
            CARD("%10lg%10s%10s%10d",FLAGGED_OBJECT(LSD_SYSTEM,AOPT_SKEW_FLAG),_BLANK_,_BLANK_,MAT221_MACF); 
        }
    }
    CARD_PREREAD("%10lg",LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,4,IMPORT);
    }
    else if(LOC_AOPT == 4.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,5,IMPORT);
    }

    if(IO_FLAG == 1)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 6)
        {
            CARD("%10lg%10s%10s%10d",LOC_AOPT,_BLANK_,_BLANK_,MAT221_MACF); 
        }
        else
        {
            CARD("%10d%10s%10s%10d",FLAGGED_OBJECT(LSD_SYSTEM,AOPT_SKEW_FLAG),_BLANK_,_BLANK_,MAT221_MACF);
            ASSIGN(axisOptFlag, 6, IMPORT);
        }
    }
    //
    COMMENT("$       XP        YP        ZP        A1        A2        A3");
    if(axisOptFlag == 2 || axisOptFlag == 5)
    {
        CARD("%10lg%10lg%10lg",LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP);
    }
    else if(axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
    }
    else
    {
        BLANK;
    }
    //
    COMMENT("$       V1        V2        V3        D1        D2        D3      BETA");
    if(axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
    }
    else if(axisOptFlag == 4)
    {
        CARD("%10lg%10lg%10lg%10s%10s%10s%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,LSDYNA_BETA);
    }
    else if(axisOptFlag == 5)
    {
        CARD("%10lg%10lg%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3);
    }
    else if(axisOptFlag == 1)
    {
        CARD("%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSDYNA_BETA);
    }
    else
    {
        BLANK;
    }
}
