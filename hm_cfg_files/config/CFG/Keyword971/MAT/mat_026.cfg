//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 026
// 

ATTRIBUTES(COMMON)
{
    KEYWORD_STR                       = VALUE(STRING, "Solver Keyword");
    LSD_TitleOpt                      = VALUE(INT, "Title");
    CommentEnumField                  = VALUE(INT, "User Comments");
    Num_Comments                      = SIZE("No. of comment lines");
    Comments                          = ARRAY[Num_Comments](STRING, "Entity Comments");
    Rho                               = VALUE(FLOAT, "Rho");  
    E                                 = VALUE(FLOAT, "E");
    Nu                                = VALUE(FLOAT, "NU");
    LSDYNA_SIGY                       = VALUE(FLOAT, "SIGY");
    LSDYNA_VF                         = VALUE(FLOAT, "VF");
    LSDYNA_MU                         = VALUE(FLOAT, "MU");
    LSDYNA_BULK                       = VALUE(FLOAT, "BULK");
    LSD_LCID                          = VALUE(FUNCT, "LCA");
    LSD_LCID2                         = VALUE(FUNCT, "LCB");
    LSD_LCID3                         = VALUE(FUNCT, "LCC");
    LSD_LCID4                         = VALUE(FUNCT, "LCS");
    LSD_LCID5                         = VALUE(FUNCT, "LCAB");
    LSD_LCID6                         = VALUE(FUNCT, "LCBC");
    LSD_LCID7                         = VALUE(FUNCT, "LCCA");
    LSD_LCID8                         = VALUE(FUNCT, "LCSR");
    LSDYNA_EAAU                       = VALUE(FLOAT, "EAAU");  
    LSDYNA_EBBU                       = VALUE(FLOAT, "EBBU");
    LSDYNA_ECCU                       = VALUE(FLOAT, "ECCU");
    LSDYNA_GABU                       = VALUE(FLOAT, "GABU");
    LSDYNA_GBCU                       = VALUE(FLOAT, "GBCU");
    LSDYNA_GCAU                       = VALUE(FLOAT, "GCAU");
    axisOptFlag                       = VALUE(INT, "Anisotropy axis definition");
    LSD_MAT142_MACF                   = VALUE(INT, "MACF");
    LSDYNA_SIGF                       = VALUE(FLOAT, "TSEF");
    LSDYNA_EPSF                       = VALUE(FLOAT, "SSEF");
    LSD_SYSTEM                        = VALUE(SYSTEM, "AOPT");
    LSD_NODE1                         = VALUE(NODE, "Node");
    LSDYNA_XP                         = VALUE(FLOAT, "XP");
    LSDYNA_YP                         = VALUE(FLOAT, "YP");
    LSDYNA_ZP                         = VALUE(FLOAT, "ZP");
    LSD_NODE3                         = VALUE(NODE, "Node1");
    LSD_NODE4                         = VALUE(NODE, "Node2");
    LSDYNA_A1                         = VALUE(FLOAT, "A1");
    LSDYNA_A2                         = VALUE(FLOAT, "A2");
    LSDYNA_A3                         = VALUE(FLOAT, "A3");
    LSD_NODE7                         = VALUE(NODE, "Node1");
    LSD_NODE8                         = VALUE(NODE, "Node2");
    LSDYNA_D1                         = VALUE(FLOAT, "D1");
    LSDYNA_D2                         = VALUE(FLOAT, "D2");
    LSDYNA_D3                         = VALUE(FLOAT, "D3");  
    LSD_NODE5                         = VALUE(NODE, "Node1");
    LSD_NODE6                         = VALUE(NODE, "Node2");
    LSDYNA_V1                         = VALUE(FLOAT, "V1");
    LSDYNA_V2                         = VALUE(FLOAT, "V2");
    LSDYNA_V3                         = VALUE(FLOAT, "V3");
    AOPT_FLAG                         = VALUE(INT, "Axes given by Coordinate System") ;
    AOPT                              = VALUE(FLOAT, "AOPT");
    IO_FLAG                           = VALUE(INT, "IO");
    //empty_string                 = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                   = 9000;
    CommentEnumField              = 3220;
    Num_Comments                  = 3101;
    LSD_TitleOpt                  = 90;
    Comments                      = 3100;
    Rho                           = 118;
    E                             = 119;
    Nu                            = 120;
    LSDYNA_SIGY                   = 152;  
    LSDYNA_VF                     = 221;
    LSDYNA_MU                     = 222;
    LSDYNA_BULK                   = 223;
    LSD_LCID                      = 45;
    LSD_LCID2                     = 168;
    LSD_LCID3                     = 170;
    LSD_LCID4                     = 171;
    LSD_LCID5                     = 172;
    LSD_LCID6                     = 199;
    LSD_LCID7                     = 200;
    LSD_LCID8                     = 224;
    LSDYNA_EAAU                   = 232;
    LSDYNA_EBBU                   = 233;
    LSDYNA_ECCU                   = 234;
    LSDYNA_GABU                   = 235;
    LSDYNA_GBCU                   = 236;
    LSDYNA_GCAU                   = 237;
    axisOptFlag                   = 4946;
    LSD_MAT142_MACF               = 1045;
    LSDYNA_SIGF                   = 248;
    LSDYNA_EPSF                   = 68;
    LSD_SYSTEM                    = 184;
    LSD_NODE1                     = 86;
    LSDYNA_XP                     = 136;
    LSDYNA_YP                     = 137;
    LSDYNA_ZP                     = 138;
    LSD_NODE3                     = 2802;
    LSD_NODE4                     = 2803;
    LSDYNA_A1                     = 139;
    LSDYNA_A2                     = 140;
    LSDYNA_A3                     = 141;
    LSD_NODE5                     = 5078;
    LSD_NODE6                     = 5079;
    LSDYNA_V1                     = 142;
    LSDYNA_V2                     = 143;
    LSDYNA_V3                     = 144;
    LSD_NODE7                     = 5080;
    LSD_NODE8                     = 5081;
    LSDYNA_D1                     = 145;
    LSDYNA_D2                     = 146;
    LSDYNA_D3                     = 147;
    AOPT_FLAG                     = -1;
    AOPT                          = -1;
    IO_FLAG                       = -1;
    //empty_string             = -1;
}

DEFAULTS(COMMON)
{
    LSDYNA_MU           = 0.05;
}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY=SCALAR(Rho);
    YOUNG_MODULUS=SCALAR(E);
    POISSON_RATIO=SCALAR(Nu);
    YIELD_STRESS=SCALAR(LSDYNA_SIGY);
    YIELD_STRESS=SCALAR(LSDYNA_VF);
    MATERIAL_VISCOSITY_COEFFICIENT=SCALAR(LSDYNA_MU);
    BULK_VISCOSITY_FLAG=SCALAR(LSDYNA_BULK);
    ELASTIC_MODULUS_EAAU=SCALAR(LSDYNA_EAAU);
    ELASTIC_MODULUS_EBBU=SCALAR(LSDYNA_EBBU);
    ELASTIC_MODULUS_ECCU=SCALAR(LSDYNA_ECCU);
    SHEAR_MODULUS_GABU=SCALAR(LSDYNA_GABU);
    SHEAR_MODULUS_GBCU=SCALAR(LSDYNA_GBCU);
    SHEAR_MODULUS_GCAU=SCALAR(LSDYNA_GCAU);
    MATERIAL_AXES_OPTION=SCALAR(axisOptFlag);
    TENSILE_STRAIN_ELEMENT_FAILURE=SCALAR(LSDYNA_SIGF);
    SHEAR_STRAIN_ELEMENT_FAILURE=SCALAR(LSDYNA_EPSF);
    SHEAR_MODULUS = MAX(SHEAR_MODULUS_GABU,SHEAR_MODULUS_GBCU,SHEAR_MODULUS_GCAU);
public:
    //SOUND_SPEED is speed for ISDO = 0 and 1
    SOUND_SPEED        = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
    SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
private:
    C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON) 
{
    ASSIGN(KEYWORD_STR, "*MAT_HONEYCOMB");
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
            SCALAR(Comments);
        }
    }     
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    } 
mandatory:
    SCALAR(Rho)                        { DIMENSION="density";}
    SCALAR(E)                          {DIMENSION="pressure";}
optional:
    SCALAR(Nu)                         {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_SIGY)                {DIMENSION="pressure";}
    SCALAR(LSDYNA_VF)                  {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_MU)                  {DIMENSION="DIMENSIONLESS";}
    RADIO(LSDYNA_BULK)                 
    {
        ADD(0.0, "0: Bulk viscosity is not used,recommended");
        ADD(1.0, "1: Fully iterative");
    }
mandatory:
    FUNCTION(LSD_LCID)
    {
      X_TITLE = "Strain rate"; X_DIMENSION = "DIMENSIONLESS";
      Y_TITLE = "Young's modulus"; Y_DIMENSION = "pressure";
    }
optional:
    FUNCTION(LSD_LCID2)
    {
      X_TITLE = "Strain rate"; X_DIMENSION = "DIMENSIONLESS";
      Y_TITLE = "Young's modulus"; Y_DIMENSION = "pressure";
    }
    FUNCTION(LSD_LCID3)
    {
      X_TITLE = "Strain rate"; X_DIMENSION = "DIMENSIONLESS";
      Y_TITLE = "Young's modulus"; Y_DIMENSION = "pressure";
    }
    FUNCTION(LSD_LCID4)
    {
      X_TITLE = "Strain rate"; X_DIMENSION = "DIMENSIONLESS";
      Y_TITLE = "Young's modulus"; Y_DIMENSION = "pressure";
    }
    FUNCTION(LSD_LCID5)
    {
      X_TITLE = "Strain rate"; X_DIMENSION = "DIMENSIONLESS";
      Y_TITLE = "Young's modulus"; Y_DIMENSION = "pressure";
    }
    FUNCTION(LSD_LCID6)
    {
      X_TITLE = "Strain rate"; X_DIMENSION = "DIMENSIONLESS";
      Y_TITLE = "Young's modulus"; Y_DIMENSION = "pressure";
    }
    FUNCTION(LSD_LCID7)
    {
      X_TITLE = "Strain rate"; X_DIMENSION = "DIMENSIONLESS";
      Y_TITLE = "Young's modulus"; Y_DIMENSION = "pressure";
    }
    FUNCTION(LSD_LCID8)
    {
      X_TITLE = "Strain rate"; X_DIMENSION = "strain_rate";
      Y_TITLE = "Young's modulus"; Y_DIMENSION = "DIMENSIONLESS";
    }
    SCALAR(LSDYNA_EAAU)                {DIMENSION="pressure";}
    SCALAR(LSDYNA_EBBU)                {DIMENSION="pressure";}
    SCALAR(LSDYNA_ECCU)                {DIMENSION="pressure";}
    SCALAR(LSDYNA_GABU)                {DIMENSION="pressure";}
    SCALAR(LSDYNA_GBCU)                {DIMENSION="pressure";}
    SCALAR(LSDYNA_GCAU)                {DIMENSION="pressure";}
    RADIO(axisOptFlag)
    {
        ADD(0, "0.0: Locally orthotropic : axis given by nodes 1,2, and 4");
        ADD(1, "1.0: A-direction given by a point and global location of element center");
        ADD(2, "2.0: Axis given by vectors");
        ADD(3, "3.0: Axis given by rotating the material axes by an angle BETA");
        ADD(4, "4.0: Cylindrical coordinate given by vector v and point p");
        ADD(5, "By System");
    }
    if(axisOptFlag == 5)
    {
        DATA(LSD_SYSTEM);
    }
    RADIO(LSD_MAT142_MACF)
    {  
        ADD(1, "1: No change (default");
        ADD(2, "2: Switch material axes a and b");
        ADD(3, "3: Switch material axes a and c");
        ADD(4, "4: Switch material axes b and c");
    }
    if(axisOptFlag == 1 || axisOptFlag == 4)
    {
        DATA(LSD_NODE1);
        SCALAR(LSDYNA_XP)               {DIMENSION="l";}
        SCALAR(LSDYNA_YP)               {DIMENSION="l";}
        SCALAR(LSDYNA_ZP)               {DIMENSION="l";}
    }
    if(axisOptFlag == 2)
    {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        SCALAR(LSDYNA_A1)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_A2)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_A3)               {DIMENSION="DIMENSIONLESS";}
        DATA(LSD_NODE7);                
        DATA(LSD_NODE8);                
        SCALAR(LSDYNA_D1)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_D2)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_D3)               {DIMENSION="DIMENSIONLESS";}
    }
    if(axisOptFlag == 3 || axisOptFlag == 4)
    {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        SCALAR(LSDYNA_V1)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_V2)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_V3)               {DIMENSION="DIMENSIONLESS";}
    }
    SCALAR(LSDYNA_SIGF)                {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_EPSF)                {DIMENSION="DIMENSIONLESS";}
    /*
    graphical SUPPORT("Part(s) to which material is applied") {
    OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D);
    ADD(COMPONENT,"Parts");
    }
    */
}

// File format
FORMAT(Keyword971) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    ASSIGN(AOPT_FLAG, 1, IMPORT);
    ASSIGN(AOPT_FLAG, 1, EXPORT);

    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    if(LSD_NODE3 != NONE && LSD_NODE4 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE5 != NONE && LSD_NODE6 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    if(LSD_NODE7 != NONE && LSD_NODE8 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }

    COMMENT("$      MID        RO         E        PR      SIGY        VF        MU      BULK");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,LSDYNA_SIGY,LSDYNA_VF,LSDYNA_MU,LSDYNA_BULK);

    COMMENT("$      LCA       LCB       LCC       LCS      LCAB      LCBC      LCCA      LCSR");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_LCID,LSD_LCID2,LSD_LCID3,LSD_LCID4,LSD_LCID5,LSD_LCID6,LSD_LCID7,LSD_LCID8);

    COMMENT("$     EAAU      EBBU      ECCU      GABU      GBCU      GCAU      AOPT      MACF");
    CARD_PREREAD("%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,AOPT);
    if(IO_FLAG == 1)
    {
        if(AOPT == 0.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,1,IMPORT);
        }
        else if(AOPT == 1.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,2,IMPORT);
        }
        else if(AOPT == 2.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,3,IMPORT);
        }
        else if(AOPT == 3.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,4,IMPORT);
        }
        else if(AOPT == 4.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,5,IMPORT);
        }
    }
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 5 && IO_FLAG == 2)
    {
        ASSIGN(AOPT,4.0,EXPORT);
    }

    if(axisOptFlag >= 1 && axisOptFlag < 6)
    {
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10d",LSDYNA_EAAU,LSDYNA_EBBU,LSDYNA_ECCU,LSDYNA_GABU,LSDYNA_GBCU,LSDYNA_GCAU,AOPT,LSD_MAT142_MACF);
    }
    else
    {
        if(IO_FLAG == 1)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d%10d",LSDYNA_EAAU,LSDYNA_EBBU,LSDYNA_ECCU,LSDYNA_GABU,LSDYNA_GBCU,LSDYNA_GCAU,SCALAR_OR_OBJECT(AOPT_FLAG,axisOptFlag,LSD_SYSTEM),LSD_MAT142_MACF);
            ASSIGN(axisOptFlag,6,IMPORT);
        }
        else if(IO_FLAG == 2)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d%10lg",LSDYNA_EAAU,LSDYNA_EBBU,LSDYNA_ECCU,LSDYNA_GABU,LSDYNA_GBCU,LSDYNA_GCAU,SCALAR_OR_OBJECT(AOPT_FLAG,AOPT,LSD_SYSTEM),LSD_MAT142_MACF);
        }
    }

    COMMENT("$       XP        YP        ZP        A1        A2        A3");
    if(axisOptFlag == 2 || axisOptFlag == 5)
    {
        CARD("%10lg%10lg%10lg",LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP);
    }
    else if(axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
    }
    else
    {
        BLANK;
    }

    COMMENT("$       D1        D2        D3      TSEF      SSEF        V1        V2        V3");
    if(axisOptFlag == 3)
    {
        CARD("%10lg%10lg%10lg%10lg%10lg",LSDYNA_D1,LSDYNA_D2,LSDYNA_D3,LSDYNA_SIGF,LSDYNA_EPSF);
    }
    else if(axisOptFlag == 4 || axisOptFlag == 5)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_SIGF,LSDYNA_EPSF,LSDYNA_V1,LSDYNA_V2,LSDYNA_V3);
    }
    else
    {
        CARD("%10s%10s%10s%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_SIGF,LSDYNA_EPSF);
    }
}
