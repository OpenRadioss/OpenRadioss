//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 018
// 


 ATTRIBUTES(COMMON) 
 
 {
  
  // Initial and reference densities
  KEYWORD_STR                     = VALUE(STRING, "Solver Keyword");
  LSD_TitleOpt                    = VALUE(INT, "Title");
  CommentEnumField                = VALUE(INT, "User Comments");
  Num_Comments                    = SIZE("No. of comment lines");
  Comments                        = ARRAY[Num_Comments](STRING, "Entity Comments");
  Rho                             = VALUE(FLOAT, "Rho");  
  E                               = VALUE(FLOAT, "E");
  Nu                              = VALUE(FLOAT, "NU");
  LSDYNA_K                        = VALUE(FLOAT, "K");
  LSDYNA_N                        = VALUE(FLOAT, "N"); 
  LSDYNA_SRC                      = VALUE(FLOAT, "SRC");
  LSDYNA_SRP                      = VALUE(FLOAT, "SRP");
  LSD_SIGY18                      = VALUE(FLOAT, "SIGY");
  LSD_VP18                        = VALUE(FLOAT, "VP");
  LSD_MAT_EPSF                    = VALUE(FLOAT, "EPSF"); 

}

SKEYWORDS_IDENTIFIER(COMMON)

{

  KEYWORD_STR                   = 9000;
  CommentEnumField              = 3220;
  Num_Comments                  = 3101;
  LSD_TitleOpt                  = 90;
  Comments                      = 3100;
  Rho                           = 118;
  E                             = 119;
  Nu                            = 120;
  LSDYNA_K                      = 124;
  LSDYNA_N                      = 71;
  LSDYNA_SRC                    = 155;
  LSDYNA_SRP                    = 156;
  LSD_SIGY18                    = 2859;
  LSD_VP18                      = 2856;
  LSD_MAT_EPSF                  = 5846;

}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  YOUNG_MODULUS=SCALAR(E);
  POISSON_RATIO=SCALAR(Nu);
  STRENGTH_COEFFICIENT=SCALAR(LSDYNA_K);
  HARDENING_EXPONENT=SCALAR(LSDYNA_N);
  STRAIN_RATE_PARAMETER_C=SCALAR(LSDYNA_SRC);
  STRAIN_RATE_PARAMETER_P=SCALAR(LSDYNA_SRP);
  INITIAL_YIELD_STRESS=SCALAR(LSD_SIGY18);
  FORMULATION=SCALAR(LSD_VP18);
 public :
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON) 

{


    ASSIGN(KEYWORD_STR, "*MAT_POWER_LAW_PLASTICITY");
    RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
    FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
       {
             ASSIGN(KEYWORD_STR, "_TITLE");
       } 
 mandatory:
    SCALAR(Rho)         { DIMENSION="density";}
    SCALAR(E)           {DIMENSION="pressure";}
 optional:
    SCALAR(Nu)          { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_K)    {DIMENSION="pressure";}
    SCALAR(LSDYNA_N)    {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_SRC)  {DIMENSION="strain_rate";}
    SCALAR(LSDYNA_SRP)  {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_SIGY18)  {DIMENSION="pressure";}
    RADIO(LSD_VP18)
    {
        ADD(0.0, "0.0: Scale yield stress (default)");
        ADD(1.0, "1.0: Viscoplastic formulation");
        
    }
    SCALAR(LSD_MAT_EPSF) {DIMENSION="DIMENSIONLESS";}
/*
 graphical SUPPORT("Part(s) to which material is applied") {
OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/BEAM,/COMPONENT/SPRING,/COMPONENT/TRUSS,/COMPONENT/RIVET,/COMPONENT/SHELL,/COMPONENT/PENTA6,/COMPONENT/SHEL16,/COMPONENT/TSHELL);
  ADD(COMPONENT,"Parts");
}
*/
}

// File format
FORMAT(Keyword971) 
{
      //
      COMMENT("$      MID       RHO         E        PR         K         N       SRC       SRP");
      CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,LSDYNA_K,LSDYNA_N,LSDYNA_SRC,LSDYNA_SRP);
      //
      COMMENT("$     SIGY        VP      EPSF");
      CARD("%10lg%10lg%10lg",LSD_SIGY18,LSD_VP18,LSD_MAT_EPSF);
      //

}