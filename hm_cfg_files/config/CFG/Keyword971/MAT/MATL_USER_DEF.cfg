//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law MATL_USER_DEF
//

ATTRIBUTES(COMMON)
{
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    LSD_MAT_USER_DEF_MT                     = VALUE(INT,  "User material type(41 - 50 inclusive)");
    LSD_MAT_USER_DEF_LMC                    = SIZE("Length of material constant array which is equal to the number of material constants to be input");
    LSD_MAT_USER_DEF_LMC_P                  = ARRAY[LSD_MAT_USER_DEF_LMC](FLOAT,  "Material parameters");
    LSD_MAT_USER_DEF_NHV                    = VALUE(INT,  "Number of history variables to be stored");
    LSD_MAT_USER_DEF_IORTHO                 = VALUE(INT,  "IORTHO");
    LSD_MAT_USER_DEF_IBULK                  = VALUE(INT,  "Address of bulk modulus in material constants array");
    LSD_MAT_USER_DEF_IG                     = VALUE(INT,  "Address of shear modulus in material constants array");
    LSD_MAT_USER_DEF_IVECT                  = VALUE(INT,  "Vectorization flag (on = 1)");
    LSD_MAT_USER_DEF_IFAIL                  = VALUE(INT,  "Failure flag");
    LSD_MAT_USER_DEF_ITHERM                 = VALUE(INT,  "Temperature flag (on = 1)");
    LSD_MAT_USER_DEF_IHYPER                 = VALUE(INT,  "Deformation gradient flag");
    LSD_MAT_USER_DEF_IEOS                   = VALUE(INT,  "Equation of state (on = 1)");
    LSDYNA_BETA                             = VALUE(FLOAT,  "Material angle in degrees");
    LSD_MAT_USER_DEF_MACF                   = VALUE(INT,  "Material axes change flag for brick elements for quick changes");
    LSDYNA_A1                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A2                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A3                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_D1                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D2                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D3                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_V1                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V2                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V3                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_XP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSDYNA_YP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSDYNA_ZP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSD_NODE1                               = VALUE(NODE,  "Node");
    LSD_NODE3                               = VALUE(NODE,  "Node1");
    LSD_NODE4                               = VALUE(NODE,  "Node2");
    LSD_NODE5                               = VALUE(NODE,  "Node1");
    LSD_NODE6                               = VALUE(NODE,  "Node2");
    LSD_NODE7                               = VALUE(NODE,  "Node1");
    LSD_NODE8                               = VALUE(NODE,  "Node2");
    LSD_SYSTEM                              = VALUE(SYSTEM,  "Coordinate system ID number");
    axisOptFlag                             = VALUE(INT,  "Anisotropy axis definition");

    //card 1 for material 48
    LSD_MAT_USER_FIELD_7                    = VALUE(INT,  "Extra field");
    LSD_MAT_USER_FIELD_8                    = VALUE(INT,  "Extra field");
    LSD_MAT_USER_FRELIM                     = VALUE(FLOAT,  "Critical failure risk at which element elimination is initiated");
    LSD_MAT_USER_DTMIN                      = VALUE(FLOAT,  "An element whose time step is below this critical value should be eliminated immediately");
    LSD_MAT_USER_NFIL                       = VALUE(INT,  "Number of cycles over which the strain rate is filtered");
    LSD_MAT_USER_VELSC                      = VALUE(FLOAT,  "Velocity scale factor");
    LSD_MAT_USER_RSTRAT                     = VALUE(FLOAT,  "Reference strain rate");
    LSD_MAT_USER_RTEMP                      = VALUE(FLOAT,  "Reference temperature");
    LSD_MAT_USER_ENCRYPT                    = VALUE(FLOAT,  "Encrypt");
    LSD_MAT_USER_INI                        = VALUE(FLOAT,  "Initialization flag");

    //card 2
    LSD_MAT_USER_EL_YOUNG                   = VALUE(FLOAT,  "Young's modulus E");
    LSD_MAT_USER_EL_POISS                   = VALUE(FLOAT,  "Possion's ratio v");
    LSD_MAT_USER_EL_BULKM                   = VALUE(FLOAT,  "Bulk modulus K");
    LSD_MAT_USER_EL_SHEAR                   = VALUE(FLOAT,  "Shear modulus G");
    LSD_DM_EL_ORTHO                         = VALUE(INT, "Deactivate Module for EL-ORTHO");
    LSD_MAT_USER_EL_ORTHO                   = VALUE(CURVE,  "Transverse shear correction factor");
    LSD_MAT_USER_EL_SHRCO                   = VALUE(FLOAT,  "Elastic orthotropy module");
    LSD_MAT_USER_EL_ALPHA                   = VALUE(FLOAT,  "Thermal expansion coefficient");
    LSD_DM_ADIABAT                          = VALUE(INT, "Deactivate Module for ADIABAT");
    LSD_MAT_USER_ADIABAT                    = VALUE(CURVE,  "Adiabatic module");

    //card 3
    LSD_MAT_USER_PL_HARDE                   = VALUE(CURVE,  "Plastic hardening module");
    LSD_DM_PL_ORTHO                         = VALUE(INT, "Deactivate Module for PL-ORTHO");
    LSD_DM_PL_ISKIN                         = VALUE(INT, "Deactivate Module for PL-ISKIN");
    LSD_DM_PL_ASYMM                         = VALUE(INT, "Deactivate Module for PL-ASYMM");
    LSD_DM_PL_WAIST                         = VALUE(INT, "Deactivate Module for PL-WAIST");
    LSD_DM_PL_BIAXF                         = VALUE(INT, "Deactivate Module for PL-BIAXF");
    LSD_DM_PL_COMPR                         = VALUE(INT, "Deactivate Module for PL-COMPR");
    LSD_MAT_USER_PL_ORTHO                   = VALUE(CURVE,  "Plastic orthotropy module");
    LSD_MAT_USER_PL_ISKIN                   = VALUE(CURVE,  "Isotropic-kinematic hardening module");
    LSD_MAT_USER_PL_ASYMM                   = VALUE(CURVE,  "Tension-compression asymmetry module for anisotropic hardening");
    LSD_MAT_USER_PL_WAIST                   = VALUE(CURVE,  "Waisted shear module for anisotropic hardening");
    LSD_MAT_USER_PL_BIAXF                   = VALUE(CURVE,  "Biaxial correction module for anisotropic hardening");
    LSD_MAT_USER_PL_COMPR                   = VALUE(CURVE,  "Compressibility module");
    LSD_MAT_USER_PL_DAMAG                   = VALUE(CURVE,  "Damage module");

    //card 4
    LSD_DM_NF_CURVE                         = VALUE(INT, "Deactivate Module for NF-CURVE");
    LSD_DM_NF_PARAM                         = VALUE(INT, "Deactivate Module for NF-PARAM");
    LSD_DM_NF_POSTC                         = VALUE(INT, "Deactivate Module for NF-POSTC");
    LSD_DM_SF_CURVE                         = VALUE(INT, "Deactivate Module for SF-CURVE");
    LSD_DM_SF_PARAM                         = VALUE(INT, "Deactivate Module for SF-PARAM");
    LSD_DM_SF_POSTC                         = VALUE(INT, "Deactivate Module for SF-POSTC");
    LSD_MAT_USER_NF_CURVE                   = VALUE(CURVE,  "Ductile normal fracture curve");
    LSD_MAT_USER_NF_PARAM                   = VALUE(CURVE,  "Control parameters for ductile normal fracture");
    LSD_MAT_USER_NF_POSTC                   = VALUE(CURVE,  "Module for post-critical behaviour of normal fracture");
    LSD_MAT_USER_SF_CURVE                   = VALUE(CURVE,  "Ductile shear fracture curve");
    LSD_MAT_USER_SF_PARAM                   = VALUE(CURVE,  "Control parameter for ductile shear fracture");
    LSD_MAT_USER_SF_POSTC                   = VALUE(CURVE,  "Module for post critical behaviour of shear fracture");
    LSD_MAT_USER_NF_ORTHO                   = VALUE(CURVE,  "Orthotropy of normal fracture");
    LSD_MAT_USER_SF_ORTHO                   = VALUE(CURVE,  "Orthotropy of shear fracture");

    //card 5
    LSD_DM_CR_HARDE                         = VALUE(INT, "Deactivate Module for CR-HARDE");
    LSD_DM_CR_ORTHO                         = VALUE(INT, "Deactivate Module for CR-ORTHO");
    LSD_DM_CR_ISKIN                         = VALUE(INT, "Deactivate Module for CR-ISKIN");
    LSD_DM_CR_POSTC                         = VALUE(INT, "Deactivate Module for CR-POSTC");
    LSD_DM_CR_PARAM                         = VALUE(INT, "Deactivate Module for CR-PARAM");
    LSD_DM_CR_CHECK                         = VALUE(INT, "Deactivate Module for CR-CHECK");
    LSD_MAT_USER_CR_HARDE                   = VALUE(CURVE,  "Hardening module for Crach");
    LSD_MAT_USER_CR_ORTHO                   = VALUE(CURVE,  "Orthotropy module for Crach");
    LSD_MAT_USER_CR_ISKIN                   = VALUE(CURVE,  "Isotropic-kinematic hardening module for Crach");
    LSD_MAT_USER_CR_POSTC                   = VALUE(CURVE,  "Post-critical module for Crach");
    LSD_MAT_USER_CR_PARAM                   = VALUE(CURVE,  "Control parameter for Crach");
    LSD_MAT_USER_CR_CHECK                   = VALUE(CURVE,  "Approximate instability calculation module");
    LSD_MAT_USER_CURVE7                     = VALUE(CURVE,  "Extra field");
    LSD_MAT_USER_MF_INIT                    = VALUE(CURVE,  "MF_INIT");

    TITLE                                   = VALUE(STRING, "Title");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    LOC_AOPT                                = VALUE(FLOAT, "");
    IO_FLAG                                 = VALUE(INT, "io flag");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    Rho                                     = 118;
    LSD_MAT_USER_DEF_IBULK                  = 1286;
    LSD_MAT_USER_DEF_IEOS                   = 1292;
    LSD_MAT_USER_DEF_IFAIL                  = 1289;
    LSD_MAT_USER_DEF_IG                     = 1287;
    LSD_MAT_USER_DEF_IHYPER                 = 1291;
    LSD_MAT_USER_DEF_IORTHO                 = 1285;
    LSD_MAT_USER_DEF_ITHERM                 = 1290;
    LSD_MAT_USER_DEF_IVECT                  = 1288;
    LSD_MAT_USER_DEF_LMC                    = 1283;
    LSD_MAT_USER_DEF_LMC_P                  = 1294;
    LSD_MAT_USER_DEF_MACF                   = 1296;
    LSD_MAT_USER_DEF_MT                     = 1282;
    LSD_MAT_USER_DEF_NHV                    = 1284;
    LSDYNA_A1                               = 139;
    LSDYNA_A2                               = 140;
    LSDYNA_A3                               = 141;
    LSDYNA_BETA                             = 148;
    LSDYNA_D1                               = 145;
    LSDYNA_D2                               = 146;
    LSDYNA_D3                               = 147;
    LSDYNA_V1                               = 142;
    LSDYNA_V2                               = 143;
    LSDYNA_V3                               = 144;
    LSDYNA_XP                               = 136;
    LSDYNA_YP                               = 137;
    LSDYNA_ZP                               = 138;
    LSD_NODE1                               = 86;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_NODE7                               = 5080;
    LSD_NODE8                               = 5081;
    LSD_SYSTEM                              = 184;
    LSD_TitleOpt                            = 90;
    Num_Comments                            = 3101;
    axisOptFlag                             = 4946;
    AOPT_SKEW_FLAG                          = -1;

    //cardsfor material 48
    LSD_MAT_USER_FIELD_7                    = 8812;
    LSD_MAT_USER_FIELD_8                    = 8813;

    //Card 1
    LSD_MAT_USER_FRELIM                     = 8814;
    LSD_MAT_USER_DTMIN                      = 8815;
    LSD_MAT_USER_NFIL                       = 8816;
    LSD_MAT_USER_VELSC                      = 8817;
    LSD_MAT_USER_RSTRAT                     = 8818;
    LSD_MAT_USER_RTEMP                      = 8819;
    LSD_MAT_USER_ENCRYPT                    = 8820;
    LSD_MAT_USER_INI                        = 8821;

    //card 2
    LSD_MAT_USER_EL_YOUNG                    = 8906;
    LSD_MAT_USER_EL_POISS                    = 8907;
    LSD_MAT_USER_EL_BULKM                    = 8908;
    LSD_MAT_USER_EL_SHEAR                    = 8909;
    LSD_DM_EL_ORTHO                          = 11888;
    LSD_MAT_USER_EL_ORTHO                    = 8910;
    LSD_MAT_USER_EL_SHRCO                    = 8911;
    LSD_MAT_USER_EL_ALPHA                    = 8912;
    LSD_DM_ADIABAT                           = 11889;
    LSD_MAT_USER_ADIABAT                     = 8913;

    //card 3
    LSD_MAT_USER_PL_HARDE                    = 8914;
    LSD_DM_PL_ORTHO                          = 11890;
    LSD_DM_PL_ISKIN                          = 11891;
    LSD_DM_PL_ASYMM                          = 11892;
    LSD_DM_PL_WAIST                          = 11893;
    LSD_DM_PL_BIAXF                          = 11894;
    LSD_DM_PL_COMPR                          = 11895;
    LSD_MAT_USER_PL_ORTHO                    = 8915;
    LSD_MAT_USER_PL_ISKIN                    = 8916;
    LSD_MAT_USER_PL_ASYMM                    = 8917;
    LSD_MAT_USER_PL_WAIST                    = 8918;
    LSD_MAT_USER_PL_BIAXF                    = 8919;
    LSD_MAT_USER_PL_COMPR                    = 8920;
    LSD_MAT_USER_PL_DAMAG                    = 8921;

    //card 4
    LSD_DM_NF_CURVE                          = 11896;
    LSD_DM_NF_PARAM                          = 11897;
    LSD_DM_NF_POSTC                          = 11898;
    LSD_DM_SF_CURVE                          = 11899;
    LSD_DM_SF_PARAM                          = 11900;
    LSD_DM_SF_POSTC                          = 11901;
    LSD_MAT_USER_NF_CURVE                    = 8922;
    LSD_MAT_USER_NF_PARAM                    = 8923;
    LSD_MAT_USER_NF_POSTC                    = 8924;
    LSD_MAT_USER_SF_CURVE                    = 8925;
    LSD_MAT_USER_SF_PARAM                    = 8926;
    LSD_MAT_USER_SF_POSTC                    = 8927;
    LSD_MAT_USER_NF_ORTHO                    = 8928;
    LSD_MAT_USER_SF_ORTHO                    = 8929;

    //card 5
    LSD_DM_CR_HARDE                          = 11902;
    LSD_DM_CR_ORTHO                          = 11903;
    LSD_DM_CR_ISKIN                          = 11904;
    LSD_DM_CR_POSTC                          = 11905;
    LSD_DM_CR_PARAM                          = 11906;
    LSD_DM_CR_CHECK                          = 11907;
    LSD_MAT_USER_CR_HARDE                    = 8930;
    LSD_MAT_USER_CR_ORTHO                    = 8931;
    LSD_MAT_USER_CR_ISKIN                    = 8932;
    LSD_MAT_USER_CR_POSTC                    = 8933;
    LSD_MAT_USER_CR_PARAM                    = 8934;
    LSD_MAT_USER_CR_CHECK                    = 8935;
    LSD_MAT_USER_CURVE7                      = 8936;
    LSD_MAT_USER_MF_INIT                     = 8937;

    LOC_AOPT                                = -1;
    TITLE                                   = -1;
    IO_FLAG                                 = -1;
    //empty_string                       = -1;
}


DEFAULTS(COMMON)
{

    LSD_MAT_USER_DEF_IHYPER    = 0;
    LSD_MAT_USER_DEF_IORTHO    = 0;
    LSD_MAT_USER_DEF_MACF    = 1;

}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
 // MATERIAL_AXES_CHANGE_FLAG=SCALAR(LSD_MAT_USER_DEF_MACF);
  MATERIAL_ANGLE=SCALAR(LSDYNA_BETA);
  YOUNG_MODULUS = SCALAR(LSD_MAT_USER_EL_YOUNG);
  POISSON_RATIO = SCALAR(LSD_MAT_USER_EL_POISS);
         //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON)
{
     ASSIGN(KEYWORD_STR, "*MAT_USER_DEFINED_MATERIAL_MODELS");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 optional:
     SCALAR(Rho)                                    {DIMENSION="density";}
     RADIO(LSD_MAT_USER_DEF_MT)
     {
        ADD(41,  "41: User Material Law 41");
        ADD(42,  "42: User Material Law 42");
        ADD(43,  "43: User Material Law 43");
        ADD(44,  "44: User Material Law 44");
        ADD(45,  "45: User Material Law 45");
        ADD(46,  "46: User Material Law 46");
        ADD(47,  "47: User Material Law 47");
        ADD(48,  "48: User Material Law 48");
        ADD(49,  "49: User Material Law 49");
        ADD(50,  "50: User Material Law 50");
     }
     SIZE(LSD_MAT_USER_DEF_LMC);                                                                                 //Need to be checked (Multiple check block)
     if(LSD_MAT_USER_DEF_MT != 48 && LSD_MAT_USER_DEF_LMC > 0)
     {
        ARRAY(LSD_MAT_USER_DEF_LMC,"")
        {
           SCALAR(LSD_MAT_USER_DEF_LMC_P);
        }
     }
     SCALAR(LSD_MAT_USER_DEF_NHV)                   {DIMENSION="DIMENSIONLESS";}
     RADIO(LSD_MAT_USER_DEF_IORTHO)
     {
        ADD(0, "0: Material is isotropic, and no spot weld thinning");
        ADD(1, "1: Material is orthotropic");
     }
     SCALAR(LSD_MAT_USER_DEF_IBULK)                 {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_USER_DEF_IG)                    {DIMENSION="DIMENSIONLESS";}
     RADIO(LSD_MAT_USER_DEF_IVECT)
     {
        ADD(0, "0: Off");
        ADD(1, "1: On");
     }
     SCALAR(LSD_MAT_USER_DEF_IFAIL)                 {DIMENSION="DIMENSIONLESS";}
     RADIO(LSD_MAT_USER_DEF_ITHERM)
     {
        ADD(0, "0: Off");
        ADD(1, "1: On");
     }
     RADIO(LSD_MAT_USER_DEF_IHYPER)
     {
        ADD(-1, "-1");
        ADD( 0, " 0");
        ADD( 1, " 1");
     }
     RADIO(LSD_MAT_USER_DEF_IEOS)
     {
        ADD(0, "0: Off");
        ADD(1, "1: On");
     }
     if(LSD_MAT_USER_DEF_IORTHO == 1)
     {
         RADIO(axisOptFlag)
         {
            ADD(1, "0: Locally orthotropic: axis given by nodes 1,2 and 4");
            ADD(2, "1: Locally orthotropic: a-dir given by a point and global location of element center");
            ADD(3, "2: Globally orthotropic: axis given by vectors");
            ADD(4, "3: Locally orthotropic: axis given by rotating the material axes by an angle BETA");
            ADD(5, "4: Locally orhtotropic: cylindrical coordinate given by vector v and point P");
            ADD(6, "By System");
         }
     }
     if(LSD_MAT_USER_DEF_IORTHO == 1 && axisOptFlag == 6)
     {
        DATA(LSD_SYSTEM);
     }
     if(LSD_MAT_USER_DEF_IORTHO == 1)
     {
         RADIO(LSD_MAT_USER_DEF_MACF)
         {
            ADD(1, "1: No Change");
            ADD(2, "2: Switch material axes a and b");
            ADD(3, "3: Switch material axes a and c");
            ADD(4, "4: Switch material axes b and c");
         }
     }
     if(LSD_MAT_USER_DEF_IORTHO == 1 && (axisOptFlag == 2 || axisOptFlag == 5))
     {
        DATA(LSD_NODE1);
        SCALAR(LSDYNA_XP)               {DIMENSION="l";}
        SCALAR(LSDYNA_YP)               {DIMENSION="l";}
        SCALAR(LSDYNA_ZP)               {DIMENSION="l";}
     }
     if(LSD_MAT_USER_DEF_IORTHO == 1 && axisOptFlag == 3)
     {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        SCALAR(LSDYNA_A1)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_A2)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_A3)               {DIMENSION="DIMENSIONLESS";}
        DATA(LSD_NODE7);                
        DATA(LSD_NODE8);                
        SCALAR(LSDYNA_D1)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_D2)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_D3)               {DIMENSION="DIMENSIONLESS";}
     }
     if(LSD_MAT_USER_DEF_IORTHO == 1 && (axisOptFlag == 4 || axisOptFlag == 5))
     {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        SCALAR(LSDYNA_V1)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_V2)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_V3)               {DIMENSION="DIMENSIONLESS";}
     }     
     if(LSD_MAT_USER_DEF_IORTHO == 1 && axisOptFlag == 4)
     {
         SCALAR(LSDYNA_BETA)                {DIMENSION="a";}
     }
     if(LSD_MAT_USER_DEF_MT == 48 && LSD_MAT_USER_DEF_LMC > 0)
     {
        SCALAR(LSD_MAT_USER_FRELIM)     {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_USER_DTMIN)     {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_USER_NFIL)     {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_USER_VELSC)     {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_USER_RSTRAT)     {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_USER_RTEMP)     {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_USER_ENCRYPT)     {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_USER_INI)     {DIMENSION="DIMENSIONLESS";}
     }
     if(LSD_MAT_USER_DEF_MT == 48 && LSD_MAT_USER_DEF_LMC >= 9)
     {
        SCALAR(LSD_MAT_USER_EL_YOUNG)     {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_USER_EL_POISS)     {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_USER_EL_BULKM)     {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_USER_EL_SHEAR)     {DIMENSION="DIMENSIONLESS";}
        FLAG(LSD_DM_EL_ORTHO);
        DATA(LSD_MAT_USER_EL_ORTHO);
        SCALAR(LSD_MAT_USER_EL_SHRCO)     {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_MAT_USER_EL_ALPHA)     {DIMENSION="DIMENSIONLESS";}
        FLAG(LSD_DM_ADIABAT);
        DATA(LSD_MAT_USER_ADIABAT);
     }
     if(LSD_MAT_USER_DEF_MT == 48 && LSD_MAT_USER_DEF_LMC >= 17)
     {
        DATA(LSD_MAT_USER_PL_HARDE);
        FLAG(LSD_DM_PL_ORTHO);
        FLAG(LSD_DM_PL_ISKIN);
        FLAG(LSD_DM_PL_ASYMM);
        FLAG(LSD_DM_PL_WAIST);
        FLAG(LSD_DM_PL_BIAXF);
        FLAG(LSD_DM_PL_COMPR);
        DATA(LSD_MAT_USER_PL_ORTHO);
        DATA(LSD_MAT_USER_PL_ISKIN);
        DATA(LSD_MAT_USER_PL_ASYMM);
        DATA(LSD_MAT_USER_PL_WAIST);
        DATA(LSD_MAT_USER_PL_BIAXF);
        DATA(LSD_MAT_USER_PL_COMPR);
        DATA(LSD_MAT_USER_PL_DAMAG);
     }
     if(LSD_MAT_USER_DEF_MT == 48 && LSD_MAT_USER_DEF_LMC >= 25)
     {
        FLAG(LSD_DM_NF_CURVE);
        FLAG(LSD_DM_NF_PARAM);
        FLAG(LSD_DM_NF_POSTC);
        FLAG(LSD_DM_SF_CURVE);
        FLAG(LSD_DM_SF_PARAM);
        FLAG(LSD_DM_SF_POSTC);
        DATA(LSD_MAT_USER_NF_CURVE);
        DATA(LSD_MAT_USER_NF_PARAM);
        DATA(LSD_MAT_USER_NF_POSTC);
        DATA(LSD_MAT_USER_SF_CURVE);
        DATA(LSD_MAT_USER_SF_PARAM);
        DATA(LSD_MAT_USER_SF_POSTC);
        DATA(LSD_MAT_USER_NF_ORTHO);
        DATA(LSD_MAT_USER_SF_ORTHO);
     }
     if(LSD_MAT_USER_DEF_MT == 48 && LSD_MAT_USER_DEF_LMC >= 33)
     {
        FLAG(LSD_DM_CR_HARDE);
        FLAG(LSD_DM_CR_ORTHO);
        FLAG(LSD_DM_CR_ISKIN);
        FLAG(LSD_DM_CR_POSTC);
        FLAG(LSD_DM_CR_PARAM);
        FLAG(LSD_DM_CR_CHECK);
        DATA(LSD_MAT_USER_CR_HARDE);
        DATA(LSD_MAT_USER_CR_ORTHO);
        DATA(LSD_MAT_USER_CR_ISKIN);
        DATA(LSD_MAT_USER_CR_POSTC);
        DATA(LSD_MAT_USER_CR_PARAM);
        DATA(LSD_MAT_USER_CR_CHECK);
        DATA(LSD_MAT_USER_CURVE7);
        DATA(LSD_MAT_USER_MF_INIT);
     }
/*
  graphical SUPPORT("Part(s) to which material is applied") {
    OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/BEAM,/COMPONENT/SPRING,/COMPONENT/TRUSS,/COMPONENT/RIVET,/COMPONENT/SHELL,/COMPONENT/PENTA6,/COMPONENT/SHEL16,/COMPONENT/TSHELL);
    ADD(COMPONENT,"Parts");
  }
*/
}

// File format
FORMAT(Keyword971) 
{
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    if(LSD_NODE7 != NONE && LSD_NODE8 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    //
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    //
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);
    //
    
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 5 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,4.0,EXPORT);
    }
    else if(IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,5.0,EXPORT);
    }

    COMMENT("$      MID       RHO        MT       LMC       NHV    IORTHO     IBULK        IG");
    CARD("%10d%10lg%10d%10d%10d%10d%10d%10d",_ID_,Rho,LSD_MAT_USER_DEF_MT,LSD_MAT_USER_DEF_LMC,LSD_MAT_USER_DEF_NHV,LSD_MAT_USER_DEF_IORTHO,LSD_MAT_USER_DEF_IBULK,LSD_MAT_USER_DEF_IG);
    if(LSD_MAT_USER_DEF_IORTHO == 0 && LSD_MAT_USER_DEF_LMC > 48)
    {
        ASSIGN(LSD_MAT_USER_DEF_LMC,48);
    }
    else if(LSD_MAT_USER_DEF_IORTHO == 1 && LSD_MAT_USER_DEF_LMC > 40)
    {
        ASSIGN(LSD_MAT_USER_DEF_LMC,40);
    }
    //
    COMMENT("$    IVECT     IFAIL    ITHERM    IHYPER      IEOS");
    CARD("%10d%10d%10d%10d%10d",LSD_MAT_USER_DEF_IVECT,LSD_MAT_USER_DEF_IFAIL,LSD_MAT_USER_DEF_ITHERM,LSD_MAT_USER_DEF_IHYPER,LSD_MAT_USER_DEF_IEOS);

    if(LSD_MAT_USER_DEF_IORTHO == 1)
    {
        CARD_PREREAD("%10lg",LOC_AOPT);
    }
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,4,IMPORT);
    }
    else if(LOC_AOPT == 4.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,5,IMPORT);
    }
    else if(IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,6,IMPORT);
    }

    COMMENT("$     AOPT      VAXC        XP        YP        ZP        A1        A2        A3");
    if(LSD_MAT_USER_DEF_IORTHO == 1 && axisOptFlag == 2)
    {
        CARD("%10lg%10d%10lg%10lg%10lg",LOC_AOPT,LSD_MAT_USER_DEF_MACF,LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP);
    }
    else if(LSD_MAT_USER_DEF_IORTHO == 1 && axisOptFlag == 3)
    {
        CARD("%10lg%10d%10s%10s%10s%10lg%10lg%10lg",LOC_AOPT,LSD_MAT_USER_DEF_MACF,_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
    }
    else if(axisOptFlag != 6 && LSD_MAT_USER_DEF_IORTHO == 1)
    {
          CARD("%10lg%10d",LOC_AOPT,LSD_MAT_USER_DEF_MACF);
    }
    else if(axisOptFlag == 6 && LSD_MAT_USER_DEF_IORTHO == 1)
    {
          CARD("%10lg%10d",FLAGGED_OBJECT(LSD_SYSTEM,AOPT_SKEW_FLAG),LSD_MAT_USER_DEF_MACF);
    }

    COMMENT("$       V1        V2        V3        D1        D2        D3      BETA");
    if(LSD_MAT_USER_DEF_IORTHO == 1 && axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
    }
    else if(LSD_MAT_USER_DEF_IORTHO == 1 && axisOptFlag == 4)
    {
        CARD("%10lg%10lg%10lg%10s%10s%10s%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V2,_BLANK_,_BLANK_,_BLANK_,LSDYNA_BETA);
    }
    else if(LSD_MAT_USER_DEF_IORTHO == 1)
    {
        BLANK;
    }

    if(LSD_MAT_USER_DEF_MT == 48 && LSD_MAT_USER_DEF_LMC > 0)
    {
        COMMENT("$   FRELIM     DTMIN      NFIL     VELSC    RSTRAT     RTEMP   ENCRYPT       INI");
        CARD("%10lg%10lg%10d%10lg%10lg%10lg%10lg%10lg",LSD_MAT_USER_FRELIM,LSD_MAT_USER_DTMIN,LSD_MAT_USER_NFIL,LSD_MAT_USER_VELSC,LSD_MAT_USER_RSTRAT,LSD_MAT_USER_RTEMP,LSD_MAT_USER_ENCRYPT,LSD_MAT_USER_INI);
    }
    if(LSD_MAT_USER_DEF_MT == 48 && LSD_MAT_USER_DEF_LMC >= 9)
    {
        COMMENT("$ EL-YOUNG  EL-POISS  EL-BULKM  EL-SHEAR  EL-ORTHO  EL-SHRCO  EL-ALPHA   ADIABAT");
        CARD("%10lg%10lg%10lg%10lg%10d%10lg%10lg%10d",LSD_MAT_USER_EL_YOUNG,LSD_MAT_USER_EL_POISS,LSD_MAT_USER_EL_BULKM,LSD_MAT_USER_EL_SHEAR,FLAGGED_OBJECT(LSD_MAT_USER_EL_ORTHO,LSD_DM_EL_ORTHO),LSD_MAT_USER_EL_SHRCO,LSD_MAT_USER_EL_ALPHA,FLAGGED_OBJECT(LSD_MAT_USER_ADIABAT,LSD_DM_ADIABAT));
    }
    if(LSD_MAT_USER_DEF_MT == 48 && LSD_MAT_USER_DEF_LMC >= 17)
    {
        COMMENT("$ PL-HARDE  PL-ORTHO  PL-ISKIN  PL-ASYMM  PL-WAIST  PL-BIAXF  PL-COMPR  PL-DAMAG");
        CARD("%10d%10d%10d%10d%10d%10d%10d%10d",LSD_MAT_USER_PL_HARDE,FLAGGED_OBJECT(LSD_MAT_USER_PL_ORTHO,LSD_DM_PL_ORTHO),FLAGGED_OBJECT(LSD_MAT_USER_PL_ISKIN,LSD_DM_PL_ISKIN),FLAGGED_OBJECT(LSD_MAT_USER_PL_ASYMM,LSD_DM_PL_ASYMM),FLAGGED_OBJECT(LSD_MAT_USER_PL_WAIST,LSD_DM_PL_WAIST),FLAGGED_OBJECT(LSD_MAT_USER_PL_BIAXF,LSD_DM_PL_BIAXF),FLAGGED_OBJECT(LSD_MAT_USER_PL_COMPR,LSD_DM_PL_COMPR),LSD_MAT_USER_PL_DAMAG);
    }
    if(LSD_MAT_USER_DEF_MT == 48 && LSD_MAT_USER_DEF_LMC >= 25)
    {
        COMMENT("$ NF-CURVE  NF-PARAM  NF-POSTC  SF-CURVE  SF-PARAM  SF-POSTC  NF-ORTHO  SF-ORTHO");
        CARD("%10d%10d%10d%10d%10d%10d%10d%10d",FLAGGED_OBJECT(LSD_MAT_USER_NF_CURVE,LSD_DM_NF_CURVE),FLAGGED_OBJECT(LSD_MAT_USER_NF_PARAM,LSD_DM_NF_PARAM),FLAGGED_OBJECT(LSD_MAT_USER_NF_POSTC,LSD_DM_NF_POSTC),FLAGGED_OBJECT(LSD_MAT_USER_SF_CURVE,LSD_DM_SF_CURVE),FLAGGED_OBJECT(LSD_MAT_USER_SF_PARAM,LSD_DM_SF_PARAM),FLAGGED_OBJECT(LSD_MAT_USER_SF_POSTC,LSD_DM_SF_POSTC),LSD_MAT_USER_NF_ORTHO,LSD_MAT_USER_SF_ORTHO);
    }
    if(LSD_MAT_USER_DEF_MT == 48 && LSD_MAT_USER_DEF_LMC >= 33)
    {
        COMMENT("$ CR-HARDE  CR-ORTHO  CR-ISKIN  CR-POSTC  CR-PARAM  CR-CHECK   CURVE-7   MF-INIT");
        CARD("%10d%10d%10d%10d%10d%10d%10d%10d",FLAGGED_OBJECT(LSD_MAT_USER_CR_HARDE,LSD_DM_CR_HARDE),FLAGGED_OBJECT(LSD_MAT_USER_CR_ORTHO,LSD_DM_CR_ORTHO),FLAGGED_OBJECT(LSD_MAT_USER_CR_ISKIN,LSD_DM_CR_ISKIN),FLAGGED_OBJECT(LSD_MAT_USER_CR_POSTC,LSD_DM_CR_POSTC),FLAGGED_OBJECT(LSD_MAT_USER_CR_PARAM,LSD_DM_CR_PARAM),FLAGGED_OBJECT(LSD_MAT_USER_CR_CHECK,LSD_DM_CR_CHECK),LSD_MAT_USER_CURVE7,LSD_MAT_USER_MF_INIT);
    }

    if(LSD_MAT_USER_DEF_MT != 48 && LSD_MAT_USER_DEF_LMC > 0)
    {
        COMMENT("$       P1        P2        P3        P4        P5        P6        P7        P8");
        CELL_LIST(LSD_MAT_USER_DEF_LMC,"%10lg",LSD_MAT_USER_DEF_LMC_P);
    }
}
