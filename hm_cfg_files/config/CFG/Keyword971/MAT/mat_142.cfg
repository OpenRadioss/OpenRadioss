//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 00
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    AnisoAxisDefiniFlag                     = VALUE(INT,  "Anisotropy axis definition");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    LSDYNA_A1                               = VALUE(FLOAT,  "A1");
    LSDYNA_A2                               = VALUE(FLOAT,  "A2");
    LSDYNA_A3                               = VALUE(FLOAT,  "A3");
    LSDYNA_D1                               = VALUE(FLOAT,  "D1");
    LSDYNA_D2                               = VALUE(FLOAT,  "D2");
    LSDYNA_D3                               = VALUE(FLOAT,  "D3");
    LSDYNA_K                                = VALUE(FLOAT,  "K");
    LSDYNA_V1                               = VALUE(FLOAT,  "V1");
    LSDYNA_V2                               = VALUE(FLOAT,  "V2");
    LSDYNA_V3                               = VALUE(FLOAT,  "V3");
    LSDYNA_XP                               = VALUE(FLOAT,  "XP");
    LSDYNA_YP                               = VALUE(FLOAT,  "YP");
    LSDYNA_ZP                               = VALUE(FLOAT,  "ZP");
    LSD_ANG                                 = VALUE(FLOAT,  "ANG");
    LSD_E11                                 = VALUE(FLOAT,  "E11");
    LSD_E12                                 = VALUE(FLOAT,  "E12");
    LSD_E22                                 = VALUE(FLOAT,  "E22");
    LSD_E23                                 = VALUE(FLOAT,  "E23");
    LSD_G                                   = VALUE(FLOAT,  "G");
    LSD_I11                                 = VALUE(FUNCT,  "I11");
    LSD_I12                                 = VALUE(FUNCT,  "I12");
    LSD_I22                                 = VALUE(FUNCT,  "I22");
    LSD_I23                                 = VALUE(FUNCT,  "I23");
    LSD_IAA                                 = VALUE(FUNCT,  "IAA");
    LSD_MAT142_ISCL                         = VALUE(FUNCT,  "ISCL");
    LSD_MAT142_MACF                         = VALUE(INT,  "MACF");
    LSD_MAT142_NY                           = VALUE(INT,  "NY");
    LSD_MU                                  = VALUE(FLOAT,  "MU");
    LSD_NODE1                               = VALUE(NODE,  "Node");
    LSD_NODE3                               = VALUE(NODE,  "Node1");
    LSD_NODE4                               = VALUE(NODE,  "Node2");
    LSD_NODE5                               = VALUE(NODE,  "Node1");
    LSD_NODE6                               = VALUE(NODE,  "Node2");
    LSD_NODE7                               = VALUE(NODE,  "Node1");
    LSD_NODE8                               = VALUE(NODE,  "Node2");
    LSD_SYSTEM                              = VALUE(SYSTEM,  "AOPT");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    Rho                                     = VALUE(FLOAT,  "Rho");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    LOC_AOPT                                = VALUE(FLOAT, "");
    IO_FLAG                                 = VALUE(INT, "io flag");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    AnisoAxisDefiniFlag                     = 1053;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    LSDYNA_A1                               = 139;
    LSDYNA_A2                               = 140;
    LSDYNA_A3                               = 141;
    LSDYNA_D1                               = 145;
    LSDYNA_D2                               = 146;
    LSDYNA_D3                               = 147;
    LSDYNA_K                                = 124;
    LSDYNA_V1                               = 142;
    LSDYNA_V2                               = 143;
    LSDYNA_V3                               = 144;
    LSDYNA_XP                               = 136;
    LSDYNA_YP                               = 137;
    LSDYNA_ZP                               = 138;
    LSD_ANG                                 = 5238;
    LSD_E11                                 = 5229;
    LSD_E12                                 = 5231;
    LSD_E22                                 = 5230;
    LSD_E23                                 = 5232;
    LSD_G                                   = 1560;
    LSD_I11                                 = 5233;
    LSD_I12                                 = 5235;
    LSD_I22                                 = 5234;
    LSD_I23                                 = 5236;
    LSD_IAA                                 = 5237;
    LSD_MAT142_ISCL                         = 1044;
    LSD_MAT142_MACF                         = 1045;
    LSD_MAT142_NY                           = 5239;
    LSD_MU                                  = 3051;
    LSD_NODE1                               = 86;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_NODE7                               = 5080;
    LSD_NODE8                               = 5081;
    LSD_SYSTEM                              = 184;
    LSD_TitleOpt                            = 90;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    AOPT_SKEW_FLAG                          = -1;
    LOC_AOPT                                = -1;
    IO_FLAG                                 = -1;
    //empty_string                       = -1;
}

DEFAULTS(COMMON)
{

    LSD_MAT142_MACF    = 1;

}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  ELASTIC_MODULUS_AXIAL_DIRECTION=SCALAR(LSD_E11);
  ELASTIC_MODULUS_TRANSVERSE_DIRECTION=SCALAR(LSD_E22);
  ELASTIC_SHEAR_MODULUS=SCALAR(LSD_E12);
  ELASTIC_SHEAR_MODULUS_TRANSVERSE_PLANE=SCALAR(LSD_E23);
  SHEAR_MODULUS=SCALAR(LSD_G);
  BULK_MODULUS_CONTACT_STIFFNESS=SCALAR(LSDYNA_K);
  ANGLE=SCALAR(LSD_ANG);
  DAMPING_COEFFICIENT=SCALAR(LSD_MU);
  MATERIAL_AXES_OPTION=SCALAR(AnisoAxisDefiniFlag);
  YOUNG_MODULUS = MAX(ELASTIC_MODULUS_AXIAL_DIRECTION,ELASTIC_MODULUS_TRANSVERSE_DIRECTION);
  POISSON_RATIO     = EVAL((3.*BULK_MODULUS_CONTACT_STIFFNESS-2.*SHEAR_MODULUS)/(6.*BULK_MODULUS_CONTACT_STIFFNESS+2.*SHEAR_MODULUS));
   public:
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 public:
  SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+BULK_MODULUS_CONTACT_STIFFNESS)/MASS_DENSITY)^0.5);
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_TRANSVERSELY_ANISOTROPIC_CRUSHABLE_FOAM");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                            {DIMENSION="density";}
 optional:
     SCALAR(LSD_E11)                        {DIMENSION="pressure";}
     SCALAR(LSD_E22)                        {DIMENSION="pressure";}
     SCALAR(LSD_E12)                        {DIMENSION="pressure";}
     SCALAR(LSD_E23)                        {DIMENSION="pressure";}
     SCALAR(LSD_G)                          {DIMENSION="pressure";}
     SCALAR(LSDYNA_K)                       {DIMENSION="DIMENSIONLESS";}
     DATA(LSD_I11);
     DATA(LSD_I22);
     DATA(LSD_I12);
     DATA(LSD_I23);
     DATA(LSD_IAA);
     SCALAR(LSD_MAT142_NY)                  {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_ANG)                        {DIMENSION="a";}
     SCALAR(LSD_MU)                         {DIMENSION="DIMENSIONLESS";}
     RADIO(AnisoAxisDefiniFlag)
     {
        ADD(0, "0: Locally orthotropic: axis given by nodes 1,2 and 4");
        ADD(1, "1: Locally orthotropic: a-dir given by a point and global location of element center");
        ADD(2, "2: Globally orthotropic: axis given by vectors");     
        ADD(3, "3: Locally orthotropic: axis given by rotating the material axes by an angle BETA");
        ADD(4, "4: Locally orhtotropic: cylindrical coordinate given by vector v and point P");
        ADD(5, "By System");
     }
     if(AnisoAxisDefiniFlag == 5)
     {
        DATA(LSD_SYSTEM);
     }
     DATA(LSD_MAT142_ISCL);
     RADIO(LSD_MAT142_MACF)
     {
        ADD(1, "1: No change (default)");
        ADD(2, "2: Switch material axes a and b");
        ADD(3, "3: Switch material axes a and c");
        ADD(4, "4: Switch material axes b and c");
     }
     if(AnisoAxisDefiniFlag == 1 || AnisoAxisDefiniFlag == 4)
     {
        DATA(LSD_NODE1);
        SCALAR(LSDYNA_XP)                  {DIMENSION="l";}
        SCALAR(LSDYNA_YP)                  {DIMENSION="l";}
        SCALAR(LSDYNA_ZP)                  {DIMENSION="l";}
     }     
     if(AnisoAxisDefiniFlag == 2)
     {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        SCALAR(LSDYNA_A1)                   {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_A2)                   {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_A3)                   {DIMENSION="DIMENSIONLESS";}
        DATA(LSD_NODE7);                
        DATA(LSD_NODE8);                
        SCALAR(LSDYNA_D1)                   {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_D2)                   {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_D3)                   {DIMENSION="DIMENSIONLESS";}
     }
     if(AnisoAxisDefiniFlag == 3 || AnisoAxisDefiniFlag == 4)
     {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        SCALAR(LSDYNA_V1)                   {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_V2)                   {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_V3)                   {DIMENSION="DIMENSIONLESS";}
     }     
/*
    graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/BEAM,/COMPONENT/SPRING,/COMPONENT/TRUSS,/COMPONENT/RIVET,/COMPONENT/SHELL,/COMPONENT/PENTA6,/COMPONENT/SHEL16);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);

    //
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE8 != NONE && LSD_NODE7 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    //
    if(AnisoAxisDefiniFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(AnisoAxisDefiniFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(AnisoAxisDefiniFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(AnisoAxisDefiniFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    else if(AnisoAxisDefiniFlag == 5 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,4.0,EXPORT);
    }
    //
    COMMENT("$      MID       RHO       E11       E22       E12       E23         G         K");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSD_E11,LSD_E22,LSD_E12,LSD_E23,LSD_G,LSDYNA_K);
    //    
    COMMENT("$      I11       I22       I12       I23       IAA        NY       ANG        MU");
    CARD("%10d%10d%10d%10d%10d%10d%10lg%10lg",LSD_I11,LSD_I22,LSD_I12,LSD_I23,LSD_IAA,LSD_MAT142_NY,LSD_ANG,LSD_MU);
    //
    COMMENT("$     AOPT      ISCL      MACF");
    if(IO_FLAG == 2)
    {
        if(AnisoAxisDefiniFlag >= 1 && AnisoAxisDefiniFlag < 6)
        {
            CARD("%10lg%10d%10d",LOC_AOPT,LSD_MAT142_ISCL, LSD_MAT142_MACF);
        }
        else
        {
            CARD("%10d%10d%10d",FLAGGED_OBJECT(LSD_SYSTEM,AOPT_SKEW_FLAG),LSD_MAT142_ISCL, LSD_MAT142_MACF);
        }
    }
    CARD_PREREAD("%10lg",LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(AnisoAxisDefiniFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(AnisoAxisDefiniFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(AnisoAxisDefiniFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(AnisoAxisDefiniFlag,4,IMPORT);
    }
    else if(LOC_AOPT == 4.0 && IO_FLAG == 1)
    {
        ASSIGN(AnisoAxisDefiniFlag,5,IMPORT);
    }
    if(IO_FLAG == 1)
    {
        if(AnisoAxisDefiniFlag >= 1 && AnisoAxisDefiniFlag < 6)
        {
            CARD("%10lg%10d%10d",LOC_AOPT,LSD_MAT142_ISCL, LSD_MAT142_MACF);
        }
        else
        {
            CARD("%10d%10d%10d",FLAGGED_OBJECT(LSD_SYSTEM,AOPT_SKEW_FLAG),LSD_MAT142_ISCL, LSD_MAT142_MACF);
            ASSIGN(AnisoAxisDefiniFlag, 6, IMPORT);
        }
    }
    //
    COMMENT("$       XP        YP        ZP        A1        A2        A3");
    if(AnisoAxisDefiniFlag == 2 || AnisoAxisDefiniFlag == 5)
    {
        CARD("%10lg%10lg%10lg",LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP);
    }
    else if(AnisoAxisDefiniFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
    }
    else
    {
        BLANK;
    }
    //
    COMMENT("$       D1        D2        D3        V1        V2        V3");
    if(AnisoAxisDefiniFlag == 3)
    {
        CARD("%10lg%10lg%10lg",LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
    }
    else if(AnisoAxisDefiniFlag == 4 || AnisoAxisDefiniFlag == 5)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_V1,LSDYNA_V2,LSDYNA_V3);
    }
    else
    {
        BLANK;
    }
    //
}
