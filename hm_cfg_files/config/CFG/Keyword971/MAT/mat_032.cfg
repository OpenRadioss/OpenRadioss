//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 032
// 


ATTRIBUTES(COMMON) 
{
    // Initial and reference densities
    KEYWORD_STR                       = VALUE(STRING, "Solver Keyword");
    LSD_TitleOpt                      = VALUE(INT, "Title");
    CommentEnumField                  = VALUE(INT, "User Comments");
    Num_Comments                      = SIZE("No. of comment lines");
    Comments                          = ARRAY[Num_Comments](STRING, "Entity Comments");
    Rho                               = VALUE(FLOAT, "Mass density");  
    E                                 = VALUE(FLOAT, "Youngs modulus for glass");
    Nu                                = VALUE(FLOAT, "Poissons ratio for glass");
    LSDYNA_SIGY                       = VALUE(FLOAT, "Yield stress for glass");
    LSDYNA_ETAN                       = VALUE(FLOAT, "Plastic hardening modulus for glass");
    LSD_MAT_EFG                       = VALUE(FLOAT, "Plastic strain at failure for glass"); 
    LSD_MAT_EP                        = VALUE(FLOAT, "Youngs modulus for polymer");
    LSD_MAT_PRP                       = VALUE(FLOAT, "Poissons ratio for polymer");
    LSD_MAT_SYP                       = VALUE(FLOAT, "Yield stress for polymer");
    LSD_MAT_ETP                       = VALUE(FLOAT, "Plastic hardening modulus for polymer");
    ArrayCount                        = SIZE("ArrayCount");
    LSD_MAT_F                         = ARRAY[ArrayCount](FLOAT, "Integration point material", "F");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                   = 9000;
    CommentEnumField              = 3220;
    Num_Comments                  = 3101;
    LSD_TitleOpt                  = 90;
    Comments                      = 3100;
    Rho                           = 118;
    E                             = 119;
    Nu                            = 120;
    LSDYNA_SIGY                   = 152;  
    LSDYNA_ETAN                   = 153;
    LSD_MAT_EFG                   = 1104;
    LSD_MAT_EP                    = 1105;
    LSD_MAT_PRP                   = 1106;
    LSD_MAT_SYP                   = 1107;
    LSD_MAT_ETP                   = 1108;
    ArrayCount                    = 2246;
    LSD_MAT_F                    = 1109;
}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  YOUNG_MODULUS=SCALAR(E);
  POISSON_RATIO=SCALAR(Nu);
  YIELD_STRESS_FOR_GLASS=SCALAR(LSDYNA_SIGY);
  PLASTIC_HARDENING_MODULUS=SCALAR(LSDYNA_ETAN);
  PLASTIC_STRAIN_FAILURE=SCALAR(LSD_MAT_EFG);
  YOUNG_MODULUS_POLYMER=SCALAR(LSD_MAT_EP);
  POISSON_RATIO_POLYMER=SCALAR(LSD_MAT_PRP);
  YIELD_STRESS_POLYMER=SCALAR(LSD_MAT_SYP);
  PLASTIC_HARDENING_MODULUS_POLYMER=SCALAR(LSD_MAT_ETP);
 public:
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON) 
{
  ASSIGN(KEYWORD_STR, "*MAT_LAMINATED_GLASS");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
       {
             ASSIGN(KEYWORD_STR, "_TITLE");
       } 
 mandatory:
     SCALAR(Rho)                        { DIMENSION="density";}
     SCALAR(E)                          {DIMENSION="pressure";}
 optional:
     SCALAR(Nu)                         {DIMENSION="DIMENSIONLESS";}
 mandatory:
     SCALAR(LSDYNA_SIGY)                {DIMENSION="pressure";}
 optional:
     SCALAR(LSDYNA_ETAN)                {DIMENSION="pressure";}
     SCALAR(LSD_MAT_EFG)                {DIMENSION="DIMENSIONLESS";}
 mandatory:
     SCALAR(LSD_MAT_EP)                 {DIMENSION="pressure";}
 optional: 
     SCALAR(LSD_MAT_PRP)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_SYP)                {DIMENSION="pressure";}
 mandatory:
     SCALAR(LSD_MAT_ETP)                {DIMENSION="pressure";}
 optional:   
     SIZE_RADIO(ArrayCount)
     {
        ADD(0,  "OFF");
        ADD(0,  " 0");
        ADD(1,  " 1");
        ADD(2,  " 2");
        ADD(3,  " 3");
        ADD(4,  " 4");
        ADD(5,  " 5");
        ADD(6,  " 6");
        ADD(7,  " 7");
        ADD(8,  " 8");
        ADD(9,  " 9");
        ADD(10, "10");
        ADD(11, "11");
        ADD(12, "12");
        ADD(13, "13");
        ADD(14, "14");
        ADD(15, "15");
        ADD(16, "16");
        ADD(17, "17");
        ADD(18, "18");
        ADD(19, "19");
        ADD(20, "20");
        ADD(21, "21");
        ADD(22, "22");
        ADD(23, "23");
        ADD(24, "24");
        ADD(25, "25");
        ADD(26, "26");
        ADD(27, "27");
        ADD(28, "28");
        ADD(29, "29");       
        ADD(30, "30");
        ADD(31, "31");
        ADD(32, "32");
     }
    ARRAY(ArrayCount,"")
    {
        SCALAR(LSD_MAT_F)           {DIMENSION="DIMENSIONLESS";}
    }
}

// File format
FORMAT(Keyword971) 
{
    //
    COMMENT("$      MID       RHO        EG       PRG       SYG       ETG       EFG        EP");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,LSDYNA_SIGY,LSDYNA_ETAN,LSD_MAT_EFG,LSD_MAT_EP);
    //
    COMMENT("$      PRP       SYP       ETP");
    CARD("%10lg%10lg%10lg",LSD_MAT_PRP,LSD_MAT_SYP,LSD_MAT_ETP);
    //
    if(ArrayCount >= 1)
    {
        COMMENT("$       F1        F2        F3        F4        F5        F6        F7        F8");
    }
    FREE_CELL_LIST(ArrayCount,"%10lg",LSD_MAT_F,80);
}
