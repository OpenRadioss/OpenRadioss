//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 191
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    E                                       = VALUE(FLOAT,  "Youngs modulus");
    LSDYNA_SIGY                             = VALUE(FLOAT,  "Yield stress of material");
    LSD_LCPMS                               = VALUE(FUNCT,  "plastic moment vs Plastic rotation at node2 about local s-axis");
    LSD_LCPMT                               = VALUE(FUNCT,  "plastic moment vs Plastic rotation at node2 about local t-axis");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    MATL191_A                               = VALUE(FLOAT,  "Parameter to define yield surface");
    MATL191_ALPHA                           = VALUE(FLOAT,  "Parameter to define yield surface");
    MATL191_ALPHA5                          = VALUE(FLOAT,  "Parameter to define yield surface");
    MATL191_ASFLAG                          = VALUE(FLOAT,  "Axial strain definition for force-strain curves");
    MATL191_B                               = VALUE(FLOAT,  "Parameter to define yield surface");
    MATL191_BETA                            = VALUE(FLOAT,  "Parameter to define yield surface");
    MATL191_BETA5                           = VALUE(FLOAT,  "Parameter to define yield surface");
    MATL191_CS1                             = VALUE(FLOAT,  "Compressive axial strain thresholds");
    MATL191_CS2                             = VALUE(FLOAT,  "Compressive axial strain thresholds");
    MATL191_CS3                             = VALUE(FLOAT,  "Compressive axial strain thresholds");
    MATL191_CS4                             = VALUE(FLOAT,  "Compressive axial strain thresholds");
    MATL191_D                               = VALUE(FLOAT,  "Depth of section used to calculate interaction curve");
    MATL191_DEGRAD                          = VALUE(INT,  "Flag for degrading moment behavior");
    MATL191_DELTA                           = VALUE(FLOAT,  "Parameter to define yield surface");
    MATL191_FOFFS                           = VALUE(FLOAT,  "Force offset for yield surface");
    MATL191_FTYPE                           = VALUE(INT,  "Formulation type for interaction");
    MATL191_GAMMA                           = VALUE(FLOAT,  "Parameter to define yield surface");
    MATL191_GAMMA5                          = VALUE(FLOAT,  "Parameter to define yield surface");
    MATL191_IFEMA                           = VALUE(INT,  "Flag for input of FEMA thresholds");
    MATL191_LCAC                            = VALUE(FUNCT,  "compressive yield force vs total compressive(elastic + plastic) strain or vs elongation");
    MATL191_LCAT                            = VALUE(FUNCT,  "Axial tensile yield force vs total tensile (elastic + plastic) strain or vs elongation");
    MATL191_PR1                             = VALUE(FLOAT,  "Plastic rotation thresholds");
    MATL191_PR2                             = VALUE(FLOAT,  "Plastic rotation thresholds");
    MATL191_PR3                             = VALUE(FLOAT,  "Plastic rotation thresholds");
    MATL191_PR4                             = VALUE(FLOAT,  "Plastic rotation thresholds");
    MATL191_SFAC                            = VALUE(FLOAT,  "Scale factor on axial tensile force");
    MATL191_SFAT                            = VALUE(FLOAT,  "Scale factor on axial tensile force");
    MATL191_SFS                             = VALUE(FLOAT,  "Scale factor on s-moment at node2");
    MATL191_SFT                             = VALUE(FLOAT,  "Scale factor on t-moment at node2");
    MATL191_TF                              = VALUE(FLOAT,  "Flange thickness of section used to calculate interaction curve");
    MATL191_TS1                             = VALUE(FLOAT,  "Tensile axial strain thresholds");
    MATL191_TS2                             = VALUE(FLOAT,  "Tensile axial strain thresholds");
    MATL191_TS3                             = VALUE(FLOAT,  "Tensile axial strain thresholds");
    MATL191_TS4                             = VALUE(FLOAT,  "Tensile axial strain thresholds");
    MATL191_TW                              = VALUE(FLOAT,  "Web thickness used to calculate interaction curve");
    MATL191_W                               = VALUE(FLOAT,  "Width of section used to calculate interaction curve");
    MATL191_PHI_B                           = VALUE(FLOAT,  "Factor on bending capacity");
    MATL191_PHI_B5                          = VALUE(FLOAT,  "Factor on bending capacity");
    MATL191_PHI_C                           = VALUE(FLOAT,  "Factor on compression capacity");
    MATL191_PHI_C5                          = VALUE(FLOAT,  "Factor on compression capacity");
    MATL191_PHI_T                           = VALUE(FLOAT,  "Factor on tensile capacity");
    MATL191_PHI_T5                          = VALUE(FLOAT,  "Factor on tensile capacity");
    Nu                                      = VALUE(FLOAT,  "Poissons ratio");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    MATL191_DELTA5                          = VALUE(FLOAT,  "Parameter to define yield surface");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    E                                       = 119;
    LSDYNA_SIGY                             = 152;
    LSD_LCPMS                               = 2752;
    LSD_LCPMT                               = 2753;
    LSD_TitleOpt                            = 90;
    MATL191_A                               = 1799;
    MATL191_ALPHA                           = 1795;
    MATL191_ALPHA5                          = 1821;
    MATL191_ASFLAG                          = 1785;
    MATL191_B                               = 1800;
    MATL191_BETA                            = 1796;
    MATL191_BETA5                           = 1822;
    MATL191_CS1                             = 1817;
    MATL191_CS2                             = 1818;
    MATL191_CS3                             = 1819;
    MATL191_CS4                             = 1820;
    MATL191_D                               = 1802;
    MATL191_DEGRAD                          = 1787;
    MATL191_DELTA                           = 1798;
    MATL191_FOFFS                           = 1801;
    MATL191_FTYPE                           = 1786;
    MATL191_GAMMA                           = 1797;
    MATL191_GAMMA5                          = 1823;
    MATL191_IFEMA                           = 1788;
    MATL191_LCAC                            = 1793;
    MATL191_LCAT                            = 1791;
    MATL191_PR1                             = 1809;
    MATL191_DELTA5                          = 1824;
    MATL191_PR2                             = 1810;
    MATL191_PR3                             = 1811;
    MATL191_PR4                             = 1812;
    MATL191_SFAC                            = 1794;
    MATL191_SFAT                            = 1792;
    MATL191_SFS                             = 1789;
    MATL191_SFT                             = 1790;
    MATL191_TF                              = 1804;
    MATL191_TS1                             = 1813;
    MATL191_TS2                             = 1814;
    MATL191_TS3                             = 1815;
    MATL191_TS4                             = 1816;
    MATL191_TW                              = 1805;
    MATL191_W                               = 1803;
    MATL191_PHI_B                           = 1808;
    MATL191_PHI_B5                          = 1827;
    MATL191_PHI_C                           = 1807;
    MATL191_PHI_C5                          = 1826;
    MATL191_PHI_T                           = 1806;
    MATL191_PHI_T5                          = 1825;
    Nu                                      = 120;
    Num_Comments                            = 3101;
    Rho                                     = 118;
}

CHECK(COMMON)
{

    MATL191_ALPHA                             >=1.1;
    MATL191_BETA                              >=1.1;
    MATL191_DELTA                             >=1.1;
    MATL191_GAMMA                             >=1.1;
}

DEFAULTS(COMMON)
{

    MATL191_A        = 2.0;
    MATL191_ALPHA    = 2.0;
    MATL191_B        = -1.0;
    MATL191_BETA     = 2.0;
    MATL191_DELTA    = 4.0;
    MATL191_FTYPE    = 1;
    MATL191_GAMMA    = 2.0;
    MATL191_GAMMA5   = 1.4;
    MATL191_PHI_B    = 0.9;
    MATL191_PHI_B5   = 1.0;
    MATL191_PHI_C    = 0.85;
    MATL191_PHI_C5   = 1.0;
    MATL191_PHI_T    = 0.8;
    MATL191_PHI_T5   = 1.0;
    MATL191_SFAC     = 1.0;
    MATL191_SFAT     = 1.0;
    MATL191_SFS      = 1.0;
    MATL191_SFT      = 1.0;

}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY=SCALAR(Rho);
    YOUNG_MODULUS=SCALAR(E);
    POISSON_RATIO=SCALAR(Nu);
    SCALE_FACTOR_S_N2=SCALAR(MATL191_SFS);
    SCALE_FACTOR_T_N2=SCALAR(MATL191_SFT);
    SCALE_FACTOR_ON_AXIAL_TENSILE_FORCE=SCALAR(MATL191_SFAT);
    SCALE_FACTOR_ON_AXIAL_TENSILE_FORCE=SCALAR(MATL191_SFAC);
    ALPHA=SCALAR(MATL191_ALPHA);
    BETA=SCALAR(MATL191_BETA);
    GAMMA=SCALAR(MATL191_GAMMA);
    DELTA=SCALAR(MATL191_DELTA);
    A=SCALAR(MATL191_A);
    B=SCALAR(MATL191_B);
    YIELD_STRESS_OF_MATERIAL=SCALAR(LSDYNA_SIGY);
    DEPTH_OF_SECTION=SCALAR(MATL191_D);
    WIDTH_OF_SECTION=SCALAR(MATL191_W);
    FLANGE_THICKNESS_OF_SECTION=SCALAR(MATL191_TF);
    WEB_THICKNESS=SCALAR(MATL191_TW);
public:
    //SOUND_SPEED is speed for ISDO = 0 and 1
    SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
    SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
private:
    G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_SEISMIC_BEAM");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                                        {DIMENSION="density";}
     SCALAR(E)                                          {DIMENSION="pressure";}
     SCALAR(Nu)                                         {DIMENSION="DIMENSIONLESS";}
optional:
     RADIO(MATL191_ASFLAG)
    {
        ADD(0.0, "0.0: true (log) total strain") ;
        ADD(1.0, "1.0: change in length") ;
        ADD(2.0, "2.0: nominal total strain") ;
        ADD(3.0, "3.0: FEMA plastic strain (= nominal total strain minus elastic strain)") ;
    }
     RADIO(MATL191_FTYPE)
     {
        ADD(1, "1: Parabolic code, axial load and biaxial bending");
        ADD(2, "2: Japanese code, axial force and major axis bending");
        ADD(4, "4: AISC utiliazation calculation but no yielding");
        ADD(5, "5: AS4100 utilization calculation but no yielding");
     }
     RADIO(MATL191_DEGRAD)
     {
        ADD(0, "0: Behavior as in previous versions");
        ADD(1, "1: Fatigue-type degrading moment-rotation behavior");
        ADD(2, "2: FEMA-type degrading moment-rotation behavior");
     }     
     RADIO(MATL191_IFEMA)
     {
        ADD(0, "0: No input");
        ADD(1, "1: Input of rotation thresholds only");
        ADD(2, "2: Input of rotation and axial strain thresholds");
     }     

     DATA(LSD_LCPMS);
     SCALAR(MATL191_SFS)                                {DIMENSION="DIMENSIONLESS";}
     DATA(LSD_LCPMT);
     SCALAR(MATL191_SFT)                                {DIMENSION="DIMENSIONLESS";}
     DATA(MATL191_LCAT);
     SCALAR(MATL191_SFAT)                               {DIMENSION="DIMENSIONLESS";}
     DATA(MATL191_LCAC);
     SCALAR(MATL191_SFAC)                               {DIMENSION="DIMENSIONLESS";}
     if(MATL191_FTYPE == 1)
     {
         SCALAR(MATL191_ALPHA)                          {DIMENSION="DIMENSIONLESS";}
         SCALAR(MATL191_BETA)                           {DIMENSION="DIMENSIONLESS";}
         SCALAR(MATL191_GAMMA)                          {DIMENSION="DIMENSIONLESS";}
         SCALAR(MATL191_DELTA)                          {DIMENSION="DIMENSIONLESS";}
         SCALAR(MATL191_A)                              {DIMENSION="DIMENSIONLESS";}
         SCALAR(MATL191_B)                              {DIMENSION="DIMENSIONLESS";}
         SCALAR(MATL191_FOFFS)                          {DIMENSION="force";}
     }
     if(MATL191_FTYPE == 2)
     {
         SCALAR(LSDYNA_SIGY)                            {DIMENSION="pressure";}
         SCALAR(MATL191_D)                              {DIMENSION="l";}
         SCALAR(MATL191_W)                              {DIMENSION="l";}
         SCALAR(MATL191_TF)                             {DIMENSION="l";}
         SCALAR(MATL191_TW)                             {DIMENSION="l";}
     }
     if (MATL191_FTYPE == 4)
     {
        SCALAR(MATL191_PHI_T);
        SCALAR(MATL191_PHI_C);
        SCALAR(MATL191_PHI_B);
     }
     if (MATL191_FTYPE == 4)
     {
        SCALAR(MATL191_ALPHA5);
        SCALAR(MATL191_BETA5);
        SCALAR(MATL191_GAMMA5);
        SCALAR(MATL191_DELTA5);
        SCALAR(MATL191_PHI_T5);
        SCALAR(MATL191_PHI_C5);
        SCALAR(MATL191_PHI_B5);
     }
     if(MATL191_IFEMA > 0)
     {
         SCALAR(MATL191_PR1)                            {DIMENSION="DIMENSIONLESS";}
         SCALAR(MATL191_PR2)                            {DIMENSION="DIMENSIONLESS";}
         SCALAR(MATL191_PR3)                            {DIMENSION="DIMENSIONLESS";}
         SCALAR(MATL191_PR4)                            {DIMENSION="DIMENSIONLESS";}
     }
     if(MATL191_IFEMA == 2)
     {
         SCALAR(MATL191_TS1)                            {DIMENSION="DIMENSIONLESS";}
         SCALAR(MATL191_TS2)                            {DIMENSION="DIMENSIONLESS";}
         SCALAR(MATL191_TS3)                            {DIMENSION="DIMENSIONLESS";}
         SCALAR(MATL191_TS4)                            {DIMENSION="DIMENSIONLESS";}
         SCALAR(MATL191_CS1)                            {DIMENSION="DIMENSIONLESS";}
         SCALAR(MATL191_CS2)                            {DIMENSION="DIMENSIONLESS";}
         SCALAR(MATL191_CS3)                            {DIMENSION="DIMENSIONLESS";}
         SCALAR(MATL191_CS4)                            {DIMENSION="DIMENSIONLESS";}
     }
/*
    graphical SUPPORT("Part(s) to which material is applied")
    {
        OBJECTS=(/COMPONENT/BEAM);
        ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    //
    COMMENT("$      MID       RHO         E        PR    ASFLAG     FTYPE    DEGRAD     IFEMA");
    CARD("%10d%10lg%10lg%10lg%10lg%10d%10d%10d",_ID_,Rho,E,Nu,MATL191_ASFLAG,MATL191_FTYPE,MATL191_DEGRAD,MATL191_IFEMA);
    //    
    COMMENT("$    LCPMS       SFS     LCPMT       SFT      LCAT      SFAT      LCAC      SFAC");
    CARD("%10d%10lg%10d%10lg%10d%10lg%10d%10lg",LSD_LCPMS,MATL191_SFS,LSD_LCPMT,MATL191_SFT,MATL191_LCAT,MATL191_SFAT,MATL191_LCAC,MATL191_SFAC);
    //
    if(MATL191_FTYPE == 1)
    {
      //
      COMMENT("$    ALPHA      BETA     GAMMA     DELTA         A         B     FOFFS");
      CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg",MATL191_ALPHA,MATL191_BETA,MATL191_GAMMA,MATL191_DELTA,MATL191_A,MATL191_B,MATL191_FOFFS);
      //
    }
    //
    if(MATL191_FTYPE == 2)
    {
      //
      COMMENT("$     SIGY         D         W        TF        TW");
      CARD("%10lg%10lg%10lg%10lg%10lg",LSDYNA_SIGY,MATL191_D,MATL191_W,MATL191_TF,MATL191_TW);
      //
    }
    if(MATL191_FTYPE==4)
    {
      COMMENT("$    PHI_T     PHI_C     PHI_B");
      CARD("%10lg%10lg%10lg",MATL191_PHI_T,MATL191_PHI_C,MATL191_PHI_B);
    }
    if(MATL191_FTYPE==5)
    {
      COMMENT("$    ALPHA      BETA     GAMMA     DELTA     PHI_T     PHI_C     PHI_B");
      CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg",MATL191_ALPHA5,MATL191_BETA5, MATL191_GAMMA5, MATL191_DELTA5, MATL191_PHI_T5,MATL191_PHI_C5,MATL191_PHI_B5);
    }
    if(MATL191_IFEMA > 0)
    {
      //
      COMMENT("$      PR1       PR2       PR3       PR4");
      CARD("%10lg%10lg%10lg%10lg",MATL191_PR1,MATL191_PR2,MATL191_PR3,MATL191_PR4);
      //
    }
    //
    if(MATL191_IFEMA == 2)
    {
      //
      COMMENT("$      TS1       TS2       TS3       TS4       CS1       CS2       CS3       CS4");
      CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",MATL191_TS1,MATL191_TS2,MATL191_TS3,MATL191_TS4,MATL191_CS1,MATL191_CS2,MATL191_CS3,MATL191_CS4);
      //
    }
    //

}
