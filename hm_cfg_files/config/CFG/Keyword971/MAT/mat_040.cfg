//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 040
// 


 ATTRIBUTES(COMMON) 
 
 {
  
  // Initial and reference densities
  KEYWORD_STR                       = VALUE(STRING, "Solver Keyword");
  LSD_TitleOpt                      = VALUE(INT, "Title");
  CommentEnumField                  = VALUE(INT, "User Comments");
  Num_Comments                      = SIZE("No. of comment lines");
  Comments                          = ARRAY[Num_Comments](STRING, "Entity Comments");
  Rho                               = VALUE(FLOAT, "Mass Density");  
  LSDYNA_EA                         = VALUE(FLOAT, "EA Young’s modulus");
  LSDYNA_EB                         = VALUE(FLOAT, "EB Young’s modulus");
  LSDYNA_EC                         = VALUE(FLOAT, "EC Young’s modulus");
  LSDYNA_PRBA                       = VALUE(FLOAT, "Poisson’s ratio BA");
  LSDYNA_PRCA                       = VALUE(FLOAT, "Poisson’s ratio CA");
  LSDYNA_PRCB                       = VALUE(FLOAT, "Poisson’s ratio CB");
  LSDYNA_GAB                        = VALUE(FLOAT, "shear modulus AB");
  LSDYNA_GBC                        = VALUE(FLOAT, "shear modulus BC");
  LSDYNA_GCA                        = VALUE(FLOAT, "shear modulus CA");
  LSD_MAT100_DT                     = VALUE(FLOAT, "Temperature increment for isotropic stress initialization");
  LSD_MAT73_TRAMP                   = VALUE(FLOAT, "Time to ramp up to the final temperature.");
  LSD_ALPHA                         = VALUE(FLOAT, "Thermal expansion coefficient");
  LSD_LCID                          = VALUE(FUNCT, "Optional load curve ID defining the nominal stress versus strain");
  LSD_LCID2                         = VALUE(FUNCT, "Optional load curve ID defining the nominal stress versus strain");
  LSD_MAT100_EFAIL                  = VALUE(FLOAT, "Failure strain");
  LSD_MAT100_TFAIL                  = VALUE(FLOAT, "Time step for automatic element erosion");
  LSD_DAMP                          = VALUE(FLOAT, "Damping coefficient");
  axisOptFlag                       = VALUE(INT, "Anisotropy axis definition");
  LSD_SYSTEM                        = VALUE(SYSTEM, "Material axes option");
  LSD_MAT142_MACF                   = VALUE(INT, "Material axes change flag");
  LSD_NODE1                         = VALUE(NODE, "Node");
  LSDYNA_XP                         = VALUE(FLOAT, "Define coordinates of point p");
  LSDYNA_YP                         = VALUE(FLOAT, "Define coordinates of point p");
  LSDYNA_ZP                         = VALUE(FLOAT, "Define coordinates of point p");
  LSD_NODE3                         = VALUE(NODE, "Node1");
  LSD_NODE4                         = VALUE(NODE, "Node2");
  LSDYNA_A1                         = VALUE(FLOAT, "Define components of vector a");
  LSDYNA_A2                         = VALUE(FLOAT, "Define components of vector a");
  LSDYNA_A3                         = VALUE(FLOAT, "Define components of vector a");
  LSD_NODE7                         = VALUE(NODE, "Node1");
  LSD_NODE8                         = VALUE(NODE, "Node2");
  LSDYNA_D1                         = VALUE(FLOAT, "Define components of vector d");
  LSDYNA_D2                         = VALUE(FLOAT, "Define components of vector d");
  LSDYNA_D3                         = VALUE(FLOAT, "Define components of vector d");   
  LSD_NODE5                         = VALUE(NODE, "Node1");
  LSD_NODE6                         = VALUE(NODE, "Node2");
  LSDYNA_V1                         = VALUE(FLOAT, "Define components of vector v");
  LSDYNA_V2                         = VALUE(FLOAT, "Define components of vector v");
  LSDYNA_V3                         = VALUE(FLOAT, "Define components of vector v");
  LSD_MAT_BETA                      = VALUE(FLOAT, "Material angle in degrees");
  LSD_LCID3                         = VALUE(FUNCT, "Load curve ID defining the nominal ab shear stress versus strain");
  LSD_LCID4                         = VALUE(FUNCT, "Load curve ID defining the nominal ab shear stress versus strain");
  LSD_LCID5                         = VALUE(FUNCT, "Load curve ID defining the nominal ab shear stress versus strain");
  LSD_LCID6                         = VALUE(FUNCT, "Load curve ID defining the nominal ab shear stress versus strain");
  AOPT_SKEW_FLAG                    = VALUE(INT,  "Flag for defining coordinate system ID number");
  LOC_AOPT                          = VALUE(FLOAT, "");
  IO_FLAG                           = VALUE(INT, "io flag");
  //empty_string                 = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)

{

  KEYWORD_STR                       = 9000;
  CommentEnumField                  = 3220;
  Num_Comments                      = 3101;
  LSD_TitleOpt                      = 90;
  Comments                          = 3100;
  Rho                               = 118;
  LSDYNA_EA                         = 126;
  LSDYNA_EB                         = 127;
  LSDYNA_EC                         = 128;
  LSDYNA_PRBA                       = 129;
  LSDYNA_PRCA                       = 130;
  LSDYNA_PRCB                       = 131;
  LSDYNA_GAB                        = 132;
  LSDYNA_GBC                        = 133;
  LSDYNA_GCA                        = 134;
  LSD_MAT100_DT                     = 2531;
  LSD_MAT73_TRAMP                   = 2519;
  LSD_ALPHA                         = 1651;
  LSD_LCID                          = 45;
  LSD_LCID2                         = 168;
  LSD_MAT100_EFAIL                  = 2532;
  LSD_MAT100_TFAIL                  = 3235;
  LSD_DAMP                          = 3213;
  axisOptFlag                       = 4946;
  LSD_SYSTEM                        = 184;
  LSD_MAT142_MACF                   = 1045;
  LSD_NODE1                         = 86;
  LSDYNA_XP                         = 136;
  LSDYNA_YP                         = 137;
  LSDYNA_ZP                         = 138;  
  LSD_NODE3                         = 2802;
  LSD_NODE4                         = 2803;
  LSDYNA_A1                         = 139;
  LSDYNA_A2                         = 140;
  LSDYNA_A3                         = 141;
  LSD_NODE5                         = 5078;
  LSD_NODE6                         = 5079;
  LSDYNA_V1                         = 142;
  LSDYNA_V2                         = 143;
  LSDYNA_V3                         = 144;
  LSD_NODE7                         = 5080;
  LSD_NODE8                         = 5081;
  LSDYNA_D1                         = 145;
  LSDYNA_D2                         = 146;
  LSDYNA_D3                         = 147; 
  LSD_MAT_BETA                      = 306;
  LSD_LCID3                         = 170;
  LSD_LCID4                         = 171;
  LSD_LCID5                         = 172;
  LSD_LCID6                         = 199;
  AOPT_SKEW_FLAG                    = -1;
  LOC_AOPT                          = -1;
  IO_FLAG                           = -1;
  //empty_string                 = -1;
}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  YOUNG_MODULUS_A=SCALAR(LSDYNA_EA);
  YOUNG_MODULUS_B=SCALAR(LSDYNA_EB);
  YOUNG_MODULUS_C=SCALAR(LSDYNA_EC);
  POISSON_RATIO_BA=SCALAR(LSDYNA_PRBA);
  POISSON_RATIO_CA=SCALAR(LSDYNA_PRCA);
  POISSON_RATIO_CB=SCALAR(LSDYNA_PRCB);
  SHEAR_MODULUS_AB=SCALAR(LSDYNA_GAB);
  SHEAR_MODULUS_BC=SCALAR(LSDYNA_GBC);
  SHEAR_MODULUS_CA=SCALAR(LSDYNA_GCA);
  TEMPERATURE_INCREMENT=SCALAR(LSD_MAT100_DT);
  TIME_TO_RAMP=SCALAR(LSD_MAT73_TRAMP);
  THERMAL_EXPANSION_COEFFICIENT=SCALAR(LSD_ALPHA);
  FAILURE_STRAIN=SCALAR(LSD_MAT100_EFAIL);
  TIME_STEP=SCALAR(LSD_MAT100_TFAIL);
  DAMPING_COEFFICIENT=SCALAR(LSD_DAMP);
  MATERIAL_AXES_OPTION=SCALAR(axisOptFlag);
  MATERIAL_ANGLE=SCALAR(LSD_MAT_BETA);
  YOUNG_MODULUS = MAX(YOUNG_MODULUS_A,YOUNG_MODULUS_B,YOUNG_MODULUS_C);
  POISSON_RATIO = MAX(POISSON_RATIO_BA,POISSON_RATIO_CA,POISSON_RATIO_CB);
  SHEAR_MODULUS = MAX(SHEAR_MODULUS_AB,SHEAR_MODULUS_BC,SHEAR_MODULUS_CA);
  
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
   C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+C1)/MASS_DENSITY)^0.5);

}

GUI(COMMON) 
{

     ASSIGN(KEYWORD_STR, "*MAT_NONLINEAR_ORTHOTROPIC");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
       {
             ASSIGN(KEYWORD_STR, "_TITLE");
       } 
 mandatory:
     SCALAR(Rho)                        { DIMENSION="density";}
     SCALAR(LSDYNA_EA)                   {DIMENSION="pressure";}
     SCALAR(LSDYNA_EB)                   {DIMENSION="pressure";}
     SCALAR(LSDYNA_EC)                   {DIMENSION="pressure";}
 optional:
     SCALAR(LSDYNA_PRBA)                 {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_PRCA)                 {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_PRCB)                 {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_GAB)                  {DIMENSION="pressure";}
     SCALAR(LSDYNA_GBC)                  {DIMENSION="pressure";}
     SCALAR(LSDYNA_GCA)                  {DIMENSION="pressure";}
     SCALAR(LSD_MAT100_DT)               {DIMENSION="k";}
     SCALAR(LSD_MAT73_TRAMP)             {DIMENSION="t";}
     SCALAR(LSD_ALPHA)                   {DIMENSION="coefficient_of_linear_inflation";}
     FUNCTION(LSD_LCID)
     {
       X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
       Y_TITLE = "Stress"; Y_DIMENSION = "pressure";
     }
     FUNCTION(LSD_LCID2)
     {
       X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
       Y_TITLE = "Stress"; Y_DIMENSION = "pressure";
     }
     SCALAR(LSD_MAT100_EFAIL)            {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT100_TFAIL)            {DIMENSION="t";}
     SCALAR(LSD_DAMP)                    {DIMENSION="DIMENSIONLESS";}
     RADIO(axisOptFlag)
     {
        ADD(1, "0.0");
        ADD(2, "1.0");
        ADD(3, "2.0");
        ADD(4, "3.0");
        ADD(5, "4.0");
        ADD(6, "Pick System");
     }
     if(axisOptFlag == 6)
     {
        DATA(LSD_SYSTEM);
     }
     RADIO(LSD_MAT142_MACF)
     {
        ADD(1, "1: No change (default)");
        ADD(2, "2: Switch material axes a and b");
        ADD(3, "3: Switch material axes a and c");
        ADD(4, "4: Switch material axes b and c");
     }
     if(axisOptFlag == 2 || axisOptFlag == 5)
     {
        DATA(LSD_NODE1);
        SCALAR(LSDYNA_XP)               {DIMENSION="l";}
        SCALAR(LSDYNA_YP)               {DIMENSION="l";}
        SCALAR(LSDYNA_ZP)               {DIMENSION="l";}  
        
     }
     if(axisOptFlag == 3)
     {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],FALSE);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],FALSE);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],FALSE);
        DATA(LSD_NODE7);                
        DATA(LSD_NODE8);                
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],FALSE);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],FALSE);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],FALSE); 

     }

     if(axisOptFlag == 4 || axisOptFlag == 5)
     {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],FALSE);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],FALSE);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],FALSE);
     }
     if(axisOptFlag == 1 || axisOptFlag == 4)
     {
        SCALAR(LSD_MAT_BETA)            {DIMENSION="a";}
     }    
     FUNCTION(LSD_LCID3)
     {
       X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
       Y_TITLE = "Stress"; Y_DIMENSION = "pressure";
     }
     FUNCTION(LSD_LCID4)
     {
       X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
       Y_TITLE = "Stress"; Y_DIMENSION = "pressure";
     }
     FUNCTION(LSD_LCID5)
     {
       X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
       Y_TITLE = "Stress"; Y_DIMENSION = "pressure";
     }
     FUNCTION(LSD_LCID6)
     {
       X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
       Y_TITLE = "Stress"; Y_DIMENSION = "pressure";
     }
/*
     optional:
      graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/SHELL);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);

    //
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE8 != NONE && LSD_NODE7 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    //
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 5 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,4.0,EXPORT);
    }

    //
    COMMENT("$      MID       RHO        EA        EB        EC      PRBA      PRCA      PRCB");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSDYNA_EA,LSDYNA_EB,LSDYNA_EC,LSDYNA_PRBA,LSDYNA_PRCA,LSDYNA_PRCB);
    //
    COMMENT("$      GAB       GBC       GCA        DT     TRAMP     ALPHA");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,LSD_MAT100_DT,LSD_MAT73_TRAMP,LSD_ALPHA);
    //
    COMMENT("$    LCIDA     LCIDB     EFAIL    DTFAIL     CDAMP      AOPT      MACF");
    if(IO_FLAG == 2)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 6)
        {
             CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d",LSD_LCID,LSD_LCID2,LSD_MAT100_EFAIL,LSD_MAT100_TFAIL,LSD_DAMP,LOC_AOPT,LSD_MAT142_MACF);
        }
        else
        {
             CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d",LSD_LCID,LSD_LCID2,LSD_MAT100_EFAIL,LSD_MAT100_TFAIL,LSD_DAMP,SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,LOC_AOPT,LSD_SYSTEM),LSD_MAT142_MACF); 
        }
    }
    CARD_PREREAD("%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,4,IMPORT);
    }
    else if(LOC_AOPT == 4.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,5,IMPORT);
    }

    if(IO_FLAG == 1)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 6)
        {
             CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d",LSD_LCID,LSD_LCID2,LSD_MAT100_EFAIL,LSD_MAT100_TFAIL,LSD_DAMP,LOC_AOPT,LSD_MAT142_MACF);
        }
        else
        {
             CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d",LSD_LCID,LSD_LCID2,LSD_MAT100_EFAIL,LSD_MAT100_TFAIL,LSD_DAMP,SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM),LSD_MAT142_MACF); 
             ASSIGN(axisOptFlag, 6, IMPORT);
        }
    }
    //
    COMMENT("$       XP        YP        ZP        A1        A2        A3");
    if(axisOptFlag == 2 || axisOptFlag == 5)
    {
        CARD("%10lg%10lg%10lg",LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP);
    }
    else if(axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
    }
    else
    {
        BLANK;
    }
    //
    COMMENT("$       V1        V2        V3        D1        D2        D3      BETA");
    if(axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
    }
    else if(axisOptFlag == 4 || axisOptFlag == 5)
    {
        CARD("%10lg%10lg%10lg%10s%10s%10s%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,LSD_MAT_BETA);
    }
    else if(axisOptFlag == 1)
    {
        CARD("%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_MAT_BETA);
    }
    else
    {
        BLANK;
    }
    //
    COMMENT("$    LCIDC    LCIDAB    LCIDBC    LCIDCA");
    CARD("%10lg%10lg%10lg%10lg",LSD_LCID3,LSD_LCID4,LSD_LCID5,LSD_LCID6);
    //

}