//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 190
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    E                                       = VALUE(FLOAT,  "Youngs modulus,");
    LSDYNA_A1                               = VALUE(FLOAT,  "Components of vector a");
    LSDYNA_A2                               = VALUE(FLOAT,  "Components of vector a");
    LSDYNA_A3                               = VALUE(FLOAT,  "Components of vector a");
    LSDYNA_BETA                             = VALUE(FLOAT,  "Material angle in degrees");
    LSDYNA_D1                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D2                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D3                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_ETAN                             = VALUE(FLOAT,  "Material parameter");
    LSDYNA_SIGY                             = VALUE(FLOAT,  "Material parameter");
    LSDYNA_V1                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V2                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V3                               = VALUE(FLOAT,  "Components of vector v");
    LSD_E0                                  = VALUE(FLOAT,  "Material parameter");
    LSD_ITER                                = VALUE(FLOAT,  "Iteration flag for speed");
    LSD_LCID                                = VALUE(FUNCT,  "load curve ID for the load curve hardening rule");
    LSD_LCID2                               = VALUE(FUNCT,  "Load curve ID defining the Forming Limit Diagram");
    LSD_MAT_C                               = VALUE(FLOAT,  "C in Cowper-Symonds strain rate model");
    LSD_MAT_FLDNIPF                         = VALUE(INT,  "Numerical integration points failure treatment");
    LSD_MAT_FLDSAFE                         = VALUE(FLOAT,  "A safety offset of the forming limit curve");
    LSD_MAT_M                               = VALUE(FLOAT,  "exponent in Barlats yield surface");
    LSD_MAT_RN                              = VALUE(FLOAT,  "Hardening exponent equivalent to the n-value in a power law hardening law");
    LSD_MAT_RT                              = VALUE(FLOAT,  "Sheet thickness used for calculating a forming limit curve");
    LSD_MAT_SRP                             = VALUE(FLOAT,  "P in Cowper-Symonds strain rate model");
    LSD_NODE1                               = VALUE(NODE,  "Node1");
    LSD_NODE2                               = VALUE(NODE,  "Node2");
    LSD_NODE3                               = VALUE(NODE,  "Node1");
    LSD_NODE4                               = VALUE(NODE,  "Node2");
    LSD_NODE5                               = VALUE(NODE,  "Node1");
    LSD_NODE6                               = VALUE(NODE,  "Node2");
    LSD_P1                                  = VALUE(FLOAT,  "Material parameter:");
    LSD_P2                                  = VALUE(FLOAT,  "Material parameter:");
    LSD_P3                                  = VALUE(FLOAT,  "Material parameter:");
    LSD_R00                                 = VALUE(FLOAT,  "Lankford parameter");
    LSD_R45                                 = VALUE(FLOAT,  "Lankford parameter");
    LSD_R90                                 = VALUE(FLOAT,  "Lankford parameter");
    LSD_SPI                                 = VALUE(FLOAT,  "To calculate E0");
    LSD_SYSTEM                              = VALUE(SYSTEM,  "coordinate system ID number");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    Nu                                      = VALUE(FLOAT,  "Poissons ratio");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    axisOptFlag                             = VALUE(INT,  "Anisotropy axis definition");
    LSD_HR                                  = VALUE(FLOAT,  "Hardening law");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    IO_FLAG                                 = VALUE(INT, "io flag");
    _HMCOMMENTSFLAG                         = VALUE(INT, "Write HM Comments");
    TITLE                                   = VALUE(STRING, "Title");
    EncTypeEnumField                        = VALUE(INT,  "Type");
    RegTypeEnumField                        = VALUE(INT,  "Type");
    LOC_AOPT                                = VALUE(FLOAT, "");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    E                                       = 119;
    LSDYNA_A1                               = 139;
    LSDYNA_A2                               = 140;
    LSDYNA_A3                               = 141;
    LSDYNA_BETA                             = 148;
    LSDYNA_D1                               = 145;
    LSDYNA_D2                               = 146;
    LSDYNA_D3                               = 147;
    LSDYNA_ETAN                             = 153;
    LSDYNA_SIGY                             = 152;
    LSDYNA_V1                               = 142;
    LSDYNA_V2                               = 143;
    LSDYNA_V3                               = 144;
    LSD_E0                                  = 1507;
    LSD_ITER                                = 4788;
    LSD_LCID                                = 45;
    LSD_LCID2                               = 168;
    LSD_MAT_C                               = 313;
    LSD_MAT_FLDNIPF                         = 4968;
    LSD_MAT_FLDSAFE                         = 4967;
    LSD_MAT_M                               = 314;
    LSD_MAT_RN                              = 4965;
    LSD_MAT_RT                              = 4966;
    LSD_MAT_SRP                             = 1174;
    LSD_NODE1                               = 86;
    LSD_NODE2                               = 87;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_P1                                  = 5046;
    LSD_P2                                  = 5047;
    LSD_P3                                  = 810;
    LSD_R00                                 = 5048;
    LSD_R45                                 = 5049;
    LSD_R90                                 = 5050;
    LSD_SPI                                 = 5051;
    LSD_SYSTEM                              = 184;
    LSD_TitleOpt                            = 90;
    Nu                                      = 120;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    axisOptFlag                             = 4946;
    LSD_HR                                  = 5045;
    AOPT_SKEW_FLAG                          = -1;
    TITLE                                   = -1;
    LOC_AOPT                                = -1;
    IO_FLAG                                 = -1;
    //empty_string                       = -1;
}

DRAWABLES(COMMON)
{
 public:
  MASS_DENSITY   = SCALAR(Rho);
  YOUNG_MODULUS     = SCALAR(E);
  POISSON_RATIO     = SCALAR(Nu);
 public:
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

DEFAULTS(COMMON)
{

    LSD_E0    = 0.0;

}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_FLD_3-PARAMETER_BARLAT");
     RADIO(CommentEnumField)
     {
         ////ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     }
 mandatory:
     SCALAR(Rho)                                        {DIMENSION="density";}
     SCALAR(E)                                          {DIMENSION="pressure";}
 optional:    
     SCALAR(Nu)                                         {DIMENSION="DIMENSIONLESS";}
 mandatory:
     RADIO(LSD_HR)
     {
        ADD(1.0, "Linear");
        ADD(2.0, "Swift exponential");
        ADD(3.0, "By load curve");
        ADD(4.0, "Voice exponential");
        ADD(5.0, "Gosh exponential");
        ADD(6.0, "Hocket-Sherby exponential");
     }
     if(LSD_HR != 2.0 && LSD_HR != 3.0)
     {
         SCALAR(LSDYNA_ETAN)                            {DIMENSION="pressure";}
         SCALAR(LSDYNA_SIGY)                            {DIMENSION="pressure";}
     }
     if(LSD_HR == 2.0)
     {
 mandatory:
         SCALAR(LSD_P1)                                 {DIMENSION="pressure";}
         SCALAR(LSD_P2)                                 {DIMENSION="pressure";}
     }
 optional:
     SCALAR(LSD_ITER)                                   {DIMENSION="DIMENSIONLESS";}
 mandatory:
     SCALAR(LSD_MAT_M)                                  {DIMENSION="DIMENSIONLESS";}
 optional:    
     SCALAR(LSD_R00)                                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_R45)                                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_R90)                                    {DIMENSION="DIMENSIONLESS";}
     if(LSD_HR == 3.0)
     {
         DATA(LSD_LCID);
     }
     if(LSD_HR != 1.0 && LSD_HR != 3.0)
     {
         SCALAR(LSD_E0)                                 {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_SPI)                                {DIMENSION="DIMENSIONLESS";}
     }
     if(LSD_HR == 5.0 || LSD_HR == 6.0)
     {
         SCALAR(LSD_P3)                                 {DIMENSION="pressure";}
     }
     RADIO(axisOptFlag)
     {
          ADD(1, "By element nodes");
          ADD(2, "Define global vector");
          ADD(3, "Define local vector");
          ADD(4, "Pick system");
     }
     if(axisOptFlag == 4)
     {
        DATA(LSD_SYSTEM);
     }
     SCALAR(LSD_MAT_C)                                  {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_SRP)                                {DIMENSION="DIMENSIONLESS";}
     DATA(LSD_LCID2);
     if(LSD_LCID2 == NONE)
     {
     SCALAR(LSD_MAT_RN);
     SCALAR(LSD_MAT_RT)                                 {DIMENSION="l";}
        
     }
     SCALAR(LSD_MAT_FLDSAFE)                            {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_FLDNIPF)                            {DIMENSION="DIMENSIONLESS";}
     if(axisOptFlag == 2)
     {
        DATA(LSD_NODE1);
        DATA(LSD_NODE2);
     }
     if(axisOptFlag == 2 && LSD_NODE1 != NONE && LSD_NODE2 != NONE)
     {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE2,x) - @getentityvalue(nodes,$LSD_NODE1,x)],FALSE);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE2,y) - @getentityvalue(nodes,$LSD_NODE1,y)],FALSE);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE2,z) - @getentityvalue(nodes,$LSD_NODE1,z)],FALSE);
        //SCALAR(LSDYNA_A1)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_A2)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_A3)               {DIMENSION="DIMENSIONLESS";}
     }
     if(axisOptFlag == 2)
     {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
     }
     if(axisOptFlag == 2 && LSD_NODE5 != NONE && LSD_NODE6 != NONE)
     {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],FALSE);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],FALSE);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],FALSE);
        //SCALAR(LSDYNA_D1)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_D2)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_D3)               {DIMENSION="DIMENSIONLESS";}
     }
     if(axisOptFlag == 3)
     {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],FALSE);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],FALSE);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],FALSE);
        //SCALAR(LSDYNA_V1)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_V2)               {DIMENSION="DIMENSIONLESS";}
        //SCALAR(LSDYNA_V3)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_BETA)             {DIMENSION="a";}
     }     
/*
        graphical SUPPORT("Part(s) to which material is applied") {
     OBJECTS=(/COMPONENT/SHELL);
       ADD(COMPONENT,"Parts");
}
*/
}

// File format
FORMAT(Keyword971) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);
    //
    if(LSD_NODE1 != NONE && LSD_NODE2 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE2,x) - @getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE2,y) - @getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE2,z) - @getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    //
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    //
    CARD_PREREAD("%10d%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,LSD_HR);
    if(LSD_HR == 1.0)
    {
        COMMENT("$      MID        RO         E        PR        HR        P1        P2      ITER");
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,LSD_HR,LSDYNA_ETAN,LSDYNA_SIGY,LSD_ITER);
        //
    }
    else if(LSD_HR == 3.0)
    {
        COMMENT("$      MID        RO         E        PR        HR        P1        P2      ITER");
        CARD("%10d%10lg%10lg%10lg%10lg%10s%10s%10lg",_ID_,Rho,E,Nu,LSD_HR,_BLANK_,_BLANK_,LSD_ITER);
        //
    }
    else
    {
        COMMENT("$      MID        RO         E        PR        HR        P1        P2      ITER");
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,LSD_HR,LSD_P1,LSD_P2,LSD_ITER);
        //
    }
    //
    COMMENT("$        M       R00       R45       R90      LCID        E0       SPI        P3");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_M,LSD_R00,LSD_R45,LSD_R90,LSD_LCID,LSD_E0,LSD_SPI,LSD_P3);
    //
    COMMENT("$     AOPT         C         P    FLDCID        RN        RT   FLDSAFE   FLDNIPF");
    if(IO_FLAG == 2)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 4)
        {
              CARD("%10lg%10lg%10lg%10d%10lg%10lg%10lg%10d",LOC_AOPT,LSD_MAT_C,LSD_MAT_SRP,LSD_LCID2,LSD_MAT_RN,LSD_MAT_RT,LSD_MAT_FLDSAFE,LSD_MAT_FLDNIPF);
        }
        else
        {
              CARD("%10lg%10lg%10lg%10d%10lg%10lg%10lg%10d",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM),LSD_MAT_C,LSD_MAT_SRP,LSD_LCID2,LSD_MAT_RN,LSD_MAT_RT,LSD_MAT_FLDSAFE,LSD_MAT_FLDNIPF);
        }
    }
    CARD_PREREAD("%10lg",LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    if(IO_FLAG == 1)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 4)
        {
              CARD("%10lg%10lg%10lg%10d%10lg%10lg%10lg%10d",LOC_AOPT,LSD_MAT_C,LSD_MAT_SRP,LSD_LCID2,LSD_MAT_RN,LSD_MAT_RT,LSD_MAT_FLDSAFE,LSD_MAT_FLDNIPF);
        }
        else
        {
              CARD("%10lg%10lg%10lg%10d%10lg%10lg%10lg%10d",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM),LSD_MAT_C,LSD_MAT_SRP,LSD_LCID2,LSD_MAT_RN,LSD_MAT_RT,LSD_MAT_FLDSAFE,LSD_MAT_FLDNIPF);
              ASSIGN(axisOptFlag, 4, IMPORT);
        }
    }
    //
    COMMENT("$                                     A1        A2        A3");
    if(axisOptFlag == 2)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
    }
    else
    {
        BLANK;
    }
    COMMENT("$       V1        V2        V3        D1        D2        D3      BETA");
    if(axisOptFlag == 2)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
        //
    }
    else if(axisOptFlag == 3)
    {
        CARD("%10lg%10lg%10lg%10s%10s%10s%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,LSDYNA_BETA);
    }
    else
    {
        BLANK;
    }
}
