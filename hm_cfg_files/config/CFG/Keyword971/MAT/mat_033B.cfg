//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 033B
// 

ATTRIBUTES(COMMON)
{
    // Initial and reference densities
    KEYWORD_STR                       = VALUE(STRING, "Solver Keyword");
    LSD_TitleOpt                      = VALUE(INT, "Title");
    CommentEnumField                  = VALUE(INT, "User Comments");
    Num_Comments                      = SIZE("No. of comment lines");
    Comments                          = ARRAY[Num_Comments](STRING, "Entity Comments");
    Rho                               = VALUE(FLOAT, "Mass density");  
    E                                 = VALUE(FLOAT, "Youngs modulus");
    Nu                                = VALUE(FLOAT, "Poissons ratio");
    LSDYNA_K                          = VALUE(FLOAT, "strength coefficient");
    LSD_E0                            = VALUE(FLOAT, "strain corresponding to the initial yield");
    LSDYNA_N                          = VALUE(FLOAT, "hardening exponent for yield strength");
    LSDYNA_M                          = VALUE(FLOAT, "exponent for strain rate effects");
    LSD_ESRO                          = VALUE(FLOAT, "powerlaw rate sensitivity");
    LSD_HARD                          = VALUE(FLOAT, "Hardening option");
    hardeningOptFlag                  = VALUE(INT, "LCID_hardeningOpt");
    LSD_LCID                          = VALUE(FUNCT, "Hardening option");
    LSD_A                             = VALUE(FLOAT, "Flow potential exponent");    
    LSD_MAT_C1                        = VALUE(FLOAT, "C1");
    LSD_MAT_C2                        = VALUE(FLOAT, "C2");
    LSD_MAT_C3                        = VALUE(FLOAT, "C3");
    LSD_MAT_C4                        = VALUE(FLOAT, "C4");
    LSD_AX                            = VALUE(FLOAT, "AX");
    LSD_AY                            = VALUE(FLOAT, "AY");
    LSD_AZ                            = VALUE(FLOAT, "AZ");
    LSD_AZ1                           = VALUE(FLOAT, "AZ1");
    axisOptFlag                       = VALUE(INT, "Material axes option");
    LSD_SYSTEM                        = VALUE(SYSTEM, "coordinate system ID");
    LSDYNA_A1                         = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A2                       = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A3                       = VALUE(FLOAT, "Components of vector a");
    LSDYNA_D1                       = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D2                       = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D3                       = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_V1                       = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V2                       = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V3                       = VALUE(FLOAT,  "Components of vector v");
    LSD_NODE3                       = VALUE(NODE, "Node1");
    LSD_NODE4                       = VALUE(NODE, "Node2");
    LSD_NODE7                       = VALUE(NODE, "Node1");
    LSD_NODE8                       = VALUE(NODE, "Node2");
    LSD_NODE5                       = VALUE(NODE, "Node1");
    LSD_NODE6                       = VALUE(NODE, "Node2");
    LSD_OFFANG                      = VALUE(FLOAT, "Material angle in degrees");
    AOPT_SKEW_FLAG                  = VALUE(INT,  "Flag for defining coordinate system ID number");
    IO_FLAG                         = VALUE(INT, "io flag");
    _HMCOMMENTSFLAG                 = VALUE(INT, "Write HM Comments");
    TITLE                           = VALUE(STRING, "Title");
    LOC_AOPT                        = VALUE(FLOAT, "");
    //empty_string               = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                   = 9000;
    CommentEnumField              = 3220;
    Num_Comments                  = 3101;
    LSD_TitleOpt                  = 90;
    Comments                      = 3100;
    Rho                           = 118;
    E                             = 119;
    Nu                            = 120;
    LSDYNA_K                      = 124;
    LSD_E0                        = 1507;
    LSDYNA_N                      = 71;
    LSDYNA_M                      = 72;  
    LSD_ESRO                      = 5213;
    LSD_HARD                      = 5214;
    hardeningOptFlag              = 5285;
    LSD_LCID                      = 45;
    LSD_A                         = 718;
    LSD_MAT_C1                    = 1139;
    LSD_MAT_C2                    = 1140;
    LSD_MAT_C3                    = 1136;
    LSD_MAT_C4                    = 5215; 
    LSD_AX                        = 3075;
    LSD_AY                        = 3076;
    LSD_AZ                        = 3077;
    LSD_AZ1                       = 5216;
    axisOptFlag                   = 4946;
    LSD_SYSTEM                    = 184;
    LSDYNA_A1                     = 139;
    LSDYNA_A2                     = 140;
    LSDYNA_A3                     = 141;
    LSDYNA_V1                     = 142;
    LSDYNA_V2                     = 143;
    LSDYNA_V3                     = 144;
    LSDYNA_D1                     = 145;
    LSDYNA_D2                     = 146;
    LSDYNA_D3                     = 147;
    LSD_NODE3                     = 2802;
    LSD_NODE4                     = 2803;
    LSD_NODE5                     = 5078;
    LSD_NODE6                     = 5079;
    LSD_NODE7                     = 5080;
    LSD_NODE8                     = 5081;
    LSD_OFFANG                    = 5217;
    AOPT_SKEW_FLAG                = -1;
    IO_FLAG                       = -1;
    TITLE                         = -1;
    LOC_AOPT                      = -1;
    //empty_string             = -1;
}

CHECK(COMMON) 
{
    LSD_HARD    >=  0;    
}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  YOUNG_MODULUS=SCALAR(E);
  POISSON_RATIO=SCALAR(Nu);
  K=SCALAR(LSDYNA_K);
  C1=SCALAR(LSD_MAT_C1);
  C2=SCALAR(LSD_MAT_C2);
  C3=SCALAR(LSD_MAT_C3);
  C4=SCALAR(LSD_MAT_C4);
  AX=SCALAR(LSD_AX);
  AY=SCALAR(LSD_AY);
  AZ0=SCALAR(LSD_AZ);
  AZ1=SCALAR(LSD_AZ1);
  E0=SCALAR(LSD_E0);
  N=SCALAR(LSDYNA_N);
  ESRO=SCALAR(LSD_ESRO);
  M=SCALAR(LSDYNA_M);
  A=SCALAR(LSD_A);
  MATERIAL_AXES_OPTION=SCALAR(axisOptFlag);
  OFFSET_ANGLE_FOR_AOPT=SCALAR(LSD_OFFANG);
 public:
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON) 
{
     ASSIGN(KEYWORD_STR, "*MAT_BARLAT_YLD96");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
       {
             ASSIGN(KEYWORD_STR, "_TITLE");
       } 
 mandatory:
     SCALAR(Rho)                         { DIMENSION="density";}
     SCALAR(E)                           {DIMENSION="pressure";}
 optional:
     SCALAR(Nu)                          {DIMENSION="DIMENSIONLESS";}
 mandatory:
     SCALAR(LSDYNA_K)                    {DIMENSION="pressure";}
 optional:
     SCALAR(LSD_E0)                      {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_N)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_ESRO)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_M)                    {DIMENSION="DIMENSIONLESS";}
     FLAG(hardeningOptFlag);
     if(hardeningOptFlag == FALSE)
     {  
        SCALAR(LSD_HARD)                 {DIMENSION="DIMENSIONLESS";}
     }
     if(hardeningOptFlag == TRUE)
     {
        FUNCTION(LSD_LCID)
        {
          X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
          Y_TITLE = "Stress"; Y_DIMENSION = "pressure";
        }
     }
     SCALAR(LSD_A)                       {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_C1)                  {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_C2)                  {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_C3)                  {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_C4)                  {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_AX)                      {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_AY)                      {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_AZ)                      {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_AZ1)                     {DIMENSION="DIMENSIONLESS";}
     RADIO(axisOptFlag)
     {
        
        ADD(0.0, "0.0: Locally orthotropic : axis given by nodes 1,2, and 4");
        ADD(2.0, "2.0: Axis given by vectors");
        ADD(3.0, "3.0: Axis given by rotating the material axes by an angle BETA");
     }
     if(axisOptFlag == 2)
     {
        SCALAR(LSDYNA_A1)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_A2)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_A3)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_D1)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_D2)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_D3)               {DIMENSION="DIMENSIONLESS";}
     }
     if(axisOptFlag == 3)
     {
        SCALAR(LSD_OFFANG)              {DIMENSION="a";}
        SCALAR(LSDYNA_V1)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_V2)               {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSDYNA_V3)               {DIMENSION="DIMENSIONLESS";}
     }     
/*
  optional:
    graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/SHELL,/COMPONENT/TSHELL);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{   
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    if(LSD_NODE7 != NONE && LSD_NODE8 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);

    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }

    COMMENT("$      MID       RHO         E        PR         K");
    CARD("%10d%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,LSDYNA_K);

    COMMENT("$       EO         N      ESR0         M      HARD         A");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_E0,LSDYNA_N,LSD_ESRO,LSDYNA_M,SCALAR_OR_OBJECT(hardeningOptFlag,LSD_HARD,LSD_LCID),LSD_A);

    COMMENT("$       C1        C2        C3        C4        AX        AY       AZ0       AZ1");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_C1,LSD_MAT_C2,LSD_MAT_C3,LSD_MAT_C4,LSD_AX,LSD_AY,LSD_AZ,LSD_AZ1);

    COMMENT("$     AOPT      BETA");
    if(IO_FLAG == 2)
    {
        if(axisOptFlag != 4)
        {
            CARD("%10lg%10lg",LOC_AOPT,CELL_COND( if(axisOptFlag == 3) LSD_OFFANG;));
        }
        else
        {
            CARD("%10lg",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM));
        }
    }
    CARD_PREREAD("%10lg",LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    if(IO_FLAG == 1)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 4)
        {
            CARD("%10lg%10lg",LOC_AOPT,CELL_COND( if(axisOptFlag == 3) LSD_OFFANG;));
        }
        else
        {
            CARD("%10lg",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM));
            ASSIGN(axisOptFlag, 4, IMPORT);
        }
    }
  
    COMMENT("$                                     A1        A2        A3");
    if(axisOptFlag == 2)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
    }
    else
    {
        BLANK;
    }

    COMMENT("$       V1        V2        V3        D1        D2        D3");
    if(axisOptFlag == 2  ||  axisOptFlag == 3)
    {
        if(axisOptFlag == 2.0)
        {
            CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
        }
        else
        {
            CARD("%10lg%10lg%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3);
        }
    }
    else
    {
        BLANK;
    }
}
