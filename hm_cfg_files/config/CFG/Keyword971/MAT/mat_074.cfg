//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 074
// 


 ATTRIBUTES(COMMON) 
 
 {
  
  // Initial and reference densities
  KEYWORD_STR                       = VALUE(STRING, "Solver Keyword");
  LSD_TitleOpt                      = VALUE(INT, "Title");
  CommentEnumField                  = VALUE(INT, "User Comments");
  Num_Comments                      = SIZE("No. of comment lines");
  Comments                          = ARRAY[Num_Comments](STRING, "Entity Comments");
  Rho                               = VALUE(FLOAT, "Mass density");  
  MATL74_K                          = VALUE(FLOAT, "Stiffness coefficient");
  MATL74_FO                         = VALUE(FLOAT, "Optional initial force");
  MATL74_D                          = VALUE(FLOAT, "Viscous damping coefficient");
  MATL74_CDF                        = VALUE(FLOAT, "Compressive displacement at failure");
  MATL74_TDF                        = VALUE(FLOAT, "Tensile displacement at failure");
  MATL74_FLCID                      = VALUE(FUNCT, "force VS deflection for nonlinear behavior");
  MATL74_HLCID                      = VALUE(FUNCT, "force VS relative velocity for nonlinear behavior");
  MATL74_C1                         = VALUE(FLOAT, "Damping coefficient for nonlinear behavior");
  MATL74_C2                         = VALUE(FLOAT, "Damping coefficient for nonlinear behavior");
  MATL74_DLE                        = VALUE(FLOAT, "Factor to scale time units");
  MATL74_GLCID                      = VALUE(FUNCT, "scale factor VS deflection");

}

SKEYWORDS_IDENTIFIER(COMMON)

{

  KEYWORD_STR                   = 9000;
  CommentEnumField              = 3220;
  Num_Comments                  = 3101;
  LSD_TitleOpt                  = 90;
  Comments                      = 3100;
  Rho                           = 118;
  MATL74_K                      = 4209;
  MATL74_FO                     = 4210;
  MATL74_D                      = 4211;
  MATL74_CDF                    = 4212;
  MATL74_TDF                    = 4213;
  MATL74_FLCID                  = 4214;
  MATL74_HLCID                  = 4215;
  MATL74_C1                     = 4216;
  MATL74_C2                     = 4217;
  MATL74_DLE                    = 4218;
  MATL74_GLCID                  = 4732;
}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  STIFFNESS_COEFFICIENT=SCALAR(MATL74_K);
  INITIAL_FORCE=SCALAR(MATL74_FO);
  VISCOUS_DAMPING_COEFFICIENT=SCALAR(MATL74_D);
  COMPRESSIVE_DISPLACEMENT=SCALAR(MATL74_CDF);
  TENSILE_DISPLACEMENT=SCALAR(MATL74_TDF);
  DAMPING_COEFFICIENT1_FOR_NONLINEAR_BEHAVIOR=SCALAR(MATL74_C1);
  DAMPING_COEFFICIENT2_FOR_NONLINEAR_BEHAVIOR=SCALAR(MATL74_C2);
  FACTOR_TO_SCALE_TIME_UNITS=SCALAR(MATL74_DLE);

}

GUI(COMMON) 
{


     ASSIGN(KEYWORD_STR, "*MAT_ELASTIC_SPRING_DISCRETE_BEAM");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
         ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                         { DIMENSION="density";}
     SCALAR(MATL74_K)                    {DIMENSION="pressure";}
 optional:
     SCALAR(MATL74_FO)                   {DIMENSION="force";}
     SCALAR(MATL74_D)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(MATL74_CDF)                  {DIMENSION="l";}
     SCALAR(MATL74_TDF)                  {DIMENSION="l";}
     FUNCTION(MATL74_FLCID)
     {
       X_TITLE = "Deflection"; X_DIMENSION = "l";
       Y_TITLE = "Force"; Y_DIMENSION = "pressure";
     }
     FUNCTION(MATL74_HLCID)
     {
       X_TITLE = "Velocity"; X_DIMENSION = "velocity";
       Y_TITLE = "Force"; Y_DIMENSION = "pressure";
     }
     SCALAR(MATL74_C1)                   {DIMENSION="DIMENSIONLESS";}
     SCALAR(MATL74_C2)                   {DIMENSION="DIMENSIONLESS";}
     SCALAR(MATL74_DLE)                  {DIMENSION="DIMENSIONLESS";}
     FUNCTION(MATL74_GLCID)
     {
       X_TITLE = "Deflection"; X_DIMENSION = "l";
       Y_TITLE = "Scale factor"; Y_DIMENSION = "DIMENSIONLESS";
     }
/*
     graphical SUPPORT("Part(s) to which material is applied") {
     OBJECTS=(/COMPONENT/BEAM,/COMPONENT/SPRING);
     ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    //
    COMMENT("$      MID       RHO         K        F0         D       CDF       TDF");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,MATL74_K,MATL74_FO,MATL74_D,MATL74_CDF,MATL74_TDF);
    //
    COMMENT("$    FLCID     HLCID        C1        C2       DLE     GLCID");
    CARD("%10d%10d%10lg%10lg%10lg%10d",MATL74_FLCID,MATL74_HLCID,MATL74_C1,MATL74_C2,MATL74_DLE,MATL74_GLCID);
    //
}