//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 145
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    G                                       = VALUE(FLOAT,  "Shear modulus");
    LSDYNA_K                                = VALUE(FLOAT,  "Bulk modulus");
    LSDYNA_TFAIL                            = VALUE(FLOAT,  "Tensile failure stress");
    LSD_AFIT                                = VALUE(FLOAT,  "Ductile damage mechanics parameter");
    LSD_ALPHA                               = VALUE(FLOAT,  "Shear failure parameter");
    LSD_ALPHA1                              = VALUE(FLOAT,  "Torsion scaling parameter");
    LSD_ALPHA2                              = VALUE(FLOAT,  "Tri-axial extension scaling parameter");
    LSD_ALPHAN                              = VALUE(FLOAT,  "Kinematic strain hardening parameter");
    LSD_BETA                                = VALUE(FLOAT,  "Shear failure parameter");
    LSD_BETA1                               = VALUE(FLOAT,  "Torsion scaling parameter");
    LSD_BETA2                               = VALUE(FLOAT,  "Tri-axial extension scaling parameter");
    LSD_BFIT                                = VALUE(FLOAT,  "Ductile damage mechanics parameter");
    LSD_CALPHA                              = VALUE(FLOAT,  "Kinematic strain hardening parameter");
    LSD_CFIT                                = VALUE(FLOAT,  "Brittle damage mechanics parameter");
    LSD_D1                                  = VALUE(FLOAT,  "Plastic Volume Strain parameter");
    LSD_D2                                  = VALUE(FLOAT,  "Plastic Volume Strain parameter");
    LSD_DBETA                               = VALUE(FLOAT,  "Rounded vertices parameter");
    LSD_DDELTA                              = VALUE(FLOAT,  "Rounded vertices parameter");
    LSD_DFIT                                = VALUE(FLOAT,  "Brittle damage mechanics parameter");
    LSD_EFIT                                = VALUE(FLOAT,  "Dilitation damage mechanics parameter");
    LSD_EPSMAX                              = VALUE(FLOAT,  "Maximum permitted strain increment");
    LSD_FAILFG                              = VALUE(FLOAT,  "Flag controlling element deletion and effect of damage on stress");
    LSD_FFIT                                = VALUE(FLOAT,  "Dilitation damage mechanics parameter");
    LSD_GAMMA                               = VALUE(FLOAT,  "Shear failure parameter");
    LSD_GAMMA1                              = VALUE(FLOAT,  "Torsion scaling parameter");
    LSD_GAMMA2                              = VALUE(FLOAT,  "Tri-axial extension scaling parameter");
    LSD_GRUN                                = VALUE(FLOAT,  "Gruneisen ratio");
    LSD_IROCK                               = VALUE(FLOAT,  "IROCK");
    LSD_NPLOT                               = VALUE(FLOAT,  "Dilitation damage mechanics parameter");
    LSD_PORE                                = VALUE(FLOAT,  "Flag for pore collapse");
    LSD_R0                                  = VALUE(FLOAT,  "Initial cap surface ellipticity");
    LSD_RDAMO                               = VALUE(FLOAT,  "Ductile damage mechanics parameter");
    LSD_SECP                                = VALUE(FLOAT,  "Shear enhanced compaction");
    LSD_SHOCK                               = VALUE(FLOAT,  "Shock velocity parameter");
    LSD_THETA                               = VALUE(FLOAT,  "Shear failure parameter");
    LSD_THETA1                              = VALUE(FLOAT,  "Torsion scaling parameter");
    LSD_THETA2                              = VALUE(FLOAT,  "Tri-axial extension scaling parameter");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    LSD_VPTAU                               = VALUE(FLOAT,  "Viscoplasticity relaxation time parameter");
    LSD_W                                   = VALUE(FLOAT,  "Plastic Volume Strain parameter");
    LSD_X0                                  = VALUE(FLOAT,  "Initial cap surface");
    Rho                                     = VALUE(FLOAT,  "Mass Density");

}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    G                                       = 121;
    LSDYNA_K                                = 124;
    LSDYNA_TFAIL                            = 67;
    LSD_AFIT                                = 4802;
    LSD_ALPHA                               = 1651;
    LSD_ALPHA1                              = 4817;
    LSD_ALPHA2                              = 4579;
    LSD_ALPHAN                              = 4796;
    LSD_BETA                                = 1662;
    LSD_BETA1                               = 4819;
    LSD_BETA2                               = 4822;
    LSD_BFIT                                = 4803;
    LSD_CALPHA                              = 4797;
    LSD_CFIT                                = 4810;
    LSD_D1                                  = 4806;
    LSD_D2                                  = 4807;
    LSD_DBETA                               = 4813;
    LSD_DDELTA                              = 4814;
    LSD_DFIT                                = 4811;
    LSD_EFIT                                = 4794;
    LSD_EPSMAX                              = 4809;
    LSD_FAILFG                              = 4812;
    LSD_FFIT                                = 4795;
    LSD_GAMMA                               = 4336;
    LSD_GAMMA1                              = 4820;
    LSD_GAMMA2                              = 4823;
    LSD_GRUN                                = 4790;
    LSD_IROCK                               = 4800;
    LSD_NPLOT                               = 4808;
    LSD_PORE                                = 4792;
    LSD_R0                                  = 4798;
    LSD_RDAMO                               = 4804;
    LSD_SECP                                = 4801;
    LSD_SHOCK                               = 4791;
    LSD_THETA                               = 4793;
    LSD_THETA1                              = 4818;
    LSD_THETA2                              = 4821;
    LSD_TitleOpt                            = 90;
    LSD_VPTAU                               = 4815;
    LSD_W                                   = 1638;
    LSD_X0                                  = 4799;
    Num_Comments                            = 3101;
    Rho                                     = 118;

}

DEFAULTS(COMMON)
{

    LSD_FAILFG    = 1.0;

}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  SHEAR_MODULUS=SCALAR(G);
  BULK_MODULUS=SCALAR(LSDYNA_K);
  GRUNEISEN_RATIO=SCALAR(LSD_GRUN);
  SHOCK_VELOCITY_PARAMETER=SCALAR(LSD_SHOCK);
  FLAG_FOR_PORE_COLLAPSE=SCALAR(LSD_PORE);
  ALPHA=SCALAR(LSD_ALPHA);
  THETA=SCALAR(LSD_THETA);
  GAMMA=SCALAR(LSD_GAMMA);
  BETA=SCALAR(LSD_BETA);
  EFIT=SCALAR(LSD_EFIT);
  FFIT=SCALAR(LSD_FFIT);
  ALPHAN=SCALAR(LSD_ALPHAN);
  CALPHA=SCALAR(LSD_CALPHA);
  R0=SCALAR(LSD_R0);
  X0=SCALAR(LSD_X0);
  IROCK=SCALAR(LSD_IROCK);
  SHEAR_ENHANCED_COMPACTION=SCALAR(LSD_SECP);
  AFIT=SCALAR(LSD_AFIT);
  BFIT=SCALAR(LSD_BFIT);
  DUCTILE_DAMAGE_MECHANICS_PARAMETER=SCALAR(LSD_RDAMO);
  W=SCALAR(LSD_W);
  D1=SCALAR(LSD_D1);
  D2=SCALAR(LSD_D2);
  HISTORY_VARIABLE_POST_PROCESSED=SCALAR(LSD_NPLOT);
  MAXIMUM_PERMITTED_STRAIN_INCREMENT=SCALAR(LSD_EPSMAX);
  CFIT=SCALAR(LSD_CFIT);
  DFIT=SCALAR(LSD_DFIT);
  TENSILE_FAILURE_STRESS=SCALAR(LSDYNA_TFAIL);
  FAILURE_FLAG=SCALAR(LSD_FAILFG);
  ROUNDED_VERTICES_PARAMETER_DBETA=SCALAR(LSD_DBETA);
  ROUNDED_VERTICES_PARAMETER_DDELTA=SCALAR(LSD_DDELTA);
  VISCOPLASTICITY_RELAXATION_TIME_PARAMETER=SCALAR(LSD_VPTAU);
  TORSION_SCALING_PARAMETER_ALPHA1=SCALAR(LSD_ALPHA1);
  TORSION_SCALING_PARAMETER_THETA1=SCALAR(LSD_THETA1);
  TORSION_SCALING_PARAMETER_GAMMA1=SCALAR(LSD_GAMMA1);
  TORSION_SCALING_PARAMETER_BETA1=SCALAR(LSD_BETA1);
  TRI-AXIAL_EXTENSION_SCALING_PARAMETER_ALPHA2=SCALAR(LSD_ALPHA2);
  TRI-AXIAL_EXTENSION_SCALING_PARAMETER_THETA2=SCALAR(LSD_THETA2);
  TRI-AXIAL_EXTENSION_SCALING_PARAMETER_GAMMA2=SCALAR(LSD_GAMMA2);
  TRI-AXIAL_EXTENSION_SCALING_PARAMETER_BETA2=SCALAR(LSD_BETA2);
  YOUNG_MODULUS = EVAL(9*SHEAR_MODULUS*BULK_MODULUS/(3.*BULK_MODULUS+SHEAR_MODULUS)) ;
  POISSON_RATIO     = EVAL((3.*BULK_MODULUS-2.*SHEAR_MODULUS)/(6.*BULK_MODULUS+2.*SHEAR_MODULUS));
 public:
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2 = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 public:
  SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+BULK_MODULUS)/MASS_DENSITY)^0.5);
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_SCHWER_MURRAY_CAP_MODEL");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                            {DIMENSION="density";}
 optional:    
     SCALAR(G)                              {DIMENSION="pressure";}
     SCALAR(LSDYNA_K)                       {DIMENSION="pressure";}
     SCALAR(LSD_GRUN)                       {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_SHOCK)                      {DIMENSION="velocity";}
 mandatory:
     RADIO(LSD_PORE)
     {
        ADD(0.0, "0.0: For pore collapse");
        ADD(1.0, "1.0: For Constant bulk modulus, typical");
     }
     SCALAR(LSD_ALPHA)                      {DIMENSION="pressure";}
     SCALAR(LSD_THETA)                      {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_GAMMA)                      {DIMENSION="pressure";}
 optional:    
     SCALAR(LSD_BETA)                       {DIMENSION="inverse_of_square_of_pressure";}
     SCALAR(LSD_EFIT)                       {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_FFIT)                       {DIMENSION="DIMENSIONLESS";}
 mandatory:
     SCALAR(LSD_ALPHAN)                     {DIMENSION="DIMENSIONLESS";}
 optional:    
     SCALAR(LSD_CALPHA)                     {DIMENSION="DIMENSIONLESS";}
 mandatory:
     SCALAR(LSD_R0)                         {DIMENSION="DIMENSIONLESS";}
 optional:    
     SCALAR(LSD_X0)                         {DIMENSION="DIMENSIONLESS";}
     RADIO(LSD_IROCK)
     {
        ADD(0.0, "0.0: Soils");
        ADD(1.0, "1.0: Rock/Concrete");
     }
     SCALAR(LSD_SECP)                       {DIMENSION="pressure";}
     SCALAR(LSD_AFIT)                       {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_BFIT)                       {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_RDAMO)                      {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_W)                          {DIMENSION="DIMENSIONLESS";}
 mandatory:
     SCALAR(LSD_D1)                         {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_D2)                         {DIMENSION="DIMENSIONLESS";}
 optional:    
     SCALAR(LSD_NPLOT)                      {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_EPSMAX)                     {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_CFIT)                       {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_DFIT)                       {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_TFAIL)                   {DIMENSION="pressure";}
     RADIO(LSD_FAILFG)
     {
        ADD(-2.0, "-2.0: Reduces with increasing damage; element is not deleted");
        ADD(-1.0, "-1.0: Reduces with increasing damage; element is not deleted");
        ADD( 0.0, " 0.0: Default");
        ADD( 1.0, " 1.0: Reduces with increasing damage; element is deleted when fully damaged");
        ADD( 2.0, " 2.0: Reduces with increasing damage; element is deleted when fully damaged");
     }
     SCALAR(LSD_DBETA)                      {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_DDELTA)                     {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_VPTAU)                      {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_ALPHA1)                     {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_THETA1)                     {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_GAMMA1)                     {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_BETA1)                      {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_ALPHA2)                     {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_THETA2)                     {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_GAMMA2)                     {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_BETA2)                      {DIMENSION="DIMENSIONLESS";}
/*
    graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/BEAM,/COMPONENT/SPRING,/COMPONENT/TRUSS,/COMPONENT/RIVET,/COMPONENT/SHELL,/COMPONENT/PENTA6,/COMPONENT/SHEL16);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    //    
    COMMENT("$      MID       RHO     SHEAR      BULK      GRUN     SHOCK      PORE");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,G,LSDYNA_K,LSD_GRUN,LSD_SHOCK,LSD_PORE);
    //
    COMMENT("$    ALPHA     THETA     GAMMA      BETA      EFIT      FFIT    ALPHAN    CALPHA");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_ALPHA,LSD_THETA,LSD_GAMMA,LSD_BETA,LSD_EFIT,LSD_FFIT,LSD_ALPHAN,LSD_CALPHA);
    //
    COMMENT("$       R0        X0     IROCK      SECP      AFIT      BFIT     RDAMO          ");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_R0,LSD_X0,LSD_IROCK,LSD_SECP,LSD_AFIT,LSD_BFIT,LSD_RDAMO);
    //
    COMMENT("$        W        D1        D2     NPLOT    EPSMAX      CFIT      DFIT     TFAIL");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_W,LSD_D1,LSD_D2,LSD_NPLOT,LSD_EPSMAX,LSD_CFIT,LSD_DFIT,LSDYNA_TFAIL);
    //
    COMMENT("$   FAILFG     DBETA    DDELTA     VPTAU");
    CARD("%10lg%10lg%10lg%10lg",LSD_FAILFG,LSD_DBETA,LSD_DDELTA,LSD_VPTAU);
    //
    COMMENT("$   ALPHA1    THETA1    GAMMA1     BETA1    ALPHA2    THETA2    GAMMA2     BETA2");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_ALPHA1,LSD_THETA1,LSD_GAMMA1,LSD_BETA1,LSD_ALPHA2,LSD_THETA2,LSD_GAMMA2,LSD_BETA2);
    //

}
