//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// AIRBAG
// 


ATTRIBUTES(COMMON) 

{

    // Initial and reference densities
    KEYWORD_STR                     = VALUE(STRING, "Solver Keyword");
    airbagoption                    = VALUE(INT, "options");
    LSD_RBID                        = VALUE(INT, "RBID");
    LSD_VSCA                        = VALUE(FLOAT, "VSCA");
    LSD_PSCA                        = VALUE(FLOAT, "PSCA");
    LSD_VINI                        = VALUE(FLOAT, "VINI");
    LSD_MWD                         = VALUE(FLOAT, "MWD");
    LSD_SPSF                        = VALUE(FLOAT, "SPSF");
    NoAbgSenParms                   = SIZE("N");
    AbgSenParsArray                 = ARRAY[NoAbgSenParms](STRING, "Cn");
    LSD_AX                          = VALUE(FLOAT, "AX");
    LSD_AY                          = VALUE(FLOAT, "AY");
    LSD_AZ                          = VALUE(FLOAT, "AZ");
    LSD_AMAG                        = VALUE(FLOAT, "AMAG");
    LSD_TDUR                        = VALUE(FLOAT, "TDUR");
    LSD_DVX                         = VALUE(FLOAT, "DVX");
    LSD_DVY                         = VALUE(FLOAT, "DVY");
    LSD_DVZ                         = VALUE(FLOAT, "DVZ");
    LSD_DVMAG                       = VALUE(FLOAT, "DVMAG");
    LSD_UX                          = VALUE(FLOAT, "UX");
    LSD_UY                          = VALUE(FLOAT, "UY");
    LSD_UZ                          = VALUE(FLOAT, "UZ");
    LSD_UMAG                        = VALUE(FLOAT, "UMAG");
    LSD_LCIDOpt                     = VALUE(INT, "LCC23_Relative_Pressure");
    LSD_CN                          = VALUE(FLOAT, "CN");
    LSD_LCID10                      = VALUE(FUNCT, "CN");
    LSD_BETA                        = VALUE(FLOAT, "BETA");
    LSD_LCID                        = VALUE(FUNCT, "LCID");
    LSD_LCIDDR                      = VALUE(FUNCT, "LCIDDR");
    LSD_CV                          = VALUE(FLOAT, "CV");
    LSD_CP                          = VALUE(FLOAT, "CP");
    LSD_aT                          = VALUE(FLOAT, "T");
    LSD_MUOpt_Airbag                = VALUE(INT, "Mu_Option");
    LSD_MU                          = VALUE(FLOAT, "MU");
    LSD_MUEnt_Airbag                = VALUE(FUNCT, "MU");
    LSD_AOpt                        = VALUE(INT, "A_Option");
    LSD_A                           = VALUE(FLOAT, "A");
    LSD_AEnt                        = VALUE(FUNCT, "A");
    LSD_PE                          = VALUE(FLOAT, "PE");
    LSD_RO                          = VALUE(FLOAT, "RO");
    LSD_LOU                         = VALUE(FUNCT, "LOU");
    LSD_TEXT                        = VALUE(FLOAT, "TEXT");
    LSD_aA                          = VALUE(FLOAT, "A");
    LSD_aB                          = VALUE(FLOAT, "B");
    LSD_MW                          = VALUE(FLOAT, "MW");
    LSD_GASC                        = VALUE(FLOAT, "GASC");
    LSD_TVOL                        = VALUE(FLOAT, "TVOL");
    LSD_LCID2                       = VALUE(FUNCT, "LCMT");
    LSD_LCDT                        = VALUE(FUNCT, "LCDT");
    LSD_IABT                        = VALUE(FLOAT, "IABT");
    LSD_C23                         = VALUE(FLOAT, "C23");
    LSD_LCID3                       = VALUE(FUNCT, "LCC23");
    LSD_LCID4                       = VALUE(FUNCT, "LCA23");
    LSD_LCID5                       = VALUE(FUNCT, "LCMCP23");
    LSD_LCID6                       = VALUE(FUNCT, "LCAP23");
    LSD_A23                         = VALUE(FLOAT, "A23");
    LSD_CP23                        = VALUE(FLOAT, "CP23");
    LSD_AP23                        = VALUE(FLOAT, "AP23");
    LSD_GC                          = VALUE(FLOAT, "GC");
    LSD_LCID7                       = VALUE(FUNCT, "LCEFR");
    LSD_POVER                       = VALUE(FLOAT, "POVER");
    LSD_PPOP                        = VALUE(FLOAT, "PPOP");
    LSD_OPT                         = VALUE(FLOAT, "OPT");
    LSD_LCID8                       = VALUE(FUNCT, "KNKDN");
    LSD_IOC                         = VALUE(FLOAT, "IOC");
    LSD_IOA                         = VALUE(FLOAT, "IOA");
    LSD_IVOL                        = VALUE(FLOAT, "IVOL");
    LSD_IRO                         = VALUE(FLOAT, "IRO");
    LSD_IT                          = VALUE(FLOAT, "IT");
    LSD_LCBF                        = VALUE(FUNCT, "LCBF");
    LSD_HCONVOpt                    = VALUE(INT, "HCONV_Option");
    LSD_HCONV_H                     = VALUE(FLOAT, "HCONV");
    LSD_LCID9                       = VALUE(FUNCT, "HCONV");
    popoption                       = VALUE(INT, "Pop");
    LSD_TDP                         = VALUE(FLOAT, "TDP");
    LSD_AXP                         = VALUE(FLOAT, "AXP");
    LSD_AYP                         = VALUE(FLOAT, "AYP");
    LSD_AZP                         = VALUE(FLOAT, "AZP");
    LSD_AMAGP                       = VALUE(FLOAT, "AMAGP");
    LSD_TDURP                       = VALUE(FLOAT, "TDURP");
    LSD_TDA                         = VALUE(FLOAT, "TDA");
    LSD_RBIDP                       = VALUE(COMPONENT, "RBIDP");
    jettingoption                   = VALUE(INT, "Jetting");
    LSD_XJFP                        = VALUE(FLOAT, "XJFP");
    LSD_YJFP                        = VALUE(FLOAT, "YJFP");
    LSD_ZJFP                        = VALUE(FLOAT, "ZJFP");
    LSD_XJVH                        = VALUE(FLOAT, "XJVH");
    LSD_YJVH                        = VALUE(FLOAT, "YJVH");
    LSD_ZJVH                        = VALUE(FLOAT, "ZJVH");
    multjetoption                   = VALUE(INT, "MultipleJetting");
    coneAngleCurveFlag              = VALUE(INT, "CA_Option");
    LSD_CA                          = VALUE(FLOAT, "CA");
    LSD_LCJRV                       = VALUE(FUNCT, "LCJRV");
    effiFactorCurveFlag             = VALUE(INT, "BETA_Option");
    LSDYNA_BETA                     = VALUE(FLOAT, "BETA");
    LSD_XSJFP                       = VALUE(FLOAT, "XSJFP");
    LSD_YSJFP                       = VALUE(FLOAT, "YSJFP");
    LSD_ZSJFP                       = VALUE(FLOAT, "ZSJFP");
    LSD_PSID                        = VALUE(SETS, "PSID") { SUBTYPES = (/SETS/SET_NODE_IDPOOL) ; }
    LSD_ANGLE                       = VALUE(FLOAT, "ANGLE");
    LSD_NODE1                       = VALUE(NODE, "NODE1");
    LSD_NODE2                       = VALUE(NODE, "NODE2");
    LSD_NODE3                       = VALUE(NODE, "NODE3");
    CMoption                        = VALUE(INT, "CM");
    LSD_NREACT                      = VALUE(NODE, "NREACT");
    LSD_ATMOST                      = VALUE(FLOAT, "ATMOST");                     
    LSD_ATMOSP                      = VALUE(FLOAT, "ATMOSP");
    LSD_ATMOSD                      = VALUE(FLOAT, "ATMOSD");
    LSD_CC                          = VALUE(FLOAT, "CC");
    LSD_LCMINOpt                    = VALUE(INT, "A23_Option");
    LSD_PID                         = VALUE(COMPONENT, "A23");
    LSD_OPTHybrid                   = VALUE(INT, "OPT");  
    LSD_PVENT                       = VALUE(FLOAT, "PVENT");
    LSD_NGAS                        = SIZE("NGAS");
    LSD_LCIDMOpt                    = VALUE(INT, "LCIDM_Cubic_Interp");
    LSD_LCIDTOpt                    = VALUE(INT, "LCIDT_Cubic_Interp");
    LSD_LCIDM                       = ARRAY[LSD_NGAS](FUNCT, "LCIDM");
    LSD_LCIDT                       = ARRAY[LSD_NGAS](FUNCT, "LCIDT");
    LSD_MWHYB                       = ARRAY[LSD_NGAS](FLOAT, "MW");
    LSD_INITM                       = ARRAY[LSD_NGAS](FLOAT, "INITM");
    LSD_HA                          = ARRAY[LSD_NGAS](FLOAT, "A");
    LSD_HB                          = ARRAY[LSD_NGAS](FLOAT, "B");
    LSD_HC                          = ARRAY[LSD_NGAS](FLOAT, "C");
    LSD_FMASS                       = ARRAY[LSD_NGAS](FLOAT, "FMASS");
    LSD_LCEFR                       = VALUE(FUNCT, "LCEFR");
    LSD_LCIDM0                      = VALUE(FUNCT, "LCIDM0");
    LSD_VNTOPT                      = VALUE(INT, "VNTOPT");
    LSD_PSF                         = VALUE(FLOAT, "PSF");
    LSD_GAMMA                       = VALUE(FLOAT, "GAMMA");
    LSD_P0                          = VALUE(FLOAT, "P0");
    LSDYNA_K                        = VALUE(FLOAT, "BULK");
    FluidOptionalCards3             = VALUE(INT, "OptionalCards3");
    LSD_P_LIMIT                     = VALUE(FLOAT, "P_LIMIT");
    LSD_P_LIMLC                     = VALUE(FUNCT, "P_LIMLC");
    LSD_STIME                       = VALUE(FLOAT, "STIME");
    LSD_PO                          = VALUE(FLOAT, "PO");
    LSD_T0                          = VALUE(FLOAT, "T");  
    LSD_TO                          = VALUE(FLOAT, "TO");  
    LSD_CHNAME                      = ARRAY[LSD_NGAS](STRING, "CHNAME");
    //  LSD_LCIDM                       = ARRAY[LSD_NGAS](FUNCT, "LCIDN");
    LSD_FMOLE                       = ARRAY[LSD_NGAS](FLOAT, "FMOLE");
    LSD_FMOLET                      = ARRAY[LSD_NGAS](FLOAT, "FMOLET");
    LSD_TLOW                        = ARRAY[LSD_NGAS](FLOAT, "TLOW");
    LSD_TMIDHYB                     = ARRAY[LSD_NGAS](FLOAT, "TMID");
    LSD_THIGH                       = ARRAY[LSD_NGAS](FLOAT, "THIGH");
    LSD_ALOW                        = ARRAY[LSD_NGAS](FLOAT, "ALOW");
    LSD_BLOW                        = ARRAY[LSD_NGAS](FLOAT, "BLOW");
    LSD_CLOW                        = ARRAY[LSD_NGAS](FLOAT, "CLOW");
    LSD_DLOW                        = ARRAY[LSD_NGAS](FLOAT, "DLOW");
    LSD_ELOW                        = ARRAY[LSD_NGAS](FLOAT, "ELOW");
    LSD_FLOW                        = ARRAY[LSD_NGAS](FLOAT, "FLOW");
    LSD_HLOW                        = ARRAY[LSD_NGAS](FLOAT, "HLOW");
    LSD_AHIGH                       = ARRAY[LSD_NGAS](FLOAT, "AHIGH");
    LSD_BHIGH                       = ARRAY[LSD_NGAS](FLOAT, "BHIGH");
    LSD_CHIGH                       = ARRAY[LSD_NGAS](FLOAT, "CHIGH");
    LSD_DHIGH                       = ARRAY[LSD_NGAS](FLOAT, "DHIGH");
    LSD_EHIGH                       = ARRAY[LSD_NGAS](FLOAT, "EHIGH");
    LSD_FHIGH                       = ARRAY[LSD_NGAS](FLOAT, "FHIGH");
    LSD_HHIGH                       = ARRAY[LSD_NGAS](FLOAT, "HHIGH");
    LSD_AHYB                        = ARRAY[LSD_NGAS](FLOAT, "A");  
    LSD_BHYB                        = ARRAY[LSD_NGAS](FLOAT, "B");
    LSD_CHYB                        = ARRAY[LSD_NGAS](FLOAT, "C");
    LSD_DHYB                        = ARRAY[LSD_NGAS](FLOAT, "D");
    LSD_EHYB                        = ARRAY[LSD_NGAS](FLOAT, "E");
    LSD_DATA                        = SIZE("DATA");
    LSD_ATMT                        = VALUE(FLOAT, "ATMT");
    LSD_ATMP                        = VALUE(FLOAT, "ATMP");
    LSD_RG                          = VALUE(FLOAT, "RG");
    LSD_HCONV                       = VALUE(FLOAT, "HCONV");
    LSD_TNKVOL                      = VALUE(FLOAT, "TNKVOL");
    LSD_TNKFINP                     = VALUE(FLOAT, "TNKFINP");
    LSD_NQUAD                       = VALUE(INT, "NQUAD");
    LSD_CTYPE                       = VALUE(INT, "CTYPE");
    defineCurveFlag                 = VALUE(INT, "PFAC_Option");
    LSD_PFAC                        = VALUE(FLOAT, "PFAC");
    LSDYNA_FRIC                     = VALUE(FLOAT, "FRIC");
    LSD_FRCMIN                      = VALUE(FLOAT, "FRCMIN");  
    LSD_NORMTYP                     = VALUE(INT, "NORMTYP");
    LSD_ILEAK                       = VALUE(INT, "ILEAK");
    LSD_PLEAK                       = VALUE(FLOAT, "PLEAK");
    IVTYPE                          = VALUE(INT, "IVTYPE");
    LSD_NSID                        = VALUE(SETS, "IV_NSETID") { SUBTYPES = (/SETS/SET_NODE_IDPOOL) ; }
    LSD_IBLOCK                      = VALUE(INT, "IBLOCK");
    LSD_VNTCOF                      = VALUE(FLOAT, "VNTCOF");
    LSD_NXIDA                       = VALUE(INT, "NXIDA");
    LSD_NYIDG                       = VALUE(INT, "NYIDG");
    LSD_PID2                        = VALUE(COMPONENT, "NY");
    LSD_NZA                         = VALUE(INT, "NZ");
    LSD_MOVERN                      = VALUE(INT, "MOVERN");
    LSD_ZOOM                        = VALUE(INT, "ZOOM");
    LSD_X0                          = VALUE(FLOAT, "X0");
    LSD_Y0                          = VALUE(FLOAT, "Y0");
    LSD_Z0                          = VALUE(FLOAT, "Z0");
    LSD_X1                          = VALUE(FLOAT, "X1");
    LSD_Y1                          = VALUE(FLOAT, "Y1");
    LSD_Z1                          = VALUE(FLOAT, "Z1");
    LSD_IPAIR                       = VALUE(INT, "IPAIR");
    LSD_IPGAS                       = VALUE(INT, "IPGAS");
    LSD_X2                          = VALUE(FLOAT, "X2");
    LSD_Y2                          = VALUE(FLOAT, "Y2");
    LSD_Z2                          = VALUE(FLOAT, "Z2");
    LSD_X3                          = VALUE(FLOAT, "X3");
    LSD_Y3                          = VALUE(FLOAT, "Y3");
    LSD_Z3                          = VALUE(FLOAT, "Z3");
    LSD_MWAIR                       = ARRAY[LSD_DATA](FLOAT, "MWAIR");
    LSD_INITM1                      = ARRAY[LSD_DATA](FLOAT, "INITM1");
    LSD_AIRA                        = ARRAY[LSD_DATA](FLOAT, "AIRA");
    LSD_AIRB                        = ARRAY[LSD_DATA](FLOAT, "AIRB");
    LSD_AIRC                        = ARRAY[LSD_DATA](FLOAT, "AIRC");
    LSD_LCMF                        = ARRAY[LSD_NGAS](FUNCT, "LCMF");
    LSD_MWGAS                       = ARRAY[LSD_NGAS](FLOAT, "MWGAS");
    LSD_GASA                        = ARRAY[LSD_NGAS](FLOAT, "GASA");
    LSD_GASB                        = ARRAY[LSD_NGAS](FLOAT, "GASB");
    LSD_ALEGASC                     = ARRAY[LSD_NGAS](FLOAT, "ALEGASC");
    LSD_LCIDM1                      = SIZE("NORIF");
    LSD_NODEID                      = ARRAY[LSD_LCIDM1](NODE, "NODEID");
    LSD_VECID                       = ARRAY[LSD_LCIDM1](VECTOR, "VECID");
    LSD_ORIFARE                     = ARRAY[LSD_LCIDM1](INT, "ORIFARE");
    LSD_LCVEL                       = VALUE(FUNCT, "LCVEL");
    LSD_LCT                         = VALUE(FUNCT, "LCT");

}


DEFAULTS(COMMON)
{
    LSD_VSCA        = 1.0;
    LSD_PSCA        = 1.0;
    LSD_CC          = 1.0;
    LSD_PSF         = 1.0;
    LSD_NQUAD       = 4.0;
    LSD_PFAC        = 0.1;
    LSD_FRCMIN      = 0.3;
    LSD_PLEAK       = 0.1;
    LSDYNA_BETA     = 1.0;
    LSD_CTYPE       = 4.0;
    LSD_ILEAK       = 2.0;


}

SKEYWORDS_IDENTIFIER(COMMON)

{

    KEYWORD_STR                 = 9000;
    airbagoption                = 3047;
    LSD_RBID                    = 3041;
    LSD_VSCA                    = 3042;
    LSD_PSCA                    = 3043;
    LSD_VINI                    = 3044;
    LSD_MWD                     = 3045;
    LSD_SPSF                    = 3046;
    NoAbgSenParms               = 4158;
    AbgSenParsArray             = 4159;
    LSD_AX                      = 3075;
    LSD_AY                      = 3076;
    LSD_AZ                      = 3077;
    LSD_AMAG                    = 3078;
    LSD_TDUR                    = 3079;
    LSD_DVX                     = 3080;
    LSD_DVY                     = 3081;
    LSD_DVZ                     = 3082;
    LSD_DVMAG                   = 3083;
    LSD_UX                      = 3084;
    LSD_UY                      = 3085;
    LSD_UZ                      = 3086;
    LSD_UMAG                    = 3087;
    LSD_LCIDOpt                 = 5091;
    LSD_CN                      = 3048;
    LSD_LCID10                  = 1142;
    LSD_BETA                    = 1662;
    LSD_LCID                    = 45;
    LSD_LCIDDR                  = 5310;
    LSD_CV                      = 3049;
    LSD_CP                      = 1568;
    LSD_aT                      = 3050;
    LSD_MUOpt_Airbag            = 5363;
    LSD_MU                      = 3051;
    LSD_MUEnt_Airbag            = 5364;
    LSD_AOpt                    = 5311;
    LSD_A                       = 718;
    LSD_AEnt                    = 5312;
    LSD_PE                      = 3053;
    LSD_RO                      = 3054;
    LSD_LOU                     = 3055;
    LSD_TEXT                    = 3056;
    LSD_aA                      = 3052;
    LSD_aB                      = 3057;
    LSD_MW                      = 3058;
    LSD_GASC                    = 3059;
    LSD_TVOL                    = 3060;
    LSD_LCID2                   = 168;
    LSD_LCDT                    = 4555;
    LSD_IABT                    = 4556;
    LSD_C23                     = 1208;
    LSD_LCID3                   = 170;
    LSD_LCID4                   = 171;
    LSD_LCID5                   = 172;
    LSD_LCID6                   = 199;
    LSD_A23                     = 1553;
    LSD_CP23                    = 3061;
    LSD_AP23                    = 3062;
    LSD_GC                      = 3063;
    LSD_LCID7                   = 200;
    LSD_POVER                   = 3064;
    LSD_PPOP                    = 3065;
    LSD_OPT                     = 3066;
    LSD_LCID8                   = 224;
    LSD_IOC                     = 3093;
    LSD_IOA                     = 3094;
    LSD_IVOL                    = 3095;
    LSD_IRO                     = 3096;
    LSD_IT                      = 3097;
    LSD_LCBF                    = 3098;
    LSD_HCONVOpt                = 7736; 
    LSD_HCONV_H                 = 7735;
    LSD_LCID9                   = 1141;
    popoption                   = 3191;
    LSD_TDP                     = 3192;
    LSD_AXP                     = 3193;
    LSD_AYP                     = 3194;
    LSD_AZP                     = 3195;
    LSD_AMAGP                   = 3196;
    LSD_TDURP                   = 3197;
    LSD_TDA                     = 3198;
    LSD_RBIDP                   = 3199;
    jettingoption               = 3067;
    LSD_XJFP                    = 3068; 
    LSD_YJFP                    = 3069;
    LSD_ZJFP                    = 3070;
    LSD_XJVH                    = 3071;
    LSD_YJVH                    = 3072;
    LSD_ZJVH                    = 3073;
    multjetoption               = 3099;
    coneAngleCurveFlag          = 4675;
    LSD_CA                      = 413; 
    LSD_LCJRV                   = 3103;   
    effiFactorCurveFlag         = 4676;
    LSDYNA_BETA                 = 148;
    LSD_XSJFP                   = 3106;
    LSD_YSJFP                   = 3107;
    LSD_ZSJFP                   = 3108;
    LSD_PSID                    = 768;
    LSD_ANGLE                   = 3109;
    LSD_NODE1                   = 86;
    LSD_NODE2                   = 87;
    LSD_NODE3                   = 2802;
    CMoption                    = 5313;
    LSD_NREACT                  = 5314;
    LSD_ATMOST                  = 3185;
    LSD_ATMOSP                  = 3186;
    LSD_ATMOSD                  = 3187;
    LSD_CC                      = 3189;
    LSD_LCMINOpt                = 5090;
    LSD_PID                     = 149;
    LSD_OPTHybrid               = 4192; 
    LSD_PVENT                   = 3177; 
    LSD_NGAS                    = 3178;
    LSD_LCIDMOpt                = 5315;
    LSD_LCIDTOpt                = 5316;
    LSD_LCIDM                   = 3179;
    LSD_LCIDT                   = 3180;
    LSD_MWHYB                   = 3190;
    LSD_INITM                   = 3188;
    LSD_HA                      = 3181;
    LSD_HB                      = 3182;
    LSD_HC                      = 3183;
    LSD_FMASS                   = 3184;
    LSD_LCEFR                   = 7732;
    LSD_LCIDM0                  = 7733;
    LSD_VNTOPT                  = 7734; 
    LSD_PSF                     = 3559;
    LSD_GAMMA                   = 4336;
    LSD_P0                      = 4337;
    LSDYNA_K                    = 124;
    FluidOptionalCards3         = 7915;
    LSD_P_LIMIT                 = 7913;
    LSD_P_LIMLC                 = 7914;
    LSD_STIME                   = 4619;
    LSD_PO                      = 4620; 
    LSD_T0                      = 1571;
    LSD_TO                      = 4621; 
    LSD_CHNAME                  = 4627; 
    LSD_FMOLE                   = 4628;
    LSD_FMOLET                  = 4629;
    LSD_TLOW                    = 4630;
    LSD_TMIDHYB                 = 4631;
    LSD_THIGH                   = 4632;
    LSD_ALOW                    = 4633;
    LSD_BLOW                    = 4634;
    LSD_CLOW                    = 4635;
    LSD_DLOW                    = 4636;
    LSD_ELOW                    = 4637;
    LSD_FLOW                    = 4638;
    LSD_HLOW                    = 4639;
    LSD_AHIGH                   = 4640;
    LSD_BHIGH                   = 4641;
    LSD_CHIGH                   = 4642;
    LSD_DHIGH                   = 4643;
    LSD_EHIGH                   = 4644;
    LSD_FHIGH                   = 4645;
    LSD_HHIGH                   = 4646;
    LSD_AHYB                    = 4647;
    LSD_BHYB                    = 4648;
    LSD_CHYB                    = 4649;
    LSD_DHYB                    = 4650;
    LSD_EHYB                    = 4651;
    LSD_DATA                    = 4622;
    LSD_ATMT                    = 4623;
    LSD_ATMP                    = 4624;
    LSD_RG                      = 4625;
    LSD_HCONV                   = 4626;
    LSD_TNKVOL                  = 5320;
    LSD_TNKFINP                 = 5321;
    LSD_NQUAD                   = 4542; 
    LSD_CTYPE                   = 4543;
    defineCurveFlag             = 4784;
    LSD_PFAC                    = 4546;
    LSDYNA_FRIC                 = 59;
    LSD_FRCMIN                  = 4547;
    LSD_NORMTYP                 = 4549;
    LSD_ILEAK                   = 4553;
    LSD_PLEAK                   = 4554;
    IVTYPE                      = 5365;
    LSD_NSID                    = 745;
    LSD_IBLOCK                  = 5324;
    LSD_VNTCOF                  = 5325;
    LSD_NXIDA                   = 5326;
    LSD_NYIDG                   = 5327;
    LSD_PID2                    = 150;
    LSD_NZA                     = 5328;
    LSD_MOVERN                  = 5329;
    LSD_ZOOM                    = 5330;
    LSD_X0                      = 4799; 
    LSD_Y0                      = 5331;
    LSD_Z0                      = 5332;
    LSD_X1                      = 4763;
    LSD_Y1                      = 4764;
    LSD_Z1                      = 4765;
    LSD_IPAIR                   =  960;
    LSD_IPGAS                   =  961;
    LSD_X2                      = 4766;
    LSD_Y2                      = 4767;
    LSD_Z2                      = 4768;
    LSD_X3                      = 4769;
    LSD_Y3                      = 4770;
    LSD_Z3                      = 4771;
    LSD_MWAIR                   = 5333; 
    LSD_INITM1                  = 5334;
    LSD_AIRA                    = 5335;
    LSD_AIRB                    = 5336;
    LSD_AIRC                    = 5337;
    LSD_LCMF                    = 5338;
    LSD_MWGAS                   = 5339;
    LSD_GASA                    = 5340;
    LSD_GASB                    = 5341;
    LSD_ALEGASC                 = 17;
    LSD_LCIDM1                  = 5318; 
    LSD_NODEID                  = 5342;
    LSD_VECID                   = 5343;
    LSD_ORIFARE                 = 5344;
    LSD_LCVEL                   = 5370;
    LSD_LCT                     = 5371;

}

CHECK(COMMON) 
{
    LSD_SPSF      >= 0;
    LSD_SPSF      <= 1;
    LSD_CN        >= 0;
    LSD_MU        >= 0;
    LSD_A         >= 0;
    LSD_CA        >= 0;
    LSDYNA_BETA   >= 0;
    LSD_LCID3     >= 0;
    LSD_A23       >= 0;
    LSD_LCIDM     >= 0;
    LSD_LCIDT     >= 0;
    LSD_BETA      >= 0;
    LSD_LCID      >= 0;
    LSD_LCID2     >= 0;
    LSD_PFAC      >= 0;

}
GUI(COMMON) 

{


    ASSIGN(KEYWORD_STR, "*AIRBAG");
    
    RADIO(airbagoption)
    {
        ADD(0, "SimplePressureVolume");
        ADD(1, "SimpleAirbagModel");
        ADD(2, "WangNefske");
        ADD(3, "Hybrid");
        ADD(4, "AdiabaticGasModel");
        ADD(5, "LinearFluid");
        ADD(6, "LoadCurve");
        ADD(7, "HybridChemkin");
        ADD(8, "Ale");
    }

    if(airbagoption != 8)
    {
        SCALAR(LSD_RBID);
        SCALAR(LSD_VSCA);
        SCALAR(LSD_PSCA);
        SCALAR(LSD_VINI);
    }
    
    SCALAR(LSD_MWD);
    SCALAR(LSD_SPSF); 
    if(LSD_RBID > 0)
    {
        RADIO(NoAbgSenParms)
        {
            ADD(0, "<OFF>");
            ADD(1, "1");
            ADD(2, "2");
            ADD(3, "3");
            ADD(4, "4");
            ADD(5, "5");
            ADD(6, "6");
            ADD(7, "7");
            ADD(8, "8");
            ADD(9, "9");
            ADD(10, "10");
            ADD(11, "11");
            ADD(12, "12");
            ADD(13, "13");
            ADD(14, "14");
            ADD(15, "15");
            ADD(16, "16");
            ADD(17, "17");
            ADD(18, "18");
            ADD(19, "19");
            ADD(20, "20");
            ADD(21, "21");
            ADD(22, "22");
            ADD(23, "23");
            ADD(24, "24");
            ADD(25, "25");

        }
    }
    if(NoAbgSenParms > 0)
    {
        SIZE(NoAbgSenParms);
        ARRAY(NoAbgSenParms,"")
        {
            SCALAR(AbgSenParsArray);
        }
    }

    if(LSD_RBID < 0)
    {
        SCALAR(LSD_AX);  
        SCALAR(LSD_AY);  
        SCALAR(LSD_AZ);  
        SCALAR(LSD_AMAG); 
        SCALAR(LSD_TDUR); 
        SCALAR(LSD_DVX); 
        SCALAR(LSD_DVY); 
        SCALAR(LSD_DVZ); 
        SCALAR(LSD_DVMAG);
        SCALAR(LSD_UX);
        SCALAR(LSD_UY);
        SCALAR(LSD_UZ);
        SCALAR(LSD_UMAG);
    }

/*
    RADIO(airbagoption)
    {
        ADD(0, "SimplePressureVolume");
        ADD(1, "SimpleAirbagModel");
        ADD(2, "WangNefske");
        ADD(3, "Hybrid");
        ADD(4, "AdiabaticGasModel");
        ADD(5, "LinearFluid");
        ADD(6, "LoadCurve");
        ADD(7, "HybridChemkin");
        ADD(8, "Ale");
    }
*/
    if(airbagoption == 0 || airbagoption == 3 || airbagoption == 8)
    {
        FLAG(LSD_LCIDOpt); 
    }
    if(airbagoption == 0 && LSD_LCIDOpt == FALSE)
    {
        SCALAR(LSD_CN);
    }
    if(airbagoption == 0 && LSD_LCIDOpt == TRUE)
    {
        DATA(LSD_LCID10);
    }

    if(airbagoption == 0)
    {
        ASSIGN(KEYWORD_STR, "_SIMPLE_PRESSURE_VOLUME");

        SCALAR(LSD_BETA); 
        DATA(LSD_LCIDDR);
    } 
    if(airbagoption == 0 || airbagoption == 1 || airbagoption == 2 || (airbagoption == 3 && LSD_HCONVOpt == TRUE) || airbagoption == 4 || airbagoption == 5 || airbagoption == 6 || (airbagoption == 7 && LSD_LCIDMOpt == TRUE) || (airbagoption == 7 && LSD_LCIDMOpt == FALSE) || (airbagoption == 8 && defineCurveFlag == TRUE))
    {
        DATA(LSD_LCID);
    }     
    if(airbagoption == 1 || airbagoption == 2)
    {
        SCALAR(LSD_CV);
        SCALAR(LSD_CP);
        SCALAR(LSD_aT);
    }
    if(airbagoption == 1)
    {
        ASSIGN(KEYWORD_STR, "_SIMPLE_AIRBAG_MODEL");

        FLAG(LSD_MUOpt_Airbag);
    }
    if(LSD_MUOpt_Airbag == FALSE )
    {
        SCALAR(LSD_MU);         
    }
    if(LSD_MUOpt_Airbag == TRUE )
    {
        DATA(LSD_MUEnt_Airbag);
    }
    if(airbagoption == 1)
    {
        FLAG(LSD_AOpt);
    }
    if(LSD_AOpt == FALSE )
    {
        SCALAR(LSD_A);        
    }
    if(LSD_AOpt == TRUE )
    {
        DATA(LSD_AEnt);
    }
    if(airbagoption == 1 || airbagoption == 2 || airbagoption == 4 || airbagoption == 6)
    {
        SCALAR(LSD_PE);
    }
    if(airbagoption == 1 || airbagoption == 2 || airbagoption == 4 || airbagoption == 5 || airbagoption == 6)
    {
        SCALAR(LSD_RO);
    }
    if(airbagoption == 1)
    {    
        DATA(LSD_LOU);
    }
    if(airbagoption == 1 || (airbagoption == 2 && LSD_CV== 0))
    {            
        SCALAR(LSD_TEXT);  
        SCALAR(LSD_aA);  
        SCALAR(LSD_aB);  
        SCALAR(LSD_MW);  
        SCALAR(LSD_GASC);  
    }
    if(airbagoption == 2 || airbagoption == 3 || airbagoption == 7)
    {
        SCALAR(LSD_C23);
    }
    if(airbagoption == 2 || (airbagoption == 3 && LSD_LCMINOpt == FALSE) || airbagoption == 7)
    {
        SCALAR(LSD_A23);
    }
    if(airbagoption == 2 || airbagoption == 3)
    {
        DATA(LSD_LCID4);
        DATA(LSD_LCID5);
        DATA(LSD_LCID6);
    }
    if(airbagoption == 2 || airbagoption == 3 || airbagoption == 8)
    {
        SCALAR(LSD_GC);
    }
    if(airbagoption == 2 || airbagoption == 3)
    {
        SCALAR(LSD_CP23);
        SCALAR(LSD_AP23);
    }
    if(airbagoption == 2 || airbagoption == 5 || (airbagoption == 7 && LSD_LCIDTOpt == TRUE) || (airbagoption == 7 && LSD_LCIDTOpt == TRUE))
    {    
        DATA(LSD_LCID2);
    }
    if(airbagoption == 2 || airbagoption == 5)
    {    
        DATA(LSD_LCID3);
    }
    if(airbagoption == 2)
    {  
        ASSIGN(KEYWORD_STR, "_WANG_NEFSKE");

        SCALAR(LSD_TVOL);
        DATA(LSD_LCDT);
        SCALAR(LSD_IABT);          
        DATA(LSD_LCID7);
        SCALAR(LSD_POVER);
        SCALAR(LSD_PPOP);
        RADIO(LSD_OPT)
        {
            ADD(0, "0: Default");
            ADD(1, "1: Wang-Nefske formulas for venting through an orifice are used. Blockage is not considered");
            ADD(2, "2: Wang-Nefske formulas for venting through an orifice are used. Blockage of venting area due to contact");
            ADD(3, "3: Leakage formulas of Graefe, Krummheuer and Siejak are used. Blockage is not considered");
            ADD(4, "4: Leakage formulas of Graefe, Krummheuer and Siejak are used. Blockage of venting area due to contact");
            ADD(5, "5: Leakage formula based on flow through a porous media are used. Blockage is not considered");
            ADD(6, "6: Leakage formula based on flow through a porous media are used. Blockage of venting area due to contact");
            ADD(7, "7: Leakage is based on gas volume outflow versus pressure load curve. Blockage due to contact is not considered");
            ADD(8, "8: Leakage is based on gas volume outflow versus pressure load curve. Blockage due to contact is considered");

        }
        DATA(LSD_LCID8);
    }
    if(airbagoption == 2 && LSD_LCID2 == NONE)
    {
        SCALAR(LSD_IOC); 
        SCALAR(LSD_IOA);
        SCALAR(LSD_IVOL);
        SCALAR(LSD_IRO);
        SCALAR(LSD_IT);
        DATA(LSD_LCBF);
    }
    if(airbagoption == 2 && LSD_CV== 0 || airbagoption == 3)
    {
        FLAG(LSD_HCONVOpt);
    }
    if((airbagoption == 2 && LSD_CV== 0 && LSD_HCONVOpt == FALSE) || (airbagoption == 3 && LSD_HCONVOpt == FALSE))
    {    
        SCALAR(LSD_HCONV_H);
    }
    if(airbagoption == 2 && LSD_CV== 0 && LSD_HCONVOpt == TRUE)
    {    
        DATA(LSD_LCID9);
    }
    if(airbagoption == 2)
    {
        FLAG(popoption);
    }
    if(airbagoption == 2 && popoption == TRUE)
    {
        SCALAR(LSD_TDP);
        SCALAR(LSD_AXP); 
        SCALAR(LSD_AYP); 
        SCALAR(LSD_AZP); 
        SCALAR(LSD_AMAGP); 
        SCALAR(LSD_TDURP); 
        SCALAR(LSD_TDA); 
        DATA(LSD_RBIDP); 
    }

    if(airbagoption == 3 || airbagoption == 8)
    {
        SCALAR(LSD_ATMOST);
        SCALAR(LSD_ATMOSP);
        SCALAR(LSD_CC);
    }    
    if(airbagoption == 3)
    {
        ASSIGN(KEYWORD_STR, "_HYBRID");

        SCALAR(LSD_ATMOSD);
    }
/*  if(airbagoption == 3 && LSD_LCIDOpt == FALSE)
    {
    DATA(LSD_LCID3);
    }
    if(airbagoption == 3 && LSD_LCIDOpt == TRUE)
    {
    DATA(LSD_LCID3);
    }
*/
    if(airbagoption == 3)
    {
        FLAG(LSD_LCMINOpt); 
    }
    if((airbagoption == 3 && LSD_LCMINOpt == TRUE) || (airbagoption == 8 && IVTYPE == 1) || (airbagoption == 8 && LSD_LCIDOpt == TRUE))
    {
        DATA(LSD_PID);
    }
    if(airbagoption == 3)
    {

        RADIO(LSD_OPTHybrid)
        {
            ADD(0, "0: Default");
            ADD(1, "1: Wang-Nefske formulas for venting through an orifice are used. Blockage is not considered");
            ADD(2, "2: Wang-Nefske formulas for venting through an orifice are used. Blockage of venting area due to contact");
            ADD(3, "3: Leakage formulas of Graefe, Krummheuer and Siejak are used. Blockage is not considered");
            ADD(4, "4: Leakage formulas of Graefe, Krummheuer and Siejak are used. Blockage of venting area due to contact");
            ADD(5, "5: Leakage formula based on flow through a porous media are used. Blockage is not considered");
            ADD(6, "6: Leakage formula based on flow through a porous media are used. Blockage of venting area due to contact");
            ADD(7, "7: Leakage is based on gas volume outflow versus pressure load curve. Blockage due to contact is not considered");
            ADD(8, "8: Leakage is based on gas volume outflow versus pressure load curve. Blockage due to contact is considered");

        }
        SCALAR(LSD_PVENT);
    }
    if(airbagoption == 3 || airbagoption == 7)
    {

        RADIO(LSD_NGAS)
        {
            ADD(0, "0");
            ADD(1, "1");
            ADD(2, "2");
            ADD(3, "3");
            ADD(4, "4");
            ADD(5, "5");
            ADD(6, "6");
            ADD(7, "7");
            ADD(8, "8");
            ADD(9, "9");
            ADD(10, "10");
            ADD(11, "11");
            ADD(12, "12");
            ADD(13, "13");
            ADD(14, "14");
            ADD(15, "15");
            ADD(16, "16");
            ADD(17, "17");
            ADD(18, "18");
            ADD(19, "19");
            ADD(20, "20");  
        }
    }

 /*     
        if(airbagoption == 3 && LSD_NGAS > 0)
        {
            SIZE(LSD_NGAS);
            ARRAY(LSD_NGAS,"")
            {
                DATA(LSD_LCIDM);
                DATA(LSD_LCIDT);
                SCALAR(LSD_MWHYB);
                SCALAR(LSD_INITM);
                SCALAR(LSD_HA);
                SCALAR(LSD_HB);
                SCALAR(LSD_HC);
                SCALAR(LSD_FMASS);
            }
        }
 */
    
        if(airbagoption == 3)
        {
            DATA(LSD_LCEFR);
            DATA(LSD_LCIDM0);

            RADIO(LSD_VNTOPT)
            {
                ADD(1,  "1: Vent area is equal to A23");
                ADD(2,  "2: Vent area is A23 plus the eroded surface area of the airbag parts");
                ADD(10, "10: Vent area is A23 plus the eroded surface area of the airbag parts");
            }


        }


        if(airbagoption == 2 || airbagoption == 3)
        {
            FLAG(jettingoption);
        }
        if(jettingoption == TRUE)
        {
            SCALAR(LSD_XJFP);
            SCALAR(LSD_YJFP);
            SCALAR(LSD_ZJFP);
            SCALAR(LSD_XJVH);
            SCALAR(LSD_YJVH);
            SCALAR(LSD_ZJVH);
            FLAG(multjetoption);
        }
        if(jettingoption == TRUE && multjetoption == FALSE)
        {
            FLAG(coneAngleCurveFlag);
        }
        if((jettingoption == TRUE && multjetoption == FALSE) && coneAngleCurveFlag == FALSE)
        {
            SCALAR(LSD_CA);    // It should be greater than ZERO
        }
  /*    if(((jettingoption == TRUE && multjetoption == FALSE) && coneAngleCurveFlag == TRUE) || (airbagoption == 3 && LSD_HCONVOpt == TRUE))
        {
        DATA(LSD_LCID);
        }
    */
        if((jettingoption == TRUE) && multjetoption == TRUE)
        {
            DATA(LSD_LCJRV);
        }
        if(jettingoption == TRUE)
        {
            FLAG(effiFactorCurveFlag);
        }
        if(jettingoption == TRUE && effiFactorCurveFlag == FALSE)
        {
            SCALAR(LSDYNA_BETA);    // It should be greater than ZERO
        }
  /*    if(jettingoption == TRUE && effiFactorCurveFlag == FALSE)
        {
        DATA(LSD_LCID2);
        }
  */
        if(jettingoption == TRUE)
        {
            SCALAR(LSD_XSJFP);
            SCALAR(LSD_YSJFP);
            SCALAR(LSD_ZSJFP);
            SCALAR(LSD_ANGLE);
            DATA(LSD_NODE1);
            DATA(LSD_NODE2);
            DATA(LSD_NODE3);
            FLAG(CMoption);
        }
        if(jettingoption == TRUE || (airbagoption == 8 && IVTYPE == 0))
        {
            DATA(LSD_PSID);
        }
        if(jettingoption == TRUE && CMoption == TRUE)
        {
            DATA(LSD_NREACT);
        }
        if(airbagoption == 4 || airbagoption == 8)
        {
            SCALAR(LSD_PSF);
            SCALAR(LSD_GAMMA);
        }
        if(airbagoption == 4)
        {
            ASSIGN(KEYWORD_STR, "_ADIBATIC_GAS_MODEL");

            SCALAR(LSD_P0);
        }

        if(airbagoption == 5)
        {
            ASSIGN(KEYWORD_STR, "_LINEAR_FLUID");

            SCALAR(LSDYNA_K);
            FLAG(FluidOptionalCards3);
        }
        if(FluidOptionalCards3 == TRUE)
        {
            SCALAR(LSD_P_LIMIT);
            DATA(LSD_P_LIMLC);
        }
        if(airbagoption == 6)
        {   
            ASSIGN(KEYWORD_STR, "_LOAD_CURVE");

            SCALAR(LSD_STIME);
            SCALAR(LSD_PO);
            SCALAR(LSD_T0);        
            SCALAR(LSD_TO);
        }
        if(airbagoption == 7)
        {
            ASSIGN(KEYWORD_STR, "_HYBRID_CHEMKIN");

            FLAG(LSD_LCIDMOpt);
            FLAG(LSD_LCIDTOpt);
        }
  /*    if(airbagoption == 7 && LSD_NGAS > 0)
        {
        SIZE(LSD_NGAS);
        ARRAY(LSD_NGAS,"")
        {
        SCALAR(LSD_CHNAME);
        SCALAR(LSD_MWHYB);
        DATA(LSD_LCIDM);
        SCALAR(LSD_FMOLE);
        SCALAR(LSD_FMOLET);
        }
        }
        if(airbagoption == 7 && LSD_NGAS > 0 && LSD_DATA == 1)
        {
        SIZE(LSD_NGAS);
        ARRAY(LSD_NGAS,"")
        {
        SCALAR(LSD_TLOW);  
        SCALAR(LSD_TMIDHYB);
        SCALAR(LSD_THIGH);
        SCALAR(LSD_ALOW);
        SCALAR(LSD_BLOW);
        SCALAR(LSD_CLOW);
        SCALAR(LSD_DLOW);
        SCALAR(LSD_ELOW);
        SCALAR(LSD_FLOW);
        SCALAR(LSD_HLOW);
        SCALAR(LSD_AHIGH);  
        SCALAR(LSD_BHIGH);  
        SCALAR(LSD_CHIGH);  
        SCALAR(LSD_DHIGH);  
        SCALAR(LSD_EHIGH);  
        SCALAR(LSD_FHIGH);  
        SCALAR(LSD_HHIGH);  
        }

        }
        if(airbagoption == 7 && LSD_NGAS > 0 && LSD_DATA == 3)
        {
        SIZE(LSD_NGAS);
        ARRAY(LSD_NGAS,"")
        {
        SCALAR(LSD_AHYB);
        SCALAR(LSD_BHYB);
        SCALAR(LSD_CHYB);
        SCALAR(LSD_DHYB);
        SCALAR(LSD_EHYB);
        }
        }
   */
        if(airbagoption == 7)
        {
            RADIO(LSD_DATA)
            {
                ADD(1, "1: NIST database");
                ADD(2, "2: CHEMKIN database");
                ADD(3, "3: Polynomial data");
            }
            SCALAR(LSD_ATMT);
            SCALAR(LSD_ATMP);
            SCALAR(LSD_RG);
            SCALAR(LSD_HCONV);
        }

        if(airbagoption == 8)
        {   
            ASSIGN(KEYWORD_STR, "_ALE");

            SCALAR(LSD_TNKVOL);
            SCALAR(LSD_TNKFINP);
            SCALAR(LSD_NQUAD);
            RADIO(LSD_CTYPE)
            {
                ADD(1, "1");
                ADD(2, "2");
                ADD(3, "3");
                ADD(4, "4: Penalty coupling with DIREC = 2 implied (default)");
                ADD(5, "5");
                ADD(6, "6: Penalty coupling in which DIREC is automatically set to DIREC = 1 for the unfolded region and DIREC = 2 for folded region");
            }
            FLAG(defineCurveFlag);
        }
        if(defineCurveFlag == FALSE)
        {
            SCALAR(LSD_PFAC);      
        }
        if(airbagoption == 8)
        {
            SCALAR(LSDYNA_FRIC);
            SCALAR(LSD_FRCMIN);
            RADIO(LSD_NORMTYP)
            {
                ADD(0, "0: Normal vectors are interpolated from nodal normals (default)");
                ADD(1, "1: Normal Vectors are interpolated from segment normals");
            }
            RADIO(LSD_ILEAK)
            {
                ADD(0, "0");
                ADD(1, "1");
                ADD(2, "2");
            }
            SCALAR(LSD_PLEAK);
            RADIO(IVTYPE)
            {   
                ADD(0, "Part Set ID");
                ADD(1, "Part ID");
                ADD(2, "SEgment Set");
            }
        }
        if(airbagoption == 8 && IVTYPE == 2)
        {
            DATA(LSD_NSID);
        }
        if(airbagoption == 8)
        {
            RADIO(LSD_IBLOCK)
            {
                ADD(0, "0: No (blockage is NOT considered)");
                ADD(1, "1: Yes (blockage is considered)");
            }
            SCALAR(LSD_VNTCOF);       
        }
        if(airbagoption == 8 && LSD_LCIDOpt == FALSE)
        {
            SCALAR(LSD_NXIDA);
            SCALAR(LSD_NYIDG);
        }
        if(airbagoption == 8 && LSD_LCIDOpt == TRUE)
        {
            DATA(LSD_PID2);
        }
        if(airbagoption == 8)
        {
            SCALAR(LSD_NZA);
            SCALAR(LSD_MOVERN);
            SCALAR(LSD_ZOOM);
        }
        if(airbagoption == 8 && LSD_NZA > 0)
        {
            SCALAR(LSD_X0);
            SCALAR(LSD_Y0);
            SCALAR(LSD_Z0);
            SCALAR(LSD_X1);
            SCALAR(LSD_Y1);
            SCALAR(LSD_Z1);
            SCALAR(LSD_IPAIR);
            SCALAR(LSD_IPGAS);
            SCALAR(LSD_X2);
            SCALAR(LSD_Y2);
            SCALAR(LSD_Z2);
            SCALAR(LSD_X3);
            SCALAR(LSD_Y3);
            SCALAR(LSD_Z3);
        }    
  /*    if(airbagoption == 8)
        {
        SIZE(LSD_DATA);
        }
        if(LSD_DATA > 0)
        {
        ARRAY(LSD_DATA, "");
        {
        SCALAR(LSD_MWAIR);
        SCALAR(LSD_INITM1);
        SCALAR(LSD_AIRA);
        SCALAR(LSD_AIRB);
        SCALAR(LSD_AIRC);
        }
        }

        if(airbagoption == 8)
        {
        SIZE(LSD_NGAS);
        }
        if(LSD_NGAS > 0)
        {
        ARRAY(LSD_NGAS, "");
        {
        DATA(LSD_LCMF);
        SCALAR(LSD_MWGAS);
        SCALAR(LSD_GASA);
        SCALAR(LSD_GASB);
        SCALAR(LSD_ALEGASC);
        }
        }
        if(airbagoption == 8)
        {
        SIZE(LSD_LCIDM1);
        }
        if(LSD_LCIDM1 > 0)
        {
        ARRAY(LSD_LCIDM1, "");
        {
        DATA(LSD_NODEID);
        DATA(LSD_VECID);
        SCALAR(LSD_ORIFARE);

        }
        }
    */

        if(airbagoption == 8)
        {        
            DATA(LSD_LCVEL);
            DATA(LSD_LCT);
        }

        ASSIGN(KEYWORD_STR, "_ID");


    }

    // File format
    FORMAT(Keyword971) 
    {
        //
        if(airbagoption != 8)
        {
            //
            COMMENT("$       ID    SIDTYP      RBID      VSCA      PSCA      VINI       MWD      SPSF");
            CARD("%10d          %10d%10lg%10lg%10lg%10lg%10lg",_ID_,LSD_RBID,LSD_VSCA,LSD_PSCA,LSD_VINI,LSD_MWD,LSD_SPSF);
            //
        }
        if(LSD_RBID < 0)
        {
            //
            COMMENT("$       AX        AY        AZ      AMAG      TDUR");
            CARD("%10lg%10lg%10lg%10lg%10lg",LSD_AX, LSD_AY, LSD_AZ, LSD_AMAG, LSD_TDUR);
            //
            COMMENT("$      DVX       DVY       DVZ     DVMAG");
            CARD("%10lg%10lg%10lg%10lg", LSD_DVX, LSD_DVY, LSD_DVZ, LSD_DVMAG);
            //
            COMMENT("$       UX        UY        UZ      UMAG");
            CARD("%10lg%10lg%10lg%10lg", LSD_UX, LSD_UY, LSD_UZ, LSD_UMAG);
            //
        }                              
        if(LSD_RBID > 0)               
        {
            //
            COMMENT("$        N");
            CARD("%10d",NoAbgSenParms );
            //
            //   COMMENT("");
            //   CARD("", );
            //
        }
        if(airbagoption == 0)
        {
            //
            COMMENT("$       CN      BETA      LCID    LCIDDR");
            CARD("%10lg%10lg%10d%10d",SCALAR_OR_OBJECT(LSD_LCIDOpt,LSD_CN,LSD_LCID10), LSD_BETA, LSD_LCID, LSD_LCIDDR );
            //
        }
        if(airbagoption == 1)
        {
            //
            COMMENT("$       CV        CP         T      LCID        MU         A        PE        RO");
            CARD("%10lg%10lg%10lg%10d%10lg%10lg%10lg%10lg",LSD_CV ,LSD_CP ,LSD_aT ,LSD_LCID, SCALAR_OR_OBJECT( LSD_MUOpt_Airbag,LSD_MU ,LSD_MUEnt_Airbag ), SCALAR_OR_OBJECT(LSD_AOpt,LSD_A ,LSD_AEnt),LSD_PE,LSD_RO);
            //
            COMMENT("$      LOU      TEXT         A         B        MW      GASC");
            CARD("%10d%10lg%10lg%10lg%10lg%10lg",LSD_LOU ,LSD_TEXT ,LSD_aA ,LSD_aB,LSD_MW ,LSD_GASC);
            //
        }                   
        if(airbagoption == 2) //
        {
            //
            COMMENT("$       CV        CP         T       LCT      LCMT      TVOL      LCDT      IABT");
            CARD("%10lg%10lg%10lg%10d%10d%10lg%10d%10lg",LSD_CV ,LSD_CP ,LSD_aT ,LSD_LCID ,LSD_LCID2 ,LSD_TVOL, LSD_LCDT, LSD_IABT);
            //
            COMMENT("$      C23     LCC23       A23     LCA23      CP23    LCCP23");
            CARD("%10lg%10d%10lg%10d%10lg%10d",LSD_C23 ,LSD_LCID3 ,LSD_A23 ,LSD_LCID4 ,LSD_CP23 ,LSD_LCID5);
            //
            COMMENT("$       PE        RO        GC     LCEFR     POVER      PPOP       OPT     KNKDN");
            CARD("%10lg%10lg%10lg%10d%10lg%10lg%10lg%10d",LSD_PE ,LSD_RO ,LSD_GC ,LSD_LCID7 ,LSD_POVER ,LSD_PPOP ,LSD_OPT ,LSD_LCID8);
            //
            COMMENT("$      IOC       IOA      IVOL       IRO        IT      LCBF");
            CARD("%10lg%10lg%10lg%10lg%10lg%10d",LSD_IOC ,LSD_IOA ,LSD_IVOL ,LSD_IRO ,LSD_IT ,LSD_LCBF);
            //
            COMMENT("$      IOC       IOA      IVOL       IRO        IT      LCBF");
            CARD("%10lg%10lg%10lg%10lg%10lg%10d",LSD_IOC ,LSD_IOA ,LSD_IVOL ,LSD_IRO ,LSD_IT ,LSD_LCBF);
        } 
        if(LSD_CV == 0)
        {
            //
            COMMENT("$     TEXT         A         B        MW      GASC     HCONV");
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_TEXT ,LSD_aA ,LSD_aB ,LSD_MW ,LSD_GASC, LSD_HCONV);
            //
        }
        if(airbagoption == 2 && popoption == TRUE)
        {
            //
            COMMENT("$      TDP       AXP       AYP       AZP     AMAGP     TDURP       TDA     RBIDP");
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10d",LSD_TDP ,LSD_AXP ,LSD_AYP ,LSD_AZP ,LSD_AMAGP ,LSD_TDURP ,LSD_TDA ,LSD_RBIDP);
            //
        }
        if(airbagoption == 2 && jettingoption == TRUE && multjetoption == FALSE)
        {
            //
            COMMENT("$     XJFP      YJFP      ZJFP      XJVH      YJVH      ZJVH     LCJRV      BETA");
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d%10lg",LSD_XJFP ,LSD_YJFP ,LSD_ZJFP ,LSD_XJVH ,LSD_YJVH ,LSD_ZJVH ,LSD_LCJRV, SCALAR_OR_OBJECT(effiFactorCurveFlag,LSDYNA_BETA,LSD_LCID2));
            //
            COMMENT("$    XSJFP     YSJFP     ZSJFP      PSID     ANGLE     NODE1     NODE2     NODE3");
            CARD("%10lg%10lg%10lg%10d%10lg%10d%10d%10d",LSD_XSJFP ,LSD_YSJFP ,LSD_ZSJFP ,LSD_PSID ,LSD_ANGLE ,LSD_NODE1 ,LSD_NODE2 ,LSD_NODE3);
            // 
        }
        if(airbagoption == 2 && jettingoption == TRUE && multjetoption == TRUE)
        {
            //
            COMMENT("$     XJFP      YJFP      ZJFP      XJVH      YJVH      ZJVH        CA      BETA");
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_XJFP ,LSD_YJFP ,LSD_ZJFP ,LSD_XJVH ,LSD_YJVH ,LSD_ZJVH ,SCALAR_OR_OBJECT(coneAngleCurveFlag,LSD_CA,LSD_LCID), SCALAR_OR_OBJECT(effiFactorCurveFlag,LSDYNA_BETA,LSD_LCID2));
            //
            COMMENT("$    XSJFP     YSJFP     ZSJFP      PSID     ANGLE     NODE1     NODE2     NODE3");
            CARD("%10lg%10lg%10lg%10d%10lg%10d%10d%10d",LSD_XSJFP ,LSD_YSJFP ,LSD_ZSJFP ,LSD_PSID ,LSD_ANGLE ,LSD_NODE1 ,LSD_NODE2 ,LSD_NODE3);
            // 
        }
        if(airbagoption == 2 && jettingoption == TRUE && CMoption == TRUE)
        {
            //
            COMMENT("$   NREACT");
            CARD("%10d",LSD_NREACT);
            //
        }
        if(airbagoption == 3)
        {
            //
            COMMENT("$   ATMOST    ATMOSP    ATMOSD        GC        CC     HCONV");
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_ATMOST, LSD_ATMOSP, LSD_ATMOSD, LSD_GC, LSD_CC, SCALAR_OR_OBJECT(LSD_HCONVOpt,LSD_HCONV_H,LSD_LCID));
            //
            COMMENT("$      C23     LCC23       A23     LCA23      CP23     LCP23      AP23    LCAP23");
            CARD("%10lg%10d%10lg%10d%10lg%10d%10lg%10d",LSD_C23 ,LSD_LCID3, LSD_A23, LSD_LCID4, LSD_CP23, LSD_LCID5, LSD_AP23, LSD_LCID6);
            //
            COMMENT("$      OPT     PVENT      NGAS     LCEFR    LCIDM0    VNTOPT");
            CARD("%10d%10lg%10d%10d%10d%10d",LSD_OPTHybrid ,LSD_PVENT ,LSD_NGAS ,LSD_LCEFR ,LSD_LCIDM0 ,LSD_VNTOPT);
            //
        }
        if(airbagoption == 3 && jettingoption == TRUE && multjetoption == FALSE)
        {
            //
            COMMENT("$     XJFP      YJFP      ZJFP      XJVH      YJVH      ZJVH     LCJRV      BETA");
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d%10lg",LSD_XJFP ,LSD_YJFP ,LSD_ZJFP ,LSD_XJVH ,LSD_YJVH ,LSD_ZJVH ,LSD_LCJRV, SCALAR_OR_OBJECT(effiFactorCurveFlag,LSDYNA_BETA,LSD_LCID2));
            //
            COMMENT("$    XSJFP     YSJFP     ZSJFP      PSID     ANGLE     NODE1     NODE2     NODE3");
            CARD("%10lg%10lg%10lg%10d%10lg%10d%10d%10d",LSD_XSJFP ,LSD_YSJFP ,LSD_ZSJFP ,LSD_PSID ,LSD_ANGLE ,LSD_NODE1 ,LSD_NODE2 ,LSD_NODE3);
            // 
        }
        if(airbagoption == 3 && jettingoption == TRUE && multjetoption == TRUE)
        {
            //
            COMMENT("$     XJFP      YJFP      ZJFP      XJVH      YJVH      ZJVH        CA      BETA");
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_XJFP ,LSD_YJFP ,LSD_ZJFP ,LSD_XJVH ,LSD_YJVH ,LSD_ZJVH ,SCALAR_OR_OBJECT(coneAngleCurveFlag,LSD_CA,LSD_LCID), SCALAR_OR_OBJECT(effiFactorCurveFlag,LSDYNA_BETA,LSD_LCID2));
            //
            COMMENT("$    XSJFP     YSJFP     ZSJFP      PSID     ANGLE     NODE1     NODE2     NODE3");
            CARD("%10lg%10lg%10lg%10d%10lg%10d%10d%10d",LSD_XSJFP ,LSD_YSJFP ,LSD_ZSJFP ,LSD_PSID ,LSD_ANGLE ,LSD_NODE1 ,LSD_NODE2 ,LSD_NODE3);
            // 
        }
        if(airbagoption == 3 && jettingoption == TRUE && CMoption == TRUE)
        {
            //
            COMMENT("$   NREACT");
            CARD("%10d",LSD_NREACT);
            //
        }
        if(airbagoption == 4)
        {
            //
            COMMENT("$      PSF      LCID     GAMMA        P0        PE        RO");
            CARD("%10lg%10d%10lg%10lg%10lg%10lg",LSD_PSF ,LSD_LCID ,LSD_GAMMA ,LSD_P0 ,LSD_PE ,LSD_RO);
            //   
        }
        if(airbagoption == 5)
        {
            //    
            COMMENT("$     BULK        RO     LCINT    LCOUTT    LCOUTP     LCFIT    LCBULK      LCID");
            CARD("%10lg%10lg%10d%10d%10d%10d%10d%10d",LSDYNA_K ,LSD_RO ,LSD_LCID ,LSD_LCID2 ,LSD_LCID3 ,LSD_LCID4 ,LSD_LCID5 ,LSD_LCID6);
            //
        }
        if(airbagoption == 5 && FluidOptionalCards3 == TRUE)
        {
            //
            COMMENT("$  P_LIMIT   P_LIMLC");
            CARD("%10lg%10d",LSD_P_LIMIT,LSD_P_LIMLC);
            //
        }
        if(airbagoption == 6)
        {
            //
            COMMENT("$    STIME      LCID        RO        PE        P0         T        T0");
            CARD("%10lg%10d%10lg%10lg%10lg%10lg%10lg",LSD_STIME ,LSD_LCID ,LSD_RO ,LSD_PE ,LSD_PO ,LSD_T0 ,LSD_TO);
            //
        }
        if(airbagoption == 7)
        {
            //
            COMMENT("$    LCIDM     LCIDT      NGAS      DATA      ATMT      ATMP        RG");
            CARD("%10d%10d%10d%10d%10lg%10lg%10lg",LSD_LCID ,LSD_LCID2 ,LSD_NGAS ,LSD_DATA ,LSD_ATMT ,LSD_ATMP ,LSD_RG);
            //
            COMMENT("$    HCONV");
            CARD("%10lg",LSD_HCONV);
            //
            COMMENT("$      C23       A23");
            CARD("%10lg%10lg",LSD_C23 ,LSD_A23);
            //
            // ------------------INCOMPLETE------------------------
        }
        if(airbagoption == 8)
        {
            //
            COMMENT("$       ID    SIDTYP                                               MWD      SPSF");
            CARD("%10d                                                  %10lg%10lg",_ID_,LSD_MWD,LSD_SPSF);
            //
            COMMENT("$   ATMOST    ATMOSP                  GC        CC    TNKVOL   TNKFINP");
            CARD("%10lg%10lg          %10lg%10lg%10lg%10lg",LSD_ATMOST,LSD_ATMOSP,LSD_GC,LSD_CC,LSD_TNKVOL,LSD_TNKFINP);
            //
            COMMENT("$    NQUAD     CTYPE      PFAC      FRIC    FRCMIN   NORMTYP     ILEAK     PLEAK");
            CARD("%10d%10d%10lg%10lg%10lg%10d%10d%10lg",LSD_NQUAD,LSD_CTYPE,LSD_PFAC,LSDYNA_FRIC,LSD_FRCMIN,LSD_NORMTYP,LSD_ILEAK,LSD_PLEAK);
            //
        }
        if(airbagoption == 8 && IVTYPE == 0)
        {
            //
            COMMENT("$  IVSETID    IVTYPE    IBLOCK    VNTCOF");
            CARD("%10d%10d%10d%10lg",LSD_PSID,IVTYPE,LSD_IBLOCK,LSD_VNTCOF);
            //
        }
        if(airbagoption == 8 && IVTYPE == 1)
        {
            //
            COMMENT("$  IVSETID    IVTYPE    IBLOCK    VNTCOF");
            CARD("%10d%10d%10d%10lg",LSD_PID,IVTYPE,LSD_IBLOCK,LSD_VNTCOF);
            //
        }
        if(airbagoption == 8 && IVTYPE == 2)
        {
            //
            COMMENT("$  IVSETID    IVTYPE    IBLOCK    VNTCOF");
            CARD("%10d%10d%10d%10lg",LSD_NSID,IVTYPE,LSD_IBLOCK,LSD_VNTCOF);
            //
        }
        if(airbagoption == 8)
        {
            //
            COMMENT("$   NX/IDA    NY/IDG        NZ    MOVERN      ZOOM");
            CARD("%10d%10d%10d%10d%10d",SCALAR_OR_OBJECT(LSD_LCIDOpt,LSD_NXIDA,LSD_PID),SCALAR_OR_OBJECT(LSD_LCIDOpt,LSD_NYIDG,LSD_PID2),LSD_NZA,LSD_MOVERN,LSD_ZOOM);
            //
            COMMENT("$       X0        Y0        Z0        X1        Y1        Z1     IPAIR     IPGAS");
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d%10d",LSD_X0,LSD_Y0,LSD_Z0,LSD_X1,LSD_Y1,LSD_Z1,LSD_IPAIR,LSD_IPGAS);
            //
            COMMENT("$       X2        Y2        Z2        X3        Y3        Z3");
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_X2,LSD_Y2,LSD_Z2,LSD_X3,LSD_Y3,LSD_Z3);
            //
            COMMENT("$   SWTIME                  HG      NAIR      NGAS     NORIF     LCVEL       LCT");
            CARD("%10lg          %10lg%10d%10d%10d%10d%10d",LSD_PSF,LSD_GAMMA,LSD_DATA,LSD_NGAS,LSD_LCIDM1,LSD_LCVEL,LSD_LCT);
            //  
        }

        if(airbagoption == 8 && LSD_DATA > 0)        // --------------------------INCOMPLETE----------------------
        {
            //
            COMMENT("$                                  MWAIR     INITM      AIRA      AIRB      AIRC");
            CARD("                              %10lg%10lg%10lg%10lg%10lg",LSD_MWAIR,LSD_INITM1,LSD_AIRA,LSD_AIRB,LSD_AIRC);
            //
        }
        if(airbagoption == 8 && LSD_NGAS > 0)        // --------------------------INCOMPLETE----------------------
        {
            //
            COMMENT("$     LCMF                         MWGAS                GASA      GASB      GASC");
            CARD("%10lg                    %10lg          %10lg%10lg%10lg",LSD_LCMF,LSD_MWGAS,LSD_GASA,LSD_GASB,LSD_ALEGASC);
            //
        }
        if(airbagoption == 8 && LSD_LCIDM1 > 0)        // --------------------------INCOMPLETE----------------------
        {
            //
            COMMENT("$   NODEID     VECID   ORIFARE");
            CARD("%10d%10d%10d",LSD_NODEID,LSD_VECID,LSD_ORIFARE);
            //
        }

    }