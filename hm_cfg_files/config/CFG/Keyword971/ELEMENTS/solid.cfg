//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Solid element Setup File
// 

ATTRIBUTES(COMMON) {
  // Common attributes
  NB_ELE    = SIZE("Number of elements");
  id        = ARRAY[NB_ELE](INT,"Element identifier","EID");// { SUBTYPES = (/ELEMENT/SOLID_IDPOOL) ; }
  collector = ARRAY[NB_ELE](INT,"Part","PID");
  node1  = ARRAY[NB_ELE](INT,"Node identifier 1","N1");
  node2  = ARRAY[NB_ELE](INT,"Node identifier 2","N2");
  node3  = ARRAY[NB_ELE](INT,"Node identifier 3","N3");
  node4  = ARRAY[NB_ELE](INT,"Node identifier 4","N4");
  node5  = ARRAY[NB_ELE](INT,"Node identifier 5","N5");
  node6  = ARRAY[NB_ELE](INT,"Node identifier 6","N6");
  node7  = ARRAY[NB_ELE](INT,"Node identifier 7","N7");
  node8  = ARRAY[NB_ELE](INT,"Node identifier 8","N8");
  node9  = ARRAY[NB_ELE](INT,"Node identifier 9","N9");
  node10 = ARRAY[NB_ELE](INT,"Node identifier 10","N10");
  
  
  Elem_Option                             = VALUE(INT,  "");
  
    //
  if_TET4TOTET10  = VALUE(INT,"TET4TOTET10 option","if_TET4TOTET10");
  if_ORTHO      = VALUE(INT,"ORTHO option","if_ORTHO");
  if_DOF        = VALUE(INT,"DOF option","if_DOF");
  //
  LSD_ELEM_A1        = ARRAY[NB_ELE](FLOAT,"x-component of local material direction a","A1");
  LSD_ELEM_A2        = ARRAY[NB_ELE](FLOAT,"y-component of local material direction a","A2");
  LSD_ELEM_A3        = ARRAY[NB_ELE](FLOAT,"z-component of local material direction a","A3");
  LSD_ELEM_D1        = ARRAY[NB_ELE](FLOAT,"x-component of vector in the plane of the material vectors a and b.","D1");
  LSD_ELEM_D2        = ARRAY[NB_ELE](FLOAT,"y-component of vector in the plane of the material vectors a and b.","D2");
  LSD_ELEM_D3        = ARRAY[NB_ELE](FLOAT,"z-component of vector in the plane of the material vectors a and b.","D3");
  NS1       = ARRAY[NB_ELE](INT,"Scalar node 1","NS1");
  NS2       = ARRAY[NB_ELE](INT,"Scalar node 2","NS2");
  NS3       = ARRAY[NB_ELE](INT,"Scalar node 3","NS3");
  NS4       = ARRAY[NB_ELE](INT,"Scalar node 4","NS4");
  NS5       = ARRAY[NB_ELE](INT,"Scalar node 5","NS5");
  NS6       = ARRAY[NB_ELE](INT,"Scalar node 6","NS6");
  NS7       = ARRAY[NB_ELE](INT,"Scalar node 7","NS7");
  NS8       = ARRAY[NB_ELE](INT,"Scalar node 8","NS8");
    //
  //KEYWORD_STR   = VALUE(STRING, "Solver Keyword");
  IOFLAG        = VALUE(INT, "IOFLAG");
  _opt          = VALUE(STRING, "Option");
  tmpvar        = VALUE(INT, "Check");
} 

DRAWABLES(COMMON) {
 public:
  VOLUME    = VOLUME();
  TIME_STEP = TIME_STEP();
}

GUI(COMMON) {	
	FLAG(if_TET4TOTET10);
    FLAG(if_ORTHO);
    FLAG(if_DOF);
 mandatory:
    SIZE(NB_ELE) ;
    ARRAY(NB_ELE,"element data")
    {
         SCALAR(id) ;
         SCALAR(collector);
         SCALAR(node1);
         SCALAR(node2);
         SCALAR(node3);
         SCALAR(node4);
 optional:
         SCALAR(node5);
         SCALAR(node6);
         SCALAR(node7);
         SCALAR(node8);
         SCALAR(node9);
         SCALAR(node10);
        if(if_ORTHO == 1)
        {
            SCALAR(LSD_ELEM_A1) { DIMENSION="l"; }
            SCALAR(LSD_ELEM_A2) { DIMENSION="l"; }
            SCALAR(LSD_ELEM_A3) { DIMENSION="l"; }
            SCALAR(LSD_ELEM_D1) { DIMENSION="DIMENSIONLESS"; }
            SCALAR(LSD_ELEM_D2) { DIMENSION="DIMENSIONLESS"; }
            SCALAR(LSD_ELEM_D3) { DIMENSION="DIMENSIONLESS"; }
        }
        if(if_ORTHO == 1)
        {
            SCALAR(NS1) { DIMENSION="DIMENSIONLESS"; }
            SCALAR(NS2) { DIMENSION="DIMENSIONLESS"; }
            SCALAR(NS3) { DIMENSION="DIMENSIONLESS"; }
            SCALAR(NS4) { DIMENSION="DIMENSIONLESS"; }
            SCALAR(NS5) { DIMENSION="DIMENSIONLESS"; }
            SCALAR(NS6) { DIMENSION="DIMENSIONLESS"; }
            SCALAR(NS7) { DIMENSION="DIMENSIONLESS"; }
            SCALAR(NS8) { DIMENSION="DIMENSIONLESS"; }
        }
    }  
}

FORMAT(Keyword971) 
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);
    if(IOFLAG==0)
    {
      if(if_TET4TOTET10 == 1)
            ASSIGN(_opt,_COMBINE(_opt,"_TET4TOTET10"),EXPORT);
      if(if_ORTHO == 1)
            ASSIGN(_opt ,_COMBINE(_opt,"_ORTHO"),EXPORT);
      if(if_DOF == 1)
            ASSIGN(_opt    ,_COMBINE(_opt,"_DOF"),EXPORT);

    }
    HEADER("*ELEMENT_SOLID%-s",_opt);
    if(IOFLAG==1)
    {
        ASSIGN(if_TET4TOTET10,_FIND(_opt,"_TET4TOTET10"),IMPORT);
        ASSIGN(if_ORTHO ,_FIND(_opt,"_ORTHO"),IMPORT);
        ASSIGN(if_DOF    ,_FIND(_opt,"_DOF"),IMPORT);
    }
    COMMENT("$    EID     PID");
//    COMMENT("$     N1      N2      N3      N4      N5      N6      N7      N8      N9     N10");

    CARD_PREREAD("%8d%8d%8d",_BLANK_,_BLANK_, tmpvar);
    
    if(tmpvar != 0)
    {
         FREE_CARD_LIST(NB_ELE)
         {
             CARD("%8d%8d%8d%8d%8d%8d%8d%8d%8d%8d",id,collector,node1,node2,node3,node4,node5,node6,node7,node8);
         }
    }
    else if(if_ORTHO == 1 && if_DOF == 0)
    {
         FREE_CARD_LIST(NB_ELE)
         {
             CARD("%8d%8d",id,collector);
             CARD("%8d%8d%8d%8d%8d%8d%8d%8d%8d%8d",node1,node2,node3,node4,node5,node6,node7,node8,node9,node10);
             CARD("%16lg%16lg%16lg", LSD_ELEM_A1, LSD_ELEM_A2, LSD_ELEM_A3);
             CARD("%16lg%16lg%16lg", LSD_ELEM_D1, LSD_ELEM_D2, LSD_ELEM_D3);
         }
    }
    else if(if_ORTHO == 0 && if_DOF != 0)
    {
         FREE_CARD_LIST(NB_ELE)
         {
             CARD("%8d%8d",id,collector);
             CARD("%8d%8d%8d%8d%8d%8d%8d%8d%8d%8d",node1,node2,node3,node4,node5,node6,node7,node8,node9,node10);
             CARD("%16s%8d%8d%8d%8d%8d%8d%8d%8d",_BLANK_,NS1,NS2,NS3,NS4,NS5,NS6,NS7,NS8);
         }
    }
    else if(if_ORTHO != 0 && if_DOF != 0)
    {
         FREE_CARD_LIST(NB_ELE)
         {
             CARD("%8d%8d",id,collector);
             CARD("%8d%8d%8d%8d%8d%8d%8d%8d%8d%8d",node1,node2,node3,node4,node5,node6,node7,node8,node9,node10);
             CARD("%16lg%16lg%16lg", LSD_ELEM_A1, LSD_ELEM_A2, LSD_ELEM_A3);
             CARD("%16lg%16lg%16lg", LSD_ELEM_D1, LSD_ELEM_D2, LSD_ELEM_D3);
             CARD("%16s%8d%8d%8d%8d%8d%8d%8d%8d",_BLANK_,NS1,NS2,NS3,NS4,NS5,NS6,NS7,NS8);
         }
    }
    else
    {
        FREE_CARD_LIST(NB_ELE)
        {
            CARD("%8d%8d",id,collector);
            CARD("%8d%8d%8d%8d%8d%8d%8d%8d%8d%8d",node1,node2,node3,node4,node5,node6,node7,node8,node9,node10);
        }
    }
}