//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Beam element Setup File
// 

ATTRIBUTES(COMMON) {
  // Common attributes
  NB_ELE    = SIZE("Number of elements");
  id        = ARRAY[NB_ELE](INT,"Element identifier","EID");// { SUBTYPES = (/ELEMENT/BEAM_IDPOOL) ; }
  collector = ARRAY[NB_ELE](INT,"Part","PID");
  node1     = ARRAY[NB_ELE](INT,"Node identifier 1","N1");
  node2     = ARRAY[NB_ELE](INT,"Node identifier 2","N2");
  node3     = ARRAY[NB_ELE](INT,"Node identifier 3","N3");
  //
  LSD_RT1   = ARRAY[NB_ELE](INT,"Release conditions for translations at nodes N1","RT1");
  LSD_RR1   = ARRAY[NB_ELE](INT,"Release conditions for rotations at nodes N1","RR1");
  LSD_RT2   = ARRAY[NB_ELE](INT,"Release conditions for translations at nodes N2","RT2");
  LSD_RR2   = ARRAY[NB_ELE](INT,"Release conditions for rotations at nodes N2","RR2");
  LSD_LOCAL = ARRAY[NB_ELE](INT,"Coordinate system option","LOCAL");
  //
  LSD_PARM1     = ARRAY[NB_ELE](FLOAT,"Based on beam type","PARM1");
  LSD_PARM2     = ARRAY[NB_ELE](FLOAT,"Based on beam type","PARM2");
  LSD_PARM3     = ARRAY[NB_ELE](FLOAT,"Based on beam type","PARM3");
  LSD_PARM4     = ARRAY[NB_ELE](FLOAT,"Based on beam type","PARM4");
  LSD_PARM5     = ARRAY[NB_ELE](FLOAT,"Based on beam type","PARM5");
  //
  STYPE     = ARRAY[NB_ELE](STRING, "Section type (A format)","STYPE");
  D1        = ARRAY[NB_ELE](FLOAT,"Input parameters for section option using STYPE above","D1");
  D2        = ARRAY[NB_ELE](FLOAT,"Input parameters for section option using STYPE above","D2");
  D3        = ARRAY[NB_ELE](FLOAT,"Input parameters for section option using STYPE above","D3");
  D4        = ARRAY[NB_ELE](FLOAT,"Input parameters for section option using STYPE above","D4");
  D5        = ARRAY[NB_ELE](FLOAT,"Input parameters for section option using STYPE above","D5");
  D6        = ARRAY[NB_ELE](FLOAT,"Input parameters for section option using STYPE above","D6");
  //
  LSD_VOL       = ARRAY[NB_ELE](FLOAT,"Volume of discrete beam and scalar beam","VOL");
  LSD_INER      = ARRAY[NB_ELE](FLOAT,"Mass moment of inertia for the six degree of freedom discrete beam and scalar beam","INER");
  ElemBeam_CID       = ARRAY[NB_ELE](INT,"Coordinate system ID for orientation, material type 146","CID");
  ElemBeam_DOF1     = ARRAY[NB_ELE](FLOAT,"Active degree-of-freedom at node 1","DOFN1");
  ElemBeam_DOF2     = ARRAY[NB_ELE](FLOAT,"Active degree-of-freedom at node 2","DOFN2");
  //
  //CID1      = ARRAY[NB_ELE](SYSTEM,"Coordinate system ID at node 1 for orientation, material type 146","CID1");
  //CID2      = ARRAY[NB_ELE](SYSTEM,"Coordinate system ID at node 2 for orientation, material type 146","CID2");
  //DOFNS     = ARRAY[NB_ELE](FLOAT,"Active degrees-of-freedom at node 1 and node 2","DOFNS");
  //
  LSD_PID2      = ARRAY[NB_ELE](INT,"Optional part ID for spot weld element type 9","PID1");
  LSD_PID3      = ARRAY[NB_ELE](INT,"Optional part ID for spot weld element type 9","PID2");
  //
  offsetax       = ARRAY[NB_ELE](FLOAT,"Offset vector at nodal point N1","WX1");
  offsetay       = ARRAY[NB_ELE](FLOAT,"Offset vector at nodal point N1","WY1");
  offsetaz       = ARRAY[NB_ELE](FLOAT,"Offset vector at nodal point N1","WZ1");
  offsetbx       = ARRAY[NB_ELE](FLOAT,"Offset vector at nodal point N2","WX2");
  offsetby       = ARRAY[NB_ELE](FLOAT,"Offset vector at nodal point N2","WY2");
  offsetbz       = ARRAY[NB_ELE](FLOAT,"Offset vector at nodal point N2","WZ2");
  //
  LSD_VX        = ARRAY[NB_ELE](FLOAT,"Orientation vector at node N1","VX");
  LSD_VY        = ARRAY[NB_ELE](FLOAT,"Orientation vector at node N1","VY");
  LSD_VZ        = ARRAY[NB_ELE](FLOAT,"Orientation vector at node N1","VZ");
  //
  SN1       = ARRAY[NB_ELE](INT,"Scalar nodal point (end) 1","SN1");
  SN2       = ARRAY[NB_ELE](INT,"Scalar nodal point (end) 2","SN2");
  //
  if_THICKNESS   = VALUE(INT,"THICKNESS option","if_THICKNESS");
  if_SCALAR      = VALUE(INT,"SCALAR option","if_SCALAR");
  if_SCALR       = VALUE(INT,"SCALR option","if_SCALR");
  if_SECTION     = VALUE(INT,"SECTION option","if_SECTION");
  if_PID         = VALUE(INT,"PID option","if_PID");
  if_OFFSET      = VALUE(INT,"OFFSET option","if_OFFSET");
  if_ORIENTATION = VALUE(INT,"ORIENTATION option","if_ORIENTATION");
  if_WARPAGE     = VALUE(INT,"WARPAGE option","if_WARPAGE");
  //
   IOFLAG        = VALUE(INT, "IOFLAG");
  _opt           = VALUE(STRING, "Option");
}

DRAWABLES(COMMON) {
 public:
  TIME_STEP = TIME_STEP();
}

GUI(COMMON) {
mandatory:
    SIZE(NB_ELE) ;
    ARRAY(NB_ELE,"element data")
    {
        SCALAR(id) ;
        SCALAR(collector);
        SCALAR(node1);
        SCALAR(node2);
 optional:
        SCALAR(node3);
         
        RADIO(LSD_RT1)
        {
            ADD(0, "0: no translational degrees-of-freedom are released");
            ADD(1, "1: x-translational degree-of-freedom");
            ADD(2, "2: y-translational degree-of-freedom");
            ADD(3, "3: z-translational degree-of-freedom");
            ADD(4, "4: x and y-translational degrees-of-freedom");
            ADD(5, "5: y and z-translational degrees-of-freedom");
            ADD(6, "6: z and x-translational degrees-of-freedom");
            ADD(7, "7: x, y, and z-translational degrees-of-freedom (3DOF)");
        } 
        RADIO(LSD_RT2)
        {
            ADD(0, "0: no translational degrees-of-freedom are released");
            ADD(1, "1: x-translational degree-of-freedom");
            ADD(2, "2: y-translational degree-of-freedom");
            ADD(3, "3: z-translational degree-of-freedom");
            ADD(4, "4: x and y-translational degrees-of-freedom");
            ADD(5, "5: y and z-translational degrees-of-freedom");
            ADD(6, "6: z and x-translational degrees-of-freedom");
            ADD(7, "7: x, y, and z-translational degrees-of-freedom (3DOF)");
        }   
        RADIO(LSD_RR1)
        {
            ADD(0, "0: no rotational degrees-of-freedom are released");
            ADD(1, "1: x-rotational degree-of-freedom");
            ADD(2, "2: y-rotational degree-of-freedom");
            ADD(3, "3: z-rotational degree-of-freedom");
            ADD(4, "4: x and y-rotational degrees-of-freedom");
            ADD(5, "5: y and z-rotational degrees-of-freedom");
            ADD(6, "6: z and x-rotational degrees-of-freedom");
            ADD(7, "7: x, y, and z-rotational degrees-of-freedom (3DOF)");
        } 

        RADIO(LSD_RR2)
        {
            ADD(0, "0: no rotational degrees-of-freedom are released");
            ADD(1, "1: x-rotational degree-of-freedom");
            ADD(2, "2: y-rotational degree-of-freedom");
            ADD(3, "3: z-rotational degree-of-freedom");
            ADD(4, "4: x and y-rotational degrees-of-freedom");
            ADD(5, "5: y and z-rotational degrees-of-freedom");
            ADD(6, "6: z and x-rotational degrees-of-freedom");
            ADD(7, "7: x, y, and z-rotational degrees-of-freedom (3DOF)");
        }    
        RADIO(LSD_LOCAL)
        {
            ADD(0, "0: default is 2");
            ADD(1, "1: global coordinate system");
            ADD(2, "2: local coordinate system (default)"); 
        } 
        if(if_THICKNESS==1)
        {
            RADIO(LSD_PARM1)
            {
                ADD(0, "0: no PARM1");
                ADD(1, "1: beam thickness, s direction at node 1");
                ADD(2, "2: area");
                ADD(3, "3: area");
                ADD(4, "4: beam thickness, s direction at node 1");
                ADD(5, "5: beam thickness, s direction at node 1");
                ADD(6, "6: volume, see description for VOL below.");
                ADD(7, "7: beam thickness, s direction at node 1");
                ADD(8, "8: beam thickness, s direction at node 1");
                ADD(9, "9: beam thickness, s direction at node 1");
            }  
            RADIO(LSD_PARM2)
            {
                ADD(0, "0: no PARM2");
                ADD(1, "1: beam thickness, s direction at node 2");
                ADD(2, "2: Iss");
                ADD(3, "3: ramp-up time for dynamic relaxation");
                ADD(4, "4: beam thickness, s direction at node 2");
                ADD(5, "5: beam thickness, s direction at node 2");
                ADD(6, "6: geometric inertia");
                ADD(7, "7: Inertia, see description for INER below.");
                ADD(8, "8: beam thickness, s direction at node 2");
                ADD(9, "9: beam thickness, s direction at node 2");
            } 
            RADIO(LSD_PARM3)
            {
                ADD(0, "0: no PARM3");
                ADD(1, "1: beam thickness, t direction at node 1");
                ADD(2, "2: Itt");
                ADD(3, "3: initial stress for dynamic relaxation");
                ADD(4, "4: beam thickness, t direction at node 1");
                ADD(5, "5: beam thickness, t direction at node 1");
                ADD(6, "6: local coordinate ID");
                ADD(7, "7: not used.");
                ADD(8, "8: not used.");
                ADD(9, "9: beam thickness, t direction at node 1");
            }
            RADIO(LSD_PARM4)
            {
                ADD(0, "0: no PARM4");
                ADD(1, "1: beam thickness, t direction at node 2");
                ADD(2, "2: Irr");
                ADD(3, "3: not used");
                ADD(4, "4: beam thickness, t direction at node 2");
                ADD(5, "5: beam thickness, t direction at node 2");
                ADD(6, "6: area");
                ADD(7, "7: not used.");
                ADD(8, "8: not used.");
                ADD(9, "9: beam thickness, t direction at node 2");
            }  
            RADIO(LSD_PARM5)
            {
                ADD(0, "0: no PARM5");
                ADD(1, "1: not used");
                ADD(2, "2: shear area");
                ADD(3, "3: not used");
                ADD(4, "4: not used");
                ADD(5, "5: not used");
                ADD(6, "6: offset");
                ADD(7, "7: not used.");
                ADD(8, "8: not used.");
                ADD(9, "9: print flag to SWFORC file. The default is taken from the SECTION_BEAM input.");
            }            
        }   
        if(if_SECTION==1)    
        {
           
            RADIO(STYPE) {
                ADD("SECTION_01","Circular");
                ADD("SECTION_02","Tubular");
                ADD("SECTION_03","L-shape");
                ADD("SECTION_04", "I-shape");
                ADD("SECTION_05","Channel");
                ADD("SECTION_06","T-shape");
                ADD("SECTION_07","Box-shape");
                ADD("SECTION_08","Square");
                ADD("SECTION_09","Cross");
                ADD("SECTION_10","H-shape");
                //
                ADD("SECTION_11","T-shape1");
                ADD("SECTION_12","I-shape1");       
                ADD("SECTION_13","Channel1");
                ADD("SECTION_14","Z-shape");
                ADD("SECTION_15","Channel2");
                ADD("SECTION_16","T-shape2");
                ADD("SECTION_17","Box-shape1");
                ADD("SECTION_18","Hexagon");
                ADD("SECTION_19","Hat-shape");
                ADD("SECTION_20","Hat-shape1");
                //ADD("Tubular box", "Tubular box"); 
                //ADD("Trapezoidal","Trapezoidal"); 
                //ADD("Solid box","Solid box");
                //ADD("I-shape2","I-shape2");
            }
            SCALAR(D1);
            SCALAR(D2);
            SCALAR(D3);
            SCALAR(D4);
            SCALAR(D5);
            SCALAR(D6);
        }

        if(if_SCALAR==1 || if_SCALR ==1)
        {
            SCALAR(LSD_VOL);
            SCALAR(LSD_INER);
        }
        if(if_SCALAR==1)
        {
            SCALAR(ElemBeam_CID);
            SCALAR(ElemBeam_DOF1);
            SCALAR(ElemBeam_DOF2);
        }
        if(if_SCALR ==1)
        {
            SCALAR(ElemBeam_CID);
            SCALAR(ElemBeam_DOF1);
            SCALAR(ElemBeam_DOF2);
        }
        if(if_PID==1)
        {
            SCALAR(LSD_PID2);
            SCALAR(LSD_PID3);
        }        
        if(if_OFFSET ==1)
        {
            SCALAR(offsetax);
            SCALAR(offsetay);
            SCALAR(offsetaz);
            SCALAR(offsetbx);
            SCALAR(offsetby);
            SCALAR(offsetbz);
        }
        if(if_ORIENTATION  ==1)
        {
            SCALAR(LSD_VX);
            SCALAR(LSD_VY);
            SCALAR(LSD_VZ);
        }
        if(if_WARPAGE  ==1)
        {
            SCALAR(SN1);
            SCALAR(SN2);
        }
    } 
}
FORMAT(Keyword971) 
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);
    if(IOFLAG==0)
    {
      if(if_THICKNESS == 1)
            ASSIGN(_opt,_COMBINE(_opt,"_THICKNESS"),EXPORT);
      else if(if_SCALAR == 1)
            ASSIGN(_opt ,_COMBINE(_opt,"_SCALAR"),EXPORT);
      else if(if_SCALR == 1)
            ASSIGN(_opt ,_COMBINE(_opt,"_SCALR"),EXPORT);
      else if(if_SECTION == 1)
            ASSIGN(_opt ,_COMBINE(_opt,"_SECTION"),EXPORT);
      if(if_PID == 1)
            ASSIGN(_opt    ,_COMBINE(_opt,"_PID"),EXPORT);
      if(if_OFFSET == 1)
            ASSIGN(_opt    ,_COMBINE(_opt,"_OFFSET"),EXPORT);
      if(if_ORIENTATION == 1)
            ASSIGN(_opt    ,_COMBINE(_opt,"_ORIENTATION"),EXPORT);
      if(if_WARPAGE == 1)
            ASSIGN(_opt    ,_COMBINE(_opt,"_WARPAGE"),EXPORT);

    }
    HEADER("*ELEMENT_BEAM%-s",_opt);
    if(IOFLAG==1)
    {
        ASSIGN(if_THICKNESS      ,_FIND(_opt,"_THICKNESS"),IMPORT);
        ASSIGN(if_SCALAR         ,_FIND(_opt,"_SCALAR"),IMPORT);
        ASSIGN(if_SCALR          ,_FIND(_opt,"_SCALR "),IMPORT);
        ASSIGN(if_SECTION        ,_FIND(_opt,"_SECTION"),IMPORT);
        ASSIGN(if_PID            ,_FIND(_opt,"_PID"),IMPORT);
        ASSIGN(if_OFFSET         ,_FIND(_opt,"_OFFSET"),IMPORT);
        ASSIGN(if_ORIENTATION    ,_FIND(_opt,"_ORIENTATION"),IMPORT);
        ASSIGN(if_WARPAGE        ,_FIND(_opt,"_WARPAGE"),IMPORT);
    }
    COMMENT("$    EID     PID      N1      N2      N3     RT1     RR1     RT2     RR2   LOCAL");
    FREE_CARD_LIST(NB_ELE)
    {
        CARD("%8d%8d%8d%8d%8d%8d%8d%8d%8d%8d",id,collector,node1,node2,node3,LSD_RT1,LSD_RR1,LSD_RT2,LSD_RR2,LSD_LOCAL);
        /*
        if(if_THICKNESS == 1)
        {
            CARD("%16lg%16lg%16lg%16lg%16lg", LSD_PARM1, LSD_PARM2, LSD_PARM3, LSD_PARM4, LSD_PARM5);
        }
        if(if_SECTION == 1)
        {
            CARD("%10s%10lg%10lg%10lg%10lg%10lg%10lg", STYPE,D1,D2, D3, D4, D5,D6);
        }
        if(if_SCALAR  == 1)
        {
            CARD("%16lg%16lg%16lg%16lg%16lg", LSD_VOL, LSD_INER, ElemBeam_CID, ElemBeam_DOFN1, ElemBeam_DOF2);
        }
        if(if_SCALR  == 1)
        {
            CARD("%16lg%16lg%16lg%16lg%16lg", LSD_VOL, LSD_INER, ElemBeam_CID, ElemBeam_DOF1, ElemBeam_DOF2);
        }
        if(if_PID  == 1)
        {
            CARD("%8d%8d",LSD_PID2,LSD_PID3);
        }
        if(if_OFFSET  == 1)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg", offsetax, offsetay,offsetaz, offsetbx, offsetby, offsetbz);
        }
        if(if_ORIENTATION   == 1)
        {
            CARD("%10lg%10lg%10lg", LSD_VX,LSD_VY,LSD_VZ);
        }
        if(if_WARPAGE   == 1)
        {
            CARD("%10d%10d",SN1,SN2);
        }
        */
    }
}
