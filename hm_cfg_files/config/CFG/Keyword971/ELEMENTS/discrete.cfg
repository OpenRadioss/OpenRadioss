//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Spring element Setup File
// 

ATTRIBUTES(COMMON) {
  // Common attributes
  NB_ELE      = SIZE("Number of elements");
  id          = ARRAY[NB_ELE](INT,"Element identifier","EID") ;//{ SUBTYPES = (/ELEMENT/SPRING_IDPOOL) ; }
  collector   = ARRAY[NB_ELE](INT,"Part","PID");
  node1       = ARRAY[NB_ELE](INT,"Node identifier 1","N1");
  node2       = ARRAY[NB_ELE](INT,"Node identifier 2","N2");
  LSD_VECTOR  = ARRAY[NB_ELE](INT,"Orientation option","VID");//{ SUBTYPES = (/SYSTEM/DEFINE_SD_ORIENTATION) ; }
  PF          = ARRAY[NB_ELE](INT,"Print flag","PF");
  LSD_SF      = ARRAY[NB_ELE](INT,"Scale factor on forces","S");
  LSD_OFFSET  = ARRAY[NB_ELE](INT,"Initial offset","OFFSET");
}

DRAWABLES(COMMON) {
 public:
  TIME_STEP = TIME_STEP();
}
GUI(COMMON) {
 mandatory:
    
    SIZE(NB_ELE) ;

    ARRAY(NB_ELE,"element data")
    {
         SCALAR(id) ;
         SCALAR(collector);
         SCALAR(node1);
 optional:
         SCALAR(node2);
         SCALAR(LSD_VECTOR);
         SCALAR(LSD_SF);
         RADIO(PF)
         {
            ADD(0, "0: forces are printed in DEFORC file");
            ADD(1, "1: forces are not printed DEFORC file");
         } 
                    
         SCALAR(LSD_OFFSET);
    }
}
FORMAT(Keyword971) 
{
    HEADER("*ELEMENT_DISCRETE");
    COMMENT("$    EID     PID      N1      N2     VID               S      PF          OFFSET");
    FREE_CARD_LIST(NB_ELE)
    {
        CARD("%8d%8d%8d%8d%8d%16lg%8d%16lg",id,collector,node1,node2,LSD_VECTOR,LSD_SF,PF,LSD_OFFSET);
    }
}