//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Shell (3N & 4N) element Setup File
// 

ATTRIBUTES(COMMON) {
  // Common attributes
  
  NB_ELE    = SIZE("Number of elements");
  //id        = ARRAY[NB_ELE](ELEMS,"Element identifier","EID") { SUBTYPES = (/ELEMENT/SHELL_IDPOOL) ; }
  id        = ARRAY[NB_ELE](INT,"Element identifier","EID");
  collector = ARRAY[NB_ELE](INT,"Part","PID");
  node1     = ARRAY[NB_ELE](INT,"Node identifier 1","N1");
  node2     = ARRAY[NB_ELE](INT,"Node identifier 2","N2");
  node3     = ARRAY[NB_ELE](INT,"Node identifier 3","N3");
  node4     = ARRAY[NB_ELE](INT,"Node identifier 4","N4");
  node5     = ARRAY[NB_ELE](INT,"Mid-side node identifier 5","N5");
  node6     = ARRAY[NB_ELE](INT,"Mid-side node identifier 6","N6");
  node7     = ARRAY[NB_ELE](INT,"Mid-side node identifier 7","N7");
  node8     = ARRAY[NB_ELE](INT,"Mid-side node identifier 8","N8");
  // Shell (attributes)
  LSD_ELEM_T1  = ARRAY[NB_ELE](FLOAT,"Shell thickness at node 1","THIC1");
  LSD_ELEM_T2  = ARRAY[NB_ELE](FLOAT,"Shell thickness at node 2","THIC2");
  LSD_ELEM_T3  = ARRAY[NB_ELE](FLOAT,"Shell thickness at node 3","THIC3");
  LSD_ELEM_T4  = ARRAY[NB_ELE](FLOAT,"Shell thickness at node 4","THIC4");
  LSD_ELEM_PSI = ARRAY[NB_ELE](FLOAT,"Orthotropic material base offset angle","BETA");
  LSD_SYSTEM   = ARRAY[NB_ELE](SYSTEM,"Material coordinate system ID","MCID");
  LSD_OFFSET   = ARRAY[NB_ELE](FLOAT,"[OFFSET] The offset distance from the plane of nodal points to the ref surface","OFFSET");
  NS1       = ARRAY[NB_ELE](FLOAT,"Scalar node 1","NS1");
  NS2       = ARRAY[NB_ELE](FLOAT,"Scalar node 2","NS2");
  NS3       = ARRAY[NB_ELE](FLOAT,"Scalar node 3","NS3");
  NS4       = ARRAY[NB_ELE](FLOAT,"Scalar node 4","NS4");
  //
  Elem_Option   = VALUE(INT,"OPTION");
  if_THICKNESS  = VALUE(INT,"THICKNESS option","if_THICKNESS");
  if_BETA       = VALUE(INT,"BETA option","if_BETA");
  if_MCID       = VALUE(INT,"MCID option","if_MCID");
  if_OFFSET     = VALUE(INT,"OFFSET option","if_OFFSET");
  if_DOF        = VALUE(INT,"DOF option","if_DOF");
  if_SHL4_TO_SHL8 = VALUE(INT,"SHL4_TO_SHL8 option","if_SHL4_TO_SHL8");
  if_COMPOSITE  = VALUE(INT,"COMPOSITE option","if_COMPOSITE");
  if_COMPOSITE_LONG = VALUE(INT,"COMPOSITE_LONG option","if_COMPOSITE_LONG");
  //
  //KEYWORD_STR   = VALUE(STRING, "Solver Keyword");
  _opt          = VALUE(STRING, "Option");
}

SKEYWORDS_IDENTIFIER(COMMON) {
  NB_ELE    = -1;
  _opt      = -1;
  if_THICKNESS  = -1;
  if_BETA       = -1;
  if_MCID       = -1;
  if_OFFSET     = -1;
  if_DOF        = -1;
  if_SHL4_TO_SHL8 = -1;
  if_COMPOSITE  = -1;
  if_COMPOSITE_LONG = -1;
  NS1       = -1;
  NS2       = -1;
  NS3       = -1;
  NS4       = -1;
}


DRAWABLES(COMMON) {
 //private:
  //LOC_THICKNESS  = EVAL((THIC1+THIC2+THIC3+THIC4)/4.);
 // PART_THICKNESS = SUBDRAWABLE(PART,THICKNESS);
 //public:
 // THICKNESS      = WHILE_ZERO(LOC_THICKNESS,PART_THICKNESS);
 // TIME_STEP      = TIME_STEP();
 //public:
 // AREA           = AREA();
 // VOLUME         = EVAL(AREA*LOC_THICKNESS);
}
GUI(COMMON) {
 mandatory:
    
    SIZE(NB_ELE) ;

    ARRAY(NB_ELE,"element data")
    {
        SCALAR(id) ;
        SCALAR(collector);
        SCALAR(node1);
        SCALAR(node2);
        SCALAR(node3);
 optional:
        SCALAR(node4);
        SCALAR(node5);
        SCALAR(node6);
        SCALAR(node7);
        SCALAR(node8);

        if(Elem_Option==2 || Elem_Option==3 || Elem_Option==6 || Elem_Option==8 || Elem_Option==9 ||
           Elem_Option==11 || Elem_Option==15 ||
           Elem_Option==4 || Elem_Option==7 || Elem_Option==10 || Elem_Option==12 || Elem_Option==16)
        {
            SCALAR(LSD_ELEM_T1) { DIMENSION="l"; }
            SCALAR(LSD_ELEM_T2) { DIMENSION="l"; }
            SCALAR(LSD_ELEM_T3) { DIMENSION="l"; }
            SCALAR(LSD_ELEM_T4) { DIMENSION="l"; }
        }
        if(Elem_Option==2 || Elem_Option==3 || Elem_Option==6 || Elem_Option==8 || Elem_Option==9 ||
           Elem_Option==11 || Elem_Option==15)
        {
            SCALAR(LSD_ELEM_PSI) {DIMENSION = "a";}
        }
        if(Elem_Option==4 || Elem_Option==7 || Elem_Option==10 || Elem_Option==12 || Elem_Option==16)
        {
            DATA(LSD_SYSTEM);
        }
        if(if_OFFSET==1)
        {
            SCALAR(LSD_OFFSET) {DIMENSION = "l";}
        }
        if(if_DOF == 1)
        {
            SCALAR(NS1) { DIMENSION="DIMENSIONLESS"; }
            SCALAR(NS2) { DIMENSION="DIMENSIONLESS"; }
            SCALAR(NS3) { DIMENSION="DIMENSIONLESS"; }
            SCALAR(NS4) { DIMENSION="DIMENSIONLESS"; }
        }
    }

}
FORMAT(Keyword971) 
{
    /*
    HEADER("*ELEMENT_SHELL%s", APPEND_OPTIONS(
        [ Elem_Option(2) ,  "_THICKNESS" ],
        [ Elem_Option(3) ,  "_BETA" ],
        [ Elem_Option(4) ,  "_MCID" ],
        [ Elem_Option(5) ,  "_OFFSET" ],
        [ Elem_Option(6) ,  "_THICKNESS_BETA" ],
        [ Elem_Option(7) ,  "_THICKNESS_MCID" ],
        [ Elem_Option(8) ,  "_THICKNESS_OFFSET" ],
        [ Elem_Option(9) ,  "_BETA_OFFSET" ],
        [ Elem_Option(10) , "_MCID_OFFSET" ],
        [ Elem_Option(11) , "_THICKNESS_BETA_OFFSET" ],
        [ Elem_Option(12) , "_THICKNESS_MCID_OFFSET" ],
        [ Elem_Option(13) , "_COMPOSITE" ],
        [ Elem_Option(14) , "_COMPOSITE_LONG" ],
        [ Elem_Option(15) , "_BETA_COMPOSITE_LONG" ],
        [ Elem_Option(16) , "_MCID_COMPOSITE_LONG" ],
        [ Elem_Option(17) , "_SHL4_TO_SHL8" ]));
    */
    // Assignment of flags and _opt for export to be done
    HEADER("*ELEMENT_SHELL%-s",_opt);
    ASSIGN(if_THICKNESS,_FIND(_opt,"_THICKNESS"),IMPORT);
    ASSIGN(if_BETA   ,_FIND(_opt,"_BETA"),IMPORT);
    ASSIGN(if_MCID   ,_FIND(_opt,"_MCID"),IMPORT);
    ASSIGN(if_OFFSET ,_FIND(_opt,"_OFFSET"),IMPORT);
    ASSIGN(if_DOF    ,_FIND(_opt,"_DOF"),IMPORT);
    ASSIGN(if_COMPOSITE_LONG,_FIND(_opt,"_COMPOSITE_LONG"),IMPORT);
    if(if_COMPOSITE_LONG == 0) ASSIGN(if_COMPOSITE,_FIND(_opt,"_COMPOSITE"),IMPORT);
    if     (if_THICKNESS == 1 && if_BETA == 1 && if_OFFSET == 1) ASSIGN(Elem_Option, 11, IMPORT);
    else if(if_THICKNESS == 1 && if_MCID == 1 && if_OFFSET == 1) ASSIGN(Elem_Option, 12, IMPORT);
    else if(if_THICKNESS == 1 && if_BETA == 1) ASSIGN(Elem_Option, 6, IMPORT);
    else if(if_THICKNESS == 1 && if_MCID == 1) ASSIGN(Elem_Option, 7, IMPORT);
    else if(if_THICKNESS == 1 && if_OFFSET == 1) ASSIGN(Elem_Option, 8, IMPORT);
    else if(if_THICKNESS == 1) ASSIGN(Elem_Option, 2, IMPORT);
    else if(if_BETA == 1 && if_OFFSET == 1) ASSIGN(Elem_Option, 9, IMPORT);
    else if(if_MCID == 1 && if_OFFSET == 1) ASSIGN(Elem_Option, 10, IMPORT);
    else if(if_BETA == 1 && if_COMPOSITE_LONG == 1) ASSIGN(Elem_Option, 15, IMPORT);
    else if(if_MCID == 1 && if_COMPOSITE_LONG == 1) ASSIGN(Elem_Option, 16, IMPORT);
    else if(if_BETA == 1) ASSIGN(Elem_Option, 3, IMPORT);
    else if(if_MCID == 1) ASSIGN(Elem_Option, 4, IMPORT);
    else if(if_OFFSET == 1) ASSIGN(Elem_Option, 5, IMPORT);
    else if(if_COMPOSITE == 1) ASSIGN(Elem_Option, 13, IMPORT);
    else if(if_COMPOSITE_LONG == 1) ASSIGN(Elem_Option, 14, IMPORT);
    COMMENT("$    EID     PID      N1      N2      N3      N4      N5      N6      N7      N8");
    
    if((if_BETA == 1 || (if_THICKNESS == 1 && if_MCID == 0)) && if_OFFSET == 0 && if_DOF == 0)
    {
        FREE_CARD_LIST(NB_ELE)
        {
            CARD("%8d%8d%8d%8d%8d%8d%8d%8d%8d%8d",id,collector,node1,node2,node3,node4,node5,node6,node7,node8);
            CARD("%16lg%16lg%16lg%16lg%16lg", LSD_ELEM_T1, LSD_ELEM_T2, LSD_ELEM_T3, LSD_ELEM_T4, LSD_ELEM_PSI);
        }
    }
    else if((if_BETA == 1 || (if_THICKNESS == 1 && if_MCID != 0)) && if_OFFSET == 0 && if_DOF == 0)
    {
        FREE_CARD_LIST(NB_ELE)
        {
            CARD("%8d%8d%8d%8d%8d%8d%8d%8d%8d%8d",id,collector,node1,node2,node3,node4,node5,node6,node7,node8);
        }
    }
    else if((if_BETA == 1 || (if_THICKNESS == 1 && if_MCID != 0)) && if_OFFSET == 1 && if_DOF == 0)
    {
        FREE_CARD_LIST(NB_ELE)
        {
            CARD("%8d%8d%8d%8d%8d%8d%8d%8d%8d%8d",id,collector,node1,node2,node3,node4,node5,node6,node7,node8);
            CARD("%16lg", LSD_OFFSET);
        }
    }
    else if((if_BETA == 1 || (if_THICKNESS == 1 && if_MCID != 0)) && if_OFFSET == 1 && if_DOF == 1)
    {
        FREE_CARD_LIST(NB_ELE)
        {
            CARD("%8d%8d%8d%8d%8d%8d%8d%8d%8d%8d",id,collector,node1,node2,node3,node4,node5,node6,node7,node8);
            CARD("%16lg", LSD_OFFSET);
            CARD("%16s%8d%8d%8d%8d",_BLANK_, NS1, NS2, NS3, NS4);
        }
    }
    else if((if_BETA == 1 || (if_THICKNESS == 1 && if_MCID != 0)) && if_OFFSET == 0 && if_DOF == 1)
    {
        FREE_CARD_LIST(NB_ELE)
        {
            CARD("%8d%8d%8d%8d%8d%8d%8d%8d%8d%8d",id,collector,node1,node2,node3,node4,node5,node6,node7,node8);
            CARD("%16s%8d%8d%8d%8d",_BLANK_, NS1, NS2, NS3, NS4);
        }
    }
    else 
    {
        FREE_CARD_LIST(NB_ELE)
        {
            CARD("%8d%8d%8d%8d%8d%8d%8d%8d%8d%8d",id,collector,node1,node2,node3,node4,node5,node6,node7,node8);
        }
    }
}