//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// ELEMENT_MASS 
// 

ATTRIBUTES(COMMON) {

    IO_FLAG       = VALUE(INT, "Import/Export flag");
    _HMCOMMENTSFLAG = VALUE(INT, "Write HM Comments");
    _HWCOLOR        = VALUE(INT, "Entity Color");
    TITLE           = VALUE(STRING, "Title");
    entityidsmax    = SIZE("Number of entities");
    entityids       = ARRAY[entityidsmax](MULTIOBJECT, "entity to which the mass is added") { SUBTYPES = (/NODE) ; }
    location_unit_solvermass   = ARRAY[entityidsmax](SOLVERMASS, "solvermasses");
    nodeid          = ARRAY[entityidsmax](NODE, "nodes to which the mass is added");
    masses          = ARRAY[entityidsmax](FLOAT, "Added mass");
    componentid     = ARRAY[entityidsmax](COMPONENT, "Part ID: optional");
    skipcomment     = VALUE(STRING, "");
}

DEFINITIONS(COMMON) {
  IMPORT_PREDATA_TABULAR=(location_unit_solvermass);
}

SKEYWORDS_IDENTIFIER(COMMON)
{
  IO_FLAG           = -1;
  _HMCOMMENTSFLAG   = -1;
  _HWCOLOR          = -1;
  TITLE             = -1;
  skipcomment       = -1;
}

DEFAULTS(COMMON)
{
    IO_FLAG = 0;
}

//GUI(COMMON)
//{  
//   mandatory:  
   
//    graphical SUPPORT("Support") {
//         OBJECTS=(NODE);
//         ADD(NODEID);
//    }
        
     
//     optional:     
     
//     SCALAR(PID) {DIMENSION = "DIMENSIONLESS";}    
//     RADIO(USAGE)
//     {
//         ADD(0,"Undefined");
//         ADD(1, "Mass completion");
//         ADD(2, "Missing system");
//     }
    
//     FLAG(DISTRIB);


//optional:
//    if(IGHOST==1)
//    {
//      SCALAR(TARGETMASS){ DIMENSION="MASS"; }
//      SCALAR(XC){DIMENSION="LENGTH";}
//      SCALAR(YC){DIMENSION="LENGTH";}
//      SCALAR(ZC){DIMENSION="LENGTH";}
//      SCALAR(IXX){ DIMENSION="MOMENT OF INERTIA"; }
//      SCALAR(IXY){ DIMENSION="MOMENT OF INERTIA"; }
//      SCALAR(IXZ){ DIMENSION="MOMENT OF INERTIA"; }
//      SCALAR(IYY){ DIMENSION="MOMENT OF INERTIA"; }
//      SCALAR(IYZ){ DIMENSION="MOMENT OF INERTIA"; }
//      SCALAR(IZZ){ DIMENSION="MOMENT OF INERTIA"; }
//    }
//    if (IGHOST==2)
//    {
//       SIZE(NB_NODE);
//       ARRAY(NB_NODE,"Nodal Mass") {
//          SCALAR(MASSVALUE) {DIMENSION = "MASS";}     
//       }
//    }
//}

FORMAT(Keyword971) 
{
    
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    if(IO_FLAG == 2 && entityidsmax != 0)
    {
            HEADER("*ELEMENT_MASS");
            COMMENT("$    EID      ID            MASS     PID");
            CARD_LIST(entityidsmax)
            {
                CARD("%8d%8d%16lg%8d", location_unit_solvermass, nodeid, masses, componentid);
            }
    }
    else if(IO_FLAG == 1)
    {
            HEADER("*ELEMENT_MASS");
            CARD_PREREAD("%s",skipcomment); // added to advanced file pointer as it is handled inside..
            COMMENT("$    EID      ID            MASS     PID");
            FREE_CARD_LIST(entityidsmax)
            {
                CARD("%8d%8d%16lg%8d", location_unit_solvermass, nodeid, masses, componentid);
            } { TOKEN_END = ("$HMNAME"); }
    }

}
