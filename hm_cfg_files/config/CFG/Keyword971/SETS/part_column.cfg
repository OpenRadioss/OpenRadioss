//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Group Setup File
// *SET_PART_COLUMN
// 

// MCDS attributes description
ATTRIBUTES {
  // Access to nodes
    idsmax                      =   SIZE("No. Set item"); 
    ids                         =   ARRAY[idsmax](COMPONENT, "Set list item");     
//
    A1            				= ARRAY[idsmax](FLOAT, "A1");
    A2            				= ARRAY[idsmax](FLOAT, "A2");
    A3           			 	= ARRAY[idsmax](FLOAT, "A3");
    A4            				= ARRAY[idsmax](FLOAT, "A4");  
    //
    HAS_DA        = VALUE(INT, "Flag whether has DA fields");
    DA1           = VALUE(FLOAT, "DA1");
    DA2           = VALUE(FLOAT, "DA2");
    DA3           = VALUE(FLOAT, "DA3");
    DA4           = VALUE(FLOAT, "DA4");
    SOLVER        = VALUE(STRING, "SOLVER");
    opt_isCollect = VALUE(INT, "Flag to set COLLECT");
//
    LSD_DA1                     = VALUE(FLOAT, "First nodal attribute default value");
    LSD_DA2                     = VALUE(FLOAT, "Second nodal attribute default value");
    LSD_DA3                     = VALUE(FLOAT, "Third nodal attribute default value");
    LSD_DA4                     = VALUE(FLOAT, "Fourth nodal attribute default value");
    LSD_SET_SOLVER              = VALUE(STRING, "Name of solver using this set");
    LSD_COLLECT_OPT             = VALUE(INT, "Flag to set COLLECT");
//
    TITLE                       = VALUE(STRING, "TITLE");
    LSD_TitleOpt                = VALUE(INT, "Title");
// HM INTERNAL
    option_Type                 = VALUE(STRING, "Set Type");
    KEY                         = VALUE(STRING, "header Type");
 /*   KEYWORD_STR               = VALUE(STRING, "Solver Keyword");*/
    NUM_COMMENTS                = SIZE("NUM_COMMENTS");
    CommentEnumField            = VALUE(INT,"User Comments");
    COMMENTS                    = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    _IDPOOL                     = VALUE(INT, "Set Node Id pool");
    IO_FLAG                     = VALUE(INT, "Import/Export flag");
}
SKEYWORDS_IDENTIFIER(COMMON)
{   
 /*   KEYWORD_STR               = 9000;*/
    COMMENTS                    = 5109;
    CommentEnumField            = 7951;
    NUM_COMMENTS                = 5110;
    LSD_TitleOpt                = 90;
    LSD_DA1                     = 1901;
    LSD_DA2                     = 1901;
    LSD_DA3                     = 1901;
    LSD_DA4                     = 1901;
    LSD_SET_SOLVER              = 6254;
    A1     = -1;
    A2     = -1;
    A3     = -1;
    A4     = -1;
 /*   TITLE = -1;*/
    option_Type                 = -1;
    IO_FLAG                     =-1;
    LSD_COLLECT_OPT             = 9001;
    KEY                         = -1;
}
DEFAULTS(COMMON)
{
  _IDPOOL                       = 47;
  LSD_TitleOpt                  = 0;
  LSD_COLLECT_OPT               = 0;
  KEY                           ="*SET_PART_COLUMN";
}

GUI(COMMON)
{
mandatory:
  SIZE(idsmax) ;
  ARRAY(idsmax,"") {
    DATA(ids);
    SCALAR(A1);
    SCALAR(A2);
    SCALAR(A3);
    SCALAR(A4);
  }
optional: 
  FLAG(LSD_TitleOpt);
  FLAG(LSD_COLLECT_OPT);
  /*SCALAR(LSD_DA1);
  SCALAR(LSD_DA2);
  SCALAR(LSD_DA3);
  SCALAR(LSD_DA4);
  SCALAR(LSD_SET_SOLVER);*/
}
FORMAT(Keyword971) {
  ASSIGN(IO_FLAG, 1, IMPORT);
  ASSIGN(IO_FLAG, 0, EXPORT);
//import header and option
  if(IO_FLAG == 1)
  {
     HEADER("*SET_PART_COLUMN%s", option_Type);
  }
  ASSIGN(LSD_TitleOpt, _FIND(option_Type, "TITLE"),IMPORT);
  ASSIGN(LSD_COLLECT_OPT, _FIND(option_Type, "COLLECT"),IMPORT);
//export header
  ASSIGN(KEY,*SET_PART_COLUMN, EXPORT);
  if(IO_FLAG == 0 && LSD_COLLECT_OPT == 1)
  {
      ASSIGN(KEY,_COMBINE(KEY,"_COLLECT"), EXPORT);
  }
  if(IO_FLAG == 0 && LSD_TitleOpt == 1)
  {
      ASSIGN(KEY,_COMBINE(KEY,"_TITLE"), EXPORT);
  }
  if(IO_FLAG == 0)
  {
      HEADER("%s",KEY);
  }
  if(IO_FLAG == 0 && LSD_TitleOpt == 1)  
  {
        CARD("%-80s", TITLE);
  }
// card I/O
  COMMENT("$      SID       DA1       DA2       DA3       DA4    SOLVER");
  CARD("%10d%10lg%10lg%10lg%10lg%-10s",_ID_,LSD_DA1,LSD_DA2,LSD_DA3,LSD_DA4,LSD_SET_SOLVER);
  COMMENT("$      PID        A1        A2        A3        A4");
  FREE_CARD_LIST(idsmax)
  {
    CARD("%10d%10lg%10lg%10lg%10lg",ids,A1,A2,A3,A4); 
  }
}
