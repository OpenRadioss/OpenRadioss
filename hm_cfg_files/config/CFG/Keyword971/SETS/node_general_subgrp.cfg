//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Group Setup File
// *SET_NODE_GENERAL
// 

// MCDS attributes description
ATTRIBUTES {
  // Access to nodes
    idsmax                      =   SIZE("No. Set item"); 
    ids                         =   ARRAY[idsmax](MULTIOBJECT, "Set list item"){ SUBTYPES = ( /NODE , /COMPONENT , /BOX , /SETS/SET_NODE_IDPOOL , /SETS/SET_BEAM_IDPOOL, /SETS/SET_DISCRETE_IDPOOL, /SETS/SET_SHELL_IDPOOL, /SETS/SET_SOLID_IDPOOL, /SETS/SET_TSHELL_IDPOOL, /ASSEMBLY   ) ; }    
    KEY                         = VALUE(STRING, "Key type");
    opt_D                       = VALUE(INT, "delete (remove) the entities from the set");
// HM INTERNAL
    ids_type                    = VALUE(STRING, "Type of multi object");
    Key_option_import           = VALUE(STRING,"temporary variable");
    Key_option_export           = VALUE(STRING,"temporary variable");
    IO_FLAG                     = VALUE(INT, "Import/Export flag");
    Opt_                        = VALUE(STRING,"temporary variable for Option D");
    opt_                        = VALUE(INT,"Option");
}
SKEYWORDS_IDENTIFIER(COMMON)
{
    ids_type                    = -1;
    KEY                         = -1;
    opt_D                       = -1;
    IO_FLAG                     = -1;
    Key_option_import           = -1;
    Key_option_export           = -1;
    Opt_                        = -1;
    opt_                        = -1;
}
DEFAULTS(COMMON)
{
    ids_type                    = "/NODE";
    KEY                         = "NODE";
    opt_D                       = 0;
}

GUI(COMMON)
{
mandatory:
    RADIO(KEY, "Set Type is") {
        ADD("NODE", "NODE :NODE");
        ADD("PART", "PART :PART");
        ADD("BOX", "BOX :BOX");
        ADD("VOL", "VOL :VOL");
        ADD("BRANCH", "BRANCH :BRANCH");
        ADD("SET_SHELL", "SET_SHELL :SET_SHELL");
        ADD("SET_SOLID", "SET_SOLID :SET_SOLID");
        ADD("SET_BEAM", "SET_BEAM :SET_BEAM");
        ADD("SET_TSHELL", "SET_TSHELL :SET_TSHELL");
        ADD("SET_DISCRETE", "SET_DISCRETE :SET_DISCRETE");
        ADD("SALECPT", "SALECPT :SALECPT");
        ADD("SALEFAC", "SALEFAC :SALEFAC");
        ADD("ALL", "ALL :ALL");
    }
    if(KEY=="NODE")
    {
        ASSIGN(ids_type, /NODE);
    }
    else if(KEY=="PART")
    {
        ASSIGN(ids_type, /COMPONENT);
    }
    else if(KEY=="BOX" )
    {
        ASSIGN(ids_type, /BOX);
    }
    if(KEY!="ALL")
    {
        SIZE(idsmax) ;
        ARRAY(idsmax,"") 
        {
            if(KEY=="NODE")
            {
                DATA(ids) { SUBTYPES = ( /NODE ) ; }
            }
            else if(KEY=="PART")
            {
                DATA(ids) { SUBTYPES = (  /COMPONENT ) ; } 
            }
            else if(KEY=="BOX")
            {
               DATA(ids) { SUBTYPES = ( /BOX ) ; }
            }
            else if(KEY=="BRANCH")
            {
               DATA(ids) { SUBTYPES = ( /ASSEMBLY ) ; }
            }
            else if(KEY=="VOL")
            {
               DATA(ids) ;/*{ SUBTYPES = ( /DEFINE_CONTACT_VOLUME ) ; } ? */
            }
            else if(KEY!="SALECPT" && KEY!="SALEFAC" )
            {
               DATA(ids) { SUBTYPES = ( /SETS/SET_SHELL_IDPOOL ) ; }
            }
        }
    }
  
}

FORMAT(Keyword971) {
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    CARD_PREREAD("%1s", Key_option_import);  
    ASSIGN(opt_D, _FIND(Key_option_import, "D"),IMPORT);
    CARD_PREREAD("%10s", Key_option_import); 
    if(Key_option_import == "ALL")
    {
        ASSIGN(KEY, ALL, IMPORT); 
    }

    if(IO_FLAG == 2 && opt_D == 1)
    {
        ASSIGN(Opt_,D,EXPORT);
    }

    if(KEY== "ALL")
    {
        CARD("%-10s",KEY);
    }
    else if(IO_FLAG == 1 && opt_D == 1)
    {
        CARD("%1s%10s",Opt_, KEY ){NO_END;}
        FREE_CELL_LIST(idsmax,"%10d",ids,80){OFFSET("%-10s", "");}
    }
    else if(IO_FLAG == 2 && opt_D == 1)
    {
        CARD("%-1s%-9s",Opt_, KEY ){NO_END;}
        FREE_CELL_LIST(idsmax,"%10d",ids,80){OFFSET("%-10s", "");}
    }
    else
    {
        CARD("%-10s",KEY ){NO_END;}
        FREE_CELL_LIST(idsmax,"%10d",ids,80){OFFSET("%-10s", "");}
    }

    ASSIGN(opt_, _FIND(KEY, "NODE"),IMPORT);
    if(opt_ == 1)
    {
        ASSIGN(ids_type, /NODE, IMPORT); 
    }
    ASSIGN(opt_, _FIND(KEY, "PART"),IMPORT);
    if(opt_ == 1)
    {
        ASSIGN(ids_type, /COMPONENT, IMPORT); 
    }
    ASSIGN(opt_, _FIND(KEY, "BOX"),IMPORT);
    if(opt_ == 1)
    {
        ASSIGN(ids_type, /BOX, IMPORT); 
    }
    ASSIGN(opt_, _FIND(KEY, "VOL"),IMPORT);
    if(opt_ == 1)
    {
        ASSIGN(ids_type, /DEFINE_CONTACT_VOLUME, IMPORT); 
    }    
    ASSIGN(opt_, _FIND(KEY, "BRANCH"),IMPORT);
    if(opt_ == 1)
    {
        ASSIGN(ids_type, /ASSEMBLY, IMPORT); 
    }
    ASSIGN(opt_, _FIND(KEY, "SET_"),IMPORT);
    if(opt_ == 1)
    {
        ASSIGN(ids_type, /SETS/ELEM, IMPORT); 
    }
}
