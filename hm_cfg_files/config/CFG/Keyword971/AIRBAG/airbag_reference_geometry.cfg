//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// LS-Dyna airbag reference geometry
//

ATTRIBUTES {

    sx                  = VALUE(FLOAT, "Scale factor X direction");
    sy                  = VALUE(FLOAT, "Scale factor Y direction");
    sz                  = VALUE(FLOAT, "Scale factor Z direction");
    nid0                = VALUE(NODE, "Origin node for scale");
    
    birth               = VALUE(FLOAT, "Time at which reference geometry activates");
  
    table_count         = SIZE("No. of nodes");   
    nodes_table_node    = ARRAY[table_count](NODE,"Node ID for which a reference configuration is defined");
    nodes_table_x       = ARRAY[table_count](FLOAT, "X-Coordinate");
    nodes_table_y       = ARRAY[table_count](FLOAT, "Y-Coordinate");
    nodes_table_z       = ARRAY[table_count](FLOAT, "Z-Coordinate");

    //Attributes for HM usage
    IO_FLAG             = VALUE(INT, "Import/Export flag");
    _HMCOMMENTSFLAG     = VALUE(INT, "Write HM Comments");
    _HWCOLOR            = VALUE(INT, "Entity Color"); 
    ARG_TYPE3           = VALUE(STRING, "Options for card");
    ARG_TYPE4           = VALUE(STRING, "Options for card");
    ARG_TYPE6           = VALUE(STRING, "Options for card");
    ARG_TYPE7           = VALUE(STRING, "Options for card");
    ARG_TYPE9           = VALUE(STRING, "Options for card");
    ARG_TYPE10          = VALUE(STRING, "Options for card");
    ARG_TYPE13          = VALUE(STRING, "Options for card");
    
    rdttoggle           = VALUE(BOOL, "RDT flag");
    birthtoggle         = VALUE(BOOL, "BIRTH flag");
    idtoggle            = VALUE(BOOL, "ID flag");
  
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    IO_FLAG             =-1;
    _HMCOMMENTSFLAG     =-1;
    _HWCOLOR            =-1;
    ARG_TYPE3           = -1;
    ARG_TYPE4           = -1;
    ARG_TYPE6           = -1;
    ARG_TYPE7           = -1;
    ARG_TYPE9           = -1;
    ARG_TYPE10          = -1;
    ARG_TYPE13          = -1;
}

DEFINITIONS(COMMON) {
  IMPORT_PREDATA_TABULAR=(nodes_table_node);
} 

FORMAT(Keyword971_R9.0){
 
  ASSIGN(IO_FLAG, 1, IMPORT);
  ASSIGN(IO_FLAG, 0, EXPORT);

  // card options reading
  if(IO_FLAG == 1)
  {
     HEADER("*AIRBAG_REFERENCE_GEOMETRY%3s", ARG_TYPE3);
     HEADER("*AIRBAG_REFERENCE_GEOMETRY%4s", ARG_TYPE4);
     HEADER("*AIRBAG_REFERENCE_GEOMETRY%6s", ARG_TYPE6);
     HEADER("*AIRBAG_REFERENCE_GEOMETRY%7s", ARG_TYPE7);
     HEADER("*AIRBAG_REFERENCE_GEOMETRY%9s", ARG_TYPE9);
     HEADER("*AIRBAG_REFERENCE_GEOMETRY%10s", ARG_TYPE10);
     HEADER("*AIRBAG_REFERENCE_GEOMETRY%13s", ARG_TYPE13);
  }  

  if(IO_FLAG == 1 && ARG_TYPE13 == "_BIRTH_RDT_ID")
  {
     ASSIGN(birthtoggle, 1, IMPORT); 
     ASSIGN(idtoggle, 1, IMPORT); 
     ASSIGN(rdttoggle, 1, IMPORT); 
  }
  if(IO_FLAG == 1 && ARG_TYPE13 == "_BIRTH_ID_RDT")
  {
     ASSIGN(birthtoggle, 1, IMPORT); 
     ASSIGN(idtoggle, 1, IMPORT); 
     ASSIGN(rdttoggle, 1, IMPORT); 
  }
  if(IO_FLAG == 1 && ARG_TYPE13 == "_RDT_ID_BIRTH")
  {
     ASSIGN(birthtoggle, 1, IMPORT); 
     ASSIGN(idtoggle, 1, IMPORT); 
     ASSIGN(rdttoggle, 1, IMPORT); 
  }
  if(IO_FLAG == 1 && ARG_TYPE13 == "_RDT_BIRTH_ID")
  {
     ASSIGN(birthtoggle, 1, IMPORT); 
     ASSIGN(idtoggle, 1, IMPORT); 
     ASSIGN(rdttoggle, 1, IMPORT); 
  }
  if(IO_FLAG == 1 && ARG_TYPE13 == "_ID_BIRTH_RDT")
  {
     ASSIGN(birthtoggle, 1, IMPORT); 
     ASSIGN(idtoggle, 1, IMPORT); 
     ASSIGN(rdttoggle, 1, IMPORT); 
  }
  if(IO_FLAG == 1 && ARG_TYPE13 == "_ID_RDT_BIRTH")
  {
     ASSIGN(birthtoggle, 1, IMPORT); 
     ASSIGN(idtoggle, 1, IMPORT); 
     ASSIGN(rdttoggle, 1, IMPORT); 
  }
  else if(IO_FLAG == 1 && ARG_TYPE10 == "_RDT_BIRTH")
  {
     ASSIGN(birthtoggle, 1, IMPORT); 
     ASSIGN(rdttoggle, 1, IMPORT); 
  }
  else if(IO_FLAG == 1 && ARG_TYPE10 == "_BIRTH_RDT")
  {
     ASSIGN(birthtoggle, 1, IMPORT); 
     ASSIGN(rdttoggle, 1, IMPORT); 
  }
  else if(IO_FLAG == 1 && ARG_TYPE9 == "_BIRTH_ID")
  {
     ASSIGN(birthtoggle, 1, IMPORT); 
     ASSIGN(idtoggle, 1, IMPORT); 
  }
  else if(IO_FLAG == 1 && ARG_TYPE9 == "_ID_BIRTH")
  {
     ASSIGN(birthtoggle, 1, IMPORT); 
     ASSIGN(idtoggle, 1, IMPORT); 
  }
  else if(IO_FLAG == 1 && ARG_TYPE7 == "_RDT_ID")
  {
     ASSIGN(rdttoggle, 1, IMPORT); 
     ASSIGN(idtoggle, 1, IMPORT); 
  }
  else if(IO_FLAG == 1 && ARG_TYPE7 == "_ID_RDT")
  {
     ASSIGN(rdttoggle, 1, IMPORT); 
     ASSIGN(idtoggle, 1, IMPORT); 
  }
  else if(IO_FLAG == 1 && ARG_TYPE6 == "_BIRTH")
  {
     ASSIGN(birthtoggle, 1, IMPORT); 
  }
  else if(IO_FLAG == 1 && ARG_TYPE4 == "_RDT")
  {
     ASSIGN(rdttoggle, 1, IMPORT); 
  }
  else if(IO_FLAG == 1 && ARG_TYPE3 == "_ID")
  {
     ASSIGN(idtoggle, 1, IMPORT); 
  }
  
  // card options writing 
  if(IO_FLAG == 0 && birthtoggle == 0 &&  rdttoggle == 0 && idtoggle == 0) {
     HEADER("*AIRBAG_REFERENCE_GEOMETRY");
  }
  else if(IO_FLAG == 0 && birthtoggle == 0 &&  rdttoggle == 0 && idtoggle == 1) {
     HEADER("*AIRBAG_REFERENCE_GEOMETRY_ID");
  }
  else if(IO_FLAG == 0 && birthtoggle == 0 &&  rdttoggle == 1 && idtoggle == 0) {
     HEADER("*AIRBAG_REFERENCE_GEOMETRY_RDT");
  }
  else if(IO_FLAG == 0 && birthtoggle == 0 &&  rdttoggle == 1 && idtoggle == 1) {
     HEADER("*AIRBAG_REFERENCE_GEOMETRY_RDT_ID");
  }
  else if(IO_FLAG == 0 && birthtoggle == 1 &&  rdttoggle == 0 && idtoggle == 0) {
     HEADER("*AIRBAG_REFERENCE_GEOMETRY_BIRTH");
  }
  else if(IO_FLAG == 0 && birthtoggle == 1 &&  rdttoggle == 0 && idtoggle == 1) {
     HEADER("*AIRBAG_REFERENCE_GEOMETRY_BIRTH_ID");
  }
  else if(IO_FLAG == 0 && birthtoggle == 1 &&  rdttoggle == 1 && idtoggle == 0) {
     HEADER("*AIRBAG_REFERENCE_GEOMETRY_BIRTH_RDT");
  }
  else if(IO_FLAG == 0 && birthtoggle == 1 &&  rdttoggle == 1 && idtoggle == 1) {
     HEADER("*AIRBAG_REFERENCE_GEOMETRY_BIRTH_RDT_ID");
  }
    
  //
  if (idtoggle == 1) {
     COMMENT("$       ID        SX        SY        SZ      NID0");
     CARD("%10d%10lg%10lg%10lg%10d",_ID_,sx,sy,sz,nid0);
  }

  //
  if (birthtoggle == 1) {
     COMMENT("$    BIRTH");
     CARD("%10lg",birth);
  }
  
  //
  COMMENT("$    NID               X               Y               Z");    
  FREE_CARD_LIST(table_count)
  {
      CARD("%8d%16lg%16lg%16lg",nodes_table_node, nodes_table_x, nodes_table_y, nodes_table_z);
  }
}
