//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- define_transformation.cfg ---

ATTRIBUTES(COMMON)
{
  transformations_count                   = SIZE("");
  transformations                          = ARRAY[transformations_count](TRANSFORMATION, "Transformations");

  //HM INTERNAL
  KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
  LSD_TitleOpt                            = VALUE(INT,    "Title Flag");
  vectorbytwonodes                        = VALUE(INT,    "vector by two nodes");

  IO_FLAG                                 = VALUE(INT,    "");
  TITLE                                   = VALUE(STRING, "HEADING");
  _rotateOption                           = VALUE(STRING, "");
  _opt                                    = VALUE(STRING, "");
  _dummy_config                           = VALUE(STRING, "config value");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
  //INPUT ATTTIBUTES
  KEYWORD_STR                             = 9000;
  LSD_TitleOpt                            = 90;

  IO_FLAG                                 = -1;
  TITLE                                   = -1;
  _rotateOption                           = -1;
  _opt                                    = -1;
  _dummy_config                           = -1;
}

GUI(COMMON)
{
  ASSIGN(KEYWORD_STR, "*DEFINE_TRANSFORMATION");

  FLAG(LSD_TitleOpt, "Title Flag");
  if(LSD_TitleOpt == 1)
  {
    ASSIGN(KEYWORD_STR, "_TITLE");
  }

}

FORMAT(Keyword971_R10.1)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if(IO_FLAG == 0)
    {
        if(LSD_TitleOpt == 1)
        {
            HEADER("*DEFINE_TRANSFORMATION_TITLE");
        }
        else
        {
            HEADER("*DEFINE_TRANSFORMATION");
        }
    }
    else
    {
        HEADER("*DEFINE_TRANSFORMATION%20s",_opt);
        //ID Flag
        ASSIGN(LSD_TitleOpt,_FIND(_opt,"_TITLE"),IMPORT);
    }
    if(LSD_TitleOpt == 1)
    {
        CARD("%-80s", TITLE);
    }
    COMMENT("$   TRANID");
    CARD("%10d", _ID_);
    SUBOBJECTS(transformations,/SUBOBJECT/TRANSFORMATION);
}

FORMAT(Keyword971_R9.3)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if(IO_FLAG == 0)
    {
        if(LSD_TitleOpt == 1)
        {
            HEADER("*DEFINE_TRANSFORMATION_TITLE");
        }
        else
        {
            HEADER("*DEFINE_TRANSFORMATION");
        }
    }
    else
    {
        HEADER("*DEFINE_TRANSFORMATION%20s",_opt);
        //ID Flag
        ASSIGN(LSD_TitleOpt,_FIND(_opt,"_TITLE"),IMPORT);
    }
    if(LSD_TitleOpt == 1)
    {
        CARD("%-80s", TITLE);
    }
    COMMENT("$   TRANID");
    CARD("%10d", _ID_);
    SUBOBJECTS(transformations,/SUBOBJECT/TRANSFORMATION);
}

FORMAT(Keyword971)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if(IO_FLAG == 0)
    {
        if(LSD_TitleOpt == 1)
        {
            HEADER("*DEFINE_TRANSFORMATION_TITLE");
        }
        else
        {
            HEADER("*DEFINE_TRANSFORMATION");
        }
    }
    else
    {
        HEADER("*DEFINE_TRANSFORMATION%20s",_opt);
        //ID Flag
        ASSIGN(LSD_TitleOpt,_FIND(_opt,"_TITLE"),IMPORT);
    }
    if(LSD_TitleOpt == 1)
    {
        CARD("%-80s", TITLE);
    }
    COMMENT("$   TRANID");
    CARD("%10d", _ID_);
    SUBOBJECTS(transformations,/SUBOBJECT/TRANSFORMATION);
}