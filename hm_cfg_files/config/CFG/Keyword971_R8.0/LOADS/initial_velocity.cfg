//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//  initial_velocity.cfg
// CARD initial_velocity 971 746
// 10

ATTRIBUTES(COMMON)
{
    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING,    "Solver Keyword");
    GENERATION_OPT                          = VALUE(INT,       "Options");

    _IO_FLAG                                = VALUE(INT,       "");
    _dummy                                  = VALUE(STRING,    "");
    _opt                                    = VALUE(INT,       "");
    none_opt                                = VALUE(SUBOBJECT, "NONE");
    generation_opt                          = VALUE(SUBOBJECT, "Generation");
    rigidbody_opt                           = VALUE(SUBOBJECT, "Ridigbody");

}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //HM INTERNAL
    KEYWORD_STR                             = 9000;
    GENERATION_OPT                          = 2794;

    _IO_FLAG                                = -1;
    _dummy                                  = -1;
    _opt                                    = -1;
    none_opt                                = -1;
    generation_opt                          = -1;
    rigidbody_opt                           = -1;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR,"*INITIAL_VELOCITY");

    RADIO(GENERATION_OPT,"Options")
    {
        ADD(1,"None");
        ADD(2,"Generation");
        ADD(3,"RigidBody");
    }

    if(GENERATION_OPT == 1)
    {
        SUBOBJECT(none_opt)       {SUBTYPES = (/SUBOBJECT/INITIAL_VELOCITY);}
    }
    if(GENERATION_OPT == 2)
    {
        ASSIGN(KEYWORD_STR,"_GENERATION");
        SUBOBJECT(generation_opt) {SUBTYPES = (/SUBOBJECT/INITIAL_VELOCITY_GENERATION);}
    }
    else if( GENERATION_OPT == 3)
    {
        ASSIGN(KEYWORD_STR,"_RIGID_BODY");
        SUBOBJECT(rigidbody_opt)  {SUBTYPES = (/SUBOBJECT/INITIAL_VELOCITY_RIGID_BODY);}
    }
}

FORMAT(Keyword971_R6.1)
{
    ASSIGN(_IO_FLAG, 1, IMPORT);
    ASSIGN(_IO_FLAG, 0, EXPORT);

    if(_IO_FLAG == 1)
    {
        HEADER("*INITIAL_VELOCITY%-70s", _dummy);

        if(_dummy == "")
        {
            ASSIGN(GENERATION_OPT, 1, IMPORT);
        }
        else
        {
            ASSIGN(_opt, _FIND(_dummy, "_GENERATION"), IMPORT);
            if(_opt == 1)
            {
                ASSIGN(GENERATION_OPT, 2, IMPORT);
            }
            else
            {
                ASSIGN(_opt, _FIND(_dummy, "_RIGID_BODY"), IMPORT);
                if(_opt == 1)
                {
                    ASSIGN(GENERATION_OPT, 3, IMPORT);
                }
            }
        }
    }

    if(GENERATION_OPT == 1)
    {
        if(_IO_FLAG == 0)
        {
            HEADER("*INITIAL_VELOCITY");
        }
        SUBOBJECTS(none_opt, /SUBOBJECT/INITIAL_VELOCITY);
    }
    else if(GENERATION_OPT == 2)
    {
        if(_IO_FLAG == 0)
        {
            HEADER("*INITIAL_VELOCITY_GENERATION");
        }
        SUBOBJECTS(generation_opt, /SUBOBJECT/INITIAL_VELOCITY_GENERATION);
    }
    else if(GENERATION_OPT == 3)
    {
        if(_IO_FLAG == 0)
        {
            HEADER("*INITIAL_VELOCITY_RIGID_BODY");
        }
        SUBOBJECTS(rigidbody_opt, /SUBOBJECT/INITIAL_VELOCITY_RIGID_BODY);
    }
}
FORMAT(Keyword971_R8.0)
{
    ASSIGN(_IO_FLAG, 1, IMPORT);
    ASSIGN(_IO_FLAG, 0, EXPORT);

    if(_IO_FLAG == 1)
    {
        HEADER("*INITIAL_VELOCITY%-70s", _dummy);

        if(_dummy == "")
        {
            ASSIGN(GENERATION_OPT, 1, IMPORT);
        }
        else
        {
            ASSIGN(_opt, _FIND(_dummy, "_GENERATION"), IMPORT);
            if(_opt == 1)
            {
                ASSIGN(GENERATION_OPT, 2, IMPORT);
            }
            else
            {
                ASSIGN(_opt, _FIND(_dummy, "_RIGID_BODY"), IMPORT);
                if(_opt == 1)
                {
                    ASSIGN(GENERATION_OPT, 3, IMPORT);
                }
            }
        }
    }

    if(GENERATION_OPT == 1)
    {
        if(_IO_FLAG == 0)
        {
            HEADER("*INITIAL_VELOCITY");
        }
        SUBOBJECTS(none_opt, /SUBOBJECT/INITIAL_VELOCITY);
    }
    else if(GENERATION_OPT == 2)
    {
        if(_IO_FLAG == 0)
        {
            HEADER("*INITIAL_VELOCITY_GENERATION");
        }
        SUBOBJECTS(generation_opt, /SUBOBJECT/INITIAL_VELOCITY_GENERATION);
    }
    else if(GENERATION_OPT == 3)
    {
        if(_IO_FLAG == 0)
        {
            HEADER("*INITIAL_VELOCITY_RIGID_BODY");
        }
        SUBOBJECTS(rigidbody_opt, /SUBOBJECT/INITIAL_VELOCITY_RIGID_BODY);
    }
}
