//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
ATTRIBUTES(COMMON) {

    //Attributes for HM usage 
    IO_FLAG                             = VALUE(INT, "Import/Export flag");
    _HMCOMMENTSFLAG                     = VALUE(INT, "Write HM Comments");
    _HWCOLOR                            = VALUE(INT, "Entity Color");
    _HAS_HEADER                         = VALUE(BOOL,"Has Header Card");
    TITLE                               = VALUE(STRING, "TITLE");
    solverkeyword                       = VALUE(STRING, "Solver Keyword");
    nwaves                              = SIZE("No of Incident Waves","No_Incident_Waves");
    mag_option                          = ARRAY[nwaves](BOOL,"Flag specifying MAG options");

    // Solver fields
    typeofwave                           = ARRAY[nwaves](INT,"Type of incident sound wave");
    mag_curve                            = ARRAY[nwaves](FUNCT,"MAG is a curve ID, which defines the frequency dependent magnitude");
    mag                                  = ARRAY[nwaves](FLOAT,"Magnitude of the incident sound wave");
    xcs                                  = ARRAY[nwaves](FLOAT,"Direction cosines for the place wave, or coordinates of the point source for the spherical wave");
    ycs                                  = ARRAY[nwaves](FLOAT,"Direction cosines for the place wave, or coordinates of the point source for the spherical wave");
    zcs                                  = ARRAY[nwaves](FLOAT,"Direction cosines for the place wave, or coordinates of the point source for the spherical wave");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    IO_FLAG                            = -1;
    _HMCOMMENTSFLAG                    = -1;
    _HWCOLOR                           = -1;
    _HAS_HEADER                        = -1;
    TITLE                              = -1;
    solverkeyword                      = -1;
}

DEFAULTS(COMMON)
{
    typeofwave                           = 1;
}

CHECK(COMMON)
{
    nwaves                               >= 0;
}

GUI(COMMON)
{
    ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_ACOUSTIC_INCIDENT_WAVE);
    
    SIZE(nwaves);
    ARRAY(nwaves, "")
    {
        RADIO(typeofwave)
        {
           ADD(1, "1:Plane wave");
           ADD(2, "2:Spherical wave");
        }
        SCALAR(mag);
        SCALAR(xcs) { DIMENSION = "l"; }
        SCALAR(ycs) { DIMENSION = "l"; }
        SCALAR(zcs) { DIMENSION = "l"; }
    }
}

// File format
FORMAT(Keyword971_R8.0) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    HEADER("*FREQUENCY_DOMAIN_ACOUSTIC_INCIDENT_WAVE");
    
    if (IO_FLAG == 0)
    {
        COMMENT("$     TYPE       MAG        XC        YC        ZC");
        CARD_LIST(nwaves)
        {
            CARD("%10d%10lg%10lg%10lg%10lg",typeofwave,mag,xcs,ycs,zcs);
        }
    }
    else
    {
        FREE_CARD_LIST(nwaves)
        { 
            CARD("%10d%10lg%10lg%10lg%10lg",typeofwave,mag,xcs,ycs,zcs);
            ASSIGN(mag_option, 0, IMPORT);
            ASSIGN(mag_curve, 0, IMPORT);
        }
    }
}
