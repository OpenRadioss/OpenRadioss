//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
ATTRIBUTES(COMMON) {

    //Attributes for HM usage 
    IO_FLAG                             = VALUE(INT, "Import/Export flag");
    _HMCOMMENTSFLAG                     = VALUE(INT, "Write HM Comments");
    _HWCOLOR                            = VALUE(INT, "Entity Color");
    _HAS_HEADER                         = VALUE(BOOL,"Has Header Card");
    TITLE                               = VALUE(STRING, "TITLE");
    solverkeyword                       = VALUE(STRING, "Solver Keyword");
    Type                                = VALUE(STRING, "");
    nexcitations                        = SIZE("No of Excitation Loads","No_Excitation_Loads");
    ssdoptions                          = VALUE(INT, "SSD Options","OPTION");

    // Solver fields
    mdmin                                = VALUE(INT,"The first mode in modal superposition method");
    mdmax                                = VALUE(INT,"The last mode in modal superposition method");
    fnmin                                = VALUE(FLOAT,"The minimum natural frequency in modal superposition method");
    fnmax                                = VALUE(FLOAT,"The maximum natural frequency in modal superposition method");
    restmd                               = VALUE(INT,"Restart option");
    restdp                               = VALUE(INT,"Restart option");
    lcflag                               = VALUE(INT,"Load Curve definition flag");
    relatv                               = VALUE(INT,"FLAG for displacement, velocity and acceleration results");
    dampf                                = VALUE(FLOAT,"Modal damping coefficient");
    lcdam                                = VALUE(FUNCT, "Load Curve ID defining mode dependent modal damping coefficient");
    lctyp                                = VALUE(INT,"Type of load curve defining modal damping coefficient");
    dmpmas                               = VALUE(FLOAT,"Mass proportional damping constant Alpha, in Rayleigh damping");
    dmpstf                               = VALUE(FLOAT,"Stiffness proportional damping constant Beta , in Rayleigh damping");
    dmpflg                               = VALUE(INT,"Damping flag");
    notyp                                = VALUE(INT,"Type of NOUT");
    nout                                 = VALUE(MULTIOBJECT,"Part set/ Part/ Segment set/Node set ID for response output") { SUBTYPES = ( /SETS/SET_PART_IDPOOL,  /COMPONENT, /SETS/SET_SEGMENT_GENERAL_IDPOOL, /SETS/SET_NODE_IDPOOL ) ; }
    nova                                 = VALUE(INT,"Response output type");
    ntyp_ssd                             = ARRAY[nexcitations](INT,"Type of NID");
    nids                                 = ARRAY[nexcitations](NODE, "Node ID","NIDS");
    nsids                                = ARRAY[nexcitations](SETS, "Node Set ID","NSIDS") { SUBTYPES = (/SETS/SET_NODE_IDPOOL);  }
    ssid2s                               = ARRAY[nexcitations](SETS, "Segment Set ID","SSIDS2") { SUBTYPES = (/SETS/SET_SEGMENT_GENERAL_IDPOOL);  }
    dof                                  = ARRAY[nexcitations](INT,"Applicable degrees-of-freedom for excitation input");
    vad_excitation                       = ARRAY[nexcitations](INT,"Excitation input type");
    lc1                                  = ARRAY[nexcitations](FUNCT, "Load Curve ID defining real (in-phase) part (LCFLAG=0) or amplitude (LCFLAG=1) of load as a function of frequency","LC1");
    lc2                                  = ARRAY[nexcitations](FUNCT, "Load Curve ID defining imaginary (out-phase) part (LCFLAG=0) or phase angle (LCFLAG=1) of load as a function of frequency");
    lc3                                  = ARRAY[nexcitations](FUNCT, "Load Curve ID defining load duration for each frequency");
    lcflags                              = ARRAY[nexcitations](INT,"Load Curve definition flag");
    vid                                  = ARRAY[nexcitations](VECTOR, "Vector ID for DOF=4 for excitation input");
    DUMMY_NTYP                           = VALUE(INT, "NTYP");
    empty_string                         = VALUE(STRING, "empty string");
    nout_type                            = VALUE(STRING, "Type of multi object");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    IO_FLAG                            = -1;
    _HMCOMMENTSFLAG                    = -1;
    _HWCOLOR                           = -1;
    _HAS_HEADER                        = -1;
    TITLE                              = -1;
    solverkeyword                      = -1;
    empty_string                       = -1;
    DUMMY_NTYP                         = -1;
    nout_type                          = -1;
    Type                               = -1;
}

DEFAULTS(COMMON)
{
    mdmin                                = 1;
    fnmin                                = 0.0;
    restmd                               = 0;
    restdp                               = 1;
    relatv                               = 0;
    dampf                                = 0.0;
    lctyp                                = 0;
    dmpmas                               = 0.0;
    dmpstf                               = 0.0;
    notyp                                = 0;
    nova                                 = 0;
    ntyp_ssd                             = 0;
    dof                                  = 0;
    vad_excitation                       = 0;
    lcflags                              = 0;
    ssdoptions                           = 0;
    nexcitations                         = 0;
    lcflag                               = 0;
    dmpflg                               = 0;
}

CHECK(COMMON)
{
    nexcitations                         >= 0;
}

GUI(COMMON)
{
    RADIO(ssdoptions)
    {
        ADD(0,"NONE");
    } { PARAMETERIZED = FALSE; DISPLAY_STATUS=ALWAYS_ON;}
    ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_SSD);
    
    // Card 1
    SCALAR(mdmin);
    SCALAR(mdmax);
    SCALAR(fnmin) { DIMENSION = "f"; }
    SCALAR(fnmax) { DIMENSION = "f"; }
    RADIO(restmd)
    {
        ADD(0,"0:A new modal analysis is performed");
        ADD(1,"1:Restart with d3eigv");
    }
    RADIO(restdp)
    {
        ADD(0,"0:A new run without dumpssd");
        ADD(1,"1:Restart with dumpssd");
    }
    RADIO(lcflag)
    {
        ADD(0,"0:Load curves are given as amplitude / phase angle");
        ADD(1,"1:Load curves are given as real / imaginary components");
    }
    RADIO(relatv)
    {
        ADD(0,"0:Absolute values are requested");
        ADD(1,"1:Relative values are requested");
    }
    
    // Card 2
    SCALAR(dampf);
    FUNCTION(lcdam) {/FILTER/curveoption/0/EQ;}
    RADIO(lctyp)
    {
        ADD(0,"0:Abscissa value defines frequency");
        ADD(1,"1:Abscissa value defines mode number");
    }
    SCALAR(dmpmas);
    SCALAR(dmpstf);
    RADIO(dmpflg)
    {
        ADD(0,"0:Use modal damping coefficient, defined by DAMPF, or LCDAM, or Rayleigh damping defined by DMPMAS and DMPSTF in this card");
        ADD(1,"1:Use damping defined by *DAMPING_PART_MASS and *DAMPING_PART_STIFFNESS");
    }
    
    // Card 3
    RADIO(notyp)
    {
        ADD(0,"0:Part set ID");
        ADD(1,"1:Part ID");
        ADD(2,"2:Segment set ID");
        ADD(3,"3:Node set ID");
        ADD(-2,"-2:segment set ID which mismatches with acoustic boundary nodes");
    }
    if(notyp == 0)
    {
        DATA(nout) { SUBTYPES = ( /SETS/SET_PART_IDPOOL ) ;  }
    }
    else if(notyp == 1)
    {
        DATA(nout) { SUBTYPES = ( /COMPONENT ) ;  }
    }
    else if(notyp == 2 || notyp == -2)
    {
        DATA(nout) { SUBTYPES = ( /SETS/SET_SEGMENT_GENERAL_IDPOOL ) ;  }
    }
    else
    {
        DATA(nout) { SUBTYPES = ( /SETS/SET_NODE_IDPOOL ) ;  }
    }
    RADIO(nova)
    {
        ADD(0,"0:Velocity");
        ADD(1,"1:Acceleration");
    }

    SIZE(nexcitations);
    ARRAY(nexcitations, "")
    {
        RADIO(ntyp_ssd)
        {
            ADD(0, "0:Node ID");
            ADD(1, "1:Node set ID");
            ADD(2, "2:Segment set ID");
        }
        if (ntyp_ssd == 0)
        {
            DATA(nids);
        }
        else if (ntyp_ssd == 1)
        {
            DATA(nsids);
        }
        else if (ntyp_ssd == 2)
        {
            DATA(ssid2s);
        }
        RADIO(dof)
        {
            ADD(1, "1:X-translational degree-of-freedom");
            ADD(2, "2:Y-translational degree-of-freedom");
            ADD(3, "3:Z-translational degree-of-freedom");
            ADD(4, "4:Translational movement in direction given by vector VID");
        }
        RADIO(vad_excitation)
        {
            ADD(0, "0:Nodal force");
            ADD(1, "1:Pressure");
            ADD(2, "2:Base acceleration");
            ADD(3, "3:Enforced velocity");
            ADD(4, "4:Enforced acceleration");
            ADD(5, "5:Enforced displacement");
        }
        FUNCTION(lc1) {/FILTER/curveoption/0/EQ;}
        FUNCTION(lc2) {/FILTER/curveoption/0/EQ;}
        FUNCTION(lc3) {/FILTER/curveoption/0/EQ;}
        DATA(vid);
        SCALAR(lcflags) { VISIBLE = FALSE; }
    }
}

// File format
FORMAT(Keyword971_R8.0) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    HEADER("*FREQUENCY_DOMAIN_SSD");
    
    if(IO_FLAG == 1)
    {
        ASSIGN(ssdoptions,0);
    }
    
    COMMENT("$    MDMIN     MDMAX     FNMIN     FNMAX    RESTMD    RESTDP    LCFLAG    RELATV");
    CARD("%10d%10d%10lg%10lg%10d%10d%10d%10d",mdmin,mdmax,fnmin,fnmax,restmd,restdp,lcflag,relatv);
    
    COMMENT("$    DAMPF     LCDAM     LCTYP    DMPMAS    DMPSTF    DMPFLG");
    CARD("%10lg%10d%10d%10lg%10lg%10d",dampf,lcdam,lctyp,dmpmas,dmpstf,dmpflg);
    
    if(IO_FLAG == 1)
    {
        CARD_PREREAD("                                                            %10d%10s",DUMMY_NTYP,empty_string);
    }
    
    if(IO_FLAG == 1 && DUMMY_NTYP == 0)
    {
        ASSIGN(nout_type,/SETS/SET_PART_IDPOOL, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_NTYP == 1)
    {
        ASSIGN(nout_type,/COMPONENT, IMPORT); 
    }
    else if(IO_FLAG == 1 && (DUMMY_NTYP == 2 || DUMMY_NTYP == -2))
    {
        ASSIGN(nout_type,/SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_NTYP == 3)
    {
        ASSIGN(nout_type,/SETS/SET_NODE_IDPOOL, IMPORT); 
    }
    
    COMMENT("$                                                       NOUT     NOTYP      NOVA");
    CARD("                                                  %10d%10d%10d",nout,notyp,nova);
    
    if (IO_FLAG == 0)
    {
        COMMENT("$      NID      NTYP       DOF       VAD       LC1       LC2       LC3       VID");
        CARD_LIST(nexcitations)
        {
            CARD("%10d%10d%10d%10d%10d%10d%10d%10d",CELL_COND(  if (ntyp_ssd == 0)  
                                                                    nids;
                                                                else if (ntyp_ssd == 1)  
                                                                    nsids;
                                                                else if (ntyp_ssd == 2)  
                                                                    ssid2s;), ntyp_ssd, dof, vad_excitation, lc1, lc2, lc3, vid);
        }
    }
    else
    {
        FREE_CARD_LIST(nexcitations)
        { 
            CARD_PREREAD("%10s%10d%10s%10s%10s%10s%10s%10s",empty_string,DUMMY_NTYP,empty_string,empty_string,empty_string,empty_string,empty_string,empty_string);
            CARD("%10d%10d%10d%10d%10d%10d%10d%10d", CELL_COND(  if(DUMMY_NTYP == 0)
                                                                        nids;
                                                                 else if(DUMMY_NTYP == 1)
                                                                        nsids;
                                                                 else if(DUMMY_NTYP == 2)
                                                                        ssid2s;), ntyp_ssd, dof, vad_excitation, lc1, lc2, lc3, vid); 
                                                                    
            if(DUMMY_NTYP == 0)
            {
                ASSIGN(nsids, 0, IMPORT);
                ASSIGN(ssid2s, 0, IMPORT);
            }
            else if(DUMMY_NTYP == 1)
            {
                ASSIGN(nids, 0, IMPORT);
                ASSIGN(ssid2s, 0, IMPORT);
            }
            else if(DUMMY_NTYP == 2)
            {
                ASSIGN(nids, 0, IMPORT);
                ASSIGN(nsids, 0, IMPORT);
            }
            ASSIGN(lcflags, 0, IMPORT);
        }
    }
}

// File format
FORMAT(Keyword971_R7.1) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    HEADER("*FREQUENCY_DOMAIN_SSD");
    
    if(IO_FLAG == 1)
    {
        ASSIGN(ssdoptions,0);
    }
    
    COMMENT("$    MDMIN     MDMAX     FNMIN     FNMAX    RESTMD    RESTDP              RELATV");
    CARD("%10d%10d%10lg%10lg%10d%10d          %10d",mdmin,mdmax,fnmin,fnmax,restmd,restdp,relatv);
    
    COMMENT("$    DAMPF     LCDAM     LCTYP    DMPMAS    DMPSTF");
    CARD("%10lg%10d%10d%10lg%10lg",dampf,lcdam,lctyp,dmpmas,dmpstf);
    
    if(IO_FLAG == 1)
    {
        CARD_PREREAD("                                                            %10d%10s",DUMMY_NTYP,empty_string);
    }
    
    if(IO_FLAG == 1 && DUMMY_NTYP == 0)
    {
        ASSIGN(nout_type,/SETS/SET_PART_IDPOOL, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_NTYP == 1)
    {
        ASSIGN(nout_type,/COMPONENT, IMPORT); 
    }
    else if(IO_FLAG == 1 && (DUMMY_NTYP == 2 || DUMMY_NTYP == -2))
    {
        ASSIGN(nout_type,/SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_NTYP == 3)
    {
        ASSIGN(nout_type,/SETS/SET_NODE_IDPOOL, IMPORT); 
    }
    
    COMMENT("$                                                       NOUT     NOTYP      NOVA");
    CARD("                                                  %10d%10d%10d",nout,notyp,nova);
    
    if (IO_FLAG == 0)
    {
        COMMENT("$      NID      NTYP       DOF       VAD       LC1       LC2    LCFLAG       VID");
        CARD_LIST(nexcitations)
        {
            CARD("%10d%10d%10d%10d%10d%10d%10d%10d",CELL_COND(  if (ntyp_ssd == 0)  
                                                                    nids;
                                                                else if (ntyp_ssd == 1)  
                                                                    nsids;
                                                                else if (ntyp_ssd == 2)  
                                                                    ssid2s;), ntyp_ssd, dof, vad_excitation, lc1, lc2, lcflags, vid);
        }
    }
    else
    {
        FREE_CARD_LIST(nexcitations)
        { 
            CARD_PREREAD("%10s%10d%10s%10s%10s%10s%10s%10s",empty_string,DUMMY_NTYP,empty_string,empty_string,empty_string,empty_string,empty_string,empty_string);
            CARD("%10d%10d%10d%10d%10d%10d%10d%10d", CELL_COND(  if(DUMMY_NTYP == 0)
                                                                        nids;
                                                                 else if(DUMMY_NTYP == 1)
                                                                        nsids;
                                                                 else if(DUMMY_NTYP == 2)
                                                                        ssid2s;), ntyp_ssd, dof, vad_excitation, lc1, lc2, lcflags, vid); 
                                                                    
            if(DUMMY_NTYP == 0)
            {
                ASSIGN(nsids, 0, IMPORT);
                ASSIGN(ssid2s, 0, IMPORT);
            }
            else if(DUMMY_NTYP == 1)
            {
                ASSIGN(nids, 0, IMPORT);
                ASSIGN(ssid2s, 0, IMPORT);
            }
            else if(DUMMY_NTYP == 2)
            {
                ASSIGN(nids, 0, IMPORT);
                ASSIGN(nsids, 0, IMPORT);
            }
        }
    }
}

// File format
FORMAT(Keyword971_R6.1) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    HEADER("*FREQUENCY_DOMAIN_SSD");
    
    if(IO_FLAG == 1)
    {
        ASSIGN(ssdoptions,0);
    }
    
    COMMENT("$    MDMIN     MDMAX     FNMIN     FNMAX    RESTMD    RESTDP              RELATV");
    CARD("%10d%10d%10lg%10lg%10d%10d          %10d",mdmin,mdmax,fnmin,fnmax,restmd,restdp,relatv);
    
    COMMENT("$    DAMPF     LCDAM     LCTYP    DMPMAS    DMPSTF");
    CARD("%10lg%10d%10d%10lg%10lg",dampf,lcdam,lctyp,dmpmas,dmpstf);
    
    if(IO_FLAG == 1)
    {
        CARD_PREREAD("                                                            %10d%10s",DUMMY_NTYP,empty_string);
    }
    
    if(IO_FLAG == 1 && DUMMY_NTYP == 0)
    {
        ASSIGN(nout_type,/SETS/SET_PART_IDPOOL, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_NTYP == 1)
    {
        ASSIGN(nout_type,/COMPONENT, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_NTYP == 2)
    {
        ASSIGN(nout_type,/SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT); 
    }
    else if(IO_FLAG == 1 && DUMMY_NTYP == 3)
    {
        ASSIGN(nout_type,/SETS/SET_NODE_IDPOOL, IMPORT); 
    }
    
    COMMENT("$                                                       NOUT     NOTYP      NOVA");
    CARD("                                                  %10d%10d%10d",nout,notyp,nova);
    
    if (IO_FLAG == 0)
    {
        COMMENT("$      NID      NTYP       DOF       VAD       LC1       LC2    LCFLAG       VID");
        CARD_LIST(nexcitations)
        {
            CARD("%10d%10d%10d%10d%10d%10d%10d%10d",CELL_COND(  if (ntyp_ssd == 0)  
                                                                    nids;
                                                                else if (ntyp_ssd == 1)  
                                                                    nsids;
                                                                else if (ntyp_ssd == 2)  
                                                                    ssid2s;), ntyp_ssd, dof, vad_excitation, lc1, lc2, lcflags, vid);
        }
    }
    else
    {
        FREE_CARD_LIST(nexcitations)
        { 
            CARD_PREREAD("%10s%10d%10s%10s%10s%10s%10s%10s",empty_string,DUMMY_NTYP,empty_string,empty_string,empty_string,empty_string,empty_string,empty_string);
            CARD("%10d%10d%10d%10d%10d%10d%10d%10d", CELL_COND(  if(DUMMY_NTYP == 0)
                                                                        nids;
                                                                 else if(DUMMY_NTYP == 1)
                                                                        nsids;
                                                                 else if(DUMMY_NTYP == 2)
                                                                        ssid2s;), ntyp_ssd, dof, vad_excitation, lc1, lc2, lcflags, vid); 
                                                                    
            if(DUMMY_NTYP == 0)
            {
                ASSIGN(nsids, 0, IMPORT);
                ASSIGN(ssid2s, 0, IMPORT);
            }
            else if(DUMMY_NTYP == 1)
            {
                ASSIGN(nids, 0, IMPORT);
                ASSIGN(ssid2s, 0, IMPORT);
            }
            else if(DUMMY_NTYP == 2)
            {
                ASSIGN(nids, 0, IMPORT);
                ASSIGN(nsids, 0, IMPORT);
            }
        }
    }
}
