//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- airbag_option.cfg ---

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES

    //ID Cards
    entityiddisplayed                       = VALUE(MULTIOBJECT, "Set ID") { SUBTYPES = (  /ELEMS , /SETS ) ; }
    ABG_SIDTYP                              = VALUE(INT,         "Set Type");
    LSD_RBID                                = VALUE(INT,         "Rigid body part ID for user defined activation subroutine");
    LSD_VSCA                                = VALUE(FLOAT,       "Volume scale factor");
    LSD_PSCA                                = VALUE(FLOAT,       "Pressure scale factor");
    LSD_VINI                                = VALUE(FLOAT,       "Initial filled volume");
    LSD_MWD                                 = VALUE(FLOAT,       "Mass weighted damping factor");
    LSD_SPSF                                = VALUE(FLOAT,       "Stagnation pressure scale factor");

    //User Subroutine Control  Card  - RBID > 0
    NoAbgSenParms                           = SIZE("Number of input parameters (not to exceed 25)");
    //User Subroutine Constant Cards - RBID > 0
    AbgSenParsArray                         = ARRAY[NoAbgSenParms](INT, "Up to 25 constants for the user subroutine");

    //Acceleration Sensor Card       - RBID < 0
    LSD_AX                                  = VALUE(FLOAT,       "Acceleration level in local x-direction to activate inflator");
    LSD_AY                                  = VALUE(FLOAT,       "Acceleration level in local y-direction to activate inflator");
    LSD_AZ                                  = VALUE(FLOAT,       "Acceleration level in local z-direction to activate inflator");
    LSD_AMAG                                = VALUE(FLOAT,       "Acceleration magnitude required to activate inflator");
    LSD_TDUR                                = VALUE(FLOAT,       "Time duration acceleration must be exceeded before the inflator activates");
    //Velocity     Sensor Card       - RBID < 0
    LSD_DVX                                 = VALUE(FLOAT,       "Velocity change in local x-direction to activate the inflator");
    LSD_DVY                                 = VALUE(FLOAT,       "Velocity change in local y-direction to activate the inflator");
    LSD_DVZ                                 = VALUE(FLOAT,       "Velocity change in local z-direction to activate the inflator");
    LSD_DVMAG                               = VALUE(FLOAT,       "Velocity change magnitude required to activate the inflator");
    //Displacement Sensor Card       - RBID < 0
    LSD_UX                                  = VALUE(FLOAT,       "Displacement increment in local x-direction to activate the inflator");
    LSD_UY                                  = VALUE(FLOAT,       "Displacement increment in local y-direction to activate the inflator");
    LSD_UZ                                  = VALUE(FLOAT,       "Displacement increment in local z-direction to activate the inflator");
    LSD_UMAG                                = VALUE(FLOAT,       "Displacement magnitude required to activate the inflator");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING,      "Solver Keyword");
    airbagoption                            = VALUE(INT,         "airbagoption");
    LSD_TitleOpt                            = VALUE(INT,         "TitleOption");

    IOFLAG                                  = VALUE(INT,         "IOFLAG");
    TITLE                                   = VALUE(STRING,      "TITLE");
    _opt                                    = VALUE(STRING,      "_opt");
    dummy                                   = VALUE(INT,         "dummy");

    //SubObjects
    simple_pressure_volume_opt              = VALUE(SUBOBJECT,   "Simple Pressure Volume");
    simple_airbag_model_opt                 = VALUE(SUBOBJECT,   "Simple Airbag Model");
    linear_fluid_opt                        = VALUE(SUBOBJECT,   "Linear Fluid");
    load_curve_opt                          = VALUE(SUBOBJECT,   "Load Curve");
    adiabatic_gas_model_opt                 = VALUE(SUBOBJECT,   "Adiabatic Gas Model");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES

    //ID Cards
    ABG_SIDTYP                              = 4178;
    LSD_RBID                                = 3041;
    LSD_VSCA                                = 3042;
    LSD_PSCA                                = 3043;
    LSD_VINI                                = 3044;
    LSD_MWD                                 = 3045;
    LSD_SPSF                                = 3046;

    //User Subroutine Control Card   - RBID > 0
    NoAbgSenParms                           = 4158;
    //User Subroutine Constant Cards - RBID > 0
    AbgSenParsArray                         = 4159;

    //Acceleration Sensor Card       - RBID < 0
    LSD_AX                                  = 3075;
    LSD_AY                                  = 3076;
    LSD_AZ                                  = 3077;
    LSD_AMAG                                = 3078;
    LSD_TDUR                                = 3079;

    //Velocity     Sensor Card       - RBID < 0
    LSD_DVX                                 = 3080;
    LSD_DVY                                 = 3081;
    LSD_DVZ                                 = 3082;
    LSD_DVMAG                               = 3083;

    //Displacement Sensor Card       - RBID < 0
    LSD_UX                                  = 3084;
    LSD_UY                                  = 3085;
    LSD_UZ                                  = 3086;
    LSD_UMAG                                = 3087;

    //HM INTERNAL
    KEYWORD_STR                             = 9000;
    airbagoption                            = 3047;
    LSD_TitleOpt                            = 90;

    IOFLAG                                  = -1;
    TITLE                                   = -1;
    _opt                                    = -1;
    dummy                                   = -1;

    //SubObjects
    simple_pressure_volume_opt              = -1;
    simple_airbag_model_opt                 = -1;
    linear_fluid_opt                        = -1;
    load_curve_opt                          = -1;
    adiabatic_gas_model_opt                 = -1;
}

CHECK(COMMON)
{
    //AIRBAG Cards
    LSD_SPSF                                <= 1;
    LSD_SPSF                                >= 0;
    NoAbgSenParms                           <= 25;
    NoAbgSenParms                           >= 0;
}

DEFAULTS(COMMON)
{
    //AIRBAG Cards
    LSD_VSCA                                = 1.0;
    LSD_PSCA                                = 1.0;
    LSD_RBID                                = 0;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*AIRBAG");

    FLAG(LSD_TitleOpt, "TitleOption");

    DATA(entityiddisplayed);
    SCALAR(ABG_SIDTYP, "SIDTYP")                 { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_RBID, "RBID")                     { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_VSCA, "VSCA")                     { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_PSCA, "PSCA")                     { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(LSD_VINI, "VINI")                     { DIMENSION = "volume"        ; }
    SCALAR(LSD_MWD, "MWD")                       { DIMENSION = "strain_rate" ; }
    SCALAR(LSD_SPSF, "SPSF")                     { DIMENSION = "DIMENSIONLESS" ; }

    if(LSD_RBID > 0)
    {
        SIZE(NoAbgSenParms);

        ARRAY(NoAbgSenParms, "N")
        {
            SCALAR(AbgSenParsArray, "CN");
        }
    }
    else if(LSD_RBID < 0)
    {
       SCALAR(LSD_AX, "AX")                      { DIMENSION = "DIMENSIONLESS" ; }
       SCALAR(LSD_AY, "AY")                      { DIMENSION = "DIMENSIONLESS" ; }
       SCALAR(LSD_AZ, "AZ")                      { DIMENSION = "DIMENSIONLESS" ; }
       SCALAR(LSD_AMAG, "AMAG")                  { DIMENSION = "DIMENSIONLESS" ; }
       SCALAR(LSD_TDUR, "TDUR")                  { DIMENSION = "DIMENSIONLESS" ; }
       SCALAR(LSD_DVX, "DVX")                    { DIMENSION = "DIMENSIONLESS" ; }
       SCALAR(LSD_DVY, "DVY")                    { DIMENSION = "DIMENSIONLESS" ; }
       SCALAR(LSD_DVZ, "DVZ")                    { DIMENSION = "DIMENSIONLESS" ; }
       SCALAR(LSD_DVMAG, "DVMAG")                { DIMENSION = "DIMENSIONLESS" ; }
       SCALAR(LSD_UX, "UX")                      { DIMENSION = "DIMENSIONLESS" ; }
       SCALAR(LSD_UY, "UY")                      { DIMENSION = "DIMENSIONLESS" ; }
       SCALAR(LSD_UZ, "UZ")                      { DIMENSION = "DIMENSIONLESS" ; }
       SCALAR(LSD_UMAG, "UMAG")                  { DIMENSION = "DIMENSIONLESS" ; }
    }

    mandatory:
    RADIO(airbagoption, "airbagoption")
    {
        ADD(1, "SimplePressureVolume");
        ADD(2, "SimpleAirbagModel");
        ADD(5, "AdiabaticGasModel");
        ADD(6, "LinearFluid");
        ADD(7, "LoadCurve");
    }

    optional:
    if(airbagoption == 1)
    {
        ASSIGN(KEYWORD_STR,"_SIMPLE_PRESSURE_VOLUME");
        SUBOBJECT(simple_pressure_volume_opt)    { SUBTYPES = ( /SUBOBJECT/AIRBAG_SIMPLE_PRESSURE_VOLUME ) ; }
    }
    else if(airbagoption == 2)
    {
        ASSIGN(KEYWORD_STR,"_SIMPLE_AIRBAG_MODEL");
        SUBOBJECT(simple_airbag_model_opt)       { SUBTYPES = ( /SUBOBJECT/AIRBAG_SIMPLE_AIRBAG_MODEL ) ; }
    }
    else if(airbagoption == 5)
    {
        ASSIGN(KEYWORD_STR,"_ADIABATIC_GAS_MODEL");
        SUBOBJECT(adiabatic_gas_model_opt)       { SUBTYPES = ( /SUBOBJECT/AIRBAG_ADIABATIC_GAS_MODEL ) ; }
    }
    else if(airbagoption == 6)
    {
        ASSIGN(KEYWORD_STR,"_LINEAR_FLUID");
        SUBOBJECT(linear_fluid_opt)              { SUBTYPES = ( /SUBOBJECT/AIRBAG_LINEAR_FLUID ) ; }
    }
    else if(airbagoption == 7)
    {
        ASSIGN(KEYWORD_STR,"LOAD_CURVE");
        SUBOBJECT(load_curve_opt)                { SUBTYPES = ( /SUBOBJECT/AIRBAG_LOAD_CURVE ) ; }
    }

    if(LSD_TitleOpt == 1)
    {
        ASSIGN(KEYWORD_STR, "_ID");
    }
}

// File format
FORMAT(Keyword971_R6.1)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(airbagoption == 1)
        {
            if(LSD_TitleOpt == 0)
            {
                HEADER("*AIRBAG_SIMPLE_PRESSURE_VOLUME");
            }
            else
            {
                HEADER("*AIRBAG_SIMPLE_PRESSURE_VOLUME_ID");
            }
        }
        else if(airbagoption == 2)
        {
            if(LSD_TitleOpt == 0)
            {
                HEADER("*AIRBAG_SIMPLE_AIRBAG_MODEL");
            }
            else
            {
                HEADER("*AIRBAG_SIMPLE_AIRBAG_MODEL_ID");
            }
        }
        else if(airbagoption == 5)
        {
            if(LSD_TitleOpt == 0)
            {
                HEADER("*AIRBAG_ADIABATIC_GAS_MODEL");
            }
            else
            {
                HEADER("*AIRBAG_ADIABATIC_GAS_MODEL_ID");
            }
        }
        else if(airbagoption == 6)
        {
            if(LSD_TitleOpt == 0)
            {
                HEADER("*AIRBAG_LINEAR_FLUID");
            }
            else
            {
                HEADER("*AIRBAG_LINEAR_FLUID_ID");
            }
        }
        else if(airbagoption == 7)
        {
            if(LSD_TitleOpt == 0)
            {
                HEADER("*AIRBAG_LOAD_CURVE");
            }
            else
            {
                HEADER("*AIRBAG_LOAD_CURVE_ID");
            }
        }
    }
    else //IMPORT
    {
        HEADER("*AIRBAG%80s", _opt);

        ASSIGN(dummy, _FIND(_opt, "_SIMPLE_PRESSURE_VOLUME"), IMPORT);
        if(dummy == 1)
        {
            ASSIGN(airbagoption, 1, IMPORT);
        }
        else
        {
            ASSIGN(dummy, _FIND(_opt, "_SIMPLE_AIRBAG_MODEL"), IMPORT);
            if(dummy == 1)
            {
                ASSIGN(airbagoption, 2, IMPORT);
            }
            else
            {
                ASSIGN(dummy, _FIND(_opt, "_ADIABATIC_GAS_MODEL"), IMPORT);
                if(dummy == 1)
                {
                    ASSIGN(airbagoption, 5, IMPORT);
                }
                else
                {
                    ASSIGN(dummy, _FIND(_opt, "_LINEAR_FLUID"), IMPORT);
                    if(dummy == 1)
                    {
                        ASSIGN(airbagoption, 6, IMPORT);
                    }
                    else
                    {
                        ASSIGN(dummy, _FIND(_opt, "_LOAD_CURVE"), IMPORT);
                        if(dummy == 1)
                        {
                            ASSIGN(airbagoption, 7, IMPORT);
                        }
                    }
                }
            }
        }

        ASSIGN(LSD_TitleOpt, _FIND(_opt, "_ID"), IMPORT);
    }

    //ID Cards:
    if(IOFLAG == 0 && LSD_TitleOpt == 1)
    {
        COMMENT("$     ABIDHEADING");
        CARD("%10d%-70s", _ID_, TITLE);
    }

    //Card 1
    COMMENT("$      SID    SIDTYP      RBID      VSCA      PSCA      VINI       MWD      SPSF");
    CARD("%10d%10d%10d%10lg%10lg%10lg%10lg%10lg", entityiddisplayed, ABG_SIDTYP, LSD_RBID, LSD_VSCA, LSD_PSCA, LSD_VINI, LSD_MWD, LSD_SPSF);

    if(LSD_RBID > 0)
    {
        //User Subroutine Control Card - RBID > 0
        COMMENT("$        N");
        CARD("%10d", NoAbgSenParms);

        //User Subroutine Constant Cards - RBID > 0
        if(NoAbgSenParms > 0)
        {
            COMMENT("$       CN        CN        CN        CN        CN        CN        CN        CN");
        }
        CELL_LIST(NoAbgSenParms, "%10d", AbgSenParsArray, 80);
    }
    else if(LSD_RBID < 0)
    {
        //Acceleration Sensor Card - RBID < 0
        COMMENT("$       AX        AY        AZ      AMAG      TDUR");
        CARD("%10lg%10lg%10lg%10lg%10lg", LSD_AX, LSD_AY, LSD_AZ, LSD_AMAG, LSD_TDUR);

        //Velocity Sensor Card - RBID < 0
        COMMENT("$      DVX       DVY       DVZ     DVMAG");
        CARD("%10lg%10lg%10lg%10lg", LSD_DVX, LSD_DVY, LSD_DVZ, LSD_DVMAG);

        //Displacement Sensor Card - RBID < 0
        COMMENT("$       UX        UY        UZ      UMAG");
        CARD("%10lg%10lg%10lg%10lg", LSD_UX, LSD_UY, LSD_UZ, LSD_UMAG);
    }

    //Additional cards:

    if(airbagoption == 1)
    {
        SUBOBJECTS(simple_pressure_volume_opt, /SUBOBJECT/AIRBAG_SIMPLE_PRESSURE_VOLUME);
    }
    else if(airbagoption == 2)
    {
        SUBOBJECTS(simple_airbag_model_opt, /SUBOBJECT/AIRBAG_SIMPLE_AIRBAG_MODEL);
    }
    else if(airbagoption == 5)
    {
        SUBOBJECTS(adiabatic_gas_model_opt, /SUBOBJECT/AIRBAG_ADIABATIC_GAS_MODEL);
    }
    else if(airbagoption == 6)
    {
        SUBOBJECTS(linear_fluid_opt, /SUBOBJECT/AIRBAG_LINEAR_FLUID);
    }
    else if(airbagoption == 7)
    {
        SUBOBJECTS(load_curve_opt, /SUBOBJECT/AIRBAG_LOAD_CURVE);
    }
}

FORMAT(Keyword971_R8.0)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
        if(airbagoption == 1)
        {
            if(LSD_TitleOpt == 0)
            {
                HEADER("*AIRBAG_SIMPLE_PRESSURE_VOLUME");
            }
            else
            {
                HEADER("*AIRBAG_SIMPLE_PRESSURE_VOLUME_ID");
            }
        }
        else if(airbagoption == 2)
        {
            if(LSD_TitleOpt == 0)
            {
                HEADER("*AIRBAG_SIMPLE_AIRBAG_MODEL");
            }
            else
            {
                HEADER("*AIRBAG_SIMPLE_AIRBAG_MODEL_ID");
            }
        }
        else if(airbagoption == 5)
        {
            if(LSD_TitleOpt == 0)
            {
                HEADER("*AIRBAG_ADIABATIC_GAS_MODEL");
            }
            else
            {
                HEADER("*AIRBAG_ADIABATIC_GAS_MODEL_ID");
            }
        }
        else if(airbagoption == 6)
        {
            if(LSD_TitleOpt == 0)
            {
                HEADER("*AIRBAG_LINEAR_FLUID");
            }
            else
            {
                HEADER("*AIRBAG_LINEAR_FLUID_ID");
            }
        }
        else if(airbagoption == 7)
        {
            if(LSD_TitleOpt == 0)
            {
                HEADER("*AIRBAG_LOAD_CURVE");
            }
            else
            {
                HEADER("*AIRBAG_LOAD_CURVE_ID");
            }
        }
    }
    else //IMPORT
    {
        HEADER("*AIRBAG%80s", _opt);

        ASSIGN(dummy, _FIND(_opt, "_SIMPLE_PRESSURE_VOLUME"), IMPORT);
        if(dummy == 1)
        {
            ASSIGN(airbagoption, 1, IMPORT);
        }
        else
        {
            ASSIGN(dummy, _FIND(_opt, "_SIMPLE_AIRBAG_MODEL"), IMPORT);
            if(dummy == 1)
            {
                ASSIGN(airbagoption, 2, IMPORT);
            }
            else
            {
                ASSIGN(dummy, _FIND(_opt, "_ADIABATIC_GAS_MODEL"), IMPORT);
                if(dummy == 1)
                {
                    ASSIGN(airbagoption, 5, IMPORT);
                }
                else
                {
                    ASSIGN(dummy, _FIND(_opt, "_LINEAR_FLUID"), IMPORT);
                    if(dummy == 1)
                    {
                        ASSIGN(airbagoption, 6, IMPORT);
                    }
                    else
                    {
                        ASSIGN(dummy, _FIND(_opt, "_LOAD_CURVE"), IMPORT);
                        if(dummy == 1)
                        {
                            ASSIGN(airbagoption, 7, IMPORT);
                        }
                    }
                }
            }
        }

        ASSIGN(LSD_TitleOpt, _FIND(_opt, "_ID"), IMPORT);
    }

    //ID Cards:
    if(IOFLAG == 0 && LSD_TitleOpt == 1)
    {
        COMMENT("$     ABIDHEADING");
        CARD("%10d%-70s", _ID_, TITLE);
    }

    //Card 1
    COMMENT("$      SID    SIDTYP      RBID      VSCA      PSCA      VINI       MWD      SPSF");
    CARD("%10d%10d%10d%10lg%10lg%10lg%10lg%10lg", entityiddisplayed, ABG_SIDTYP, LSD_RBID, LSD_VSCA, LSD_PSCA, LSD_VINI, LSD_MWD, LSD_SPSF);

    if(LSD_RBID > 0)
    {
        //User Subroutine Control Card - RBID > 0
        COMMENT("$        N");
        CARD("%10d", NoAbgSenParms);

        //User Subroutine Constant Cards - RBID > 0
        if(NoAbgSenParms > 0)
        {
            COMMENT("$       CN        CN        CN        CN        CN        CN        CN        CN");
        }
        CELL_LIST(NoAbgSenParms, "%10d", AbgSenParsArray, 80);
    }
    else if(LSD_RBID < 0)
    {
        //Acceleration Sensor Card - RBID < 0
        COMMENT("$       AX        AY        AZ      AMAG      TDUR");
        CARD("%10lg%10lg%10lg%10lg%10lg", LSD_AX, LSD_AY, LSD_AZ, LSD_AMAG, LSD_TDUR);

        //Velocity Sensor Card - RBID < 0
        COMMENT("$      DVX       DVY       DVZ     DVMAG");
        CARD("%10lg%10lg%10lg%10lg", LSD_DVX, LSD_DVY, LSD_DVZ, LSD_DVMAG);

        //Displacement Sensor Card - RBID < 0
        COMMENT("$       UX        UY        UZ      UMAG");
        CARD("%10lg%10lg%10lg%10lg", LSD_UX, LSD_UY, LSD_UZ, LSD_UMAG);
    }

    //Additional cards:

    if(airbagoption == 1)
    {
        SUBOBJECTS(simple_pressure_volume_opt, /SUBOBJECT/AIRBAG_SIMPLE_PRESSURE_VOLUME);
    }
    else if(airbagoption == 2)
    {
        SUBOBJECTS(simple_airbag_model_opt, /SUBOBJECT/AIRBAG_SIMPLE_AIRBAG_MODEL);
    }
    else if(airbagoption == 5)
    {
        SUBOBJECTS(adiabatic_gas_model_opt, /SUBOBJECT/AIRBAG_ADIABATIC_GAS_MODEL);
    }
    else if(airbagoption == 6)
    {
        SUBOBJECTS(linear_fluid_opt, /SUBOBJECT/AIRBAG_LINEAR_FLUID);
    }
    else if(airbagoption == 7)
    {
        SUBOBJECTS(load_curve_opt, /SUBOBJECT/AIRBAG_LOAD_CURVE);
    }
}
