//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// CONTROL_IMPLICIT_ROTATIONAL_DYNAMICS
//

ATTRIBUTES(COMMON)
{
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    LSD_IREF                                = VALUE(INT,  "Reference frame");
    LSD_NOMEG                               = SIZE("Number of rotating speeds");
    LSD_NOmega_array                        = ARRAY[LSD_NOMEG](FLOAT,  "OMEG");
    LSD_SD1                                 = VALUE(COMPONENT,  "Set ID of the rotational components");
    LSD_SET_SD1                             = VALUE(SETS,  "Set ID of the rotational components") { SUBTYPES = (/SETS/SET_PART_IDPOOL) ; }
    LSD_STYPE1                              = VALUE(INT,  "Set type");
    LSD_TimeDependOmega                     = VALUE(INT,  "Time Dependent Omega");
    LSD_VID1                                = VALUE(VECTOR,  "Vector ID to define the rotating axis");
    OMEGA                                   = VALUE(FLOAT,  "Rotating speed");
    Omega_AsFunctOfTime                     = VALUE(CURVE,  "curve ID as a function of time");

    IOFLAG                                  = VALUE(INT,   "IOFLAG");
    _dummy_type                             = VALUE(INT,   "dummy type");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    LSD_IREF                                = 8505;
    LSD_NOMEG                               = 8504;
    LSD_NOmega_array                        = 8506;
    LSD_SD1                                 = 1078;
    LSD_SET_SD1                             = 5512;
    LSD_STYPE1                              = 1080;
    LSD_TimeDependOmega                     = 8508;
    LSD_VID1                                = 4125;
    OMEGA                                   = 2789;
    Omega_AsFunctOfTime                     = 8509;

    IOFLAG                                  = -1;
    _dummy_type                             = -1;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_ROTATIONAL_DYNAMICS");
    RADIO(LSD_STYPE1)
    {
       ADD(1, "Part set");
       ADD(2, "Part");
    }
    if( LSD_STYPE1 == 1)
    {
       SCALAR(LSD_SET_SD1);
    }
    else if( LSD_STYPE1 == 2)
    {
       SCALAR(LSD_SD1);
    }

    FLAG( LSD_TimeDependOmega);
    
    if(LSD_TimeDependOmega == TRUE)
    {
       DATA(Omega_AsFunctOfTime);
    }
    else
    {
       SCALAR(OMEGA);
    }
    
    DATA(LSD_VID1);
    RADIO(LSD_IREF)
    {
       ADD(0, "Rotating coordinate system and rotating parts will not rotate in visualization.");
       ADD(1, "Fixed coordinate system");
    }
    SIZE(LSD_NOMEG);
    ARRAY(LSD_NOMEG,"")
    {
       SCALAR(LSD_NOmega_array);
    }
}

// File format
FORMAT(Keyword971_R8.0)
{
   ASSIGN(IOFLAG, 0, EXPORT);
   ASSIGN(IOFLAG, 1, IMPORT);

   HEADER("*CONTROL_IMPLICIT_ROTATIONAL_DYNAMICS");

   if(IOFLAG == 0)
   {
      COMMENT("$      SID     STYPE     OMEGA       VID     NOMEG      IREF");
      if(LSD_STYPE1 == 1)
      {
         CARD("%10d         1%10lf%10d%10d%10d",LSD_SET_SD1, SCALAR_OR_OBJECT(LSD_TimeDependOmega,OMEGA,Omega_AsFunctOfTime), LSD_VID1, LSD_NOMEG, LSD_IREF);
      }
      else if(LSD_STYPE1 == 2)
      {
         CARD("%10d         0%10lf%10d%10d%10d",LSD_SD1, SCALAR_OR_OBJECT(LSD_TimeDependOmega,OMEGA,Omega_AsFunctOfTime), LSD_VID1, LSD_NOMEG, LSD_IREF);
      }
   }
   else //IMPORT
   {
      CARD_PREREAD("%10s%10d",_BLANK_, _dummy_type);

      if(_dummy_type == 1)
      {
         CARD("%10d         1%10lf%10d%10d%10d",LSD_SET_SD1, SCALAR_OR_OBJECT(LSD_TimeDependOmega,OMEGA,Omega_AsFunctOfTime), LSD_VID1, LSD_NOMEG, LSD_IREF);
         ASSIGN(LSD_STYPE1, 1, IMPORT);
      }
      else if(_dummy_type == 0)
      {
         CARD("%10d         0%10lf%10d%10d%10d",LSD_SD1, SCALAR_OR_OBJECT(LSD_TimeDependOmega,OMEGA,Omega_AsFunctOfTime), LSD_VID1, LSD_NOMEG, LSD_IREF);
         ASSIGN(LSD_STYPE1, 2, IMPORT);
      }
   }

   COMMENT("$     OMEG      OMEG      OMEG      OMEG      OMEG      OMEG      OMEG      OMEG");
   CELL_LIST(LSD_NOMEG, "%10lf", LSD_NOmega_array);
}