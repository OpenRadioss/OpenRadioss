//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- control_output.cfg ---
//		Control Card	Control_Output2	1968	8.0
//		 01/04/2020

ATTRIBUTES(COMMON)
{
    // INPUT ATTRIBUTES 
    LSD_NPOPT                               = VALUE(INT,  "Print suppression during input phase flag for the 'd3hsp' file");
    LSD_NEECHO                              = VALUE(INT,  "Print suppression during input phase flag for echo file");
    LSD_NREFUP                              = VALUE(INT,  "Flag to update reference node coordinates for beam formulations 1, 2 and 11");
    LSD_IACCOP                              = VALUE(INT,  "Flag to average or filter nodal accelerations output to file 'nodout' and the time history database 'd3thdt'");
    LSD_OPIFS                               = VALUE(FLOAT,  "Output time interval for interface file written per *INTERFACE_COMPONENT_option");
    LSD_IPNINT_FLAG                         = VALUE(INT,  "Option for IPNINT");
    LSD_IPNINT_NUM                          = VALUE(INT,  "Flag controlling output of initial time step sizes for elements to d3hsp");
    LSD_IKEDIT                              = VALUE(INT,  "Problem status report interval steps to the 'd3hsp' file");
    LSD_IFLUSH                              = VALUE(INT,  "Number of time steps interval for flushing I/O buffers");
    LSD_IETSPF                              = VALUE(INT,  "IPNINT");//separator not used yet
    inertiaoption                           = VALUE(INT,  "OptionalCard2");

    //Optional card 2
    LSD_IPRTF                               = VALUE(INT,  "Default print flag for 'rbdout' and 'matsum' files");
    COU_IERODE                              = VALUE(INT,  "Output eroded internal and kinetic energy into the 'matsum' file");
    COU_TET10                               = VALUE(INT,  "Output ten connectivity nodes into 'd3plot' database");
    COU_MSGMAX                              = VALUE(INT,  "Maximum number of each error/warning message");
    COU_IPCURV                              = VALUE(INT,  "Flag to output digitized curve data to message and d3hsp files");
    LSD_GMDT                                = VALUE(FLOAT,  "Output interval for recorded motions from *INTERFACE_SSI_AUX");
    LSD_IP1DBLT                             = VALUE(INT,  "Output information of 1D (bar-type) seatbelt created for 2D (shell-type) seatbelt to sbtout");
    LSD_EOCS                                = VALUE(INT, "Elout Coordinate System: controls the coordinate system to be used when writing out shell data to the elout file");


    //Optional card 3
    LSD_TOLEV                               = VALUE(INT, "Timing Output Levels: controls the # of levels output in the timing summary at termination. The default is 2");
    LSD_NEWLEG                              = VALUE(INT, "New Legends: controls the format of the LEGEND section of various ascii output files");
    LSD_FRFREQ                              = VALUE(INT, "Output frequency for failed element report, in cycles");
    LSD_MINFO                               = VALUE(INT, "Output penetration information for mortar contact after each implicit step, not applicable in explicit analysis");
    LSD_CTRL_OUT_OPTCARD3                   = VALUE(INT, "");
    LSD_SOLSIG                              = VALUE(INT, "Flag to extrapolate stresses and other history variables for multiintegration point solids from integration points to nodes");
    LSD_MSGFLG                              = VALUE(INT, "Option for printing detail message to d3msg");
    // HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    IO_FLAG                                 = VALUE(INT, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    COU_IERODE                              = 783;
    COU_IPCURV                              = 786;
    COU_MSGMAX                              = 785;
    COU_TET10                               = 784;
    LSD_GMDT                                = 6295;
    LSD_IACCOP                              = 2153;
    LSD_IETSPF                              = 2146;
    LSD_IFLUSH                              = 3134;
    LSD_IKEDIT                              = 2147;
    LSD_IP1DBLT                             = 6296;
    LSD_IPNINT_FLAG                         = 8780;
    LSD_IPNINT_NUM                          = 8781;
    LSD_IPRTF                               = 3135;
    LSD_NEECHO                              = 2150;
    LSD_NPOPT                               = 2145;
    LSD_NREFUP                              = 2152;
    LSD_OPIFS                               = 2154;
    inertiaoption                           = 3032; //Optional Card 2
    IO_FLAG                                 = -1;
    LSD_EOCS                                = 6297;
    LSD_CTRL_OUT_OPTCARD3                   = 6298;
    LSD_TOLEV                               = 6299;
    LSD_NEWLEG                              = 6300;
    LSD_FRFREQ                              = 6301;
    LSD_MINFO                               = 7992;
    LSD_SOLSIG                              = 8158;
    LSD_MSGFLG                              = 8159;
}

CHECK(COMMON)
{
    LSD_IPNINT_NUM                            >=2;
}

DEFAULTS(COMMON)
{
    //DEFAULT ATTRIBUTES 
    LSD_NPOPT   = 0;
    LSD_NEECHO  = 0;
    LSD_NREFUP  = 0;
    LSD_IACCOP  = 0;
    LSD_OPIFS   = 0;
    LSD_IPNINT_FLAG = 0;
    LSD_IPNINT_NUM  = 0;
    LSD_IKEDIT  = 100;
    LSD_IFLUSH  = 5000;
    //DEFAULT ATTRIBUTES Optional Card 2
    LSD_IPRTF   = 0;
    COU_IERODE    = 0;
    COU_TET10    = 2;
    COU_MSGMAX    = 50;
    COU_IPCURV    = 0;
    LSD_GMDT    = 0;
    LSD_IP1DBLT = 0;
    LSD_TOLEV   = 2;
    LSD_NEWLEG  = 0;
    LSD_FRFREQ  = 1;
    LSD_MINFO   = 0;
    LSD_SOLSIG  = 0;
    LSD_MSGFLG = 0;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*CONTROL_OUTPUT");
    RADIO(LSD_NPOPT,"NPOPT")
    {
       ADD(0, "0: No suppression");
       ADD(1, "1: Nodal coordinates, element connectivities, rigid wall definitions, nodal SPCs, and initial velocities are not printed");
    }
    RADIO(LSD_NEECHO,"NEECHO")
    {
       ADD(0, "0: All data printed");
       ADD(1, "1: Nodal printing is suppressed");
       ADD(2, "2: Element printing is suppressed");
       ADD(3, "3: Both node and element printing is suppressed");
    }
    RADIO(LSD_NREFUP,"NREFUP")
    {
       ADD(0, "0: Do not update reference node");
       ADD(1, "1: Update reference node");
    }
    RADIO(LSD_IACCOP,"IACCOP")
    {
       ADD(0, "0: No average (default)");
       ADD(1, "1: Averaged between output intervals");
       ADD(2, "2: Accelerations for each time step are stored internally and then filtered over each output interval using a filter from General Motors");
    }
    SCALAR(LSD_OPIFS,"OPIFS") {DIMENSION="t";}
    FLAG(LSD_IPNINT_FLAG,"IPNINT_FLAG");
    if(LSD_IPNINT_FLAG != TRUE) 
    {
        RADIO(LSD_IPNINT_NUM,"IPNINT")
        {
            ADD(0, "0: 100 elements with the smallest time step sizes are printed");
            ADD(1, "1: Time step sizes for all elements are printed");
        }
    }
    else
    {
        SCALAR(LSD_IPNINT_NUM,"IPNINT") {DIMENSION="DIMENSIONLESS";}
    }
    SCALAR(LSD_IKEDIT,"IKEDIT") {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_IFLUSH,"IFLUSH") {DIMENSION="DIMENSIONLESS";}
    FLAG(inertiaoption,"OPTIONAL CARD 2");
    if(inertiaoption != FALSE)
    {
        optional:
        SEPARATOR("OptionalCard2");
        RADIO(LSD_IPRTF,"IPRTF")
        {
            ADD(0, "0: Write part data into both matsum and rbdout");
            ADD(1, "1: Write data into rbdout file only");
            ADD(2, "2: Write data into matsum file only");
            ADD(3, "3: Do not write data into rbdout and matsum");
        }
        RADIO(COU_IERODE,"IERODE")
        {
            ADD(0, "0: Do not output extra data");
            ADD(1, "1: Output the eroded internal and kinetic energy");
        }
        RADIO(COU_TET10,"TET10")
        {
            ADD(1, "1: Write the full ten node connectivity into the 'd3plot' database");
            ADD(2, "2: Write the four corner nodes of the ten node connectivity into the 'd3plot' database");
        }
        SCALAR(COU_MSGMAX,"MSGMAX") {DIMENSION="DIMENSIONLESS";}
        RADIO(COU_IPCURV,"IPCURV")
        {
            ADD(0, "0: Off");
            ADD(1, "1: On");
        }
        SCALAR(LSD_GMDT,"GMDT") {DIMENSION="DIMENSIONLESS";}
        RADIO(LSD_IP1DBLT,"IP1DBLT")
        {
            ADD(0, "0: The analysis results of internally created 1D seatbelts are extracted and processed to yield the 2D belt information");
            ADD(1, "1: The analysis results of internally created 1D seatbelts are stored in sbtout");
        }
        RADIO(LSD_EOCS, "EOCS")
        {
            ADD(0, "0: Default");
            ADD(1, "1: Local element coordinate system");
            ADD(2, "2: Global coordinate system");
        }
        FLAG(LSD_CTRL_OUT_OPTCARD3, "Optional Card 3");    
    }
    if(inertiaoption == 1 && LSD_CTRL_OUT_OPTCARD3 == 1)
    {
        optional:
        SEPARATOR("OptionalCard3");
        SCALAR(LSD_TOLEV,"TOLEV") {DIMENSION="DIMENSIONLESS";}
        RADIO(LSD_NEWLEG)
        {
            ADD(0,"0: Use the normal format");
            ADD(1,"1: Use the optional format with extra fields");
        }
        SCALAR(LSD_FRFREQ, "FRFREQ") {DIMENSION="DIMENSIONLESS";}
        RADIO(LSD_MINFO)
        {
            ADD(0,"0: No information");
            ADD(1,"1: Penetrations reported for each contact interface");
        }

        RADIO(LSD_SOLSIG, "SOLSIG")
        {
            ADD(0,"0: No extrapolation");
            ADD(1,"1: Extrapolate the stress for linear materials only");
            ADD(2,"2: Extrapolate the stress if plastic strain is zero");
            ADD(3,"3: Extrapolate the stress always");
            ADD(4,"4: Extrapolate all history variables");
        }
        RADIO(LSD_MSGFLG,"MSGFLG")
        {
            ADD(0,"0: No detail message");
            ADD(1,"1: Print detail message to d3msg at the termination time");
        }
        SEPARATOR();
    }  
    if(inertiaoption != FALSE)
    {
        SEPARATOR();
    }
}

// File format
FORMAT(Keyword971_R6.1) 
{
    HEADER("*CONTROL_OUTPUT");
    ASSIGN(IO_FLAG,1,IMPORT);
    ASSIGN(IO_FLAG,0,EXPORT);
    COMMENT("$   NPTOPT    NEECHO    NREFUP    IACCOP     OPIFS    IPNINT    IKEDIT    IFLUSH");
    CARD("%10d%10d%10d%10d%10lg%10d%10d%10d",LSD_NPOPT,LSD_NEECHO,LSD_NREFUP,LSD_IACCOP,LSD_OPIFS,LSD_IPNINT_NUM,LSD_IKEDIT,LSD_IFLUSH);
    
    if(IO_FLAG == 1 && LSD_IPNINT_NUM < 2)
    {
        ASSIGN(LSD_IPNINT_FLAG, 0, IMPORT);
    }

    if(IO_FLAG == 1 && LSD_IPNINT_NUM >= 2)
    {
        ASSIGN(LSD_IPNINT_FLAG, 1, IMPORT);
    }


//Second optional Card
    if(inertiaoption != FALSE)
        COMMENT("$    IPRTF    IERODE     TET10    MSGMAX    IPCURV      GMDT   IP1DBLT");
    FREE_CARD(inertiaoption,"%10d%10d%10d%10d%10d%10lg%10d",LSD_IPRTF,COU_IERODE,COU_TET10,COU_MSGMAX,COU_IPCURV,LSD_GMDT,LSD_IP1DBLT);

}

FORMAT(Keyword971_R7.1) 
{
    HEADER("*CONTROL_OUTPUT");
    ASSIGN(IO_FLAG,1,IMPORT);
    ASSIGN(IO_FLAG,0,EXPORT);
    COMMENT("$   NPTOPT    NEECHO    NREFUP    IACCOP     OPIFS    IPNINT    IKEDIT    IFLUSH");
    CARD("%10d%10d%10d%10d%10lg%10d%10d%10d",LSD_NPOPT,LSD_NEECHO,LSD_NREFUP,LSD_IACCOP,LSD_OPIFS,LSD_IPNINT_NUM,LSD_IKEDIT,LSD_IFLUSH);
    
    if(IO_FLAG == 1 && LSD_IPNINT_NUM < 2)
    {
        ASSIGN(LSD_IPNINT_FLAG, 0, IMPORT);
    }

    if(IO_FLAG == 1 && LSD_IPNINT_NUM >= 2)
    {
        ASSIGN(LSD_IPNINT_FLAG, 1, IMPORT);
    }
//Second optional Card
    if(inertiaoption != FALSE)
        COMMENT("$    IPRTF    IERODE     TET10    MSGMAX    IPCURV      GMDT   IP1DBLT      EOCS");
    FREE_CARD(inertiaoption,"%10d%10d%10d%10d%10d%10lg%10d%10d",LSD_IPRTF,COU_IERODE,COU_TET10,COU_MSGMAX,COU_IPCURV,LSD_GMDT,LSD_IP1DBLT,LSD_EOCS);

//Third optional Card
    if(LSD_CTRL_OUT_OPTCARD3 == TRUE && inertiaoption == TRUE)
    {
        COMMENT("$    TOLEV    NEWLEG    FRFREQ     MINFO");
    }

    if(inertiaoption == TRUE)
    {
        FREE_CARD(LSD_CTRL_OUT_OPTCARD3,"%10d%10d%10d%10d",LSD_TOLEV,LSD_NEWLEG,LSD_FRFREQ,LSD_MINFO);
    }
}

FORMAT(Keyword971_R8.0) 
{
    HEADER("*CONTROL_OUTPUT");
    ASSIGN(IO_FLAG,1,IMPORT);
    ASSIGN(IO_FLAG,0,EXPORT);
    COMMENT("$   NPTOPT    NEECHO    NREFUP    IACCOP     OPIFS    IPNINT    IKEDIT    IFLUSH");
    CARD("%10d%10d%10d%10d%10lg%10d%10d%10d",LSD_NPOPT,LSD_NEECHO,LSD_NREFUP,LSD_IACCOP,LSD_OPIFS,LSD_IPNINT_NUM,LSD_IKEDIT,LSD_IFLUSH);
    
    if(IO_FLAG == 1 && LSD_IPNINT_NUM < 2)
    {
        ASSIGN(LSD_IPNINT_FLAG, 0, IMPORT);
    }

    if(IO_FLAG == 1 && LSD_IPNINT_NUM >= 2)
    {
        ASSIGN(LSD_IPNINT_FLAG, 1, IMPORT);
    }
//Second optional Card
    if(inertiaoption != FALSE)
        COMMENT("$    IPRTF    IERODE     TET10    MSGMAX    IPCURV      GMDT   IP1DBLT      EOCS");
    FREE_CARD(inertiaoption,"%10d%10d%10d%10d%10d%10lg%10d%10d",LSD_IPRTF,COU_IERODE,COU_TET10,COU_MSGMAX,COU_IPCURV,LSD_GMDT,LSD_IP1DBLT,LSD_EOCS);

//Third optional Card
    if(LSD_CTRL_OUT_OPTCARD3 == TRUE && inertiaoption == TRUE)
    {
        COMMENT("$    TOLEV    NEWLEG    FRFREQ     MINFO    SOLSIG    MSGFLG");
    }

    if(inertiaoption == TRUE)
    {
        FREE_CARD(LSD_CTRL_OUT_OPTCARD3,"%10d%10d%10d%10d%10d%10d",LSD_TOLEV,LSD_NEWLEG,LSD_FRFREQ,LSD_MINFO,LSD_SOLSIG,LSD_MSGFLG);
    }
    

}