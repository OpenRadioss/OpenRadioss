//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 34M
//

ATTRIBUTES(COMMON)
{
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("Num_Comments");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    LSD_PXX                                 = VALUE(FUNCT,  "Table giving engg. local XX-stress VS engg. local XX and YY-strain");
    LSD_PYY                                 = VALUE(FUNCT,  "Table giving engg. local YY-stress VS engg. local XX and YY-strain");
    LSD_SXY                                 = VALUE(FUNCT,  "Piola-Kirchhoff XY-stress VS local Green XY-strain");
    LSDYNA_A1                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A2                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A3                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_D1                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D2                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D3                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_V1                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V2                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V3                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_BETA                             = VALUE(FLOAT,  "Material angle in degrees");
    LSDYNA_DT                               = VALUE(FLOAT,  "Time window for smoothing strain rates used for FXX and FYY");
    LSDYNA_FVOPT                            = VALUE(FLOAT,  "Fabric venting option");
    LSDYNA_FVOPT_NEG                        = VALUE(FLOAT,  "Fabric venting option");
    LSDYNA_XP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSDYNA_YP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSDYNA_ZP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSD_BULKC                               = VALUE(FLOAT,  "Bulk modulus for fabric compaction");
    LSD_DAMP                                = VALUE(FLOAT,  "Damping coefficient for numerical stability.");
    LSD_FXX                                 = VALUE(FUNCT,  "scale factor of uniaxial stress in first material direction VS engg. strain rate");
    LSD_FYY                                 = VALUE(FUNCT,  "scale factor of uniaxial stress in second material direction VS engg. strain rate");
    LSD_ISREFG                              = VALUE(FLOAT,  "Initial stress by reference geometry");
    LSD_JACC                                = VALUE(FLOAT,  "Jacobian for the onset of fabric compaction");
    LSD_LCID                                = VALUE(FUNCT,  "Fabric venting option parameters");
    LSD_LCID2                               = VALUE(FUNCT,  "Fabric venting option parameters");
    LSD_LCID3                               = VALUE(FUNCT,  "Fabric venting option parameter");
    LSD_MATL34_ECOAT                        = VALUE(FLOAT,  "Youngs modulus of coat material");
    LSD_MATL34_SCOAT                        = VALUE(FLOAT,  "Yield stress of coat material");
    LSD_MATL34_TCOAT                        = VALUE(FLOAT,  "Thickness of coat material");
    LSD_MAT_CSE                             = VALUE(FLOAT,  "Compressive stress elimination option");
    LSD_MAT_ELA                             = VALUE(FLOAT,  "Fabric venting option parameters");
    LSD_MAT_FAC                             = VALUE(FLOAT,  "Fabric venting option parameters");
    LSD_MAT_FLC                             = VALUE(FLOAT,  "Fabric venting option parameters");
    LSD_NODE1                               = VALUE(NODE,  "Node");
    LSD_NODE3                               = VALUE(NODE,  "Node1");
    LSD_NODE4                               = VALUE(NODE,  "Node2");
    LSD_NODE5                               = VALUE(NODE,  "Node1");
    LSD_NODE6                               = VALUE(NODE,  "Node2");
    LSD_NODE7                               = VALUE(NODE,  "Node1");
    LSD_NODE8                               = VALUE(NODE,  "Node2");
    LSD_SRFAC                               = VALUE(FUNCT,  "smooth stress initialization when using a reference geometry");
    LSD_SYSTEM                              = VALUE(SYSTEM,  "coordinate system ID");
    LSD_TH                                  = VALUE(FLOAT,  "constant value for hysteresis factor");
    LSD_TH_TABLE                            = VALUE(FUNCT,  "Table giving hysteresis factor");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    LSD_X0                                  = VALUE(FLOAT,  "Fabric venting option parameters");
    LSD_X0_neg                              = VALUE(FLOAT,  "Fabric venting option parameters");
    LSD_X1                                  = VALUE(FLOAT,  "Fabric venting option parameters");
    areaCoeffFlag                           = VALUE(INT,  "LCID_areaCoeff");
    axisOptFlag                             = VALUE(INT,  "Anisotropy axis definition");
    effLeakAreaFlag                         = VALUE(INT,  "LCID_effLeakArea");
    leakCoeffFlag                           = VALUE(INT,  "LCID_leakCoeff");
    option_FVOPT                            = VALUE(INT,  "FVOPT_NEG");
    option_TH                               = VALUE(INT,  "option_TH");
    option_X0                               = VALUE(INT,  "X0_NEG");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    IO_FLAG                                 = VALUE(INT, "io flag");
    _HMCOMMENTSFLAG                         = VALUE(INT, "Write HM Comments");
    TITLE                                   = VALUE(STRING, "Title");
    LOC_AOPT                                = VALUE(FLOAT, "");
    LOC_FVOPT                               = VALUE(FLOAT, "");
    LOC_X0                                  = VALUE(STRING, "");
    LOC_TH                                  = VALUE(FLOAT, "");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
    LOC_NU                                  = VALUE(FLOAT, "Temp poisson ratio");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    LSDYNA_A1                               = 139;
    LSDYNA_A2                               = 140;
    LSDYNA_A3                               = 141;
    LSDYNA_BETA                             = 148;
    LSDYNA_D1                               = 145;
    LSDYNA_D2                               = 146;
    LSDYNA_D3                               = 147;
    LSDYNA_DT                               = 12;
    LSDYNA_FVOPT                            = 4714;
    LSDYNA_FVOPT_NEG                        = 8555;
    LSDYNA_V1                               = 142;
    LSDYNA_V2                               = 143;
    LSDYNA_V3                               = 144;
    LSDYNA_XP                               = 136;
    LSDYNA_YP                               = 137;
    LSDYNA_ZP                               = 138;
    LSD_BULKC                               = 8557;
    LSD_DAMP                                = 3213;
    LSD_FXX                                 = 8543;
    LSD_FYY                                 = 8544;
    LSD_ISREFG                              = 8684;
    LSD_JACC                                = 8558;
    LSD_LCID                                = 45;
    LSD_LCID2                               = 168;
    LSD_LCID3                               = 170;
    LSD_MATL34_ECOAT                        = 6194;
    LSD_MATL34_SCOAT                        = 6195;
    LSD_MATL34_TCOAT                        = 6196;
    LSD_MAT_CSE                             = 1117;
    LSD_MAT_ELA                             = 4070;
    LSD_MAT_FAC                             = 4069;
    LSD_MAT_FLC                             = 4068;
    LSD_NODE1                               = 86;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_NODE7                               = 5080;
    LSD_NODE8                               = 5081;
    LSD_PXX                                 = 8548;
    LSD_PYY                                 = 8549;
    LSD_SRFAC                               = 8556;
    LSD_SXY                                 = 8551;
    LSD_SYSTEM                              = 184;
    LSD_TH                                  = 2501;
    LSD_TH_TABLE                            = 8553;
    LSD_TitleOpt                            = 90;
    LSD_X0                                  = 4799;
    LSD_X0_neg                              = 8547;
    LSD_X1                                  = 4763;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    areaCoeffFlag                           = 4708;
    axisOptFlag                             = 4946;
    effLeakAreaFlag                         = 4710;
    leakCoeffFlag                           = 4709;
    option_FVOPT                            = 8554;
    option_TH                               = 8552;
    option_X0                               = 8546;
    IO_FLAG                                 = -1;
    AOPT_SKEW_FLAG                          = -1;
    TITLE                                   = -1;
    LOC_AOPT                                = -1;
    LOC_FVOPT                               = -1;
    LOC_X0                                  = -1;
    LOC_TH                                  = -1;
    //empty_string                       = -1;
    LOC_NU                                  = -1;
}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY=SCALAR(Rho);
    YOUNG_MODULUS = SCALAR(LSD_MATL34_ECOAT);
    BULK_MODULUS = SCALAR(LSD_BULKC);
  POISSON_RATIO = SCALAR(LOC_NU);
//SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
  private:
      G                 = EVAL(YOUNG_MODULUS/(2*1.463));
      C1                = EVAL(YOUNG_MODULUS/(3));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+BULK_MODULUS)/MASS_DENSITY)^0.5);
}

CHECK(COMMON)
{

    LSDYNA_FVOPT_NEG                          <0.0;
    LSD_MAT_ELA                               >=0;
    LSD_MAT_FAC                               >=0;
    LSD_MAT_FLC                               >=0;
    LSD_TH                                    >=0.0;
    LSD_X0                                    >=0.0;
    LSD_X0                                    <=1.0;
}

DEFAULTS(COMMON)
{

    LSD_ISREFG    = 0.0;
    LSD_MAT_CSE    = 0.0;
    LOC_NU        = 0.0;
}

GUI(COMMON)
{

    ASSIGN(KEYWORD_STR, "*MAT_FABRIC_MAP");
    RADIO(CommentEnumField)
     {
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
       ASSIGN(KEYWORD_STR, "_TITLE");
    } 
    SCALAR(Rho)                { DIMENSION="density";}
    FUNCTION(LSD_PXX)
    {
      X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
      Y_TITLE = "Stress"; Y_DIMENSION = "pressure";
      Z_TITLE = "Strain"; Z_DIMENSION = "DIMENSIONLESS";
    }
    FUNCTION(LSD_PYY)
    {
      X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
      Y_TITLE = "Stress"; Y_DIMENSION = "pressure";
      Z_TITLE = "Strain"; Z_DIMENSION = "DIMENSIONLESS";
    }
    FUNCTION(LSD_SXY)
    {
      X_TITLE = "Strain"; X_DIMENSION = "DIMENSIONLESS";
      Y_TITLE = "Stress"; Y_DIMENSION = "pressure";
    }
    SCALAR(LSD_DAMP);
    FLAG(option_TH);
    if(option_TH == FALSE)
    {
        DATA(LSD_TH_TABLE);
    }
    if(option_TH == TRUE)
    {
        SCALAR(LSD_TH);
    }
    FLAG(option_FVOPT);
    if(option_FVOPT == FALSE)
    {
        RADIO(LSDYNA_FVOPT)
        {
            ADD(1.0, "1.0: Wang-Nefske formulas for venting through an orifice are used. Blockage is not considered");
            ADD(2.0, "2.0: Wang-Nefske formulas for venting through an orifice are used. Blockage of venting area due to contact is considered");
            ADD(3.0, "3.0: Leakage formulas of Graefe, Krummheuer and Siejak are used.Blockage is not considered ");
            ADD(4.0, "4.0: Leakage formulas of Graefe, Krummheuer and Siejak are used. Blockage of venting area due to contact is considered");
            ADD(5.0, "5.0: Leakage formulas based on flow through a poutous media are used. Blockage is not considered");
            ADD(6.0, "6.0: Leakage formulas based on flow through a poutous media are used. Blockage of venting area due to contact is considered");
            ADD(7.0, "7.0: Leakage is based on gas volume outflow vs pressure load curve. Blockage is not considered");
            ADD(8.0, "8.0: Leakage is based on gas volume outflow vs pressure load curve. Blockage of venting area due to contact is considered");
        }
    }
    if(option_FVOPT == TRUE)
    {
        SCALAR(LSDYNA_FVOPT_NEG);
    }
    FLAG(option_X0);
    if(option_X0 == FALSE)
    {
        SCALAR(LSD_X0);
    }
    if(option_X0 == TRUE)
    {
        SCALAR(LSD_X0_neg);
    }
    SCALAR(LSD_X1);
    if(option_X0 == FALSE && (LSD_X0 > 0.0 && LSD_X0 < 1.0))
    {
        SCALAR(LSD_MAT_FLC);
        SCALAR(LSD_MAT_FAC);
    }
    if(LSD_X0 == 0.0 || option_X0 == TRUE || LSD_X0 == 1.0)
    {
        FLAG(leakCoeffFlag);
    }
    if(LSD_X0 == 0.0 || option_X0 == TRUE || LSD_X0 == 1.0 && leakCoeffFlag == FALSE)
    {
        SCALAR(LSD_MAT_FLC);
    }
    if(LSD_X0 == 0.0 || option_X0 == TRUE || LSD_X0 == 1.0&& leakCoeffFlag == TRUE)
    {
        FUNCTION(LSD_LCID)
        {
          X_TITLE = "Time"; X_DIMENSION = "t";
          Y_TITLE = "Leakage coefficient"; Y_DIMENSION = "DIMENSIONLESS";
        }
    }
    if(LSD_X0 == 0.0 || option_X0 == TRUE || LSD_X0 == 1.0)
    {
        FLAG(areaCoeffFlag);
    }
    if(LSD_X0 == 0.0 || option_X0 == TRUE || LSD_X0 == 1.0 && areaCoeffFlag == FALSE)
    {
        SCALAR(LSD_MAT_FAC);
    }
    if(LSD_X0 == 0.0 || option_X0 == TRUE || LSD_X0 == 1.0 && areaCoeffFlag == TRUE)
    {
        DATA(LSD_LCID2);
    }        
    FLAG(effLeakAreaFlag);
    if(effLeakAreaFlag == FALSE)
    {
        SCALAR(LSD_MAT_ELA)                { DIMENSION="area";}
    }
    if(effLeakAreaFlag == TRUE)
    {
        FUNCTION(LSD_LCID3)
        {
          X_TITLE = "Time"; X_DIMENSION = "t";
          Y_TITLE = "Leakage area"; Y_DIMENSION = "area";
        }
    }
    RADIO(LSD_ISREFG)
    {
        ADD(0.0, "0.0: Not active");
        ADD(1.0, "1.0: Active");
    }
    RADIO(LSD_MAT_CSE)
    {
        ADD(0.0, "0.0: Don't eliminate compressive stresses (default)");
        ADD(1.0, "1.0: Eliminate compressive stresses, doesn't apply to linear");
    }
    DATA(LSD_SRFAC);
    SCALAR(LSD_BULKC);
    SCALAR(LSD_JACC);
    DATA(LSD_FXX);
    DATA(LSD_FYY);
    SCALAR(LSDYNA_DT);
    RADIO(axisOptFlag)
    {
       ADD(1, "0.0: Locally orthotropic : axis given by nodes 1,2, and 4");
       ADD(2, "1.0: A-direction given by a point and global location of element center");
       ADD(3, "2.0: Axis given by vectors");
       ADD(4, "3.0: Axis given by rotating the material axes by an angle BETA");
       ADD(5, "4.0: locally orthotropic in cylindrical coordinate system with the material axes determined by a vector and an originating point");
       ADD(6, "By System");
    }
    if(axisOptFlag == 6)
    {
       SCALAR(LSD_SYSTEM);
    }
    SCALAR(LSD_MATL34_ECOAT);
    SCALAR(LSD_MATL34_SCOAT);
    SCALAR(LSD_MATL34_TCOAT);
    if(axisOptFlag == 3)
    {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        SCALAR(LSDYNA_A1);
        SCALAR(LSDYNA_A2);
        SCALAR(LSDYNA_A3);

        DATA(LSD_NODE7);
        DATA(LSD_NODE8);
        SCALAR(LSDYNA_D1);
        SCALAR(LSDYNA_D2);
        SCALAR(LSDYNA_D3);
    }
    if(axisOptFlag == 2 || axisOptFlag == 5)
    {
        DATA(LSD_NODE1);
        SCALAR(LSDYNA_XP);
        SCALAR(LSDYNA_YP);
        SCALAR(LSDYNA_ZP);
    }
    if(axisOptFlag == 4)
    {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        SCALAR(LSDYNA_V1);
        SCALAR(LSDYNA_V2);
        SCALAR(LSDYNA_V3);
    }
    if(axisOptFlag == 1 || axisOptFlag == 4)
    {
        SCALAR(LSDYNA_BETA);
    }

}

// File format
FORMAT(Keyword971_R8.0) 
{
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    if(LSD_NODE7 != NONE && LSD_NODE8 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);
    
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 5 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,4.0,EXPORT);
    }

    COMMENT("$      MID        RO       PXX       PYY       SXY      DAMP        TH");
    if(IO_FLAG == 2)
    {
        CARD("%10d%10lg%10d%10d%10d%10lg%10lg",_ID_ ,Rho ,LSD_PXX ,LSD_PYY ,LSD_SXY ,LSD_DAMP ,CELL_COND( if(option_TH == FALSE) LSD_TH_TABLE; else LSD_TH; ));
    }
    if(IO_FLAG == 1)
    {
        CARD_PREREAD("%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LOC_TH);
        if( LOC_TH < 0)
        {
            CARD("%10d%10lg%10d%10d%10d%10lg%10lg",_ID_ ,Rho ,LSD_PXX ,LSD_PYY ,LSD_SXY ,LSD_DAMP,LSD_TH);
            ASSIGN(option_TH, 1, IMPORT);
        }
        else
        {
            CARD("%10d%10lg%10d%10d%10d%10lg%10d",_ID_ ,Rho ,LSD_PXX ,LSD_PYY ,LSD_SXY ,LSD_DAMP ,LSD_TH_TABLE);
        }
    }

    COMMENT("$    FVOPT        X0        X1    FLC/X2    FAC/X3       ELA");
    if(IO_FLAG == 1)
    {
        CARD_PREREAD("%10lg%10lg",LOC_FVOPT,LOC_X0);
        if(LOC_FVOPT < 0.0)
        {
            ASSIGN(option_FVOPT, 1, IMPORT);
        }
        if(LOC_X0 == "-1.0")
        {
            ASSIGN(option_X0, 1, IMPORT);
        }
    }
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg", CELL_COND( if(option_FVOPT == FALSE) LSDYNA_FVOPT; else LSDYNA_FVOPT_NEG; ) ,CELL_COND( if(option_X0 == FALSE) LSD_X0; else LSD_X0_neg; ),
            LSD_X1 , CELL_COND(if(option_X0 == 0 && LSD_X0>0.0 && LSD_X0<1.0) LSD_MAT_FLC; else if(LSD_X0==0.0 || option_X0==1 || LSD_X0==1.0) SCALAR_OR_OBJECT(leakCoeffFlag,LSD_MAT_FLC,LSD_LCID);),
                CELL_COND(if(option_X0 == 0 && LSD_X0>0.0 && LSD_X0<1.0) LSD_MAT_FAC; else if(LSD_X0==0.0 || option_X0==1 || LSD_X0==1.0) SCALAR_OR_OBJECT(areaCoeffFlag,LSD_MAT_FAC,LSD_LCID2);) ,SCALAR_OR_OBJECT(effLeakAreaFlag,LSD_MAT_ELA,LSD_LCID3));

    COMMENT("$   ISREFG       CSE     SRFAC     BULKC      JACC       FXX       FYY        DT");
    CARD("%10lg%10lg%10d%10lg%10lg%10d%10d%10lg",LSD_ISREFG ,LSD_MAT_CSE ,LSD_SRFAC ,LSD_BULKC ,LSD_JACC ,LSD_FXX ,LSD_FYY ,LSDYNA_DT );

    COMMENT("$     AOPT     ECOAT     SCOAT     TCOAT");
    if(IO_FLAG == 2)
    {
        if(axisOptFlag != 6)
        {
            CARD("%10lg%10lg%10lg%10lg",LOC_AOPT ,LSD_MATL34_ECOAT ,LSD_MATL34_SCOAT ,LSD_MATL34_TCOAT);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10lg",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM) ,LSD_MATL34_ECOAT ,LSD_MATL34_SCOAT ,LSD_MATL34_TCOAT);
        }
    }
    CARD_PREREAD("%10lg",LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,4,IMPORT);
    }
    else if(LOC_AOPT == 4.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,5,IMPORT);
    }
    if(IO_FLAG == 1)
    {
        
        if(axisOptFlag >= 1 && axisOptFlag < 6)
        {
            CARD("%10lg%10lg%10lg%10lg",LOC_AOPT ,LSD_MATL34_ECOAT ,LSD_MATL34_SCOAT ,LSD_MATL34_TCOAT);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10lg",SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM) ,LSD_MATL34_ECOAT ,LSD_MATL34_SCOAT ,LSD_MATL34_TCOAT);
            ASSIGN(axisOptFlag, 6, IMPORT);
        }
    }

    COMMENT("$       XP        YP        ZP        A1        A2        A3");
    if(axisOptFlag == 2 || axisOptFlag == 5)
    {
        CARD("%10lg%10lg%10lg",LSDYNA_XP ,LSDYNA_YP ,LSDYNA_ZP);
    }
    else if(axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1 ,LSDYNA_A2 ,LSDYNA_A3);
    }
    else
    {
        BLANK;
    }

    COMMENT("$       V1        V2        V3        D1        D2        D3      BETA");
    if(axisOptFlag == 3)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1 ,LSDYNA_D2 ,LSDYNA_D3);
    }
    else if(axisOptFlag == 4)
    {
        CARD("%10lg%10lg%10lg%10s%10s%10s%10lg",LSDYNA_V1 ,LSDYNA_V2 ,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,LSDYNA_BETA);
    }
    else
    {
        CARD("%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,CELL_COND(if(axisOptFlag == 1) LSDYNA_BETA;));
    }
}
