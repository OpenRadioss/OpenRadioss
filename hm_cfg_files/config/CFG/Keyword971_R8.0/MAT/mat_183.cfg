//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 183
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    EncTypeEnumField                        = VALUE(INT,  "Type");
    OPT_TYPE_STR                            = VALUE(STRING, "OPT");
    LSDYNA_MU                               = VALUE(FLOAT,  "Damping coefficient");
    LSDYNA_SIGF                             = VALUE(FLOAT,  "Limit stress for frequency independent, frictional, damping");
    LSDYNA_TC                               = VALUE(FLOAT,  "Parameter that controls how the rate effects are treated");
    LSD_AVGOPT                              = VALUE(FLOAT,  "Averaging option determine strain rate to reduce numerical noise");
    LSD_G                                   = VALUE(FLOAT,  "Shear modulus for frequency independent damping");
    LSD_MAT183_LogOpt                       = VALUE(INT,  "Options");
    LSD_MAT_K                               = VALUE(FLOAT,  "Linear bulk modulus");
    LSD_MAT_LCUNLD                          = VALUE(FUNCT,  "force versus actual change in the gauge length during unloading");
    LSD_MAT_REF                             = VALUE(FLOAT,  "Use reference geometry to initialize the stress tensor");
    LSD_MAT_SGL                             = VALUE(FLOAT,  "Specimen gauge length");
    LSD_MAT_ST                              = VALUE(FLOAT,  "Specimen thickness");
    LSD_MAT_SW                              = VALUE(FLOAT,  "Specimen width");
    LSD_MAT_TBID                            = VALUE(FUNCT,  "force VS actual change in the gauge length");
    LSD_RYPE                                = VALUE(FLOAT,  "Strain rate type if a table is defined");
    LSD_STOL                                = VALUE(FLOAT,  "Tolerance in stability check");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    RegTypeEnumField                        = VALUE(INT,  "Type");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    IO_FLAG                                 = VALUE(INT, "io flag");
    _HMCOMMENTSFLAG                         = VALUE(INT, "Write HM Comments");
    TITLE                                   = VALUE(STRING, "Title");
    _HAS_HEADER                             = VALUE(BOOL,"Has Header Card");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    EncTypeEnumField                        = 5828;
    LSDYNA_MU                               = 222;
    LSDYNA_SIGF                             = 248;
    LSDYNA_TC                               = 251;
    LSD_AVGOPT                              = 4588;
    LSD_G                                   = 1560;
    LSD_MAT183_LogOpt                       = 7982;
    LSD_MAT_K                               = 1131;
    LSD_MAT_LCUNLD                          = 4963;
    LSD_MAT_REF                             = 359;
    LSD_MAT_SGL                             = 350;
    LSD_MAT_ST                              = 352;
    LSD_MAT_SW                              = 351;
    LSD_MAT_TBID                            = 4586;
    LSD_RYPE                                = 4587;
    LSD_STOL                                = 7980;
    LSD_TitleOpt                            = 90;
    Num_Comments                            = 3101;
    RegTypeEnumField                        = 5827;
    Rho                                     = 118;
    IO_FLAG                                 = -1;
    TITLE                                   = -1;
    OPT_TYPE_STR                            = -1;
    _HAS_HEADER                             = -1;
}

DRAWABLES(COMMON) {
 public:
      MASS_DENSITY=SCALAR(Rho);
      BULK_MODULUS=SCALAR(LSD_MAT_K);
      DAMPING_COEFFICIENT=SCALAR(LSDYNA_MU);
      SHEAR_MODULUS=SCALAR(LSD_G);
      LIMIT_STRESS=SCALAR(LSDYNA_SIGF);
      RATE_EFFECTS_PARAMETER=SCALAR(LSDYNA_TC);
      STRAIN_RATE_TYPE=SCALAR(LSD_RYPE);
      AVERAGING_OPTION=SCALAR(LSD_AVGOPT);
      YOUNG_MODULUS = EVAL(9*SHEAR_MODULUS*BULK_MODULUS/(3.*BULK_MODULUS+SHEAR_MODULUS)) ;
      POISSON_RATIO     = EVAL((3.*BULK_MODULUS-2.*SHEAR_MODULUS)/(6.*BULK_MODULUS+2.*SHEAR_MODULUS));
 public:
      //SOUND_SPEED is speed for ISDO = 0 and 1
      SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
      SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 public:
      SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+BULK_MODULUS)/MASS_DENSITY)^0.5);
}

DEFAULTS(COMMON)
{
    _HAS_HEADER         = TRUE;
}

CHECK(COMMON){
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_SIMPLIFIED_RUBBER_WITH_DAMAGE");
     RADIO(CommentEnumField)
     {
         ////////ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     RADIO(RegTypeEnumField)
     {
        ADD(1, "Regular");
     }
     RADIO(LSD_MAT183_LogOpt)
     {
        ADD(1, "BLANK");
        ADD(2, "LOG_LOG_INTERPOLATION");
     }
     if(LSD_MAT183_LogOpt == 2)
     {
             ASSIGN(KEYWORD_STR, "_LOG_LOG_INTERPOLATION");
     }
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                                    {DIMENSION="density";}
 optional:
     SCALAR(LSD_MAT_K)                              {DIMENSION="pressure";}
     SCALAR(LSDYNA_MU)                              {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_G)                                  {DIMENSION="pressure";}
     SCALAR(LSDYNA_SIGF)                            {DIMENSION="pressure";}
 mandatory:    
     SCALAR(LSD_MAT_SGL)                            {DIMENSION="l";}
     SCALAR(LSD_MAT_SW)                             {DIMENSION="l";}
     SCALAR(LSD_MAT_ST)                             {DIMENSION="l";}
     FUNCTION(LSD_MAT_TBID)
     {
       X_TITLE = "Change in gauge length"; X_DIMENSION = "l";
       Y_TITLE = "Force"; Y_DIMENSION = "force";
     }
 optional:
     RADIO(LSDYNA_TC)
     {
        ADD(-1.0, "-1.0: During tension and compression loading, but not during unloading");
        ADD( 0.0, " 0.0: Compressive loading only");
        ADD( 1.0, " 1.0: Identically in tension and compression");
     }
     RADIO(LSD_RYPE)
     {
        ADD(0.0, "0.0: True strain rate");
        ADD(1.0, "1.0: Engineering strain rate");
     }
     RADIO(LSD_AVGOPT)
     {
        ADD(0.0, "0.0: Simple average of 12 time steps");
        ADD(1.0, "1.0: Running 12 point average");
     }

     FUNCTION(LSD_MAT_LCUNLD)
     {
       X_TITLE = "Change in gauge length"; X_DIMENSION = "l";
       Y_TITLE = "Force"; Y_DIMENSION = "force";
     }
     RADIO(LSD_MAT_REF)
     {
        ADD(0.0, "0.0: Off");
        ADD(1.0, "1.0: On");
     }
     SCALAR(LSD_STOL);
/*
    graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/BEAM,/COMPONENT/SPRING,/COMPONENT/TRUSS,/COMPONENT/RIVET,/COMPONENT/SHELL,/COMPONENT/PENTA6,/COMPONENT/SHEL16);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    //
    COMMENT("$      MID       RHO         K        MU         G      SIGF");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSD_MAT_K,LSDYNA_MU,LSD_G,LSDYNA_SIGF);
    //
    COMMENT("$      SGL        SW        ST        LC   TENSION     RTYPE    AVGOPT");
    CARD("%10lg%10lg%10lg%10d%10lg%10lg%10lg",LSD_MAT_SGL,LSD_MAT_SW,LSD_MAT_ST,LSD_MAT_TBID,LSDYNA_TC,LSD_RYPE,LSD_AVGOPT);
    //
    COMMENT("$   LCUNLD       REF");
    CARD("%10d%10lg",LSD_MAT_LCUNLD,LSD_MAT_REF);
    //
}

FORMAT(Keyword971_R7.1) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    if(IO_FLAG == 1 )
    {
         HEADER("*MAT_183%28s", OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR ==""|| OPT_TYPE_STR !="_TITLE" || OPT_TYPE_STR !="_LOG_LOG_INTERPOLATION" || OPT_TYPE_STR !="_LOG_LOG_INTERPOLATION_TITLE"))
    {
         HEADER("*MAT_SIMPLIFIED_RUBBER_WITH_DAMAGE%28s", OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "" || OPT_TYPE_STR == "_TITLE"))
    {
        ASSIGN(LSD_MAT183_LogOpt, 1,IMPORT);
    }   
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "_LOG_LOG_INTERPOLATION" || OPT_TYPE_STR == "_LOG_LOG_INTERPOLATION_TITLE"))
    {
        ASSIGN(LSD_MAT183_LogOpt, 2,IMPORT);
    }

    if(IO_FLAG == 2 && LSD_MAT183_LogOpt == 2 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_SIMPLIFIED_RUBBER_WITH_DAMAGE_LOG_LOG_INTERPOLATION");
    }   
    else if(IO_FLAG == 2 && LSD_MAT183_LogOpt == 2 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_SIMPLIFIED_RUBBER_WITH_DAMAGE_LOG_LOG_INTERPOLATION_TITLE");
        CARD("%-80s", TITLE);
    }
    else if(IO_FLAG == 2 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_SIMPLIFIED_RUBBER_WITH_DAMAGE");
    }   
    else if(IO_FLAG == 2 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_SIMPLIFIED_RUBBER_WITH_DAMAGE_TITLE");
        CARD("%-80s", TITLE);
    }
    //
    COMMENT("$      MID       RHO         K        MU         G      SIGF");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSD_MAT_K,LSDYNA_MU,LSD_G,LSDYNA_SIGF);
    //
    COMMENT("$      SGL        SW        ST        LC   TENSION     RTYPE    AVGOPT");
    CARD("%10lg%10lg%10lg%10d%10lg%10lg%10lg",LSD_MAT_SGL,LSD_MAT_SW,LSD_MAT_ST,LSD_MAT_TBID,LSDYNA_TC,LSD_RYPE,LSD_AVGOPT);
    //
    COMMENT("$   LCUNLD       REF");
    CARD("%10d%10lg",LSD_MAT_LCUNLD,LSD_MAT_REF);
    //

}
FORMAT(Keyword971_R8.0) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    
    if(IO_FLAG == 1 )
    {
         HEADER("*MAT_183%28s", OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR ==""|| OPT_TYPE_STR !="_TITLE" || OPT_TYPE_STR !="_LOG_LOG_INTERPOLATION" || OPT_TYPE_STR !="_LOG_LOG_INTERPOLATION_TITLE"))
    {
         HEADER("*MAT_SIMPLIFIED_RUBBER_WITH_DAMAGE%28s", OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "" || OPT_TYPE_STR == "_TITLE"))
    {
        ASSIGN(LSD_MAT183_LogOpt, 1,IMPORT);
    }   
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "_LOG_LOG_INTERPOLATION" || OPT_TYPE_STR == "_LOG_LOG_INTERPOLATION_TITLE"))
    {
        ASSIGN(LSD_MAT183_LogOpt, 2,IMPORT);
    }
    if(IO_FLAG == 2 && LSD_MAT183_LogOpt == 2 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_SIMPLIFIED_RUBBER_WITH_DAMAGE_LOG_LOG_INTERPOLATION");
    }   
    else if(IO_FLAG == 2 && LSD_MAT183_LogOpt == 2 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_SIMPLIFIED_RUBBER_WITH_DAMAGE_LOG_LOG_INTERPOLATION_TITLE");
        CARD("%-80s", TITLE);
    }
    else if(IO_FLAG == 2 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_SIMPLIFIED_RUBBER_WITH_DAMAGE");
    }   
    else if(IO_FLAG == 2 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_SIMPLIFIED_RUBBER_WITH_DAMAGE_TITLE");
        CARD("%-80s", TITLE);
    }

    //
    COMMENT("$      MID       RHO         K        MU         G      SIGF");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSD_MAT_K,LSDYNA_MU,LSD_G,LSDYNA_SIGF);
    //
    COMMENT("$      SGL        SW        ST        LC   TENSION     RTYPE    AVGOPT");
    CARD("%10lg%10lg%10lg%10d%10lg%10lg%10lg",LSD_MAT_SGL,LSD_MAT_SW,LSD_MAT_ST,LSD_MAT_TBID,LSDYNA_TC,LSD_RYPE,LSD_AVGOPT);
    //
    COMMENT("$   LCUNLD       REF      STOL");
    CARD("%10d%10lg%10lf",LSD_MAT_LCUNLD,LSD_MAT_REF,LSD_STOL);
    //

}
