//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 181
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    EncTypeEnumField                        = VALUE(INT,  "Type");
    LSDYNA_MU                               = VALUE(FLOAT,  "Damping coefficient");
    LSDYNA_SIGF                             = VALUE(FLOAT,  "Limit stress for frequency independent, frictional, damping");
    LSDYNA_TC                               = VALUE(FLOAT,  "Parameter that controls how the rate effects are treated");
    LSD_AVGOPT                              = VALUE(FLOAT,  "Averaging option determine strain rate to reduce numerical noise");
    LSD_AVGOPT2                             = VALUE(FLOAT,  "|AVGOPT| is a time window over which strain rates are averaged");
    Neg_AGVOPT                              = VALUE(INT,  "flag for Neg_AVGOPT");
    LSD_EH                                  = VALUE(FLOAT,  "Damage parameter");
    LSD_G                                   = VALUE(FLOAT,  "Shear modulus for frequency independent damping");
    LSD_GAMA1                               = VALUE(FLOAT,  "Material failure parameter");
    LSD_GAMA2                               = VALUE(FLOAT,  "Material failure parameter");
    LSD_K                                   = VALUE(FLOAT,  "Material failure parameter that controls volume enclosed by failure surface");
    LSD_MAT181_Opts                         = VALUE(INT,  "Options");
    LSD_MAT73_HU                            = VALUE(FLOAT,  "Hysteretic unloading factor between 0 and 1");
    LSD_MAT73_SHAPE                         = VALUE(FLOAT,  "Shape factor for unloading");
    LSD_MAT_K                               = VALUE(FLOAT,  "Linear bulk modulus");
    LSD_MAT_LCUNLD                          = VALUE(FUNCT,  "force VS actual length during unloading");
    LSD_MAT_REF                             = VALUE(FLOAT,  "Use reference geometry to initialize the stress tensor");
    LSD_MAT_SGL                             = VALUE(FLOAT,  "Specimen gauge length");
    LSD_MAT_ST                              = VALUE(FLOAT,  "Specimen thickness");
    LSD_MAT_SW                              = VALUE(FLOAT,  "Specimen width");
    LSD_MAT_TBID                            = VALUE(FUNCT,  "Force VS actual change in the gauge length");
    LSD_PRBETA                              = VALUE(FLOAT,  "Poissons ratio");
    LSD_PRTEN                               = VALUE(FLOAT,  "Tensile Poissons ratio for shells");
    LSD_RYPE                                = VALUE(FLOAT,  "Strain rate type if a table is defined");
    LSD_STOL                                = VALUE(FLOAT,  "Tolerance in stability check");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    RegTypeEnumField                        = VALUE(INT,  "Type");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    LSD_VISCO                               = VALUE(FLOAT,  "Viscoelasticity formulation");
    VISCO_CONSTS                            = SIZE("VISCO_CONSTS");
    LSD_Gi                                  = ARRAY[VISCO_CONSTS](FLOAT,  "Optional shear relaxation modulus");
    LSD_BETAi                               = ARRAY[VISCO_CONSTS](FLOAT,  "Optional decay constant");
    LSD_VFLAG                               = ARRAY[VISCO_CONSTS](INT,  "Flag for the viscoelasticity formulation");
    optionalCards                           = VALUE(INT,  "OptionalCard");
    IO_FLAG                                 = VALUE(INT, "io flag");
    _HMCOMMENTSFLAG                         = VALUE(INT, "Write HM Comments");
    TITLE                                   = VALUE(STRING, "Title");
    OPT_TYPE_STR                            = VALUE(STRING, "OPT");
    AVGOPT_TYPE                             = VALUE(FLOAT,  "AVGOPT_TYPE");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
    _HAS_HEADER                             = VALUE(BOOL,"Has Header Card");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    EncTypeEnumField                        = 5828;
    LSDYNA_MU                               = 222;
    LSDYNA_SIGF                             = 248;
    LSDYNA_TC                               = 251;
    LSD_AVGOPT                              = 4588;
    Neg_AGVOPT                              = 8383;
    LSD_AVGOPT2                             = 8384;
    LSD_EH                                  = 3007;
    LSD_G                                   = 1560;
    LSD_GAMA1                               = 1657;
    LSD_GAMA2                               = 1658;
    LSD_K                                   = 1656;
    LSD_MAT181_Opts                         = 7981;
    LSD_MAT73_HU                            = 2510;
    LSD_MAT73_SHAPE                         = 2513;
    LSD_MAT_K                               = 1131;
    LSD_MAT_LCUNLD                          = 4963;
    LSD_MAT_REF                             = 359;
    LSD_MAT_SGL                             = 350;
    LSD_MAT_ST                              = 352;
    LSD_MAT_SW                              = 351;
    LSD_MAT_TBID                            = 4586;
    LSD_PRBETA                              = 5345;
    LSD_PRTEN                               = 1655;
    LSD_RYPE                                = 4587;
    LSD_STOL                                = 7980;
    LSD_TitleOpt                            = 90;
    Num_Comments                            = 3101;
    RegTypeEnumField                        = 5827;
    Rho                                     = 118;
    optionalCards                           = 4772;
    LSD_VISCO                               = 8377;
    LSD_Gi                                  = 8378;
    LSD_BETAi                               = 8379;
    LSD_VFLAG                               = 8380;
    VISCO_CONSTS                            = 8381;
    AVGOPT_TYPE                             = -1;
    IO_FLAG                                 = -1;
    TITLE                                   = -1;
    OPT_TYPE_STR                            = -1;
    //empty_string                       = -1;
    _HAS_HEADER                             = -1;
}

DEFAULTS(COMMON)
{
    _HAS_HEADER         = TRUE;
    LSD_MAT73_HU        = 1.0;
}

CHECK(COMMON){
    VISCO_CONSTS >= 1;
    VISCO_CONSTS <= 12;
    LSD_AVGOPT2 < 0.0;
}

DRAWABLES(COMMON) {
 public:
      MASS_DENSITY=SCALAR(Rho);
      BULK_MODULUS=SCALAR(LSD_MAT_K);
      DAMPING_COEFFICIENT=SCALAR(LSDYNA_MU);
      SHEAR_MODULUS=SCALAR(LSD_G);
      LIMIT_STRESS=SCALAR(LSDYNA_SIGF);
      RATE_EFFECTS_PARAMETER=SCALAR(LSDYNA_TC);
      STRAIN_RATE_TYPE=SCALAR(LSD_RYPE);
      AVERAGING_OPTION=SCALAR(LSD_AVGOPT);
      YOUNG_MODULUS = EVAL(9*SHEAR_MODULUS*BULK_MODULUS/(3.*BULK_MODULUS+SHEAR_MODULUS)) ;
      POISSON_RATIO     = EVAL((3.*BULK_MODULUS-2.*SHEAR_MODULUS)/(6.*BULK_MODULUS+2.*SHEAR_MODULUS));
 public:
      //SOUND_SPEED is speed for ISDO = 0 and 1
      SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
      SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 public:
      SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+BULK_MODULUS)/MASS_DENSITY)^0.5);
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_SIMPLIFIED_RUBBER/FOAM");
     RADIO(CommentEnumField)
     {
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     RADIO(RegTypeEnumField)
     {
        ADD(0, "Regular");
     }
     RADIO(LSD_MAT181_Opts)
     {
        ADD(1, "BLANK");
        ADD(2, "WITH_FAILURE");
        ADD(3, "LOG_LOG_INTERPOLATION");
     }
     if(LSD_MAT181_Opts == 2)
     {
             ASSIGN(KEYWORD_STR, "_WITH_FAILURE");
     }
     if(LSD_MAT181_Opts == 3)
     {
             ASSIGN(KEYWORD_STR, "_LOG_LOG_INTERPOLATION");
     }

     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                                {DIMENSION="density";}
 optional:    
     SCALAR(LSD_MAT_K)                          {DIMENSION="pressure";}
     SCALAR(LSDYNA_MU)                          {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_G)                              {DIMENSION="pressure";}
     SCALAR(LSDYNA_SIGF)                        {DIMENSION="pressure";}
     RADIO(LSD_MAT_REF)
     {
        ADD(0.0, "0.0: Off");
        ADD(1.0, "1.0: On");
     }
     SCALAR(LSD_PRTEN)                          {DIMENSION="DIMENSIONLESS";}  
 mandatory:
     SCALAR(LSD_MAT_SGL)                        {DIMENSION="l";}
     SCALAR(LSD_MAT_SW)                         {DIMENSION="l";}
     SCALAR(LSD_MAT_ST)                         {DIMENSION="l";}
     FUNCTION(LSD_MAT_TBID)
     {
       X_TITLE = "Change in gauge length"; X_DIMENSION = "l";
       Y_TITLE = "Force"; Y_DIMENSION = "force";
     }
     RADIO(LSDYNA_TC)
     {
        ADD(-1.0, "-1.0: During tension and compression loading, but not during unloading");
        ADD( 0.0, " 0.0: Compressive loading only");
        ADD( 1.0, " 1.0: Identically in tension and compression");
     }
     RADIO(LSD_RYPE)
     {
        ADD(0.0, "0.0: True strain rate");
        ADD(1.0, "1.0: Engineering strain rate");
     }
     FLAG(Neg_AGVOPT);
     if(Neg_AGVOPT == FALSE)
     {
         RADIO(LSD_AVGOPT)
         {
            ADD(0.0, "0.0: Simple average of 12 time steps");
            ADD(1.0, "1.0: Running 12 point average");
         }
     }
     else
     {
        SCALAR(LSD_AVGOPT2);
     }
     SCALAR(LSD_PRBETA)                         {DIMENSION="DIMENSIONLESS";}
     if(LSD_MAT181_Opts == 2)
     {
 optional:
         SCALAR(LSD_K)                           {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_GAMA1)                       {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_GAMA2)                       {DIMENSION="DIMENSIONLESS";}
         SCALAR(LSD_EH)                          {DIMENSION="DIMENSIONLESS";}
     }
     FLAG(optionalCards);
     if(optionalCards == TRUE)
     {
         FUNCTION(LSD_MAT_LCUNLD)
         {
           X_TITLE = "Actual length"; X_DIMENSION = "l";
           Y_TITLE = "Force"; Y_DIMENSION = "force";
         }
         SCALAR(LSD_MAT73_HU);
         SCALAR(LSD_MAT73_SHAPE);
         SCALAR(LSD_STOL);
         RADIO(LSD_VISCO)
         {
            ADD(0.0,"0.0");
            ADD(1.0,"1.0");
         }
     }
     if(optionalCards == TRUE)
     {
        SIZE(VISCO_CONSTS);
        ARRAY(VISCO_CONSTS,"")
        {
            SCALAR(LSD_Gi)                        {DIMENSION="pressure";}
            SCALAR(LSD_BETAi)                     {DIMENSION="f";}
            SCALAR(LSD_VFLAG);
        }
    }
/*
optional:
    graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/PART/BRICK,/PART/TETRA4,/PART/LINEAR_3D,/PART/SHELL,/PART/PENTA6);
      ADD(PART,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{

    COMMENT("$      MID       RHO        KM        MU         G      SIGF       REF     PRTEN");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSD_MAT_K,LSDYNA_MU,LSD_G,LSDYNA_SIGF,LSD_MAT_REF,LSD_PRTEN);

    COMMENT("$      SGL        SW        ST   LC_TBID   TENSION     RTYPE    AVGOPT   PR/BETA");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_SGL,LSD_MAT_SW,LSD_MAT_ST,LSD_MAT_TBID,LSDYNA_TC,LSD_RYPE,LSD_AVGOPT,LSD_PRBETA);

    if(LSD_MAT181_Opts == 1)
    {
        //
        COMMENT("$        K     GAMA1     GAMA2        EH                              ");
        CARD("%10lg%10lg%10lg%10lg",LSD_K,LSD_GAMA1,LSD_GAMA2,LSD_EH);
        //
    }
    if(IO_FLAG == 2 && optionalCards==TRUE)
    {
        //
        COMMENT("$   LCUNLD        HU     SHAPE");
        CARD("%10d%10lg%10lg",LSD_MAT_LCUNLD,LSD_MAT73_HU,LSD_MAT73_SHAPE);
        //
    }
    if(IO_FLAG == 1)
    {
        FREE_CARD(optionalCards,"%10d%10lg%10lg",LSD_MAT_LCUNLD,LSD_MAT73_HU,LSD_MAT73_SHAPE);
    }

}
FORMAT(Keyword971_R6.1) 
{

    COMMENT("$      MID       RHO        KM        MU         G      SIGF       REF     PRTEN");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10d%10lg",_ID_,Rho,LSD_MAT_K,LSDYNA_MU,LSD_G,LSDYNA_SIGF,LSD_MAT_REF,LSD_PRTEN);

    COMMENT("$      SGL        SW        ST   LC_TBID   TENSION     RTYPE    AVGOPT   PR/BETA");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_SGL,LSD_MAT_SW,LSD_MAT_ST,LSD_MAT_TBID,LSDYNA_TC,LSD_RYPE,LSD_AVGOPT,LSD_PRBETA);

    if(LSD_MAT181_Opts == 1)
    {
        //
        COMMENT("$        K     GAMA1     GAMA2        EH                              ");
        CARD("%10lg%10lg%10lg%10lg",LSD_K,LSD_GAMA1,LSD_GAMA2,LSD_EH);
        //
    }
    if(IO_FLAG == 2 && optionalCards==TRUE)
    {
        //
        COMMENT("$   LCUNLD        HU     SHAPE      STOL");
        CARD("%10d%10lg%10lg%10lg",LSD_MAT_LCUNLD,LSD_MAT73_HU,LSD_MAT73_SHAPE,LSD_STOL);
        //
    }
    if(IO_FLAG == 1)
    {
        FREE_CARD(optionalCards,"%10d%10lg%10lg%10lg",LSD_MAT_LCUNLD,LSD_MAT73_HU,LSD_MAT73_SHAPE,LSD_STOL);
    }
}
FORMAT(Keyword971_R7.1) 
{
    COMMENT("$      MID       RHO        KM        MU         G      SIGF       REF     PRTEN");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10d%10lg",_ID_,Rho,LSD_MAT_K,LSDYNA_MU,LSD_G,LSDYNA_SIGF,LSD_MAT_REF,LSD_PRTEN);

    COMMENT("$      SGL        SW        ST   LC_TBID   TENSION     RTYPE    AVGOPT   PR/BETA");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_SGL,LSD_MAT_SW,LSD_MAT_ST,LSD_MAT_TBID,LSDYNA_TC,LSD_RYPE,LSD_AVGOPT,LSD_PRBETA);

    if(LSD_MAT181_Opts == 1)
    {
        //
        COMMENT("$        K     GAMA1     GAMA2        EH                              ");
        CARD("%10lg%10lg%10lg%10lg",LSD_K,LSD_GAMA1,LSD_GAMA2,LSD_EH);
        //
    }
    if(IO_FLAG == 2 && optionalCards==TRUE)
    {
        //
        COMMENT("$   LCUNLD        HU     SHAPE      STOL");
        CARD("%10d%10lg%10lg%10lg",LSD_MAT_LCUNLD,LSD_MAT73_HU,LSD_MAT73_SHAPE,LSD_STOL);
        //
    }
    if(IO_FLAG == 1)
    {
        FREE_CARD(optionalCards,"%10d%10lg%10lg%10lg",LSD_MAT_LCUNLD,LSD_MAT73_HU,LSD_MAT73_SHAPE,LSD_STOL);
    }
}
FORMAT(Keyword971_R8.0)
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    if(IO_FLAG == 1 )
    {
         HEADER("*MAT_181%28s", OPT_TYPE_STR);
    }
    if(IO_FLAG == 1  && (OPT_TYPE_STR == "" ||OPT_TYPE_STR != "_TITLE" || OPT_TYPE_STR != "_WITH_FAILURE" ||OPT_TYPE_STR != "_WITH_FAILURE_TITLE" || OPT_TYPE_STR != "_LOG_LOG_INTERPOLATION" ||OPT_TYPE_STR != "_LOG_LOG_INTERPOLATION_TITLE" ))
    {
         HEADER("*MAT_SIMPLIFIED_RUBBER/FOAM%28s", OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "" ||OPT_TYPE_STR == "_TITLE" ))
    {
        ASSIGN(LSD_MAT181_Opts, 1);
    }
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "_WITH_FAILURE" ||OPT_TYPE_STR == "_WITH_FAILURE_TITLE" ))
    {
        ASSIGN(LSD_MAT181_Opts, 2);
    }   
    if(IO_FLAG == 1 && (OPT_TYPE_STR == "_LOG_LOG_INTERPOLATION" ||OPT_TYPE_STR == "_LOG_LOG_INTERPOLATION_TITLE" ))
    {
        ASSIGN(LSD_MAT181_Opts, 3);
    }

    if(IO_FLAG == 2 && LSD_MAT181_Opts == 1 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_SIMPLIFIED_RUBBER/FOAM");
    }   
    else if(IO_FLAG == 2 && LSD_MAT181_Opts == 1 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_SIMPLIFIED_RUBBER/FOAM_TITLE");
        CARD("%-80s", TITLE);
    } 
    else if(IO_FLAG == 2 && LSD_MAT181_Opts == 2 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_SIMPLIFIED_RUBBER/FOAM_WITH_FAILURE");
    }
    else if(IO_FLAG == 2 && LSD_MAT181_Opts == 2 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_SIMPLIFIED_RUBBER/FOAM_WITH_FAILURE_TITLE");
        CARD("%-80s", TITLE);
    }  
    else if(IO_FLAG == 2 && LSD_MAT181_Opts == 3 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_SIMPLIFIED_RUBBER/FOAM_LOG_LOG_INTERPOLATION");
    }
    else if(IO_FLAG == 2 && LSD_MAT181_Opts == 3 && LSD_TitleOpt == TRUE)
    {       
        HEADER("*MAT_SIMPLIFIED_RUBBER/FOAM_LOG_LOG_INTERPOLATION_TITLE");
        CARD("%-80s", TITLE);
    }       
    //
    COMMENT("$      MID       RHO        KM        MU         G      SIGF       REF     PRTEN");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSD_MAT_K,LSDYNA_MU,LSD_G,LSDYNA_SIGF,LSD_MAT_REF,LSD_PRTEN);

    COMMENT("$      SGL        SW        ST   LC_TBID   TENSION     RTYPE    AVGOPT   PR/BETA");
    if(IO_FLAG == 1)
    {
        CARD_PREREAD("%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_AVGOPT);
        if(LSD_AVGOPT >=0.0)
        {
            ASSIGN(Neg_AGVOPT,0);
        }
        else
        {
            ASSIGN(Neg_AGVOPT,1);
        }
    }
    if(Neg_AGVOPT == 0)
    {
        CARD("%10lg%10lg%10lg%10d%10lg%10lg%10lg%10lg",LSD_MAT_SGL,LSD_MAT_SW,LSD_MAT_ST,LSD_MAT_TBID,LSDYNA_TC,LSD_RYPE,LSD_AVGOPT,LSD_PRBETA);
    }
    if(Neg_AGVOPT == 1)
    {
        CARD("%10lg%10lg%10lg%10d%10lg%10lg%10lg%10lg",LSD_MAT_SGL,LSD_MAT_SW,LSD_MAT_ST,LSD_MAT_TBID,LSDYNA_TC,LSD_RYPE,LSD_AVGOPT2,LSD_PRBETA);
    }
    if(LSD_MAT181_Opts == 2)
    {
        //
        COMMENT("$        K     GAMA1     GAMA2        EH                              ");
        CARD("%10lg%10lg%10lg%10lg",LSD_K,LSD_GAMA1,LSD_GAMA2,LSD_EH);
        //
    }
    //
    if(IO_FLAG == 2 && optionalCards==TRUE)
    {
        //
        COMMENT("$   LCUNLD        HU     SHAPE      STOL     VISCO");
        CARD("%10d%10lg%10lg%10lg%10lg",LSD_MAT_LCUNLD,LSD_MAT73_HU,LSD_MAT73_SHAPE,LSD_STOL,LSD_VISCO);
        //
    }
    if(IO_FLAG == 1)
    {
        FREE_CARD(optionalCards,"%10d%10lg%10lg%10lg%10lg",LSD_MAT_LCUNLD,LSD_MAT73_HU,LSD_MAT73_SHAPE,LSD_STOL,LSD_VISCO);
    }
    //
    if(optionalCards == TRUE)
    {
        COMMENT("$       Gi      BETA     VFLAG");
        FREE_CARD_LIST(VISCO_CONSTS)
        {
            CARD("%10lg%10lg%10d",LSD_Gi,LSD_BETAi,LSD_VFLAG);
        }
    }
}
