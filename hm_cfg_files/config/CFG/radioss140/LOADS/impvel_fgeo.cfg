//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Fixed velocity Setup File
// 

ATTRIBUTES(COMMON) {
  distribution       = VALUE(UINT, "Spring specification(Part/Node Position)");
  curveid            = VALUE(FUNCT, "Time function identifier");
  rad_spring_part    = VALUE(COMPONENT, "Optional spring part identifier");
  rad_fct_l_id       = VALUE(FUNCT, "Load Time function identifier");
  rad_sensor_id      = VALUE(SENSOR,"Sensor identifier") {SUBTYPES=(/SENSOR/SENSOR_DEFINE);}
 
  xscale             = VALUE(FLOAT, "Abscissa Scale factor for fct_ID");   
  rad_t0             = VALUE(FLOAT, "Time duration");
  rad_tstart         = VALUE(FLOAT, "Start time"); 
  magnitude          = VALUE(FLOAT, "Ordinate scale factor for fct_ID_load"); 
  rad_dmin           = VALUE(FLOAT, "Distance between node_IDN and node_ID'N, which will be rigidly connected");    


  displayname           = VALUE(STRING, "Final geometry block title","TITLE");
  // Support
  distribution_table_count = SIZE("Number of additional nodes");
  location_unit_node       = ARRAY[distribution_table_count](NODE,"Node identifier"); 
  rad_node_id              = ARRAY[distribution_table_count](NODE,"Node identifier giving the final position of node_IDN");
  Line_count         = VALUE(INT,"Temp variable for line");
  IOFLAG             = VALUE(INT, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    Line_count = -1;
    IOFLAG     = -1;
}

DEFINITIONS(COMMON) {
  MAINS=(location_unit_node);
}

PARAMETERS(PARAMETERS) {
  magnitude  = INPUT_SCALAR(magnitude,"Scale factor");   
  rad_tstart = INPUT_SCALAR(rad_tstart,"Start time");   
  rad_t0     = INPUT_SCALAR(rad_t0,"Time duration");   
}

DEFAULTS(COMMON) {
  xscale    = 1.;
  magnitude     = 1.;
}

GUI(COMMON) {

    SCALAR(xscale)         { DIMENSION = "t";    }
    SCALAR(rad_t0)         { DIMENSION = "t";    }
    SCALAR(rad_tstart)     { DIMENSION = "t";    }
    SCALAR(rad_dmin)       { DIMENSION = "l";  }
    SCALAR(magnitude)      { DIMENSION = "force";   }
/*
 mandatory:
  graphical FUNCTION(curveid) {
    SCALING(xscale); 
    X_TITLE     = "Time"; Y_TITLE     = "Velocity";
    X_DIMENSION="t"; Y_DIMENSION="velocity";
    X_SCALING(xscale);
    X_CAN_BE_NEGATIVE = FALSE;
  }  
 optional:
  DATA(rad_spring_part);
 mandatory:
  graphical FUNCTION(rad_fct_l_id) {
    SCALING(magnitude); 
    X_TITLE     = "Time"; Y_TITLE     = "Velocity";
    X_DIMENSION="t"; Y_DIMENSION="velocity";
    Y_SCALING(magnitude);
    X_CAN_BE_NEGATIVE = FALSE;
  }  
  
  if(ILAGMUL==FALSE) {
    TOOL(rad_sensor_id);
    SCALAR(rad_t0)      { DIMENSION="t"; }
    SCALAR(rad_tstart)  { DIMENSION="t"; }
  }
  //
  SCALAR(rad_dmin);
  SIZE(distribution_table_count);
  ARRAY(distribution_table_count, "No.of nodes")
  {
     DATA(location_unit_node);
     DATA(rad_node_id);
  }
*/
  
}

FORMAT(radioss140) {
  ASSIGN(IOFLAG,0,EXPORT);
  ASSIGN(IOFLAG,1,IMPORT);

  HEADER("/IMPVEL/FGEO/%d",_ID_);
  CARD("%-100s", displayname);
  COMMENT("#   fct_ID   part_ID  fct_ID_L   sens_ID");
  if(IOFLAG == 0 && distribution == 1)
  {
    CARD("%10d         0%10d%10d",curveid,rad_fct_l_id,rad_sensor_id);  
    COMMENT("#             Ascale                  T0              Tstart            Fscale_L                Dmin");
    CARD("%20lg%20lg%20lg%20lg%20lg",xscale,rad_t0,rad_tstart,magnitude,rad_dmin);
    COMMENT("#           node_IDN node_ID'N");
    CARD_LIST(distribution_table_count)
    {
      CARD("          %10d%10d",location_unit_node,rad_node_id);
    }
  }
  else if(IOFLAG == 0 && distribution == 0)
  {
    CARD("%10d%10d%10d%10d",curveid,rad_spring_part,rad_fct_l_id,rad_sensor_id);
    COMMENT("#             Ascale                  T0              Tstart            Fscale_L                Dmin");
    CARD("%20lg%20lg%20lg%20lg%20lg",xscale,rad_t0,rad_tstart,magnitude,rad_dmin);
  }
  else
  {
    CARD("%10d%10d%10d%10d",curveid,rad_spring_part,rad_fct_l_id,rad_sensor_id);
    COMMENT("#             Ascale                  T0              Tstart            Fscale_L                Dmin");
    CARD("%20lg%20lg%20lg%20lg%20lg",xscale,rad_t0,rad_tstart,magnitude,rad_dmin);
    COMMENT("#           node_IDN node_ID'N");
    FREE_CARD_LIST(distribution_table_count)
    {
      CARD("          %10d%10d",location_unit_node,rad_node_id);
    }
    if(distribution_table_count > 0)
    {
      ASSIGN(distribution,1,IMPORT);
    }
    else
    {
      ASSIGN(distribution,0,IMPORT);
    }
  }
}
