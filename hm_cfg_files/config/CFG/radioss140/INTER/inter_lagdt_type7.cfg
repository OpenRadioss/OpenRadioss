//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- inter_lagdt_type7.cfg ---

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES
    secondaryentityids                      = VALUE(SETS,        "Secondary node group identifier") { SUBTYPES = (/SETS/GRNOD) ; }
    mainentityids                           = VALUE(SETS,        "Main surface identifier")         { SUBTYPES = (/SETS/SURF) ; }
    Istf                                    = VALUE(INT,         "Stiffness definition flag");
    Igap                                    = VALUE(INT,         "Gap/element option flag");
    Multimp                                 = VALUE(INT,         "Maximum average number of impacted main segments per secondary node");
    Ibag                                    = VALUE(INT,         "Airbag vent holes closure flag in case of contact");
    Idel7                                   = VALUE(INT,         "Node and segment deletion flag");

    GAPSCALE                                = VALUE(FLOAT,       "Gap scale factor");
    GAPMAX                                  = VALUE(FLOAT,       "Maximum gap");

    STMIN                                   = VALUE(FLOAT,       "Minimum stiffness");
    STMAX                                   = VALUE(FLOAT,       "Maximum stiffness");

    TYPE7_SCALE                             = VALUE(FLOAT,       "Interface stiffness");
    FRIC                                    = VALUE(FLOAT,       "Coulomb friction");
    GAP                                     = VALUE(FLOAT,       "Minimum gap for impact activation");
    TSTART                                  = VALUE(FLOAT,       "Start time");
    TSTOP                                   = VALUE(FLOAT,       "Time for temporary deactivation");

    Deactivate_X_BC                         = VALUE(INT,         "Deactivation flag of X boundary condition at impact");
    Deactivate_Y_BC                         = VALUE(INT,         "Deactivation flag of Y boundary condition at impact");
    Deactivate_Z_BC                         = VALUE(INT,         "Deactivation flag of Z boundary condition at impact");
    INACTIV                                 = VALUE(INT,         "Deactivation flag of stiffness in case of initial penetrations");
    STIFF_DC                                = VALUE(FLOAT,       "Critical damping coefficient on interface stiffness");
    FRIC_DC                                 = VALUE(FLOAT,       "Critical damping coefficient on interface friction");
    SORT_FACT                               = VALUE(FLOAT,       "Sorting factor");

    Ifric                                   = VALUE(INT,         "Friction formulation flag");
    Ifiltr                                  = VALUE(INT,         "Friction filtering flag");
    Xfreq                                   = VALUE(FLOAT,       "Filtering coefficient");
    IFORM                                   = VALUE(INT,         "Friction penalty formulation type");

    //Ifric > 0
    C1                                      = VALUE(FLOAT,       "Friction law coefficient");
    C2                                      = VALUE(FLOAT,       "Friction law coefficient");
    C3                                      = VALUE(FLOAT,       "Friction law coefficient");
    C4                                      = VALUE(FLOAT,       "Friction law coefficient");
    C5                                      = VALUE(FLOAT,       "Friction law coefficient");

    //Ifric > 1
    C6                                      = VALUE(FLOAT,       "Friction law coefficient");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING,      "Solver Keyword");

    TITLE                                   = VALUE(STRING,      "Interface title");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES
    Istf                                    = 8044;
    Igap                                    = 8045;
    Multimp                                 = 8046;    
    Ibag                                    = 6300;
    Idel7                                   = 6301;

    GAPSCALE                                = 4021;
    GAPMAX                                  = 4022;

    STMIN                                   = 4023;
    STMAX                                   = 4024;

    TYPE7_SCALE                             = 4027;
    FRIC                                    = 5;
    GAP                                     = 5153;
    TSTART                                  = 11;
    TSTOP                                   = 12;

    Deactivate_X_BC                         = 7020;
    Deactivate_Y_BC                         = 7021;
    Deactivate_Z_BC                         = 7022;
    INACTIV                                 = 94;
    STIFF_DC                                = 6;
    FRIC_DC                                 = 8;
    SORT_FACT                               = 5321;

    Ifric                                   = 6303;
    Ifiltr                                  = 6304;
    Xfreq                                   = 6305;
    IFORM                                   = 4028;

    // ifric > 0
    C1                                      = 6306;
    C2                                      = 6307;
    C3                                      = 6308;
    C4                                      = 6309;
    C5                                      = 6310;

    //ifric > 1
    C6                                      = 6311;

    //HM INTERNAL
    KEYWORD_STR                             = 9000;

    TITLE                                   = -1;
}

DEFAULTS(COMMON)
{
    Multimp                                 = 4;
    GAPSCALE                                = 1.0;
    STMAX                                   = 10E30;
    STIFF_DC                                = 0.05;
    FRIC_DC                                 = 1.0;
    SORT_FACT                               = 0.20;   
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "/INTER/LAGDT/TYPE7/");

    DATA(secondaryentityids,  "grnd_IDs");
    DATA(mainentityids, "surf_IDm");

    RADIO(Istf, "Istf")
    {
        ADD(0, "0: Stfac is a stiffness scale factor and the stiffness is computed according to the main side characteristics");
        ADD(1, "1: Stfac is a stiffness value");
        ADD(2, "2: Stfac and the stiffness is computed from both main and secondary characteristics");
        ADD(3, "3: Stfac and the stiffness is computed from both main and secondary characteristics");
        ADD(4, "4: Stfac and the stiffness is computed from both main and secondary characteristics");
        ADD(5, "5: Stfac and the stiffness is computed from both main and secondary characteristics");

    }

    RADIO(Igap, "Igap")
    {
        ADD(0, "0: Gap is constant and equal to the minimum gap");
        ADD(1, "1: Gap varies accordingly to the characteristics of the impacted main surface and the impacting secondary node");
        ADD(2, "2: Variable gap + gap scale correction of the computed gap");
    }

    RADIO(Ibag, "Ibag")
    {
        ADD(0, "0: (Default) No closure");
        ADD(1, "1: Closure");
    }

    RADIO(Idel7, "Idel")
    {
        ADD(0,  "0: (Default) No deletion");
        ADD(1,  "1: When all the elements (4-node shells, 3-node shells, solids) associated to one segment are deleted, the segment is removed from the main side of the interface");
        ADD(2,  "2: When a 4-node shell, a 3-node shell or a solid element is deleted, the corresponding segment is removed from the main side of the interface");
        ADD(-1, "-1: Same as = 1, except non-connected nodes are not removed from the secondary side of the interface");
        ADD(-2, "-2: Same as =2, except non-connected nodes are not removed from the secondary side of the interface");
    }

    SCALAR(GAPSCALE, "FscaleGap")           { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(GAPMAX, "Gapmax")                { DIMENSION = "l" ; }
    SCALAR(STMIN, "Stmin")                  { DIMENSION = "translation_stiffness" ; }
    SCALAR(STMAX, "Stmax")                  { DIMENSION = "translation_stiffness" ; }
    SCALAR(TYPE7_SCALE, "Stfac")            { if(Istf==0) { DIMENSION = "translation_stiffness" ; } else { DIMENSION="DIMENSIONLESS"; }  }
    SCALAR(FRIC, "Fric")                    { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(GAP, "Gap")                      { DIMENSION = "l" ; }
    SCALAR(TSTART, "Tstart")                { DIMENSION = "t" ; }
    SCALAR(TSTOP, "Tstop")                  { DIMENSION = "t" ; }
    FLAG(Deactivate_X_BC, "IBCX");
    FLAG(Deactivate_Y_BC, "IBCY");
    FLAG(Deactivate_Z_BC, "IBCZ");

    RADIO(INACTIV, "Inacti")
    {
        ADD(0, "0: No action");
        ADD(1, "1: Deactivation of stiffness on nodes");
        ADD(2, "2: Deactivation of stiffness on elements");
        ADD(3, "3: Change node coordinates to avoid initial penetrations");
        ADD(5, "5: Gap is variable with time and initial gap i");
        ADD(6, "6: Gap is variable with time but initial penetration");
    }

    SCALAR(STIFF_DC, "VISs")                { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(FRIC_DC, "VISf")                 { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(SORT_FACT, "Bumult")             { DIMENSION = "DIMENSIONLESS" ; }

    RADIO(Ifric, "Ifric")
    {
        ADD(0, "0: (Default) Static Coulomb friction law");
        ADD(1, "1: Generalized viscous friction law");
        ADD(2, "2: (Modified) Darmstad friction law");
        ADD(3, "3: Renard friction law");
    }

    RADIO(Ifiltr, "Ifiltr")
    {
        ADD(0, "0: (Default) No filter is used");
        ADD(1, "1: Simple numerical filter");
        ADD(2, "2: Standard -3dB filter with filtering period");
        ADD(3, "3: Standard -3dB filter with cutting frequency");
    }

    SCALAR(Xfreq, "Xfreq")                  { DIMENSION = "f" ; }

    RADIO(IFORM, "Iform")
    {
        ADD(1, "1: (Default) Viscous (total) formulation");
        ADD(2, "2: Stiffness (incremental) formulation");
    }

   
    if(Ifric>0) 
    {
      SCALAR(C1) {
        if (Ifric==1)      { TITLE = "Friction C1 (Viscous law)"  ; DIMENSION = "inverse_of_pressure"; }
        else if (Ifric==2) { TITLE = "Friction C1 (Darmstad law)" ; DIMENSION = "inverse_of_square_of_pressure"; }
        else if (Ifric==3) { TITLE = "Friction C1 (Renard law)"   ; DIMENSION = "DIMENSIONLESS"; }
                 }  
      SCALAR(C2) {
        if (Ifric==1)      { TITLE = "Friction C2 (Viscous law)"  ; DIMENSION = "inverse_of_speed"; }
        else if (Ifric==2) { TITLE = "Friction C2 (Darmstad law)" ; DIMENSION = "inverse_of_speed"; }
        else if (Ifric==3) { TITLE = "Friction C2 (Renard law)"   ; DIMENSION = "DIMENSIONLESS"; }      }  
      SCALAR(C3) {
        if (Ifric==1)      { TITLE = "Friction C3 (Viscous law)"  ; DIMENSION = "inverse_surfacic_power"; }
        else if (Ifric==2) { TITLE = "Friction C3 (Darmstad law)" ; DIMENSION = "inverse_of_pressure"; }
        else if (Ifric==3) { TITLE = "Friction C3 (Renard law)"   ; DIMENSION = "DIMENSIONLESS"; }
                 }  
      SCALAR(C4) {
        if (Ifric==1)      { TITLE = "Friction C4 (Viscous law)"  ; DIMENSION = "inverse_of_square_of_pressure"; }
        else if (Ifric==2) { TITLE = "Friction C4 (Darmstad law)" ; DIMENSION = "inverse_of_speed"; }
        else if (Ifric==3) { TITLE = "Friction C4 (Renard law)"   ; DIMENSION = "DIMENSIONLESS"; }
                 }  
      SCALAR(C5) {
        if (Ifric==1)      { TITLE = "Friction C5 (Viscous law)"  ; DIMENSION = "inverse_of_square_of_speed"; }
        else if (Ifric==2) { TITLE = "Friction C5 (Darmstad law)" ; DIMENSION = "DIMENSIONLESS"; }
        else if (Ifric==3) { TITLE = "Friction C5 (Renard law)"   ; DIMENSION = "velocity"; }
                 }
    }
    if(Ifric>1) {
      SCALAR(C6) {
       if (Ifric==2)      { TITLE = "Friction C6 (Darmstad law)" ; DIMENSION = "inverse_of_speed"; }
       else if (Ifric==3) { TITLE = "Friction C6 (Renard law)"   ; DIMENSION = "velocity"; }
                } 
    }
}

// File format
FORMAT(radioss90)
{
    HEADER("/INTER/LAGDT/TYPE7/%-d", _ID_);
    CARD("%-100s", TITLE);

    COMMENT("# grnd_IDs  surf_IDm      Istf                Igap   Multimp      Ibag      Idel");
    CARD("%10d%10d%10d%10s%10d%10d%10d%10d", secondaryentityids, mainentityids, Istf, _BLANK_, Igap, Multimp, Ibag, Idel7);

    COMMENT("#          Fscalegap              Gapmax");
    CARD("%20lg%20lg", GAPSCALE, GAPMAX);

    COMMENT("#              Stmin               Stmax");
    CARD("%20lg%20lg", STMIN, STMAX);

    COMMENT("#              Stfac                Fric              Gapmin              Tstart               Tstop");
    CARD("%20lg%20lg%20lg%20lg%20lg", TYPE7_SCALE, FRIC, GAP, TSTART, TSTOP);

    COMMENT("#      IBC                        Inacti                VISs                VISF              Bumult");
    CARD("%7s%1d%1d%1d%20s%10d%20lg%20lg%20lg", _BLANK_, Deactivate_X_BC, Deactivate_Y_BC, Deactivate_Z_BC, _BLANK_, INACTIV, STIFF_DC, FRIC_DC, SORT_FACT);

    COMMENT("#    Ifric    Ifiltr               Xfreq     Iform");
    CARD("%10d%10d%20lg%10d", Ifric, Ifiltr, Xfreq, IFORM);

    if(Ifric > 0)
    {
        COMMENT("#                 C1                  C2                  C3                  C4                  C5");
        CARD("%20lg%20lg%20lg%20lg%20lg", C1, C2, C3, C4, C5);
    }

    if(Ifric > 1)
    {
        COMMENT("#                 C6");
        CARD("%20lg", C6);
    }
}

FORMAT(radioss140)
{
    HEADER("/INTER/LAGDT/TYPE7/%-d", _ID_);
    CARD("%-100s", TITLE);

    COMMENT("# grnd_IDs  surf_IDm      Istf                Igap                Ibag      Idel");
    CARD("%10d%10d%10d%10s%10d%10s%10d%10d", secondaryentityids, mainentityids, Istf, _BLANK_, Igap, _BLANK_, Ibag, Idel7);

    COMMENT("#          Fscalegap              Gapmax");
    CARD("%20lg%20lg", GAPSCALE, GAPMAX);

    COMMENT("#              Stmin               Stmax");
    CARD("%20lg%20lg", STMIN, STMAX);

    COMMENT("#              Stfac                Fric              Gapmin              Tstart               Tstop");
    CARD("%20lg%20lg%20lg%20lg%20lg", TYPE7_SCALE, FRIC, GAP, TSTART, TSTOP);

    COMMENT("#      IBC                        Inacti                VISs                VISF              Bumult");
    CARD("%7s%1d%1d%1d%20s%10d%20lg%20lg%20lg", _BLANK_, Deactivate_X_BC, Deactivate_Y_BC, Deactivate_Z_BC, _BLANK_, INACTIV, STIFF_DC, FRIC_DC, SORT_FACT);

    COMMENT("#    Ifric    Ifiltr               Xfreq     Iform");
    CARD("%10d%10d%20lg%10d", Ifric, Ifiltr, Xfreq, IFORM);

    if(Ifric > 0)
    {
        COMMENT("#                 C1                  C2                  C3                  C4                  C5");
        CARD("%20lg%20lg%20lg%20lg%20lg", C1, C2, C3, C4, C5);
    }

    if(Ifric > 1)
    {
        COMMENT("#                 C6");
        CARD("%20lg", C6);
    }
}
