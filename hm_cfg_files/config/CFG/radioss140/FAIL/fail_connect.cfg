//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//FAIL : connection material 
//
ATTRIBUTES(COMMON){ 

    _HMCOMMENTSFLAG                 = VALUE(INT, "Write HM Comments");
    mat_id                          = VALUE(MAT,  "Material");
    
    
    Epsilon_maxN                    = VALUE( FLOAT, "Failure in normal direction");
    Exponent_N                      = VALUE( FLOAT, "Failure exponent parameter in normal direction");
    Alpha_N                         = VALUE( FLOAT, "Scale factor in normal direction");
    R_fct_ID_N                      = VALUE( FUNCT, "Failure scale factor in normal direction vs strain rate function identifier") ;
    Ifail                           = VALUE( INT,   "Flag for failure formulation");
    Ifail_so                        = VALUE( INT,   "Flag for solid failure model");
    ISYM                            = VALUE( INT,  "Rupture deactivation flag for compression") ;
    
    Epsilon_maxT                    = VALUE( FLOAT, "Failure relative displacement (elongation) in tangential plane");
    Exponent_T                      = VALUE( FLOAT, "Failure exponent parameter in tangential plane");
    Alpha_T                         = VALUE( FLOAT, "Scale factor in tangential plane");
    R_fct_ID_T                      = VALUE( FUNCT, "Failure scale factor in tangential plane vs strain rate function identifier") ;
    
    EI_max                          = VALUE( FLOAT, "Failure internal energy");
    EN_max                          = VALUE( FLOAT, "Failure internal energy in normal direction");
    ET_max                          = VALUE( FLOAT, "Failure internal energy in tangent direction");
    N_n                             = VALUE( FLOAT, "Energy exponent in normal direction");
    N_t                             = VALUE( FLOAT, "Energy exponent in tangent direction");
    
    T_max                           = VALUE( FLOAT, "Duration parameter for energy failure criteria");
    N_soft                          = VALUE( FLOAT, "Softening exponent for failure");
    
    ID_CARD_EXIST                   = VALUE(BOOL,"Give an Id");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    _HMCOMMENTSFLAG=-1;
}
GUI(COMMON){

    SCALAR (Epsilon_maxN)   {DIMENSION="l"; }
    SCALAR (Epsilon_maxT)   {DIMENSION="l"; }
    SCALAR (T_max)          {DIMENSION="t"; }
    SCALAR (EI_max)         {DIMENSION="energy"; }
    SCALAR (EN_max)         {DIMENSION="energy"; }
    SCALAR (ET_max)         {DIMENSION="energy"; }
}
/*
DEFINITIONS(COMMON) {
    SUPPORTING=(MAT);
}

DEFAULTS(COMMON) {

}

GUI(COMMON){
    DATA(MAT)   {SUBTYPES=(/MAT/CONNECT);}
    SCALAR (epsi_n_max)      {DIMENSION="l"; }
    SCALAR (EXP_N)          {DIMENSION="DIMENSIONLESS"; }
    SCALAR (ALPHA_N)    {DIMENSION="DIMENSIONLESS"; }
        FUNCTION(SR_N) {
                X_TITLE     = "Strain rate";      
                Y_TITLE     = "Normal elongation scale factor";
                X_DIMENSION = "DIMENSIONLESS"; 
                Y_DIMENSION = "DIMENSIONLESS";
        }
    SCALAR (EPS_T_MAX)      {DIMENSION="l"; }
    SCALAR (EXP_T)          {DIMENSION="DIMENSIONLESS"; }
    SCALAR (ALPHA_T)    {DIMENSION="DIMENSIONLESS"; }
        FUNCTION(SR_T) {
                X_TITLE     = "Strain rate";      
                Y_TITLE     = "Tangential elongation scale factor";
                X_DIMENSION = "DIMENSIONLESS"; 
                Y_DIMENSION = "DIMENSIONLESS";
        }
    SCALAR (EI_MAX)         {DIMENSION="lineic_energy"; }
    SCALAR (en_max)         {DIMENSION="lineic_energy"; }
    SCALAR (ET_MAX)         {DIMENSION="lineic_energy"; }
    SCALAR (NN)             {DIMENSION="DIMENSIONLESS"; }
    SCALAR (NT)             {DIMENSION="DIMENSIONLESS"; }
    SCALAR (DMAX)           {DIMENSION="t"; }
    SCALAR (DSOFT)          {DIMENSION="DIMENSIONLESS"; }
    SCALAR (AREA_SCALE)     {DIMENSION="DIMENSIONLESS"; }
    RADIO(IFAIL) {
        ADD(0, "0: unidirectional failure");
        ADD(1, "1: multi-directional failure");
    }
    RADIO(ISOLID) {
        ADD(1, "1: the solid element is deleted when one integration point reaches the failure criteria");
        ADD(2, "2: the solid element is failure when all integration points reach the failure criteria");
    }
        RADIO(ISYM)
        {
             ADD(0, "Same behavior in tension and compression") ;
             ADD(1, "Deactivation of failure in case of compression") ;
        }
  FLAG(ID_CARD_EXIST);
}

*/

FORMAT(radioss130) {
    HEADER("/FAIL/CONNECT/%d",mat_id);

    COMMENT("#       EPSILON_MAXN          EXPONENT_N             ALPHA_N R_FCT_IDN     IFAIL  IFAIL_SO      ISYM") ;
    CARD("%20lg%20lg%20lg%10d%10d%10d%10d",Epsilon_maxN,Exponent_N,Alpha_N,R_fct_ID_N,Ifail,Ifail_so,ISYM);
    COMMENT("#       EPSILON_MAXT          EXPONENT_T             ALPHA_T  R_FCT_ID_T") ;
    CARD("%20lg%20lg%20lg%10d",Epsilon_maxT,Exponent_T,Alpha_T,R_fct_ID_T);
    COMMENT("#             EI_MAX              EN_MAX              ET_MAX                 N_N                 N_T") ;
    CARD("%20lg%20lg%20lg%20lg%20lg",EI_max,EN_max,ET_max,N_n,N_t);   
    COMMENT("#              T_MAX              N_SOFT") ;
    CARD("%20lg%20lg",T_max,N_soft); 

    if (ID_CARD_EXIST==TRUE)
    {
        COMMENT("#  FAIL_ID") ;
    }
    FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);
}


FORMAT(radioss120) {
    HEADER("/FAIL/CONNECT/%d",mat_id);

    COMMENT("#       EPSILON_MAXN          EXPONENT_N             ALPHA_N R_FCT_IDN     IFAIL  IFAIL_SO") ;
    CARD("%20lg%20lg%20lg%10d%10d%10d",Epsilon_maxN,Exponent_N,Alpha_N,R_fct_ID_N,Ifail,Ifail_so);
    COMMENT("#       EPSILON_MAXT          EXPONENT_T             ALPHA_T R_FCT_ID_T") ;
    CARD("%20lg%20lg%20lg%10d",Epsilon_maxT,Exponent_T,Alpha_T,R_fct_ID_T);
    COMMENT("#             EI_MAX              EN_MAX              ET_MAX                 N_N                 N_T") ;
    CARD("%20lg%20lg%20lg%20lg%20lg",EI_max,EN_max,ET_max,N_n,N_t);    
    COMMENT("#              T_MAX              N_SOFT") ;
    CARD("%20lg%20lg",T_max,N_soft); 

}

FORMAT(radioss100) {
    HEADER("/FAIL/CONNECT/%d",mat_id);

    COMMENT("#       EPSILON_MAXN          EXPONENT_N             ALPHA_N R_FCT_IDN     IFAIL  ISOLID") ;
    CARD("%20lg%20lg%20lg%10d%10d%10d",Epsilon_maxN,Exponent_N,Alpha_N,R_fct_ID_N,Ifail,Ifail_so);
    COMMENT("#       EPSILON_MAXT          EXPONENT_T             ALPHA_T R_FCT_ID_T") ;
    CARD("%20lg%20lg%20lg%10d",Epsilon_maxT,Exponent_T,Alpha_T,R_fct_ID_T);
    COMMENT("#             EI_MAX") ;
    CARD("%20lg",EI_max);  

}

