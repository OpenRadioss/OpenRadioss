//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//FAIL : Strain failure model
//

ATTRIBUTES(COMMON){ 

    IO_FLAG                             = VALUE(INT, "Import/Export flag");
    _HMCOMMENTSFLAG                     = VALUE(INT, "Write HM Comments");
    mat_id                              = VALUE(MAT,  "Material");
    
    
    Ifail_sh                            = VALUE( INT,   "Shell failure flag");
    Ifail_so                            = VALUE( INT,   "Flag for solid failure model");
    P_thickfail                         = VALUE( FLOAT, "Percent of thickness failure limit");
    P_thinfail                          = VALUE( FLOAT, "Ratio of thickness reduction before failure");
    Ixfem                               = VALUE(INT,  "XFEM flag ");
    
    Dcrit                               = VALUE( FLOAT, "Critical accumulated damage value");
    D                                   = VALUE( FLOAT, "Damage accumulation parameter D");
    n                                   = VALUE( FLOAT, "Damage accumulation parameter n");
    Dadv                                = VALUE(FLOAT, "Criterion for the crack advancement") ;
    fct_IDd                             = VALUE( FUNCT, "Damage function identifier");
    
    table1_ID                           = VALUE(FUNCT,"Failure strain table");
    Xscale1                             = VALUE( FLOAT, "Scale factor for the first variable of table1");
    Xscale2                             = VALUE( FLOAT, "Scale factor for the second variable of table1");
    table2_ID                           = VALUE(FUNCT,"Instability strain table");
    Xscale3                             = VALUE( FLOAT, "Scale factor for the first variable of table2");
    Xscale4                             = VALUE( FLOAT, "Scale factor for the second variable of table2");
    
    fct_IDel                            = VALUE( FUNCT, "Element size factor function identifier");
    Fscale_el                           = VALUE( FLOAT, "Element size function scale factor");
    EI_ref                              = VALUE( FLOAT, "Reference element size");
    Inst_start                          = VALUE( FLOAT, "Instability strain");
    Is_Fading_Exponent_A_Curve          = VALUE(INT,"");
    Fad_exp                             = VALUE( FLOAT, "Fading exponent");
    Fading_Exponent_Curve               = VALUE(INT,"Fading exponent");
    
    fct_IDt                             = VALUE( FUNCT, "Temperature factor function identifier");
    FscaleT                             = VALUE( FLOAT, "Temperature function scale factor");
    
    ID_CARD_EXIST                       = VALUE(BOOL,"Give an Id");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    IO_FLAG=-1;
    _HMCOMMENTSFLAG=-1;
}
/*


DEFINITIONS(COMMON) {
    SUPPORTING=(MAT);
}
DEFAULTS(COMMON) {

}
*/
GUI(COMMON){
    /*
    DATA(MAT)   {SUBTYPES=(/MAT/COWPER,
                   /MAT/DAMA,
                   /MAT/ELASTOMER,
                   /MAT/HANSEL,
                   /MAT/HILL,
                   /MAT/HILL_TAB,
                   /MAT/HONEYCOMB,
                   /MAT/HYD_JCOOK,
                   /MAT/HYDPLA,
                   /MAT/LAW66,
                   /MAT/PLAS_BRIT,
                   /MAT/PLAS_JOHNS,
                   /MAT/PLAS_TAB,
                   /MAT/PLAS_T3,
                   /MAT/PLAS_ZERIL,
                   /MAT/STEINB,
                   /MAT/UGINE_ALZ,
                   /MAT/ZHAO,
                       /MAT/BARLAT2000);}
    RADIO(IFAIL_SH) {
        ADD(1, "1: Shell is deleted if damage criteria is satisfied in one integration point or layer");
        ADD(2, "2: Shell is deleted if damage criteria is satisfied in all shell layers");
        ADD(3, "3: Shell is deleted if damage criteria is satisfied in all layers");
    }
    RADIO(IFAIL_SO)
    {
         ADD(1,"Solid is deleted, if the damage criterion is satisfied in one integration point");
         ADD(2,"Deviatoric stress components are set to zero for the integration points where criteria is satisfied");
    }
    */
            SCALAR (P_thickfail)   {DIMENSION="DIMENSIONLESS"; }
         SCALAR (P_thinfail)    {DIMENSION="DIMENSIONLESS"; }
            SCALAR (Dadv)          {DIMENSION="DIMENSIONLESS"; }
            SCALAR (Dcrit)         {DIMENSION="DIMENSIONLESS"; }
            SCALAR (D)              {DIMENSION="DIMENSIONLESS"; }
            SCALAR (n)              {DIMENSION="DIMENSIONLESS"; }
            SCALAR (Xscale1)          {DIMENSION="DIMENSIONLESS"; }
            SCALAR (Xscale2)          {DIMENSION="f"; }
            SCALAR (Xscale3)          {DIMENSION="DIMENSIONLESS"; }
            SCALAR (Xscale4)          {DIMENSION="f"; }
            SCALAR (Fscale_el)     {DIMENSION="DIMENSIONLESS"; }
            SCALAR (EI_ref)        {DIMENSION="l"; }
            SCALAR (Inst_start)    {DIMENSION="DIMENSIONLESS"; }
            SCALAR (Fad_exp)       {DIMENSION="DIMENSIONLESS"; }
            SCALAR (FscaleT)       {DIMENSION="DIMENSIONLESS"; }
    
    /*
    SCALAR (P_THICKFAIL)    {DIMENSION="DIMENSIONLESS"; }

        if (IFAIL_SH>1)
        {
       SCALAR (P_THINFAIL)  {DIMENSION="DIMENSIONLESS"; }
        }
        
        RADIO(IXFEM) {
          ADD(0,"0: Without XFEM");
          ADD(1,"1: XFEM formulation ");
        }
    SCALAR (DCRIT)          {DIMENSION="DIMENSIONLESS"; }
    SCALAR (D)              {DIMENSION="DIMENSIONLESS"; }
    SCALAR (N)              {DIMENSION="DIMENSIONLESS"; }
        if (IXFEM==1)
        {
       SCALAR (DADV)                {DIMENSION="DIMENSIONLESS"; }
        }
        FUNCTION(FCT_ID) {
                X_TITLE     = "Damage";
                Y_TITLE     = "Scale factor";
                X_DIMENSION = "DIMENSIONLESS";
                Y_DIMENSION = "DIMENSIONLESS";
        }
        TABLE(TABLE_ID) {
                X_TITLE     = "Stress";
                Y_TITLE     = "Epsilon failure";
                X_DIMENSION="pressure";
                Y_DIMENSION = "DIMENSIONLESS";
        }
    SCALAR (XSCALE1)                {DIMENSION="DIMENSIONLESS"; }
    SCALAR (XSCALE2)                {DIMENSION="DIMENSIONLESS"; }

        TABLE(TABLE2_ID) {
                X_TITLE     = "Stress";
                Y_TITLE     = "Strain instability";
                X_DIMENSION="pressure";
                Y_DIMENSION = "DIMENSIONLESS";
        }
    SCALAR (XSCALE3)                {DIMENSION="DIMENSIONLESS"; }
    SCALAR (XSCALE4)                {DIMENSION="DIMENSIONLESS"; }

        FUNCTION(FCT_ID_EL) {
                X_TITLE     = "Element size";
                Y_TITLE     = "Scale factor";
                X_DIMENSION="l";
                Y_DIMENSION = "DIMENSIONLESS";
        }
    SCALAR (FSCALE_EL)          {DIMENSION="DIMENSIONLESS"; }
    SCALAR (EI_REF)             {DIMENSION="l"; }
    SCALAR (INST_START)          {DIMENSION="DIMENSIONLESS"; }
    SCALAR (FAD_EXP)          {DIMENSION="DIMENSIONLESS"; }
    
        FUNCTION(FCT_ID_T) {
                X_TITLE     = "Temperature factor";
                Y_TITLE     = "Scale factor";
                X_DIMENSION="k";
                Y_DIMENSION = "DIMENSIONLESS";
        }
    SCALAR (FSCALE_T)           {DIMENSION="DIMENSIONLESS"; }

  FLAG(ID_CARD_EXIST);
  */
}



FORMAT(radioss140) { 

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    HEADER("/FAIL/TAB1/%d",mat_id);

    COMMENT("# IFAIL_SH  IFAIL_SO                             P_THICKFAIL          P_THINFAIL               IXFEM") ;
    CARD("%10d%10d                    %20lg%20lg          %10d",Ifail_sh,Ifail_so,P_thickfail,P_thinfail,Ixfem);

    COMMENT("#              DCRIT                   D                   N                DADV   FCT_IDD") ;
    CARD("%20lg%20lg%20lg%20lg%10d",Dcrit,D,n,Dadv,fct_IDd);

    COMMENT("#TABLE1_ID             XSCALE1             XSCALE2 TABLE2_ID             XSCALE3             XSCALE4") ;
    CARD("%10d%20lg%20lg%10d%20lg%20lg",table1_ID,Xscale1,Xscale2,table2_ID,Xscale3,Xscale4);

    
    if(IO_FLAG == 1)
    {
        COMMENT("# FCT_IDEL           FSCALE_EL              EI_REF          INST_START             FAD_EXP") ;
        CARD("%10d%20lg%20lg%20lg%20lg",fct_IDel,Fscale_el,EI_ref,Inst_start,Fad_exp);
        
        if(Fad_exp <0)
        {
            ASSIGN(Fading_Exponent_Curve, FAD_EXP, IMPORT);
            ASSIGN(Is_Fading_Exponent_A_Curve,TRUE, IMPORT);
            ASSIGN(Fad_exp,0, IMPORT);
        }
    }
    
    if(IO_FLAG == 2)
    {
        if(Is_Fading_Exponent_A_Curve== FALSE)
        {
            COMMENT("# FCT_IDEL           FSCALE_EL              EI_REF          INST_START             FAD_EXP") ;
            CARD("%10d%20lg%20lg%20lg%20lg",fct_IDel,Fscale_el,EI_ref,Inst_start,Fad_exp);
        }
        else
        {
            COMMENT("# FCT_IDEL           FSCALE_EL              EI_REF          INST_START             FAD_EXP") ;
            CARD("%10d%20lg%20lg%20lg%20lg",fct_IDel,Fscale_el,EI_ref,Inst_start,Fading_Exponent_Curve);
        }
    }
    
    COMMENT("#  FCT_IDT             FSCALET") ;
    CARD("%10d%20lg",fct_IDt,FscaleT);  

    
    if (ID_CARD_EXIST==TRUE)
    {
     COMMENT("#  FAIL_ID") ;
    }
    FREE_CARD(ID_CARD_EXIST,"%10d",_ID_);
}

FORMAT(radioss130) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    HEADER("/FAIL/TAB1/%d",mat_id);
    
    COMMENT("# IFAIL_SH  IFAIL_SO                             P_THICKFAIL                                   IXFEM") ;
    CARD("%10d%10d                    %20lg                              %10d",Ifail_sh,Ifail_so,P_thickfail,Ixfem);

    COMMENT("#              DCRIT                   D                   N                DADV   FCT_IDD") ;
    CARD("%20lg%20lg%20lg%20lg%10d",Dcrit,D,n,Dadv,fct_IDd);

    COMMENT("#TABLE1_ID             XSCALE1             XSCALE2") ;
    CARD("%10d%20lg%20lg",table1_ID,Xscale1,Xscale2);

    COMMENT("# FCT_IDEL           FSCALE_EL              EI_REF") ;
    CARD("%10d%20lg%20lg",fct_IDel,Fscale_el,EI_ref);

    COMMENT("#  FCT_IDT             FSCALET") ;
    CARD("%10d%20lg",fct_IDt,FscaleT);  

    if (ID_CARD_EXIST==TRUE)
    {
     COMMENT("#  FAIL_ID") ;
    }
    FREE_CARD(ID_CARD_EXIST,"%10d",_ID_);
}
