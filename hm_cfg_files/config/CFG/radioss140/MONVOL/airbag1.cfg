//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// KEYWORD : /MONVOL/AIRBAG1 
// HM TYPE : AIRBAGS
//

ATTRIBUTES(COMMON)
{   
  title = VALUE(STRING,"Title String","TITLE"); 
  // Support
  surf                  = VALUE(SETS,   "External surface identifier","surf_ID") { SUBTYPES = (/SETS/SURF) ; }
  // surf_type             = VALUE(STRING, "Surface type");
  matid                 = VALUE(MAT,    "Material identifier for initial gas","mat_ID");
  hconv                 = VALUE(FLOAT,  "Heat transfer coefficient","Hconv");

  // X-Scale factors
  scale_t               = VALUE(FLOAT,  "Abscissa scale factor for time based functions","Ascalet");
  scale_p               = VALUE(FLOAT,  "Abscissa scale factor for pressure based functions","Ascalep");
  scale_s               = VALUE(FLOAT,  "Abscissa scale factor for area based functions","Ascales");
  scale_a               = VALUE(FLOAT,  "Abscissa scale factor for angle based functions","Ascalea");
  scale_d               = VALUE(FLOAT,  "Abscissa scale factor for distance based functions","Ascaled");
  
  // Scalars
  mu                    = VALUE(FLOAT,  "Volumetric viscosity","mu");
  pext                  = VALUE(FLOAT,  "External pressure","Pext");
  t_initial             = VALUE(FLOAT,  "Initial temperature","T0");
  iequil                = VALUE(INT,    "Initial thermodynamic equilibrium flag","Iequil");
  ittf                  = VALUE(INT,    "Time shift flag","Ittf");

  // Injectors 
  nb_jet                = SIZE("Number of injectors"); // Njet
  injectors             = ARRAY[nb_jet](SUBOBJECT,  "Injector property identifier") {SUBTYPES=(/SUBOBJECT/AIRBAGINJECTOR_AIRBAG1);}
  
  //Vent Holes
  nb_vent               = SIZE("Number of vent holes"); // Nvent
  ventholes             = ARRAY[nb_vent](SUBOBJECT,  "Vent holes area surface identifier") {SUBTYPES=(/SUBOBJECT/AIRBAGVENTHOLE_AIRBAG1);}

  // Porous Surfaces
  nb_porous             = SIZE("Number of porous surfaces");//Nporsurf
  surf_ps               = ARRAY[nb_porous](SETS, "Porous surface identifier","surf_IDps")  { SUBTYPES = (/SETS/SURF_IDPOOL);}
  // surf_ps_cs            = ARRAY[nb_porous](SETS, "Porous Fabric Surface")  { SUBTYPES = (/SETS/SURF_IDPOOL);}
  // surf_ps_type          = ARRAY[nb_porous](STRING,  "Fabric surface type");
  iform_ps              = ARRAY[nb_porous](INT,     "Porosity formulation","Iformps");
  title_ps              = ARRAY[nb_porous](STRING,  "Porous Surface title","surface_title");
  iblockage_ps          = ARRAY[nb_porous](INT,     "Block leakage flag","Iblockage");
  tstart_ps             = ARRAY[nb_porous](FLOAT,   "Start time for porosity","Tstart");
  tstop_ps              = ARRAY[nb_porous](FLOAT,   "End time for porosity","Tstop");	
  dpdef_ps              = ARRAY[nb_porous](FLOAT,   "Pressure difference to open vent hole membrane","dPdef");
  dtpdef_ps             = ARRAY[nb_porous](FLOAT,   "Minimum duration pressure exceeds Pdef to open vent hole membrane","dTpdef");
  idtpdef_ps            = ARRAY[nb_porous](INT,     "Time delay flag when dPdef is reached","IdtPdef");
  cps                   = ARRAY[nb_porous](FLOAT,   "Scale factor on leakage area","Cps");
  area_ps               = ARRAY[nb_porous](FLOAT,   "Leakage area","Areaps");
  fct_cps               = ARRAY[nb_porous](FUNCT,   "Function defining Cps versus time","fct_IDcps");	
  fct_aps               = ARRAY[nb_porous](FUNCT,   "Function defining Areaps versus time","fct_IDaps");
  fscale_cps            = ARRAY[nb_porous](FLOAT,   "Scale factor for FCT_ID_CPS","Fscalecps");
  fscale_aps            = ARRAY[nb_porous](FLOAT,   "Scale factor for FCT_ID_AREAPS","Fscaleaps");    
  fct_v                 = ARRAY[nb_porous](FUNCT,   "Outflow velocity function identifier","fct_IDvps");    
  fscale_v              = ARRAY[nb_porous](FLOAT,   "Scale factor for FCT_IDV","Fscalevps");

  KEYWORD_STR           = VALUE(STRING,"Keyword");
}


SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR         = -1;
}
CHECK(COMMON)
{
  nb_jet     >= 0;
  nb_jet     <= 20;
  nb_vent    >= 0;
  nb_vent    <= 20;
  nb_porous  >= 0;
  nb_porous  <= 15;
}

DEFAULTS(COMMON)
{
  nb_jet       = 0;
  nb_vent      = 0;
  nb_porous    = 0;
  mu           = 0.01;
  scale_t      = 1.0;
  scale_p      = 1.0;
  scale_s      = 1.0;
  scale_a      = 1.0;
  scale_d      = 1.0;
  t_initial    = 295;
  
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR,"/MONVOL/AIRBAG1");
    SCALAR(hconv) {DIMENSION="thermal_convectivity";}
    SCALAR(scale_t) {DIMENSION="t";}
    SCALAR(scale_p) {DIMENSION="pressure";}
    SCALAR(scale_s) {DIMENSION="area";}
    SCALAR(scale_a) {DIMENSION="a";}
    SCALAR(scale_d) {DIMENSION="l";}
    DATA(matid);
    SCALAR(mu) {DIMENSION = "DIMENSIONLESS";}
    SCALAR(pext) {DIMENSION="pressure";}
    SCALAR(t_initial) {DIMENSION = "k";}

    RADIO(iequil)
    {
        ADD(0,"The mass of gas initially filling the airbag is determined with respect to the volume at time zero");
        ADD(1,"The mass of gas initially filling the airbag is determined with respect to the volume at beginning of jetting");
    }
    RADIO(ittf)
    {
        ADD(0,"No Shift, Tstart and Tstop are not active");
        ADD(3,"All relative options are shifted by Tinj (Tinj defined as the time of the first injector to be activated by the sensor"); 
    }
    SIZE(nb_jet);
    ARRAY(nb_jet,"")
    {
        SUBOBJECT(injectors) {SUBTYPES = (/SUBOBJECT/AIRBAGINJECTOR_AIRBAG1);}
    }
    SIZE(nb_vent);
    ARRAY(nb_vent,"")
    {
        SUBOBJECT(ventholes) {SUBTYPES = (/SUBOBJECT/AIRBAGVENTHOLE_AIRBAG1);}
    }
    SIZE(nb_porous);
    if (nb_porous > 0)
    {
        DATA(surf_ps);
        RADIO(iform_ps)
        {
            ADD(0, "Bernoulli (Wang & Nefske) (no dependence on fabric material)");
            ADD(1, "Bernoulli (Wang & Nefske)");
            ADD(2, "Chemkin");
            ADD(3, "Graefe");
        }
        RADIO(iblockage_ps)
        {
            ADD(0, "No");
            ADD(1, "Yes");
        }
        SCALAR(title_ps);
        SCALAR(tstart_ps) {DIMENSION="t";}
        SCALAR(tstop_ps) {DIMENSION="t";}
        SCALAR(dpdef_ps) {DIMENSION="pressure";}
        SCALAR(dtpdef_ps) {DIMENSION="t";}
        RADIO(idtpdef_ps)
        {
            ADD(0, "Pressure should be over dtPdef during a dtPdef cumulative time to activate Porosity");
            ADD(1, "Porosity is activated dtPdef after dtPdef is reached");
        }
        //if (ITYPE == 0)
        //{
        SCALAR(cps) {DIMENSION="DIMENSIONLESS";}
        SCALAR(area_ps) {DIMENSION="area";}
        DATA(fct_cps); 
        DATA(fct_aps);
        SCALAR(fscale_cps) {DIMENSION="DIMENSIONLESS";}
        SCALAR(fscale_aps) {DIMENSION="area";}
        //}
        //if (ITYPE == 2)
        //{
        DATA(fct_v);
        SCALAR(fscale_v) {DIMENSION="velocity";}
        //}
    }
}


FORMAT(radioss140) 
{
  HEADER("/MONVOL/AIRBAG1/%d",_ID_);
  CARD("%-100s",title);
  COMMENT("#surf_IDex                         Hconv");
  CARD("%10d          %20lg",surf,hconv);
  //
  COMMENT("#            AscaleT             AscaleP             AscaleS             AscaleA             AscaleD");
  CARD("%20lg%20lg%20lg%20lg%20lg",scale_t,scale_p,scale_s,scale_a,scale_d);
  //
  COMMENT("#   mat_ID                            Mu                Pext                  T0     Iequi      Ittf");
  CARD("%10d          %20lg%20lg%20lg%10d%10d",matid,mu,pext,t_initial,iequil,ittf);
    
  
  COMMENT("#     Njet");
  CARD("%10d",nb_jet);
  if(nb_jet > 0)
  {
     SUBOBJECTS(injectors,/SUBOBJECT/AIRBAGINJECTOR_AIRBAG1);
  }

  COMMENT("#    Nvent  Nporsurf");
  CARD("%10d%10d",nb_vent,nb_porous);
  if(nb_vent > 0)
  {
    SUBOBJECTS(ventholes,/SUBOBJECT/AIRBAGVENTHOLE_AIRBAG1);
  }
  

  CARD_LIST(nb_porous) 
  {
    COMMENT("#surf_IDps   Iformps Iblockage                                                         surface_title");
    CARD("%10d%10d%10d                                                  %20s",surf_ps,iform_ps,iblockage_ps,title_ps);
    // 
    COMMENT("#             Tstart               Tstop               dPdef              dtPdef             IdtPdef");
    CARD("%20lg%20lg%20lg%20lg          %10d",tstart_ps,tstop_ps,dpdef_ps,dtpdef_ps,idtpdef_ps);
    //
    if (iform_ps==0)
    {
      COMMENT("#                Cps              Areaps fct_IDcps fct_IDaps           Fscalecps           Fscaleaps");
      CARD("%20lg%20lg%10d%10d%20lg%20lg",cps,area_ps,fct_cps,fct_aps,fscale_cps,fscale_aps);
    }    
    else if (iform_ps==2) 
    {
      COMMENT("#fct_IDvps                     Fscalevps");
      CARD("%10d          %20lg",fct_v,fscale_v);
    }
  }
}

FORMAT(radioss120) 
{
  HEADER("/MONVOL/AIRBAG1/%d",_ID_);
  CARD("%-100s",title);
  COMMENT("#surf_IDex                         Hconv");
  CARD("%10d          %20lg",surf,hconv);
  //
  COMMENT("#            AscaleT             AscaleP             AscaleS             AscaleA             AscaleD");
  CARD("%20lg%20lg%20lg%20lg%20lg",scale_t,scale_p,scale_s,scale_a,scale_d);
  //
  COMMENT("#   mat_ID                            Mu                Pext                  T0     Iequi      Ittf");
  CARD("%10d          %20lg%20lg%20lg%10d%10d",matid,mu,pext,t_initial,iequil,ittf);
    
  
  COMMENT("#     Njet");
  CARD("%10d",nb_jet);
  if(nb_jet > 0)
  {
     SUBOBJECTS(injectors,/SUBOBJECT/AIRBAGINJECTOR_AIRBAG1);
  }

  COMMENT("#    Nvent  Nporsurf");
  CARD("%10d%10d",nb_vent,nb_porous);
  if(nb_vent > 0)
  {
    SUBOBJECTS(ventholes,/SUBOBJECT/AIRBAGVENTHOLE_AIRBAG1);
  }
  

  CARD_LIST(nb_porous) 
  {
    COMMENT("#surf_IDps   Iformps Iblockage                                                         surface_title");
    CARD("%10d%10d%10d                                                  %20s",surf_ps,iform_ps,iblockage_ps,title_ps);
    // 
    COMMENT("#             Tstart               Tstop               dPdef              dtPdef             IdtPdef");
    CARD("%20lg%20lg%20lg%20lg          %10d",tstart_ps,tstop_ps,dpdef_ps,dtpdef_ps,idtpdef_ps);
    //
    if (iform_ps==0)
    {
      COMMENT("#                Cps              Areaps fct_IDcps fct_IDaps           Fscalecps           Fscaleaps");
      CARD("%20lg%20lg%10d%10d%20lg%20lg",cps,area_ps,fct_cps,fct_aps,fscale_cps,fscale_aps);
    }    
    else if (iform_ps==2) 
    {
      COMMENT("#fct_IDvps                     Fscalevps");
      CARD("%10d          %20lg",fct_v,fscale_v);
    }
  }
}

FORMAT(radioss110) 
{
  HEADER("/MONVOL/AIRBAG1/%d",_ID_);
  CARD("%-100s",title);
  COMMENT("#surf_IDex");
  CARD("%10d",surf);
  //
  COMMENT("#            AscaleT             AscaleP             AscaleS             AscaleA             AscaleD");
  CARD("%20lg%20lg%20lg%20lg%20lg",scale_t,scale_p,scale_s,scale_a,scale_d);
  //
  COMMENT("#   mat_ID                            Mu                Pext                  T0     Iequi      Ittf");
  CARD("%10d          %20lg%20lg%20lg%10d%10d",matid,mu,pext,t_initial,iequil,ittf);
    
  
  COMMENT("#     Njet");
  CARD("%10d",nb_jet);
  if(nb_jet > 0)
  {
     SUBOBJECTS(injectors,/SUBOBJECT/AIRBAGINJECTOR_AIRBAG1);
  }

  COMMENT("#    Nvent  Nporsurf");
  CARD("%10d%10d",nb_vent,nb_porous);
  if(nb_vent > 0)
  {
    SUBOBJECTS(ventholes,/SUBOBJECT/AIRBAGVENTHOLE_AIRBAG1);
  }

  CARD_LIST(nb_porous) 
  {
    COMMENT("#surf_IDps   Iformps Iblockage                                                         surface_title");
    CARD("%10d%10d%10d                                                  %20s",surf_ps,iform_ps,iblockage_ps,title_ps);
    // 
    COMMENT("#             Tstart               Tstop               dPdef              dtPdef             IdtPdef");
    CARD("%20lg%20lg%20lg%20lg          %10d",tstart_ps,tstop_ps,dpdef_ps,dtpdef_ps,idtpdef_ps);
    //
    if (iform_ps==0)
    {
      COMMENT("#                Cps              Areaps fct_IDcps fct_IDaps           Fscalecps           Fscaleaps");
      CARD("%20lg%20lg%10d%10d%20lg%20lg",cps,area_ps,fct_cps,fct_aps,fscale_cps,fscale_aps);
    }    
    else if (iform_ps==2) 
    {
      COMMENT("#fct_IDvps                     Fscalevps");
      CARD("%10d          %20lg",fct_v,fscale_v);
    }
  }

}
