//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- monvol_commu1.cfg ---

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES
    entityiddisplayed                       = VALUE(SETS,                    "External surface identifier")  { SUBTYPES = (/SETS/SURF_IDPOOL); }
    HEAT_T0                                 = VALUE(FLOAT,                   "Heat transfer coefficient");

    Scal_T                                  = VALUE(FLOAT,                   "Abscissa scale factor for time based functions");
    Scal_P                                  = VALUE(FLOAT,                   "Abscissa scale factor for pressure based functions");
    Scal_S                                  = VALUE(FLOAT,                   "Abscissa scale factor for area based functions");
    Scal_A                                  = VALUE(FLOAT,                   "Abscissa scale factor for angle based functions");
    Scal_D                                  = VALUE(FLOAT,                   "Abscissa scale factor for distance based functions");

    MAT1                                    = VALUE(MATERIAL,                "Material identifier for initial gas");
    MU                                      = VALUE(FLOAT,                   "Volumetric viscosity");
    PEXT                                    = VALUE(FLOAT,                   "External pressure");
    T_Initial                               = VALUE(FLOAT,                   "Initial temperature");
    Iequil                                  = VALUE(INT,                     "Initial thermodynamic equilibrium flag");
    I_ttf                                   = VALUE(INT,                     "Time shift flag");

    //Number of injectors
    ABG_Njet                                = SIZE(                          "Number of injectors");

    //Njet injector
    injector_IDs                            = ARRAY[ABG_Njet](PROP,          "Injector property identifier");
    ABG_Isensor                             = ARRAY[ABG_Njet](SENSOR,        "Sensor identifier");
    ABG_Ijet                                = ARRAY[ABG_Njet](INT,           "Jetting flag");
    ABG_N1                                  = ARRAY[ABG_Njet](NODE,          "Node identifiers N1 for jet shape definition");
    ABG_N2                                  = ARRAY[ABG_Njet](NODE,          "Node identifiers N2 for jet shape definition");
    ABG_N3                                  = ARRAY[ABG_Njet](NODE,          "Node identifiers N3 for jet shape definition");

    //Ijet = 1
    ABG_IPt                                 = ARRAY[ABG_Njet](FUNCT,         "Identifier of the function number defining DeltaPt");
    ABG_IPtheta                             = ARRAY[ABG_Njet](FUNCT,         "Identifier of the function number defining DeltaP(Theta)");
    ABG_IPdel                               = ARRAY[ABG_Njet](FUNCT,         "Identifier of the function number defining DeltaP(Gamma)");
    Fp1                                     = ARRAY[ABG_Njet](FLOAT,         "Scale factor for fct_IDPt");
    Fp2                                     = ARRAY[ABG_Njet](FLOAT,         "Scale factor for fct_IDP Theta");
    Fp3                                     = ARRAY[ABG_Njet](FLOAT,         "Scale factor for fct_IDP Gamma");

    //Number of vent holes and Number of porsurf porous fabric surfaces
    ABG_Nvent                               = SIZE(                          "Number of vent holes");
    ABG_Nporsurf                            = SIZE(                          "Number of pourus surfaces");

    //Vent hole
    SVENT_SETSURFID                         = ARRAY[ABG_Nvent](SETS,         "Injector property identifier")  { SUBTYPES = (/SETS/SURF_IDPOOL); }
    Itvent                                  = ARRAY[ABG_Nvent](INT,          "Injector property identifier");
    ABG_Avent                               = ARRAY[ABG_Nvent](FLOAT,        "Scale factor on vent hole area or vent hole area");
    ABG_Bvent                               = ARRAY[ABG_Nvent](FLOAT,        "Scale factor on impacted vent hole area or is reset to 0 for vent hole area");
    KEYWORD1                                = ARRAY[ABG_Nvent](STRING,       "Vent hole title");

    Tstart_arr_X                            = ARRAY[ABG_Nvent](FLOAT,        "Start time for venting");
    Tstop_arr_X                             = ARRAY[ABG_Nvent](FLOAT,        "Stop time for venting");
    ABG_dPdef                               = ARRAY[ABG_Nvent](FLOAT,        "Pressure difference to open vent hole membrane");
    ABG_dtPdef                              = ARRAY[ABG_Nvent](FLOAT,        "Minimum duration pressure exceeds Pdef to open vent hole");
    I_dtPdef_arr                            = ARRAY[ABG_Nvent](INT,          "Time delay flag when DeltaPCdef is reached");

    ABG_Iport                               = ARRAY[ABG_Nvent](FUNCT,        "Porosity vs time function identifier");
    ABG_Iporp                               = ARRAY[ABG_Nvent](FUNCT,        "Porosity vs pressure function identifier");
    ABG_IporA                               = ARRAY[ABG_Nvent](FUNCT,        "Porosity vs area function identifier");
    Fport                                   = ARRAY[ABG_Nvent](FLOAT,        "Scale factor for fct_IDt");
    Fporp                                   = ARRAY[ABG_Nvent](FLOAT,        "Scale factor for fct_IDP");
    FporA                                   = ARRAY[ABG_Nvent](FLOAT,        "Scale factor for fct_IDA");

    ABG_Iport1                              = ARRAY[ABG_Nvent](FUNCT,        "Porosity vs time function identifier");
    ABG_Iporp1                              = ARRAY[ABG_Nvent](FUNCT,        "Porosity vs pressure function identifier");
    ABG_IporA1                              = ARRAY[ABG_Nvent](FUNCT,        "Porosity vs impacted surface function identifier");
    Fport1                                  = ARRAY[ABG_Nvent](FLOAT,        "Scale factor for fct_IDt'");
    Fporp1                                  = ARRAY[ABG_Nvent](FLOAT,        "Scale factor for fct_IDP'");
    FporA1                                  = ARRAY[ABG_Nvent](FLOAT,        "Scale factor for fct_IDA'");

    //Iform = 2
    ABG_Iv                                  = ARRAY[ABG_Nvent](FUNCT,     "Outflow velocity function identifier, Chemkin model");
    BB1                                     = ARRAY[ABG_Nvent](FLOAT,     "Scale factor on fct_IDv");

    //Porous surface
    S1_SETSURFID                            = ARRAY[ABG_Nporsurf](SETS,      "Porous surface identifier")  { SUBTYPES = (/SETS/SURF_IDPOOL); }
    ITYPE                                   = ARRAY[ABG_Nporsurf](INT,       "Porosity formulation");
    Iblockage                               = ARRAY[ABG_Nporsurf](INT,       "Block leakage flag");
    KEYWORD2                                = ARRAY[ABG_Nporsurf](STRING,    "Porous surface title");

    Tstart_arr_Y                            = ARRAY[ABG_Nporsurf](FLOAT,     "Start time for venting");
    Tstop_arr_Y                             = ARRAY[ABG_Nporsurf](FLOAT,     "Stop time for venting");
    ABG_dPdef_ps                            = ARRAY[ABG_Nporsurf](FLOAT,     "Pressure difference to open vent hole membrane");
    ABG_dtPdef_ps                           = ARRAY[ABG_Nporsurf](FLOAT,     "Minimum duration pressure exceeds Pdef to open vent hole");
    I_dtPdef_arr_ps                         = ARRAY[ABG_Nporsurf](INT,       "Time delay flag when DeltaPdef is reached");

    //Iformps = 0
    CC1                                     = ARRAY[ABG_Nporsurf](FLOAT,     "Scale factor on leakage area");
    AREA_IP                                 = ARRAY[ABG_Nporsurf](FLOAT,     "Leakage area");
    ABG_fct_cps                             = ARRAY[ABG_Nporsurf](FUNCT,     "Function identifier defining Cps(t)");
    ABG_fct_aps                             = ARRAY[ABG_Nporsurf](FUNCT,     "Function identifier defining Areaps(P-Pext)");
    CM1                                     = ARRAY[ABG_Nporsurf](FLOAT,     "Scale factor for fct_IDcps");
    K_A1                                    = ARRAY[ABG_Nporsurf](FLOAT,     "Scale factor for fct_IDaps");

    //Iformps = 2
    ABG_fct_v                               = ARRAY[ABG_Nporsurf](FUNCT,     "Outflow velocity function identifier, Chemkin model");
    BB10                                    = ARRAY[ABG_Nporsurf](FLOAT,     "Scale factor on fct_IDv");

    //Number of communicating airbags
    NBAG                                    = SIZE(                          "Number of communicating airbags");

    //NBAG communicating airbags
    ABG_BAG_ID                              = ARRAY[NBAG](CONTROLVOL,        "Airbag identifier");
    ABG_SURF_ID                             = ARRAY[NBAG](SETS,              "Communicating surface identifier")  { SUBTYPES = (/SETS/SURF_IDPOOL); }
    ABG_DPDIFF                              = ARRAY[NBAG](FLOAT,             "Pressure difference to open communication surface membrane");
    ABG_ACOM                                = ARRAY[NBAG](FLOAT,             "Communicating surface or Scale factor on surface");
    ABG_TCOM                                = ARRAY[NBAG](FLOAT,             "Start time for communication");
    ABG_dTPdefCommu                         = ARRAY[NBAG](FLOAT,             "Minimum duration pressure difference exceeds DeltaPCdef to open communication surface membrane");

    ABG_fct_ID_CT                           = ARRAY[NBAG](FUNCT,             "Communicating surface vs time function identifier");
    ABG_fct_ID_CP                           = ARRAY[NBAG](FUNCT,             "Communicating surface vs relative pressure function identifier");
    ABG_Fscale_CT                           = ARRAY[NBAG](FLOAT,             "Scale factor for fct_IDCt");
    ABG_Fscale_CP                           = ARRAY[NBAG](FLOAT,             "Scale factor for fct_IDCP");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING,                  "Solver Keyword");

    TITLE                                   = VALUE(STRING,                  "Monitored volume title");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES
    HEAT_T0                                 = 4339;

    Scal_T                                  = 4103;
    Scal_P                                  = 4104;
    Scal_S                                  = 4105;
    Scal_A                                  = 4106;
    Scal_D                                  = 4107;

    MAT1                                    = 5277;
    MU                                      = 8143;
    PEXT                                    = 8144;
    T_Initial                               = 4113;
    Iequil                                  = 5398;
    I_ttf                                   = 4759;

    //Number of injectors
    ABG_Njet                                = 969;

    //Njet injector
    injector_IDs                            = 4681;
    ABG_Isensor                             = 920;
    ABG_Ijet                                = 921;
    ABG_N1                                  = 922;
    ABG_N2                                  = 923;
    ABG_N3                                  = 924;

    //Ijet = 1
    ABG_IPt                                 = 925;
    ABG_IPtheta                             = 926;
    ABG_IPdel                               = 927;
    Fp1                                     = 4114;
    Fp2                                     = 4115;
    Fp3                                     = 4116;

    //Number of vent holes and Number of porsurf porous fabric surfaces
    ABG_Nvent                               = 928;
    ABG_Nporsurf                            = 764;

    //Vent hole
    SVENT_SETSURFID                         = 4682;
    Itvent                                  = 4499;
    ABG_Avent                               = 930;
    ABG_Bvent                               = 931;
    KEYWORD1                                = 549;

    Tstart_arr_X                            = 4635;
    Tstop_arr_X                             = 4636;
    ABG_dPdef                               = 933;
    ABG_dtPdef                              = 934;
    I_dtPdef_arr                            = 4760;

    ABG_Iport                               = 935;
    ABG_Iporp                               = 936;
    ABG_IporA                               = 937;
    Fport                                   = 4110;
    Fporp                                   = 4111;
    FporA                                   = 4112;

    ABG_Iport1                              = 938;
    ABG_Iporp1                              = 939;
    ABG_IporA1                              = 940;
    Fport1                                  = 4119;
    Fporp1                                  = 4120;
    FporA1                                  = 4121;

    //Iform = 2
    ABG_Iv                                  = 943;
    BB1                                     = 115;

    //Porous surface
    S1_SETSURFID                            = 4819;
    ITYPE                                   = 599;
    Iblockage                               = 765;
    KEYWORD2                                = 550;

    Tstart_arr_Y                            = 4637;
    Tstop_arr_Y                             = 4638;
    ABG_dPdef_ps                            = 767;
    ABG_dtPdef_ps                           = 768;
    I_dtPdef_arr_ps                         = 766;

    //Iformps = 0
    CC1                                     = 121;
    AREA_IP                                 = 4189;
    ABG_fct_cps                             = 769;
    ABG_fct_aps                             = 770;
    CM1                                     = 142;
    K_A1                                    = 151;

    //Iformps = 2
    ABG_fct_v                               = 771;
    BB10                                    = 185;

    //Number of communicating airbags
    NBAG                                    = 8164;

    //NBAG communicating airbags
    ABG_BAG_ID                              = 786;
    ABG_SURF_ID                             = 787;
    ABG_DPDIFF                              = 790;
    ABG_ACOM                                = 791;
    ABG_TCOM                                = 792;
    ABG_dTPdefCommu                         = 793;

    ABG_fct_ID_CT                           = 788;
    ABG_fct_ID_CP                           = 789;
    ABG_Fscale_CT                           = 794;
    ABG_Fscale_CP                           = 795;

    //HM INTERNAL
    KEYWORD_STR                             = 9000;

    TITLE                                   = -1;
}

CHECK(COMMON)
{
    NBAG                                    > 0;
    NBAG                                    <= 20;
}

DEFAULTS(COMMON)
{
    Scal_T                                  = 1.0;
    Scal_P                                  = 1.0;
    Scal_S                                  = 1.0;
    Scal_A                                  = 1.0;
    Scal_D                                  = 1.0;
    MU                                      = 0.01;
    T_Initial                               = 295.0;
    ABG_Njet                                = 0;
    Fp1                                     = 1.0;
    Fp2                                     = 1.0;
    Fp3                                     = 1.0;
    ABG_Avent                               = 1.0;
    ABG_Bvent                               = 0.0;
    Tstart_arr_X                            = 0.0;
    Tstart_arr_Y                            = 0.0;
    Tstop_arr_X                             = 1E+30;
    Tstop_arr_Y                             = 1E+30;
    ABG_dPdef                               = 0.0;
    ABG_dtPdef                              = 0.0;
    Fport                                   = 1.0;
    Fport1                                  = 1.0;
    Fporp                                   = 1.0;
    Fporp1                                  = 1.0;
    FporA                                   = 1.0;
    FporA1                                  = 1.0;
    BB10                                    = 1.0;
    ABG_ACOM                                = 1.0;
    ABG_Fscale_CT                           = 1.0;
    ABG_Fscale_CP                           = 1.0;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "/MONVOL/COMMU1/");

    DATA(entityiddisplayed, "surf_IDex");

    SCALAR(HEAT_T0,   "Hconv")             { DIMENSION = "surfacic_power" ; }
    SCALAR(Scal_T,    "AscaleT")           { DIMENSION = "t" ; }
    SCALAR(Scal_P,    "AscaleP")           { DIMENSION = "pressure" ; }
    SCALAR(Scal_S,    "AscaleS")           { DIMENSION = "area" ; }
    SCALAR(Scal_A,    "AscaleA")           { DIMENSION = "a" ; }
    SCALAR(Scal_D,    "AscaleD")           { DIMENSION = "l" ; }
    DATA(MAT1,        "mat_ID");
    SCALAR(MU,        "MU")                { DIMENSION = "DIMENSIONLESS" ; }
    SCALAR(PEXT,      "Pext")              { DIMENSION = "pressure" ; }
    SCALAR(T_Initial, "T0")                { DIMENSION= "k" ; }
    RADIO(Iequil,     "Iequil")
    {
        ADD(0, "0: The mass of gas initially filling the airbag is determined with respect to the volume at time zero");
        ADD(1, "1: The mass of gas initially filling the airbag is determined with respect to the volume at beginning of injection");
    }
    RADIO(I_ttf, "Ittf")
    {
        ADD(0, "0: (Default)");
        ADD(1, "1: Obsolete");
        ADD(2, "2: Obsolete");
        ADD(3, "3: (all options are shifted)");
    }
    SIZE(ABG_Njet,  "Njet");
    SEPARATOR("Injector");
    ARRAY(ABG_Njet, "Njet")
    {
        DATA(injector_IDs, "inject_ID");
        DATA(ABG_Isensor,  "sens_ID");
        RADIO(ABG_Ijet,    "Ijet")
        {
            ADD(0, "0: No jetting");
            ADD(1, "1: Jetting");
        }
        DATA(ABG_N1, "node_ID1");
        DATA(ABG_N2, "node_ID2");
        DATA(ABG_N3, "node_ID3");
        if(ABG_Ijet == 1)
        {
            DATA(ABG_IPt,     "fct_IDPt");
            DATA(ABG_IPtheta, "fct_IDPTheta");
            DATA(ABG_IPdel,   "fct_IDPDelta");
            SCALAR(Fp1,       "FscalePt")     { DIMENSION = "pressure" ; }
            SCALAR(Fp2,       "FscalePTheta") { DIMENSION = "pressure" ; }
            SCALAR(Fp3,       "FscalePDelta") { DIMENSION = "pressure" ; }
        }
    }
    SEPARATOR();
    SIZE(ABG_Nvent,  "Nvent");
    SEPARATOR("Vent Hole");
    ARRAY(ABG_Nvent, "Nvent")
    {
        DATA(SVENT_SETSURFID, "surf_IDv");
        RADIO(Itvent,         "Iform")
        {
            ADD(0, "0: (Default) Set to 1");
            ADD(1, "1: Isenthalpic (default)");
            ADD(2, "2: Chemkin");
            ADD(3, "3: Isenthalpic with possible gas (mat_ID) flow in");
        }
        SCALAR(ABG_Avent,    "Avent")             { DIMENSION = "area" ; }
        SCALAR(ABG_Bvent,    "Bvent")             { DIMENSION = "area" ; }
        SCALAR(KEYWORD1,     "vent_title")        { DIMENSION = "DIMENSIONLESS" ; }
        SCALAR(Tstart_arr_X, "Tstart")            { DIMENSION = "t" ; }
        SCALAR(Tstop_arr_X,  "Tstop")             { DIMENSION = "t" ; }
        SCALAR(ABG_dPdef,    "DeltaPdef")         { DIMENSION = "pressure" ; }
        SCALAR(ABG_dtPdef,   "DeltaTPdef")        { DIMENSION = "t" ; }
        RADIO(I_dtPdef_arr,  "IdtPdef")
        {
            ADD(0, "0: Pressure should be over DeltaPdef during a DeltatPdef cumulative time to activate venting");
            ADD(1, "1: Venting is activated DeltatPdef after DeltaPdef is reached");
        }
        DATA(ABG_Iport,  "fct_IDt");
        DATA(ABG_Iporp,  "fct_IDP");
        DATA(ABG_IporA,  "fct_IDA");
        SCALAR(Fport,    "FScalet")               { DIMENSION = "DIMENSIONLESS" ; }
        SCALAR(Fporp,    "FScaleP")               { DIMENSION = "DIMENSIONLESS" ; }
        SCALAR(FporA,    "FScaleA")               { DIMENSION = "DIMENSIONLESS" ; }
        DATA(ABG_Iport1, "fct_IDt'");
        DATA(ABG_Iporp1, "fct_IDP'");
        DATA(ABG_IporA1, "fct_IDA'");
        SCALAR(Fport1,   "FScalet'")              { DIMENSION = "DIMENSIONLESS" ; }
        SCALAR(Fporp1,   "FScaleP'")              { DIMENSION = "DIMENSIONLESS" ; }
        SCALAR(FporA1,   "FScaleA'")              { DIMENSION = "DIMENSIONLESS" ; }
        if(Itvent == 2)
        {
            DATA(ABG_Iv, "fct_IDv");
            SCALAR(BB1,  "Fscalev")               { DIMENSION = "velocity" ; }
        }
    }
    SEPARATOR();
    SIZE(ABG_Nporsurf,  "Nporsurf");
    SEPARATOR("Pourus surface");
    ARRAY(ABG_Nporsurf, "Nporsurf")
    {
        DATA(S1_SETSURFID, "surf_IDps");
        RADIO(ITYPE, "Iformps")
        {
            ADD(0, "0: Bernoulli (Wang & Nefske) (no dependence on fabric material)");
            ADD(1, "1: Bernoulli (Wang & Nefske)");
            ADD(2, "2: Chemkin");
            ADD(3, "3: Graefe");
        }
        RADIO(Iblockage, "Iblockage")
        {
            ADD(0, "0: No");
            ADD(1, "1: Yes");
        }
        SCALAR(Tstart_arr_Y,  "Tstart")            { DIMENSION = "t" ; }
        SCALAR(Tstop_arr_Y,   "Tstop")             { DIMENSION = "t" ; }
        SCALAR(ABG_dPdef_ps,  "DeltaPdef")         { DIMENSION = "pressure" ; }
        SCALAR(ABG_dtPdef_ps, "DeltatPdef")        { DIMENSION = "t" ; }
        RADIO(I_dtPdef_arr_ps, "I_dtPdef_arr_ps")
        {
            ADD(0, "1: Pressure should be over DeltaPdef during a DeltatPdef cumulative time to activate venting");
            ADD(1, "1: Venting is activated DeltatPdef after DeltaPdef is reached");
        }
        if(ITYPE == 0)
        {
            SCALAR(CC1,       "Cps")                   { DIMENSION = "DIMENSIONLESS" ; }
            SCALAR(AREA_IP,   "Areaps")                { DIMENSION = "area" ; }
            DATA(ABG_fct_cps, "fct_IDcps");
            DATA(ABG_fct_aps, "fct_IDaps");
            SCALAR(CM1,       "Fscalecps")             { DIMENSION = "DIMENSIONLESS" ; }
            SCALAR(K_A1,      "Fscaleaps")             { DIMENSION = "area" ; }
        }
        if(ITYPE == 2)
        {
            DATA(ABG_fct_v,   "fct_IDv");
            SCALAR(BB10,      "Fscalev")               { DIMENSION = "velocity" ; }
        }
    }
    SEPARATOR();
    SIZE(NBAG, "Nbag");
    SEPARATOR("Communication Bag");
    ARRAY(NBAG, "Nbag")
    {
        DATA(ABG_BAG_ID,       "bag_ID");
        DATA(ABG_SURF_ID,      "surf_IDc");
        SCALAR(ABG_DPDIFF,     "DeltaPCdef")           { DIMENSION = "pressure" ; }
        SCALAR(ABG_ACOM,       "Acom")                 { DIMENSION = "area" ; }
        SCALAR(ABG_TCOM,       "Tcom")                 { DIMENSION = "t" ; }
        SCALAR(ABG_dTPdefCommu,"DeltatPCdef")          { DIMENSION = "t" ; }
        DATA(ABG_fct_ID_CT,    "fct_IDCt");
        DATA(ABG_fct_ID_CP,    "fct_IDCP");
        SCALAR(ABG_Fscale_CT,  "ABG_Fscale_CP")        { DIMENSION = "DIMENSIONLESS" ; }
        SCALAR(ABG_Fscale_CP,  "FscaleCP")             { DIMENSION = "DIMENSIONLESS" ; }
    }
    SEPARATOR();
}

// File format
FORMAT(radioss130)
{
    HEADER("/MONVOL/COMMU1/%-d", _ID_);
    CARD("%-100s", TITLE);

    COMMENT("#surf_IDex                         Hconv");
    CARD("%10d%10s%20lg", entityiddisplayed, _BLANK_, HEAT_T0);

    COMMENT("#            Ascalet             AscaleP             AscaleS             AscaleA             AscaleD");
    CARD("%20lg%20lg%20lg%20lg%20lg", Scal_T, Scal_P, Scal_S, Scal_A, Scal_D);

    COMMENT("#   mat_ID                            Mu                Pext                  T0     Iequi      Ittf");
    CARD("%10d%10s%20lg%20lg%20lg%10d%10d", MAT1, _BLANK_, MU, PEXT, T_Initial, Iequil, I_ttf);

    COMMENT("#     Njet");
    CARD("%10d", ABG_Njet);

    if(ABG_Njet > 0)
    {
        CARD_LIST(ABG_Njet)
        {
            COMMENT("#inject_ID   sens_ID      Ijet  node_ID1  node_ID2  node_ID3");
            CARD("%10d%10d%10d%10d%10d%10d", injector_IDs, ABG_Isensor, ABG_Ijet, ABG_N1, ABG_N2, ABG_N3);

            if(ABG_Ijet == 1)
            {
                COMMENT("# fct_IDPtfctIDPThetfctIDPDelt                      FscalePt        FscalePTheta        FscalePDelta");
                CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_IPt, ABG_IPtheta, ABG_IPdel, _BLANK_, Fp1, Fp2, Fp3);
            }
        }
    }

    COMMENT("#    Nvent  Nporsurf");
    CARD("%10d%10d", ABG_Nvent, ABG_Nporsurf);

    if(ABG_Nvent > 0)
    {
        CARD_LIST(ABG_Nvent)
        {
            COMMENT("# surf_IDv     Iform               Avent               Bvent");
            CARD("%10d%10d%20lg%20lg", SVENT_SETSURFID, Itvent, ABG_Avent, ABG_Bvent);

            COMMENT("#             Tstart               Tstop           DeltaPdef          DeltatPdef             IdtPdef");
            CARD("%20lg%20lg%20lg%20lg%10s%10d", Tstart_arr_X, Tstop_arr_X, ABG_dPdef, ABG_dtPdef, _BLANK_, I_dtPdef_arr);

            COMMENT("#  fct_IDt   fct_IDP   fct_IDA                       Fscalet             FscaleP             FscaleA");
            CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport, ABG_Iporp, ABG_IporA, _BLANK_, Fport, Fporp, FporA);

            COMMENT("# fct_IDt'  fct_IDP'  fct_IDA'                      Fscalet'            FscaleP'            FscaleA'");
            CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport1, ABG_Iporp1, ABG_IporA1, _BLANK_, Fport1, Fporp1, FporA1);

            if(Itvent == 2)
            {
                COMMENT("#  fct_IDv                       Fscalev");
                CARD("%10d%10s%20lg", ABG_Iv, _BLANK_, BB1);
            }
        }
    }

    if(ABG_Nporsurf > 0)
    {
        CARD_LIST(ABG_Nporsurf)
        {
            COMMENT("#surf_IDps   Iformps Iblockage");
            CARD("%10d%10d%10d", S1_SETSURFID, ITYPE, Iblockage);

            COMMENT("#             Tstart               Tstop           DeltaPdef          DeltatPdef             IdtPdef");
            CARD("%20lg%20lg%20lg%20lg%10s%10d", Tstart_arr_Y, Tstop_arr_Y, ABG_dPdef_ps, ABG_dtPdef_ps, _BLANK_, I_dtPdef_arr_ps);

            if(ITYPE == 0)
            {
                COMMENT("#                Cps              Areaps fct_IDcps fct_IDaps           Fscalecps           Fscaleaps");
                CARD("%20lg%20lg%10d%10d%20lg%20lg", CC1, AREA_IP, ABG_fct_cps, ABG_fct_aps, CM1, K_A1);
            }

            if(ITYPE == 2)
            {
                COMMENT("#  fct_IDv                       Fscalev");
                CARD("%10d%10s%20lg", ABG_fct_v, _BLANK_, BB10);
            }
        }
    }

    COMMENT("#     Nbag");
    CARD("%10d", NBAG);

    if(NBAG > 0)
    {
        CARD_LIST(NBAG)
        {
            COMMENT("#   bag_ID  surf_IDc          DeltaPCdef                Acom                Tcom         DeltatPCdef");
            CARD("%10d%10d%20lg%20lg%20lg%20lg", ABG_BAG_ID, ABG_SURF_ID, ABG_DPDIFF, ABG_ACOM, ABG_TCOM, ABG_dTPdefCommu);

            COMMENT("# fct_IDCt  fct_IDCP            FscaleCt            FscaleCP");
            CARD("%10d%10d%20lg%20lg", ABG_fct_ID_CT, ABG_fct_ID_CP, ABG_Fscale_CT, ABG_Fscale_CP);
        }
    }
}

FORMAT(radioss140)
{
    HEADER("/MONVOL/COMMU1/%-d", _ID_);
    CARD("%-100s", TITLE);

    COMMENT("#surf_IDex                         Hconv");
    CARD("%10d%10s%20lg", entityiddisplayed, _BLANK_, HEAT_T0);

    COMMENT("#            Ascalet             AscaleP             AscaleS             AscaleA             AscaleD");
    CARD("%20lg%20lg%20lg%20lg%20lg", Scal_T, Scal_P, Scal_S, Scal_A, Scal_D);

    COMMENT("#   mat_ID                            Mu                Pext                  T0     Iequi      Ittf");
    CARD("%10d%10s%20lg%20lg%20lg%10d%10d", MAT1, _BLANK_, MU, PEXT, T_Initial, Iequil, I_ttf);

    COMMENT("#     Njet");
    CARD("%10d", ABG_Njet);

    if(ABG_Njet > 0)
    {
        CARD_LIST(ABG_Njet)
        {
            COMMENT("#inject_ID   sens_ID      Ijet  node_ID1  node_ID2  node_ID3");
            CARD("%10d%10d%10d%10d%10d%10d", injector_IDs, ABG_Isensor, ABG_Ijet, ABG_N1, ABG_N2, ABG_N3);

            if(ABG_Ijet == 1)
            {
                COMMENT("# fct_IDPtfctIDPThetfctIDPDelt                      FscalePt        FscalePTheta        FscalePDelta");
                CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_IPt, ABG_IPtheta, ABG_IPdel, _BLANK_, Fp1, Fp2, Fp3);
            }
        }
    }

    COMMENT("#    Nvent  Nporsurf");
    CARD("%10d%10d", ABG_Nvent, ABG_Nporsurf);

    if(ABG_Nvent > 0)
    {
        CARD_LIST(ABG_Nvent)
        {
            COMMENT("# surf_IDv     Iform               Avent               Bvent                              vent_title");
            CARD("%10d%10d%20lg%20lg%20s%20s", SVENT_SETSURFID, Itvent, ABG_Avent, ABG_Bvent, _BLANK_, KEYWORD1);

            COMMENT("#             Tstart               Tstop           DeltaPdef          DeltatPdef             IdtPdef");
            CARD("%20lg%20lg%20lg%20lg%10s%10d", Tstart_arr_X, Tstop_arr_X, ABG_dPdef, ABG_dtPdef, _BLANK_, I_dtPdef_arr);

            COMMENT("#  fct_IDt   fct_IDP   fct_IDA                       Fscalet             FscaleP             FscaleA");
            CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport, ABG_Iporp, ABG_IporA, _BLANK_, Fport, Fporp, FporA);

            COMMENT("# fct_IDt'  fct_IDP'  fct_IDA'                      Fscalet'            FscaleP'            FscaleA'");
            CARD("%10d%10d%10d%10s%20lg%20lg%20lg", ABG_Iport1, ABG_Iporp1, ABG_IporA1, _BLANK_, Fport1, Fporp1, FporA1);

            if(Itvent == 2)
            {
                COMMENT("#  fct_IDv                       Fscalev");
                CARD("%10d%10s%20lg", ABG_Iv, _BLANK_, BB1);
            }
        }
    }

    if(ABG_Nporsurf > 0)
    {
        CARD_LIST(ABG_Nporsurf)
        {
            COMMENT("#surf_IDps   Iformps Iblockage                                                         surface_title");
            CARD("%10d%10d%10d%50s%20s", S1_SETSURFID, ITYPE, Iblockage, _BLANK_, KEYWORD2);

            COMMENT("#             Tstart               Tstop           DeltaPdef          DeltatPdef             IdtPdef");
            CARD("%20lg%20lg%20lg%20lg%10s%10d", Tstart_arr_Y, Tstop_arr_Y, ABG_dPdef_ps, ABG_dtPdef_ps, _BLANK_, I_dtPdef_arr_ps);

            if(ITYPE == 0)
            {
                COMMENT("#                Cps              Areaps fct_IDcps fct_IDaps           Fscalecps           Fscaleaps");
                CARD("%20lg%20lg%10d%10d%20lg%20lg", CC1, AREA_IP, ABG_fct_cps, ABG_fct_aps, CM1, K_A1);
            }

            if(ITYPE == 2)
            {
                COMMENT("#  fct_IDv                       Fscalev");
                CARD("%10d%10s%20lg", ABG_fct_v, _BLANK_, BB10);
            }
        }
    }

    COMMENT("#     Nbag");
    CARD("%10d", NBAG);

    if(NBAG > 0)
    {
        CARD_LIST(NBAG)
        {
            COMMENT("#   bag_ID  surf_IDc          DeltaPCdef                Acom                Tcom         DeltatPCdef");
            CARD("%10d%10d%20lg%20lg%20lg%20lg", ABG_BAG_ID, ABG_SURF_ID, ABG_DPDIFF, ABG_ACOM, ABG_TCOM, ABG_dTPdefCommu);

            COMMENT("# fct_IDCt  fct_IDCP            FscaleCt            FscaleCP");
            CARD("%10d%10d%20lg%20lg", ABG_fct_ID_CT, ABG_fct_ID_CP, ABG_Fscale_CT, ABG_Fscale_CP);
        }
    }
}