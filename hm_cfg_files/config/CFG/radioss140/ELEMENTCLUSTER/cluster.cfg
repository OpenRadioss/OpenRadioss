//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// /CLUSTER/
//

ATTRIBUTES(COMMON)
{
// INPUT ATTRIBUTES
    elem_type                                 = VALUE(INT,"Cluster element type");
    group_ID                                  = VALUE(SETS,"Element group identifier") { SUBTYPES = (/SETS/GRBRIC, /SETS/GRSPRI); }
    group_ID_type                             = VALUE(STRING, "Cluster element type");
    skew_ID                                   = VALUE(SYSTEM,"Skew identifier");
    ifail                                     = VALUE(INT,"Failure model option");
    fn_fail1                                  = VALUE(FLOAT,"Failure force in normal direction (tension)");
    scalefactor_a1                            = VALUE(FLOAT,"Multi-directional failure scale factors");
    scalefactor_b1                            = VALUE(FLOAT,"Multi-directional failure exponents");
    fs_fail                                   = VALUE(FLOAT,"Failure force in tangent direction (shear)");
    scalefactor_a2                            = VALUE(FLOAT,"Multi-directional failure scale factors");
    scalefactor_b2                            = VALUE(FLOAT,"Multi-directional failure exponents");
    mt_fail                                   = VALUE(FLOAT,"Failure moment in normal direction (torsion)");
    scalefactor_a3                            = VALUE(FLOAT,"Multi-directional failure scale factors");
    scalefactor_b3                            = VALUE(FLOAT,"Multi-directional failure exponents");
    mb_fail                                   = VALUE(FLOAT,"Failure moment in tangent direction (bending)");
    scalefactor_a4                            = VALUE(FLOAT,"Multi-directional failure scale factors");
    scalefactor_b4                            = VALUE(FLOAT,"Multi-directional failure exponents");
    name                                      = VALUE(STRING,"Cluster block title","TITLE");

// HM INTERNAL
    KEYWORD_STR                               = VALUE(STRING, "Solver Keyword");
    type_name                                 = VALUE(STRING,"Temporary variable to resolve type");
    IO_FLAG                                   = VALUE(INT,"IO Flag");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                               = 9000;
    type_name                                 = -1;
    IO_FLAG                                   = -1;
}

CHECK(COMMON)
{

}

DEFAULTS(COMMON)
{
    fn_fail1                                  = 1.0e30;
    fs_fail                                   = 1.0e30;
    mt_fail                                   = 1.0e30;
    mb_fail                                   = 1.0e30;
    scalefactor_a1                            = 1.0;
    scalefactor_a1                            = 1.0;
    scalefactor_a2                            = 1.0;
    scalefactor_a3                            = 1.0;
    scalefactor_a4                            = 1.0;
    scalefactor_b1                            = 1.0;
    scalefactor_b2                            = 1.0;
    scalefactor_b3                            = 1.0;
    scalefactor_b4                            = 1.0;
}

GUI(COMMON)
{

    if (elem_type == 1)
    {
      ASSIGN(KEYWORD_STR,"/CLUSTER/BRICK");
    }
    else
    {
      ASSIGN(KEYWORD_STR,"/CLUSTER/SPRING");
    }

    DATA(group_ID);
    DATA(skew_ID);
    RADIO(ifail)
    {
      ADD(0,"0: (Default) No global failure criterion");
      ADD(1,"1: Unidirectional failure, element is deleted if force or moment in one direction reaches the limit value");
      ADD(2,"2: Unidirectional failure, element is deleted if forces and moments in all directions reach the limit values");
      ADD(3,"3: Multi-directional failure");
    }
    SCALAR(fn_fail1)          {DIMENSION="force";}
    SCALAR(fs_fail)           {DIMENSION="force";}
    SCALAR(mt_fail)           {DIMENSION="moment";}
    SCALAR(mb_fail)           {DIMENSION="moment";}
    if (ifail == 3)
    {
      SCALAR(scalefactor_a1);
      SCALAR(scalefactor_b1);
      SCALAR(scalefactor_a2);
      SCALAR(scalefactor_b2);
      SCALAR(scalefactor_a3);
      SCALAR(scalefactor_b3);
      SCALAR(scalefactor_a4);
      SCALAR(scalefactor_b4);
    }
}

FORMAT(radioss140) {
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if(IO_FLAG == 1)
    {
        HEADER("/CLUSTER/%s/%d",type_name,_ID_);
        if(type_name == "SPRING")
        {
            ASSIGN(elem_type,2,IMPORT);
            ASSIGN(group_ID_type, /SETS/GRSPRI, IMPORT);
        }
        else
        {
            ASSIGN(elem_type,1,IMPORT);
            ASSIGN(group_ID_type, /SETS/GRBRIC, IMPORT);
        }
    }
    else if (IO_FLAG == 0 && elem_type == 1)
    {
      HEADER("/CLUSTER/BRICK/%d",_ID_);
    }
    else
    {
      HEADER("/CLUSTER/SPRING/%d",_ID_);
    }
    CARD("%-100s",name);

    COMMENT("# group_ID   skew_ID     Ifail");
    CARD("%10d%10d%10d",group_ID,skew_ID,ifail);

    COMMENT("#           Fn_fail1                  a1                  b1");
    CARD("%20lg%20lg%20lg",fn_fail1,scalefactor_a1,scalefactor_b1);

    COMMENT("#            Fs_fail                  a2                  b2");
    CARD("%20lg%20lg%20lg",fs_fail,scalefactor_a2,scalefactor_b2);

    COMMENT("#            Mt_fail                  a3                  b3");
    CARD("%20lg%20lg%20lg",mt_fail,scalefactor_a3,scalefactor_b3);

    COMMENT("#            Mb_fail                  a4                  b4");
    CARD("%20lg%20lg%20lg",mb_fail,scalefactor_a4,scalefactor_b4);
}
