//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Material law 84

ATTRIBUTES(COMMON) 
{
    KEYWORD_STR                 = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                = SIZE("NUM_COMMENTS");
    CommentEnumField            = VALUE(INT,"User Comments");
    COMMENTS                    = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    MAT_RHO                     = VALUE(FLOAT,"Initial Density");
    Refer_Rho                   = VALUE(FLOAT,"Reference Density (for lower than 14.0 version)");
    DUMMY                       = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    MAT_REFRHO_Option           = VALUE(INT, "RefRho_Option");
    MAT_E                       = VALUE(FLOAT, "Young Modulus");
    MAT_NU                      = VALUE(FLOAT, "Poisson Ratio");
    Fcut                        = VALUE(FLOAT, "Yield Parameter");
    MAT_CAP_END                 = VALUE(FLOAT, "Yield Parameter");
    MAT_PC                      = VALUE(FLOAT, "Yield Parameter");
    MAT_PR                      = VALUE(FLOAT, "Voce Hardening Coefficient");
    MAT_T0                      = VALUE(FLOAT, "Voce Plastic Strain Coefficient");
    MAT_c2_t                    = VALUE(FLOAT, "Flow Rule Parameter");
    MAT_A2                      = VALUE(FLOAT, "Flow Rule Parameter");
    MAT_c1_c                    = VALUE(FLOAT, "Flow Rule Parameter");
    MAT_VOL                     = VALUE(FLOAT, "Yield Weighting Coefficient");
    MAT_NUt                     = VALUE(FLOAT, "Voce Coefficient");
    FScale11                    = VALUE(FLOAT, "Swift Hardening Coefficient");
    FScale22                    = VALUE(FLOAT, "Swift Hardening Parameter");
    FScale33                    = VALUE(FLOAT, "Swift Hardening Coefficient");
    FScale12                    = VALUE(FLOAT, "Swift Hardening Parameter");
    FScale23                    = VALUE(FLOAT, "Reference Strain Rate");
    scale1                      = VALUE(FLOAT, "Thermal Conducticity");
    scale2                      = VALUE(FLOAT, "Specific Heat");
    scale3                      = VALUE(FLOAT, "Initial Temperature");
    scale4                      = VALUE(FLOAT, "Reference Temperature");
    scale5                      = VALUE(FLOAT, "Melting Temperature");
    FScale11_2                  = VALUE(FLOAT, "Temperature Exponent");
    FScale22_2                  = VALUE(FLOAT, "Strain Rate Optimization Parameter for Temperature Dependency");
    Heat_Inp_opt                = VALUE(INT,   "Heat"); 
    SUBGRP_HEAT_MAT             = VALUE(SUBOBJECT, "");
    THERM_STRESS                = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS         = VALUE(SUBOBJECT, "");
    IO_FLAG                     = VALUE(INT, "");
    TITLE                       = VALUE(STRING,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                 = 9000;
    COMMENTS                    = 5109;
    CommentEnumField            = 7951;
    MAT_REFRHO_Option           = 4285;
    MAT_RHO                     = 118;
    Refer_Rho                   = 4229;
    FScale11                    = 4050;
    FScale11_2                  = 4429;
    FScale12                    = 4053;
    FScale22                    = 4051;
    FScale22_2                  = 4430;
    FScale23                    = 4054;
    FScale33                    = 4052;
    Fcut                        = 5356;
    MAT_A2                      = 281;
    MAT_CAP_END                 = 5062;
    MAT_E                       = 119;
    MAT_NU                      = 120;
    MAT_NUt                     = 5083;
    MAT_PC                      = 282;
    MAT_PR                      = 5096;
    MAT_T0                      = 6133;
    MAT_VOL                     = 4276;
    MAT_c1_c                    = 6023;
    MAT_c2_t                    = 6014;
    scale1                      = 4528;
    scale2                      = 4529;
    scale3                      = 4530;
    scale4                      = 4531;
    scale5                      = 4532;
    NUM_COMMENTS                = 5110;
    DUMMY                       = -1;
    Heat_Inp_opt                = 4346;
    SUBGRP_HEAT_MAT             = -1;
    THERM_STRESS                = 4555;
    SUBGRP_THERM_STRESS         = -1;
    IO_FLAG                     = -1;
    TITLE                       = -1;
}

CHECK(COMMON)
{
    MAT_RHO                     >0.0;
}

DEFAULTS(COMMON) {
    Heat_Inp_opt                = 0;
    FScale12                    = 0.0;
    FScale22                    = 0.0;
    FScale23                    = 1.0e30;
    FScale33                    = 1.0;
    Fcut                        = -0.5;
    MAT_CAP_END                 = 1.0;
    MAT_PC                      = 3.0;
    MAT_T0                      = 0.0;
    MAT_c2_t                    = -0.5;     
    MAT_A2                      = 1.0;
    MAT_c1_c                    = 3.0;
}
DRAWABLES(COMMON) 
{
public:
    INITIAL_DENSITY         = SCALAR(MAT_RHO);
    INITIAL_YOUNG_MODULUS   = SCALAR(MAT_E); 
    POISSON_RATIO = SCALAR(MAT_NU);
    public:
    SOUND_SPEED                     = EVAL((INITIAL_YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                               = EVAL(INITIAL_YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                              = EVAL(INITIAL_YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID               = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);

}

GUI(COMMON) 
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    ASSIGN(KEYWORD_STR, "/MAT");
    ASSIGN(KEYWORD_STR, "/LAW84/");
    FLAG(MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho)      { DIMENSION="density";       }
    }
mandatory:
    SCALAR(MAT_RHO)     { DIMENSION="density";            }
    SCALAR(MAT_E)       {DIMENSION="pressure";}
optional:
    SCALAR(MAT_NU);   
    SCALAR(Fcut);     
    SCALAR(MAT_CAP_END);     
    SCALAR(MAT_PC);      
    SCALAR(MAT_PR)      {DIMENSION="pressure";}       
    SCALAR(MAT_T0);        
    SCALAR(MAT_c2_t);      
    SCALAR(MAT_A2);      
    SCALAR(MAT_c1_c);      
    SCALAR(MAT_NUt);
    SCALAR(MAT_VOL);
    SCALAR(FScale11)    {DIMENSION="pressure";}     
    SCALAR(FScale22); 
    SCALAR(FScale33);        
    SCALAR(FScale12);        
    SCALAR(FScale23)    {DIMENSION="strain_rate";}   
    SCALAR(scale1)      {DIMENSION="DIMENSIONLESS";}      
    SCALAR(scale2)      {DIMENSION="thermal_massic_capacity";}     
    SCALAR(scale3)      { DIMENSION="k";     }     
    SCALAR(scale4)      { DIMENSION="k";     }     
    SCALAR(scale5)      { DIMENSION="k";     }    
    SCALAR(FScale11_2);     
    SCALAR(FScale22_2)  {DIMENSION="strain_rate";}  
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
    /*
    mandatory:
    graphical SUPPORT("Support") 
    {
    OBJECTS=(/PART/BRICK,/PART/TETRA4,/PART/LINEAR_3D,/PART/PENTA6,/PART/LINEAR_THICK,
    /PART/TETRA10,/PART/SHEL16,/PART/BRIC20,/PART/SPHCEL);
    ADD(PART,"Parts");
    }
    */
}

FORMAT(radioss140)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 0)
    {
        HEADER("/MAT/LAW84/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                  E                  Nu");
    CARD("%20lg%20lg",MAT_E,MAT_NU);
    COMMENT("#                P12                 P22                 P33                   Q                   B");
    CARD("%20lg%20lg%20lg%20lg%20lg",Fcut,MAT_CAP_END,MAT_PC,MAT_PR,MAT_T0);
    COMMENT("#                G12                 G22                 G33                  K0               ALPHA");
    CARD("%20lg%20lg%20lg%20lg%20lg",MAT_c2_t,MAT_A2,MAT_c1_c,MAT_NUt,MAT_VOL);
    COMMENT("#                  A                EPS0                   n                   C              EPSDOT");
    CARD("%20lg%20lg%20lg%20lg%20lg",FScale11,FScale22,FScale33,FScale12,FScale23);
    COMMENT("#                ETA                  CP                Tini                Tref               Tmelt");
    CARD("%20lg%20lg%20lg%20lg%20lg",scale1,scale2,scale3,scale4,scale5);
    COMMENT("#                  m             EPSDOTA");
    CARD("%20lg%20lg",FScale11_2,FScale22_2);
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    }
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
