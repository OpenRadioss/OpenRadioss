//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Material law 87

ATTRIBUTES(COMMON)
{


    KEYWORD_STR                = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS               = SIZE("NUM_COMMENTS");
    COMMENTS                   = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField           = VALUE(INT,  "User Comments");
    MAT_RHO                    = VALUE(FLOAT,  "Initial Density");
    MAT_E                      = VALUE(FLOAT,  "Young's Modulus");
    MAT_NU                     = VALUE(FLOAT,  "Poisson's Ratio");
    MAT_Iflag                  = VALUE(INT,  "Yield Stress Definition Flag");
    MAT_ALPHA1                 = VALUE(FLOAT,  "Material parameters with i=1");
    MAT_ALPHA2                 = VALUE(FLOAT,  "Material parameters with i=2");
    MAT_ALPHA3                 = VALUE(FLOAT,  "Material parameters with i=3");
    MAT_ALPHA4                 = VALUE(FLOAT,  "Material parameters with i=4");
    MAT_ALPHA5                 = VALUE(FLOAT,  "Material parameters with i=5");
    MAT_ALPHA6                 = VALUE(FLOAT,  "Material parameters with i=6");
    MAT_ALPHA7                 = VALUE(FLOAT,  "Material parameters with i=7");
    MAT_ALPHA8                 = VALUE(FLOAT,  "Material parameters with i=8");
    A                          = VALUE(INT,  "a,Exponent in Yield Function");
    MAT_VOL                    = VALUE(FLOAT,  "alpha,Yield Weighting Coefficient");
    FScale33                   = VALUE(FLOAT,  "n,Swift Hardening Exponent");
    Fcut                       = VALUE(FLOAT,  "Cutoff Frequency for Strain Rate Filtering");
    MAT_FSMOOTH                = VALUE(INT,  "Smooth Strain Rate Option Flag");
    MAT_NRATE                  = SIZE("Number of Yield Functions");
    MAT_A                      = VALUE(FLOAT,  "Swift Hardening Coefficient");
    FScale22                   = VALUE(FLOAT,  "Swift Hardening Parameter");
    MAT_PR                     = VALUE(FLOAT,  "Voce Hardening Coefficient");
    MAT_T0                     = VALUE(FLOAT,  "Voce Plastic Strain Coefficient");
    MAT_NUt                    = VALUE(FLOAT,  "Voce Hardening Parameter");
    FUN_LOAD                   = ARRAY[MAT_NRATE](FUNCT,  "Yield Stress Vs Plastic Strain Function");
    SCALE_LOAD                 = ARRAY[MAT_NRATE](FLOAT,"Scale Factor for Fct_IDi Ordinate");  
    STRAINRATE_LOAD            = ARRAY[MAT_NRATE](FLOAT,"Strain Rate for Fct_IDi");
    MAT_REFRHO_Option          = VALUE(INT,  "RefRho_Option");
    Refer_Rho                  = VALUE(FLOAT,  "Ref_Rho");
    DUMMY                      = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    IO_FLAG                    = VALUE(INT, "");
    LAW_NO                     = VALUE(STRING, "");
    Mat_Name_OR_LawNo          = VALUE(INT,  "RADIOSS_COMMENT_FLAG");
    TITLE                      = VALUE(STRING,"");
    Heat_Inp_opt               = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT            = VALUE(SUBOBJECT, "");
    THERM_STRESS               = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS        = VALUE(SUBOBJECT, "");
    //FUN_LOAD                              = VALUE(MULTIOBJECT,  "fct_IDi");
    //SCALE_LOAD                            = VALUE(FLOAT,  "Yscalei");
    //STRAINRATE_LOAD                       = VALUE(FLOAT,  "Epspi");
}


SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                = 9000;
    NUM_COMMENTS               = 5110;
    COMMENTS                   = 5109;
    CommentEnumField           = 7951;
    MAT_RHO                    = 118;
    MAT_E                      = 119;
    MAT_NU                     = 120;
    MAT_Iflag                  = 6002;
    MAT_ALPHA1                 = 375;
    MAT_ALPHA2                 = 377;
    MAT_ALPHA3                 = 381;
    MAT_ALPHA4                 = 382;
    MAT_ALPHA5                 = 386;
    MAT_ALPHA6                 = 5084;
    MAT_ALPHA7                 = 5085;
    MAT_ALPHA8                 = 5086;
    A                          = 2986;
    MAT_VOL                    = 4276;
    FScale33                   = 4052;
    Fcut                       = 5356;
    MAT_FSMOOTH                = 1051;
    MAT_NRATE                  = 1052;
    MAT_A                      = 6056;
    FScale22                   = 4051;
    MAT_PR                     = 5096;
    MAT_T0                     = 6133;
    MAT_NUt                    = 5083;
    FUN_LOAD                   = 4234;
    SCALE_LOAD                 = 4236;
    STRAINRATE_LOAD            = 4235;
    MAT_REFRHO_Option          = 4285;
    Refer_Rho                  = 4229;
    DUMMY                      = -1;
    LAW_NO                     = -1;
    Mat_Name_OR_LawNo          = 4538;
    IO_FLAG                    = -1;
    TITLE                      = -1;
    Heat_Inp_opt               = 4346;
    SUBGRP_HEAT_MAT            = -1;
    THERM_STRESS               = 4555;
    SUBGRP_THERM_STRESS        = -1;
}
DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY                 = SCALAR(MAT_RHO);
    YOUNG_MODULUS                   = SCALAR(MAT_E);
    POISSON_RATIO                   = SCALAR(MAT_NU);
public:
    SOUND_SPEED                     = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                               = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                              = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID               = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}

CHECK(COMMON)
{
    MAT_RHO                     >0.0;
}

DEFAULTS(COMMON)
{
    FScale22                    = 0.0;
    STRAINRATE_LOAD             = 1;
    FScale33                    = 1;
    Fcut                        = 1.0e30;
    MAT_FSMOOTH                 = 0;
    MAT_Iflag                   = 0;
    MAT_T0                      = 0.0;
    MAT_VOL                     = 0;
    SCALE_LOAD                  = 1;
    Mat_Name_OR_LawNo           = 0;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if( CommentEnumField == 2)
    {
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }
    if( Mat_Name_OR_LawNo == 1)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/BARLAT2000/");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW87/");
    }
mandatory:

    SCALAR(MAT_RHO)                                { DIMENSION="density";}

optional:
    graphical FLAG( MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho);
    }

mandatory:
    SCALAR(MAT_E)                                   { DIMENSION="pressure";}
    SCALAR(MAT_NU)                                  { DIMENSION = "DIMENSIONLESS"; }
    RADIO(MAT_Iflag)
    {
        ADD(0, "0: Tabulated Input (default)");
        ADD(1, "1: Swift-Voce Analytic Formulation");
    }
optional:

        SCALAR(MAT_ALPHA1)                              { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(MAT_ALPHA2)                              { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(MAT_ALPHA3)                              { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(MAT_ALPHA4)                              { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(MAT_ALPHA5)                              { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(MAT_ALPHA6)                              { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(MAT_ALPHA7)                              { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(MAT_ALPHA8)                              { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(A)                                       { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(MAT_VOL)                                 { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(FScale33)                                { DIMENSION = "DIMENSIONLESS"; }
    SCALAR(Fcut)                                    { DIMENSION="f";     }

optional:
    RADIO(MAT_FSMOOTH)
    {
        ADD(0, "0: No Strain Rate Smoothing (default)");
        ADD(1, "1: Strain Rate Smoothing Active");
    }
mandatory:
    if( MAT_Iflag == 0)
    {
        SIZE(MAT_NRATE);    
    /*ARRAY(MAT_NRATE,"Strain rate") 
        {
            //mandatory:
            //DATA(FUN_LOAD);
            FUN_LOADTION(FUN_LOAD) {
                X_TITLE     = "Plastic Strain"; Y_TITLE     = "Yield stress"; 
                X_DIMENSION = "DIMENSIONLESS"; Y_DIMENSION="pressure";
                // Y_SCALING(SCALE_LOAD);
    }
            SCALAR(SCALE_LOAD);
            SCALAR(STRAINRATE_LOAD)     { DIMENSION="strain_rate"; }

        }*/
    }
    if( MAT_Iflag == 0 && MAT_NRATE > 0)
    {
        ARRAY(MAT_NRATE,"Strain rate") 
        {
            //mandatory:
            //DATA(FUN_LOAD);
            /*FUN_LOADTION(FUN_LOAD) {
                X_TITLE     = "Plastic Strain"; Y_TITLE     = "Yield stress"; 
                X_DIMENSION = "DIMENSIONLESS"; Y_DIMENSION="pressure";
                // Y_SCALING(SCALE_LOAD);
            }*/
            SCALAR(SCALE_LOAD)   { DIMENSION="pressure"; }
            SCALAR(STRAINRATE_LOAD){ DIMENSION="strain_rate"; }
        }
    }
mandatory:
    SCALAR(MAT_A)                              { DIMENSION="pressure"; }
optional:
    SCALAR(FScale22)                           { DIMENSION="DIMENSIONLESS";}
mandatory:
    SCALAR(MAT_PR)                             { DIMENSION="pressure"; }
optional:
    SCALAR(MAT_T0)                             { DIMENSION="DIMENSIONLESS";}
mandatory:
    SCALAR(MAT_NUt)                            { DIMENSION="pressure"; }
    
    /* DATA(FUN_LOAD);
    //ASSIGN(KEYWORD_STR, "          ");
    SCALAR(SCALE_LOAD);
    SCALAR(STRAINRATE_LOAD);
    */

    /*mandatory:
    graphical SUPPORT("Support") {
    OBJECTS=(/PART/SHELL);
    ADD(PART,"Parts");
    }*/


optional:
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
}

FORMAT(radioss140) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "BAR" )
        {
            ASSIGN(Mat_Name_OR_LawNo,1);
        }
        else
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 1)
    {
        HEADER("/MAT/BARLAT2000/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/LAW87/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    COMMENT("#                  E                  Nu     IFlag");
    CARD("%20lg%20lg%10d",MAT_E,MAT_NU,MAT_Iflag);
    COMMENT("#                 a1                  a2                  a3                  a4");
    CARD("%20lg%20lg%20lg%20lg",MAT_ALPHA1,MAT_ALPHA2,MAT_ALPHA3,MAT_ALPHA4);
    COMMENT("#                 a5                  a6                  a7                  a8");
    CARD("%20lg%20lg%20lg%20lg",MAT_ALPHA5,MAT_ALPHA6,MAT_ALPHA7,MAT_ALPHA8);
    COMMENT("# blank card");
    BLANK;
    if(MAT_Iflag == 0) {
        COMMENT("#              exp_a               alpha                   n               F_cut  F_smooth     Nrate");
        CARD("          %10d%20lg%20lg%20lg%10d%10d",A,MAT_VOL,FScale33,Fcut,MAT_FSMOOTH,MAT_NRATE);  
        COMMENT("#             ASwift                Eps0               Qvoce                Beta                  KO");  
        CARD("%20lg%20lg%20lg%20lg%20lg",MAT_A,FScale22,MAT_PR,MAT_T0,MAT_NUt);
        if(MAT_NRATE > 0){
        COMMENT("#  Func_ID                        Yscale                Epsp");
        CELL_LIST(MAT_NRATE,"%10d          %20lg%20lg                                        ",FUN_LOAD,SCALE_LOAD,STRAINRATE_LOAD);  
        }
    } 
    else {
        COMMENT("#              exp_a               alpha                   n               F_cut  F_smooth     Nrate");
        CARD("          %10d%20lg%20lg%20lg%10d%10d",A,MAT_VOL,FScale33,Fcut,MAT_FSMOOTH,MAT_NRATE);  
        COMMENT("#             ASwift                Eps0               Qvoce                Beta                  KO");  
        CARD("%20lg%20lg%20lg%20lg%20lg",MAT_A,FScale22,MAT_PR,MAT_T0,MAT_NUt);
    }
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
