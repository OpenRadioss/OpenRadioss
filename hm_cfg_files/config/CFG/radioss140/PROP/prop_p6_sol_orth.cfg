//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Property SOL_ORTH Type6
ATTRIBUTES(COMMON)
{
    ISOLID                                  = VALUE(INT,  " Solid Elements Formulation Flag");
    Ismstr                                  = VALUE(INT,  " Small Strain Formulation Flag");
    Iplas                                   = VALUE(INT,  "Iplas");
    Icpre                                   = VALUE(INT,  " Constant Pressure Formulation Flag");
    Inpts_R                                 = VALUE(INT,  " Number of Integration Points in R Direction");
    Inpts_S                                 = VALUE(INT,  " Number of Integration Points in S Direction");
    Inpts_T                                 = VALUE(INT,  " Number of Integration Points in T Direction");
    Iframe                                  = VALUE(INT,  " Element Coordinate System Formulation Flag ");
    dn                                      = VALUE(FLOAT,  " Numerical Damping for Stabilization");  
    qa                                      = VALUE(FLOAT,  " Quadratic Bulk Viscosity");
    qb                                      = VALUE(FLOAT,  " Linear Bulk Viscosity");
    h                                       = VALUE(FLOAT,  " Hourglass Viscosity Coefficient");
    Vx                                      = VALUE(FLOAT,  " X Component for Reference Vector");
    Vy                                      = VALUE(FLOAT,  " Y Component for Reference Vector");
    Vz                                      = VALUE(FLOAT,  " Z Component for Reference Vector");
    SKEW_CSID                               = VALUE(SYSTEM,  " Skew Frame Identifier Defining Orthotropic Directions");
    REFPLANE                                = VALUE(INT,  " Reference Plane");
    ORTHTROP                                = VALUE(INT,  " Orthotropic System Formulation Flag");
    MAT_BETA                                = VALUE(FLOAT,  " Orthotropic Angle with First Reference Plane Direction");
    deltaT_min                              = VALUE(FLOAT,  " Minimum Time Step");
    Istrain                                 = VALUE(INT,  " Compute Strain Post-Processing Flag");
    IHKT                                    = VALUE(INT,  " Hourglass Tangent Modulus Flag");
    
    //Attributes for HM usage
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField                        = VALUE(INT,  "User Comments");    
    NODE1                                   = VALUE(NODE, " Vector Base Node");
    NODE2                                   = VALUE(NODE, " Vector End Node");
    n1                                      = VALUE(FLOAT, "");
    n2                                      = VALUE(FLOAT, "");    
    Prop_Name_OR_Type                       = VALUE(INT, "");
    TITLE                                   = VALUE(STRING, "");
    IO_FLAG                                 = VALUE(INT, "");
    TYPE_NO                                 = VALUE(STRING, "");
    NBP                                     = VALUE(INT,   "Number of integration points");
    Inpts_R_status                          = VALUE(BOOL, "");
    Inpts_S_status                          = VALUE(BOOL, "");
    Inpts_T_status                          = VALUE(BOOL, "");
    Inpts_NBP_status                        = VALUE(BOOL, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                             = 9000;
    NUM_COMMENTS                            = 5110;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;  
    ISOLID                                  = 8003;
    Ismstr                                  = 5152;
    Iplas                                   = 8008;
    Icpre                                   = 5396;
    Inpts_R                                 = 4151;
    Inpts_S                                 = 4152;
    Inpts_T                                 = 4153;
    Iframe                                  = 4002;
    dn                                      = 5363;
    qa                                      = 8029;
    qb                                      = 8030;
    h                                       = 8031;
    NODE1                                   = 5115;
    NODE2                                   = 4481;
    Vx                                      = 4156;
    Vy                                      = 4157;
    Vz                                      = 4158;
    SKEW_CSID                               =  412;
    REFPLANE                                = 5170;
    ORTHTROP                                = 4155;    
    MAT_BETA                                =  148;
    deltaT_min                              = 4154;
    Istrain                                 = 8009;
    IHKT                                    = 8062;
    n1                                      =   -1;
    n2                                      =   -1;   
    Prop_Name_OR_Type                       = 4537;
    TITLE                                   =   -1;
    IO_FLAG                                 =   -1;
    TYPE_NO                                 =   -1;
    NBP                                     =   -1;
    Inpts_R_status                          =   -1;
    Inpts_S_status                          =   -1;
    Inpts_T_status                          =   -1;
    Inpts_NBP_status                        =   -1;
}


CHECK(COMMON)
{
    Inpts_R                                 >=    2;
    Inpts_R                                 <=    9;
    Inpts_S                                 >=    2;
    Inpts_S                                 <=    9;
    Inpts_T                                 >=    2;
    Inpts_T                                 <=    9;
    h                                       >= 0.00;
    h                                       <= 0.15;
}

DRAWABLES(COMMON) {
 private:
  DEFAULT_LINEAR_BULK_VISCOSITY  = EVAL(0.05);
  STANDARD_LINEAR_BULK_VISCOSITY = SCALAR(qb);
  LINEAR_BULK_VISCOSITY          = WHILE_ZERO(STANDARD_LINEAR_BULK_VISCOSITY,DEFAULT_LINEAR_BULK_VISCOSITY);
}

DEFAULTS(COMMON)
{
    Iframe                                  =    1;
    Inpts_R                                 =    2;
    Inpts_S                                 =    2;
    Inpts_T                                 =    2;
    Vx                                      =  1.0;
    Vy                                      =  0.0;
    Vz                                      =  0.0;
    deltaT_min                              =  0.0;
    dn                                      =  0.1;
    h                                       = 0.10;
    qa                                      = 1.10;
    qb                                      = 0.05;
}

GUI(COMMON)
{
 optional:
    RADIO(CommentEnumField)
    {
       ENUM_VALUE_FLAG=TRUE;
       ADD(1, "1:Hide in Menu/Export");
       ADD(2, "2:Show in Menu/Export");
       ADD(3, "3:Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Prop_Name_OR_Type == 2)
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TYPE6/");

    }
    else
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/SOL_ORTH/");
    }   
    RADIO(ISOLID)
    {
       ADD(0, "0:Default, Set to Value Defined in /DEF_SOLID.");
       ADD(1, "1:Standard 8-node Solid Element, One Integration Point. Viscous Hourglass Formulation with Orthogonal and Rigid Deformation Modes Compensation.");
       ADD(2, "2:Standard 8-node SOlid Element, One Integration Point. Viscous Hourglass Formulation without Orthogonality.");
       ADD(12, "12:Standard 8-node Solid, Full Integration.");
       ADD(14, "14:HA8 Locking-Free 8-node Solid Element, Co-Rotational, Full Integration, Variable Number of Gauss Points.");
       ADD(17, "17:H8C Compatible Solid Full Integration Formulation.");
       ADD(24, "24:HEPH 8-node SOlid Element. Co-Rotational, Under-Integration with Physical Stabilization.");
    }
    RADIO(Ismstr)
    {
       ADD(0, "0:Default, Set to Value Defined in /DEF_SOLID.");
       ADD(1, "1:Small Strain from Time=0.");
       ADD(2, "2:Full Geometric Nonlinearities with Possible Small Strain Formulation in RADIOSS ENgine (/DT/BRICK/CST).");
       ADD(3, "3:Simplified Small Strain Formulation from Time=0.");
       ADD(4, "4:Full Geometric Nonlinearities.");
       ADD(10, "10:Lagrange Type Total Strain.");
    }
    RADIO(Icpre)
    {
       ADD(0, "0:Default Value.");
       ADD(1, "1:Reduced Pressure Integration.");
       ADD(2, "2:Variable State Between Icpre=3 and Icpre=1 in Function of Plasticity State.");
       ADD(3, "3:No Reduced Pressure Integration.");
    }
    if(ISOLID== 14 || ISOLID==0)
    {
       SCALAR(Inpts_R);
       SCALAR(Inpts_S);
       SCALAR(Inpts_T);
    }
    if(ISOLID==1 || ISOLID==2 || ISOLID==12 || ISOLID==17 || ISOLID==0)
    {
        RADIO(Iframe)
        {
            ADD(0, "0:Default Set to 1.");
            ADD(1, "1:Non Co-Rotational Formulation.");
            ADD(2, "2:Co-Rotational Formulation.");
        }
    }
    if(ISOLID==24 || ISOLID==0)
    {
       SCALAR(dn);
    }
    SCALAR(qa);
    SCALAR(qb);
    SCALAR(h);
    DATA(NODE1);
    DATA(NODE2);
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(Vx, [@getentityvalue(nodes,$NODE2,x)] - [@getentityvalue(nodes,$NODE1,x)] );
        ASSIGN(Vy, [@getentityvalue(nodes,$NODE2,y)] - [@getentityvalue(nodes,$NODE1,y)]);
        ASSIGN(Vz, [@getentityvalue(nodes,$NODE2,z)] - [@getentityvalue(nodes,$NODE1,z)]);
    }
    else
    {
        SCALAR(Vx)  { DIMENSION="l"; }
        SCALAR(Vy)  { DIMENSION="l"; }
        SCALAR(Vz)  { DIMENSION="l"; }
    }
    DATA(SKEW_CSID) {/FILTER/Framefix/0/EQ;}
    RADIO(REFPLANE)
    {
       ADD(0, "0:Use skew_ID.");
       ADD(1, "1:Plane (r,s) + Angle MAT_BETA.");
       ADD(2, "2:Plane (s,t) + Angle MAT_BETA.");
       ADD(3, "3:Plane (t,r) + Angle MAT_BETA.");
       ADD(11, "11:Plane (r,s) + Orthogonal Projection of Reference Vector (Vx, Vy, and Vz) on Plane (r,s).");
       ADD(12, "12:Plane (s,t) + Orthogonal Projection of Reference Vector (Vx, Vy, and Vz) on Plane (s,t).");
       ADD(13, "13:Plane (t,r) + Orthogonal Projection of Reference Vector (Vx, Vy, and Vz) on Plane (t,r).");
    }
    RADIO(ORTHTROP)
    {
       ADD(0, "0:The First Axis of Orthotropy is Maintained at Constant Angle with Respect to the Orthonormal Co-Rotational Element Coordinate System.");
       ADD(1, "1:The First Orthotropy Direction is Constant with Respect to a Non-Orthonormal Isoparametric Coordinates.");
    }
    SCALAR(MAT_BETA)    { DIMENSION="a";   }
    SCALAR(deltaT_min)  { DIMENSION="t";          }
    RADIO(Istrain)
    {
        ADD(0, "0:Default, Set to Value Defined in /DEF_SOLID.");
        ADD(1, "1:Yes.");
        ADD(2, "2:No.");
    }
    if(ISOLID==24 || ISOLID==0)
    {
        RADIO(IHKT)
        {
            ADD(0, "0:Default, Set to 1.");
            ADD(1, "1:Elastic Modulus or Numerical Tangent Modulus Estimation.");
            ADD(2, "2:Advanced Tangent Modulus Estimation.");
        }
    }
    /*
    mandatory:
  graphical SUPPORT("Support") {
    OBJECTS=(/PART/BRICK,/PART/TETRA4,/PART/LINEAR_3D,/PART/TETRA10,/PART/QUAD);
    ADD(PART,"Parts");
  }
  */
}
//File format for Radioss 140
FORMAT(radioss140)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE6/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SOL_ORTH/%d",_ID_);
    }
    CARD("%-100s", TITLE);
//
    ASSIGN(Inpts_R_status,_GET_DISPLAY_STATUS(Inpts_R),EXPORT);
    ASSIGN(Inpts_S_status,_GET_DISPLAY_STATUS(Inpts_S),EXPORT);
    ASSIGN(Inpts_T_status,_GET_DISPLAY_STATUS(Inpts_T),EXPORT);
    if(IO_FLAG == 0 && (Inpts_T_status == 1 || Inpts_S_status == 1 || Inpts_R_status == 1)) {
        ASSIGN(NBP,Inpts_R*100,EXPORT);
        ASSIGN(NBP,NBP +(Inpts_S*10),EXPORT);
        ASSIGN(NBP,NBP + Inpts_T,EXPORT);
    }
    COMMENT("#   Isolid    Ismstr               Icpre               Inpts              Iframe                  Dn");
    CARD("%10d%10d          %10d          %10d          %10d%20lg",ISOLID,Ismstr,Icpre,NBP,Iframe,dn);
    
    ASSIGN(Inpts_NBP_status,_GET_DISPLAY_STATUS(NBP),IMPORT);
    if(IO_FLAG == 1  && Inpts_NBP_status != 0) {
        ASSIGN(Inpts_R,NBP / 100, IMPORT);
        ASSIGN(Inpts_T,NBP - (Inpts_R*100), IMPORT);
        ASSIGN(Inpts_S,Inpts_T / 10, IMPORT);
        ASSIGN(Inpts_T,Inpts_T - (Inpts_S*10), IMPORT);
    }
//
    COMMENT("#                 qa                  qb                   h");
    CARD("%20lg%20lg%20lg",qa,qb,h);
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,x)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,x)], EXPORT);
        ASSIGN(Vx, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,y)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,y)], EXPORT);
        ASSIGN(Vy, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,z)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,z)], EXPORT);
        ASSIGN(Vz, n2-n1, EXPORT);
    }
    COMMENT("#                 Vx                  Vy                  Vz   skew_ID        Ip     Iorth");
    CARD("%20lg%20lg%20lg%10d%10d%10d",Vx,Vy,Vz,SKEW_CSID,REFPLANE,ORTHTROP);
    COMMENT("#                Phi");
    CARD("%20lg",MAT_BETA);
    if(ISOLID==24 || ISOLID==0)
    {
        COMMENT("#         deltaT_min   Istrain      Ihkt");
        CARD("%20lg%10d%10d",deltaT_min,Istrain,IHKT);
    }
    else
    {
        COMMENT("#         deltaT_min   Istrain");
        CARD("%20lg%10d",deltaT_min,Istrain);
    }
}
//File format for Radioss 120
FORMAT(radioss120)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE6/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SOL_ORTH/%d",_ID_);
    }
    CARD("%-100s", TITLE);
//
    ASSIGN(Inpts_R_status,_GET_DISPLAY_STATUS(Inpts_R),EXPORT);
    ASSIGN(Inpts_S_status,_GET_DISPLAY_STATUS(Inpts_S),EXPORT);
    ASSIGN(Inpts_T_status,_GET_DISPLAY_STATUS(Inpts_T),EXPORT);
    if(IO_FLAG == 0 && (Inpts_T_status == 1 || Inpts_S_status == 1 || Inpts_R_status == 1)) {
        ASSIGN(NBP,Inpts_R*100,EXPORT);
        ASSIGN(NBP,NBP +(Inpts_S*10),EXPORT);
        ASSIGN(NBP,NBP + Inpts_T,EXPORT);
    }
    COMMENT("#   Isolid    Ismstr               Icpre               Inpts              Iframe                  Dn");
    CARD("%10d%10d          %10d          %10d          %10d%20lg",ISOLID,Ismstr,Icpre,NBP,Iframe,dn);
    ASSIGN(Inpts_NBP_status,_GET_DISPLAY_STATUS(NBP),IMPORT);
    if(IO_FLAG == 1  && Inpts_NBP_status != 0) {
        ASSIGN(Inpts_R,NBP / 100, IMPORT);
        ASSIGN(Inpts_T,NBP - (Inpts_R*100), IMPORT);
        ASSIGN(Inpts_S,Inpts_T / 10, IMPORT);
        ASSIGN(Inpts_T,Inpts_T - (Inpts_S*10), IMPORT);
    }
//
    COMMENT("#                 qa                  qb                   h");
    CARD("%20lg%20lg%20lg",qa,qb,h);
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,x)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,x)], EXPORT);
        ASSIGN(Vx, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,y)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,y)], EXPORT);
        ASSIGN(Vy, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,z)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,z)], EXPORT);
        ASSIGN(Vz, n2-n1, EXPORT);
    }
    COMMENT("#                 Vx                  Vy                  Vz   skew_ID        Ip     Iorth");
    CARD("%20lg%20lg%20lg%10d%10d%10d",Vx,Vy,Vz,SKEW_CSID,REFPLANE,ORTHTROP);
    COMMENT("#                Phi");
    CARD("%20lg",MAT_BETA);
    COMMENT("#         deltaT_min   Istrain");
    CARD("%20lg%10d",deltaT_min,Istrain);
}

//File format for Radioss 51
FORMAT(radioss51)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE6/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SOL_ORTH/%d",_ID_);
    }
    CARD("%-100s", TITLE);
//
    ASSIGN(Inpts_R_status,_GET_DISPLAY_STATUS(Inpts_R),EXPORT);
    ASSIGN(Inpts_S_status,_GET_DISPLAY_STATUS(Inpts_S),EXPORT);
    ASSIGN(Inpts_T_status,_GET_DISPLAY_STATUS(Inpts_T),EXPORT);
    if(IO_FLAG == 0 && (Inpts_T_status == 1 || Inpts_S_status == 1 || Inpts_R_status == 1)) {
        ASSIGN(NBP,Inpts_R*100,EXPORT);
        ASSIGN(NBP,NBP +(Inpts_S*10),EXPORT);
        ASSIGN(NBP,NBP + Inpts_T,EXPORT);
    }
    COMMENT("#   Isolid    Ismstr               Icpre               Inpts              Iframe                  Dn");
    CARD("%10d%10d          %10d          %10d          %10d%20lg",ISOLID,Ismstr,Icpre,NBP,Iframe,dn);
    ASSIGN(Inpts_NBP_status,_GET_DISPLAY_STATUS(NBP),IMPORT);
    if(IO_FLAG == 1  && Inpts_NBP_status != 0) {
        ASSIGN(Inpts_R,NBP / 100, IMPORT);
        ASSIGN(Inpts_T,NBP - (Inpts_R*100), IMPORT);
        ASSIGN(Inpts_S,Inpts_T / 10, IMPORT);
        ASSIGN(Inpts_T,Inpts_T - (Inpts_S*10), IMPORT);
    }
//
    COMMENT("#                 qa                  qb                   h");
    CARD("%20lg%20lg%20lg",qa,qb,h);
    if(NODE1 != NONE && NODE2!= NONE)
    {
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,x)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,x)], EXPORT);
        ASSIGN(Vx, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,y)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,y)], EXPORT);
        ASSIGN(Vy, n2-n1, EXPORT);
        ASSIGN(n1, [@getentityvalue(nodes,$NODE1,z)], EXPORT);
        ASSIGN(n2, [@getentityvalue(nodes,$NODE2,z)], EXPORT);
        ASSIGN(Vz, n2-n1, EXPORT);
    }
    COMMENT("#                 Vx                  Vy                  Vz   skew_ID        Ip     Iorth");
    CARD("%20lg%20lg%20lg%10d%10d%10d",Vx,Vy,Vz,SKEW_CSID,REFPLANE,ORTHTROP);
    COMMENT("#                Phi");
    CARD("%20lg",MAT_BETA);
    COMMENT("#         deltaT_min");
    CARD("%20lg",deltaT_min);
}

//File format for Radioss 44
FORMAT(radioss44)
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s/%d/%s",TYPE_NO,_ID_,TITLE);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    COMMENT("# Isolid  Ismstr   Iplas                                      Dn");
    CARD("%8d%8d%8d%8d",ISOLID,Ismstr,Iplas,dn);
    COMMENT("#             qa              qb               h");
    CARD("%16lg%16lg%16lg",qa,qb,h);
    COMMENT("#     Ip   Iskew             Phi");
    CARD("%8d%8d%16lg",REFPLANE,SKEW_CSID,MAT_BETA);
}

// File format for Radioss 41
FORMAT(radioss41) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s/%d/%s",TYPE_NO,_ID_,TITLE);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    COMMENT("# Isolid  Ismstr");
    CARD("%8d%8d",ISOLID,Ismstr);
    COMMENT("#             qa              qb               h");
    CARD("%16lg%16lg%16lg",qa,qb,h);
    COMMENT("#     Ip   Iskew             Phi");
    CARD("%8d%8d%16lg",REFPLANE,SKEW_CSID,MAT_BETA);
}    
