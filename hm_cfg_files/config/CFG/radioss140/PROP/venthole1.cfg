//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// KEYWORD : SUBOBJECT of AIRBAG1, COMMU1 AND FVMBAG1
// HM TYPE : AIRBAGVENTHOLES
//

ATTRIBUTES(COMMON)
{
  surf_vent      = VALUE(SETS,   "Vent holes area surface identifier") { SUBTYPES = (/SETS/SURF_IDPOOL); }
  iform          = VALUE(INT,    "Formulation flag");
  avent          = VALUE(FLOAT,  "Scale factor on vent hole area/vent hole area");
  bvent          = VALUE(FLOAT,  "Scale factor on impacted vent hole area/Bvent is reset to 0 for vent hole area");
  vent_title     = VALUE(STRING, "Vent hole title");
  tstart         = VALUE(FLOAT,  "Start time for venting");
  tstop          = VALUE(FLOAT,  "Stop time for venting");
  dpdef          = VALUE(FLOAT,  "Pressure difference to open vent hole membrane");
  dtpdef         = VALUE(FLOAT,  "Minimum duration pressure exceeds Pdef to open vent hole membrane");
  idtpdef        = VALUE(INT,    "Time delay flag when DeltaPdef is reached");
  fct_id_t       = VALUE(FUNCT,  "Porosity vs time function identifier");
  fct_id_p       = VALUE(FUNCT,  "Porosity vs pressure function identifier");
  fct_id_a       = VALUE(FUNCT,  "Porosity vs area function identifier");
  fscale_t       = VALUE(FLOAT,  "Scale factor for fct_IDt");
  fscale_p       = VALUE(FLOAT,  "Scale factor for fct_IDp");
  fscale_a       = VALUE(FLOAT,  "Scale factor for fct_IDA");
  fct_id_t_cont  = VALUE(FUNCT,  "Porosity vs time when contact function identifier");
  fct_id_p_cont  = VALUE(FUNCT,  "Porosity vs pressure when contact function identifier");
  fct_id_a_cont  = VALUE(FUNCT,  "Porosity vs impacted surface function identifier");
  fscale_t_cont  = VALUE(FLOAT,  "Scale factor for fct_IDt'");
  fscale_p_cont  = VALUE(FLOAT,  "Scale factor for fct_IDP'");
  fscale_a_cont  = VALUE(FLOAT,  "Scale factor for fct_IDA'");
  fct_id_v       = VALUE(FUNCT,  "Outflow velocity function identifier (Chemkin model, only if Iform = 2)");
  fscale_v       = VALUE(FLOAT,  "Scale factor on fct_IDv");
}

CHECK(COMMON)
{
}

DEFAULTS(COMMON)
{
  iform          = 1;
  tstart         = 0.0;
  tstop          = 1e+30;
  dpdef          = 0.0;
  dtpdef         = 0.0;
  fscale_t       = 1.0;
  fscale_p       = 1.0;
  fscale_a       = 1.0;
  fscale_t_cont  = 1.0;
  fscale_p_cont  = 1.0;
  fscale_a_cont  = 1.0;
  fscale_v       = 1.0;
}

GUI(COMMON)
{
  DATA(surf_vent);
  RADIO(iform)
  {
      ADD(1, "Isenthalpic (default)");
      ADD(2, "Chemkin");
      ADD(4, "Isenthalpic with possible gas (mat_ID) flow in");
  }
  SCALAR(avent) {
      if (surf_vent == NONE)   { TITLE="Vent hole area";                           DIMENSION="area"; }
      else                     { TITLE="Scale factor on vent hole area";           DIMENSION="DIMENSIONLESS"; }
  }
  SCALAR(bvent) {
      if (surf_vent == NONE)   { TITLE="Bvent is reset to 0 for vent hole area";   DIMENSION="area"; }
      else                     { TITLE="Scale factor on impacted vent hole area";  DIMENSION="DIMENSIONLESS"; }
  }
  SCALAR(vent_title)      {DIMENSION="DIMENSIONLESS";}
  SCALAR(tstart)          {DIMENSION="t";}
  SCALAR(tstop)           {DIMENSION="t";}
  SCALAR(dpdef)           {DIMENSION="pressure";}
  SCALAR(dtpdef)          {DIMENSION="t";}
  RADIO(idtpdef)
  {
      ADD(0, "Pressure should be over DeltaPdef during a DeltatPdef cumulative time to activate venting");
      ADD(1, "Venting is activated DeltatPdef after DeltaPdef is reached");
  }
  DATA(fct_id_t);
  DATA(fct_id_p);
  DATA(fct_id_a);
  SCALAR(fscale_t)        {DIMENSION="DIMENSIONLESS";}
  SCALAR(fscale_p)        {DIMENSION="DIMENSIONLESS";}
  SCALAR(fscale_a)        {DIMENSION="DIMENSIONLESS";}
  DATA(fct_id_t_cont);
  DATA(fct_id_p_cont);
  DATA(fct_id_a_cont);
  SCALAR(fscale_t_cont)   {DIMENSION="DIMENSIONLESS";}
  SCALAR(fscale_p_cont)   {DIMENSION="DIMENSIONLESS";}
  SCALAR(fscale_a_cont)   {DIMENSION="DIMENSIONLESS";}
  if (iform == 2)
  {
    DATA(fct_id_v);
    SCALAR(fscale_v)      {DIMENSION="velocity";}
  }
}

FORMAT(radioss100) 
{
  COMMENT("# surf_IDv     Iform               Avent               Bvent");
  CARD("%10d%10d%20lg%20lg",surf_vent,iform,avent,bvent);
  //
  COMMENT("#             Tstart               Tstop               dPdef              dtPdef             IdtPdef");
  CARD("%20lg%20lg%20lg%20lg          %10d",tstart,tstop,dpdef,dtpdef,idtpdef);
  //
  COMMENT("#  fct_IDt   fct_IDP   fct_IDA                       Fscalet             FscaleP             FscaleA");
  CARD("%10d%10d%10d          %20lg%20lg%20lg",fct_id_t,fct_id_p,fct_id_a,fscale_t,fscale_p,fscale_a);
  //
  COMMENT("# fct_IDt'  fct_IDP'  fct_IDA'                      Fscalet'            FscaleP'            FscaleA'");
  CARD("%10d%10d%10d          %20lg%20lg%20lg",fct_id_t_cont,fct_id_p_cont,fct_id_a_cont,fscale_t_cont,fscale_p_cont,fscale_a_cont);
  //
  if (iform == 2) 
  {
    COMMENT("#fct_IDvvh                     Fscalevvh");
    CARD("%10d          %20lg",fct_id_v,fscale_v);
  }  
  else
  {
    ASSIGN(fct_id_v, 0,IMPORT);
    ASSIGN(fscale_v, 0,IMPORT);
  }
}

FORMAT(radioss140) 
{
  COMMENT("# surf_IDv     Iform               Avent               Bvent                              vent_title");
  CARD("%10d%10d%20lg%20lg                    %20s",surf_vent,iform,avent,bvent,vent_title);
  //
  COMMENT("#             Tstart               Tstop               dPdef              dtPdef             IdtPdef");
  CARD("%20lg%20lg%20lg%20lg          %10d",tstart,tstop,dpdef,dtpdef,idtpdef);
  //
  COMMENT("#  fct_IDt   fct_IDP   fct_IDA                       Fscalet             FscaleP             FscaleA");
  CARD("%10d%10d%10d          %20lg%20lg%20lg",fct_id_t,fct_id_p,fct_id_a,fscale_t,fscale_p,fscale_a);
  //
  COMMENT("# fct_IDt'  fct_IDP'  fct_IDA'                      Fscalet'            FscaleP'            FscaleA'");
  CARD("%10d%10d%10d          %20lg%20lg%20lg",fct_id_t_cont,fct_id_p_cont,fct_id_a_cont,fscale_t_cont,fscale_p_cont,fscale_a_cont);
  //
  if (iform == 2) 
  {
    COMMENT("#fct_IDvvh                     Fscalevvh");
    CARD("%10d          %20lg",fct_id_v,fscale_v);
  }  
  else
  {
    ASSIGN(fct_id_v, 0,IMPORT);
    ASSIGN(fscale_v, 0,IMPORT);
  }
}
