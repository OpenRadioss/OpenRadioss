//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Slipring Setup File
// 

ATTRIBUTES {
  // Single values
  EL_ID1          = VALUE(ELEMS, "First connected element");
  EL_ID2          = VALUE(ELEMS, "Second connected element");
  Node_ID         = VALUE(NODE, "Anchorage node");
  Node_ID2        = VALUE(NODE, "Direction node");
  Sens_ID         = VALUE(SENSOR, "Sensor id");
  Flow_flag       = VALUE(INT, "Flow flag");
  A               = VALUE(FLOAT, "Orientation Friction factor"); 
  Ed_factor       = VALUE(FLOAT, "Exponential decay factor");
  Fct_ID1         = VALUE(FUNCT, "Dynamic friction coefficient vs time");
  Fct_ID2         = VALUE(FUNCT, "Dynamic friction coefficient vs normal force");
  Fricd           = VALUE(FLOAT, "DYnamic friction coefficient"); 
  Xscale1         = VALUE(FLOAT, "DYnamic abcissa time scale factor");
  Xscale2         = VALUE(FLOAT, "DYnamic abcissa force scale factor");
  Yscale2         = VALUE(FLOAT, "DYnamic ordinate force scale factor");
  Fct_ID3         = VALUE(FUNCT, "Static friction coefficient vs time");
  Fct_ID4         = VALUE(FUNCT, "Static friction coefficient vs normal force");
  Frics           = VALUE(FLOAT, "Static friction coefficient"); 
  Xscale3         = VALUE(FLOAT, "Static abcissa time scale factor");
  Xscale4         = VALUE(FLOAT, "Static abcissa force scale factor");
  Yscale4         = VALUE(FLOAT, "Static ordinate force scale factor");
  displayname     = VALUE(STRING, "Title");
}

DEFAULTS {

}

GUI(COMMON)
{
// Solver attributes 
    mandatory:
        SCALAR(Ed_factor) { DIMENSION="velocity_inverse"; }
        SCALAR(Xscale1) { DIMENSION="t"; }
        SCALAR(Xscale2) { DIMENSION="force"; }
        SCALAR(Xscale3) { DIMENSION="t"; } 
        SCALAR(Xscale4) { DIMENSION="force"; }  
}


FORMAT(radioss2022) {
  HEADER("/SLIPRING/SPRING/%d",_ID_);
  CARD("%-100s", displayname);
   
  COMMENT("#   El1_ID    El2_ID   Node_ID  Node_ID2   Sens_ID Flow_flag                   A           Ed_factor");
  CARD("%10d%10d%10d%10d%10d%10d%20lg%20lg",EL_ID1,EL_ID2,Node_ID,Node_ID2,Sens_ID,Flow_flag,A,Ed_factor);

  COMMENT("#  Fct_ID1   Fct_ID2               Fricd             Xscale1             Yscale2             Xscale2");
  CARD("%10d%10d%20lg%20lg%20lg%20lg",Fct_ID1,Fct_ID2,Fricd,Xscale1,Yscale2,Xscale2);

  COMMENT("#  Fct_ID3   Fct_ID4               Frics             Xscale3             Yscale4             Xscale4");
  CARD("%10d%10d%20lg%20lg%20lg%20lg",Fct_ID3,Fct_ID4,Frics,Xscale3,Yscale4,Xscale4);
}
