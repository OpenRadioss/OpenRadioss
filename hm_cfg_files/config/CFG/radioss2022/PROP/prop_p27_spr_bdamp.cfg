//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Property SPR_BDAMP Type27

ATTRIBUTES(COMMON)
{
    MASS                                    = VALUE(FLOAT," Spring Mass ");
    ISENSOR                                 = VALUE(SENSOR," Sensor Identifier ") {SUBTYPES=(/SENSOR/SENSOR_DEFINE);}
    ISFLAG                                  = VALUE(INT," Sensor Flag ");
    Ifail                                   = VALUE(INT,  " Failure model flag ");
    Ileng                                   = VALUE(INT,  " Input Per Unit Length Flag ");
    Itens                                   = VALUE(INT,  " Flag for tension behavior ");
    STIFF                                   = VALUE(FLOAT," Linear loading and unloading stiffness ");
    DAMP                                    = VALUE(FLOAT," Damping coefficient ");
    GAP                                     = VALUE(FLOAT," Minimum gap before activation ");
    NEXP                                    = VALUE(FLOAT," Exponent for non-linear stiffness ");
    FSMOOTH                                 = VALUE(INT,  " Flag for spring force filtering ");    
    FCUT                                    = VALUE(FLOAT," Cutoff frequency for spring force filtering ");
    MIN_RUP                                 = VALUE(FLOAT," Negative failure limit");
    MAX_RUP                                 = VALUE(FLOAT," Positive failure limit");
    FUN1                                    = VALUE(FUNCT," Function identifier defining nonlinear stiffness ");
    FUN2                                    = VALUE(FUNCT," Function identifier defining damping as a function of spring velocity ");   
    ASCALE1                                 = VALUE(FLOAT," Abscissa scale factor for the stiffness function ");
    FSCALE1                                 = VALUE(FLOAT," Ordinate scale factor for the stiffness function ");
    ASCALE2                                 = VALUE(FLOAT," Abscissa scale factor for the stiffness function ");
    FSCALE2                                 = VALUE(FLOAT," Ordinate scale factor for the stiffness function ");
    
    //Attributes for HM usage
    KEYWORD_STR                             = VALUE(STRING,"Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,"Entity_Comments");
    CommentEnumField                        = VALUE(INT,"User Comments");
    Prop_Name_OR_Type                       = VALUE(INT,"");
    IO_FLAG                                 = VALUE(INT,"");
    TYPE_NO                                 = VALUE(STRING,"");
    TITLE                                   = VALUE(STRING,"");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                        = 9000;
    MASS                               =   -1;
    ISENSOR                            =   -1;
    ISFLAG                             =   -1;
    Ifail                              =   -1;
    Ileng                              =   -1;
    Itens                              =   -1;
    STIFF                              =   -1;
    DAMP                               =   -1;
    GAP                                =   -1;
    NEXP                               =   -1;
    FSMOOTH                            =   -1;
    FCUT                               =   -1;
    MIN_RUP                            =   -1;
    MAX_RUP                            =   -1;
    FUN1                               =   -1;
    FUN2                               =   -1;
    ASCALE1                            =   -1;
    FSCALE1                            =   -1;
    ASCALE2                            =   -1; 
    FSCALE2                            =   -1;
    Prop_Name_OR_Type                  =   -1;
    TITLE                              =   -1;
    TYPE_NO                            =   -1;
    IO_FLAG                            =   -1;
}

CHECK(COMMON)
{
    MASS                               >  0.0;
}

DEFAULTS(COMMON)
{
    Prop_Name_OR_Type                  = 0;
}

GUI(COMMON)
{
 optional:
    RADIO(CommentEnumField)
    {
       ENUM_VALUE_FLAG=TRUE;
       ADD(1, "1:Hide in Menu/Export");
       ADD(2, "2:Show in Menu/Export");
       ADD(3, "3:Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Prop_Name_OR_Type == 2)
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/TYPE27/");

    }
    else
    {
        ASSIGN(KEYWORD_STR, "/PROP");
        ASSIGN(KEYWORD_STR, "/SPR_BDAMP/");
    }
 mandatory:
    SCALAR(MASS)    { if(Ileng==0) { DIMENSION="m";} else { DIMENSION="lineic_mass"; } }
    DATA(ISENSOR)   {SUBTYPES=(/SENSOR/SENSOR_DEFINE);   }
    RADIO(ISFLAG)
    {
       ADD(0, "0:Spring Element Activated");
       ADD(1, "1:Spring Element Deactivated");
       ADD(2, "2:Spring Element Activated or Deactivated");
    }
    RADIO(Ileng)
    {
       ADD(0, "0:Force in the Spring is Computed");
       ADD(1, "1:All Input are Per Unit Length");
    }     
    SCALAR(STIFF)   { if(Ileng==0) { DIMENSION="translation_stiffness";} else { DIMENSION="force"; } }
 optional:
    SCALAR(DAMP)    { if(Ileng==0) { DIMENSION="massFlux";} else { DIMENSION="QUANTITY OF MOVEMENT"; } }
    SCALAR(GAP)     { if(Ileng==0) { DIMENSION="l";} else { DIMENSION="DIMENSIONLESS"; } }
    if (Ifail == 1) {
      SCALAR(MIN_RUP)   { if(Ileng==0) { DIMENSION="l";} else { DIMENSION="DIMENSIONLESS"; } }
      SCALAR(MAX_RUP)   { if(Ileng==0) { DIMENSION="l";} else { DIMENSION="DIMENSIONLESS"; } }  
    } else if (Ifail == 2) {
      SCALAR(MIN_RUP)   { DIMENSION="force";} 
      SCALAR(MAX_RUP)   { DIMENSION="force";}
    } 
    SCALAR(ASCALE1)     { if(Ileng==0) { DIMENSION="l";} else { DIMENSION="DIMENSIONLESS"; } }
    SCALAR(FSCALE1)     { DIMENSION="force";}
    SCALAR(ASCALE2)     { if(Ileng==0) { DIMENSION="velocity";} else { DIMENSION="f"; } }
    SCALAR(FSCALE2)     { DIMENSION="force";}  
    SCALAR(NEXP)        { DIMENSION="DIMENSIONLESS";}
    SCALAR(FCUT)        { DIMENSION="f";}
    
}

// File format for Radioss 51
FORMAT(radioss2022) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/PROP/%4s",TYPE_NO);
        if(TYPE_NO == "TYPE" )
        {
            ASSIGN(Prop_Name_OR_Type,2);
        }
    }
    else if(IO_FLAG == 0 && Prop_Name_OR_Type == 2)
    {
        HEADER("/PROP/TYPE27/%d",_ID_);
    }
    else
    {
        HEADER("/PROP/SPR_BDAMP/%d",_ID_);
    }
    CARD("%-100s", TITLE);
    COMMENT("#               Mass                                 sens_ID    Isflag     Ileng     Itens     Ifail");
    CARD("%20lg%30s%10d%10d%10d%10d%10d",MASS,_BLANK_,ISENSOR,ISFLAG,Ileng,Itens,Ifail);
    //
    COMMENT("#                  K                   C                   n           Delta_min           Delta_max");
    CARD("%20lg%20lg%20lg%20lg%20lg",STIFF,DAMP,NEXP,MIN_RUP,MAX_RUP);
    //
    COMMENT("#                gap                                                     Fsmooth                Fcut");
    CARD("%20lg%50s%10d%20lg",GAP,_BLANK_,FSMOOTH,FCUT);
    //
    COMMENT("#  fct_ID1   fct_ID2             Ascale1             Fscale1             Ascale2             Fscale2");
    CARD("%10d%10d%20lg%20lg%20lg%20lg",FUN1,FUN2,ASCALE1,FSCALE1,ASCALE2,FSCALE2);
}
