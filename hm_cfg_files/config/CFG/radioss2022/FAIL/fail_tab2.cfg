//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//FAIL/TAB2 : Tabulated failure model Version 2
//

ATTRIBUTES(COMMON){ 

        IO_FLAG            = VALUE(INT,   "Import/Export flag");
        _HMCOMMENTSFLAG    = VALUE(INT,   "Write HM Comments");
        mat_id             = VALUE(MAT,   "Material");

        EPSF_ID            = VALUE(FUNCT, "Failure strain table");
        FCRIT              = VALUE(FLOAT, "Scale factor for failure strain table");
        FAILIP             = VALUE(INT,   "Number of failed integration points prior to solid element deletion");
        PTHK               = VALUE(FLOAT, "Percentage of failed layers in thickness prior to shell element deletion");

        N                  = VALUE(FLOAT, "Damage accumulation parameter n");    
        DCRIT              = VALUE(FLOAT, "Critical accumulated damage value");
        INST_ID            = VALUE(FUNCT, "Instability strain table");
        ECRIT              = VALUE(FLOAT, "Scale factor for instability strain table");

        FCT_EXP            = VALUE(FUNCT, "Fading exponent function identifier");
        EXP_REF            = VALUE(FLOAT, "Reference element size for fading exponent");
        EXP                = VALUE(FLOAT, "Fading exponent scale factor");

        TAB_EL             = VALUE(FUNCT, "Element size factor table identifier");
        IREG               = VALUE(INT,   "Element size dependency flag");
        EL_REF             = VALUE(FLOAT, "Reference element size");
        SR_REF1            = VALUE(FLOAT, "Reference strain rate for element size table");  
        FSCALE_EL          = VALUE(FLOAT, "Element size function scale factor");

        SHRF               = VALUE(FLOAT, "Stress triaxiality lower boundary for element size regularization");
        BIAXF              = VALUE(FLOAT, "Stress triaxiality upper boundary for element size regularization");

        FCT_SR             = VALUE(FUNCT, "Strain rate factor function identifier");
        SR_REF2            = VALUE(FLOAT, "Reference strain rate");  
        FSCALE_SR          = VALUE(FLOAT, "Strain rate function scale factor");
        CJC                = VALUE(FLOAT, "Johnson-Cook strain rate factor");     

        FCT_DLIM           = VALUE(FUNCT, "Damage limit function identifier");
        FSCALE_DLIM        = VALUE(FLOAT, "Damage limit scale factor");
    
        ID_CARD_EXIST      = VALUE(BOOL,"Give an Id");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
         IO_FLAG=-1;
         _HMCOMMENTSFLAG=-1;
}

DEFAULTS(COMMON) {

}

GUI(COMMON){
        SCALAR (FCRIT)         {DIMENSION="DIMENSIONLESS";}
        SCALAR (PTHK)          {DIMENSION="DIMENSIONLESS";}
        SCALAR (N)             {DIMENSION="DIMENSIONLESS";}
        SCALAR (DCRIT)         {DIMENSION="DIMENSIONLESS";}
        SCALAR (ECRIT)         {DIMENSION="DIMENSIONLESS";}
        SCALAR (EXP_REF)       {DIMENSION="l"            ;}
        SCALAR (EXP)           {DIMENSION="DIMENSIONLESS";}
        SCALAR (EL_REF)        {DIMENSION="l"            ;}
        SCALAR (SR_REF1)       {DIMENSION="f"            ;}
        SCALAR (FSCALE_EL)     {DIMENSION="DIMENSIONLESS";}
        SCALAR (SHRF)          {DIMENSION="DIMENSIONLESS";}
        SCALAR (BIAXF)         {DIMENSION="DIMENSIONLESS";}
        SCALAR (SR_REF2)       {DIMENSION="f"            ;}
        SCALAR (FSCALE_SR)     {DIMENSION="DIMENSIONLESS";}
        SCALAR (CJC)           {DIMENSION="DIMENSIONLESS";}
        SCALAR (FSCALE_DLIM)   {DIMENSION="DIMENSIONLESS";}
}

FORMAT(radioss2022) 
{      
        HEADER("/FAIL/TAB2/%d",mat_id);
        //Card 1 
        COMMENT("#  EPSF_ID               FCRIT              FAILIP          PTHICKFAIL");
        CARD("%10d%20lg%10s%10d%20lg",EPSF_ID,FCRIT,_BLANK_,FAILIP,PTHK);
        //Card 2 
        COMMENT("#                  N               DCRIT   INST_ID               ECRIT");
        CARD("%20lg%20lg%10d%20lg",N,DCRIT,INST_ID,ECRIT);
        //Card 3 
        COMMENT("#  FCT_EXP             EXP_REF                 EXP");
        CARD("%10d%20lg%20lg",FCT_EXP,EXP_REF,EXP);
        //Card 4
        COMMENT("#   TAB_EL      IREG              EL_REF             SR_REF1           FSCALE_EL");
        CARD("%10d%10d%20lg%20lg%20lg",TAB_EL,IREG,EL_REF,SR_REF1,FSCALE_EL); 
        //Card 5
        COMMENT("#               SHRF               BIAXF");
        CARD("%20lg%20lg",SHRF,BIAXF); 
        //Card 6
	COMMENT("#   FCT_SR             SR_REF2           FSCALE_SR             C_JCOOK");
	CARD("%10d%10s%20lg%20lg%20lg",FCT_SR,_BLANK_,SR_REF2,FSCALE_SR,CJC);
        //Card 7
	COMMENT("# FCT_DLIM         FSCALE_DLIM");
	CARD("%10d%20lg",FCT_DLIM,FSCALE_DLIM);
        if (ID_CARD_EXIST==TRUE)
        {
          COMMENT("#  FAIL_ID") ;
        }
        FREE_CARD(ID_CARD_EXIST,"%10d",_ID_);
}