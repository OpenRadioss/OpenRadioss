//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2022 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to 
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided 
//Copyright>    that any modification to CFG by a third party must be provided back to 
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software. 
//Copyright>  
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR 
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY, 
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Failure model, SYAZWAN Setup File
// 

ATTRIBUTES(COMMON){ 

  IO_FLAG             = VALUE(INT, "Import/Export flag");
  _HMCOMMENTSFLAG     = VALUE(INT, "Write HM Comments");
  mat_id              = VALUE(MAT, "Material");

  C1                  = VALUE(FLOAT,"C1 constant");
  C2                  = VALUE(FLOAT,"C2 constant");
  C3                  = VALUE(FLOAT,"C3 constant");
  C4                  = VALUE(FLOAT,"C4 constant");
  C5                  = VALUE(FLOAT,"C5 constant");
  C6                  = VALUE(FLOAT,"C6 constant");
  FAILIP              = VALUE(INT  ,"Number of failed integration points prior to solid element deletion");

  DINIT               = VALUE(INT  ,"Estimate initial damage");
  DAM_SF              = VALUE(FLOAT,"Damage initialization scale factor");
  MAX_DAM             = VALUE(FLOAT,"Maximal damage value");
        
  INST                = VALUE(INT  ,"Incorporate instability");
  N_VAL               = VALUE(FLOAT,"N value, from Holomon Law");
  SOFTEXP             = VALUE(FLOAT,"Stress softening exponent");

  REG_FUNC            = VALUE(INT  ,"Element size dependency function identifier");
  REF_LEN             = VALUE(FLOAT,"Reference element size");
  REG_SCALE           = VALUE(FLOAT,"Regularization function scale factor");

  ID_CARD_EXIST       = VALUE(BOOL, "Give an Id");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
  _HMCOMMENTSFLAG=-1;
}

GUI(COMMON) 
{
  SCALAR(C1)         { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(C2)         { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(C3)         { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(C4)         { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(C5)         { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(C6)         { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(DAM_SF)     { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(MAX_DAM)    { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(N_VAL)      { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(SOFTEXP)    { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(REF_LEN)    { DIMENSION = "l";             }
  SCALAR(REG_SCALE)  { DIMENSION = "DIMENSIONLESS"; }
}

FORMAT(radioss2022) { 
  HEADER("/FAIL/SYAZWAN/%d",mat_id);
  COMMENT("#                 C1                  C2                  C3                  C4                  C5");
  CARD("%20lg%20lg%20lg%20lg%20lg",C1,C2,C3,C4,C5);
  COMMENT("#                 C6              FAILIP");
  CARD("%20lg%10s%10d",C6,_BLANK_,FAILIP);
  COMMENT("#           DAM_INIT              DAM_SF             DAM_MAX");
  CARD("%10s%10d%20lg%20lg",_BLANK_,DINIT,DAM_SF,MAX_DAM);
  COMMENT("#               INST               N_VAL             SOFTEXP");
  CARD("%10s%10d%20lg%20lg",_BLANK_,INST,N_VAL,SOFTEXP);
  COMMENT("#             FCT_EL              EL_REF              ELSCAL");
  CARD("%10s%10d%20lg%20lg",_BLANK_,REG_FUNC,REF_LEN,REG_SCALE);
  if (ID_CARD_EXIST==TRUE)
  {
    COMMENT("#  FAIL_ID") ;
  }
  FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);
}
