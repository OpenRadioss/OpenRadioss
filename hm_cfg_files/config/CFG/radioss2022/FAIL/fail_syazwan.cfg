//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2022 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to 
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided 
//Copyright>    that any modification to CFG by a third party must be provided back to 
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software. 
//Copyright>  
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR 
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY, 
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Failure model, SYAZWAN Setup File
// 

ATTRIBUTES(COMMON){ 

	_HMCOMMENTSFLAG  					= VALUE(INT, "Write HM Comments");
	mat_id           					= VALUE(MAT,  "Material");

	C1       						= VALUE(FLOAT,"C1 constant");
	C2      						= VALUE(FLOAT,"C2 constant");
	C3      						= VALUE(FLOAT,"C3 constant");
	C4       						= VALUE(FLOAT,"C4 constant");
	C5      						= VALUE(FLOAT,"C5 constant");
	C6      						= VALUE(FLOAT,"C6 constant");
	EPSMIN      						= VALUE(FLOAT,"EPSMIN constant");
	PTHCKF        					        = VALUE(FLOAT,"Percentage of through thickness integration points failure limit");

	STRAIN2DAM                                              = VALUE(INT,"Estimate Damage from strain tensor");
        DAM_SF                                                  = VALUE(FLOAT,"Damage scale factor");
	MAX_DAM                                                 = VALUE(FLOAT,"Max damage limit");
        
	INST							= VALUE(INT,"Incorporate instability");
	N_VAL                                                   = VALUE(FLOAT,"N value, from Holomon Law");
	SOFTEXP                                                 = VALUE(FLOAT,"Stress softening exponent");

	REG_FUNC						= VALUE(INT,"Regularization curve ID");
	REF_LEN                                                 = VALUE(FLOAT,"Reference Element Length");

	ID_CARD_EXIST						= VALUE(BOOL, "Give an Id");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
	_HMCOMMENTSFLAG=-1;
}

GUI(COMMON) 
{

 
  SCALAR(C1)    { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(C2)    { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(C3)    { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(C4)    { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(C5)    { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(C6)    { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(EPSMIN)    { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(PTHCKF)        { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(STRAIN2DAM)        { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(DAM_SF)        { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(MAX_DAM)        { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(INST)        { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(N_VAL)        { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(SOFTEXP)        { DIMENSION = "DIMENSIONLESS"; }

  SCALAR(REF_LEN)        { DIMENSION="l"; }
  SCALAR(REG_FUNC)        { DIMENSION = "DIMENSIONLESS"; }


}


/*
DEFINITIONS(COMMON) {
  SUPPORTING=(MAT);
}
DEFAULTS(COMMON) {
  S_Flag=1;
}

GUI(COMMON) {
  DATA(MAT) {SUBTYPES=(/MAT/COWPER,
                       /MAT/DAMA,
                       /MAT/HILL,
                       /MAT/HILL_TAB,
                       /MAT/HYD_JCOOK,
                       /MAT/HYDPLA,
                       /MAT/LAW23,
                       /MAT/PLAS_BRIT,
                       /MAT/PLAS_JOHNS,
                       /MAT/PLAS_TAB,
                       /MAT/PLAS_T3,
                       /MAT/PLAS_ZERIL,
                       /MAT/STEINB,
                       /MAT/ZHAO,
                       /MAT/LAW80,
                       /MAT/LAW83,
                       /MAT/LAW84,
                       /MAT/BARLAT2000); }

  SCALAR(C1) { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(C2) { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(C3) { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(C4) { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(C5) { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(C6) { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(EPSMIN) { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(PTHCKF)  { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(STRAIN2DAM)        { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(DAM_SF)        { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(MAX_DAM)        { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(INST)        { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(N_VAL)        { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(SOFTEXP)        { DIMENSION = "DIMENSIONLESS"; }

  SCALAR(REF_LEN)        { DIMENSION="l"; }
  SCALAR(REG_FUNC)        { DIMENSION = "DIMENSIONLESS"; }

  //
  //
  FLAG(ID_CARD_EXIST);
}

*/
FORMAT(radioss2018) { 
	HEADER("/FAIL/SYAZWAN/%d",mat_id);
	COMMENT("#                 C1                  C2                  C3                  C4                  C5");
	CARD("%20lg%20lg%20lg%20lg%20lg",C1,C2,C3,C4,C5);

	COMMENT("#                 C6              EPSMIN              PTHCKF             REF_LEN            REG_FUNC");
	CARD("%20lg%20lg%20lg%20lg%20lg",C6,EPSMIN,PTHCKF,REF_LEN,REG_FUNC);

        COMMENT("#         STRAIN2DAM              DAM_SF             MAX_DAM");
        CARD("%20lg%20lg%20lg",STRAIN2DAM,DAM_SF,MAX_DAM);

        COMMENT("#               INST               N_VAL             SOFTEXP");
        CARD("%20lg%20lg%20lg",INST,N_VAL,SOFTEXP);
	
	if (ID_CARD_EXIST==TRUE)
	{
		COMMENT("#  FAIL_ID") ;
	}
	FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);
}


