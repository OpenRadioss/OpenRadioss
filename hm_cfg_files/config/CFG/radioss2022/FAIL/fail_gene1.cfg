//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Failure model, GENE1 Setup File
// 

ATTRIBUTES(COMMON){ 

	_HMCOMMENTSFLAG  		= VALUE(INT,  "Write HM Comments");
	id   		                = VALUE(INT,  "Id of this Card") ;
	mat_id           		= VALUE(MAT,  "Material");
        //	
        MAT_MINPRES                     = VALUE(FLOAT,"Minimum pressure (positive in compression)");
        MAT_MAXPRES                     = VALUE(FLOAT,"Maximal pressure (positive in compression)");
        MAT_SIGP1                       = VALUE(FLOAT,"Maximal principal stress");
        MAT_TMAX                        = VALUE(FLOAT,"Failure time");
        MAT_DTMIN                       = VALUE(FLOAT,"Minimum time step");
        //
        fct_IDsm                        = VALUE(FUNCT,"Function identifier of the maximum equivalent stress versus strain rate");
        MAT_EPSDSM                      = VALUE(FLOAT,"Reference strain rate value for fct_IDsm");
        MAT_SIGVM                       = VALUE(FLOAT,"Ordinate scale factor for fct_IDsm or maximum equivalent stress is fct_IDsm is not defined");
        MAT_SIGTH                       = VALUE(FLOAT,"Initial fracture stress for Tuler-Butcher criterion");
        MAT_KF                          = VALUE(FLOAT,"Critical value of the damage integral for Tuler-Butcher criterion");
        //
        fct_IDps                        = VALUE(FUNCT,"Function identifier of the maximum principal strain versus strain rate");
        MAT_EPSDPS                      = VALUE(FLOAT,"Reference strain rate value for fct_IDps");
        MAT_MAXEPS                      = VALUE(FLOAT,"Ordinate scale factor for fct_IDps or maximum principal strain is fct_IDps is not defined");
        MAT_EFFEPS                      = VALUE(FLOAT,"Maximum effective strain");
        MAT_VOLEPS                      = VALUE(FLOAT,"Maximum volumetric strain");
        //
        MAT_MINEPS                      = VALUE(FLOAT,"Minimum principal strain");
        MAT_EPSSH                       = VALUE(FLOAT,"Tensorial shear strain at failure");
        fct_IDg12                       = VALUE(FUNCT,"Function identifier of the maximum in-plane shear strain gamma12 versus element size");        
        fct_IDg13                       = VALUE(FUNCT,"Function identifier of the maximum in-plane shear strain gamma13 versus element size");        
        fct_IDe1c                       = VALUE(FUNCT,"Function identifier of the maximum in-plane major strain versus element size");        
        //
        tab_IDfld                       = VALUE(TABLE,"Table or function identifier of the Forming Limit Diagram");
	Itab                            = VALUE(INT,  "Table dependency type (used only if tab_IDfld is a table)");        
        MAT_EPSDFLD                     = VALUE(FLOAT,"Reference strain rate value for tab_IDfld");        
        MAT_NSTEP                       = VALUE(INT,  "Number of cycles for the stress reduction for stress reduction of the FLD criteria");
        Ismooth                         = VALUE(INT,  "Tabulated function interpolation flag");
        Istrain                         = VALUE(INT,  "Engineering / True input strain flag");
        MAT_THIN                        = VALUE(FLOAT,"Thinning failure value");        
        //
        MAT_VOLFRAC                     = VALUE(FLOAT,"Volume fraction of the solid element to reach before the element is deleted");                
	Pthk   		                = VALUE(FLOAT,"Element suppression criterion (for shells only) :% of thickness in normal direction to delete the element");        
        MAT_NCS                         = VALUE(INT,  "Number of conditions to reach before the element is deleted");       
        MAT_MAXTEMP                     = VALUE(FLOAT,"Maximum temperature");                        
        //
	fct_IDel                        = VALUE(FUNCT,"Element size scale factor function identifier for the criteria Pmin, Pmax, SigP1_max, Sig_max, Sigr, K, EpsPS_max, Eps_eff, Eps_vol, Eps_min, Shear, Tab_IDfld. and Thinning.");
	Fscale_el                       = VALUE(FLOAT,"Element size function scale factor for fct_IDel, Tab_IDfld (Itab=2), fct_IDg12, fct_IDg23, fct_IDg13 and fct_IDe1c.");
	El_ref				= VALUE(FLOAT,"Reference element size for fct_IDel, Tab_IDfld (Itab=2), fct_IDg12, fct_IDg23, fct_IDg13 and fct_IDe1c.");
        //	
	ID_CARD_EXIST	 		= VALUE(BOOL, "Give an Id");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
	_HMCOMMENTSFLAG=-1;
}

GUI(COMMON) {
mandatory:
    SCALAR(MAT_MINPRES)               { DIMENSION="pressure";         }        
    SCALAR(MAT_MAXPRES)               { DIMENSION="pressure";         }
    SCALAR(MAT_SIGP1)                 { DIMENSION="pressure";         }    
    SCALAR(MAT_TMAX)                  { DIMENSION="t";                }    
    SCALAR(MAT_DTMIN)                 { DIMENSION="t";                }    
    //
    SCALAR(MAT_EPSDSM)                { DIMENSION="f";                }     
    SCALAR(MAT_SIGVM)                 { DIMENSION="pressure";         }
    SCALAR(MAT_SIGTH)                 { DIMENSION="pressure";         }
    SCALAR(MAT_KF)                    { DIMENSION="dynamicviscosity"; }
    //
    SCALAR(MAT_EPSDPS)                { DIMENSION="f";                }     
    SCALAR(MAT_MAXEPS)                { DIMENSION="DIMENSIONLESS";    }
    SCALAR(MAT_EFFEPS)                { DIMENSION="DIMENSIONLESS";    }
    SCALAR(MAT_VOLEPS)                { DIMENSION="DIMENSIONLESS";    }
    //       
    SCALAR(MAT_MINEPS)                { DIMENSION="DIMENSIONLESS";    }        
    SCALAR(MAT_EPSSH)                 { DIMENSION="DIMENSIONLESS";    }
    //
    SCALAR(Itab)                      { DIMENSION="DIMENSIONLESS";    }  
    SCALAR(MAT_EPSDFLD)               { DIMENSION="f";                }  
    SCALAR(MAT_NSTEP)                 { DIMENSION="DIMENSIONLESS";    }  
    SCALAR(Ismooth)                   { DIMENSION="DIMENSIONLESS";    }  
    SCALAR(Istrain)                   { DIMENSION="DIMENSIONLESS";    }  
    //
    SCALAR(MAT_VOLFRAC)               { DIMENSION="DIMENSIONLESS";    }
    SCALAR(Pthk)                      { DIMENSION="DIMENSIONLESS";    }
    SCALAR(MAT_NCS)                   { DIMENSION="DIMENSIONLESS";    }  
    SCALAR(MAT_MAXTEMP)               { DIMENSION="k";                }
    //
    SCALAR(Fscale_el)                 { DIMENSION="DIMENSIONLESS";    }
    SCALAR(El_ref)                    { DIMENSION="l";                }
}

FORMAT(radioss2022) {
	HEADER("/FAIL/GENE1/%d",mat_id);
	COMMENT("#               Pmin                Pmax           SigP1_max            Time_max               dtmin");
	CARD("%20lg%20lg%20lg%20lg%20lg",MAT_MINPRES,MAT_MAXPRES,MAT_SIGP1,MAT_TMAX,MAT_DTMIN);
	COMMENT("# fct_IDsm                    Eps_dot_sm             Sig_max                Sigr                   K");
	CARD("%10d%10s%20lg%20lg%20lg%20lg",fct_IDsm,_BLANK_,MAT_EPSDSM,MAT_SIGVM,MAT_SIGTH,MAT_KF);
	COMMENT("# fct_IDps                    Eps_dot_ps             Eps_max             Eps_eff             Eps_vol");
	CARD("%10d%10s%20lg%20lg%20lg%20lg",fct_IDps,_BLANK_,MAT_EPSDPS,MAT_MAXEPS,MAT_EFFEPS,MAT_VOLEPS);	
        COMMENT("#            Eps_min               Eps_s fct_IDg12 fct_IDg13 fct_IDe1c");
	CARD("%20lg%20lg%10d%10d%10d",MAT_MINEPS,MAT_EPSSH,fct_IDg12,fct_IDg13,fct_IDe1c);
	COMMENT("#tab_IDfld      Itab         Eps_dot_fld     Nstep   Ismooth   Istrain                      Thinning");
	CARD("%10d%10d%20lg%10d%10d%10d%10s%20lg",tab_IDfld,Itab,MAT_EPSDFLD,MAT_NSTEP,Ismooth,Istrain,_BLANK_,MAT_THIN);
        COMMENT("#            Volfrac          Pthickfail       NCS                      Temp_max");
	CARD("%20lg%20lg%10d%10s%20lg",MAT_VOLFRAC,Pthk,MAT_NCS,_BLANK_,MAT_MAXTEMP);	
	COMMENT("# fct_IDel                     Fscale_el              El_ref");
	CARD("%10d%10s%20lg%20lg",fct_IDel,_BLANK_,Fscale_el,El_ref);
	if (ID_CARD_EXIST==TRUE)
	{
	 COMMENT("#  FAIL_ID") ;
	}
	FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);	
}	
