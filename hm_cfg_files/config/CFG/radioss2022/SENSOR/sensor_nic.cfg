//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// /SENSOR NIC_NIJ
//

ATTRIBUTES(COMMON)
{
//  Sensor_Type  = VALUE(INT,  "Sensor type keyword");
    Tdelay       = VALUE(FLOAT,"Time delay");
    Tmin         = VALUE(FLOAT,    "Minimum time duration before activation when criteria is reached");
    //
    Spring_Id    = VALUE(COMPONENT,"Spring identifier for NIC-Nij criterion monitoring");
    Skew_Id      = VALUE(SYSTEM,   "Local skew identifier");
    NIJ_max      = VALUE(FLOAT,    "Maximum crit value");
    Fint_tens    = VALUE(FLOAT,    "Critical axial force in tension");
    Fint_comp    = VALUE(FLOAT,    "Critical axial force in compression");
    Mint_flex    = VALUE(FLOAT,    "Critical bending moment in flexion");
    Mint_ext     = VALUE(FLOAT,    "Critical bending moment in extension");
    CFC          = VALUE(FLOAT,    "Filter Channel Frequency Class");
    Alpha        = VALUE(FLOAT,    "Filter constant");
    Ax_Dir       = VALUE(STRING,   "Direction for axial force monitoring  (input X, Y or Z)");
    Bend_Dir     = VALUE(STRING,   "Direction for bending moment monitoring  (input X, Y or Z)");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES
//    Sensor_Type         = 8109;
    Spring_Id             = 800;
    Tmin                  = 4831;
}



DEFAULTS(COMMON)
{  
    NIJ_max   = 1.0;
    Alpha     = 2.0775;
    CFC       = 600;
}

GUI(COMMON)
{
    SCALAR(Tdelay,"Tdelay")       { DIMENSION = "t";}
    SCALAR(Tmin,"Tmin")           { DIMENSION = "t";}
//
    DATA(Spring_Id,"Spring_Id");
    SCALAR(Fint_tens,"Fint_tens") { DIMENSION = "force";}
    SCALAR(Mint_flex,"Mint_flex") { DIMENSION = "force";}
    SCALAR(Mint_ext,"Mint_ext")   { DIMENSION = "moment";}
    SCALAR(CFC,"Channel frequency class")   { DIMENSION = "f";}
}

// File format

FORMAT(radioss2022)
{
    COMMENT("#             Tdelay");
    CARD("%20lg",Tdelay);

    COMMENT("#            NIJ_max           Fint_tens           Fint_comp          Mint_flex             Mint_ext");
    CARD("%20lg%20lg%20lg%20lg%20lg",NIJ_max,Fint_tens,Fint_comp,Mint_flex,Mint_ext);

    COMMENT("#Spring_Id   Skew_Id    Ax_Dir  Bend_Dir");
    CARD("%10d%10d%10s%10s",Spring_Id,Skew_Id,Ax_Dir,Bend_Dir);

    COMMENT("#               Tmin               Alpha                 CFC");
    CARD("%20lg%20lg%20lg",Tmin,Alpha,CFC);
}
