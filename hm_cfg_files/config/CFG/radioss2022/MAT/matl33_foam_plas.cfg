//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 33 (FOAM_PLAS) Setup File
// 

ATTRIBUTES(COMMON) {
    // Support
    // NB_PARTS                             = SIZE("Number of Connected Parts"); 
    //COMPONENT                             = ARRAY[NB_PARTS](COMPONENT,"Connected Parts");
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS                            = SIZE("NUM_COMMENTS");
    CommentEnumField                        = VALUE(INT,"User Comments");
    COMMENTS                                = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    // Initial and reference densities
    MAT_RHO                                 = VALUE(FLOAT,"Initial Density");
    Refer_Rho                               = VALUE(FLOAT,"Reference Density (for lower than 14.0 version)");
    DUMMY                                   = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    MAT_REFRHO_Option                       = VALUE(INT, "RefRho_Option");
    // Other values
    MAT_E                                   = VALUE(FLOAT,"Young's Modulus");
    Itype                                   = VALUE(INT,  "Analysis Type Flag: Skeletal Behavior");
    FUN_A1                                  = VALUE(FUNCT,"Function for Yield Stress Vs. Volumetric Strain Curve");
    IFscale                                 = VALUE(FLOAT,"Y-Scale Factor for Stress in Yield Curve");
    //
    MAT_P0                                  = VALUE(FLOAT,"Initial Air Pressure");
    MAT_PHI                                 = VALUE(FLOAT,"Ratio of Foam to Polymer Density");
    MAT_GAMA0                               = VALUE(FLOAT,"Initial Volumetric Strain");
    //
    MAT_A0                                  = VALUE(FLOAT,"A Yield Parameter");
    MAT_A1                                  = VALUE(FLOAT,"B Yield Parameter");
    MAT_A2                                  = VALUE(FLOAT,"C Yield Parameter");
    MAT_SIGT_CUTOFF                         = VALUE(FLOAT,"SIG CUT OFF");
    //
  /*  if(Itype==1) {*/
        MAT_E1                              = VALUE(FLOAT,"E1 Coefficient for Young's Modulus");
        MAT_E2                              = VALUE(FLOAT,"E2 Coefficient for Young's Modulus");
        MAT_ETAN                            = VALUE(FLOAT,"Tangent Modulus");
        MAT_ETA1                            = VALUE(FLOAT,"Viscosity Coefficient in Pure Compression");
        MAT_ETA2                            = VALUE(FLOAT,"Viscosity Coefficient in Pure Shear");
 /*   }*/
    // HEAT
    Heat_Inp_opt                            = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT                         = VALUE(SUBOBJECT, "");
    // THERM_STRESS
    THERM_STRESS                            = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS                     = VALUE(SUBOBJECT, "");
    //
    Mat_Name_OR_LawNo                       = VALUE(INT, "");
    TITLE                                   = VALUE(STRING,"");
    IO_FLAG                                 = VALUE(INT, "");
    LAW_NO                                  = VALUE(STRING, "");
}


SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    COMMENTS                                = 5109;
    CommentEnumField                        = 7951;
    MAT_REFRHO_Option                       = 4285;
    MAT_RHO                                 = 118;
    Refer_Rho                               = 4229;
    IFscale                                 = 4048;
    Itype                                   = 5107;
    MAT_A0                                  = 279;
    MAT_A1                                  = 280;
    MAT_A2                                  = 281;
    MAT_E                                   = 119;
    MAT_E1                                  = 1127;
    MAT_E2                                  = 1129;
    MAT_ETA1                                = 1130;
    MAT_ETA2                                = 343;
    MAT_ETAN                                = 153;
    MAT_GAMA0                               = 1124;
    MAT_P0                                  = 1122;
    FUN_A1                                  = 45;
    MAT_PHI                                 = 1123;
    NUM_COMMENTS                            = 5110;
    //
    Mat_Name_OR_LawNo                       = 4538;
    LAW_NO                                  = -1;
    IO_FLAG                                 = -1;
    TITLE                                   = -1;
    DUMMY                                   = -1;
    //HEAT
    Heat_Inp_opt                            = 4346;
    SUBGRP_HEAT_MAT                         = -1;
    // THERM_STRESS
    THERM_STRESS                            = 4555;
    SUBGRP_THERM_STRESS                     = -1;

}

CHECK(COMMON)
{
    MAT_E                                   >0.0;
    MAT_RHO                                 >0.0;
}

DEFAULTS(COMMON) {
    IFscale                                 = 1.0;
}

PARAMETERS(PARAMETERS) {
    MAT_RHO                                 = INPUT_SCALAR(MAT_RHO,"Initial Density");   
    //
    MAT_E                                   = INPUT_SCALAR(MAT_E,"Young modulus"); 
    //
    MAT_P0                                  = INPUT_SCALAR(MAT_P0,"Initial air pressure");
    MAT_PHI                                 = INPUT_SCALAR(MAT_PHI,"Foam to polymer density");
    MAT_GAMA0                               = INPUT_SCALAR(MAT_GAMA0,"Initial volumetric strain");
    //
    if (FUN_A1 == NONE) {
        MAT_A033                            = INPUT_SCALAR(MAT_A0,"MAT_A0 yield parameter");
        MAT_A133                            = INPUT_SCALAR(MAT_A1,"MAT_A1 yield parameter");
        MAT_A233                            = INPUT_SCALAR(MAT_A2,"MAT_A2 yield parameter");
    } else {
        // ATTENTION : SCALE33 est un facteur d'echelle qui s'applique
        // a la fonction FUN_A1 ... rien a voir avec Itype mais comme on est oblige
        // de relier une variable a une donnee...
        SCMAT_A0LE33                        = INPUT_SCALAR(Itype,"Yield scale factor");
    }
    //
    if (Itype == 1) {
        MAT_E1                              = INPUT_SCALAR(MAT_E1,"MAT_E1 coef. for Young mod.");
        MAT_E2                              = INPUT_SCALAR(MAT_E2,"MAT_E2 coef. for Young mod.");
        MAT_ETAN33                          = INPUT_SCALAR(MAT_ETAN,"Tangent modulus");
        MAT_ETA1                            = INPUT_SCALAR(MAT_ETA1,"Visc. coef. in pure comp.");
        MAT_ETA2                            = INPUT_SCALAR(MAT_ETA2,"Visc. coef. in pure shear");
    }
}

DRAWABLES(COMMON) {
private:
    C1                                      = SCALAR(MAT_E);
public:
    INITIAL_DENSITY                         = SCALAR(MAT_RHO);
    YOUNG_MODULUS                           = SCALAR(MAT_E);
    SOUND_SPEED_SOLID                       = EVAL((C1/INITIAL_DENSITY)^0.5);
    SOUND_SPEED                             = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
}

GUI(COMMON) {
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Mat_Name_OR_LawNo ==2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW33/");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/FOAM_PLAS/");
    }
    FLAG(MAT_REFRHO_Option);
    if(MAT_REFRHO_Option!=FALSE)
    {
        SCALAR(Refer_Rho)      { DIMENSION="density";       }
    }
mandatory:
    SCALAR(MAT_RHO)      { DIMENSION="density";            }
mandatory:
    SCALAR(MAT_E)          { DIMENSION="pressure";      }
    RADIO(Itype)
    {
        ADD(0,"0:The Skeletal Behaviour Before Yield is Elastic");
        ADD(1,"1:The Skeletal Behaviour Before Yield is Visco-Elastic");
    }       
optional:
    DATA(FUN_A1);
    SCALAR(IFscale);
optional:
    SCALAR(MAT_P0)          { DIMENSION="pressure";      }
    SCALAR(MAT_PHI)         { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_GAMA0)       { DIMENSION="DIMENSIONLESS"; }
    //
    SCALAR(MAT_A0)          { DIMENSION="pressure";      }
    SCALAR(MAT_A1)          { DIMENSION="pressure";      }
    SCALAR(MAT_A2)          { DIMENSION="DIMENSIONLESS"; }
    SCALAR(MAT_SIGT_CUTOFF) { DIMENSION="pressure"; }
    //
    if(Itype==1) {
        SCALAR(MAT_E1)      { DIMENSION="dynamicviscosity"; }          
        SCALAR(MAT_E2)      { DIMENSION="pressure";      }          
        SCALAR(MAT_ETAN)    { DIMENSION="pressure";      }
        SCALAR(MAT_ETA1)    { DIMENSION="dynamicviscosity"; }
        SCALAR(MAT_ETA2)    { DIMENSION="dynamicviscosity"; }
    }
    // HEAT data
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }
    // THERM_STRESS
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    } 
    /*
    mandatory:
    graphical SUPPORT("Support") {
    OBJECTS=(/PART/QUAD,/PART/BRICK,/PART/TETRA4,/PART/LINEAR_3D,/PART/PENTA6,/PART/LINEAR_THICK,
    /PART/TETRA10,/PART/SHEL16,/PART/BRIC20,/PART/SPHCEL);
    ADD(PART,"Parts");
    }
    */
}
FORMAT(radioss2022) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW33/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/FOAM_PLAS/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    //
    COMMENT("#                  E        Ka  func_IDf          Fscalecurv");
    CARD("%20lg%10d%10d%20lg",MAT_E,Itype,FUN_A1,IFscale);
    //
    COMMENT("#                 P0                 Phi             Gamma_0");
    CARD("%20lg%20lg%20lg",MAT_P0,MAT_PHI,MAT_GAMA0);
    //
    COMMENT("#                  A                   B                   C            SIG_COFF");
    CARD("%20lg%20lg%20lg%20lg",MAT_A0,MAT_A1,MAT_A2,MAT_SIGT_CUTOFF);
    //
    if(Itype==1) {
        COMMENT("#                 E1                  E2                  Et            eta_comp           eta_shear");
        CARD("%20lg%20lg%20lg%20lg%20lg",MAT_E1,MAT_E2,MAT_ETAN,MAT_ETA1,MAT_ETA2);
    }
    //
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}

FORMAT(radioss90) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW33/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/FOAM_PLAS/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#              RHO_I               RHO_O");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#              RHO_I");
        CARD("%20lg",MAT_RHO);
    }
    //
    COMMENT("#                  E        Ka  func_IDf          Fscalecurv");
    CARD("%20lg%10d%10d%20lg",MAT_E,Itype,FUN_A1,IFscale);
    //
    COMMENT("#                 P0                 Phi             Gamma_0");
    CARD("%20lg%20lg%20lg",MAT_P0,MAT_PHI,MAT_GAMA0);
    //
    COMMENT("#                  A                   B                   C");
    CARD("%20lg%20lg%20lg",MAT_A0,MAT_A1,MAT_A2);
    //
    if(Itype==1) {
        COMMENT("#                 E1                  E2                  Et            eta_comp           eta_shear");
        CARD("%20lg%20lg%20lg%20lg%20lg",MAT_E1,MAT_E2,MAT_ETAN,MAT_ETA1,MAT_ETA2);
    }
    //
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
FORMAT(radioss51) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    CARD_PREREAD("                    %20s",DUMMY);
    if(DUMMY!="")
    {
        ASSIGN(MAT_REFRHO_Option,1,IMPORT);
    }
    else
    {
        ASSIGN(MAT_REFRHO_Option,0,IMPORT);
    }
    if(MAT_REFRHO_Option!=FALSE)
    {
        COMMENT("#        Init. dens.          Ref. dens.");
        CARD("%20lg%20lg",MAT_RHO,Refer_Rho);
    }
    else{
        COMMENT("#        Init. dens.");
        CARD("%20lg",MAT_RHO);
    }
    //
    COMMENT("#                  E        Ka        If              Fscale");
    CARD("%20lg%10d%10d%20lg",MAT_E,Itype,FUN_A1,IFscale);
    //
    COMMENT("#                 P0                 Phi             Gamma_0");
    CARD("%20lg%20lg%20lg",MAT_P0,MAT_PHI,MAT_GAMA0);
    //
    COMMENT("#                  A                   B                   C");
    CARD("%20lg%20lg%20lg",MAT_A0,MAT_A1,MAT_A2);
    //
    if(Itype==1) {
        COMMENT("#                 E1                  E2                  Et            eta_comp           eta_shear");
        CARD("%20lg%20lg%20lg%20lg%20lg",MAT_E1,MAT_E2,MAT_ETAN,MAT_ETA1,MAT_ETA2);
    }
    //
    if(Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
FORMAT(radioss41) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    
    COMMENT("#    Init. dens.");
    CARD("%16lg",MAT_RHO);
    COMMENT("#              E      Ka      If");
    CARD("%16lg%8d%8d",MAT_E,Itype,FUN_A1);
    //
    COMMENT("#             P0             Phi         Gamma_0");
    CARD("%16lg%16lg%16lg",MAT_P0,MAT_PHI,MAT_GAMA0);
    //
    COMMENT("#              A               B               C");
    CARD("%16lg%16lg%16lg",MAT_A0,MAT_A1,MAT_A2);
    //
    if(Itype==1) {
        COMMENT("#             E1              E2              Et        eta_comp       eta_shear");
        CARD("%16lg%16lg%16lg%16lg%16lg",MAT_E1,MAT_E2,MAT_ETAN,MAT_ETA1,MAT_ETA2);
    }
}
