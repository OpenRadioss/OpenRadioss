//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// Material law121
ATTRIBUTES(COMMON)
{
    KEYWORD_STR                = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS               = SIZE("NUM_COMMENTS");
    COMMENTS                   = ARRAY[NUM_COMMENTS](STRING,  "Entity_Comments");
    CommentEnumField           = VALUE(INT,   "User Comments");
    MAT_RHO                    = VALUE(FLOAT, "Initial Density");
    DUMMY                      = VALUE(STRING,"Dummy variable for Ref_Rho flag");
    //
    MAT_E                      = VALUE(FLOAT, "Young's Modulus");
    MAT_NU                     = VALUE(FLOAT, "Poisson's Ratio");
    MAT_Ires                   = VALUE(INT,   "Flag for return mapping");
    MAT_Ivisc                  = VALUE(INT,   "Flag for strain rate dependency formulation");
    Fcut                       = VALUE(FLOAT, "Strain rate filtering cutoff frequency");
    //
    Fct_SIG0                   = VALUE(FUNCT, "Yield function identifier for initial yield stress vs strain rate");
    Xscale_SIG0                = VALUE(FLOAT, "Strain rate scale factor for Fct_SIG0");
    Yscale_SIG0                = VALUE(FLOAT, "Yield stress scale factor for Fct_SIG0");
    //
    Fct_YOUN                   = VALUE(FUNCT, "Yield function identifier for Young modulus vs strain rate");
    Xscale_YOUN                = VALUE(FLOAT, "Strain rate scale factor for Fct_YOUN");
    Yscale_YOUN                = VALUE(FLOAT, "Young modulus scale factor for Fct_YOUN");    
    //
    Fct_TANG                   = VALUE(FUNCT, "Yield function identifier for Tangent modulus vs strain rate");
    Xscale_TANG                = VALUE(FLOAT, "Strain rate scale factor for Fct_TANG");
    MAT_TANG                   = VALUE(FLOAT, "Tangent modulus value / scale factor");
    //
    Fct_FAIL                   = VALUE(FUNCT, "Yield function identifier for failure criterion variable vs strain rate");
    Xscale_FAIL                = VALUE(FLOAT, "Strain rate scale factor for Fct_FAIL");
    Yscale_FAIL                = VALUE(FLOAT, "Failure criterion variable scale factor for Fct_FAIL");   
    TDEL                       = VALUE(FLOAT, "Strain rate scale factor for Fct_FAIL");
    MAT_Ifail                  = VALUE(INT,   "Flag for failure criterion variable");
//
    IO_FLAG                    = VALUE(INT, "");
    LAW_NO                     = VALUE(STRING, "");
    Mat_Name_OR_LawNo          = VALUE(INT,  "RADIOSS_COMMENT_FLAG");
    TITLE                      = VALUE(STRING,"");
    Heat_Inp_opt               = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT            = VALUE(SUBOBJECT, "");
    THERM_STRESS               = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS        = VALUE(SUBOBJECT, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                = 9000;
    COMMENTS                   = 5109;
    CommentEnumField           = 7951;
    NUM_COMMENTS               = 5110;
    MAT_RHO                    = 118;
    DUMMY                      = -1;
    //
    MAT_E                      = 119;
    MAT_NU                     = 120;  
    MAT_Ires                   = -1;
    MAT_Ivisc                  = -1;
    Fcut                       = -1;
    //
    Fct_SIG0                   = -1;
    Xscale_SIG0                = -1;
    Yscale_SIG0                = -1;
    //
    Fct_YOUN                   = -1;
    Xscale_YOUN                = -1;
    Yscale_YOUN                = -1;
    //
    Fct_TANG                   = -1;
    Xscale_TANG                = -1;
    MAT_TANG                   = -1;
    //
    Fct_FAIL                   = -1;
    Xscale_FAIL                = -1;
    Yscale_FAIL                = -1;
    //
    TDEL                       = -1;
    MAT_Ifail                  = -1;
    //
    LAW_NO                     = -1;
    Mat_Name_OR_LawNo          = 4538;
    IO_FLAG                    = -1;
    TITLE                      = -1;
    Heat_Inp_opt               = 4346;
    SUBGRP_HEAT_MAT            = -1;
    THERM_STRESS               = 4555;
    SUBGRP_THERM_STRESS        = -1;
}

DRAWABLES(COMMON) {
public:
    INITIAL_DENSITY                 = SCALAR(MAT_RHO);
    YOUNG_MODULUS                   = SCALAR(MAT_E);
    POISSON_RATIO                   = SCALAR(MAT_NU);
public:
    SOUND_SPEED                     = EVAL((YOUNG_MODULUS/INITIAL_DENSITY)^0.5);
private:
    G                               = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
    C1                              = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID               = EVAL(((4*G/3+C1)/INITIAL_DENSITY)^0.5);
}

CHECK(COMMON)
{
    MAT_RHO                     >0.0;
}

DEFAULTS(COMMON)
{
    Mat_Name_OR_LawNo           = 0;
}

GUI(COMMON)
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if( CommentEnumField == 2)
    {
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }
    }
    if( Mat_Name_OR_LawNo == 1)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/PLAS_RATE/");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW121/");
    }
mandatory:
    SCALAR(MAT_RHO)                                { DIMENSION = "density";}
    SCALAR(MAT_E)                                  { DIMENSION = "pressure";}
    SCALAR(MAT_NU)                                 { DIMENSION = "DIMENSIONLESS";}
    SCALAR(Fct_SIG0)                               { DIMENSION = "DIMENSIONLESS";}
    SCALAR(Xscale_SIG0)                            { DIMENSION = "f";}
    SCALAR(Yscale_SIG0)                            { DIMENSION = "pressure";}
    SCALAR(MAT_TANG)                               { DIMENSION = "pressure";}
optional:
    RADIO(MAT_Ires)
    {
        ADD(1, "1: NICE Explicit return mapping");
        ADD(2, "2: Newton-iteration cutting plane return mapping (default)");
    }
    RADIO(MAT_Ivisc)
    {
        ADD(0, "0: Scaled yield stress formulation");
        ADD(1, "1: Viscoplastic formulation");
    }
    SCALAR(Fct_YOUN)                               { DIMENSION = "DIMENSIONLESS";}
    SCALAR(Xscale_YOUN)                            { DIMENSION = "f";}
    SCALAR(Yscale_YOUN)                            { DIMENSION = "pressure";} 
    SCALAR(Fct_TANG)                               { DIMENSION = "DIMENSIONLESS";}
    SCALAR(Xscale_TANG)                            { DIMENSION = "f";}
    SCALAR(Fct_FAIL)                               { DIMENSION = "DIMENSIONLESS";}
    SCALAR(Xscale_FAIL)                            { DIMENSION = "f";}
    RADIO(MAT_Ifail)
    {
        ADD(0, "0: Maximum Von Mises stress");
        ADD(1, "1: Effective plastic strain");
        ADD(2, "2: Maximum principal stress and absolute value of minimum principal stress");
        ADD(3, "3: Maximum principal stress");
    }
    SCALAR(Yscale_FAIL) { 
    if (MAT_Ifail == 1)
        { DIMENSION = "DIMENSIONLESS";}     
    else
        { DIMENSION = "pressure";}     
    }
    SCALAR(TDEL)                                   { DIMENSION = "t";}
    SCALAR(Fcut)                                   { DIMENSION = "f";}
    graphical FLAG(Heat_Inp_opt);
    if (Heat_Inp_opt!= 0) {
        SUBOBJECT(SUBGRP_HEAT_MAT) {SUBTYPES = (/SUBOBJECT/HEAT);}  
    }
    graphical FLAG(THERM_STRESS);
    if (THERM_STRESS!= 0) {
        SUBOBJECT(SUBGRP_THERM_STRESS) {SUBTYPES = (/SUBOBJECT/THERM_STRESS);}  
    }
}

//
FORMAT(radioss2022) {
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1,IMPORT);
    if(IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "LAW" )
        {
            ASSIGN(Mat_Name_OR_LawNo,2);
        }
    }
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 2)
    {
        HEADER("/MAT/LAW121/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/PLAS_RATE/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    COMMENT("#              RHO_I");
    CARD("%20lg",MAT_RHO);
    COMMENT("#                  E                  Nu      Ires     Ivisc                Fcut               DTMIN");
    CARD("%20lg%20lg%10d%10d%20lg%20lg",MAT_E,MAT_NU,MAT_Ires,MAT_Ivisc,Fcut,TDEL); 
    COMMENT("# Fct_SIG0                   Xscale_SIG0         Yscale_SIG0");
    CARD("%10d%10s%20lg%20lg",Fct_SIG0,_BLANK_,Xscale_SIG0,Yscale_SIG0);
    COMMENT("# Fct_YOUN                   Xscale_YOUN         Yscale_YOUN");
    CARD("%10d%10s%20lg%20lg",Fct_YOUN,_BLANK_,Xscale_YOUN,Yscale_YOUN);
    COMMENT("# Fct_TANG                   Xscale_TANG                TANG");
    CARD("%10d%10s%20lg%20lg",Fct_TANG,_BLANK_,Xscale_TANG,MAT_TANG);    
    COMMENT("# Fct_FAIL     Ifail         Xscale_FAIL         Yscale_FAIL");
    CARD("%10d%10d%20lg%20lg",Fct_FAIL,MAT_Ifail,Xscale_FAIL,Yscale_FAIL);
    if (Heat_Inp_opt!=0)
    {
        SUBOBJECTS(SUBGRP_HEAT_MAT,/SUBOBJECT/HEAT);
    } 
    if(Heat_Inp_opt!=0 && THERM_STRESS !=0)
    {
        SUBOBJECTS(SUBGRP_THERM_STRESS,/SUBOBJECT/THERM_STRESS);
    }
}
