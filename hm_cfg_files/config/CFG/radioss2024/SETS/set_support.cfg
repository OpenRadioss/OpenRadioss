//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// SET item (/SET)
// 
ATTRIBUTES(COMMON) {
    KEY_type      =  VALUE(STRING, "Key type");
    opt_D         =  VALUE(INT, "delete (remove) the entities from the set");
    opt_O         =  VALUE(INT, "reverse orientation of the segment normal and add entities to the set");
    opt_G         =  VALUE(INT, "generate a list of defined between 2 items ID’s and increment");
    opt_B         =  VALUE(INT, "add entities contained in the box defined by box_ID");
    opt_A         =  VALUE(INT, "all facets and all edges of parts, subset, submodel or box");
    opt_E         =  VALUE(INT, "only external facets or external edges of parts, subset, submodel or box and node from external facets or external edges ");
    opt_I         =  VALUE(INT, "intersection between sets");
    opt_C         =  VALUE(INT, "add entities with at least 1 node inside the box defined by box_ID");
// for list id
    idsmax        =  SIZE("No. Set item");
    ids           =  ARRAY[idsmax](MULTIOBJECT, "Set list item") { SUBTYPES = ( /NODE , /ELEMS/SHELL , /ELEMS/SH3N, /ELEMS/BEAM, /ELEMS/SPRING, /ELEMS/TRUSS, /ELEMS/SOLID, /ELEMS/QUAD, /ELEMS/TRIA, /COMPONENT/PART , /BOX , /ASSEMBLY, /SOLVERSUBMODEL, /SETS/SET, /RIGIDBODY /*, /RBODY , /SEG? */) ; }   
    ids_type     =   VALUE(STRING, "Type of multi object");
// for gene 
    genemax       =  SIZE("No. gene items "); 
    start         =  ARRAY[genemax](INT, "Start id in clause range");
    end           =  ARRAY[genemax](INT, "End id in clause range");
    by            =  ARRAY[genemax](INT, "Incr by in clause range");
// for SEGMENT 
    segmax        =  SIZE("No. Set Segment"); 
    segid         =  ARRAY[segmax](INT, "Seg id"); /*is it going to point to an entity type and not int ?*/
    ids1          =  ARRAY[segmax](NODE, "Node Id 1");
    ids2          =  ARRAY[segmax](NODE, "Node Id 2");
    ids3          =  ARRAY[segmax](NODE, "Node Id 3");
    ids4          =  ARRAY[segmax](NODE, "Node Id 4");
// HM INTERNAL
    key_option    =  VALUE(STRING, "Key and Option");
    option        =  VALUE(STRING, "Key and Option (temp)");
    opt_          =  VALUE(INT, "If option");
    IO_FLAG       =  VALUE(INT, "Import/Export flag");
    ellipse_XC    =  VALUE(FLOAT, "Ellipse Center coordinate X");
    ellipse_YC    =  VALUE(FLOAT, "Ellipse Center coordinate Y");
    ellipse_ZC    =  VALUE(FLOAT, "Ellipse Center coordinate Z");
    ellipse_skew_ID = VALUE(INT, "Ellipse skew_ID");
    ellipse_n     = VALUE(INT, "Degree of the hyper-ellipsoid, must be greater or equal to 2, Default = 2");
    ellipse_a     = VALUE(FLOAT, "Semi-axis length along X direction");
    ellipse_b     = VALUE(FLOAT, "Semi-axis length along Y direction");
    ellipse_c     = VALUE(FLOAT, "Semi-axis length along Z direction");

    plane_XM    =  VALUE(FLOAT, "X coordinate of M (end of normal vector)");
    plane_YM    =  VALUE(FLOAT, "Y coordinate of M (end of normal vector)");
    plane_ZM    =  VALUE(FLOAT, "Z coordinate of M (end of normal vector)");
    plane_XM1   =  VALUE(FLOAT, "X coordinate of M1 (head of normal vector)");
    plane_YM1   =  VALUE(FLOAT, "Y coordinate of M1 (head of normal vector)");
    plane_ZM1   =  VALUE(FLOAT, "Z coordinate of M1 (head of normal vector)");
}
SKEYWORDS_IDENTIFIER(COMMON)
{
    KEY_type =-1;
    opt_D = -1;
    opt_O = -1;
    opt_G = -1;
    opt_B = -1;
    opt_A = -1;
    opt_E = -1;
    opt_I = -1;
    opt_C = -1; 
    idsmax = -1; /*?*/
    ids  = -1; /*?*/
    ids_type = -1;
//
    genemax = -1;
    start = -1;
    end   = -1;
    by    = -1;
    //
    segmax = -1;
    segid = -1;
    ids1  = -1;
    ids2  = -1;
    ids3  = -1;
    ids4  = -1; 
// temp
    option= -1;
    key_option = -1;  
    IO_FLAG=-1;
    opt_   = -1;
}
DEFAULTS(COMMON)
{
    opt_D = 0;
    opt_O = 0;
    opt_G = 0;
    opt_B = 0;
    opt_A = 0;
    opt_E = 0;
    opt_I = 0;
    opt_C = 0;
    opt_ = 0;
    ids_type = "NODE";
/*    option_type = 0;*/
}
GUI(COMMON) 
{
    RADIO(KEY_type, "Set Type is") {
        ADD("NODE",  "NODE :NODE");
        ADD("PART",  "PART :PART");
        ADD("SHELL", "SHELL :SHELL");
        ADD("SH3N",  "SH3N :SH3N");
        ADD("SET",   "SET :SET");
        ADD("SETCOL",   "SETCOL :SETCOL");
        ADD("BOX",   "BOX :BOX");
        ADD("BOX2",  "BOX2 :BOX2");
        ADD("BEAM",  "BEAM :BEAM");
        ADD("SPRING","SPRING :SPRING");
        ADD("TRUSS", "TRUSS :TRUSS");
        ADD("SOLID", "SOLID :SOLID");
        ADD("TRIA",  "TRIA :TRIA");
        ADD("QUAD",  "QUAD :QUAD");
        ADD("RBODY", "RBODY :RBODY");
        ADD("SEG",   "SEG :SEG");
        ADD("SUBS",  "SUBS :SUBS");
        ADD("SUBM",  "SUBM :SUBM");
        ADD("ALL",   "ALL :ALL");
        ADD("ELLIPS",   "ELLIPS :ELLIPS");
        ADD("PLANE",   "PLANE :PLANE");
    }

    /*RADIO(option_type, "Option") {
        ADD(0, "No option");
        ADD(1, "_D: delete (remove) the entities from the set");
        ADD(2, "_O: reverse orientation of the segment normal and add entities to the set");
        ADD(3, "_G: generate a list of defined between 2 items ID’s and increment");
        ADD(4, "_B: add entities contained in the box defined by box_ID");
        ADD(5, "_A: all facets and all edges of parts, subset, submodel or box");
        ADD(6, "_E: only external facets or external edges of parts, subset, submodel or box and node from external facets or external edges ");
        ADD(7, "_I: intersection between sets");
        ADD(8, "_C: add entities contained in the box2 defined by box2_ID");
    }*/
    if(KEY_type!="ALL")
    {
       FLAG(opt_D); 
    }
    
    if(KEY_type=="PART" || KEY_type=="SHELL" || KEY_type=="SH3N" || KEY_type=="SUBS"|| KEY_type=="SUBM")
    {
        FLAG(opt_O);
    }
    if(/*KEY_type!="SET" &&*/ KEY_type!="BOX" && KEY_type!="BOX2" && KEY_type!="SEG"&& KEY_type!="ALL")
    {
        FLAG(opt_G);
    }
    if(KEY_type=="NODE" || KEY_type=="RBODY" ||
       KEY_type=="BEAM" || KEY_type=="SPRING"|| KEY_type=="TRUSS" ||
       KEY_type=="SHELL" || KEY_type=="SH3N"|| KEY_type=="SOLID" )
    {
        FLAG(opt_B);
    }
    if(KEY_type=="RBODY" ||
       KEY_type=="BEAM" || KEY_type=="SPRING"|| KEY_type=="TRUSS" ||
       KEY_type=="SHELL" || KEY_type=="SH3N"|| KEY_type=="SOLID" )
    {
        FLAG(opt_C);
    }

     if(/*KEY_type=="NODE" ||*/ KEY_type=="BOX" || KEY_type=="BOX2" || 
        KEY_type=="PART" || KEY_type=="SUBS"|| KEY_type=="SUBM")
    {
       FLAG(opt_A);
    }
    if( KEY_type=="BOX" || KEY_type=="BOX2" || 
        KEY_type=="PART" || KEY_type=="SUBS"|| KEY_type=="SUBM")
    {
        FLAG(opt_E);
    }
    if(KEY_type=="SET" || KEY_type=="SETCOL")
    {
        FLAG(opt_I);
    }
    if(opt_G == 1 && (/*KEY_type!="SET" && */ KEY_type!="BOX" && KEY_type!="BOX2" && KEY_type!="SEG"&& KEY_type!="ALL")) /*GENE*/
    {
        /*TODO*/
    }
    else if(KEY_type=="SEG") /*by SEGMENT*/
    {
        /*TODO*/
    }
    else if(KEY_type!="ALL") /*!ALL*/
    {
        SIZE(idsmax);
        ARRAY(idsmax,"Item list")
        {
            DATA(ids);
        }
    }
}

FORMAT(radioss2024) {
//
   ASSIGN(IO_FLAG, 1, IMPORT);
   ASSIGN(IO_FLAG, 2, EXPORT);

   CARD_PREREAD("%-10s", option);  
//
   ASSIGN(opt_, _FIND(option, "SET"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(opt_, _FIND(option, "SETCOL"),IMPORT);
       if(opt_== 1)
       {
           ASSIGN(KEY_type, SETCOL,IMPORT);
       }
       else
       {  
           ASSIGN(KEY_type, SET,IMPORT);
           
       }
       ASSIGN(ids_type, /SETS/SET, IMPORT); 
   }
   if(IO_FLAG == 2 && KEY_type== "SET")
   {
       ASSIGN(key_option, SET,EXPORT);
   }
   else if(IO_FLAG == 2 && KEY_type== "SETCOL")
   {
       ASSIGN(key_option, SETCOL,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "BOX"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, BOX,IMPORT);
       ASSIGN(ids_type, /BOX, IMPORT); 
   }
   if(IO_FLAG == 2 && KEY_type== "BOX")
   {
       ASSIGN(key_option, BOX,EXPORT);
   }

   ASSIGN(opt_, _FIND(option, "BOX2"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, BOX2,IMPORT);
       ASSIGN(ids_type, /BOX, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "BOX2")
   {
       ASSIGN(key_option, BOX2,EXPORT);
   }

   
   ASSIGN(opt_, _FIND(option, "NODE"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, NODE,IMPORT);
       ASSIGN(ids_type, /NODE, IMPORT); 
   }
   if(IO_FLAG == 2 && KEY_type== "NODE")
   {
       ASSIGN(key_option, NODE,EXPORT);
   }
   //
   ASSIGN(opt_, _FIND(option, "RBODY"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, RBODY,IMPORT);
       ASSIGN(ids_type, /RIGIDBODY, IMPORT); 
   }
   if(IO_FLAG == 2 && KEY_type== "RBODY")
   {
       ASSIGN(key_option, RBODY,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "BEAM"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, BEAM,IMPORT);
       ASSIGN(ids_type, /ELEMS/BEAM, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "BEAM")
   {
       ASSIGN(key_option, BEAM,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "TRUSS"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, TRUSS,IMPORT);
       ASSIGN(ids_type, /ELEMS/TRUSS, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "TRUSS")
   {
       ASSIGN(key_option, TRUSS,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "SPRING"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, SPRING,IMPORT);
       ASSIGN(ids_type, /ELEMS/SPRING, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "SPRING")
   {
       ASSIGN(key_option, SPRING,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "SHELL"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, SHELL,IMPORT);
       ASSIGN(ids_type, /ELEMS/SHELL, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "SHELL")
   {
       ASSIGN(key_option, SHELL,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "SH3N"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, SH3N,IMPORT);
       ASSIGN(ids_type, /ELEMS/SH3N, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "SH3N")
   {
       ASSIGN(key_option, SH3N,EXPORT);
   }
//
   ASSIGN(opt_, _FIND(option, "SOLID"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, SOLID,IMPORT);
       ASSIGN(ids_type, /ELEMS/SOLID, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "SOLID")
   {
       ASSIGN(key_option, SOLID,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "TRIA"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, TRIA,IMPORT);
       ASSIGN(ids_type, /ELEMS/TRIA, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "TRIA")
   {
       ASSIGN(key_option, TRIA,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "QUAD"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, QUAD,IMPORT);
       ASSIGN(ids_type, /ELEMS/QUAD, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "QUAD")
   {
       ASSIGN(key_option, QUAD,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "PART"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, PART,IMPORT);
       ASSIGN(ids_type, /COMPONENT/PART, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "PART")
   {
       ASSIGN(key_option, PART,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "SUBS"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, SUBS,IMPORT);
       ASSIGN(ids_type, /ASSEMBLY, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "SUBS")
   {
       ASSIGN(key_option, SUBS,EXPORT);
   }
   
   ASSIGN(opt_, _FIND(option, "SUBM"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, SUBM,IMPORT);
       ASSIGN(ids_type, /SOLVERSUBMODEL, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "SUBM")
   {
       ASSIGN(key_option, SUBM,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "SEG"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, SEG,IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "SEG")
   {
       ASSIGN(key_option, SEG,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "ALL"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, ALL,IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "ALL")
   {
       ASSIGN(key_option, ALL,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "ELLIPS"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, ELLIPS,IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "ELLIPS")
   {
       ASSIGN(key_option, ELLIPS,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "PLANE"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, PLANE,IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "PLANE")
   {
       ASSIGN(key_option, PLANE,EXPORT);
   }  
//

   if(IO_FLAG == 1)
   {
       ASSIGN(opt_, _FIND(option, "_"),IMPORT);
   }
   if((IO_FLAG == 1) && (opt_ == 1)) 
   {
       ASSIGN(opt_D, _FIND(option, "_D"),IMPORT);
       if(opt_D==0)
       ASSIGN(opt_D, _FIND(option, "_BD"),IMPORT);
       if(opt_D==0)
       ASSIGN(opt_D, _FIND(option, "_GD"),IMPORT);
       //
       ASSIGN(opt_O, _FIND(option, "_O"),IMPORT);
       if(opt_O==0)
       ASSIGN(opt_O, _FIND(option, "_GO"),IMPORT);
       if(opt_O==0)
       ASSIGN(opt_O, _FIND(option, "_BO"),IMPORT);
       //
       ASSIGN(opt_G, _FIND(option, "_G"),IMPORT);
       if(opt_G==0)
       ASSIGN(opt_G, _FIND(option, "_DG"),IMPORT);
       if(opt_G==0)
       ASSIGN(opt_G, _FIND(option, "_OG"),IMPORT);
       if(opt_G==0)
       ASSIGN(opt_G, _FIND(option, "_AG"),IMPORT);
       if(opt_G==0)
       ASSIGN(opt_G, _FIND(option, "_EG"),IMPORT);
       //   
       ASSIGN(opt_B, _FIND(option, "_B"),IMPORT);
       if(opt_B==0)
       ASSIGN(opt_B, _FIND(option, "_DB"),IMPORT);
       if(opt_B==0)
       ASSIGN(opt_B, _FIND(option, "_OB"),IMPORT);
       //
       ASSIGN(opt_C, _FIND(option, "_C"),IMPORT); 
       if(opt_C==0) 
       ASSIGN(opt_C, _FIND(option, "_DC"),IMPORT);
       if(opt_C==0)
       ASSIGN(opt_C, _FIND(option, "_OC"),IMPORT);
       //
       ASSIGN(opt_A, _FIND(option, "_A"),IMPORT);
       if(opt_A==0)
       ASSIGN(opt_A, _FIND(option, "_GA"),IMPORT);
       //
       ASSIGN(opt_E, _FIND(option, "_E"),IMPORT);
       if(opt_E==0)
       ASSIGN(opt_E, _FIND(option, "_GE"),IMPORT);
       //
       ASSIGN(opt_I, _FIND(option, "_I"),IMPORT);
   }
//   
   ASSIGN(opt_, 0, EXPORT);
   if((IO_FLAG == 2) && ( (opt_D == 1 ) || 
                          (opt_O == 1 ) || 
                          (opt_G == 1 ) || 
                          (opt_B == 1 ) || 
                          (opt_C == 1 ) ||
                          (opt_A == 1 ) || 
                          (opt_E == 1 ) || 
                          (opt_I == 1 )  ))
   {
       ASSIGN(opt_, 1, EXPORT);
/*       CARD("#opt_:%d",opt_);*/
   }
   if(IO_FLAG == 2 && opt_ == 1)
   {
       ASSIGN(key_option,_COMBINE(key_option,"_"), EXPORT);
   }
   if((IO_FLAG == 2) && (opt_D == 1 ))
   {
       ASSIGN(key_option,_COMBINE(key_option,"D"), EXPORT);
   }
   if((IO_FLAG == 2) && (opt_O == 1 ))
   {
       ASSIGN(key_option,_COMBINE(key_option,"O"), EXPORT);
   }
   if((IO_FLAG == 2) && (opt_G == 1 ))
   {
       ASSIGN(key_option,_COMBINE(key_option,"G"), EXPORT);
   }
   if((IO_FLAG == 2) && (opt_B == 1 ))
   {
       ASSIGN(key_option,_COMBINE(key_option,"B"), EXPORT);
   }
   if((IO_FLAG == 2) && (opt_C == 1 ))
   { 
       ASSIGN(key_option,_COMBINE(key_option,"C"), EXPORT);
   } 
   if((IO_FLAG == 2) && (opt_A == 1 ))
   {
       ASSIGN(key_option,_COMBINE(key_option,"A"), EXPORT);
   }
   if((IO_FLAG == 2) && (opt_E == 1 ))
   {
       ASSIGN(key_option,_COMBINE(key_option,"E"), EXPORT);
   }
   if((IO_FLAG == 2) && (opt_I == 1 ))
   {
       ASSIGN(key_option,_COMBINE(key_option,"I"), EXPORT);
   }
   if(KEY_type == "ALL")
   {
        CARD("%-10s",key_option);
   }
   else if( KEY_type == "SEG")
   {
        CARD("%-10s",key_option){NO_END;}
        /*FREE_CARD_LIST(segmax)
        {
        CARD("%10d%10d%10d%10d%10d",segid,ids1,ids2,ids3,ids4){OFFSET("%-10s", "");}
        }*/
        FREE_CELL_LIST(segmax,"%10d%10d%10d%10d%10d                                        ",segid,ids1,ids2,ids3,ids4){OFFSET("%-10s", "");}
   }
   else if(opt_G == 1 && (/*KEY_type!="SET" && */ KEY_type!="BOX" && KEY_type!="BOX2"/*&& KEY_type!="SEG" && KEY_type!="ALL"*/))
   {
        CARD("%-10s",key_option){NO_END;}
        FREE_CELL_LIST(genemax,"%10d%10d%10d",start,end,by){OFFSET("%-10s", "");}
   }
   else if(KEY_type == "ELLIPS")
   {
        COMMENT("$   ELLIPS                  Xc                  Yc                  Zc   Skew_ID         n");
        CARD("%-10s%20lg%20lg%20lg%10d%10d",key_option,ellipse_XC,ellipse_YC,ellipse_ZC,ellipse_skew_ID,ellipse_n);
        COMMENT("                   a                   b                   c");
        CARD("          %20lg%20lg%20lg",ellipse_a,ellipse_b,ellipse_c);
   }
   else if(KEY_type == "PLANE")
   {
        COMMENT("$    PLANE                  XM                  YM                  ZM");
        CARD("%-10s%20lg%20lg%20lg",key_option,plane_XM,plane_YM,plane_ZM);
        COMMENT("                 XM1                 YM1                 ZM1");
        CARD("          %20lg%20lg%20lg",plane_XM1,plane_YM1,plane_ZM1);
   }
   else /*if( KEY_type!= "ALL")*/
   {
        CARD("%-10s",key_option){NO_END;}
        FREE_CELL_LIST(idsmax,"%10d",ids){OFFSET("%-10s", "");}
   }
}
FORMAT(radioss2021) {
//
   ASSIGN(IO_FLAG, 1, IMPORT);
   ASSIGN(IO_FLAG, 2, EXPORT);

   CARD_PREREAD("%-10s", option);  
//
   ASSIGN(opt_, _FIND(option, "SET"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(opt_, _FIND(option, "SETCOL"),IMPORT);
       if(opt_== 1)
       {
           ASSIGN(KEY_type, SETCOL,IMPORT);
       }
       else
       {  
           ASSIGN(KEY_type, SET,IMPORT);
           
       }
       ASSIGN(ids_type, /SETS/SET, IMPORT); 
   }
   if(IO_FLAG == 2 && KEY_type== "SET")
   {
       ASSIGN(key_option, SET,EXPORT);
   }
   else if(IO_FLAG == 2 && KEY_type== "SETCOL")
   {
       ASSIGN(key_option, SETCOL,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "BOX"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, BOX,IMPORT);
       ASSIGN(ids_type, /BOX, IMPORT); 
   }
   if(IO_FLAG == 2 && KEY_type== "BOX")
   {
       ASSIGN(key_option, BOX,EXPORT);
   }

   ASSIGN(opt_, _FIND(option, "BOX2"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, BOX2,IMPORT);
       ASSIGN(ids_type, /BOX, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "BOX2")
   {
       ASSIGN(key_option, BOX2,EXPORT);
   }

   
   ASSIGN(opt_, _FIND(option, "NODE"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, NODE,IMPORT);
       ASSIGN(ids_type, /NODE, IMPORT); 
   }
   if(IO_FLAG == 2 && KEY_type== "NODE")
   {
       ASSIGN(key_option, NODE,EXPORT);
   }
   //
   ASSIGN(opt_, _FIND(option, "RBODY"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, RBODY,IMPORT);
       ASSIGN(ids_type, /RIGIDBODY, IMPORT); 
   }
   if(IO_FLAG == 2 && KEY_type== "RBODY")
   {
       ASSIGN(key_option, RBODY,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "BEAM"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, BEAM,IMPORT);
       ASSIGN(ids_type, /ELEMS/BEAM, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "BEAM")
   {
       ASSIGN(key_option, BEAM,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "TRUSS"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, TRUSS,IMPORT);
       ASSIGN(ids_type, /ELEMS/TRUSS, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "TRUSS")
   {
       ASSIGN(key_option, TRUSS,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "SPRING"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, SPRING,IMPORT);
       ASSIGN(ids_type, /ELEMS/SPRING, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "SPRING")
   {
       ASSIGN(key_option, SPRING,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "SHELL"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, SHELL,IMPORT);
       ASSIGN(ids_type, /ELEMS/SHELL, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "SHELL")
   {
       ASSIGN(key_option, SHELL,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "SH3N"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, SH3N,IMPORT);
       ASSIGN(ids_type, /ELEMS/SH3N, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "SH3N")
   {
       ASSIGN(key_option, SH3N,EXPORT);
   }
//
   ASSIGN(opt_, _FIND(option, "SOLID"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, SOLID,IMPORT);
       ASSIGN(ids_type, /ELEMS/SOLID, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "SOLID")
   {
       ASSIGN(key_option, SOLID,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "TRIA"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, TRIA,IMPORT);
       ASSIGN(ids_type, /ELEMS/TRIA, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "TRIA")
   {
       ASSIGN(key_option, TRIA,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "QUAD"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, QUAD,IMPORT);
       ASSIGN(ids_type, /ELEMS/QUAD, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "QUAD")
   {
       ASSIGN(key_option, QUAD,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "PART"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, PART,IMPORT);
       ASSIGN(ids_type, /COMPONENT/PART, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "PART")
   {
       ASSIGN(key_option, PART,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "SUBS"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, SUBS,IMPORT);
       ASSIGN(ids_type, /ASSEMBLY, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "SUBS")
   {
       ASSIGN(key_option, SUBS,EXPORT);
   }
   
   ASSIGN(opt_, _FIND(option, "SUBM"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, SUBM,IMPORT);
       ASSIGN(ids_type, /SOLVERSUBMODEL, IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "SUBM")
   {
       ASSIGN(key_option, SUBM,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "SEG"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, SEG,IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "SEG")
   {
       ASSIGN(key_option, SEG,EXPORT);
   }
   ASSIGN(opt_, _FIND(option, "ALL"),IMPORT);
   if(opt_== 1)
   {
       ASSIGN(KEY_type, ALL,IMPORT);
   }
   if(IO_FLAG == 2 && KEY_type== "ALL")
   {
       ASSIGN(key_option, ALL,EXPORT);
   }
//

   if(IO_FLAG == 1)
   {
       ASSIGN(opt_, _FIND(option, "_"),IMPORT);
   }
   if((IO_FLAG == 1) && (opt_ == 1)) 
   {
       ASSIGN(opt_D, _FIND(option, "_D"),IMPORT);
       if(opt_D==0)
       ASSIGN(opt_D, _FIND(option, "_BD"),IMPORT);
       if(opt_D==0)
       ASSIGN(opt_D, _FIND(option, "_GD"),IMPORT);
       //
       ASSIGN(opt_O, _FIND(option, "_O"),IMPORT);
       if(opt_O==0)
       ASSIGN(opt_O, _FIND(option, "_GO"),IMPORT);
       if(opt_O==0)
       ASSIGN(opt_O, _FIND(option, "_BO"),IMPORT);
       //
       ASSIGN(opt_G, _FIND(option, "_G"),IMPORT);
       if(opt_G==0)
       ASSIGN(opt_G, _FIND(option, "_DG"),IMPORT);
       if(opt_G==0)
       ASSIGN(opt_G, _FIND(option, "_OG"),IMPORT);
       if(opt_G==0)
       ASSIGN(opt_G, _FIND(option, "_AG"),IMPORT);
       if(opt_G==0)
       ASSIGN(opt_G, _FIND(option, "_EG"),IMPORT);
       //   
       ASSIGN(opt_B, _FIND(option, "_B"),IMPORT);
       if(opt_B==0)
       ASSIGN(opt_B, _FIND(option, "_DB"),IMPORT);
       if(opt_B==0)
       ASSIGN(opt_B, _FIND(option, "_OB"),IMPORT);
       //
       ASSIGN(opt_C, _FIND(option, "_C"),IMPORT); 
       if(opt_C==0) 
       ASSIGN(opt_C, _FIND(option, "_DC"),IMPORT);
       if(opt_C==0)
       ASSIGN(opt_C, _FIND(option, "_OC"),IMPORT);
       //
       ASSIGN(opt_A, _FIND(option, "_A"),IMPORT);
       if(opt_A==0)
       ASSIGN(opt_A, _FIND(option, "_GA"),IMPORT);
       //
       ASSIGN(opt_E, _FIND(option, "_E"),IMPORT);
       if(opt_E==0)
       ASSIGN(opt_E, _FIND(option, "_GE"),IMPORT);
       //
       ASSIGN(opt_I, _FIND(option, "_I"),IMPORT);
   }
//   
   ASSIGN(opt_, 0, EXPORT);
   if((IO_FLAG == 2) && ( (opt_D == 1 ) || 
                          (opt_O == 1 ) || 
                          (opt_G == 1 ) || 
                          (opt_B == 1 ) || 
                          (opt_C == 1 ) ||
                          (opt_A == 1 ) || 
                          (opt_E == 1 ) || 
                          (opt_I == 1 )  ))
   {
       ASSIGN(opt_, 1, EXPORT);
/*       CARD("#opt_:%d",opt_);*/
   }
   if(IO_FLAG == 2 && opt_ == 1)
   {
       ASSIGN(key_option,_COMBINE(key_option,"_"), EXPORT);
   }
   if((IO_FLAG == 2) && (opt_D == 1 ))
   {
       ASSIGN(key_option,_COMBINE(key_option,"D"), EXPORT);
   }
   if((IO_FLAG == 2) && (opt_O == 1 ))
   {
       ASSIGN(key_option,_COMBINE(key_option,"O"), EXPORT);
   }
   if((IO_FLAG == 2) && (opt_G == 1 ))
   {
       ASSIGN(key_option,_COMBINE(key_option,"G"), EXPORT);
   }
   if((IO_FLAG == 2) && (opt_B == 1 ))
   {
       ASSIGN(key_option,_COMBINE(key_option,"B"), EXPORT);
   }
   if((IO_FLAG == 2) && (opt_C == 1 ))
   { 
       ASSIGN(key_option,_COMBINE(key_option,"C"), EXPORT);
   } 
   if((IO_FLAG == 2) && (opt_A == 1 ))
   {
       ASSIGN(key_option,_COMBINE(key_option,"A"), EXPORT);
   }
   if((IO_FLAG == 2) && (opt_E == 1 ))
   {
       ASSIGN(key_option,_COMBINE(key_option,"E"), EXPORT);
   }
   if((IO_FLAG == 2) && (opt_I == 1 ))
   {
       ASSIGN(key_option,_COMBINE(key_option,"I"), EXPORT);
   }
   if(KEY_type == "ALL")
   {
        CARD("%-10s",key_option);
   }
   else if( KEY_type == "SEG")
   {
        CARD("%-10s",key_option){NO_END;}
        /*FREE_CARD_LIST(segmax)
        {
        CARD("%10d%10d%10d%10d%10d",segid,ids1,ids2,ids3,ids4){OFFSET("%-10s", "");}
        }*/
        FREE_CELL_LIST(segmax,"%10d%10d%10d%10d%10d                                        ",segid,ids1,ids2,ids3,ids4){OFFSET("%-10s", "");}
   }
   else if(opt_G == 1 && (/*KEY_type!="SET" && */ KEY_type!="BOX" && KEY_type!="BOX2"/*&& KEY_type!="SEG" && KEY_type!="ALL"*/))
   {
        CARD("%-10s",key_option){NO_END;}
        FREE_CELL_LIST(genemax,"%10d%10d%10d",start,end,by){OFFSET("%-10s", "");}
   }
   else /*if( KEY_type!= "ALL")*/
   {
        CARD("%-10s",key_option){NO_END;}
        FREE_CELL_LIST(idsmax,"%10d",ids){OFFSET("%-10s", "");}
   }
}
