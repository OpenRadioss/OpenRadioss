//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 169
//

ATTRIBUTES(COMMON)
{
    KEYWORD_STR             = VALUE(STRING, "Solver Keyword");
    NUM_COMMENTS            = SIZE("NUM_COMMENTS");
    CommentEnumField        = VALUE(INT,"User Comments");
    COMMENTS                = ARRAY[NUM_COMMENTS](STRING,"Entity Comments");
    E                                   = VALUE(FLOAT,  "Young's modulus");
    Nu                                  = VALUE(FLOAT,  "Poisson's ratio.");
    Rho                                 = VALUE(FLOAT,  "Mass density");  
    thick                               = VALUE(FLOAT,  "Thickness of cohesive element"); 
//    MAT169_BTHK                         = VALUE(FLOAT,  "Bond thickness");
    MAT169_TENMAX                       = VALUE(FLOAT,  "Maximum through-thickness tensile stress");
    MAT169_GCTEN                        = VALUE(FLOAT,  "Energy per unit area to fail the bond in tension");
    MAT169_SHRMAX                       = VALUE(FLOAT,  "Maximum through-thickness shear stress");
    MAT169_GCSHR                        = VALUE(FLOAT,  "Energy per unit area to fail the bond in shear");
    MAT169_PWRT                         = VALUE(INT,  "Power law term for tension");
    MAT169_PWRS                         = VALUE(INT,  "Power law term for shear");
    MAT169_SHRP                         = VALUE(FLOAT,  "Shear plateau ratio");
    MAT169_SHT_SL                       = VALUE(FLOAT,  "Slope of yield surface at zero tension");
//    MAT169_EDOT0                        = VALUE(FLOAT,  "Strain rate at which the static properties apply");
//    MAT169_EDOT2                        = VALUE(FLOAT,  "Strain rate at which the dynamic properties apply");
//    MAT169_FACCS                        = VALUE(FLOAT,  "Stiffness scaling factor for interior elements - shear");
//    MAT169_FACCT                        = VALUE(FLOAT,  "Stiffness scaling factor for interior elements - tension");
//    MAT169_FACES                        = VALUE(FLOAT,  "Stiffness scaling factor for edge elements - shear");
//    MAT169_FACET                        = VALUE(FLOAT,  "Stiffness scaling factor for edge elements - tension");
//    MAT169_GCSE                         = VALUE(FLOAT,  "Energy per unit length to fail the edge of the bond in shear");
//    MAT169_GCSHR                        = VALUE(FLOAT,  "Energy per unit area to fail the bond in shear");
//    MAT169_GCTE                         = VALUE(FLOAT,  "Energy per unit length to fail the edge of the bond in tension");
//    MAT169_OUTFAIL                      = VALUE(FLOAT,  "Flag for additional output to message file");
//    MAT169_PWRSE                        = VALUE(FLOAT,  "Power law term for shear");
//    MAT169_PWRTE                        = VALUE(FLOAT,  "Power law term for tension");
//    MAT169_SDEFAC                       = VALUE(FLOAT,  "Factor on TMAXE and SMAXE at strain rate EDOT2");
//    MAT169_SDFAC_FUN                    = VALUE(FUNCT,  "SDFAC Function ID");
//    MAT169_SDFAC                        = VALUE(FLOAT,  "Factor on TENMAX and SHRMAX at strain rate EDOT2");
//    MAT169_SGEFAC                       = VALUE(FLOAT,  "Factor on GCTE and GCSE at strain rate EDOT2");
//    MAT169_SGFAC_FUN                    = VALUE(FUNCT,  "SGFAC Function ID");   
//    MAT169_SGFAC                        = VALUE(FLOAT,  "Factor on GCTEN and GCSHR at strain rate EDOT2");
//    MAT169_SMAXE                        = VALUE(FLOAT,  "Maximum shear force per unit length on edges of joint");
//    MAT169_SOFTS                        = VALUE(FLOAT,  "Factor by which the shear strength is reduced when a neighbor fails");
//    MAT169_SOFTT                        = VALUE(FLOAT,  "Factor by which tensile strength is reduced when a neighbor fails");
//    MAT169_THKDIR                       = VALUE(FLOAT,  "Through-thickness direction flag");
//    MAT169_TMAXE                        = VALUE(FLOAT,  "Maximum tensile force per unit length on edges of joint");
//    MAT169_XEDGE                        = VALUE(FLOAT,  "Flag to input further data");    
//    MAT169_FSIP                         = VALUE(FLOAT, "Effective in-plane strain at failure");  
//    MAT169_FBR713                       = VALUE(FLOAT, "Fallback option to get result from previous version");  
//    MAT169_TENMAX_FUN                   = VALUE(FUNCT,  "TENMAX Function ID"); 
//    MAT169_GCTEN_FUN                    = VALUE(FUNCT,  "SGFAC Function ID"); 
//    MAT169_SHRMAX_FUN                   = VALUE(FUNCT,  "SHRMAX Function ID"); 
//    MAT169_GCSHR_FUN                    = VALUE(FUNCT,  "GCSHR Function ID"); 
//    MAT169_SHRP_FUN                     = VALUE(FUNCT,  "SHRP Function ID"); 
     
    //Attributes for HM usage 
    IO_FLAG                 = VALUE(INT, "");
    LAW_NO                  = VALUE(STRING, "");
    Mat_Name_OR_LawNo       = VALUE(INT, "");
    TITLE                   = VALUE(STRING,"");
    Heat_Inp_opt            = VALUE(INT,   "Heat");  
    SUBGRP_HEAT_MAT         = VALUE(SUBOBJECT, "");
    THERM_STRESS            = VALUE(INT,"Therm Stress");
    SUBGRP_THERM_STRESS     = VALUE(SUBOBJECT, "");
    LEAK_MAT_INPUT          = VALUE(INT,  "LEAK_MAT_INPUT");
    SUBGRP_LEAK_MAT         = VALUE(SUBOBJECT,"");
}
SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                         = 9000;
    COMMENTS                            = 5109;
    CommentEnumField                    = 7951;
     NUM_COMMENTS                        = 5110;
    Heat_Inp_opt                        = 4346;
    SUBGRP_HEAT_MAT                     = -1;
    THERM_STRESS                        = 4555;
    SUBGRP_THERM_STRESS                 = -1;
    LEAK_MAT_INPUT                      = 2900;
    SUBGRP_LEAK_MAT                     = -1;
    Mat_Name_OR_LawNo                   = 4538;
    LAW_NO                              = -1;
    IO_FLAG                             = -1;
    TITLE                               = -1;
}

DEFAULTS(COMMON)
{
    MAT169_GCSHR    = 1E+20;
    MAT169_GCTEN    = 1E+20;
    MAT169_PWRS    = 2;
    MAT169_PWRT    = 2;
    MAT169_SHRMAX    = 1E+20;
    MAT169_TENMAX    = 1E+20;
}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  YOUNG_MODULUS=SCALAR(E);
  POISSON_RATIO=SCALAR(Nu);
  MAXIMUM_THROUGH-THICKNESS_TENSILE_STRESS=SCALAR(MAT169_TENMAX);
  ENERGY_PER_UNIT_AREA=SCALAR(MAT169_GCTEN);
  MAXIMUM_THROUGH-THICKNESS_SHEAR_STRESS=SCALAR(MAT169_SHRMAX);
  ENERGY_PER_UNIT_AREA=SCALAR(MAT169_GCSHR);
  POWER_LAW_TERM_FOR_TENSION=SCALAR(MAT169_PWRT);
  POWER_LAW_TERM_FOR_SHEAR=SCALAR(MAT169_PWRS);
  SHEAR_PLATEAU_RATIO=SCALAR(MAT169_SHRP);
 public:
  //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

CHECK(COMMON){
}


GUI(COMMON) 
{
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do Not Export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(NUM_COMMENTS);
        ARRAY(NUM_COMMENTS,"")
        {
            SCALAR(COMMENTS);
        }   
    }
    if( Mat_Name_OR_LawNo ==2)
    {
        ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/LAW169/");
    }
    else
    {
       ASSIGN(KEYWORD_STR, "/MAT");
        ASSIGN(KEYWORD_STR, "/ARUP_ADHESIVE/");
    }

 mandatory:
     SCALAR(Rho)                                {DIMENSION="density";}
     SCALAR(E)                                  {DIMENSION="pressure";}
 optional:
     SCALAR(Nu)                             {DIMENSION="DIMENSIONLESS";}
     SCALAR(MAT169_TENMAX)                  {DIMENSION="pressure";}
     SCALAR(MAT169_GCTEN)                   {DIMENSION="translation_stiffness";}
     SCALAR(MAT169_SHRMAX)                  {DIMENSION="pressure";}
     SCALAR(MAT169_GCSHR)                   {DIMENSION="translation_stiffness";}
   
     SCALAR(MAT169_PWRT)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(MAT169_PWRS)                    {DIMENSION="DIMENSIONLESS";}

     SCALAR(MAT169_SHT_SL)                  {DIMENSION="DIMENSIONLESS";}


}

// File format
FORMAT(radioss2024) 
{
    ASSIGN(IO_FLAG, 0, EXPORT);
    ASSIGN(IO_FLAG, 1, IMPORT);
    if (IO_FLAG == 1)
    {
        HEADER("/MAT/%3s",LAW_NO);
        if(LAW_NO == "BER" )
        {
            ASSIGN(Mat_Name_OR_LawNo,1);
        }
        else
        {
            ASSIGN(Mat_Name_OR_LawNo, 2);
        }
    }    //
    else if(IO_FLAG == 0 && Mat_Name_OR_LawNo == 1)
    {
        HEADER("/MAT/ARUP_ADHESIVE/%d",_ID_);
        CARD("%-100s", TITLE);
    }
    else
    {
        HEADER("/MAT/LAW169/%d", _ID_);
        CARD("%-100s", TITLE);
    }
    
    COMMENT("#              Rho_I");
    CARD("%20lg",Rho);
//           #---1----|----2----|----3----|----4----|----5----|----6----|----7----|----8----|----9----|---10----|
    COMMENT("$                  E                  PR               THICK              TENMAX               GCTEN");
    CARD("%20lg%20lg%20lg%20lg%20lg",E,Nu,thick,MAT169_TENMAX,MAT169_GCTEN);
    //
//           #---1----|----2----|----3----|----4----|----5----|----6----|----7----|----8----|----9----|---10----|
    COMMENT("$             SHRMAX               GCSHR      PWRT      PWRS                SHRP              SHT_SL");
    CARD("%20lg%20lg%10d%10d%20lg%20lg",MAT169_SHRMAX,MAT169_GCSHR,MAT169_PWRT,MAT169_PWRS, MAT169_SHRP,MAT169_SHT_SL);
    //
   
}