//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// /FAIL/ORTHENERG
// 

ATTRIBUTES(COMMON){ 

    _HMCOMMENTSFLAG         = VALUE(INT, "Write HM Comments");
    id                      = VALUE( INT, "Id of this Card") ;
    mat_id                  = VALUE(MAT,  "Material");

    PTHICKFAIL              = VALUE(FLOAT,"Element suppression criterion (for shells only) :% of thickness in normal direction to delete the element");
    FAILIP                  = VALUE(INT,  "Number of failed integration points prior to solid element deletion");  
    NMOD                    = VALUE(INT,  "Number of failed modes prior to integration point failure");

    SIGMA_11T               = VALUE(FLOAT, "Critical stress for tension in direction 11");
    G_11T                   = VALUE(FLOAT, "Fracture energy for tension in direction 11");
    ISHAP11T                = VALUE(INT,   "Softening shape flag for tension in direction 11");

    SIGMA_11C               = VALUE(FLOAT, "Critical stress for compression in direction 11");
    G_11C                   = VALUE(FLOAT, "Fracture energy for compression in direction 11");
    ISHAP11C                = VALUE(INT,   "Softening shape flag for compression in direction 11");

    SIGMA_22T               = VALUE(FLOAT, "Critical stress for tension in direction 22");
    G_22T                   = VALUE(FLOAT, "Fracture energy for tension in direction 22");
    ISHAP22T                = VALUE(INT,   "Softening shape flag for tension in direction 22");

    SIGMA_22C               = VALUE(FLOAT, "Critical stress for compression in direction 22");
    G_22C                   = VALUE(FLOAT, "Fracture energy for compression in direction 22");
    ISHAP22C                = VALUE(INT,   "Softening shape flag for compression in direction 22");

    SIGMA_33T               = VALUE(FLOAT, "Critical stress for tension in direction 33");
    G_33T                   = VALUE(FLOAT, "Fracture energy for tension in direction 33");
    ISHAP33T                = VALUE(INT,   "Softening shape flag for tension in direction 33");

    SIGMA_33C               = VALUE(FLOAT, "Critical stress for compression in direction 33");
    G_33C                   = VALUE(FLOAT, "Fracture energy for compression in direction 33");
    ISHAP33C                = VALUE(INT,   "Softening shape flag for compression in direction 33");

    SIGMA_12T               = VALUE(FLOAT, "Critical stress for positive shear in plane 12");
    G_12T                   = VALUE(FLOAT, "Fracture energy for positive shear in plane 12");
    ISHAP12T                = VALUE(INT,   "Softening shape flag for positive shear in plane 12");

    SIGMA_12C               = VALUE(FLOAT, "Critical stress for negative shear in plane 12");
    G_12C                   = VALUE(FLOAT, "Fracture energy for negative shear in plane 12");
    ISHAP12C                = VALUE(INT,   "Softening shape flag for negative shear in plane 12");

    SIGMA_23T               = VALUE(FLOAT, "Critical stress for positive shear in plane 23");
    G_23T                   = VALUE(FLOAT, "Fracture energy for positive shear in plane 23");
    ISHAP23T                = VALUE(INT,   "Softening shape flag for positive shear in plane 23");

    SIGMA_23C               = VALUE(FLOAT, "Critical stress for negative shear in plane 23");
    G_23C                   = VALUE(FLOAT, "Fracture energy for negative shear in plane 23");
    ISHAP23C                = VALUE(INT,   "Softening shape flag for negative shear in plane 23");

    SIGMA_31T               = VALUE(FLOAT, "Critical stress for positive shear in plane 31");
    G_31T                   = VALUE(FLOAT, "Fracture energy for positive shear in plane 31");
    ISHAP31T                = VALUE(INT,   "Softening shape flag for positive shear in plane 31");

    SIGMA_31C               = VALUE(FLOAT, "Critical stress for negative shear in plane 31");
    G_31C                   = VALUE(FLOAT, "Fracture energy for negative shear in plane 31");
    ISHAP31C                = VALUE(INT,   "Softening shape flag for negative shear in plane 31");
    
    ID_CARD_EXIST           = VALUE(BOOL, "Give an Id");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    _HMCOMMENTSFLAG=-1;
}

GUI(COMMON) {
    SCALAR(SIGMA_11T)     { DIMENSION = "pressure";  }
    SCALAR(SIGMA_11C)     { DIMENSION = "pressure";  }
    SCALAR(SIGMA_22T)     { DIMENSION = "pressure";  }
    SCALAR(SIGMA_22C)     { DIMENSION = "pressure";  }
    SCALAR(SIGMA_33T)     { DIMENSION = "pressure";  }
    SCALAR(SIGMA_33C)     { DIMENSION = "pressure";  }
    SCALAR(SIGMA_12T)     { DIMENSION = "pressure";  }
    SCALAR(SIGMA_12C)     { DIMENSION = "pressure";  }
    SCALAR(SIGMA_23T)     { DIMENSION = "pressure";  }
    SCALAR(SIGMA_23C)     { DIMENSION = "pressure";  }
    SCALAR(SIGMA_31T)     { DIMENSION = "pressure";  }
    SCALAR(SIGMA_31C)     { DIMENSION = "pressure";  }
    SCALAR(G_11T)         { DIMENSION = "stiffness"; }
    SCALAR(G_11C)         { DIMENSION = "stiffness"; }
    SCALAR(G_22T)         { DIMENSION = "stiffness"; }
    SCALAR(G_22C)         { DIMENSION = "stiffness"; }
    SCALAR(G_33T)         { DIMENSION = "stiffness"; }
    SCALAR(G_33C)         { DIMENSION = "stiffness"; }
    SCALAR(G_12T)         { DIMENSION = "stiffness"; }
    SCALAR(G_12C)         { DIMENSION = "stiffness"; }
    SCALAR(G_23T)         { DIMENSION = "stiffness"; }
    SCALAR(G_23C)         { DIMENSION = "stiffness"; }
    SCALAR(G_31T)         { DIMENSION = "stiffness"; }
    SCALAR(G_31C)         { DIMENSION = "stiffness"; }
}

FORMAT(radioss2024) {
    HEADER("/FAIL/ORTHENERG/%d",mat_id);
    COMMENT("#         PTHICKFAIL                                                                  NMOD    FAILIP");
    CARD("%20lg%60s%10d%10d",PTHICKFAIL,_BLANK_,NMOD,FAILIP);
    COMMENT("#          SIGMA_11T               G_11T  ISHAP11T           SIGMA_11C               G_11C  ISHAP11C");
    CARD("%20lg%20lg%10d%20lg%20lg%10d",SIGMA_11T,G_11T,ISHAP11T,SIGMA_11C,G_11C,ISHAP11C);
    COMMENT("#          SIGMA_22T               G_22T  ISHAP22T           SIGMA_22C               G_22C  ISHAP22C");
    CARD("%20lg%20lg%10d%20lg%20lg%10d",SIGMA_22T,G_22T,ISHAP22T,SIGMA_22C,G_22C,ISHAP22C);
    COMMENT("#          SIGMA_33T               G_33T  ISHAP33T           SIGMA_33C               G_33C  ISHAP33C");
    CARD("%20lg%20lg%10d%20lg%20lg%10d",SIGMA_33T,G_33T,ISHAP33T,SIGMA_33C,G_33C,ISHAP33C);
    COMMENT("#          SIGMA_12T               G_12T  ISHAP12T           SIGMA_12C               G_12C  ISHAP12C");
    CARD("%20lg%20lg%10d%20lg%20lg%10d",SIGMA_12T,G_12T,ISHAP12T,SIGMA_12C,G_12C,ISHAP12C);
    COMMENT("#          SIGMA_23T               G_23T  ISHAP23T           SIGMA_23C               G_23C  ISHAP23C");
    CARD("%20lg%20lg%10d%20lg%20lg%10d",SIGMA_23T,G_23T,ISHAP23T,SIGMA_23C,G_23C,ISHAP23C);
    COMMENT("#          SIGMA_31T               G_31T  ISHAP31T           SIGMA_31C               G_31C  ISHAP31C");
    CARD("%20lg%20lg%10d%20lg%20lg%10d",SIGMA_31T,G_31T,ISHAP31T,SIGMA_31C,G_31C,ISHAP31C);
    if (ID_CARD_EXIST==TRUE)
    {
     COMMENT("#  FAIL_ID") ;
    }
    FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);
        
}        
