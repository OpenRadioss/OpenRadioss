//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Failure model, Johnson (JOHNSON) Setup File
// 

ATTRIBUTES(COMMON){ 

	_HMCOMMENTSFLAG  	= VALUE(INT, "Write HM Comments");
	mat_id           	= VALUE(MAT,  "Material");
		
	D1					= VALUE(FLOAT,"1st parameter");
	D2					= VALUE(FLOAT,"2nd parameter");
	D3					= VALUE(FLOAT,"3rd parameter");
	D4					= VALUE(FLOAT,"4th parameter");
	D5					= VALUE(FLOAT,"5th parameter");

	Epsilon_Dot_0		= VALUE(FLOAT,"Reference strain rate");
	Ifail_sh  			= VALUE(INT,  "Shell failure flag");
	Ifail_so  			= VALUE(INT,  "Flag for solid failure model");
    EPSF_MIN            = VALUE(FLOAT,"Lower value for plastic strain at failure");
	Dadv				= VALUE(FLOAT,"Criterion for the crack advancement");
	Ixfem				= VALUE(INT,  "XFEM flag ");
    // HM INTERNAL
    KEYWORD_STR                                 = VALUE(STRING,"Solver Keyword");
	ID_CARD_EXIST		= VALUE(BOOL, "Give an Id");
}


SKEYWORDS_IDENTIFIER(COMMON)
{
        // HM INTERNAL
    KEYWORD_STR                                 = 9000;
	_HMCOMMENTSFLAG=-1;
}
/*


DEFINITIONS(COMMON) {
  SUPPORTING=(MAT);
}
*/
CHECK(COMMON)
{
  Dadv<=1 ;
}

GUI(COMMON) {

  ASSIGN(KEYWORD_STR, "/FAIL/JOHNSON/");
mandatory:
  DATA(mat_id);
optional:
  SCALAR(D1)         { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(D2)         { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(D3)         { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(D4)         { DIMENSION = "DIMENSIONLESS"; }
  SCALAR(D5)         { DIMENSION = "DIMENSIONLESS"; }  
  //
  SCALAR(Epsilon_Dot_0) { DIMENSION="strain_rate";     }  
  //
  RADIO(Ifail_sh) {
    ADD(0,"0: Default");
    ADD(1,"1: Shell is deleted if cond. reached for 1 integration point or layer");
    ADD(2,"2: For each integration point, the stress tensor is set to 0 if cond. reached,and deleted if cond. reached for all integration points or layers");
  }
  RADIO(Ifail_so) {
    ADD(0,"0: Default");
    ADD(1,"1: Solid element is deleted if cond. reached for 1 integration point");
    ADD(2,"2: For each integration point, deviatoric stress tensor is vanished if cond. reached for 1 integration point");
  }
  SCALAR(EPSF_MIN)   { DIMENSION = "DIMENSIONLESS"; }  
  SCALAR(Dadv);
  RADIO(Ixfem) {
    ADD(0,"0: Without XFEM");
    ADD(1,"1: XFEM formulation ");
  }
optional:
  FLAG(ID_CARD_EXIST);
}

FORMAT(radioss2024) { 
	HEADER("/FAIL/JOHNSON/%d",mat_id);
	COMMENT("#                 D1                  D2                  D3                  D4                  D5");
	CARD("%20lg%20lg%20lg%20lg%20lg",D1,D2,D3,D4,D5);
	COMMENT("#      EPSILON_DOT_0  IFAIL_SH  IFAIL_SO            EPSF_MIN                DADV               IXFEM");
	CARD("%20lg%10d%10d%20lg%20lg%10s%10d",Epsilon_Dot_0,Ifail_sh,Ifail_so,EPSF_MIN,Dadv,_BLANK_,Ixfem); 
	
	if (ID_CARD_EXIST==TRUE)
	{
	 COMMENT("#  FAIL_ID") ;
	}
	FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);
}

FORMAT(radioss2017) { 
	HEADER("/FAIL/JOHNSON/%d",mat_id);

	COMMENT("#                 D1                  D2                  D3                  D4                  D5");
	CARD("%20lg%20lg%20lg%20lg%20lg",D1,D2,D3,D4,D5);
	COMMENT("#      EPSILON_DOT_0  IFAIL_SH  IFAIL_SO                                    DADV               IXFEM");
	CARD("%20lg%10d%10d                    %20lg          %10d",Epsilon_Dot_0,Ifail_sh,Ifail_so,Dadv,Ixfem); 
	
	if (ID_CARD_EXIST==TRUE)
	{
	 COMMENT("#  FAIL_ID") ;
	}
	FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);
}

FORMAT(radioss130) {
	HEADER("/FAIL/JOHNSON/%d",mat_id);

	COMMENT("#                 D1                  D2                  D3                  D4                  D5");
	CARD("%20lg%20lg%20lg%20lg%20lg",D1,D2,D3,D4,D5);
	COMMENT("#      EPSILON_DOT_0  IFAIL_SH  IFAIL_SO                                    DADV               IXFEM");
	CARD("%20lg%10d%10d                    %20lg          %10d",Epsilon_Dot_0,Ifail_sh,Ifail_so,Dadv,Ixfem); 
	
	if (ID_CARD_EXIST==TRUE)
	{
	 COMMENT("#  FAIL_ID") ;
	}
	FREE_CARD(ID_CARD_EXIST,"%10d", _ID_);
}

FORMAT(radioss120) {
	HEADER("/FAIL/JOHNSON/%d",mat_id);

	COMMENT("#                 D1                  D2                  D3                  D4                  D5");
	CARD("%20lg%20lg%20lg%20lg%20lg",D1,D2,D3,D4,D5);
	COMMENT("#      EPSILON_DOT_0  IFAIL_SH  IFAIL_SO                                                       IXFEM");
	CARD("%20lg%10d%10d                                                  %10d",Epsilon_Dot_0,Ifail_sh,Ifail_so,Ixfem); 
}

FORMAT(radioss51) {
	HEADER("/FAIL/JOHNSON/%d",mat_id);
		
	COMMENT("#                 D1                  D2                  D3                  D4                  D5");
	CARD("%20lg%20lg%20lg%20lg%20lg",D1,D2,D3,D4,D5);
	COMMENT("#      EPSILON_DOT_0    ISHELL    ISOLID");
	CARD("%20lg%10d%10d",Epsilon_Dot_0,Ifail_sh,Ifail_so);
}
