//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// CONTROL_THERMAL_SOLVER
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    LSD_ABSTOL                              = VALUE(FLOAT,  "Absolute convergence tolerance (for SOLVER > 11)");
    LSD_ATYPE                               = VALUE(INT,    "Thermal analysis type");
    LSD_CGTOL                               = VALUE(FLOAT,  "Convergence tolerance (for SOLVER 3 and 4)");
    LSD_EQHEAT                              = VALUE(FLOAT,  "Mechanical equivalent of heat");
    LSD_FWORK                               = VALUE(FLOAT,  "Fraction of mechanical work converted into heat");
    LSD_GPT                                 = VALUE(INT,    "Number of Gauss points to be used in the solid elements");
    LSD_LCID10                              = VALUE(CURVE,  "Thermal Speedup factor vs time");
    LSD_MAXITR                              = VALUE(INT,    "Maximum number of iterations (for SOLVER > 11)");
    LSD_MSGLVL                              = VALUE(INT,    "Output message level (for SOLVER > 10)");
    LSD_MXDMP                               = VALUE(INT,    "Matrix Dumping (for SOLVER > 11)");
    LSD_OMEGA14                             = VALUE(FLOAT,  "Relaxation parameter omega (for SOLVER 14 and 16)");
    LSD_OMEGA16                             = VALUE(FLOAT,  "Relaxation parameter omega (for SOLVER 14 and 16)");
    LSD_PTYPE                               = VALUE(INT,    "Thermal problem type");
    LSD_RELTOL                              = VALUE(FLOAT,  "Relative convergence tolerance (replaces CGTOL for SOLVER > 11)");
    LSD_SBC                                 = VALUE(FLOAT,  "Stefan Boltzmann constant");
    LSD_SOLVER                              = VALUE(INT,    "Thermal analysis solver type");
    LSD_TSF                                 = VALUE(FLOAT,  "Thermal Speedup Factor");
    Option1                                 = VALUE(INT,    "Thermal Speedup factor given by a function of time");

    EQHEAT_FUNC                             = VALUE(INT,    "Flag for EQHEAT");
    EQHEAT_LCID                             = VALUE(CURVE,  "Load curve ID defining EQHEAT as a function of time");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    LSD_ABSTOL                              = 2253;
    LSD_ATYPE                               = 4272;
    LSD_CGTOL                               = 4275;
    LSD_EQHEAT                              = 4277;
    LSD_FWORK                               = 4278;
    LSD_GPT                                 = 4276;
    LSD_LCID10                              = 1142;
    LSD_MAXITR                              = 2252;
    LSD_MSGLVL                              = 2251;
    LSD_MXDMP                               = 1392;
    LSD_OMEGA14                             = 2255;
    LSD_OMEGA16                             = 2256;
    LSD_PTYPE                               = 4273;
    LSD_RELTOL                              = 2254;
    LSD_SBC                                 = 4279;
    LSD_SOLVER                              = 4274;
    LSD_TSF                                 = 590;
    Option1                                 = 686;

    EQHEAT_FUNC                             = 11195;
    EQHEAT_LCID                             = 11196;
}

CHECK(COMMON)
{

    LSD_TSF                                 >= 0;
}

DEFAULTS(COMMON)
{

    LSD_ABSTOL     = 1.0E-10;
    LSD_CGTOL      = 1.0E-04;
    LSD_EQHEAT     = 1.0;
    LSD_FWORK      = 1.0;
    LSD_GPT        = 8;
    LSD_MAXITR     = 500;
    LSD_OMEGA14    = 1.0;
    LSD_OMEGA16    = 0.0;
    LSD_RELTOL     = 1.0E-06;
    LSD_SOLVER     = 3;
    LSD_TSF        = 1.0;

}

GUI(COMMON)
{
  ASSIGN(KEYWORD_STR, "*CONTROL_THERMAL_SOLVER");
  
  RADIO(LSD_ATYPE,"Thermal analysis type") {
    ADD(0,"0: Steady state analysis");
    ADD(1,"1: Transient analysis");
  }
  RADIO(LSD_PTYPE,"Thermal problem type") {
    ADD(0,"0: Linear problem");
    ADD(1,"1: Nonlinear problem with material properties evaluated at Gauss point temperature");
    ADD(2,"2: Nonlinear problem with material properties evaluated at element average temperature");
  }
  RADIO(LSD_SOLVER,"Thermal analysis solver type") {
    ADD(1,"1: Symmetric direct solver");
    ADD(2,"2: Nonsymmetric direct solver");
    ADD(3,"3: Diagonal scaled conjugate gradient iterative(default)");
    ADD(4,"4: Incomplete Choleski conjugate gradient iterative");
    ADD(5,"5: Nonsymmetric diagonal scaled bi-conjugate gradient");
    ADD(11,"11: Symmetric direct solver");
    ADD(12,"12: Diagonal scaling  (default for mpp) conjugate gradient iterative");
    ADD(13,"13: Symmetric Gauss-Siedel conjugate gradient iterative");
    ADD(14,"14: SSOR conjugate gradient iterative");
    ADD(15,"15: ILDTO (incomplete factorization) conjugate gradient iterative");
    ADD(16,"16: Modified IDLLTO (incomplete factorization) conjugate gradient iterative ");
  }
  if(LSD_SOLVER==3 || LSD_SOLVER==4) {
    SCALAR(LSD_CGTOL)   {DIMENSION="DIMENSIONLESS";}
  }
  RADIO(LSD_GPT,"Number of Gauss points to be used in the solid elements") {
    ADD(0,"0: Use default value 8");
    ADD(1,"1: One point quadrature is used");
  }
  FLAG(EQHEAT_FUNC);
  if (EQHEAT_FUNC!=0){
    //FUNCTION(EQHEAT_LCID){X_TITLE="Time";Y_TITLE="EQHEAT";}
    DATA(EQHEAT_LCID); //instead of FUNCTION
  } else {
    SCALAR(LSD_EQHEAT)  { DIMENSION="DIMENSIONLESS"; }
  }
  SCALAR(LSD_FWORK)     {DIMENSION="DIMENSIONLESS";}
  SCALAR(LSD_SBC)       {DIMENSION="DIMENSIONLESS";}
  //
optional:
  if(LSD_SOLVER>10) {
    RADIO(LSD_MSGLVL,"Output message level") {
      ADD(0,"0: No output (default)");
      ADD(1,"1: Summary information");
      ADD(2,"2: Detailed information, use only for debugging");
    }
  }
  if(LSD_SOLVER>11) {
    SCALAR(LSD_MAXITR) {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_ABSTOL) {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_RELTOL) {DIMENSION="DIMENSIONLESS";}
  }
  if(LSD_SOLVER==14) {
    SCALAR(LSD_OMEGA14)  {DIMENSION="DIMENSIONLESS";}
  }
  if(LSD_SOLVER==16) {
    SCALAR(LSD_OMEGA16)  {DIMENSION="DIMENSIONLESS";}
  }

  if(LSD_SOLVER>10) {
    FLAG(Option1);
  }
  if (LSD_SOLVER>10 && Option1!=0){
    //FUNCTION(LSD_LCID10){X_TITLE="Time";Y_TITLE="TSF";}
    DATA(LSD_LCID10); //instead of FUNCTION
  } else if(LSD_SOLVER>10) {
    SCALAR(LSD_TSF)  { DIMENSION="DIMENSIONLESS"; }
  }
  if(LSD_SOLVER>10) {
    SCALAR(LSD_MXDMP)  { DIMENSION="DIMENSIONLESS"; }
  }
}

// File format
FORMAT(Keyword971) 
{
  HEADER("*CONTROL_THERMAL_SOLVER");
  COMMENT("$    ATYPE     PTYPE    SOLVER     CGTOL       GPT    EQHEAT     FWORK       SBC");
  CARD("%10d%10d%10d%10lg%10d%10lg%10lg%10lg",LSD_ATYPE,LSD_PTYPE,LSD_SOLVER,LSD_CGTOL,LSD_GPT,SCALAR_OR_FUNCTION(EQHEAT_FUNC,LSD_EQHEAT,EQHEAT_LCID),LSD_FWORK,LSD_SBC);
  //
  if(LSD_SOLVER==11 || LSD_SOLVER==12 || LSD_SOLVER==13 || LSD_SOLVER==15) {
    COMMENT("$   MSGLVL    MAXITR    ABSTOL    RELTOL     OMEGA                           TSF");
    CARD("%10d%10d%10lg%10lg%10s%20s%10lg",LSD_MSGLVL,LSD_MAXITR,LSD_ABSTOL,LSD_RELTOL,_BLANK_,_BLANK_,LSD_TSF);
  }
  if(LSD_SOLVER==14) {
    COMMENT("$   MSGLVL    MAXITR    ABSTOL    RELTOL     OMEGA                           TSF");
    CARD("%10d%10d%10lg%10lg%10lg%20s%10lg",LSD_MSGLVL,LSD_MAXITR,LSD_ABSTOL,LSD_RELTOL,LSD_OMEGA14,_BLANK_,LSD_TSF);
  }
  if(LSD_SOLVER==16) {
    COMMENT("$   MSGLVL    MAXITR    ABSTOL    RELTOL     OMEGA                           TSF");
    CARD("%10d%10d%10lg%10lg%10lg%20s%10lg",LSD_MSGLVL,LSD_MAXITR,LSD_ABSTOL,LSD_RELTOL,LSD_OMEGA16,_BLANK_,LSD_TSF);
  }
}

FORMAT(Keyword971_R6.1) {
  HEADER("*CONTROL_THERMAL_SOLVER");
  COMMENT("$    ATYPE     PTYPE    SOLVER     CGTOL       GPT    EQHEAT     FWORK       SBC");
  CARD("%10d%10d%10d%10lg%10d%10lg%10lg%10lg",LSD_ATYPE,LSD_PTYPE,LSD_SOLVER,LSD_CGTOL,LSD_GPT,SCALAR_OR_FUNCTION(EQHEAT_FUNC,LSD_EQHEAT,EQHEAT_LCID),LSD_FWORK,LSD_SBC);
  //
  if(LSD_SOLVER==11 || LSD_SOLVER==12 || LSD_SOLVER==13 || LSD_SOLVER==15) {
    COMMENT("$   MSGLVL    MAXITR    ABSTOL    RELTOL     OMEGA                           TSF");
    CARD("%10d%10d%10lg%10lg%10s%20s%10lg",LSD_MSGLVL,LSD_MAXITR,LSD_ABSTOL,LSD_RELTOL,_BLANK_,_BLANK_,SCALAR_OR_OBJECT(Option1,LSD_TSF,LSD_LCID10));
  }
  if(LSD_SOLVER==14) {
    COMMENT("$   MSGLVL    MAXITR    ABSTOL    RELTOL     OMEGA                           TSF");
    CARD("%10d%10d%10lg%10lg%10lg%20s%10lg",LSD_MSGLVL,LSD_MAXITR,LSD_ABSTOL,LSD_RELTOL,LSD_OMEGA14,_BLANK_,SCALAR_OR_OBJECT(Option1,LSD_TSF,LSD_LCID10));
  }
  if(LSD_SOLVER==16) {
    COMMENT("$   MSGLVL    MAXITR    ABSTOL    RELTOL     OMEGA                           TSF");
    CARD("%10d%10d%10lg%10lg%10lg%20s%10lg",LSD_MSGLVL,LSD_MAXITR,LSD_ABSTOL,LSD_RELTOL,LSD_OMEGA16,_BLANK_,SCALAR_OR_OBJECT(Option1,LSD_TSF,LSD_LCID10));
  }
}

FORMAT(Keyword971_R7.1) {
  HEADER("*CONTROL_THERMAL_SOLVER");
  COMMENT("$    ATYPE     PTYPE    SOLVER     CGTOL       GPT    EQHEAT     FWORK       SBC");
  CARD("%10d%10d%10d%10lg%10d%10lg%10lg%10lg",LSD_ATYPE,LSD_PTYPE,LSD_SOLVER,LSD_CGTOL,LSD_GPT,SCALAR_OR_FUNCTION(EQHEAT_FUNC,LSD_EQHEAT,EQHEAT_LCID),LSD_FWORK,LSD_SBC);
  //
  if(LSD_SOLVER==11 || LSD_SOLVER==12 || LSD_SOLVER==13 || LSD_SOLVER==15) {
    COMMENT("$   MSGLVL    MAXITR    ABSTOL    RELTOL     OMEGA                           TSF");
    CARD("%10d%10d%10lg%10lg%10s%20s%10lg",LSD_MSGLVL,LSD_MAXITR,LSD_ABSTOL,LSD_RELTOL,_BLANK_,_BLANK_,SCALAR_OR_OBJECT(Option1,LSD_TSF,LSD_LCID10));
  }
  if(LSD_SOLVER==14) {
    COMMENT("$   MSGLVL    MAXITR    ABSTOL    RELTOL     OMEGA                           TSF");
    CARD("%10d%10d%10lg%10lg%10lg%20s%10lg",LSD_MSGLVL,LSD_MAXITR,LSD_ABSTOL,LSD_RELTOL,LSD_OMEGA14,_BLANK_,SCALAR_OR_OBJECT(Option1,LSD_TSF,LSD_LCID10));
  }
  if(LSD_SOLVER==16) {
    COMMENT("$   MSGLVL    MAXITR    ABSTOL    RELTOL     OMEGA                           TSF");
    CARD("%10d%10d%10lg%10lg%10lg%20s%10lg",LSD_MSGLVL,LSD_MAXITR,LSD_ABSTOL,LSD_RELTOL,LSD_OMEGA16,_BLANK_,SCALAR_OR_OBJECT(Option1,LSD_TSF,LSD_LCID10));
  }
  if(LSD_SOLVER>10)
  {
    COMMENT("$    MXDMP");
    CARD("%10d",LSD_MXDMP);
  }
}

