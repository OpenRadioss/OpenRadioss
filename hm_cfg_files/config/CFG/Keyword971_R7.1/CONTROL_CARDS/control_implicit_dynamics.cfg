//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//CONTROL_IMPLICIT_DYNAMICS
//

ATTRIBUTES(COMMON)
{
// INPUT ATTRIBUTES
    LSD_CidOpt                                = VALUE(INT, "Options");
    curveoption                               = VALUE(INT,"IMassCurve");
    LSD_IMASS                                 = VALUE(INT,"Implicit analysis type");
    LSD_LCID                                  = VALUE(CURVE,"curve ID = (-SCALE) used to control amount of implicit dynamic effects applied to the analysis");
    LSD_GAMA0                                 = VALUE(FLOAT,"Newmark time integration constant");
    LSD_BETA                                  = VALUE(FLOAT,"Newmark time integration constant");
    LSD_TDYBIR                                = VALUE(FLOAT,"Birth time for application of dynamic terms");
    LSD_TDYDTH                                = VALUE(FLOAT,"Death time for application of dynamic terms");
    LSD_TDYBUR                                = VALUE(FLOAT,"Burial time for application of dynamic terms");
    LSD_TRATE                                 = VALUE(INT,"Rate effects switch:");

// HM  INTERNAL
    KEYWORD_STR                               = VALUE(STRING, "Solver Keyword");
    IO_FLAG                                   = VALUE(INT, "");
    option                                    = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                               = 9000;
    LSD_CidOpt                                = 7912;
    curveoption                               = 3016;
    LSD_LCID                                  = 45;
    LSD_IMASS                                 = 3174;
    LSD_GAMA0                                 = 1523;
    LSD_BETA                                  = 1662;
    LSD_TDYBIR                                = 894;
    LSD_TDYDTH                                = 895;
    LSD_TDYBUR                                = 896;
    LSD_TRATE                                 = 897;

    IO_FLAG                                   = -1;
    option                                    = -1;
}

CHECK(COMMON)
{

}

DEFAULTS(COMMON)
{
    LSD_IMASS                                 = 0;
    LSD_GAMA0                                 = 0.50;
    LSD_BETA                                  = 0.25;
    LSD_TDYBIR                                = 0.0;
    LSD_TDYDTH                                = 1.0E+28;
    LSD_TDYBUR                                = 1.0E+28;
    LSD_TRATE                                 = 0;
}

GUI(COMMON)
{
mandatory:
  RADIO(LSD_CidOpt)
  {
    ADD(1,"NONE");
    ADD(2,"DYN");
    ADD(3,"SPR");
  }

  if(LSD_CidOpt == 1)
  {
    ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_DYNAMICS");
  }
  else if(LSD_CidOpt == 2)
  {
    ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_DYNAMICS_DYN");
  }
  else if(LSD_CidOpt == 3)
  {
    ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_DYNAMICS_SPR");
  }
optional:  
  FLAG(curveoption);
  if (curveoption != FALSE)
  {
      DATA(LSD_LCID);
  }
  else
  {
      RADIO(LSD_IMASS)
      {
        ADD(0,"0: Static analysis");
        ADD(1,"1: Dynamic analysis using Newmark time integration");
        ADD(2,"2: Dynamic analysis by modal superposition following the solution of the eigenvalue problem");
        ADD(3,"3: Dynamic analysis by modal superposition using the eigenvalue solution in the d3eigv files that are in the runtime directory");
      }
  }

  SCALAR(LSD_GAMA0)  {DIMENSION="DIMENSIONLESS";}
  SCALAR(LSD_BETA)   {DIMENSION="DIMENSIONLESS";}
  SCALAR(LSD_TDYBIR) {DIMENSION="DIMENSIONLESS";}
  SCALAR(LSD_TDYDTH) {DIMENSION="DIMENSIONLESS";}
  SCALAR(LSD_TDYBUR) {DIMENSION="DIMENSIONLESS";}
  RADIO(LSD_TRATE)
  {
    ADD(0,"0: Rate effects are on in constitutive models");
    ADD(1,"1: Rate effects are off in constitutive models");
    ADD(2,"2: Rate effects are off in constitutive models for both explicit and implicit");
  }
}

//File format
FORMAT(Keyword971)
{
  COMMENT("$    IMASS     GAMMA      BETA    TDYBIR    TDYDTH    TDYBUR     IRATE");
  CARD("%10d%10lg%10lg%10lg%10lg%10lg%10d",SCALAR_OR_FUNCTION(curveoption,LSD_IMASS,LSD_LCID),LSD_GAMA0,LSD_BETA,LSD_TDYBIR,LSD_TDYDTH,LSD_TDYBUR,LSD_TRATE);
}

FORMAT(Keyword971_R7.1)
{
  ASSIGN(IO_FLAG,0,IMPORT);
  ASSIGN(IO_FLAG,1,EXPORT);
 
  if(IO_FLAG == 0)
  {
    HEADER("*CONTROL_IMPLICIT_DYNAMICS%s",option);
  } 
  if(IO_FLAG == 1 && LSD_CidOpt == 2)
  {
     HEADER("*CONTROL_IMPLICIT_DYNAMICS_DYN");
  }
  else if(IO_FLAG == 1 && LSD_CidOpt == 3)
  {
     HEADER("*CONTROL_IMPLICIT_DYNAMICS_SPR"); 
  }
  else
  {
     HEADER("*CONTROL_IMPLICIT_DYNAMICS"); 
  }
  
  if(IO_FLAG == 0)
  {
    if(option == "")
    {
      ASSIGN(LSD_CidOpt,1);
    }
    else if(option == "_DYN")
    {
      ASSIGN(LSD_CidOpt,2);
    }
    else if(option == "_SPR")
    {
      ASSIGN(LSD_CidOpt,3);
    }
  }
  
  COMMENT("$    IMASS     GAMMA      BETA    TDYBIR    TDYDTH    TDYBUR     IRATE");
  CARD("%10d%10lg%10lg%10lg%10lg%10lg%10d",SCALAR_OR_FUNCTION(curveoption,LSD_IMASS,LSD_LCID),LSD_GAMA0,LSD_BETA,LSD_TDYBIR,LSD_TDYDTH,LSD_TDYBUR,LSD_TRATE);
}