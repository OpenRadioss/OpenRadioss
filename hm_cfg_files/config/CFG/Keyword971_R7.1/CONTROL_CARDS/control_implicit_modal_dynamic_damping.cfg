//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// CONTROL_IMPLICIT_MODAL_DYNAMIC_DAMPING - CONTROL_IMPLICIT_MODAL_DYNAMIC_DAMPING_SPECIFIC - CONTROL_IMPLICIT_MODAL_DYNAMIC_DAMPING_FREQUENCY_RANGE
//

ATTRIBUTES(COMMON)
{
    // INPUT ATTRIBUTES
    DAMPING_OPT                             = VALUE(INT,       "Options");
    LSD_MOD_ZETA                            = VALUE(FLOAT,     "Modal Dynamic damping coefficient");

    // HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING,    "Solver Keyword");
    IO_FLAG                                 = VALUE(INT,       "Import/Export flag");
    option                                  = VALUE(STRING,    "option");
    subobject_specific                      = VALUE(SUBOBJECT, "specific option");
    //
    // Specific_Damping_Cards                  = SIZE("Cards for SPECIFIC option");
    // LSD_MID_ARRAY                           = ARRAY[Specific_Damping_Cards](INT,   "Mode ID");
    // LSD_ZETA                                = ARRAY[Specific_Damping_Cards](FLOAT, "Modal Dynamic damping coefficient");
    //
    //subobject_frequency_range               = VALUE(SUBOBJECT, "frequency range option");
    //
    Frequency_Range_Damping_Cards           = SIZE("Cards for FREQUENCY_RANGE option");
    LSD_FREQ_ARRAY                          = ARRAY[Frequency_Range_Damping_Cards](FLOAT, "Frequency value");
    //LSD_ZETA                                = ARRAY[Frequency_Range_Damping_Cards](FLOAT, "Modal Dynamic damping coefficient");
    LSD_ZETA_FR                             = ARRAY[Frequency_Range_Damping_Cards](FLOAT, "Modal Dynamic damping coefficient");
    
    _HAS_HEADER                             = VALUE(BOOL,      "has header");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    // INPUT ATTRIBUTES
    DAMPING_OPT                             = 7929;
    LSD_MOD_ZETA                            = 7931;

    // HM INTERNAL
    KEYWORD_STR                             = 9000;
    IO_FLAG                                 = -1;
    option                                  = -1;
    subobject_specific                      = -1;
    //
    // Specific_Damping_Cards                  = 7934;
    // LSD_MID_ARRAY                           = 7932;
    // LSD_ZETA                                = 599;
    //
    //subobject_frequency_range               = -1;
    //
    Frequency_Range_Damping_Cards           = 7935;
    LSD_FREQ_ARRAY                          = 7933;
    //LSD_ZETA                                = 599;
    LSD_ZETA_FR                             = 11292;
}

DEFAULTS(COMMON)
{
    _HAS_HEADER                             = TRUE;
}

GUI(COMMON)
{
mandatory:
    RADIO(DAMPING_OPT, "Options")
    {
        ADD(1, "BLANK");
        ADD(2, "SPECIFIC");
        ADD(3, "FREQUENCY_RANGE");
    }

optional:
    if (DAMPING_OPT == 1) 
    {
        ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_MODAL_DYNAMIC_DAMPING");

        SCALAR(LSD_MOD_ZETA) {DIMENSION="DIMENSIONLESS";}
    }
    if(DAMPING_OPT == 2) 
    {
        ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_MODAL_DYNAMIC_DAMPING_SPECIFIC");
        SUBOBJECT(subobject_specific)  { SUBTYPES = ( /SUBOBJECT/CONTROL_IMPLICIT_MODAL_DYNAMIC_DAMPING_SPECIFIC ) ; }
        //
        // SIZE(Specific_Damping_Cards);
        // ARRAY(Specific_Damping_Cards,"")
        // {
        //     SCALAR(LSD_MID_ARRAY);
        //     SCALAR(LSD_ZETA);
        // }
    }
    if(DAMPING_OPT == 3)
    {
        ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_MODAL_DYNAMIC_DAMPING_FREQUENCY_RANGE");
        //SUBOBJECT(subobject_frequency_range)  { SUBTYPES = ( /SUBOBJECT/CONTROL_IMPLICIT_MODAL_DYNAMIC_DAMPING_FRANGE ) ; }
        //
        SIZE(Frequency_Range_Damping_Cards);
        ARRAY(Frequency_Range_Damping_Cards,"")
        {
            SCALAR(LSD_FREQ_ARRAY);
            //SCALAR(LSD_ZETA);
            SCALAR(LSD_ZETA_FR);
        }
    }
}

// File format
FORMAT(Keyword971_R7.1)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if(IO_FLAG == 0)
    {
        if(DAMPING_OPT == 1)
            HEADER("*CONTROL_IMPLICIT_MODAL_DYNAMIC_DAMPING");
        else if(DAMPING_OPT == 2)
            HEADER("*CONTROL_IMPLICIT_MODAL_DYNAMIC_DAMPING_SPECIFIC");
        else if(DAMPING_OPT == 3)
            HEADER("*CONTROL_IMPLICIT_MODAL_DYNAMIC_DAMPING_FREQUENCY_RANGE");
    }
    else //IMPORT
    {
        HEADER("*CONTROL_IMPLICIT_MODAL_DYNAMIC_DAMPING%-s",option);

        if(option == "")
            ASSIGN(DAMPING_OPT,1,IMPORT);
        else if(option == "_SPECIFIC")
            ASSIGN(DAMPING_OPT,2,IMPORT);
        else if(option == "_FREQUENCY_RANGE")
             ASSIGN(DAMPING_OPT,3,IMPORT);
    }

    if(DAMPING_OPT == 1)
    {
        COMMENT("$    ZETA1");
        CARD("%10lg",LSD_MOD_ZETA);
    }
    else if(DAMPING_OPT == 2)
    {
        SUBOBJECTS(subobject_specific, /SUBOBJECT/CONTROL_IMPLICIT_MODAL_DYNAMIC_DAMPING_SPECIFIC);
        //
        // COMMENT("$      MID      ZETA       MID      ZETA       MID      ZETA       MID      ZETA");
        // FREE_CELL_LIST(Specific_Damping_Cards,"%10d%10lg",LSD_MID_ARRAY,LSD_ZETA,80);

    }
    else if(DAMPING_OPT == 3)
    {
        //SUBOBJECTS(subobject_frequency_range, /SUBOBJECT/CONTROL_IMPLICIT_MODAL_DYNAMIC_DAMPING_FRANGE);
        
        COMMENT("$     FREQ      ZETA      FREQ      ZETA      FREQ      ZETA      FREQ      ZETA");
        //FREE_CELL_LIST(Frequency_Range_Damping_Cards,"%10lg%10lg",LSD_FREQ_ARRAY,LSD_ZETA,80);
        FREE_CELL_LIST(Frequency_Range_Damping_Cards,"%10lg%10lg",LSD_FREQ_ARRAY,LSD_ZETA_FR,80);
    }
}
