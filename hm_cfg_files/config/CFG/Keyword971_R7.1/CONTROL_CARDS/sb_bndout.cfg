//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
// --- sub_database_bndout.cfg ---
//  DATABASE database_option_abstat 5896   
//   02/03/2020

ATTRIBUTES(COMMON)
{
    // INPUT ATTRIBUTES
    LSD_BNDOUT = VALUE(FLOAT, "Time interval between outputs. If DT is zero, no output is printed");
    LSD_BNDOUTBinaryOpt = VALUE(STRING, "Flag for binary output");
    LSD_BNDOUT_LCUR = VALUE(CURVE,  "Optional curve ID specifying time interval between dumps");
    LSD_BNDOUT_IOPT = VALUE(INT,"Flag to govern behavior of the plot frequency load curve defined by LCUR");
    LSD_BNDOUT_Option1 = VALUE(INT,"It controls the nodal force group output,");
    LSD_BNDOUT_Option2 = VALUE(INT,"It controls the concentrated force output");
    LSD_BNDOUT_Option3 = VALUE(INT,"It controls the pressure boundary condition output");
    LSD_BNDOUT_Option4 = VALUE(INT,"It controls the velocity/displacement/acceleration nodal boundary conditions");

    // HM INTERNAL
    KEYWORD_STR = VALUE(STRING, "DATABASE_BNDOUT");
    IO_FLAG  = VALUE(INT, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    LSD_BNDOUT = 2204;
    LSD_BNDOUTBinaryOpt = 5909;
    LSD_BNDOUT_LCUR = 5910;
    LSD_BNDOUT_IOPT = 5911;
    LSD_BNDOUT_Option1 = 8308;
    LSD_BNDOUT_Option2 = 8309;
    LSD_BNDOUT_Option3 = 8310;
    LSD_BNDOUT_Option4 =  8311;

    KEYWORD_STR = 9000;
    IO_FLAG = -1;
}

DEFAULTS(COMMON)
{
    LSD_BNDOUT  = 0;
    LSD_BNDOUT_IOPT = 0;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*DATABASE_BNDOUT");
    SCALAR(LSD_BNDOUT,"DT");
    RADIO(LSD_BNDOUTBinaryOpt,"BINARY")
    {
        ADD("0","DEFAULT");
        ADD("1","ASCII");
        ADD("2","BINARY");
        ADD("3","ASCII-BINARY");
    }
    DATA(LSD_BNDOUT_LCUR,"LCUR");

    RADIO(LSD_BNDOUT_IOPT,"IOPT")
    {
        ADD(1,"1: At the time each plot is generated, the load curve value is added to the current time to determine the next plot time");
        ADD(2,"2: At the time each plot is generated, the next plot time, t, is computed so that t = the current time + LCUR(t)");
        ADD(3,"3: A plot is generated for each abscissa point in the load curve definition. The actual value of the load curve is ignored");
    }

    RADIO(LSD_BNDOUT_Option1)
    {
        ADD(0,"Category is included in the bndout file");
        ADD(1,"Category is not included in the bndout file");
    }

    RADIO(LSD_BNDOUT_Option2)
    {
        ADD(0,"Category is included in the bndout file");
        ADD(1,"Category is not included in the bndout file");
    }

    RADIO(LSD_BNDOUT_Option3)
    {
        ADD(0,"Category is included in the bndout file");
        ADD(1,"Category is not included in the bndout file");
    }

    RADIO(LSD_BNDOUT_Option4)
    {
        ADD(0,"Category is included in the bndout file");
        ADD(1,"Category is not included in the bndout file");
    }
}

// File format

FORMAT(Keyword971_R7.1)
{
    ASSIGN(IO_FLAG,0,IMPORT);
    ASSIGN(IO_FLAG,1,EXPORT);
    if(IO_FLAG == 1)
    {
        HEADER("*DATABASE_BNDOUT");
        if (LSD_BNDOUTBinaryOpt == "DEFAULT")
        {
            ASSIGN(LSD_BNDOUTBinaryOpt,0,EXPORT);
        }
        else if(LSD_BNDOUTBinaryOpt == "ASCII")
        {
            ASSIGN(LSD_BNDOUTBinaryOpt,1,EXPORT);
        }
        else if(LSD_BNDOUTBinaryOpt == "BINARY")
        {
            ASSIGN(LSD_BNDOUTBinaryOpt,2,EXPORT);
        }
        else if(LSD_BNDOUTBinaryOpt == "ASCII-BINARY")
        {
            ASSIGN(LSD_BNDOUTBinaryOpt,3,EXPORT);
        }
    }
    COMMENT("$       DT    BINARY      LCUR     IOOPT   OPTION1   OPTION2   OPTION3   OPTION4");
    CARD("%10lg%10s%10d%10d%10d%10d%10d%10d",LSD_BNDOUT,LSD_BNDOUTBinaryOpt,LSD_BNDOUT_LCUR,LSD_BNDOUT_IOPT,LSD_BNDOUT_Option1,LSD_BNDOUT_Option2,LSD_BNDOUT_Option3,LSD_BNDOUT_Option4);
}

FORMAT(Keyword971)
{
    ASSIGN(IO_FLAG,0,IMPORT);
    ASSIGN(IO_FLAG,1,EXPORT);
    if(IO_FLAG == 1)
    {
        HEADER("*DATABASE_BNDOUT");
        if (LSD_BNDOUTBinaryOpt == "DEFAULT")
        {
            ASSIGN(LSD_BNDOUTBinaryOpt,0,EXPORT);
        }
        else if(LSD_BNDOUTBinaryOpt == "ASCII")
        {
            ASSIGN(LSD_BNDOUTBinaryOpt,1,EXPORT);
        }
        else if(LSD_BNDOUTBinaryOpt == "BINARY")
        {
            ASSIGN(LSD_BNDOUTBinaryOpt,2,EXPORT);
        }
        else if(LSD_BNDOUTBinaryOpt == "ASCII-BINARY")
        {
            ASSIGN(LSD_BNDOUTBinaryOpt,3,EXPORT);
        }
    }
    COMMENT("$       DT    BINARY      LCUR     IOOPT");
    CARD("%10lg%10s%10d%10d",LSD_BNDOUT,LSD_BNDOUTBinaryOpt,LSD_BNDOUT_LCUR,LSD_BNDOUT_IOPT);
}
