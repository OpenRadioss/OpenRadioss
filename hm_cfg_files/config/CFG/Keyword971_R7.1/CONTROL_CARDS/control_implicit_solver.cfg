//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//CONTROL_IMPLICIT_SOLVER
//

ATTRIBUTES(COMMON)
{
// INPUT ATTRIBUTES
    Option2                                   = VALUE(INT,"Options");
    LSD_LSOLVR                                = VALUE(INT,"Linear equation solver method");
    LSD_LPRINT                                = VALUE(INT,"Linear solver print flag controls screen and message file output");
    LSD_NEGEV                                 = VALUE(INT,"Negative eigenvalue flag");
    SOLVER_ORDER                              = VALUE(INT,"Ordering option");
    SOLVER_DRCM                               = VALUE(INT,"Drilling rotation constraint method");
    SOLVER_DRCPRM                             = VALUE(FLOAT,"Drilling rotation constraint parameter, DRCPRM");
    SOLVER_AUTOSPC                            = VALUE(INT,"Automatic Constraint Scan flag");
    SOLVER_AUTOTOL                            = VALUE(FLOAT,"AUTOSPC tolerance");
    inertiaoption                             = VALUE(INT, "OptionalCard");
    SOLVER_LCPACK                             = VALUE(INT,"Matrix assembly package");
    LSD_MTXDMP                                = VALUE(INT,"Matrix and right-hand-side dumping");

// HM INTERNAL
    KEYWORD_STR                               = VALUE(STRING, "Solver Keyword");
    IO_FLAG                                   = VALUE(INT, "");
    option                                    = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                               = 9000;
    Option2                                   = 687;
    LSD_LSOLVR                                = 3153;
    LSD_LPRINT                                = 3154;
    LSD_NEGEV                                 = 3155;
    SOLVER_ORDER                              = 4120;
    SOLVER_DRCM                               = 4121;
    SOLVER_DRCPRM                             = 4122;
    SOLVER_AUTOSPC                            = 4123;
    SOLVER_AUTOTOL                            = 4124;
    inertiaoption                             = 3032;
    SOLVER_LCPACK                             = 4473;
    LSD_MTXDMP                                = 2250;

    IO_FLAG                                   = -1;
    option                                    = -1;
}

CHECK(COMMON)
{

}

DEFAULTS(COMMON)
{
    LSD_LSOLVR                                = 4;
    LSD_LPRINT                                = 0;
    LSD_NEGEV                                 = 2;
    SOLVER_ORDER                              = 0;
    SOLVER_DRCM                               = 4;
    SOLVER_AUTOSPC                            = 1;
    SOLVER_LCPACK                             = 2;
    LSD_MTXDMP                                = 0;
}

GUI(COMMON)
{
mandatory:
  RADIO(Option2)
  {
    ADD(1,"BLANK");
    ADD(2,"DYN");
    ADD(3,"SPR");
  }

  if(Option2 == 1)
  {
    ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_SOLVER");
  }
  else if(Option2 == 2)
  {
    ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_SOLVER_DYN");
  }
  else if(Option2 == 3)
  {
    ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_SOLVER_SPR");
  }

optional:
    RADIO(LSD_LSOLVR)
    {
      ADD(4,"4: SMP parallel multi-frontal sparse solver (default)");
      ADD(5,"5: SMP parallel multi-frontal sparse solver, double precision");
      ADD(6,"6: BCSLIB-EXT, direct, sparse, double precision");
      ADD(10,"10: Iterative, best of currently available iterative methods");
      ADD(11,"11: Iterative, Conjugate Gradient method");
      ADD(13,"13: Iterative, CG with Incomplete Choleski preconditioner");
      ADD(14,"14: Iterative, Lanczos method");
      ADD(15,"15: Iterative, Lanczos with Jacobi preconditioner");
      ADD(16,"16: Iterative, Lanczos with Incomplete Choleski preconditioner");
    }
    RADIO(LSD_LPRINT)
    {
      ADD(0,"0: No printing");
      ADD(1,"1: Output summary statistics on memory, cpu requirements");
      ADD(2,"2: More statistics");
      ADD(3,"3: Even more statistics and debug checking");
    }
    RADIO(LSD_NEGEV)
    {
      ADD(1,"1: Stop, or retry step if auto step control is active");
      ADD(2,"2: Print warning message, try to continue (default)");
    }
    RADIO(SOLVER_ORDER)
    {
      ADD(0,"0: Method set automatically by LS-DYNA");
      ADD(1,"1: MMD, Multiple Minimum Degree");
      ADD(2,"2: Metis");
    }
    RADIO(SOLVER_DRCM)
    {
      ADD(1,"1: Add drilling stiffness (old Version 970 method)");
      ADD(2,"2: Same as 4 below");
      ADD(3,"3: Add no stiffness ");
      ADD(4,"4: Add drilling stiffness (default)");
    }
    SCALAR(SOLVER_DRCPRM) {DIMENSION="DIMENSIONLESS";}
    RADIO(SOLVER_AUTOSPC)
    {
      ADD(1,"1: Scan the assembled stiffness matrix looking for unconstrained, unattached degrees of freedom");
      ADD(2,"2: Do not add constraints");
    }
    SCALAR(SOLVER_AUTOTOL) {DIMENSION="DIMENSIONLESS";}
  
    FLAG(inertiaoption);
    optional:
    if(inertiaoption != FALSE) {
      SEPARATOR("OPTIONAL CARDS 1");
      SCALAR(SOLVER_LCPACK) {DIMENSION="DIMENSIONLESS";}
      RADIO(LSD_MTXDMP)
      {
        ADD(0,"0: No dumping ");
        ADD(1,"1: Dump all matrices and right-hand-side vectors every MTXDMP time steps");
      }
    }
}

//File format
FORMAT(Keyword971)
{
  COMMENT("$   LSOLVR    LPRTNT     NEGEV     ORDER      DRCM    DRCPRM   AUTOSPC   AUTOTOL");
  CARD("%10d%10d%10d%10d%10d%10lg%10d%10lg",LSD_LSOLVR,LSD_LPRINT,LSD_NEGEV,SOLVER_ORDER,SOLVER_DRCM,SOLVER_DRCPRM,SOLVER_AUTOSPC,SOLVER_AUTOTOL);

  if(inertiaoption != FALSE)
    COMMENT("$   LCPACK    MTXDMP");
  FREE_CARD(inertiaoption,"%10d%10d",SOLVER_LCPACK,LSD_MTXDMP);
}

FORMAT(Keyword971_R7.1)
{
  ASSIGN(IO_FLAG,0,IMPORT);
  ASSIGN(IO_FLAG,1,EXPORT);
 
  if(IO_FLAG == 0)
  {
    HEADER("*CONTROL_IMPLICIT_SOLVER%s",option);
  } 
  if(IO_FLAG == 1 && Option2 == 2)
  {
     HEADER("*CONTROL_IMPLICIT_SOLVER_DYN");
  }
  else if(IO_FLAG == 1 && Option2 == 3)
  {
     HEADER("*CONTROL_IMPLICIT_SOLVER_SPR");
  }
  else
  {
     HEADER("*CONTROL_IMPLICIT_SOLVER"); 
  }
  
  if(IO_FLAG == 0)
  {
    if(option == "")
    {
      ASSIGN(Option2,1);
    }
    else if(option == "_DYN")
    {
      ASSIGN(Option2,2);
    }
    else if(option == "_SPR")
    {
      ASSIGN(Option2,3);
    }
  }

  COMMENT("$   LSOLVR    LPRTNT     NEGEV     ORDER      DRCM    DRCPRM   AUTOSPC   AUTOTOL");
  CARD("%10d%10d%10d%10d%10d%10lg%10d%10lg",LSD_LSOLVR,LSD_LPRINT,LSD_NEGEV,SOLVER_ORDER,SOLVER_DRCM,SOLVER_DRCPRM,SOLVER_AUTOSPC,SOLVER_AUTOTOL);

  if(inertiaoption != FALSE)
    COMMENT("$   LCPACK    MTXDMP");
  FREE_CARD(inertiaoption,"%10d%10d",SOLVER_LCPACK,LSD_MTXDMP);
}