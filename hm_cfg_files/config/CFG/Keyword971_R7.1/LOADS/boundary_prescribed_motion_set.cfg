//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// BOUNDARY_PRESCRIBED_MOTION_SET
//

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES

    //ID Card
    TITLE                                   = VALUE(STRING,       "HEADING");

    //Card 1
    entityid                                = VALUE(MULTIOBJECT,  "Node ID or nodal set ID or segment set ID or part ID") { SUBTYPES = ( /NODE, /SETS , /ELEMS, /COMPONENT) ; }
    DOF                                     = VALUE(INT,          "Applicable degrees-of-freedom");
    LSD_VAD                                 = VALUE(INT,          "Velocity/Acceleration/Displacement flag");
    curveid                                 = VALUE(CURVE,        "Curve ID or function ID to describe motion value versus time");
    SFACT                                   = VALUE(FLOAT,        "Load curve scale factor");
    LSD_VID1                                = VALUE(VECTOR,       "Vector ID for DOF values of 4 or 8");
    LSD_TDEATH                              = VALUE(FLOAT,        "Time imposed motion/constraint is removed");
    LSD_BIRTH                               = VALUE(FLOAT,        "Time that the imposed motion/constraint is activated");

    //SET_BOX Card
    BOXID                                   = VALUE(BLOCK,        "A box ID defining a box region in space in which the constraint is activated");
    LSD_TOFFSET                             = VALUE(INT,          "Time offset flag for the SET_BOX option");
    LSD_LCBCHK                              = VALUE(CURVE,        "Optional load curve allowing more flexible and efficient use of SET_BOX option");

    //Additional Card 3
    BPM_OFFSET1                             = VALUE(FLOAT,        "Offset for DOF types 9 - 11 (y, x, z direction)");
    BPM_OFFSET2                             = VALUE(FLOAT,        "Offset for DOF types 9 - 11 (z, x, y direction)");
    LSD_MRB                                 = VALUE(COMPONENT,    "Main rigid body for measuring the relative displacement");
    LSD_NODE1                               = VALUE(NODE,         "Optional orientation node N1");
    LSD_NODE2                               = VALUE(NODE,         "Optional orientation node N2");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING,       "Solver Keyword");
    LSD_TitleOpt                            = VALUE(INT,          "Title"); // this doesn't work
    VectOption                              = VALUE(INT,          "Vector Option");

    IOFLAG                                  = VALUE(INT,          "IOFLAG");
    _opt                                    = VALUE(STRING,       "Keyword Option");
    dummy                                   = VALUE(INT,          "dummy");
    dummy_keyword                           = VALUE(STRING,       "dummy_keyword");
    setBox_flag                             = VALUE(INT,          "set box flag");
    entityid_type                            = VALUE(STRING, "Type of multi object");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //ID Card
    TITLE                                   = -1;

    //Card 1
    DOF                                     = 2774;
    LSD_VAD                                 = 6050;
    SFACT                                   = 4396;
    LSD_VID1                                = 4125;
    LSD_TDEATH                              = 2239;
    LSD_BIRTH                               = 3074;

    //SET_BOX Card
    BOXID                                   = 2799;
    LSD_TOFFSET                             = -1;
    LSD_LCBCHK                              = -1;

    //Additional Card 3
    BPM_OFFSET1                             = 4101;
    BPM_OFFSET2                             = 4102;
    LSD_MRB                                 = 3033;
    LSD_NODE1                               = 86;
    LSD_NODE2                               = 87;

    //HM INTERNAL
    KEYWORD_STR                             = 9000;
    LSD_TitleOpt                            = 90; // this doesn't work
    VectOption                              = 6253;

    IOFLAG                                  = -1;
    _opt                                    = -1;
    dummy                                   = -1;
    dummy_keyword                           = -1;
    setBox_flag                             = -1;
}

DEFAULTS(COMMON)
{
    SFACT                                   = 1.0;
    LSD_TDEATH                              = 1E+28;
    BPM_OFFSET1                             = 0;
    BPM_OFFSET2                             = 0;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*BOUNDARY_PRESCRIBED_MOTION_SET");
    FLAG(setBox_flag, "Set box Option");
    if(setBox_flag == 1)
    {
        ASSIGN(KEYWORD_STR,"_BOX");
    }
    FLAG(LSD_TitleOpt, "Title Option");
    if(LSD_TitleOpt == 1)
    {
        ASSIGN(KEYWORD_STR, "_ID");
        SCALAR(TITLE, "HEADING")            { DIMENSION = "DIMENSIONLESS" ; }
    }
    DATA(entityid, "typeID");
    RADIO(DOF, "DOF")
    {
        ADD(1,   "1: x-translational degree-of-freedom");
        ADD(2,   "2: y-translational degree-of-freedom");
        ADD(3,   "3: z-translational degree-of-freedom");
        ADD(4,   "4: Translational motion in direction given by the VID. Movement on plane normal to the vector is permitted");
        ADD(-4,  "-4: Translational motion in direction given by the VID.Movement on plane normal to the vector is not permitted");
        ADD(5,   "5: x-rotational degree-of-freedom");
        ADD(6,   "6: y-rotational degree-of-freedom");
        ADD(7,   "7: z-rotational degree-of-freedom");
        ADD(8,   "8: Rotational motion about an axis which is passing through the center-of-gravity of the node, node set, or rigid body and is parallel to vector VID. Rotation about the normal axes, namely, axes in a plane normal to VID, is permitted.");
        ADD(-8,  "-8: Rotational motion about an axis which is passing through the center-of-gravity of the node or node set and is parallel to vector VID. Rotation about the normal axes is not permitted");
        ADD(9,   "9: Rotation with axis parallel to the x-axis and passing through the yz-plane at y= OFFSET1 and z = OFFSET2. Radial motion is NOT permitted");
        ADD(-9,  "-9: Rotation with axis parallel to the x-axis and passing through the yz-plane at y = OFFSET1 and z =OFFSET2. Radial motion is permitted");
        ADD(10,  "10: Rotation with axis parallel to the y-axis and passing through the zx-plane at z = OFFSET1 and x = OFFSET2. Radial motion is NOT permitted");
        ADD(-10, "-10: Rotation with axis parallel to the y-axis and passing through the zx-plane at z = OFFSET1 and x = OFFSET2. Radial motion is permitted");
        ADD(11,  "11: Rotation with axis parallel to the z-axis and passing through the xy-plane at x = OFFSET1 and y = OFFSET2. Radial motion is NOT permitted");
        ADD(-11, "-11: Rotation with axis parallel to the z-axis and passing through the xy-plane at x = OFFSET1 and y = OFFSET2. Radial motion is permitted");
        ADD(12,  "12: Translational motion in direction given by the normals to the segments");
    }
    RADIO(LSD_VAD, "VAD")
    {
        ADD(0, "0: Velocity (rigid bodies and nodes)");
        ADD(1, "1: Acceleration (rigid bodies and nodes)");
        ADD(2, "2: Displacement (rigid bodies and nodes)");
        ADD(3, "3: Velocity versus displacement (rigid bodies only)");
        ADD(4, "4: Relative displacement (rigid bodies only)");
    }
    DATA(curveid, "LCID");
    SCALAR(SFACT, "SFACT")            { DIMENSION = "DIMENSIONLESS" ; }
    FLAG(VectOption, "VectOption");
    if(VectOption == 1)
    {
        DATA(LSD_VID1, "VID");
    }
    SCALAR(LSD_BIRTH,   "BIRTH")            { DIMENSION = "t" ; }
    SCALAR(LSD_TDEATH,  "DEATH")            { DIMENSION = "t" ; }
    if(setBox_flag == 1)
    {
        DATA(BOXID, "BOXID");
        RADIO(LSD_TOFFSET, "TOFFSET")
        {
            ADD(0, "0: No time offset is applied to LCID");
            ADD(1, "1: the time value of the load curve, LCID, will be offset by the time when the node enters the box");
        }
        DATA(LSD_LCBCHK, "LCBCHK");
    }
    if(DOF == -9 || DOF == -10 || DOF == -11 || DOF == 9 || DOF == 10 || DOF == 11 || LSD_VAD == 4)
    {
        SCALAR(BPM_OFFSET1, "OFFSET1")      { DIMENSION = "l" ; }
        SCALAR(BPM_OFFSET1, "OFFSET2")      { DIMENSION = "l" ; }
        DATA(LSD_MRB, "MRB");
        DATA(LSD_NODE1, "NODE1");
        DATA(LSD_NODE2, "NODE2");
    }
}

// File format
FORMAT(Keyword971_R6.1)
{
    ASSIGN(IOFLAG, 1, IMPORT);
    ASSIGN(IOFLAG, 0, EXPORT);

    if(IOFLAG == 0)
    {
        ASSIGN(KEYWORD_STR, *BOUNDARY_PRESCRIBED_MOTION_SET, EXPORT);

        if(setBox_flag == 1)
        {
            ASSIGN(dummy_keyword, _COMBINE(dummy_keyword, "_BOX"), EXPORT);
        }

        if(LSD_TitleOpt == 1)
        {
            ASSIGN(dummy_keyword, _COMBINE(dummy_keyword, "_ID"), EXPORT);
        }

        ASSIGN(KEYWORD_STR,       _COMBINE(KEYWORD_STR, dummy_keyword),  EXPORT);
        CARD("%-s", KEYWORD_STR);
    }
    else
    {
        HEADER("*BOUNDARY_PRESCRIBED_MOTION_SET%s", _opt);

        ASSIGN(setBox_flag,   _FIND(_opt, "_BOX"), IMPORT);
        ASSIGN(LSD_TitleOpt,  _FIND(_opt, "_ID"), IMPORT);  // LSD_TitleOpt seems to be readonly!!!
    }

    if(IOFLAG == 0 && LSD_TitleOpt == 1)
    {
        COMMENT("$       IDHEADING                                                               ");
        CARD("%10d%-70s", _ID_, TITLE);
    }

    if (IOFLAG == 1)
    {
        CARD_PREREAD("%50s%10d", _BLANK_, LSD_VID1);

        if (LSD_VID1 == NONE)
        {
            ASSIGN(VectOption, 0, IMPORT);
        }
        else
        {
            ASSIGN(VectOption, 1, IMPORT);
        }
    }

    //Card 1
    if(VectOption == 1)
    {
        COMMENT("$   typeID       DOF       VAD      LCID        SF       VID     DEATH     BIRTH");
        CARD("%10d%10d%10d%10d%10lg%10d%10lg%10lg",  entityid, DOF, LSD_VAD, curveid, SFACT, LSD_VID1, LSD_TDEATH, LSD_BIRTH);
    }
    else
    {
        COMMENT("$   typeID       DOF       VAD      LCID        SF               DEATH     BIRTH");
        CARD("%10d%10d%10d%10d%10lg%10s%10lg%10lg",  entityid, DOF, LSD_VAD, curveid, SFACT, _BLANK_, LSD_TDEATH, LSD_BIRTH);
    }
    ASSIGN(entityid_type, /SETS/SET_NODE_IDPOOL, IMPORT); 
    //SET_BOX card
    if(setBox_flag == 1)
    {
        COMMENT("$    BOXID   TOFFSET");
        CARD("%10d%10d", BOXID, LSD_TOFFSET);
    }

    //Additional Card 3
    if(DOF == -9 || DOF == -10 || DOF == -11 || DOF == 9 || DOF == 10 || DOF == 11 || LSD_VAD == 4)
    {
        COMMENT("$  OFFSET1   OFFSET2       MRB     NODE1     NODE2");
        CARD("%10lg%10lg%10d%10d%10d",  BPM_OFFSET1, BPM_OFFSET2, LSD_MRB, LSD_NODE1, LSD_NODE2);
    }
}

FORMAT(Keyword971_R7.1)
{
    ASSIGN(IOFLAG, 1, IMPORT);
    ASSIGN(IOFLAG, 0, EXPORT);

    if(IOFLAG == 0)
    {
        ASSIGN(KEYWORD_STR, *BOUNDARY_PRESCRIBED_MOTION_SET, EXPORT);

        if(setBox_flag == 1)
        {
            ASSIGN(dummy_keyword, _COMBINE(dummy_keyword, "_BOX"), EXPORT);
        }

        if(LSD_TitleOpt == 1)
        {
            ASSIGN(dummy_keyword, _COMBINE(dummy_keyword, "_ID"), EXPORT);
        }

        ASSIGN(KEYWORD_STR,       _COMBINE(KEYWORD_STR, dummy_keyword), EXPORT);
        CARD("%-s", KEYWORD_STR);
    }
    else
    {
        HEADER("*BOUNDARY_PRESCRIBED_MOTION_SET%s", _opt);

        ASSIGN(setBox_flag,   _FIND(_opt, "_BOX"), IMPORT);
        ASSIGN(LSD_TitleOpt,  _FIND(_opt, "_ID"), IMPORT);  // LSD_TitleOpt seems to be readonly!!!
    }

    if(IOFLAG == 0 && LSD_TitleOpt == 1)
    {
        COMMENT("$       IDHEADING                                                               ");
        CARD("%10d%-70s", _ID_, TITLE);
    }

    if (IOFLAG == 1)
    {
        CARD_PREREAD("%50s%10d", _BLANK_, LSD_VID1);

        if (LSD_VID1 == NONE)
        {
            ASSIGN(VectOption, 0, IMPORT);
        }
        else
        {
            ASSIGN(VectOption, 1, IMPORT);
        }
    }

    //Card 1
    if(VectOption == 1)
    {
        COMMENT("$   typeID       DOF       VAD      LCID        SF       VID     DEATH     BIRTH");
        CARD("%10d%10d%10d%10d%10lg%10d%10lg%10lg",  entityid, DOF, LSD_VAD, curveid, SFACT, LSD_VID1, LSD_TDEATH, LSD_BIRTH);
    }
    else
    {
        COMMENT("$   typeID       DOF       VAD      LCID        SF               DEATH     BIRTH");
        CARD("%10d%10d%10d%10d%10lg%10s%10lg%10lg",  entityid, DOF, LSD_VAD, curveid, SFACT, _BLANK_, LSD_TDEATH, LSD_BIRTH);
    }
    ASSIGN(entityid_type, /SETS/SET_NODE_IDPOOL, IMPORT); 
    //SET_BOX card
    if(setBox_flag == 1)
    {
        COMMENT("$    BOXID   TOFFSET    LCBCHK");
        CARD("%10d%10d%10d", BOXID, LSD_TOFFSET, LSD_LCBCHK);
    }

    //Additional Card 3
    if(DOF == -9 || DOF == -10 || DOF == -11 || DOF == 9 || DOF == 10 || DOF == 11 || LSD_VAD == 4)
    {
        COMMENT("$  OFFSET1   OFFSET2       MRB     NODE1     NODE2");
        CARD("%10lg%10lg%10d%10d%10d",  BPM_OFFSET1, BPM_OFFSET2, LSD_MRB, LSD_NODE1, LSD_NODE2);
    }
}