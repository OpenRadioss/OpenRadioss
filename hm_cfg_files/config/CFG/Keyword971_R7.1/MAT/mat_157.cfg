//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 157
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    LSDYNA_A1                               = VALUE(FLOAT,  "Components of vector a");
    LSDYNA_A2                               = VALUE(FLOAT,  "Components of vector a");
    LSDYNA_A3                               = VALUE(FLOAT,  "Components of vector a");
    LSDYNA_BETA                             = VALUE(FLOAT,  "Material angle in degrees");
    LSDYNA_D1                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D2                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D3                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_V1                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V2                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V3                               = VALUE(FLOAT,  "Components of vector v");
    LSD_C11                                 = VALUE(FLOAT,  "i, j term in the 6 * 6 anisotropic constitutive matrix");
    LSD_C12                                 = VALUE(FLOAT,  "i, j term in the 6 * 6 anisotropic constitutive matrix");
    LSD_C13                                 = VALUE(FLOAT,  "i, j term in the 6 * 6 anisotropic constitutive matrix");
    LSD_C14                                 = VALUE(FLOAT,  "i, j term in the 6 * 6 anisotropic constitutive matrix");
    LSD_C15                                 = VALUE(FLOAT,  "i, j term in the 6 * 6 anisotropic constitutive matrix");
    LSD_C16                                 = VALUE(FLOAT,  "i, j term in the 6 * 6 anisotropic constitutive matrix");
    LSD_C22                                 = VALUE(FLOAT,  "i, j term in the 6 * 6 anisotropic constitutive matrix");
    LSD_C23                                 = VALUE(FLOAT,  "i, j term in the 6 * 6 anisotropic constitutive matrix");
    LSD_C24                                 = VALUE(FLOAT,  "i, j term in the 6 * 6 anisotropic constitutive matrix");
    LSD_C25                                 = VALUE(FLOAT,  "i, j term in the 6 * 6 anisotropic constitutive matrix");
    LSD_C26                                 = VALUE(FLOAT,  "i, j term in the 6 * 6 anisotropic constitutive matrix");
    LSD_C33                                 = VALUE(FLOAT,  "i, j term in the 6 * 6 anisotropic constitutive matrix");
    LSD_C34                                 = VALUE(FLOAT,  "i, j term in the 6 * 6 anisotropic constitutive matrix");
    LSD_C35                                 = VALUE(FLOAT,  "i, j term in the 6 * 6 anisotropic constitutive matrix");
    LSD_C36                                 = VALUE(FLOAT,  "i, j term in the 6 * 6 anisotropic constitutive matrix");
    LSD_C44                                 = VALUE(FLOAT,  "i, j term in the 6 * 6 anisotropic constitutive matrix");
    LSD_C45                                 = VALUE(FLOAT,  "i, j term in the 6 * 6 anisotropic constitutive matrix");
    LSD_C46                                 = VALUE(FLOAT,  "i, j term in the 6 * 6 anisotropic constitutive matrix");
    LSD_C55                                 = VALUE(FLOAT,  "i, j term in the 6 * 6 anisotropic constitutive matrix");
    LSD_C56                                 = VALUE(FLOAT,  "i, j term in the 6 * 6 anisotropic constitutive matrix");
    LSD_C66                                 = VALUE(FLOAT,  "i, j term in the 6 * 6 anisotropic constitutive matrix");
    LSD_LCID                                = VALUE(FUNCT,  "effective stress versus effective plastic strain");
    LSD_MAT103_CR1                          = VALUE(FLOAT,  "Isotropic hardening parameter");
    LSD_MAT103_CR2                          = VALUE(FLOAT,  "Isotropic hardening parameter");
    LSD_MAT103_QR1                          = VALUE(FLOAT,  "Isotropic hardening parameter");
    LSD_MAT103_QR2                          = VALUE(FLOAT,  "Isotropic hardening parameter");
    LSD_MAT103_SIGY                         = VALUE(FLOAT,  "Initial yield stress");
    LSD_MAT_R00                             = VALUE(FLOAT,  "R00 for shell");
    LSD_MAT_R45                             = VALUE(FLOAT,  "R45 for shell");
    LSD_MAT_R90                             = VALUE(FLOAT,  "R90 for shell");
    LSD_MAT_S11                             = VALUE(FLOAT,  "Yield stress in local-x direction");
    LSD_MAT_S12                             = VALUE(FLOAT,  "Yield stress in local-xy direction");
    LSD_MAT_S22                             = VALUE(FLOAT,  "Yield stress in local-y direction");
    LSD_MAT_S33                             = VALUE(FLOAT,  "Yield stress in local-z direction");
    MATL251_VP                              = VALUE(FLOAT,  "Formulation for rate effects");
    LSD_NODE1                               = VALUE(NODE,  "Node");
    LSD_NODE3                               = VALUE(NODE,  "Node1");
    LSD_NODE4                               = VALUE(NODE,  "Node2");
    LSD_NODE5                               = VALUE(NODE,  "Node1");
    LSD_NODE6                               = VALUE(NODE,  "Node2");
    LSD_NODE7                               = VALUE(NODE,  "Node1");
    LSD_NODE8                               = VALUE(NODE,  "Node2");
    LSD_SYSTEM                              = VALUE(SYSTEM,  "AOPT");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    axisOptFlag                             = VALUE(INT,  "Material axes option");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    LOC_AOPT                                = VALUE(FLOAT, "Flag for material properties initialization");
    IO_FLAG                                 = VALUE(INT, "io flag");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    LSDYNA_A1                               = 139;
    LSDYNA_A2                               = 140;
    LSDYNA_A3                               = 141;
    LSDYNA_BETA                             = 148;
    LSDYNA_D1                               = 145;
    LSDYNA_D2                               = 146;
    LSDYNA_D3                               = 147;
    LSDYNA_V1                               = 142;
    LSDYNA_V2                               = 143;
    LSDYNA_V3                               = 144;
    LSD_C11                                 = 1204;
    LSD_C12                                 = 1205;
    LSD_C13                                 = 1207;
    LSD_C14                                 = 1210;
    LSD_C15                                 = 1214;
    LSD_C16                                 = 1219;
    LSD_C22                                 = 1206;
    LSD_C23                                 = 1208;
    LSD_C24                                 = 1211;
    LSD_C25                                 = 1215;
    LSD_C26                                 = 1220;
    LSD_C33                                 = 1209;
    LSD_C34                                 = 1212;
    LSD_C35                                 = 1216;
    LSD_C36                                 = 1221;
    LSD_C44                                 = 1213;
    LSD_C45                                 = 1217;
    LSD_C46                                 = 1222;
    LSD_C55                                 = 1218;
    LSD_C56                                 = 1223;
    LSD_C66                                 = 1224;
    LSD_LCID                                = 45;
    LSD_MAT103_CR1                          = 2655;
    LSD_MAT103_CR2                          = 2657;
    LSD_MAT103_QR1                          = 2654;
    LSD_MAT103_QR2                          = 2656;
    LSD_MAT103_SIGY                         = 2651;
    LSD_MAT_R00                             = 4932;
    LSD_MAT_R45                             = 4933;
    LSD_MAT_R90                             = 4934;
    LSD_MAT_S11                             = 4957;
    LSD_MAT_S12                             = 4960;
    LSD_MAT_S22                             = 4958;
    LSD_MAT_S33                             = 4959;
    MATL251_VP                              = 7875;
    LSD_NODE1                               = 86;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_NODE7                               = 5080;
    LSD_NODE8                               = 5081;
    LSD_SYSTEM                              = 184;
    LSD_TitleOpt                            = 90;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    axisOptFlag                             = 4946;
    AOPT_SKEW_FLAG                          = -1;
    LOC_AOPT                                = -1;
    IO_FLAG                                 = -1;
    //empty_string                       = -1;
}

DRAWABLES(COMMON) {
public:
      MASS_DENSITY=SCALAR(Rho);
//      YOUNG_MODULUS=SCALAR(E);
      POISSON_RATIO=SCALAR(LSD_MAT103_SIGY);
 //public:
      //SOUND_SPEED is speed for ISDO = 0 and 1
      //SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
      //SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 //private:
      //G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
      //C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 //public:
      //SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_ANISOTROPIC_ELASTIC_PLASTIC");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                        {DIMENSION="density";}
 optional:
     SCALAR(LSD_MAT103_SIGY)            {DIMENSION="pressure";}
     DATA(LSD_LCID);
     SCALAR(LSD_MAT103_QR1)             {DIMENSION="pressure";}
     SCALAR(LSD_MAT103_CR1)             {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT103_QR2)             {DIMENSION="pressure";}
     SCALAR(LSD_MAT103_CR2)             {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_C11)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_C12)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_C13)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_C14)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_C15)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_C16)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_C22)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_C23)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_C24)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_C25)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_C26)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_C33)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_C34)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_C35)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_C36)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_C44)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_C45)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_C46)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_C55)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_C56)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_C66)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_R00)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_R45)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_R90)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_S11)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_S22)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_S33)                {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_S12)                {DIMENSION="DIMENSIONLESS";}
     RADIO(axisOptFlag)
     {
        ADD(1, "0: Locally orthotropic: axis given by nodes 1,2 and 4");
        ADD(2, "2: Globally orthotropic: axis given by vectors");
        ADD(3, "3: Locally orthotropic: axis given by rotating the material axes by an angle BETA");
        ADD(4, "By System");
     }
     if(axisOptFlag == 4)
     {
        DATA(LSD_SYSTEM);
     }
     RADIO(MATL251_VP)
     {
        ADD(0.0, "scale yield stress");
        ADD(1.0, "viscoplastic formulation");
     }
     if(axisOptFlag == 2)
     {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],FALSE);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],FALSE);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],FALSE);
        DATA(LSD_NODE7);                
        DATA(LSD_NODE8);                
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],FALSE);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],FALSE);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],FALSE);
     }
     if(axisOptFlag == 3)
     {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],FALSE);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],FALSE);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],FALSE);
     }     
     if(axisOptFlag == 3 && axisOptFlag == 1)
     {
        SCALAR(LSDYNA_BETA)             {DIMENSION="a";}
     }     
/*
      graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/BEAM,/COMPONENT/SPRING,/COMPONENT/TRUSS,/COMPONENT/RIVET,/COMPONENT/SHELL,/COMPONENT/PENTA6,/COMPONENT/SHEL16);
      ADD(COMPONENT,"Parts");
    }
*/
}

// File format
FORMAT(Keyword971) 
{
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    if(LSD_NODE7 != NONE && LSD_NODE8 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    //
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    //
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,4.0,EXPORT);
    }
    //
    COMMENT("$      MID       RHO      SIGY      LCSS       QR1       CR1       QR2       CR2");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSD_MAT103_SIGY,LSD_LCID,LSD_MAT103_QR1,LSD_MAT103_CR1,LSD_MAT103_QR2,LSD_MAT103_CR2);
    //
    COMMENT("$      C11       C12       C13       C14       C15       C16       C22       C23");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_C11,LSD_C12,LSD_C13,LSD_C14,LSD_C15,LSD_C16,LSD_C22,LSD_C23);
    //
    COMMENT("$      C24       C25       C26       C33       C34       C35       C36       C44");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_C24,LSD_C25,LSD_C26,LSD_C33,LSD_C34,LSD_C35,LSD_C36,LSD_C44);
    //
    COMMENT("$      C45       C46       C55       C56       C66       R00       R45       R90");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_C45,LSD_C46,LSD_C55,LSD_C56,LSD_C66,LSD_MAT_R00,LSD_MAT_R45,LSD_MAT_R90);
    //
    COMMENT("$      S11       S22       S33       S12      AOPT");
    if(IO_FLAG == 2)
    {
        if(axisOptFlag != 4)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg",LSD_MAT_S11,LSD_MAT_S22,LSD_MAT_S33,LSD_MAT_S12,LOC_AOPT);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10lg%10d",LSD_MAT_S11,LSD_MAT_S22,LSD_MAT_S33,LSD_MAT_S12,LSD_SYSTEM);
        }
    }
    CARD_PREREAD("%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    if(IO_FLAG == 1)
    {
        
        if(axisOptFlag >= 1 && axisOptFlag < 4)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg",LSD_MAT_S11,LSD_MAT_S22,LSD_MAT_S33,LSD_MAT_S12,LOC_AOPT);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10lg%10d",LSD_MAT_S11,LSD_MAT_S22,LSD_MAT_S33,LSD_MAT_S12,LSD_SYSTEM);
            ASSIGN(axisOptFlag, 4, IMPORT);
        }
    }
    //
    COMMENT("$       XP        YP        ZP        A1        A2        A3");
    if(axisOptFlag == 2)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
    }
    else
    {
        BLANK;
    }
    //
    COMMENT("$       V1        V2        V3        D1        D2        D3      BETA");
    if(axisOptFlag == 3)
    {
        CARD("%10lg%10lg%10lg%10s%10s%10s%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,LSDYNA_BETA);
    }
    else if(axisOptFlag == 2)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
    }
    else if(axisOptFlag == 1)
    {
        CARD("%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSDYNA_BETA);
    }
    else
    {
        BLANK;
    }
}

FORMAT(Keyword971_R7.1) 
{
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    if(LSD_NODE7 != NONE && LSD_NODE8 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    //
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    //
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,4.0,EXPORT);
    }
    //
    COMMENT("$      MID       RHO      SIGY      LCSS       QR1       CR1       QR2       CR2");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSD_MAT103_SIGY,LSD_LCID,LSD_MAT103_QR1,LSD_MAT103_CR1,LSD_MAT103_QR2,LSD_MAT103_CR2);
    //
    COMMENT("$      C11       C12       C13       C14       C15       C16       C22       C23");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_C11,LSD_C12,LSD_C13,LSD_C14,LSD_C15,LSD_C16,LSD_C22,LSD_C23);
    //
    COMMENT("$      C24       C25       C26       C33       C34       C35       C36       C44");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_C24,LSD_C25,LSD_C26,LSD_C33,LSD_C34,LSD_C35,LSD_C36,LSD_C44);
    //
    COMMENT("$      C45       C46       C55       C56       C66       R00       R45       R90");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_C45,LSD_C46,LSD_C55,LSD_C56,LSD_C66,LSD_MAT_R00,LSD_MAT_R45,LSD_MAT_R90);
    //
    COMMENT("$      S11       S22       S33       S12      AOPT        VP");
    if(IO_FLAG == 2)
    {
        if(axisOptFlag != 4)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_S11,LSD_MAT_S22,LSD_MAT_S33,LSD_MAT_S12,LOC_AOPT,MATL251_VP);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10lg%10d%10lg",LSD_MAT_S11,LSD_MAT_S22,LSD_MAT_S33,LSD_MAT_S12,LSD_SYSTEM,MATL251_VP);
        }
    }
    CARD_PREREAD("%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    if(IO_FLAG == 1)
    {
        
        if(axisOptFlag >= 1 && axisOptFlag < 4)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_S11,LSD_MAT_S22,LSD_MAT_S33,LSD_MAT_S12,LOC_AOPT,MATL251_VP);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10lg%10d%10lg",LSD_MAT_S11,LSD_MAT_S22,LSD_MAT_S33,LSD_MAT_S12,LSD_SYSTEM,MATL251_VP);
            ASSIGN(axisOptFlag, 4, IMPORT);
        }
    }
    //
    COMMENT("$       XP        YP        ZP        A1        A2        A3");
    if(axisOptFlag == 2)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3);
    }
    else
    {
        BLANK;
    }
    //
    COMMENT("$       V1        V2        V3        D1        D2        D3      BETA");
    if(axisOptFlag == 3)
    {
        CARD("%10lg%10lg%10lg%10s%10s%10s%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,LSDYNA_BETA);
    }
    else if(axisOptFlag == 2)
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
    }
    else if(axisOptFlag == 1)
    {
        CARD("%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSDYNA_BETA);
    }
    else
    {
        BLANK;
    }
}
