//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 224
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    E                                       = VALUE(FLOAT,  "Youngs modulus");
    E_AsFunctOfTemp                         = VALUE(FUNCT,  "temp. dependent Youngs modulus");
    LSD_MAT_BETA                            = VALUE(FLOAT,  "Amount of plastic work converted into heat");
    LSD_TempDependBeta                      = VALUE(INT,  "flag for TempDependBETA");
    BETA_AsFunctOfTemp                      = VALUE(FUNCT,  "Temp. dependent BETA");
    LSD_MAT_CP                              = VALUE(FLOAT,  "Specific heat");
    LSD_MAT_LCF                             = VALUE(FUNCT,  "plastic failure strain vs triaxiality");
    LSD_MAT_LCG                             = VALUE(FUNCT,  "plastic failure strain vs plastic strain rate");
    LSD_MAT_LCH                             = VALUE(FUNCT,  "plastic failure strain vs temperature");
    LSD_MAT_LCI                             = VALUE(FUNCT,  "plastic failure strain vs element size");
    LSD_MAT_LCK1                            = VALUE(FUNCT,  "effective stress vs effective plastic strain");
    LSD_MAT_LCKT                            = VALUE(FUNCT,  "effective stress vs effective plastic strain");
    LSD_MAT_TR                              = VALUE(FLOAT,  "Room temperature");
    LSD_TempDependYoungsMod                 = VALUE(INT,  "TempDependYoungsModulus");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    MATL123_NUMINT                          = VALUE(FLOAT,  "Number of integration points which must fail");
    MATL224_FAILOPT                         = VALUE(FLOAT,  "Flag for additional failure criterion");
    MATL224_NCYFAIL                         = VALUE(FLOAT,  "Time steps for additional failure criterion");
    MATL224_NUMAV                           = VALUE(FLOAT,  "Number of time steps");
    MATL224_OPT_CARD3                       = VALUE(INT,  "OptionalCard3");
    Nu                                      = VALUE(FLOAT,  "Poissons ratio");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    IO_FLAG                                 = VALUE(INT, "io flag");
    _HMCOMMENTSFLAG                         = VALUE(INT, "Write HM Comments");
    TITLE                                   = VALUE(STRING, "Title");
    EncTypeEnumField                        = VALUE(INT,  "Type");
    RegTypeEnumField                        = VALUE(INT,  "Type");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    E                                       = 119;
    E_AsFunctOfTemp                         = 5887;
    LSD_MAT_BETA                            = 306;
    LSD_TempDependBeta                      = 8343;
    BETA_AsFunctOfTemp                      = 8344;
    LSD_MAT_CP                              = 318;
    LSD_MAT_LCF                             = 5882;
    LSD_MAT_LCG                             = 5883;
    LSD_MAT_LCH                             = 5884;
    LSD_MAT_LCI                             = 5885;
    LSD_MAT_LCK1                            = 5880;
    LSD_MAT_LCKT                            = 5881;
    LSD_MAT_TR                              = 316;
    LSD_TempDependYoungsMod                 = 5886;
    LSD_TitleOpt                            = 90;
    MATL123_NUMINT                          = 4254;
    MATL224_FAILOPT                         = 1730;
    MATL224_NCYFAIL                         = 1732;
    MATL224_NUMAV                           = 1731;
    MATL224_OPT_CARD3                       = 1729;
    Nu                                      = 120;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    EncTypeEnumField                        = 5828;
    RegTypeEnumField                        = 5827;
    TITLE                                   = -1;
    IO_FLAG                                 = -1;
}

DEFAULTS(COMMON)
{
    LSD_MAT_BETA    = 1.0;
    MATL123_NUMINT    = 1.0;
}

CHECK(COMMON)
{}

DRAWABLES(COMMON) {
public:
  MASS_DENSITY=SCALAR(Rho);
  YOUNG_MODULUS=SCALAR(E);
  POISSON_RATIO=SCALAR(Nu);
  ROOM_TEMPERATURE=SCALAR(LSD_MAT_TR);
  SPECIFIC_HEAT=SCALAR(LSD_MAT_CP);
  SHEAR_MODULUS=EVAL(YOUNG_MODULUS/(2*(1.+POISSON_RATIO)));
  BULK_MODULUS      = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
 //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
  SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+BULK_MODULUS)/MASS_DENSITY)^0.5);
}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_TABULATED_JOHNSON_COOK");
     RADIO(CommentEnumField)
     {
         ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                                    {DIMENSION="density";}
 optional:
     FLAG(LSD_TempDependYoungsMod);
     if(LSD_TempDependYoungsMod == FALSE)
     {
        SCALAR(E)                                   {DIMENSION="pressure";}
     }
     if(LSD_TempDependYoungsMod == TRUE)
     {
        DATA(E_AsFunctOfTemp);
     }
 optional:
     SCALAR(Nu)                                     {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_CP)                             {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_MAT_TR)                             {DIMENSION="k";}
     FLAG(LSD_TempDependBeta);
     if(LSD_TempDependBeta == FALSE)
     {
     SCALAR(LSD_MAT_BETA)                           {DIMENSION="DIMENSIONLESS";}     }
     else
     {
        DATA(BETA_AsFunctOfTemp);
     }
     SCALAR(MATL123_NUMINT)                         {DIMENSION="DIMENSIONLESS";}
     DATA(LSD_MAT_LCK1);
     DATA(LSD_MAT_LCKT);
     DATA(LSD_MAT_LCF);
     DATA(LSD_MAT_LCG);
     DATA(LSD_MAT_LCH);
     DATA(LSD_MAT_LCI);
     FLAG(MATL224_OPT_CARD3);
     if(MATL224_OPT_CARD3 == TRUE)
     {
         RADIO(MATL224_FAILOPT)
         {
            ADD(0.0,"0.0: Off");
            ADD(1.0,"1.0: On");
         }
         SCALAR(MATL224_NUMAV)                      {DIMENSION="DIMENSIONLESS";}
         SCALAR(MATL224_NCYFAIL)                    {DIMENSION="DIMENSIONLESS";}
     }
/*
   graphical SUPPORT("Part(s) to which material is applied") {
      OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/TETRA10,/COMPONENT/TSHELL,/COMPONENT/LINEAR_3D,/COMPONENT/SHELL,/COMPONENT/SPHCEL);
      ADD(COMPONENT,"Parts");
   }
*/
}

// File format
FORMAT(Keyword971) 
{
    //
    COMMENT("$      MID       RHO         E        PR        CP        TR      BETA    NUMINT");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,SCALAR_OR_FUNCTION(LSD_TempDependYoungsMod,E,E_AsFunctOfTemp),Nu,LSD_MAT_CP,LSD_MAT_TR,SCALAR_OR_FUNCTION(LSD_TempDependBeta,LSD_MAT_BETA,BETA_AsFunctOfTemp),MATL123_NUMINT);
    //
    COMMENT("$     LCK1      LCKT       LCF       LCG       LCH       LCI");
    CARD("%10d%10d%10d%10d%10d%10d",LSD_MAT_LCK1,LSD_MAT_LCKT,LSD_MAT_LCF,LSD_MAT_LCG,LSD_MAT_LCH,LSD_MAT_LCI);
    //
}
FORMAT(Keyword971_R7.1) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    //
    COMMENT("$      MID       RHO         E        PR        CP        TR      BETA    NUMINT");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,SCALAR_OR_FUNCTION(LSD_TempDependYoungsMod,E,E_AsFunctOfTemp),Nu,LSD_MAT_CP,LSD_MAT_TR,SCALAR_OR_FUNCTION(LSD_TempDependBeta,LSD_MAT_BETA,BETA_AsFunctOfTemp),MATL123_NUMINT);
    //
    COMMENT("$     LCK1      LCKT       LCF       LCG       LCH       LCI");
    CARD("%10d%10d%10d%10d%10d%10d",LSD_MAT_LCK1,LSD_MAT_LCKT,LSD_MAT_LCF,LSD_MAT_LCG,LSD_MAT_LCH,LSD_MAT_LCI);
    //
    if(MATL224_OPT_CARD3 == TRUE && IO_FLAG == 2)
    {
        COMMENT("$  FAILOPT     NUMAV   NCYFAIL");
    }
    FREE_CARD(MATL224_OPT_CARD3,"%10lg%10lg%10lg",MATL224_FAILOPT,MATL224_NUMAV,MATL224_NCYFAIL);
}
