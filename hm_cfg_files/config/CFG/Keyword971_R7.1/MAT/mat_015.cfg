//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 015
// 


ATTRIBUTES(COMMON) 
{
    // Initial and reference densities
    KEYWORD_STR                     = VALUE(STRING, "Solver Keyword");
    LSD_TitleOpt                    = VALUE(INT, "Title");
    CommentEnumField                = VALUE(INT, "User Comments");
    Num_Comments                    = SIZE("No. of comment lines");
    Comments                        = ARRAY[Num_Comments](STRING, "Entity Comments");
    Rho                             = VALUE(FLOAT, "Rho");  
    MATL98_option                   = VALUE(INT, "STOCHASTIC");
    E                               = VALUE(FLOAT, "E");
    Nu                              = VALUE(FLOAT, "Nu");
    G                               = VALUE(FLOAT, "G");
    LSD_MAT_DTF                     = VALUE(FLOAT, "DTF");
    LSD_VP15                        = VALUE(FLOAT, "VP");
    LSD_RATEOP                      = VALUE(FLOAT, "RATEOP");
    LSD_MAT_A                       = VALUE(FLOAT, "A");
    LSD_MAT_B                       = VALUE(FLOAT, "B");
    LSD_MAT_N                       = VALUE(FLOAT, "N");
    LSD_MAT_C                       = VALUE(FLOAT, "C");
    LSD_MAT_M                       = VALUE(FLOAT, "M");
    LSD_MAT_TM                      = VALUE(FLOAT, "TM");
    LSD_MAT_TR                      = VALUE(FLOAT, "TR");
    LSD_MAT_EPSO                    = VALUE(FLOAT, "EPSO");
    LSD_MAT_CP                      = VALUE(FLOAT, "CP");
    LSD_MAT_PC                      = VALUE(FLOAT, "PC");
    LSD_MAT_SPALL                   = VALUE(FLOAT, "SPALL");
    LSD_MAT_IT                      = VALUE(FLOAT, "IT");
    LSD_MAT_D1                      = VALUE(FLOAT, "D1");
    LSD_MAT_D2                      = VALUE(FLOAT, "D2");
    LSD_MAT_D3                      = VALUE(FLOAT, "D3");
    LSD_MAT_D4                      = VALUE(FLOAT, "D4");
    LSD_MAT_D5                      = VALUE(FLOAT, "D5");
    LSD_C2P                         = VALUE(FLOAT, "C2/P");
    MAT15_EFMIN                     = VALUE(FLOAT, "EFMIN");
    MAT15_EROD                      = VALUE(FLOAT, "EROD");
    MAT15_NUMINT                    = VALUE(FLOAT, "NUMINT");
    IO_FLAG                         = VALUE(INT, "IO");
    OPT_TYPE_STR                    = VALUE(STRING, "OPT");
    HAS_TITLE                       = VALUE(STRING, "Has title option");
    TITLE                           = VALUE(STRING, "Title");  
    _HAS_HEADER                     = VALUE(BOOL,"Has Header Card");
    //empty_string               = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    IO_FLAG                       = -1;
    OPT_TYPE_STR                  = -1;
    TITLE                         = -1;
    HAS_TITLE                     = -1;
    _HAS_HEADER                   = -1;
    KEYWORD_STR                   = 9000;
    CommentEnumField              = 3220;
    Num_Comments                  = 3101;
    LSD_TitleOpt                  = 90;
    Comments                      = 3100;
    Rho                           = 118;
    MATL98_option                 = 1905;
    E                             = 119;
    Nu                            = 120;
    G                             = 121;
    LSD_MAT_DTF                   = 309;
    LSD_VP15                      = 2855;
    LSD_RATEOP                    = 1075;
    LSD_MAT_A                     = 310;
    LSD_MAT_B                     = 311;
    LSD_MAT_N                     = 312;
    LSD_MAT_C                     = 313;
    LSD_MAT_M                     = 314;
    LSD_MAT_TM                    = 315;
    LSD_MAT_TR                    = 316;
    LSD_MAT_EPSO                  = 317;
    LSD_MAT_CP                    = 318;
    LSD_MAT_PC                    = 282;
    LSD_MAT_SPALL                 = 319;
    LSD_MAT_IT                    = 328;
    LSD_MAT_D1                    = 320;
    LSD_MAT_D2                    = 321;
    LSD_MAT_D3                    = 322;
    LSD_MAT_D4                    = 323;
    LSD_MAT_D5                    = 324;
    LSD_C2P                       = 1076;
    MAT15_EROD                    = 1492; 
    MAT15_NUMINT                  = 1493;
    MAT15_EFMIN                   = 1494;
    //empty_string             = -1;
}

DEFAULTS(COMMON)
{
    MAT15_EFMIN                 = 1e-006;
    _HAS_HEADER                 = TRUE;
}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY=SCALAR(Rho);
    SHEAR_MODULUS=SCALAR(G);
    YOUNG_MODULUS=SCALAR(E);
    POISSON_RATIO=SCALAR(Nu);
    MINIMUM_TIME_STEP=SCALAR(LSD_MAT_DTF);
    FORMULATION=SCALAR(LSD_VP15);
    A=SCALAR(LSD_MAT_A);
    B=SCALAR(LSD_MAT_B);
    N=SCALAR(LSD_MAT_N);
    C=SCALAR(LSD_MAT_C);
    M=SCALAR(LSD_MAT_M);
    MELT_TEMPERATURE=SCALAR(LSD_MAT_TM);
    ROOM_TEMPERATURE=SCALAR(LSD_MAT_TR);
    STRAIN_RATE_NORMALIZATION_FACTOR=SCALAR(LSD_MAT_EPSO);
    SPECIFIC_HEAT=SCALAR(LSD_MAT_CP);
    PRESSURE_CUTOFF=SCALAR(LSD_MAT_PC);
    SPALL_TYPE=SCALAR(LSD_MAT_SPALL);
    ITERATION_OPTION=SCALAR(LSD_MAT_IT);
    //SOUND_SPEED is speed for ISDO = 0 and 1
    SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
    SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
    BULK_MODULUS      = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
public:
    SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+BULK_MODULUS)/MASS_DENSITY)^0.5);
}

GUI(COMMON) 
{
    ASSIGN(KEYWORD_STR, "*MAT_JOHNSON_COOK");
    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
            SCALAR(Comments);
        }
    }  
    FLAG(MATL98_option);
    if(MATL98_option == 1)
    {
        ASSIGN(KEYWORD_STR, "_STOCHASTIC");
    }   
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    } 
mandatory:
    SCALAR(Rho)         { DIMENSION="density";}
optional:
    SCALAR(G)           {DIMENSION="pressure";}
mandatory:
    SCALAR(E)           {DIMENSION="pressure";}
    SCALAR(Nu)          { DIMENSION="DIMENSIONLESS"; }
optional:
    SCALAR(LSD_MAT_DTF) {DIMENSION="t";}
    RADIO(LSD_VP15)
    {
        ADD(0.0, "0.0: Scale yield stress(default)");
        ADD(1.0, "1.0: Viscoplastic Formulation");
    }
    RADIO(LSD_RATEOP)
    {
        ADD(0.0, "0.0: Log-Linear Johnson-Cook (default)");
        ADD(1.0, "1.0: Log-Quadratic Huh-Kang (2 Parameters)");
        ADD(2.0, "2.0: Exponential Allen-Rule-Jones");
        ADD(3.0, "3.0: Exponential Cowper-Symonds (2 Parameters)");
        ADD(4.0, "4.0: Nonlinear rate coefficient (2 Parameters)");
    }
mandatory:
    SCALAR(LSD_MAT_A)   {DIMENSION="pressure";}
optional:
    SCALAR(LSD_MAT_B)   {DIMENSION="pressure";}
    SCALAR(LSD_MAT_N)   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_C)   {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_M)   {DIMENSION="DIMENSIONLESS";}
mandatory:
    SCALAR(LSD_MAT_TM)  {DIMENSION="k";}
optional:
    SCALAR(LSD_MAT_TR)  {DIMENSION="k";}
    SCALAR(LSD_MAT_EPSO){DIMENSION="strain_rate";}
    SCALAR(LSD_MAT_CP)  {DIMENSION="specificheat";}
    SCALAR(LSD_MAT_PC)  {DIMENSION="pressure";}
    RADIO(LSD_MAT_SPALL)
    {
        ADD(0.0, "0.0: Default");
        ADD(1.0, "1.0: Tensile pressure is limited by PC (p >= PC)");
        ADD(2.0, "2.0: Sigma max >= -PC triggers shell elements deletion and tensile stress in solid reset to 0");
        ADD(3.0, "3.0: p < PC triggers shell element deletion and pressure to be reset to zero in soild elements");
    }
    RADIO(LSD_MAT_IT)
    {
        ADD(0.0, "0.0: No iterations (default)");
        ADD(1.0, "1.0: Accurate iterative solution for plastic strain: Much more expensive than default");
    }
    SCALAR(LSD_MAT_D1)  {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_D2)  {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_D3)  {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_D4)  {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_D5)  {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_C2P)     {DIMENSION="DIMENSIONLESS";}
    SCALAR(MAT15_EROD)  {DIMENSION="DIMENSIONLESS";}
    SCALAR(MAT15_EFMIN) {DIMENSION="DIMENSIONLESS";}
    SCALAR(MAT15_NUMINT){DIMENSION="DIMENSIONLESS";}
    /*
    graphical SUPPORT("Part(s) to which material is applied") {
    OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/SHELL,/COMPONENT/TSHELL,/COMPONENT/PENTA6,/COMPONENT/SPHCEL);
    ADD(COMPONENT,"Parts");
    }
    */
}

// File format
FORMAT(Keyword971) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    if(IO_FLAG == 2 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_JOHNSON_COOK");
    } 
    else if(IO_FLAG == 2 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_JOHNSON_COOK_TITLE");
        CARD("%-80s", TITLE);
    }

    COMMENT("$      MID       RHO         G         E        PR       DTF        VP    RATEOP");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,G,E,Nu,LSD_MAT_DTF,LSD_VP15,LSD_RATEOP);

    COMMENT("$        A         B         N         C         M        TM        TR      EPSO");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_A,LSD_MAT_B,LSD_MAT_N,LSD_MAT_C,LSD_MAT_M,LSD_MAT_TM,LSD_MAT_TR,LSD_MAT_EPSO);

    COMMENT("$       CP        PC     SPALL        IT        D1        D2        D3        D4");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_CP,LSD_MAT_PC,LSD_MAT_SPALL,LSD_MAT_IT,LSD_MAT_D1,LSD_MAT_D2,LSD_MAT_D3,LSD_MAT_D4);

    COMMENT("$       D5      C2/P               EFMIN");
    CARD("%10lg%10lg%10s%10lg",LSD_MAT_D5,LSD_C2P,_BLANK_,MAT15_EFMIN);
}

FORMAT(Keyword971_R6.1) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT); 

    if(IO_FLAG == 2 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_JOHNSON_COOK");
    } 
    else if(IO_FLAG == 2 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_JOHNSON_COOK_TITLE");
        CARD("%-80s", TITLE);
    }


    COMMENT("$      MID       RHO         G         E        PR       DTF        VP    RATEOP");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,G,E,Nu,LSD_MAT_DTF,LSD_VP15,LSD_RATEOP);

    COMMENT("$        A         B         N         C         M        TM        TR      EPSO");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_A,LSD_MAT_B,LSD_MAT_N,LSD_MAT_C,LSD_MAT_M,LSD_MAT_TM,LSD_MAT_TR,LSD_MAT_EPSO);

    COMMENT("$       CP        PC     SPALL        IT        D1        D2        D3        D4");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_CP,LSD_MAT_PC,LSD_MAT_SPALL,LSD_MAT_IT,LSD_MAT_D1,LSD_MAT_D2,LSD_MAT_D3,LSD_MAT_D4);

    COMMENT("$       D5      C2/P      EROD     EFMIN    NUMINT");
    CARD("%10lg%10lg%10lg%10lg%10lg",LSD_MAT_D5,LSD_C2P,MAT15_EROD,MAT15_EFMIN,MAT15_NUMINT);
}

FORMAT(Keyword971_R7.1) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);

    //while reading
    if(IO_FLAG == 1)
    {
        HEADER("*MAT_015_%10s",OPT_TYPE_STR);
    }
    if(IO_FLAG == 1 && OPT_TYPE_STR != "STOCHASTIC")
    {
        HEADER("*MAT_JOHNSON_COOK_%10s%6s",OPT_TYPE_STR, HAS_TITLE);
    }
    if(IO_FLAG == 1 && OPT_TYPE_STR == "STOCHASTIC")
    {
        ASSIGN(MATL98_option, 1);
    }
    else if(IO_FLAG == 1 && OPT_TYPE_STR == "TITLE")
    {
        ASSIGN(LSD_TitleOpt, 1);
    }
    else if(IO_FLAG == 1 && HAS_TITLE == "_TITLE")
    {
        ASSIGN(LSD_TitleOpt, 1);
    }

    //while exporting
    if(IO_FLAG == 2 && MATL98_option == 1 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_JOHNSON_COOK_STOCHASTIC");
    }   
    else if(IO_FLAG == 2 && LSD_TitleOpt == FALSE)
    {
        HEADER("*MAT_JOHNSON_COOK");
    }
    else if(IO_FLAG == 2 && MATL98_option == 1 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_JOHNSON_COOK_STOCHASTIC_TITLE");
        CARD("%-80s", TITLE);
    }   
    else if(IO_FLAG == 2 && LSD_TitleOpt == TRUE)
    {
        HEADER("*MAT_JOHNSON_COOK_TITLE");
        CARD("%-80s", TITLE);
    }

    COMMENT("$      MID       RHO         G         E        PR       DTF        VP    RATEOP");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,G,E,Nu,LSD_MAT_DTF,LSD_VP15,LSD_RATEOP);

    COMMENT("$        A         B         N         C         M        TM        TR      EPSO");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_A,LSD_MAT_B,LSD_MAT_N,LSD_MAT_C,LSD_MAT_M,LSD_MAT_TM,LSD_MAT_TR,LSD_MAT_EPSO);

    COMMENT("$       CP        PC     SPALL        IT        D1        D2        D3        D4");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_MAT_CP,LSD_MAT_PC,LSD_MAT_SPALL,LSD_MAT_IT,LSD_MAT_D1,LSD_MAT_D2,LSD_MAT_D3,LSD_MAT_D4);

    COMMENT("$       D5      C2/P      EROD     EFMIN    NUMINT");
    CARD("%10lg%10lg%10lg%10lg%10lg",LSD_MAT_D5,LSD_C2P,MAT15_EROD,MAT15_EFMIN,MAT15_NUMINT);
}
