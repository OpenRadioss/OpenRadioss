//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 262
//

ATTRIBUTES(COMMON)
{

    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CURVES_GSL                              = VALUE(FUNCT,  "fracture toughness vs element length");
    CURVES_GXC                              = VALUE(FUNCT,  "fracture toughness vs element length");
    CURVES_GXCO                             = VALUE(FUNCT,  "fracture toughness vs element length");
    CURVES_GXT                              = VALUE(FUNCT,  "fracture toughness vs element length");
    CURVES_GXTO                             = VALUE(FUNCT,  "fracture toughness vs element length");
    CURVES_GYC                              = VALUE(FUNCT,  "fracture toughness vs element length");
    CURVES_GYT                              = VALUE(FUNCT,  "fracture toughness vs element length");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    EncTypeEnumField                        = VALUE(INT,  "Type");
    RegTypeEnumField                        = VALUE(INT,  "Type");
    Flag_GSL                                = VALUE(INT,  "Flag_GSL");
    Flag_GXC                                = VALUE(INT,  "Flag_GXC");
    Flag_GXCO                               = VALUE(INT,  "Flag_GXCO");
    Flag_GXT                                = VALUE(INT,  "Flag_GXT");
    Flag_GXTO                               = VALUE(INT,  "Flag_GXTO");
    Flag_GYC                                = VALUE(INT,  "Flag_GYC");
    Flag_GYT                                = VALUE(INT,  "Flag_GYT");
    LSDYNA_A1                               = VALUE(FLOAT,  "Components of vector a");
    LSDYNA_A2                               = VALUE(FLOAT,  "Components of vector a");
    LSDYNA_A3                               = VALUE(FLOAT,  "Components of vector a");
    LSDYNA_D1                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D2                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D3                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_EA                               = VALUE(FLOAT,  "Youngs modulus");
    LSDYNA_EB                               = VALUE(FLOAT,  "Youngs modulus");
    LSDYNA_EC                               = VALUE(FLOAT,  "Youngs modulus");
    LSDYNA_ETAN                             = VALUE(FLOAT,  "Tangent modulus");
    LSDYNA_GAB                              = VALUE(FLOAT,  "shear modulus");
    LSDYNA_GBC                              = VALUE(FLOAT,  "shear modulus");
    LSDYNA_GCA                              = VALUE(FLOAT,  "shear modulus");
    LSDYNA_PRBA                             = VALUE(FLOAT,  "Poissons ratio");
    LSDYNA_PRCA                             = VALUE(FLOAT,  "Poissons ratio");
    LSDYNA_PRCB                             = VALUE(FLOAT,  "Poissons ratio");
    LSDYNA_SIGY                             = VALUE(FLOAT,  "Shear yield stress");
    LSDYNA_V1                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V2                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V3                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_XP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSDYNA_YP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSDYNA_ZP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSD_DAF                                 = VALUE(FLOAT,  "Flag to control failure");
    LSD_DKF                                 = VALUE(FLOAT,  "Flag to control failure");
    LSD_DMF                                 = VALUE(FLOAT,  "Flag to control failure");
    LSD_EFS                                 = VALUE(FLOAT,  "Maximum effective strain");
    LSD_FIO                                 = VALUE(FLOAT,  "Fracture angle");
    LSD_GSL                                 = VALUE(FLOAT,  "Fracture toughness");
    LSD_GXC                                 = VALUE(FLOAT,  "Fracture toughness");
    LSD_GXCO                                = VALUE(FLOAT,  "Fracture toughness");
    LSD_GXT                                 = VALUE(FLOAT,  "Fracture toughness");
    LSD_GXTO                                = VALUE(FLOAT,  "Fracture toughness");
    LSD_GYC                                 = VALUE(FLOAT,  "Fracture toughness");
    LSD_GYT                                 = VALUE(FLOAT,  "Fracture toughness");
    LSD_MANGLE                              = VALUE(FLOAT,  "Material angle");
    LSD_MAT_BETA                            = VALUE(FLOAT,  "Hardening parameter");
    LSD_MAT_XCO                             = VALUE(FLOAT,  "Longitudinal compressive strength");
    LSD_MAT_XT                              = VALUE(FLOAT,  "Longitudinal tensile strength");
    LSD_MAT_XTO                             = VALUE(FLOAT,  "Longitudinal tensile strength");
    LSD_MAT_YC                              = VALUE(FLOAT,  "Transverse compressive strength");
    LSD_MAT_YT                              = VALUE(FLOAT,  "Transverse tensile strength");
    LSD_NODE1                               = VALUE(NODE,  "Node");
    LSD_NODE3                               = VALUE(NODE,  "Node1");
    LSD_NODE4                               = VALUE(NODE,  "Node2");
    LSD_NODE5                               = VALUE(NODE,  "Node1");
    LSD_NODE6                               = VALUE(NODE,  "Node2");
    LSD_NODE7                               = VALUE(NODE,  "Node1");
    LSD_NODE8                               = VALUE(NODE,  "Node2");
    LSD_PFL                                 = VALUE(FLOAT,  "% layers which must fail");
    LSD_PUCK                                = VALUE(FLOAT,  "Flag for evaluation and post-processing");
    LSD_SL                                  = VALUE(FLOAT,  "Shear strength");
    LSD_SOFT                                = VALUE(FLOAT,  "Softening reduction factor");
    LSD_SYSTEM                              = VALUE(SYSTEM,  "AOPT");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    LSD_XC                                  = VALUE(FLOAT,  "Longitudinal compressive strength");
    LSDYNA_DT                               = VALUE(FLOAT,  "Strain rate averaging option");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    axisOptFlag                             = VALUE(INT,  "Anisotropy axis definition");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    IO_FLAG                                 = VALUE(INT, "io flag");
    _HMCOMMENTSFLAG                         = VALUE(INT, "Write HM Comments");
    TITLE                                   = VALUE(STRING, "Title");
    LOC_AOPT                                = VALUE(FLOAT, "");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CURVES_GSL                              = 8066;
    CURVES_GXC                              = 8058;
    CURVES_GXCO                             = 8068;
    CURVES_GXT                              = 8060;
    CURVES_GXTO                             = 8070;
    CURVES_GYC                              = 8062;
    CURVES_GYT                              = 8064;
    CommentEnumField                        = 3220;
    Comments                                = 3100;
    Flag_GSL                                = 8065;
    Flag_GXC                                = 8057;
    Flag_GXCO                               = 8067;
    Flag_GXT                                = 8059;
    Flag_GXTO                               = 8069;
    Flag_GYC                                = 8061;
    Flag_GYT                                = 8063;
    LSDYNA_A1                               = 139;
    LSDYNA_A2                               = 140;
    LSDYNA_A3                               = 141;
    LSDYNA_D1                               = 145;
    LSDYNA_D2                               = 146;
    LSDYNA_D3                               = 147;
    LSDYNA_EA                               = 126;
    LSDYNA_EB                               = 127;
    LSDYNA_EC                               = 128;
    LSDYNA_ETAN                             = 153;
    LSDYNA_GAB                              = 132;
    LSDYNA_GBC                              = 133;
    LSDYNA_GCA                              = 134;
    LSDYNA_PRBA                             = 129;
    LSDYNA_PRCA                             = 130;
    LSDYNA_PRCB                             = 131;
    LSDYNA_SIGY                             = 152;
    LSDYNA_V1                               = 142;
    LSDYNA_V2                               = 143;
    LSDYNA_V3                               = 144;
    LSDYNA_XP                               = 136;
    LSDYNA_YP                               = 137;
    LSDYNA_ZP                               = 138;
    LSD_DAF                                 = 8036;
    LSD_DKF                                 = 8037;
    LSD_DMF                                 = 8038;
    LSD_EFS                                 = 372;
    LSD_FIO                                 = 8053;
    LSD_GSL                                 = 8047;
    LSD_GXC                                 = 8043;
    LSD_GXCO                                = 8048;
    LSD_GXT                                 = 8044;
    LSD_GXTO                                = 8049;
    LSD_GYC                                 = 8045;
    LSD_GYT                                 = 8046;
    LSD_MANGLE                              = 4716;
    LSD_MAT_BETA                            = 306;
    LSD_MAT_XCO                             = 8051;
    LSD_MAT_XT                              = 346;
    LSD_MAT_XTO                             = 8052;
    LSD_MAT_YC                              = 348;
    LSD_MAT_YT                              = 347;
    LSD_NODE1                               = 86;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_NODE7                               = 5080;
    LSD_NODE8                               = 5081;
    LSD_PFL                                 = 8054;
    LSD_PUCK                                = 8055;
    LSD_SL                                  = 8050;
    LSD_SOFT                                = 362;
    LSD_SYSTEM                              = 184;
    LSD_TitleOpt                            = 90;
    LSD_XC                                  = 466;
    Num_Comments                            = 3101;
    Rho                                     = 118;
    axisOptFlag                             = 4946;
    AOPT_SKEW_FLAG                          = -1;
    LSDYNA_DT                               = 12;
    EncTypeEnumField                        = 5828;
    Num_Comments                            = 3101;
    RegTypeEnumField                        = 5827;
    LOC_AOPT                                = -1;
    IO_FLAG                                 = -1;
    //empty_string                       = -1;
}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY=SCALAR(Rho);
    EA = SCALAR(LSDYNA_EA);
    EB = SCALAR(LSDYNA_EB);
    EC = SCALAR(LSDYNA_EC);
    PRBA = SCALAR(LSDYNA_PRBA);
    PRCA = SCALAR(LSDYNA_PRCA);
    PRCB = SCALAR(LSDYNA_PRCB);
    GAB = SCALAR(LSDYNA_GAB);
    GBC = SCALAR(LSDYNA_GBC);
    GCA = SCALAR(LSDYNA_GCA);
    SHEAR_MODULUS = MAX(GAB,GBC,GCA);
    YOUNG_MODULUS = MAX(EA,EB,EC);
    POISSON_RATIO = MAX(PRBA,PRCA,PRCB);
         //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
   C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*SHEAR_MODULUS/3+C1)/MASS_DENSITY)^0.5);
}

CHECK(COMMON)
{

    LSD_MAT_BETA                              >=0.0;
    LSD_MAT_BETA                              <=1.0;
    LSD_MAT_XCO                               >0.0;
    LSD_MAT_YC                                >0.0;
    LSD_XC                                    >0.0;
}

DEFAULTS(COMMON)
{

    LSD_FIO    = 53.0;
    LSD_SOFT    = 1.0;

}

GUI(COMMON)
{

     ASSIGN(KEYWORD_STR, "*MAT_LAMINATED_FRACTURE_DAIMLER_CAMANHO");
     RADIO(CommentEnumField)
     {
         //ENUM_VALUE_FLAG=TRUE;
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
     }
     if(CommentEnumField == 2)
     {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
     }     
     FLAG(LSD_TitleOpt);
     if(LSD_TitleOpt == TRUE)
     {
             ASSIGN(KEYWORD_STR, "_TITLE");
     } 
 mandatory:
     SCALAR(Rho)                            {DIMENSION="density";}
     SCALAR(LSDYNA_EA)                      {DIMENSION="pressure";}
     SCALAR(LSDYNA_EB)                      {DIMENSION="pressure";}
     SCALAR(LSDYNA_EC)                      {DIMENSION="pressure";}
 optional:
     SCALAR(LSDYNA_PRBA)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_PRCA)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_PRCB)                    {DIMENSION="DIMENSIONLESS";}
 mandatory:
     SCALAR(LSDYNA_GAB)                     {DIMENSION="pressure";}
     SCALAR(LSDYNA_GBC)                     {DIMENSION="pressure";}
     SCALAR(LSDYNA_GCA)                     {DIMENSION="pressure";}
 optional:
     RADIO(axisOptFlag)
     {
        ADD(1, "0: Locally orthotropic: axis given by nodes 1,2 and 4");
        ADD(2, "1: Locally orthotropic: a-dir given by a point and global location of element center");
        ADD(3, "2: Globally orthotropic: axis given by vectors");
        ADD(4, "3: Locally orthotropic: axis given by rotating the material axes by an angle BETA");
        ADD(5, "4: Locally orhtotropic: cylindrical coordinate given by vector v and point P");
        ADD(6, "By System");
     }
     if(axisOptFlag == 6)
     {
        DATA(LSD_SYSTEM);
     }

     RADIO(LSD_DAF)
     {
        ADD(0.0, "0.0: IP fails if any damage variable reaches 1.0");
        ADD(1.0, "1.0: No failure of IP due to fiber tensile failure");
     }
     RADIO(LSD_DKF)
     {
        ADD(0.0, "0.0: IP fails if any damage variable reaches 1.0.");
        ADD(1.0, "1.0: No failure of IP due to fiber compressive failure");
     }
     RADIO(LSD_DMF)
     {
        ADD(0.0, "0.0: IP fails if any damage variable reaches 1.0.");
        ADD(1.0, "1.0: No failure of IP due to matrix failure");
     }
     SCALAR(LSD_EFS)                    {DIMENSION="DIMENSIONLESS";}
     if(axisOptFlag == 2 || axisOptFlag == 5)
     {
        DATA(LSD_NODE1);
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],FALSE);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],FALSE);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],FALSE);
     }
     if(axisOptFlag == 3)
     {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],FALSE);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],FALSE);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],FALSE);
        DATA(LSD_NODE7);                
        DATA(LSD_NODE8);                
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],FALSE);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],FALSE);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],FALSE);
     }
     if(axisOptFlag == 4 || axisOptFlag == 5)
     {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],FALSE);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],FALSE);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],FALSE);
     }     
     if(axisOptFlag == 4 || axisOptFlag == 1)
     {
         SCALAR(LSD_MANGLE)             {DIMENSION="a";}
     }
     FLAG(Flag_GXC);
     if(Flag_GXC == FALSE)
     {
        SCALAR(LSD_GXC)                 {DIMENSION="energy";}
     }
     if(Flag_GXC == TRUE)
     {
        DATA(CURVES_GXC);
     }
     FLAG(Flag_GXT);
     if(Flag_GXT == FALSE)
     {
        SCALAR(LSD_GXT)                 {DIMENSION="energy";}
     }
     if(Flag_GXT == TRUE)
     {
        DATA(CURVES_GXT);
     }
     FLAG(Flag_GYC);
     if(Flag_GYC == FALSE)
     {
        SCALAR(LSD_GYC)                 {DIMENSION="energy";}
     }
     if(Flag_GYC == TRUE)
     {
        DATA(CURVES_GYC);
     }
     FLAG(Flag_GYT);
     if(Flag_GYT == FALSE)
     {
        SCALAR(LSD_GYT)                 {DIMENSION="energy";}
     }
     if(Flag_GYT == TRUE)
     {
        DATA(CURVES_GYT);
     }
     FLAG(Flag_GSL);
     if(Flag_GSL == FALSE)
     {
        SCALAR(LSD_GSL)                 {DIMENSION="energy";}
     }
     if(Flag_GSL == TRUE)
     {
        DATA(CURVES_GSL);
     }
     FLAG(Flag_GXCO);
     if(Flag_GXCO == FALSE)
     {
        SCALAR(LSD_GXCO)                 {DIMENSION="energy";}
     }
     if(Flag_GXCO == TRUE)
     {
        DATA(CURVES_GXCO);
     }
     FLAG(Flag_GXTO);
     if(Flag_GXTO == FALSE)
     {
        SCALAR(LSD_GXTO)                 {DIMENSION="energy";}
     }
     if(Flag_GXTO == TRUE)
     {
        DATA(CURVES_GXTO);
     }
     SCALAR(LSD_XC)                     {DIMENSION="pressure";}
     SCALAR(LSD_MAT_XT)                 {DIMENSION="pressure";}
     SCALAR(LSD_MAT_YC)                 {DIMENSION="pressure";}
     SCALAR(LSD_MAT_YT)                 {DIMENSION="pressure";}
     SCALAR(LSD_SL)                     {DIMENSION="pressure";}
     SCALAR(LSD_MAT_XCO)                {DIMENSION="pressure";}
     SCALAR(LSD_MAT_XTO)                {DIMENSION="pressure";}
     SCALAR(LSD_FIO)                    {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_SIGY)                {DIMENSION="pressure";}
     SCALAR(LSDYNA_ETAN)                {DIMENSION="pressure";}
     SCALAR(LSD_MAT_BETA)               {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSD_PFL)                    {DIMENSION="DIMENSIONLESS";}
     RADIO(LSD_PUCK)
     {
        ADD(0.0, "0.0: No evaluation of Puck's IFF-criterion");
        ADD(1.0, "1.0: Puck's IFF-criterion will be evaluated");
     }
     SCALAR(LSD_SOFT)                   {DIMENSION="DIMENSIONLESS";}
     SCALAR(LSDYNA_DT);
}

// File format
FORMAT(Keyword971_R7.1) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    //
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);
    //
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE8 != NONE && LSD_NODE7 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    //
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 5 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,4.0,EXPORT);
    }
    //
    COMMENT("$      MID        RO        EA        EB        EC      PRBA      PRCA      PRCB");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSDYNA_EA,LSDYNA_EB,LSDYNA_EC,LSDYNA_PRBA,LSDYNA_PRCA,LSDYNA_PRCB); 
    //
    COMMENT("$      GAB       GBC       GCA      AOPT       DAF       DKF       DMF       EFS");
    if(IO_FLAG == 2)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 6)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,LOC_AOPT,LSD_DAF,LSD_DKF,LSD_DMF,LSD_EFS);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM),LSD_DAF,LSD_DKF,LSD_DMF,LSD_EFS);
        }
    }
    CARD_PREREAD("%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,4,IMPORT);
    }
    else if(LOC_AOPT == 4.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,5,IMPORT);
    }
    if(IO_FLAG == 1)
    {
        if(axisOptFlag >= 1 && axisOptFlag < 6)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,LOC_AOPT,LSD_DAF,LSD_DKF,LSD_DMF,LSD_EFS);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM),LSD_DAF,LSD_DKF,LSD_DMF,LSD_EFS);
            ASSIGN(axisOptFlag, 6, IMPORT);
        }
    }
    //
    COMMENT("$       XP        YP        ZP        A1        A2        A3");
    if(axisOptFlag == 2 || axisOptFlag == 3 || axisOptFlag == 5)
    {
        if(axisOptFlag == 3)
        {
            CARD("%10s%10s%10s%10lg%10lg%10lg%10s%10s",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3,_BLANK_,_BLANK_);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10s%10s%10s%10s%10s",LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_);
        }
    }
    else
    {
        BLANK;
    }
    //
    COMMENT("$       V1        V2        V3        D1        D2        D3    MANGLE");
    if(axisOptFlag == 1)
    {
        CARD("%10s%10s%10s%10s%10s%10s%10lg%10s",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_MANGLE,_BLANK_);
    }
    else if(axisOptFlag == 2 || axisOptFlag == 6)
    {
        BLANK;
    }
    else if(axisOptFlag >= 3  ||  axisOptFlag <= 5)
    {
        if(axisOptFlag == 3)
        {
            CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
        }
        else if(axisOptFlag == 4)
        {
            CARD("%10lg%10lg%10lg%10s%10s%10s%10lg%10s",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,LSD_MANGLE,_BLANK_);
        }
        else
        {
            CARD("%10lg%10lg%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3);
        }
    }

    //
    COMMENT("$      GXC       GXT       GYC       GYT       GSL      GXCO      GXTO");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg",SCALAR_OR_OBJECT(Flag_GXC,LSD_GXC,CURVES_GXC),SCALAR_OR_OBJECT(Flag_GXT,LSD_GXT,CURVES_GXT),SCALAR_OR_OBJECT(Flag_GYC,LSD_GYC,CURVES_GYC),SCALAR_OR_OBJECT(Flag_GYT,LSD_GYT,CURVES_GYT),SCALAR_OR_OBJECT(Flag_GSL,LSD_GSL,CURVES_GSL),SCALAR_OR_OBJECT(Flag_GXCO,LSD_GXCO,CURVES_GXCO),SCALAR_OR_OBJECT(Flag_GXTO,LSD_GXTO,CURVES_GXTO));   
    //
    COMMENT("$       XC        XT        YC        YT        SL       XCO       XTO");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_XC,LSD_MAT_XT,LSD_MAT_YC,LSD_MAT_YT,LSD_SL,LSD_MAT_XCO,LSD_MAT_XTO);    
    //
    COMMENT("$      FIO      SIGY      ETAN      BETA       PFL      PUCK      SOFT        DT");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_FIO,LSDYNA_SIGY,LSDYNA_ETAN,LSD_MAT_BETA,LSD_PFL,LSD_PUCK,LSD_SOFT,LSDYNA_DT);
    //
}
