//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 002 (ORTHOTROPIC_ELASTIC) Setup File
// 


ATTRIBUTES(COMMON) {

    _HMCOMMENTSFLAG         = VALUE(INT, "Write HM Comments");
    _HWCOLOR                = VALUE(INT, "Entity Color");
    _HAS_HEADER             = VALUE(BOOL,"Has Header Card");
    TITLE                   = VALUE(STRING, "Title");

    CommentEnumField        = VALUE(INT, "User Comments");
    Num_Comments            = SIZE("No. of comment lines");
    Comments                = ARRAY[Num_Comments](STRING, "Entity Comments");
    LSD_TitleOpt            = VALUE(INT, "Title");

    IO_FLAG                 = VALUE(INT, "IO");
    HAS_TITLE               = VALUE(STRING, "Check for Title");
    HAS_MAT_OPTION          = VALUE(STRING, "Check for MAT OPTION");


    // Initial and reference densities
    Rho                     = VALUE(FLOAT,"Initial density");
    LSDYNA_EA               = VALUE(FLOAT, "Young's modulus in a _direction");
    LSDYNA_EB               = VALUE(FLOAT, "Young's modulus in b _direction");
    LSDYNA_EC               = VALUE(FLOAT, "Young's modulus in c _direction");
    LSDYNA_PRBA             = VALUE(FLOAT, "Poisson's ratio ba");
    LSDYNA_PRCA             = VALUE(FLOAT, "Poisson's ratio ca");
    LSDYNA_PRCB             = VALUE(FLOAT, "Poisson's ratio cb");

    //Card2
    LSDYNA_GAB              = VALUE(FLOAT, "Shear modulus ab");
    LSDYNA_GBC              = VALUE(FLOAT, "Shear modulus bc");
    LSDYNA_GCA              = VALUE(FLOAT, "Shear modulus ca");
    AOPT_FLAG               = VALUE(INT, "Axes given by Coordinate System") ;
    axisOptFlag             = VALUE(INT, "Anisotropy axis defination");
    AOPT                    = VALUE(FLOAT, "AOPT");
    LSD_G                   = VALUE(FLOAT, "Shear modulus for frequency independent damping");
    LSDYNA_SIGF             = VALUE(FLOAT, "Limit stress for frequency independent,frictional,damping");
    LSD_IHIS                = VALUE(FLOAT, "Flag for anisotropic stiffness terms initialization");

    //Card3
    LSD_MAT142_MACF         = VALUE(INT,"Material axes changes in brick elements");
    LSDYNA_BETA             = VALUE(FLOAT, "Material angle in degrees");
    LSD_MAT_REF             = VALUE(FLOAT, "Use reference geometry");
    KEYWORD_STR             = VALUE(STRING, "Solver Keyword");
    MAT_OPTION              = VALUE(INT, "Aniso_Option");

    LSD_C11                 = VALUE(FLOAT, "The 1, 1 term in the 6 × 6 anisotropic constitutive matrix");
    LSD_C12                 = VALUE(FLOAT, "The 1, 2 term in the 6 × 6 anisotropic constitutive matrix");
    LSD_C22                 = VALUE(FLOAT, "The 2, 2 term in the 6 × 6 anisotropic constitutive matrix");
    LSD_C13                 = VALUE(FLOAT, "The 1, 3 term in the 6 × 6 anisotropic constitutive matrix");
    LSD_C23                 = VALUE(FLOAT, "The 2, 3 term in the 6 × 6 anisotropic constitutive matrix");
    LSD_C33                 = VALUE(FLOAT, "The 3, 3 term in the 6 × 6 anisotropic constitutive matrix");
    LSD_C14                 = VALUE(FLOAT, "The 1, 4 term in the 6 × 6 anisotropic constitutive matrix");
    LSD_C24                 = VALUE(FLOAT, "The 2, 4 term in the 6 × 6 anisotropic constitutive matrix");
    LSD_C34                 = VALUE(FLOAT, "The 3, 4 term in the 6 × 6 anisotropic constitutive matrix");
    LSD_C44                 = VALUE(FLOAT, "The 4, 4 term in the 6 × 6 anisotropic constitutive matrix");
    LSD_C15                 = VALUE(FLOAT, "The 1, 5 term in the 6 × 6 anisotropic constitutive matrix");
    LSD_C25                 = VALUE(FLOAT, "The 2, 5 term in the 6 × 6 anisotropic constitutive matrix");
    LSD_C35                 = VALUE(FLOAT, "The 3, 5 term in the 6 × 6 anisotropic constitutive matrix");
    LSD_C45                 = VALUE(FLOAT, "The 4, 5 term in the 6 × 6 anisotropic constitutive matrix");
    LSD_C55                 = VALUE(FLOAT, "The 5, 5 term in the 6 × 6 anisotropic constitutive matrix");
    LSD_C16                 = VALUE(FLOAT, "The 1, 6 term in the 6 × 6 anisotropic constitutive matrix");
    LSD_C26                 = VALUE(FLOAT, "The 2, 6 term in the 6 × 6 anisotropic constitutive matrix");
    LSD_C36                 = VALUE(FLOAT, "The 3, 6 term in the 6 × 6 anisotropic constitutive matrix");
    LSD_C46                 = VALUE(FLOAT, "The 4, 6 term in the 6 × 6 anisotropic constitutive matrix");
    LSD_C56                 = VALUE(FLOAT, "The 5, 6 term in the 6 × 6 anisotropic constitutive matrix");
    LSD_C66                 = VALUE(FLOAT, "The 6, 6 term in the 6 × 6 anisotropic constitutive matrix");

    LSD_NODE1               = VALUE(NODE, "Node1");
    LSD_NODE3               = VALUE(NODE, "Node3");
    LSD_NODE4               = VALUE(NODE, "Node4");
    LSD_NODE5               = VALUE(NODE, "Node5");
    LSD_NODE6               = VALUE(NODE, "Node6");
    LSD_NODE7               = VALUE(NODE, "Node7");
    LSD_NODE8               = VALUE(NODE, "Node8");
    LSDYNA_XP               = VALUE(FLOAT, "XP");
    LSDYNA_YP               = VALUE(FLOAT, "YP");
    LSDYNA_ZP               = VALUE(FLOAT, "ZP");
    LSDYNA_A1               = VALUE(FLOAT, "A1");
    LSDYNA_A2               = VALUE(FLOAT, "A2");
    LSDYNA_A3               = VALUE(FLOAT, "A3");
    LSDYNA_D1               = VALUE(FLOAT, "D1");
    LSDYNA_D2               = VALUE(FLOAT, "D2");
    LSDYNA_D3               = VALUE(FLOAT, "D3");
    LSDYNA_V1               = VALUE(FLOAT, "V1");
    LSDYNA_V2               = VALUE(FLOAT, "V2");
    LSDYNA_V3               = VALUE(FLOAT, "V3");
    LSD_SYSTEM              = VALUE(SYSTEM, "AOPT");
    //empty_string       = VALUE(STRING, "Used as a local variable for free format case");
}


SKEYWORDS_IDENTIFIER(COMMON)
{
    LSD_TitleOpt            = 90;
    Rho                     = 118;
    LSDYNA_EA               = 126;
    LSDYNA_EB               = 127;
    LSDYNA_EC               = 128;
    LSDYNA_PRBA             = 129;
    LSDYNA_PRCA             = 130;
    LSDYNA_PRCB             = 131;
    LSDYNA_GAB              = 132;
    LSDYNA_GBC              = 133;
    LSDYNA_GCA              = 134;
    axisOptFlag             = 4946;
    KEYWORD_STR             = 9000;
    LSD_IHIS                = 8035;

    //Aniso_Option
    MAT_OPTION              = 999;
    LSD_C11                 = 1204;
    LSD_C12                 = 1205;
    LSD_C22                 = 1206;
    LSD_C13                 = 1207;
    LSD_C23                 = 1208;
    LSD_C33                 = 1209;
    LSD_C14                 = 1210;
    LSD_C24                 = 1211;
    LSD_C34                 = 1212;
    LSD_C44                 = 1213;
    LSD_C15                 = 1214;
    LSD_C25                 = 1215;
    LSD_C35                 = 1216;
    LSD_C45                 = 1217;
    LSD_C55                 = 1218;
    LSD_C16                 = 1219;
    LSD_C26                 = 1220;
    LSD_C36                 = 1221;
    LSD_C46                 = 1222;
    LSD_C56                 = 1223;
    LSD_C66                 = 1224;

    LSD_G                   = 1560;
    LSDYNA_SIGF             = 248;
    LSD_MAT142_MACF         = 1045;
    LSD_MAT_REF             = 359;

    LSD_NODE1               = 86;
    LSDYNA_XP               = 136;
    LSDYNA_YP               = 137;
    LSDYNA_ZP               = 138;

    LSD_NODE3               = 2802;
    LSD_NODE4               = 2803;
    LSDYNA_A1               = 139;
    LSDYNA_A2               = 140;
    LSDYNA_A3               = 141;

    LSD_NODE7               = 5080;
    LSD_NODE8               = 5081;
    LSDYNA_D1               = 145;
    LSDYNA_D2               = 146;
    LSDYNA_D3               = 147;

    LSD_NODE5               = 5078;
    LSD_NODE6               = 5079;
    LSDYNA_V1               = 142;
    LSDYNA_V2               = 143;
    LSDYNA_V3               = 144;
    LSDYNA_BETA             = 148;
    LSD_SYSTEM              = 184;
    CommentEnumField        = 3220;
    Num_Comments            = 3101;
    Comments                = 3100;
    AOPT_FLAG               = -1;
    //empty_string       = -1;
    _HAS_HEADER             = -1;
    HAS_MAT_OPTION          = -1;
    HAS_TITLE               = -1;
    AOPT                    = -1;
    TITLE                   = -1;
    IO_FLAG                 = -1;
}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY = SCALAR(Rho);
    CONSTITUTIVE_MATRIX11 = SCALAR(LSD_C11);
    CONSTITUTIVE_MATRIX12 = SCALAR(LSD_C12);
    CONSTITUTIVE_MATRIX22 = SCALAR(LSD_C22);
    CONSTITUTIVE_MATRIX13 = SCALAR(LSD_C13);
    CONSTITUTIVE_MATRIX23 = SCALAR(LSD_C23);
    CONSTITUTIVE_MATRIX33 = SCALAR(LSD_C33);
    //
    CONSTITUTIVE_MATRIX14 = SCALAR(LSD_C14);
    CONSTITUTIVE_MATRIX24 = SCALAR(LSD_C24);
    CONSTITUTIVE_MATRIX34 = SCALAR(LSD_C34);
    CONSTITUTIVE_MATRIX44 = SCALAR(LSD_C44);
    CONSTITUTIVE_MATRIX15 = SCALAR(LSD_C15);
    CONSTITUTIVE_MATRIX25 = SCALAR(LSD_C25);
    CONSTITUTIVE_MATRIX35 = SCALAR(LSD_C35);
    CONSTITUTIVE_MATRIX45 = SCALAR(LSD_C45);
    //
    CONSTITUTIVE_MATRIX55 = SCALAR(LSD_C55);
    CONSTITUTIVE_MATRIX16 = SCALAR(LSD_C16);
    CONSTITUTIVE_MATRIX26 = SCALAR(LSD_C26);
    CONSTITUTIVE_MATRIX36 = SCALAR(LSD_C36);
    CONSTITUTIVE_MATRIX46 = SCALAR(LSD_C46);
    CONSTITUTIVE_MATRIX56 = SCALAR(LSD_C56);
    CONSTITUTIVE_MATRIX66 = SCALAR(LSD_C66);
    AXES_OPTION           = SCALAR(axisOptFlag);       //Other than FLOAT it is not allowed 
    //
    MATERIAL_ANGLE       = SCALAR(LSDYNA_BETA);
    REFERENCE_GEOMETRY   = SCALAR(LSD_MAT_REF);
    EA = SCALAR(LSDYNA_EA);
    EB = SCALAR(LSDYNA_EB);
    EC = SCALAR(LSDYNA_EC);
    PRBA = SCALAR(LSDYNA_PRBA);
    PRCA = SCALAR(LSDYNA_PRCA);
    PRCB = SCALAR(LSDYNA_PRCB);
    GAB = SCALAR(LSDYNA_GAB);
    GBC = SCALAR(LSDYNA_GBC);
    GCA = SCALAR(LSDYNA_GCA);
    YOUNG_MODULUS           = MAX(EA,EB,EC);
    POISSON_RATIO           = MAX(PRBA,PRCA,PRCB);
    SHEAR_MODULUS           = MAX(GAB,GBC,GCA);
public:
    //SOUND_SPEED is speed for ISDO = 0 and 1
    SOUND_SPEED             = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
    SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
public:
    C1                      = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
    SOUND_SPEED_SOLID       = EVAL(((4*SHEAR_MODULUS/3+C1)/MASS_DENSITY)^0.5);
}

DEFAULTS(COMMON)
{
    _HAS_HEADER = TRUE;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*MAT");

    RADIO(CommentEnumField)
    {
        ENUM_VALUE_FLAG=TRUE;
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    }

    if(CommentEnumField == 2)
    {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
            SCALAR(Comments);
        }
    }

    FLAG(LSD_TitleOpt);
    FLAG(MAT_OPTION);
    if(MAT_OPTION == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_ANISOTROPIC_ELASTIC");
mandatory:
        SCALAR(Rho)                               { DIMENSION="density";          }
optional:
        SCALAR(LSD_C11)                                 { DIMENSION="pressure";        }
        SCALAR(LSD_C12)                                 { DIMENSION="pressure";        }
        SCALAR(LSD_C22)                                 { DIMENSION="pressure";        }
        SCALAR(LSD_C13)                                 { DIMENSION="pressure";        }
        SCALAR(LSD_C23)                                 { DIMENSION="pressure";        }
        SCALAR(LSD_C33)                                 { DIMENSION="pressure";        }
        SCALAR(LSD_C14)                                 { DIMENSION="pressure";        }
        SCALAR(LSD_C24)                                 { DIMENSION="pressure";        }
        SCALAR(LSD_C34)                                 { DIMENSION="pressure";        }
        SCALAR(LSD_C44)                                 { DIMENSION="pressure";        }
        SCALAR(LSD_C15)                                 { DIMENSION="pressure";        }
        SCALAR(LSD_C25)                                 { DIMENSION="pressure";        }
        SCALAR(LSD_C35)                                 { DIMENSION="pressure";        }
        SCALAR(LSD_C45)                                 { DIMENSION="pressure";        }
        SCALAR(LSD_C55)                                 { DIMENSION="pressure";        }
        SCALAR(LSD_C16)                                 { DIMENSION="pressure";        }
        SCALAR(LSD_C26)                                 { DIMENSION="pressure";        }
        SCALAR(LSD_C36)                                 { DIMENSION="pressure";        }
        SCALAR(LSD_C46)                                 { DIMENSION="pressure";        }
        SCALAR(LSD_C56)                                 { DIMENSION="pressure";        }
        SCALAR(LSD_C66)                                 { DIMENSION="pressure";        }
    }

    if(MAT_OPTION == FALSE)
    {
        ASSIGN(KEYWORD_STR, "_ORTHOTROPIC_ELASTIC");

        SCALAR(Rho)                           { DIMENSION="density";  }
        SCALAR(LSDYNA_EA)                               { DIMENSION="pressure";             }  
        SCALAR(LSDYNA_EB)                               { DIMENSION="pressure";           }  
        SCALAR(LSDYNA_EC)                              { DIMENSION="pressure";         }  
        SCALAR(LSDYNA_PRBA)                              { DIMENSION="DIMENSIONLESS";          }   
        SCALAR(LSDYNA_PRCA)                              { DIMENSION="DIMENSIONLESS";          }   
        SCALAR(LSDYNA_PRCB)                               { DIMENSION="DIMENSIONLESS";              } 
        SCALAR(LSDYNA_GAB)                               { DIMENSION="pressure";              }  
        SCALAR(LSDYNA_GBC)                               { DIMENSION="pressure";             }  
        SCALAR(LSDYNA_GCA)                               { DIMENSION="pressure";             }
        SCALAR(LSD_G)                                   { DIMENSION="pressure";          }  
        SCALAR(LSDYNA_SIGF)                                   { DIMENSION="pressure";          }
    }
    if(LSD_TitleOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    } 

    RADIO(axisOptFlag)
    {
        ADD(0, "0 : Locally orthotropic : axis given by nodes 1,2, and 4") ;
        ADD(1, "1 : Locally orthotropic : a-dir given by a point and global location of element center") ;
        ADD(2, "2 : Globally orthotropic: axis given by vectors") ;
        ADD(3, "3 : Locally orthotropic : axis given by rotating the material axes by an angle BETA") ;
        ADD(4, "4 : Locally orthotropic : cylindrical coordinate given by vector v and point P") ;
        ADD(5, "5 : BY SYSTEM") ;
    }
    if(axisOptFlag == 5)
    {
        DATA(LSD_SYSTEM);
    }

    RADIO(LSD_MAT142_MACF)
    {
        ADD(0, "OFF") ;
        ADD(1, "1. No Change") ;
        ADD(2, "2. Switch Material Axis A and B  ") ;
        ADD(3, "3. Switch Material Axis A and C  ") ;
        ADD(4, "4. Switch Material Axis B and C  ") ;
    }
    SCALAR(LSD_IHIS)                    { DIMENSION="DIMENSIONLESS";}
    RADIO(LSD_MAT_REF)
    {
        ADD(0, "OFF");
        ADD(1, "ON");
    }

    if(axisOptFlag == 1 ||  axisOptFlag == 4)
    {
mandatory:
        DATA(LSD_NODE1);                                  
        SCALAR(LSDYNA_XP)                                  {DIMENSION="l";}
        SCALAR(LSDYNA_YP)                                  {DIMENSION="l";}
        SCALAR(LSDYNA_ZP)                                  {DIMENSION="l";}
    }

    if(axisOptFlag == 2)
    {
mandatory:
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        SCALAR(LSDYNA_A1);
        SCALAR(LSDYNA_A2);
        SCALAR(LSDYNA_A3);
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        SCALAR(LSDYNA_D1);
        SCALAR(LSDYNA_D2);
        SCALAR(LSDYNA_D3);
    }

    if(axisOptFlag == 3  || axisOptFlag == 4)
    {
        DATA(LSD_NODE7);
        DATA(LSD_NODE8);
        SCALAR(LSDYNA_V1);
        SCALAR(LSDYNA_V2);
        SCALAR(LSDYNA_V3);
        //        mandatory:
        //        VECTOR(VX,VY,VZ,"Coordinates of vector v");
    }

    if(axisOptFlag == 3)
    {
        SCALAR(LSDYNA_BETA)                                        {DIMENSION="a";}
    }
    /*
    graphical SUPPORT("Part(s) to which material is applied") {
    OBJECTS=(/COMPONENT/BRICK,/COMPONENT/TETRA4,/COMPONENT/LINEAR_3D,/COMPONENT/SHELL,/COMPONENT/PENTA6,/COMPONENT/SHEL16,/COMPONENT/TSHELL);
    ADD(COMPONENT,"Parts");
    }
    */
}

// File format
FORMAT(Keyword971)
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    ASSIGN(AOPT_FLAG, 1, IMPORT);
    ASSIGN(AOPT_FLAG, 1, EXPORT);
    
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    if(LSD_NODE3 != NONE && LSD_NODE4 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE5 != NONE && LSD_NODE6 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    if(LSD_NODE7 != NONE && LSD_NODE8 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }

    // export time
    if(IO_FLAG == 2 && MAT_OPTION == 0 && LSD_TitleOpt == 0)
    {
        HEADER("*MAT_ORTHOTROPIC_ELASTIC");
    }
    else if(IO_FLAG == 2 && MAT_OPTION == 0 && LSD_TitleOpt == 1)
    {
        HEADER("*MAT_ORTHOTROPIC_ELASTIC_TITLE");
    }  
    else if(IO_FLAG == 2 && MAT_OPTION == 1 && LSD_TitleOpt == 0)
    {
        HEADER("*MAT_ANISOTROPIC_ELASTIC");
    }  
    else if(IO_FLAG == 2 && MAT_OPTION == 1 && LSD_TitleOpt == 1)
    {
        HEADER("*MAT_ANISOTROPIC_ELASTIC_TITLE");
    }

    // import time
    if(IO_FLAG == 1)
    {
        HEADER("*MAT_002%5s%6s", HAS_MAT_OPTION, HAS_TITLE);
    }
    if(IO_FLAG == 1 && HAS_MAT_OPTION != "_ANIS")
    {
        HEADER("*MAT_%19s%6s", HAS_MAT_OPTION, HAS_TITLE);
    }
    if(IO_FLAG == 1 && HAS_MAT_OPTION == "ORTHOTROPIC_ELASTIC")
    {
        ASSIGN(MAT_OPTION, 0);
    }
    else if(IO_FLAG == 1 && (HAS_MAT_OPTION == "ANISOTROPIC_ELASTIC" || HAS_MAT_OPTION == "_ANIS"))
    {
        ASSIGN(MAT_OPTION, 1);
    }
    if(IO_FLAG == 1 && HAS_TITLE == "_TITLE")
    {
        ASSIGN(LSD_TitleOpt, 1);
    }

    if(IO_FLAG == 2 && LSD_TitleOpt == 1)  
    {
        CARD("%-80s", TITLE);
    }
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 5 && IO_FLAG == 2)
    {
        ASSIGN(AOPT,4.0,EXPORT);
    }
     
    if(MAT_OPTION == FALSE)
    {
        COMMENT("$      MID       RHO        EA        EB        EC      PRBA      PRCA      PRCB");
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSDYNA_EA,LSDYNA_EB,LSDYNA_EC,LSDYNA_PRBA,LSDYNA_PRCA,LSDYNA_PRCB);

        COMMENT("$      GAB       GBC       GCA      AOPT         G      SIGF");
    }
    if(MAT_OPTION == FALSE && IO_FLAG == 2)
    {    
        if(axisOptFlag != 6)
        {
            CARD("%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,AOPT,LSD_G,LSDYNA_SIGF);
        }
        else
        { 
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,SCALAR_OR_OBJECT(AOPT_FLAG,AOPT,LSD_SYSTEM),LSD_G,LSDYNA_SIGF);
        }
    }
    if(MAT_OPTION == FALSE)
    {
        CARD_PREREAD("%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,AOPT);
        if(AOPT == 0.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,1,IMPORT);
        }
        else if(AOPT == 1.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,2,IMPORT);
        }
        else if(AOPT == 2.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,3,IMPORT);
        }
        else if(AOPT == 3.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,4,IMPORT);
        }
        else if(AOPT == 4.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,5,IMPORT);
        }
        else if(AOPT < 0.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,6,IMPORT);
        }

        if(IO_FLAG == 1 && axisOptFlag != 6)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,AOPT,LSD_G,LSDYNA_SIGF);
        }
        else if(IO_FLAG == 1 && axisOptFlag == 6)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,SCALAR_OR_OBJECT(AOPT_FLAG,AOPT,LSD_SYSTEM),LSD_G,LSDYNA_SIGF);
        }
    }
    
    if(MAT_OPTION == TRUE)
    {
        COMMENT("$      MID       RHO       C11       C12       C22       C13       C23       C33");
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSD_C11,LSD_C12,LSD_C22,LSD_C13,LSD_C23,LSD_C33);

        COMMENT("$      C14       C24       C34       C44       C15       C25       C35       C45");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_C14,LSD_C24,LSD_C34,LSD_C44,LSD_C15,LSD_C25,LSD_C35,LSD_C45);

        COMMENT("$      C55       C16       C26       C36       C46       C56       C66      AOPT");
    }
    
    if(MAT_OPTION == TRUE && IO_FLAG == 2)
    {
        if(axisOptFlag != 6)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10d",LSD_C55,LSD_C16,LSD_C26,LSD_C36,LSD_C46,LSD_C56,LSD_C66,AOPT);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_C55,LSD_C16,LSD_C26,LSD_C36,LSD_C46,LSD_C56,LSD_C66,SCALAR_OR_OBJECT(AOPT_FLAG,AOPT, LSD_SYSTEM));
        }
    }
    
    if(MAT_OPTION == TRUE)
    { 
        CARD_PREREAD("%10s%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,AOPT);
        if(AOPT == 0.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,1,IMPORT);
        }
        else if(AOPT == 1.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,2,IMPORT);
        }
        else if(AOPT == 2.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,3,IMPORT);
        }
        else if(AOPT == 3.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,4,IMPORT);
        }
        else if(AOPT == 4.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,5,IMPORT);
        }
        else if(AOPT < 0.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,6,IMPORT);
        }

        if(IO_FLAG == 1 && axisOptFlag != 6)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_C55,LSD_C16,LSD_C26,LSD_C36,LSD_C46,LSD_C56,LSD_C66,AOPT);
        }
        else if(IO_FLAG == 1 && axisOptFlag == 6)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_C55,LSD_C16,LSD_C26,LSD_C36,LSD_C46,LSD_C56,LSD_C66,SCALAR_OR_OBJECT(AOPT_FLAG,AOPT, LSD_SYSTEM));
        }
    }
    //
    COMMENT("$       XP        YP        ZP        A1        A2        A3      MACF");
    if(IO_FLAG == 1)
    {
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d",LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3,LSD_MAT142_MACF);
    }
    else 
    {
        if(axisOptFlag == 2 || axisOptFlag == 5)
        {
            CARD("%10lg%10lg%10lg%10s%10s%10s%10d",LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP,_BLANK_,_BLANK_,_BLANK_,LSD_MAT142_MACF);
        }
        else if(axisOptFlag == 3)
        {
            CARD("%10s%10s%10s%10lg%10lg%10lg%10d",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3,LSD_MAT142_MACF);
        }
        else 
        {
            CARD("%10s%10s%10s%10s%10s%10s%10d",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_MAT142_MACF);
        }
    }

    COMMENT("$       V1        V2        V3        D1        D2        D3      BETA       REF");
    if(IO_FLAG == 1)
    {
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3,LSDYNA_BETA,LSD_MAT_REF);
    }
    else
    {
        if(axisOptFlag == 3)
        {
            CARD("%10s%10s%10s%10lg%10lg%10lg%10s%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3,_BLANK_,LSD_MAT_REF);
        }
        else if(axisOptFlag == 4)
        {
            CARD("%10lg%10lg%10lg%10s%10s%10s%10lg%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,LSDYNA_BETA,LSD_MAT_REF);
        }
        else if(axisOptFlag == 5)
        {
            CARD("%10lg%10lg%10lg%10s%10s%10s%10s%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_MAT_REF);
        }
        else
        {
            CARD("%10s%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_MAT_REF);
        }
    }
}

FORMAT(Keyword971_R7.1)
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    ASSIGN(AOPT_FLAG, 1, IMPORT);
    ASSIGN(AOPT_FLAG, 1, EXPORT);
    
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    if(LSD_NODE3 != NONE && LSD_NODE4 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE5 != NONE && LSD_NODE6 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    if(LSD_NODE7 != NONE && LSD_NODE8 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }

    // export time
    if(IO_FLAG == 2 && MAT_OPTION == 0 && LSD_TitleOpt == 0)
    {
        HEADER("*MAT_ORTHOTROPIC_ELASTIC");
    }
    else if(IO_FLAG == 2 && MAT_OPTION == 0 && LSD_TitleOpt == 1)
    {
        HEADER("*MAT_ORTHOTROPIC_ELASTIC_TITLE");
    }  
    else if(IO_FLAG == 2 && MAT_OPTION == 1 && LSD_TitleOpt == 0)
    {
        HEADER("*MAT_ANISOTROPIC_ELASTIC");
    }  
    else if(IO_FLAG == 2 && MAT_OPTION == 1 && LSD_TitleOpt == 1)
    {
        HEADER("*MAT_ANISOTROPIC_ELASTIC_TITLE");
    }

    // import time
    if(IO_FLAG == 1)
    {
        HEADER("*MAT_002%5s%6s", HAS_MAT_OPTION, HAS_TITLE);
    }
    if(IO_FLAG == 1 && HAS_MAT_OPTION != "_ANIS")
    {
        HEADER("*MAT_%19s%6s", HAS_MAT_OPTION, HAS_TITLE);
    }
    if(IO_FLAG == 1 && HAS_MAT_OPTION == "ORTHOTROPIC_ELASTIC")
    {
        ASSIGN(MAT_OPTION, 0);
    }
    else if(IO_FLAG == 1 && (HAS_MAT_OPTION == "ANISOTROPIC_ELASTIC" || HAS_MAT_OPTION == "_ANIS"))
    {
        ASSIGN(MAT_OPTION, 1);
    }
    if(IO_FLAG == 1 && HAS_TITLE == "_TITLE")
    {
        ASSIGN(LSD_TitleOpt, 1);
    }

    if(IO_FLAG == 2 && LSD_TitleOpt == 1)  
    {
        CARD("%-80s", TITLE);
    }
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 5 && IO_FLAG == 2)
    {
        ASSIGN(AOPT,4.0,EXPORT);
    }
     
    if(MAT_OPTION == FALSE)
    {
        COMMENT("$      MID       RHO        EA        EB        EC      PRBA      PRCA      PRCB");
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSDYNA_EA,LSDYNA_EB,LSDYNA_EC,LSDYNA_PRBA,LSDYNA_PRCA,LSDYNA_PRCB);

        COMMENT("$      GAB       GBC       GCA      AOPT         G      SIGF");
    }
    if(MAT_OPTION == FALSE && IO_FLAG == 2)
    {    
        if(axisOptFlag != 6)
        {
            CARD("%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,AOPT,LSD_G,LSDYNA_SIGF);
        }
        else
        { 
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,SCALAR_OR_OBJECT(AOPT_FLAG,AOPT,LSD_SYSTEM),LSD_G,LSDYNA_SIGF);
        }
    }
    if(MAT_OPTION == FALSE)
    {
        CARD_PREREAD("%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,AOPT);       
        if(AOPT == 0.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,1,IMPORT);
        }
        else if(AOPT == 1.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,2,IMPORT);
        }
        else if(AOPT == 2.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,3,IMPORT);
        }
        else if(AOPT == 3.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,4,IMPORT);
        }
        else if(AOPT == 4.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,5,IMPORT);
        }
        else if(AOPT < 0.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,6,IMPORT);
        }
        if(IO_FLAG == 1 && axisOptFlag != 6)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,AOPT,LSD_G,LSDYNA_SIGF);
        }
        else if(IO_FLAG == 1 && axisOptFlag == 6)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_GAB,LSDYNA_GBC,LSDYNA_GCA,SCALAR_OR_OBJECT(AOPT_FLAG,AOPT,LSD_SYSTEM),LSD_G,LSDYNA_SIGF);
        }
    }
    
    if(MAT_OPTION == TRUE)
    {
        COMMENT("$      MID       RHO       C11       C12       C22       C13       C23       C33");
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,LSD_C11,LSD_C12,LSD_C22,LSD_C13,LSD_C23,LSD_C33);

        COMMENT("$      C14       C24       C34       C44       C15       C25       C35       C45");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_C14,LSD_C24,LSD_C34,LSD_C44,LSD_C15,LSD_C25,LSD_C35,LSD_C45);

        COMMENT("$      C55       C16       C26       C36       C46       C56       C66      AOPT");
    }
    
    if(MAT_OPTION == TRUE && IO_FLAG == 2)
    {
        if(axisOptFlag != 6)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10d",LSD_C55,LSD_C16,LSD_C26,LSD_C36,LSD_C46,LSD_C56,LSD_C66,AOPT);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_C55,LSD_C16,LSD_C26,LSD_C36,LSD_C46,LSD_C56,LSD_C66,SCALAR_OR_OBJECT(AOPT_FLAG,AOPT, LSD_SYSTEM));
        }
    }
    
    if(MAT_OPTION == TRUE)
    { 
        CARD_PREREAD("%10s%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,AOPT);
        if(AOPT == 0.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,1,IMPORT);
        }
        else if(AOPT == 1.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,2,IMPORT);
        }
        else if(AOPT == 2.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,3,IMPORT);
        }
        else if(AOPT == 3.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,4,IMPORT);
        }
        else if(AOPT == 4.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,5,IMPORT);
        }
        else if(AOPT < 0.0 && IO_FLAG == 1)
        {
            ASSIGN(axisOptFlag,6,IMPORT);
        }
        if(IO_FLAG == 1 && axisOptFlag != 6)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_C55,LSD_C16,LSD_C26,LSD_C36,LSD_C46,LSD_C56,LSD_C66,AOPT);
        }
        else if(IO_FLAG == 1 && axisOptFlag == 6)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_C55,LSD_C16,LSD_C26,LSD_C36,LSD_C46,LSD_C56,LSD_C66,SCALAR_OR_OBJECT(AOPT_FLAG,AOPT, LSD_SYSTEM));
        }     
    }
    //
    COMMENT("$       XP        YP        ZP        A1        A2        A3      MACF      IHIS");
    if(IO_FLAG == 1)
    {
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d%10lg",LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3,LSD_MAT142_MACF,LSD_IHIS);
    }
    else 
    {
        if(axisOptFlag == 2 || axisOptFlag == 5)
        {
            CARD("%10lg%10lg%10lg%10s%10s%10s%10d%10lg",LSDYNA_XP,LSDYNA_YP,LSDYNA_ZP,_BLANK_,_BLANK_,_BLANK_,LSD_MAT142_MACF,LSD_IHIS);
        }
        else if(axisOptFlag == 3)
        {
            CARD("%10s%10s%10s%10lg%10lg%10lg%10d%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3,LSD_MAT142_MACF,LSD_IHIS);
        }
        else 
        {
            CARD("%10s%10s%10s%10s%10s%10s%10d%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_MAT142_MACF,LSD_IHIS);
        }
    }

    COMMENT("$       V1        V2        V3        D1        D2        D3      BETA       REF");
    if(IO_FLAG == 1)
    {
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3,LSDYNA_BETA,LSD_MAT_REF);
    }
    else
    {
        if(axisOptFlag == 3)
        {
            CARD("%10s%10s%10s%10lg%10lg%10lg%10s%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3,_BLANK_,LSD_MAT_REF);
        }
        else if(axisOptFlag == 4)
        {
            CARD("%10lg%10lg%10lg%10s%10s%10s%10lg%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,LSDYNA_BETA,LSD_MAT_REF);
        }
        else if(axisOptFlag == 5)
        {
            CARD("%10lg%10lg%10lg%10s%10s%10s%10s%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_MAT_REF);
        }
        else
        {
            CARD("%10s%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_MAT_REF);
        }
    }
}
