//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
ATTRIBUTES(COMMON) {

    //Attributes for HM usage 
    IO_FLAG                             = VALUE(INT, "Import/Export flag");
    _HMCOMMENTSFLAG                     = VALUE(INT, "Write HM Comments");
    _HWCOLOR                            = VALUE(INT, "Entity Color");
    _HAS_HEADER                         = VALUE(BOOL,"Has Header Card");
    TITLE                               = VALUE(STRING, "TITLE");
    solverkeyword                       = VALUE(STRING, "Solver Keyword");
    nspectrum                           = SIZE("No of Input Spectrum","No_Frequency_Spectrum");
    ddam                                = VALUE(INT,"DDAM option","OPTION");

    // Solver fields
    mdmin                                = VALUE(INT,"The first mode in modal superposition method");
    mdmax                                = VALUE(INT,"The last mode in modal superposition method");
    fnmin                                = VALUE(FLOAT,"The minimum natural frequency in modal superposition method");
    fnmax                                = VALUE(FLOAT,"The maximum natural frequency in modal superposition method");
    restrt                               = VALUE(INT,"Restart option");
    mcomb                                = VALUE(INT,"Method for combination of modes");
    relatv                               = VALUE(INT,"FLAG for displacement, velocity and acceleration results");
    dampf                                = VALUE(FLOAT,"Modal damping coefficient");
    lcdamp                               = VALUE(FUNCT, "Load Curve ID for defining frequency dependent modal damping ratio");
    ldtyp                                = VALUE(INT,"Type of load curve for LCDAMP");
    dmpmas                               = VALUE(FLOAT,"Mass proportional damping constant Alpha, in Rayleigh damping");
    dmpstf                               = VALUE(FLOAT,"Stiffness proportional damping constant Beta , in Rayleigh damping");
    lctyp_input_specturm                 = ARRAY[nspectrum](INT,"Load curve type for defining the input spectrum");
    dof                                  = ARRAY[nspectrum](INT,"Applicable degrees-of-freedom for excitation input");
    lc_tbid                              = ARRAY[nspectrum](FUNCT, "Load curve or table ID");
    sf                                   = ARRAY[nspectrum](FLOAT,"Scale factor for the input load spectrum");
    vid                                  = ARRAY[nspectrum](VECTOR, "Vector ID for DOF values of 4");
    lntyp                                = ARRAY[nspectrum](INT,"Set type for LNID");
    nids                                 = ARRAY[nspectrum](NODE, "Node ID", "NIDS");
    nsids                                = ARRAY[nspectrum](SETS, "Node Set ID", "NSIDS") { SUBTYPES = (/SETS/SET_NODE_IDPOOL);  }
    ssids                                = ARRAY[nspectrum](SETS, "Segment Set ID", "SSIDS") { SUBTYPES = (/SETS/SET_SEGMENT_GENERAL_IDPOOL);  }
    pids                                 = ARRAY[nspectrum](COMPONENT, "Part ID", "PIDS");
    psids                                = ARRAY[nspectrum](SETS, "Part Set ID", "PSIDS") { SUBTYPES = (/SETS/SET_PART_IDPOOL) ;  }
    inflag                               = ARRAY[nspectrum](INT,"Frequency interpolation option");
    DUMMY_LNTYP                          = VALUE(INT, "LNTYP");
    empty_string                         = VALUE(STRING, "empty string");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    IO_FLAG                            =-1;
    _HMCOMMENTSFLAG                    =-1;
    _HWCOLOR                           =-1;
    _HAS_HEADER                        = -1;
    TITLE                              =-1;
    solverkeyword                      = -1;
    empty_string                       = -1;
    DUMMY_LNTYP                        = -1;
}

DEFAULTS(COMMON)
{
    mdmin                                = 1;
    fnmin                                = 0.0;
    restrt                               = 0;
    mcomb                                = 0;
    relatv                               = 0;
    ldtyp                                = 0;
    dmpmas                               = 0.0;
    dmpstf                               = 0.0;
    sf                                   = 1.0;
    inflag                               = 0;
}

CHECK(COMMON)
{
    nspectrum                            >= 0;
}

GUI(COMMON)
{
    ASSIGN(solverkeyword, *FREQUENCY_DOMAIN_RESPONSE_SPECTRUM);
    ASSIGN(ddam,0);
    
    // Card 1
    SCALAR(mdmin);
    SCALAR(mdmax);
    SCALAR(fnmin) { DIMENSION = "f"; }
    SCALAR(fnmax) { DIMENSION = "f"; }
    RADIO(restrt)
    {
        ADD(0,"0:A new run including modal analysis");
        ADD(1,"1:Restart with d3eigv family files created elsewhere");
    }
    RADIO(mcomb)
    {
        ADD(0,"0:SRSS method");
        ADD(1,"1:NRC Grouping method");
        ADD(2,"2:Complete Quadratic Combination method");
        ADD(3,"3:Double Sum method");
        ADD(4,"4:NRL-SUM method");
        ADD(5,"5:Double Sum method based on Gupta-Cordero coefficient");
        ADD(6,"6:Double Sum method based on modified Gupta-Cordero coefficient");
        ADD(7,"7:Rosenblueth method");
    }
    
    // Card 2
    SCALAR(dampf);
    FUNCTION(lcdamp) {/FILTER/curveoption/0/EQ;}
    RADIO(ldtyp)
    {
        ADD(0,"0:Abscissa value defines frequency");
        ADD(1,"1:Abscissa value defines mode number");
    }
    SCALAR(dmpmas);
    SCALAR(dmpstf);
    SIZE(nspectrum);
    ARRAY(nspectrum, "")
    {
        RADIO(lctyp_input_specturm)
        {
            ADD(0, "0:Base velocity");
            ADD(1, "1:Base acceleration");
            ADD(2, "2:Base displacement");
            ADD(3, "3:Nodal force");
            ADD(4, "4:Pressure");
            ADD(10, "10:Base velocity time history");
            ADD(11, "11:Base acceleration time history");
            ADD(12, "12:Base displacement time history");
        }
        RADIO(dof)
        {
            ADD(1, "1:X-translational degree-of-freedom");
            ADD(2, "2:Y-translational degree-of-freedom");
            ADD(3, "3:Z-translational degree-of-freedom");
            ADD(4, "4:Translational movement in direction given by vector VID");
        }
        FUNCTION(lc_tbid);
        SCALAR(sf);
        DATA(vid);
        RADIO(lntyp)
        {
            ADD(1, "1:Node ID");
            ADD(2, "2:Node set ID");
            ADD(3, "3:Segment set ID");
            ADD(4, "4:Part ID");
            ADD(5, "5:Part set ID");
        }
        
        if (lntyp == 1)
        {
            DATA(nids);
        }
        else if (lntyp == 2)
        {
            DATA(nsids);
        }
        else if (lntyp == 3)
        {
            DATA(ssids);
        }
        else if (lntyp == 4)
        {
            DATA(pids);
        }
        else if (lntyp == 5)
        {
            DATA(psids);
        }
        RADIO(inflag)
        {
            ADD(0, "0:Logarithmic interpolation");
            ADD(1, "1:Semi-logarithmic interpolation");
            ADD(2, "2:Linear interpolation");
        }
    }
    
    // Card 3 is of type category
}

// File format
FORMAT(Keyword971_R7.1) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    HEADER("*FREQUENCY_DOMAIN_RESPONSE_SPECTRUM");
    
    COMMENT("$    MDMIN     MDMAX     FNMIN     FNMAX    RESTRT     MCOMB");
    CARD("%10d%10d%10lg%10lg%10d%10d",mdmin,mdmax,fnmin,fnmax,restrt,mcomb);
    
    COMMENT("$    DAMPF    LCDAMP     LDTYP    DMPMAS    DMPSTF");
    CARD("%10lg%10d%10d%10lg%10lg",dampf,lcdamp,ldtyp,dmpmas,dmpstf);
    
    if (IO_FLAG == 0)
    {
        COMMENT("$    LCTYP       DOF   LC/TBID        SF       VID      LNID     LNTYP    INFLAG");
        CARD_LIST(nspectrum)
        {
            CARD("%10d%10d%10d%10lg%10d%10d%10d%10d",lctyp_input_specturm, dof, lc_tbid, sf, vid, CELL_COND(  if (lntyp == 1)  
                                                                                                                  nids;
                                                                                                              else if (lntyp == 2)  
                                                                                                                  nsids;
                                                                                                              else if (lntyp == 3)  
                                                                                                                  ssids;
                                                                                                              else if (lntyp == 4)  
                                                                                                                  pids;
                                                                                                              else if (lntyp == 5)  
                                                                                                                  psids;),lntyp, inflag);
        }
    }
    else
    {
        FREE_CARD_LIST(nspectrum)
        { 
            CARD_PREREAD("%10s%10s%10s%10s%10s%10s%10d%10s",empty_string,empty_string,empty_string,empty_string,empty_string,empty_string,DUMMY_LNTYP,empty_string);
            CARD("%10d%10d%10d%10lg%10d%10d%10d%10d", lctyp_input_specturm, dof, lc_tbid, sf, vid, CELL_COND(  if(DUMMY_LNTYP == 1)
                                                                                                                        nids;
                                                                                                               else if(DUMMY_LNTYP == 2)
                                                                                                                        nsids;
                                                                                                               else if(DUMMY_LNTYP == 3)
                                                                                                                        ssids;
                                                                                                               else if(DUMMY_LNTYP == 4)
                                                                                                                        pids;
                                                                                                               else if(DUMMY_LNTYP == 5)
                                                                                                                        psids;), lntyp , inflag); 
                                                                    
            if(DUMMY_LNTYP == 1)
            {
                ASSIGN(nsids, 0, IMPORT);
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(pids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            else if(DUMMY_LNTYP == 2)
            {
                ASSIGN(nids, 0, IMPORT);
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(pids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            else if(DUMMY_LNTYP == 3)
            {
                ASSIGN(nids, 0, IMPORT);
                ASSIGN(nsids, 0, IMPORT);
                ASSIGN(pids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            else if(DUMMY_LNTYP == 4)
            {
                ASSIGN(nids, 0, IMPORT);
                ASSIGN(nsids, 0, IMPORT);
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            else if(DUMMY_LNTYP == 5)
            {
                ASSIGN(nids, 0, IMPORT);
                ASSIGN(nsids, 0, IMPORT);
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(pids, 0, IMPORT);
            }
        }
    }
}

// File format
FORMAT(Keyword971_R6.1) {

    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 0, EXPORT);
    
    HEADER("*FREQUENCY_DOMAIN_RESPONSE_SPECTRUM");
    
    COMMENT("$    MDMIN     MDMAX     FNMIN     FNMAX    RESTRT     MCOMB    RELATV");
    CARD("%10d%10d%10lg%10lg%10d%10d%10d",mdmin,mdmax,fnmin,fnmax,restrt,mcomb,relatv);
    
    COMMENT("$    DAMPF    LCDAMP     LDTYP    DMPMAS    DMPSTF");
    CARD("%10lg%10d%10d%10lg%10lg",dampf,lcdamp,ldtyp,dmpmas,dmpstf);
    
    if (IO_FLAG == 0)
    {
        COMMENT("$    LCTYP       DOF   LC/TBID        SF       VID      LNID     LNTYP    INFLAG");
        CARD_LIST(nspectrum)
        {
            CARD("%10d%10d%10d%10lg%10d%10d%10d%10d",lctyp_input_specturm, dof, lc_tbid, sf, vid, CELL_COND(  if (lntyp == 1)  
                                                                                                                  nids;
                                                                                                              else if (lntyp == 2)  
                                                                                                                  nsids;
                                                                                                              else if (lntyp == 3)  
                                                                                                                  ssids;
                                                                                                              else if (lntyp == 4)  
                                                                                                                  pids;
                                                                                                              else if (lntyp == 5)  
                                                                                                                  psids;),lntyp, inflag);
        }
    }
    else
    {
        FREE_CARD_LIST(nspectrum)
        { 
            CARD_PREREAD("%10s%10s%10s%10s%10s%10s%10d%10s",empty_string,empty_string,empty_string,empty_string,empty_string,empty_string,DUMMY_LNTYP,empty_string);
            CARD("%10d%10d%10d%10lg%10d%10d%10d%10d", lctyp_input_specturm, dof, lc_tbid, sf, vid, CELL_COND(  if(DUMMY_LNTYP == 1)
                                                                                                                        nids;
                                                                                                               else if(DUMMY_LNTYP == 2)
                                                                                                                        nsids;
                                                                                                               else if(DUMMY_LNTYP == 3)
                                                                                                                        ssids;
                                                                                                               else if(DUMMY_LNTYP == 4)
                                                                                                                        pids;
                                                                                                               else if(DUMMY_LNTYP == 5)
                                                                                                                        psids;), lntyp , inflag); 
                                                                    
            if(DUMMY_LNTYP == 1)
            {
                ASSIGN(nsids, 0, IMPORT);
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(pids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            else if(DUMMY_LNTYP == 2)
            {
                ASSIGN(nids, 0, IMPORT);
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(pids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            else if(DUMMY_LNTYP == 3)
            {
                ASSIGN(nids, 0, IMPORT);
                ASSIGN(nsids, 0, IMPORT);
                ASSIGN(pids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            else if(DUMMY_LNTYP == 4)
            {
                ASSIGN(nids, 0, IMPORT);
                ASSIGN(nsids, 0, IMPORT);
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(psids, 0, IMPORT);
            }
            else if(DUMMY_LNTYP == 5)
            {
                ASSIGN(nids, 0, IMPORT);
                ASSIGN(nsids, 0, IMPORT);
                ASSIGN(ssids, 0, IMPORT);
                ASSIGN(pids, 0, IMPORT);
            }
        }
    }
}
