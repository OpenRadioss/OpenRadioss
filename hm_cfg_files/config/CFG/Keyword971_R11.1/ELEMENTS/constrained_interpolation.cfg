//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//  *CONSTRAINED_INTERPOLATION_{option}
//

ATTRIBUTES(COMMON)
{
    // INPUT ATTRIBUTES 

    // Card 1
    dependentnode                           = VALUE(NODE, "Dependent node ID");
    dependentdof                            = VALUE(INT, "Dependent degrees-of-freedom");
    Rbe3_DepNode_CCID                       = VALUE(SYSTEM, "Local coordinate system ID if LOCAL option is active");
    LSD_ITYP                                = VALUE(INT, "Specifies the meaning of INID");
    LSD_INDSW                               = VALUE(INT, "Switch for controlling the explicit solution when an independent (or dependent) node is deleted");

    // Card 2
    independentnodesmax                     = SIZE("Number of Independent nodes");
    independentnodes                        = ARRAY[independentnodesmax](NODE, "Independent node ID or node set ID");
    independentnodesets                     = ARRAY[independentnodesmax](SETS, "Independent node ID or node set ID")  { SUBTYPES = (/SETS/GRNOD); }
    independentdofs                         = ARRAY[independentnodesmax](INT, "Independent degrees-of-freedom using the same form as for the dependent degrees-of-freedom, DDOF, above");
    LSD_TWGHTX                              = ARRAY[independentnodesmax](FLOAT, "Weighting factor for node INID with active degrees-of-freedom IDOF. This weight scales the x-translational component");
    LSD_TWGHTY                              = ARRAY[independentnodesmax](FLOAT, "Weighting factor for node INID with active degrees-of-freedom IDOF. This weight scales the y-translational component");
    LSD_TWGHTZ                              = ARRAY[independentnodesmax](FLOAT, "Weighting factor for node INID with active degrees-of-freedom IDOF. This weight scales the z-translational component");
    LSD_RWGHTX                              = ARRAY[independentnodesmax](FLOAT, "Weighting factor for node INID with active degrees-of-freedom IDOF. This weight scales the x-rotational component");
    LSD_RWGHTY                              = ARRAY[independentnodesmax](FLOAT, "Weighting factor for node INID with active degrees-of-freedom IDOF. This weight scales the y-rotational component");
    LSD_RWGHTZ                              = ARRAY[independentnodesmax](FLOAT, "Weighting factor for node INID with active degrees-of-freedom IDOF. This weight scales the z-rotational component");

    // Card 3 
    Rbe3_Indep_Node_CCIDs                   = ARRAY[independentnodesmax](SYSTEM, "Local coordinate system ID if LOCAL option is active");

    // HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");

    IOFLAG                                  = VALUE(INT, "IOFLAG");
    _opt                                    = VALUE(STRING, "_opt");
    Rbe3_Local_Option                       = VALUE(INT, "LOCAL");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES

    // Card 1
    LSD_ITYP                                = 8245;
    Rbe3_DepNode_CCID                       = 4617;
    LSD_INDSW                               = -1;
    Rbe3_Local_Option                       = 4616;

    // Card 2
    LSD_TWGHTX                              = -1;
    LSD_TWGHTY                              = -1;
    LSD_TWGHTZ                              = -1;
    LSD_RWGHTX                              = -1;
    LSD_RWGHTY                              = -1;
    LSD_RWGHTZ                              = -1;

    // Card 3
    Rbe3_Indep_Node_CCIDs                   = 4618;

    //HM INTERNAL
    KEYWORD_STR                             = 9000;

    IOFLAG                                  = -1;
    _opt                                    = -1;
}

DEFAULTS(COMMON)
{
    // Card 1
    dependentdof                            = 123456;
    LSD_ITYP                                = 0;
    LSD_INDSW                               = 1;

    // Card 2
    LSD_TWGHTX                              = 1;
    LSD_TWGHTY                              = 1;
    LSD_TWGHTZ                              = 1;
    LSD_RWGHTX                              = 1;
    LSD_RWGHTY                              = 1;
    LSD_RWGHTZ                              = 1;
}

CHECK(COMMON)
{

}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*CONSTRAINED_INTERPOLATION");

    FLAG(Rbe3_Local_Option, "LOCAL");
    if(Rbe3_Local_Option == 1)
    {
        ASSIGN(KEYWORD_STR, "_LOCAL");
    }

    // Card 1
    DATA(dependentnode, "DNID");
    SCALAR(dependentdof, "DDOF")            { DIMENSION = "DIMENSIONLESS"; }

    // If LOCAL option is define
    if(Rbe3_Local_Option == 1)
    {
        DATA(Rbe3_DepNode_CCID, "CIDD");
    }

    RADIO(LSD_ITYP, "ITYP")
    {
        ADD(0, "0: INID is a node ID");
        ADD(1, "1: INID is a node set ID");
    }

    RADIO(LSD_INDSW, "INDSW")
    {
        ADD(0, "0: Default to option 1");
        ADD(1, "1: Terminate the explicit analysis when an independent node or the dependent node is deleted");
        ADD(2, "2: Continue the explicit analysis with the constraints unchanged");
    }

    // Card 2
    SIZE(independentnodesmax);
    ARRAY(independentnodesmax, "")
    {
        if(LSD_ITYP==0)
        {
            DATA(independentnodes, "INID");
        }
        else if(LSD_ITYP==1)
        {
            DATA(independentnodesets, "INID");
        }

        SCALAR(independentdofs, "IDOF")     { DIMENSION = "DIMENSIONLESS"; }

        SCALAR(LSD_TWGHTX, "TWGHTX")        { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(LSD_TWGHTY, "TWGHTY")        { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(LSD_TWGHTZ, "TWGHTZ")        { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(LSD_RWGHTX, "RWGHTX")        { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(LSD_RWGHTY, "RWGHTY")        { DIMENSION = "DIMENSIONLESS"; }
        SCALAR(LSD_RWGHTZ, "RWGHTZ")        { DIMENSION = "DIMENSIONLESS"; }

        // Card 3
        if(Rbe3_Local_Option == 1)
        {
            DATA(Rbe3_Indep_Node_CCIDs, "CIDI");
        }
    }
}

// File format
FORMAT(Keyword971)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
      if(Rbe3_Local_Option == 0)
      {
          HEADER("*CONSTRAINED_INTERPOLATION");
      }
      else
      {
          HEADER("*CONSTRAINED_INTERPOLATION_LOCAL");
      }
    }
    else //IMPORT
    {
        HEADER("*CONSTRAINED_INTERPOLATION%80s", _opt);

        ASSIGN(Rbe3_Local_Option, _FIND(_opt, "_LOCAL"), IMPORT);
    }

    // Card 1
    if(Rbe3_Local_Option == 1)
    {
        COMMENT("$     ICID      DNID      DDOF      CIDD");
        CARD("%10d%10d%10d%10d", _ID_, dependentnode, dependentdof, Rbe3_DepNode_CCID);
    }
    else
    {
        COMMENT("$     ICID      DNID      DDOF");
        CARD("%10d%10d%10d",_ID_, dependentnode, dependentdof);
    }

    // Card 2
    COMMENT("$     INID      IDOF    TWGHTX    TWGHTY    TWGHTZ    RWGHTX    RWGHTY    RWGHTZ");
    FREE_CARD_LIST(independentnodesmax)
    {
      CARD("%10d%10d%10lg%10lg%10lg%10lg%10lg%10lg", independentnodes, independentdofs, LSD_TWGHTX, LSD_TWGHTY, LSD_TWGHTZ, LSD_RWGHTX, LSD_RWGHTY, LSD_RWGHTZ);

      // Card 3
      if(Rbe3_Local_Option == 1)
      {
          COMMENT("$     CIDI");
          CARD("%10d", Rbe3_Indep_Node_CCIDs);
      }
    }
}

FORMAT(Keyword971_R7.1)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
      if(Rbe3_Local_Option == 0)
      {
          HEADER("*CONSTRAINED_INTERPOLATION");
      }
      else
      {
          HEADER("*CONSTRAINED_INTERPOLATION_LOCAL");
      }
    }
    else //IMPORT
    {
        HEADER("*CONSTRAINED_INTERPOLATION%80s", _opt);
        
        ASSIGN(Rbe3_Local_Option, _FIND(_opt, "_LOCAL"), IMPORT);
    }

    // Card 1
    if(Rbe3_Local_Option == 1)
    {
        COMMENT("$     ICID      DNID      DDOF      CIDD      ITYP");
        CARD("%10d%10d%10d%10d%10d", _ID_, dependentnode, dependentdof, Rbe3_DepNode_CCID, LSD_ITYP);
    }
    else
    {
        COMMENT("$     ICID      DNID      DDOF                ITYP");
        CARD("%10d%10d%10d%10s%10d",_ID_, dependentnode, dependentdof, _BLANK_, LSD_ITYP);
    }

    // Card 2
    if(LSD_ITYP==0)
    {
        COMMENT("$     INID      IDOF    TWGHTX    TWGHTY    TWGHTZ    RWGHTX    RWGHTY    RWGHTZ");
        FREE_CARD_LIST(independentnodesmax)
        {
          CARD("%10d%10d%10lg%10lg%10lg%10lg%10lg%10lg", independentnodes, independentdofs, LSD_TWGHTX, LSD_TWGHTY, LSD_TWGHTZ, LSD_RWGHTX, LSD_RWGHTY, LSD_RWGHTZ);

          // Card 3
          if(Rbe3_Local_Option == 1)
          {
              COMMENT("$     CIDI");
              CARD("%10d", Rbe3_Indep_Node_CCIDs);
          }
        }
    }
    else
    {
        COMMENT("$     INID      IDOF    TWGHTX    TWGHTY    TWGHTZ    RWGHTX    RWGHTY    RWGHTZ");
        FREE_CARD_LIST(independentnodesmax)
        {
          CARD("%10d%10d%10lg%10lg%10lg%10lg%10lg%10lg", independentnodesets, independentdofs, LSD_TWGHTX, LSD_TWGHTY, LSD_TWGHTZ, LSD_RWGHTX, LSD_RWGHTY, LSD_RWGHTZ);

          // Card 3
          if(Rbe3_Local_Option == 1)
          {
              COMMENT("$     CIDI");
              CARD("%10d", Rbe3_Indep_Node_CCIDs);
          }
        }
    }
}

FORMAT(Keyword971_R11.1)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    if(IOFLAG == 0)
    {
      if(Rbe3_Local_Option == 0)
      {
          HEADER("*CONSTRAINED_INTERPOLATION");
      }
      else
      {
          HEADER("*CONSTRAINED_INTERPOLATION_LOCAL");
      }
    }
    else //IMPORT
    {
        HEADER("*CONSTRAINED_INTERPOLATION%80s", _opt);
        
        ASSIGN(Rbe3_Local_Option, _FIND(_opt, "_LOCAL"), IMPORT);
    }

    // Card 1
    if(Rbe3_Local_Option == 1)
    {
        COMMENT("$     ICID      DNID      DDOF      CIDD      ITYP     IDNSW");
        CARD("%10d%10d%10d%10d%10d%10d", _ID_, dependentnode, dependentdof, Rbe3_DepNode_CCID, LSD_ITYP, LSD_INDSW);
    }
    else
    {
        COMMENT("$     ICID      DNID      DDOF                ITYP     IDNSW");
        CARD("%10d%10d%10d%10s%10d%10d", _ID_, dependentnode, dependentdof, _BLANK_, LSD_ITYP, LSD_INDSW);
    }

    // Card 2
    if(LSD_ITYP==0)
    {
        COMMENT("$     INID      IDOF    TWGHTX    TWGHTY    TWGHTZ    RWGHTX    RWGHTY    RWGHTZ");
        FREE_CARD_LIST(independentnodesmax)
        {
          CARD("%10d%10d%10lg%10lg%10lg%10lg%10lg%10lg", independentnodes, independentdofs, LSD_TWGHTX, LSD_TWGHTY, LSD_TWGHTZ, LSD_RWGHTX, LSD_RWGHTY, LSD_RWGHTZ);

          // Card 3
          if(Rbe3_Local_Option == 1)
          {
              COMMENT("$     CIDI");
              CARD("%10d", Rbe3_Indep_Node_CCIDs);
          }
        }
    }
    else
    {
        COMMENT("$     INID      IDOF    TWGHTX    TWGHTY    TWGHTZ    RWGHTX    RWGHTY    RWGHTZ");
        FREE_CARD_LIST(independentnodesmax)
        {
          CARD("%10d%10d%10lg%10lg%10lg%10lg%10lg%10lg", independentnodesets, independentdofs, LSD_TWGHTX, LSD_TWGHTY, LSD_TWGHTZ, LSD_RWGHTX, LSD_RWGHTY, LSD_RWGHTZ);

          // Card 3
          if(Rbe3_Local_Option == 1)
          {
              COMMENT("$     CIDI");
              CARD("%10d", Rbe3_Indep_Node_CCIDs);
          }
        }
    }
}
