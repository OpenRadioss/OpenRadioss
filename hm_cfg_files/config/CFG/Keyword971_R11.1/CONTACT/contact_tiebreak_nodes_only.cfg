//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// CONTACT_TIED_NODES_ONLY
//

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES

    //Title Card
    displayname                             = VALUE(STRING, "Interface descriptor");

    //MPP Cards:

    //MPP Card 1
    TRACKPEN                                = VALUE(INT,  "Ignore initial penetrations");
    BUCKET                                  = VALUE(INT,  "Bucket sort frequency");
    LCBUCKET                                = VALUE(INT,  "Load curve for bucket sort frequency");
    NSEG2TRACK                              = VALUE(INT,  "Number of potential contacts to track for each secondary node");
    INITITER                                = VALUE(INT,  "Number of iterations to perform when trying to eliminate initial penetrations");
    LSD_PARMAX                              = VALUE(FLOAT,  "The parametric extension distance for contact segments");
    LSD_CPARM8                              = VALUE(INT,  "Flag for CONTACT_AUTOMATIC_GENERAL behavior");

    //MPP Card 2
    LSD_CHKSEGS                             = VALUE(INT,  "If this value is non-zero, then the node to surface and surface to surface contacts will perform a special check at time 0 for elements that are inverted (or nearly so), and remove them from contact");
    LSD_PENSF                               = VALUE(FLOAT,  "This option is used together with IGNORE for 3D forging problems");
    LSD_GRPABLE                             = VALUE(INT,  "Set to 1 to invoke an alternate MPP communication algorithm for various single surface");

    //Mandatory Cards:

    //Mandatory Card 1
    secondaryentityids                      = VALUE(MULTIOBJECT, "Secondary segment set ID, node set ID, part set ID, part ID, or shell element set ID")  { SUBTYPES = ( /COMPONENT , /SETS , /ELEMS ) ; } // 'All' is missing
    mainentityids                           = VALUE(MULTIOBJECT, "Main segment set ID, node set ID, part set ID, part ID, or shell element set ID") { SUBTYPES = ( /COMPONENT , /SETS , /ELEMS ) ; } // 'All' is missing
    SSTYP                                   = VALUE(INT, "ID type of SSID");
    MSTYP                                   = VALUE(INT, "ID type of MSID");
    ContSecondaryBoxId                      = VALUE(BLOCK,  "Include in contact definition only those secondary nodes/segments within box SBOXID");
    ContMainBoxId                           = VALUE(BLOCK,  "Include in contact definition only those main segments within box MBOXID");
    LSDYNA_SPR                              = VALUE(INT,  "Include the secondary side in the *DATABASE_NCFORC and the *DATABASE_BINARY_INTFOR interface force files, and optionally in the dynain file for wear");
    LSDYNA_MPR                              = VALUE(INT,  "Include the main side in the *DATABASE_NCFORC and the *DATABASE_BINARY_INTFOR interface force files, and optionally in the dynain file for wear");

    //Mandatory Card 2
    LSDYNA_FS                               = VALUE(FLOAT,  "Normal tensile stress at failure or Static coefficient of friction");
    LSDYNA_FD                               = VALUE(FLOAT,  "Shear stress at failure or Dynamic coefficient of friction");
    LSDYNA_DC                               = VALUE(FLOAT,  "Exponential decay coefficient");
    LSDYNA_VC                               = VALUE(FLOAT,  "Coefficient for viscous friction");
    LSDYNA_VDC                              = VALUE(FLOAT,  "Viscous damping coefficient in percent of critical or the coefficient of restitution expressed as percentage");
    LSDYNA_PENCHK                           = VALUE(INT,  "Small penetration in contact search option");
    LSDYNA_BT                               = VALUE(FLOAT,  "Birth time");
    LSDYNA_DT                               = VALUE(FLOAT,  "Death time");

    //Mandatory Card 3
    LSDYNA_SFS                              = VALUE(FLOAT,  "Scale factor on default secondary penalty stiffness when SOFT = 0 or SOFT = 2");
    LSDYNA_SFM                              = VALUE(FLOAT,  "Scale factor on default main penalty stiffness when SOFT = 0 or SOFT = 2");
    LSDYNA_SST                              = VALUE(FLOAT,  "Optional contact thickness for secondary surface");
    LSDYNA_MST                              = VALUE(FLOAT,  "Optional contact thickness for main surface");
    LSDYNA_SFST                             = VALUE(FLOAT,  "Scale factor applied to contact thickness of secondary surface");
    LSDYNA_SFMT                             = VALUE(FLOAT,  "Scale factor applied to contact thickness of main surface");
    LSDYNA_FSF                              = VALUE(FLOAT,  "Coulomb friction scale factor");
    LSDYNA_VSF                              = VALUE(FLOAT,  "Viscous friction scale factor");

    //Mandatory Card 4 - Tiebreak
    LSDYNA_NFLF                             = VALUE(FLOAT,  "Normal failure force");
    LSDYNA_SFLF                             = VALUE(FLOAT,  "Shear failure force");
    LSDYNA_NEN                              = VALUE(FLOAT,  "Exponent for normal force");
    LSDYNA_MES                              = VALUE(FLOAT,  "Exponent for shear force");

    //Optional Cards:

    //Optional Card A
    LSDYNA_SOFT                             = VALUE(INT,  "Soft constraint option");
    LSDYNA_SOFSCL                           = VALUE(FLOAT,  "Scale factor for constraint forces of soft constraint option");
    LSD_LCID2                               = VALUE(CURVE,  "Load curve ID defining airbag thickness as a function of time for type a13 contact");
    LSDYNA_MAXPAR                           = VALUE(FLOAT,  "Maximum parametric coordinate in segment search");
    LSDYNA_PENTOL                           = VALUE(FLOAT,  "Segment-based contact options");
    LSDYNA_DEPTH                            = VALUE(INT,  "is the load curve ID defining searching depth versus time");
    LSD_LCID6                               = VALUE(CURVE,  "Search depth in automatic contact, check for nodal penetration through the closest contact segments");
    LSDYNA_BSORT                            = VALUE(INT,  "Number of cycles between bucket sorts");
    LSD_LCID                                = VALUE(CURVE,  "");
    LSDYNA_FRCFRQ                           = VALUE(INT,  "Number of cycles between contact force updates for penalty contact formulations");

    //Optional Card B
    LSD_PENMAX                              = VALUE(FLOAT,  "Maximum penetration distance");
    LSD_THKOPT                              = VALUE(INT,  "Thickness Option");
    LSD_SHLTHK                              = VALUE(INT,  "Define if and only if THKOPT above equals 1");
    LSD_SNLOG                               = VALUE(INT,  "Disable shooting node logic in thickness offset contact");
    LSD_ISYM                                = VALUE(INT,  "Symmetry plane option");
    LSD_I2D3D                               = VALUE(INT,  "Segment searching option");
    LSD_SLDTHK                              = VALUE(FLOAT,  "Optional solid element thickness");
    LSD_SLDSTF                              = VALUE(FLOAT,  "Optional solid element stiffness");

    //Optional Card C
    CONT_IGAP                               = VALUE(INT,  "IGAP is used to progressively increase contact stiffness for large penetrations");
    CONT_IGNORE                             = VALUE(INT,  "Ignore initial penetrations in the *CONTACT_AUTOMATIC options");
    CONT_DPFRAC_field                       = VALUE(FLOAT,  "Depth of penetration reduction factor");
    CONT_DPFRAC_entity                      = VALUE(CURVE,  "Depth of penetration reduction factor");
    CONT_DTSIF_field                        = VALUE(FLOAT,  "Time step used in stiffness calculation");
    CONT_DTSIF_entity                       = VALUE(CURVE,  "Time step used in stiffness calculation");
    CONT_FLANGL                             = VALUE(FLOAT,  "Angle tolerance in radians for feature lines option in smooth contact");
    CONT_CID_RCF                            = VALUE(SYSTEM,  "Coordinate system ID to output rcforc force resultants and ncforc data in a local system");

    //Optional Card D
    CONT_Q2TRI                              = VALUE(INT,  "Option to split quadrilateral contact segments into two triangles");
    CONT_DTPCHK                             = VALUE(FLOAT,  "Time interval between shell penetration reports");
    CONT_SFNBR                              = VALUE(FLOAT,  "Scale factor for neighbor segment contact");
    CONT_FNLSCL                             = VALUE(FLOAT,  "Scale factor for nonlinear force scaling");
    CONT_DNLSCL                             = VALUE(FLOAT,  "Distance for nonlinear force scaling");
    CONT_TCSO                               = VALUE(INT,  "Option to consider only contact segments (not all attached elements) when computing the contact thickness for a node or segment");
    CONT_TIEDID                             = VALUE(INT,  "Incremental displacement update for tied contacts");
    CONT_SHLEDG                             = VALUE(INT,  "Flag for assuming edge shape for shells when measuring penetration");

    //Optional Card E
    CONT_SHAREC                             = VALUE(INT,  "Shared constraint flag");
    LSD_CPARM8_E                            = VALUE(INT,  "CPARM8 for SMP only controls treatment of spot weld beams in CONTACT_AUTOMATIC_GENERAL");
    LSD_IPBACK_E                            = VALUE(INT,  "If set to a nonzero value, creates a “backup” penalty tied contact for this interface");
    LSD_SRNDE                               = VALUE(INT,  "Flag for non-extended exterior shell edges");
    LSD_FRICSF                              = VALUE(FLOAT,  "Scale factor for frictional stiffness");
    LSD_ICOR                                = VALUE(INT,  "If set to a nonzero value, VDC is the coefficient of restitution expressed as a percentage");
    LSD_FTORQ                               = VALUE(INT,  "If set to 1, a torsional force is computed in the beam to beam portion of contact type AUTOMATIC_GENERAL");
    LSD_REGION                              = VALUE(INT,  "The ID of a *DEFINE_REGION which will delimit the volume of space where this contact is active");

    //Optional Card F
    CONT_PSTIFF                             = VALUE(INT,  "Flag to choose the method for calculating the penalty stiffness");
    LSD_IGNROFF                             = VALUE(INT,  "Flag to ignore the thickness offset for shells in the calculation of the shell contact surface");
    LSD_FSTOL                               = VALUE(FLOAT,  "Tolerance used with the_SMOOTH_option for determining which segments are considered flat");
    LSD_2DBINR                              = VALUE(INT,  "Flag to indicate that 2d belts initially inside retractors are involved in the contact");
    LSD_SSFTYP                              = VALUE(INT,  "Flag to determine how the SSF option on *PART_CONTACT behaves");

    // Flags
    IGAP_Option_chkbox                      = VALUE(INT,  "");
    IGNORE_Option_chkbox                    = VALUE(INT,  "");
    Option1                                 = VALUE(INT,  "");
    mppOpt                                  = VALUE(INT,  "");
    CONT_DPFRAC_chkbox                      = VALUE(INT,  "");
    CONT_DTSIF_chkbox                       = VALUE(INT,  "");
    Group_Option                            = VALUE(INT,  "");
    ContactOptionalCards                    = VALUE(INT,  "");
    LSD_DEPTHOpt                            = VALUE(INT,  "");
    LSD_BSORTOpt                            = VALUE(INT,  "");
    LSD_TitleOpt                            = VALUE(INT,  "");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    _HAS_HEADER                             = VALUE(BOOL, "");
    smooth_option                           = VALUE(INT,"SMOOTH");

    IOFLAG                                  = VALUE(INT,    "");
    _type                                   = VALUE(STRING, "");
    _opt                                    = VALUE(STRING, "");
    _existB                                 = VALUE(INT, "");
    _existC                                 = VALUE(INT, "");
    _existD                                 = VALUE(INT, "");
    _existE                                 = VALUE(INT, "");
    _existF                                 = VALUE(INT, "");

    card1_opt                               = VALUE(STRING, "");
    _dummy                                  = VALUE(STRING, "");
    _dummy_Exp                              = VALUE(STRING, "");
    secondaryentityids_type                 = VALUE(STRING, "Type of multi object");
    mainentityids_type                      = VALUE(STRING, "Type of multi object");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES

    //MPP Cards:

    //MPP Card 1
    TRACKPEN                                = 4734;
    BUCKET                                  = 4735;
    LCBUCKET                                = 4736;
    NSEG2TRACK                              = 4737;
    INITITER                                = 4738;
    LSD_PARMAX                              = 5570;
    LSD_CPARM8                              = 5600;

    //MPP Card 2
    LSD_CHKSEGS                             = 5603;
    LSD_PENSF                               = 5602;
    LSD_GRPABLE                             = 5604;

    //Mandatory Cards:

    //Mandatory Card 1
    ContSecondaryBoxId                      = 4154;
    ContMainBoxId                           = 4155;
    LSDYNA_SPR                              = 3;
    LSDYNA_MPR                              = 4;

    //Mandatory Card 2
    LSDYNA_FS                               = 5;
    LSDYNA_FD                               = 6;
    LSDYNA_DC                               = 7;
    LSDYNA_VC                               = 8;
    LSDYNA_VDC                              = 9;
    LSDYNA_PENCHK                           = 10;
    LSDYNA_BT                               = 11;
    LSDYNA_DT                               = 12;

    //Mandatory Card 3
    LSDYNA_SFS                              = 13;
    LSDYNA_SFM                              = 14;
    LSDYNA_SST                              = 15;
    LSDYNA_MST                              = 16;
    LSDYNA_SFST                             = 18;
    LSDYNA_SFMT                             = 19;
    LSDYNA_FSF                              = 20;
    LSDYNA_VSF                              = 21;

    //Mandatory Card 4 - Tiebreak
    LSDYNA_NFLF                             = 39;
    LSDYNA_SFLF                             = 40;
    LSDYNA_NEN                              = 41;
    LSDYNA_MES                              = 42;

    //Optional Cards:

    //Optional Card A
    LSDYNA_SOFT                             = 22;
    LSDYNA_SOFSCL                           = 23;
    LSD_LCID2                               = 168;
    LSDYNA_MAXPAR                           = 25;
    LSDYNA_PENTOL                           = 26;
    LSDYNA_DEPTH                            = 27;
    LSD_LCID6                               = 199;
    LSDYNA_BSORT                            = 28;
    LSD_LCID                                = 45;
    LSDYNA_FRCFRQ                           = 29;

    //Optional Card B
    LSD_PENMAX                              = 91;
    LSD_THKOPT                              = 92;
    LSD_SHLTHK                              = 93;
    LSD_SNLOG                               = 94;
    LSD_ISYM                                = 5878;
    LSD_I2D3D                               = 4461;
    LSD_SLDTHK                              = 4462;
    LSD_SLDSTF                              = 4463;

    //Optional Card C
    CONT_IGAP                               = 4183;
    CONT_IGNORE                             = 4184;
    CONT_DPFRAC_field                       = 5668;
    CONT_DPFRAC_entity                      = 5669;
    CONT_DTSIF_field                        = 5672;
    CONT_DTSIF_entity                       = 5671;
    CONT_FLANGL                             = 5674;
    CONT_CID_RCF                            = 5675;

    //Optional Card D
    CONT_Q2TRI                              = 5808;
    CONT_DTPCHK                             = 5809;
    CONT_SFNBR                              = 5810;
    CONT_FNLSCL                             = 5811;
    CONT_DNLSCL                             = 5812;
    CONT_TCSO                               = 5813;
    CONT_TIEDID                             = 5814;
    CONT_SHLEDG                             = 4894;

    //Optional Card E
    CONT_SHAREC                             = 5815;
    LSD_CPARM8_E                            = 7741;
    LSD_IPBACK_E                            = 7742;
    LSD_SRNDE                               = 7870;
    LSD_FRICSF                              = 8500;
    LSD_ICOR                                = 7780;
    LSD_FTORQ                               = 8501;
    LSD_REGION                              = 8503;

    //Optional Card F
    CONT_PSTIFF                             = 5839;
    LSD_IGNROFF                             = 8502;
    LSD_FSTOL                               = 8953;
    LSD_2DBINR                              = 8954;
    LSD_SSFTYP                              = 8955;

    //Flags
    IGAP_Option_chkbox                      = 11288;
    IGNORE_Option_chkbox                    = 11287;
    Option1                                 = 686;
    mppOpt                                  = 4733;
    CONT_DPFRAC_chkbox                      = 5670;
    CONT_DTSIF_chkbox                       = 5673;
    Group_Option                            = 997;
    ContactOptionalCards                    = 5895;
    LSD_DEPTHOpt                            = 7739;
    LSD_BSORTOpt                            = 7740;
    LSD_TitleOpt                            = 90;

    //HM INTERNAL
    KEYWORD_STR                             = 9000;
    _HAS_HEADER                             = -1;
    smooth_option                           = 3240;

    IOFLAG                                  = -1;
    _type                                   = -1;
    _opt                                    = -1;
    _existB                                 = -1;
    _existC                                 = -1;
    _existD                                 = -1;
    _existE                                 = -1;
    _existF                                 = -1;

    card1_opt                               = -1;
    _dummy                                  = -1;
    _dummy_Exp                              = -1;
    secondaryentityids_type                       = -1;
    mainentityids_type                            = -1;
}

CHECK(COMMON)
{
    CONT_IGNORE                             < 0;
    LSD_PENSF                               < 1.0;
}

DEFAULTS(COMMON)
{
    //MPP Cards:

    //MPP Card 1
    TRACKPEN                                = 0;
    BUCKET                                  = 200;
    NSEG2TRACK                              = 3;
    INITITER                                = 2;
    LSD_PARMAX                              = 1035;
    LSD_CPARM8                              = 0;

    //MPP Card 2
    LSD_CHKSEGS                             = 0;
    LSD_PENSF                               = 1.0;
    LSD_GRPABLE                             = 0;

    //Mandatory Cards:

    //Mandatory Card 1
    LSDYNA_SPR                              = 0.0;
    LSDYNA_MPR                              = 0.0;

    //Mandatory Card 2
    LSDYNA_FS                               = 0.0;
    LSDYNA_FD                               = 0.0;
    LSDYNA_DC                               = 0.0;
    LSDYNA_VC                               = 0.0;
    LSDYNA_VDC                              = 0.0;
    LSDYNA_PENCHK                           = 0.0;
    LSDYNA_BT                               = 0.0;
    LSDYNA_DT                               = 1.0e20;

    //Mandatory Card 3
    LSDYNA_SFS                              = 1.0;
    LSDYNA_SFM                              = 1.0;
    LSDYNA_SFST                             = 1.0;
    LSDYNA_SFMT                             = 1.0;
    LSDYNA_FSF                              = 1.0;
    LSDYNA_VSF                              = 1.0;

    //Mandatory Card 4 - Tiebreak
    LSDYNA_NEN                              = 2.0;
    LSDYNA_MES                              = 2.0;

    //Optional Cards:

    //Optional Card A
    LSDYNA_SOFT                             = 0;
    LSDYNA_SOFSCL                           = 0.1;
    LSDYNA_MAXPAR                           = 1.025;
    LSDYNA_PENTOL                           = 0.0;
    LSDYNA_DEPTH                            = 2;
    LSDYNA_BSORT                            = 28;
    LSDYNA_FRCFRQ                           = 1;

    //Optional Card B
    LSD_PENMAX                              = 0.0;
    LSD_THKOPT                              = 0;
    LSD_SHLTHK                              = 0;
    LSD_SNLOG                               = 0;
    LSD_ISYM                                = 0;
    LSD_I2D3D                               = 0;
    LSD_SLDTHK                              = 0.0;
    LSD_SLDSTF                              = 0.0;

    //Optional Card C
    CONT_IGAP                               = 1;
    CONT_IGNORE                             = 0;
    CONT_DPFRAC_field                       = 0;
    CONT_DTSIF_field                        = 0;
    CONT_FLANGL                             = 0.0;

    //Optional Card D
    CONT_Q2TRI                              = 0;
    CONT_DTPCHK                             = 0.0;
    CONT_SFNBR                              = 0.0;
    CONT_FNLSCL                             = 0.0;
    CONT_DNLSCL                             = 0.0;
    CONT_TCSO                               = 0;
    CONT_TIEDID                             = 0;

    //Optional Card E
    CONT_SHAREC                             = 0;
    LSD_CPARM8_E                            = 0;
    LSD_IPBACK_E                            = 0;
    LSD_SRNDE                               = 0;
    LSD_FRICSF                              = 1.0;
    LSD_ICOR                                = 0;
    LSD_FTORQ                               = 0;
    LSD_REGION                              = 0;

    //Optional Card F
    CONT_PSTIFF                             = 0;
    LSD_IGNROFF                             = 0;
    LSD_FSTOL                               = 2.0;
    LSD_2DBINR                              = 0;
    LSD_SSFTYP                              = 0;

    //HM INTERNAL
    _HAS_HEADER                             = TRUE;
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*CONTACT_TIEBREAK_NODES_ONLY");

    //MPP Cards:
    FLAG(mppOpt);
    if(mppOpt == 1)
    {
        ASSIGN(KEYWORD_STR, "_MPP");
    }

    ASSIGN(KEYWORD_STR, "_ID");

    if(mppOpt == 1)
    {
        //MPP Card 1
        FLAG(Option1);
        SCALAR(TRACKPEN)                    {DIMENSION="DIMENSIONLESS";} //to be checked
        SCALAR(BUCKET)                      {DIMENSION="f";}             //to be checked
        SCALAR(LCBUCKET)                    {DIMENSION="DIMENSIONLESS";} //to be checked
        SCALAR(NSEG2TRACK)                  {DIMENSION="DIMENSIONLESS";}
        SCALAR(INITITER)                    {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_PARMAX)                  {DIMENSION="DIMENSIONLESS";}
        RADIO(LSD_CPARM8)
        {
            ADD(0, "0: Flag is not set");
            ADD(1, "1: Flag is set");
            ADD(2, "2: Flag is set(permitting contact treatment of spot weld beams)");
        }
    }

    if(Option1 == 1 && mppOpt  == 1)
    {
        //MPP Card 2
        SCALAR(LSD_CHKSEGS)                 {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_PENSF)                   {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_GRPABLE)                 {DIMENSION="DIMENSIONLESS";}
    }
    DATA(secondaryentityids);
    DATA(mainentityids);
    DATA(ContSecondaryBoxId);
    DATA(ContMainBoxId);
    RADIO(LSDYNA_SPR)
    {
        ADD(1,"1: secondary side forces included");
        ADD(2,"2: same as EQ.1, but also allows for secondary nodes to be written as *INITIAL_CONTACT_WEAR to dynain, see NCYC on *INTERFACE_SPRINGBACK_LSDYNA");
    }

    RADIO(LSDYNA_MPR)
    {
        ADD(1, "1: main side forces included");
        ADD(2, "2: same as EQ.1, but also allows for main nodes to be written as *INITIAL_CONTACT_WEAR to dynain, see NCYC on *INTERFACE_SPRINGBACK_LSDYNA");
    }

    // Card 2
    SCALAR(LSDYNA_FS)                       { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_FD)                       { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_DC)                       { DIMENSION="inverse_of_speed"; }
    SCALAR(LSDYNA_VC)                       { DIMENSION="pressure"; }
    SCALAR(LSDYNA_VDC)                      { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_PENCHK)                   { DIMENSION="DIMENSIONLESS"; }  // to be checked
    SCALAR(LSDYNA_BT)                       { DIMENSION="t"; }
    SCALAR(LSDYNA_DT)                       { DIMENSION="t"; }

    // Card 3
    SCALAR(LSDYNA_SFS)                      { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_SFM)                      { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_SST)                      { DIMENSION="l"; }
    SCALAR(LSDYNA_MST)                      { DIMENSION="l"; }
    SCALAR(LSDYNA_SFST)                     { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_SFMT)                     { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_FSF)                      { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_VSF)                      { DIMENSION="DIMENSIONLESS"; }

    //Card 4
    SCALAR(LSDYNA_NFLF, "NFLF")             {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_SFLF, "SFLF")             {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_NEN, "NEN")               {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSDYNA_MES, "MES")               {DIMENSION="DIMENSIONLESS";}

    // Optional Cards
    FLAG(Group_Option);
    if(Group_Option == 1)
    {
        RADIO(ContactOptionalCards)
        {
            ADD(1, "A");
            ADD(2, "AB");
            ADD(3, "ABC");
            ADD(4, "ABCD");
            ADD(5, "ABCDE");
            ADD(6, "ABCDEF");
        }

        // fields available for all cards: start Optional Card A
        RADIO(LSDYNA_SOFT)
        {
            ADD(1, "0: penalty Formulation");
            ADD(2, "1: soft Constraint Formulation");
            ADD(3, "2: segment-based Contact");
            ADD(4, "4: constraint approach for FORMING contact option");
            ADD(5, "6: special contact algorithm to handle sheet blank edge (deformable) to gage pin (rigid shell) contact during implicit gravity loading, applies to *CONTACT_ FORMING_NODES_TO_SURFACE only");
        }
        SCALAR(LSDYNA_SOFSCL)           { DIMENSION="DIMENSIONLESS";}
        DATA(LSD_LCID2);
        SCALAR(LSDYNA_MAXPAR)           { DIMENSION="DIMENSIONLESS";}
        RADIO(LSDYNA_PENTOL)
        {
            ADD(1, "0: defaults to 2");
            ADD(2, "1: pinball edge-edge contact(not recommended");
            ADD(3, "2: assume planer segments (defaults)");
            ADD(4, "3: warped segment checking");
            ADD(5, "4: sliding option");
            ADD(6, "5: do option 3 and 4");
        }

        FLAG(LSD_DEPTHOpt);
        if(LSD_DEPTHOpt == 1)
        {
            DATA(LSD_LCID6);
        }
        if(LSD_DEPTHOpt == 0)
        {
            SCALAR(LSDYNA_DEPTH)                { DIMENSION="DIMENSIONLESS";}
        }

        FLAG(LSD_BSORTOpt);
        if(LSD_BSORTOpt == 1)
        {
            DATA(LSD_LCID);
        }
        if(LSD_BSORTOpt == 0)
        {
            SCALAR(LSDYNA_BSORT)                { DIMENSION="DIMENSIONLESS";}
        }

        SCALAR(LSDYNA_FRCFRQ)                   { DIMENSION="DIMENSIONLESS";}
        // end Optional Card A

        // start Optional Card B
        if( ContactOptionalCards == 1 || ContactOptionalCards == 2 || ContactOptionalCards == 3 || ContactOptionalCards == 4 || ContactOptionalCards == 5 )
        {
            SCALAR(LSD_PENMAX)                  { DIMENSION="DIMENSIONLESS";} //to be checked
            RADIO(LSD_THKOPT)
            {
                ADD(0, "0: default is taken from control card, *CONTROL_CONTACT");
                ADD(1, "1: thickness offsets are included");
                ADD(2, "2: thickness offsets are not included (old way)");
            }
            RADIO(LSD_SHLTHK)
            {
                ADD(0, "0: thickness is not considered");
                ADD(1, "1: thickness is considered but rigid bodies are excluded");
                ADD(2, "2: thickness is considered including rigid bodies");
            }
            RADIO(LSD_SNLOG)
            {
                ADD(0, "0: logic is enabled (default)");
                ADD(1, "1: logic is skipped");
            }
            RADIO(LSD_ISYM)
            {
                ADD(0, "0: off");
                ADD(1, "1: do not include faces with normal boundary constraints");
            }
            RADIO(LSD_I2D3D)
            {
                ADD(0, "0: search 2D elements (shells) before 3D elements (solids, thick shells) when locating segments");
                ADD(1, "1: search 3D (solids, thick shells) elements before 2D elements (shells) when locating segments");
            }
            SCALAR(LSD_SLDTHK)                      { DIMENSION="l";}
            SCALAR(LSD_SLDSTF)                      { DIMENSION="translation_stiffness";}
        }
        // end Optional Card B

        // start Optional Card C
        if( ContactOptionalCards == 2 || ContactOptionalCards == 3 || ContactOptionalCards == 4 || ContactOptionalCards == 5 )
        {
            FLAG(IGAP_Option_chkbox);
            if( ContactOptionalCards == 0)
            {
              RADIO(CONT_IGAP)
              {
                  ADD(1, "1: Apply method to improve convergence (default)");
                  ADD(2, "2: Do not apply method");
              }
            }
            if( ContactOptionalCards == 1)
            {
              SCALAR(CONT_IGAP)                     { DIMENSION="DIMENSIONLESS";}
            }

            FLAG(IGNORE_Option_chkbox);
            if( IGNORE_Option_chkbox == 0)
            {
              RADIO(CONT_IGNORE)
              {
                  ADD(0, "0: Take the default value from the fourth card of the CONTROL_CONTACT input");
                  ADD(1, "1: Allow initial penetrations to exist by tracking the initial penetrations");
                  ADD(2, "2: Allow initial penetrations to exist by tracking the initial penetrations. However, penetration warning messages are printed with the original coordinates and the recommended coordinates of each secondary node given");
                  ADD(3, "3: Applies only to the Mortar contact. With this option initial penetrations are eliminated between time zero and the time specified by MPAR1. Intended for small initial penetrations");
                  ADD(4, "4: Applies only to the Mortar contact. With this option initial penetrations are eliminated between time zero and the time specified by MPAR1. In addition a maximum penetration distance can be given as MPAR2, intended for large initial penetrations");
              }
            }
            if( IGNORE_Option_chkbox == 1)
            {
                SCALAR(CONT_IGNORE)                 { DIMENSION="DIMENSIONLESS";}
            }

            FLAG(CONT_DPFRAC_chkbox);
            if( CONT_DPFRAC_chkbox == 1 )
            {
                DATA(CONT_DPFRAC_entity);
            }
            if( CONT_DPFRAC_chkbox == 0 )
            {
                SCALAR(CONT_DPFRAC_field)           {DIMENSION="DIMENSIONLESS";}
            }

            FLAG(CONT_DTSIF_chkbox);
            if( CONT_DTSIF_chkbox == 1 )
            {
                DATA(CONT_DTSIF_entity);
            }
            if(CONT_DTSIF_chkbox == 0)
            {
                SCALAR(CONT_DTSIF_field)            {DIMENSION="t";}
            }

            SCALAR(CONT_FLANGL)                     {DIMENSION="a";}
            DATA(CONT_CID_RCF);
        }
        // end Optional Card C

        // start Optional Card D
        if( ContactOptionalCards == 3 || ContactOptionalCards == 4 || ContactOptionalCards == 5 )
        {
            RADIO(CONT_Q2TRI)
            {
                ADD(0, "0: Off (default)");
                ADD(1, "1: On for all secondary shell segments");
                ADD(2, "2: On for all main shell segments");
                ADD(3, "3: On for all shell segments");
                ADD(4, "4: On for all shell segments of material type 34");
            }
            SCALAR(CONT_DTPCHK)         {DIMENSION="DIMENSIONLESS";} //to be checked
            SCALAR(CONT_SFNBR)          {DIMENSION="DIMENSIONLESS";} //to be checked
            SCALAR(CONT_FNLSCL)         {DIMENSION="DIMENSIONLESS";}
            SCALAR(CONT_DNLSCL)         {DIMENSION="DIMENSIONLESS";}
            RADIO(CONT_TCSO)
            {
                ADD(0, "0: Off (default)");
                ADD(1, "1: Only consider segments in the contact definition");
            }
            RADIO(CONT_TIEDID)
            {
                ADD(0, "0: Off (default)");
                ADD(1, "1: On");
            }
            RADIO(CONT_SHLEDG)
            {
                ADD(0, "0: default to SHLEDG on *CONTROL_CONTACT");
                ADD(1, "1: Shell edges are assumed square and are flush with the nodes");
                ADD(2, "2: Shell edges are assumed round with radius equal to shell thickness");
            }
        }
        // end Optional Card D

        // start Optional Card E
        if(ContactOptionalCards == 4 || ContactOptionalCards == 5)
        {
            RADIO(CONT_SHAREC)
            {
                ADD(0, "0: Segments that share constraints not checked for contact");
                ADD(2, "1: Segments that share constraints are checked for contact");
            }
            RADIO(LSD_CPARM8_E)
            {
                ADD(0, "0: Spot weld (type 9) beams are not considered in the contact even if included on the secondary side of the contact");
                ADD(2, "2: Spot weld (type 9) beams are considered in the contact if included on the secondary side of the contact");
            }
            SCALAR(LSD_IPBACK_E);
            RADIO(LSD_SRNDE)
            {
                ADD(0, "0: Exterior shell edges have their usual treatment where the contact surface extends beyond the shell edge");
                ADD(1, "1: The contact surface is rounded at exterior shell edges but does not extend beyond the shell edges");
                ADD(2, "2: The shell edges are square");
            }
            SCALAR(LSD_FRICSF)         {DIMENSION="DIMENSIONLESS";} //to be checked
            SCALAR(LSD_ICOR)           {DIMENSION="DIMENSIONLESS";} //to be checked
            SCALAR(LSD_FTORQ)          {DIMENSION="DIMENSIONLESS";} //to be checked
            SCALAR(LSD_REGION)         {DIMENSION="DIMENSIONLESS";} //to be checked
        }
        // end Optional Card E

        // start Optional Card F
        if(ContactOptionalCards == 4 || ContactOptionalCards == 5)
        {
            RADIO(CONT_PSTIFF)
            {
                ADD(0, "0: Use the default as defined by PSTIFF on *CONTROL_ CONTACT");
                ADD(1, "1: Based on nodal masses");
                ADD(2, "2: Based on material density and segment dimensionss");
            }
            RADIO(LSD_IGNROFF)
            {
                ADD(0, "0: Use default thicknesses");
                ADD(1, "1: Ignore the secondary side thickness");
                ADD(2, "2: Ignore the main side thickness");
                ADD(3, "3: Ignore the thickness of both sidess");
            }
            SCALAR(LSD_FSTOL);
            RADIO(LSD_2DBINR)
            {
                ADD(0, "0: no 2d belt initially inside a retractor is involved");
                ADD(1, "1: 2d belts initially inside retractors are involved");
            }
            RADIO(LSD_SSFTYP)
            {
                ADD(0, "0: Use SSF from the secondary segment part");
                ADD(1, "1: Use the larger of the SSF values");
            }
        }
        // end Optional Card F
    }
}

//File format
FORMAT(Keyword971)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    //HEADER
    if(IOFLAG == 0)
    {
        if(mppOpt == 1)
        {
            ASSIGN(_dummy_Exp,_COMBINE(_dummy_Exp, "_MPP"),EXPORT);
        }
        if(LSD_TitleOpt == 1)
        {
            ASSIGN(_dummy_Exp,_COMBINE(_dummy_Exp, "_ID"),EXPORT);
        }
    }

    if(IOFLAG == 0)
    {
        HEADER("*CONTACT_TIEBREAK_NODES_ONLY%-s",_dummy_Exp);

        //Title Card
        COMMENT("$      CIDHEADING                                                               ");
        CARD("%10d%-70s", _ID_,displayname);
    }
    else
    {
        HEADER("*CONTACT_TIEBREAK_NODES_ONLY%80s",_dummy);

        ASSIGN(mppOpt,_FIND(_dummy,"_MPP"),IMPORT);
        ASSIGN(LSD_TitleOpt,_FIND(_dummy,"_ID"),IMPORT);
    }

    //MPP Cards
    if(mppOpt == 1)
    {
        //MPP Card 1
        COMMENT("$   IGNORE      BCKT    LCBCKT    NS2TRK   INITITR    PARMAX              CPARM8");
        CARD("%10d%10d%10d%10d%10d%10lg%10s%10d",TRACKPEN,BUCKET,LCBUCKET,NSEG2TRACK,INITITER,LSD_PARMAX,_BLANK_,LSD_CPARM8);

        CARD_PREREAD("%-1s", card1_opt);
        if(card1_opt == "&")
        {
            ASSIGN(Option1,1,IMPORT);
        }
        else
        {
            ASSIGN(Option1,0,IMPORT);
        }
        //MPP Card 2
        if(Option1 == 1)
        {
            COMMENT("$        &   CHKSEGS     PENSF   GRPABLE");
            CARD("&%9s%10d%10lg%10d",_BLANK_,LSD_CHKSEGS,LSD_PENSF,LSD_GRPABLE);
        }
    }

    //Mandatory Card 1
    COMMENT("$     SSID      MSID     SSTYP     MSTYP    SBOXID    MBOXID       SPR       MPR");
    CARD("%10d%10d%10d%10d%10d%10d%10d%10d",secondaryentityids,mainentityids,SSTYP,MSTYP,ContSecondaryBoxId,ContMainBoxId,LSDYNA_SPR,LSDYNA_MPR);
    if(SSTYP==0)
    {
        ASSIGN(secondaryentityids_type, /SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT);
    }
    else if(SSTYP==1)
    {
        ASSIGN(secondaryentityids_type, /SETS/SET_SHELL_IDPOOL, IMPORT);
    }
    else if(SSTYP==2)
    {
        ASSIGN(secondaryentityids_type, /SETS/SET_PART_IDPOOL, IMPORT);
    }
    else if(SSTYP==3)
    {
        ASSIGN(secondaryentityids_type, /COMPONENT, IMPORT);
    }
    else if(SSTYP==4)
    {
        ASSIGN(secondaryentityids_type, /SETS/SET_NODE_IDPOOL, IMPORT);
    }
    else if(SSTYP==5) /*ALL ?*/
    {
        ASSIGN(secondaryentityids_type, " ", IMPORT);
    }
    else if(SSTYP==6)
    {
        ASSIGN(secondaryentityids_type,/SETS/SET_PART_IDPOOL, IMPORT);
    }
    else if(SSTYP==7) /*TREE_BRANCH ?*/
    {
        ASSIGN(secondaryentityids_type," ", IMPORT);
    }
    if(MSTYP==0)
    {
        ASSIGN(mainentityids_type, /SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT);
    }
    else if(MSTYP==1)
    {
        ASSIGN(mainentityids_type, /SETS/SET_SHELL_IDPOOL, IMPORT);
    }
    else if(MSTYP==2)
    {
        ASSIGN(mainentityids_type, /SETS/SET_PART_IDPOOL, IMPORT);
    }
    else if(MSTYP==3)
    {
        ASSIGN(mainentityids_type, /COMPONENT, IMPORT);
    }
    else if(MSTYP==4)
    {
        ASSIGN(mainentityids_type, /SETS/SET_NODE_IDPOOL, IMPORT);
    }
    else if(MSTYP==5) /*ALL ?*/
    {
        ASSIGN(mainentityids_type, " ", IMPORT);
    }
    else if(MSTYP==6)
    {
        ASSIGN(mainentityids_type,/SETS/SET_PART_IDPOOL, IMPORT);
    }
    else if(MSTYP==7) /*TREE_BRANCH ?*/
    {
        ASSIGN(mainentityids_type," ", IMPORT);
    }
    //Mandatory Card 2
    COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
    CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg", LSDYNA_FS,LSDYNA_FD,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);

    //Mandatory Card 3
    COMMENT("$      SFS       SFM       SST       MST      SFST      SFMT       FSF       VSF");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg", LSDYNA_SFS,LSDYNA_SFM,LSDYNA_SST,LSDYNA_MST,LSDYNA_SFST,LSDYNA_SFMT,LSDYNA_FSF,LSDYNA_VSF);

    //Mandatory Card 4 - Tiebreak
    COMMENT("$     NFLF      SFLF       NEN       MES");
    CARD("%10lg%10lg%10lg%10lg", LSDYNA_NFLF, LSDYNA_SFLF, LSDYNA_NEN, LSDYNA_MES);

    //Optional Cards
    if(IOFLAG == 0 && Group_Option == 1)
    {
        //Optional Card A
        if(ContactOptionalCards >= 1)
        {
            COMMENT("$     SOFT    SOFSCL    LCIDAB    MAXPAR     SBOPT     DEPTH     BSORT    FRCFRQ");
            CARD("%10d%10lg%10d%10lg%10lg%10d%10d%10d", LSDYNA_SOFT,LSDYNA_SOFSCL,LSD_LCID2,LSDYNA_MAXPAR,LSDYNA_PENTOL,SCALAR_OR_OBJECT(LSD_DEPTHOpt,LSDYNA_DEPTH,LSD_LCID6),SCALAR_OR_OBJECT(LSD_BSORTOpt,LSDYNA_BSORT,LSD_LCID),LSDYNA_FRCFRQ);
        }
        //Optional Card B
        if(ContactOptionalCards >= 2)
        {
            COMMENT("$   PENMAX    THKOPT    SHLTHK     SNLOG      ISYM     I2D3D    SLDTHK    SLDSTF");
            CARD("%10lg%10d%10d%10d%10d%10d%10lg%10lg",LSD_PENMAX,LSD_THKOPT,LSD_SHLTHK,LSD_SNLOG,LSD_ISYM,LSD_I2D3D,LSD_SLDTHK,LSD_SLDSTF);
        }
        //Optional Card C
        if(ContactOptionalCards >= 3)
        {
            COMMENT("$     IGAP    IGNORE    DPRFAC    DTSTIF                        FLANGL   CID_RCF");
            CARD("%10d%10d%10lg%10lg%20s%10lg%10d", CONT_IGAP,CONT_IGNORE,SCALAR_OR_OBJECT(CONT_DPFRAC_chkbox,CONT_DPFRAC_field,CONT_DPFRAC_entity),SCALAR_OR_OBJECT(CONT_DTSIF_chkbox,CONT_DTSIF_field,CONT_DTSIF_entity),_BLANK_,CONT_FLANGL,CONT_CID_RCF);
        }
        //OPtional Card D
        if(ContactOptionalCards >= 4)
        {
            COMMENT("$    Q2TRI    DTPCHK     SFNBR    FNLSCL    DNLSCL      TCSO    TIEDID    SHLEDG");
            CARD("%10d%10lg%10lg%10lg%10lg%10d%10d%10d",CONT_Q2TRI,CONT_DTPCHK,CONT_SFNBR,CONT_FNLSCL,CONT_DNLSCL,CONT_TCSO,CONT_TIEDID,CONT_SHLEDG);
        }
        //Optional Card E
        if(ContactOptionalCards >= 5)
        {
            COMMENT("$   SHAREC");
            CARD("%10d", CONT_SHAREC);
        }
    }
    else //IMPORT
    {
        //Optional Card A
        FREE_CARD(Group_Option,"%10d%10lg%10d%10lg%10lg%10d%10d%10d", LSDYNA_SOFT,LSDYNA_SOFSCL,LSD_LCID2,LSDYNA_MAXPAR,LSDYNA_PENTOL,SCALAR_OR_OBJECT(LSD_DEPTHOpt,LSDYNA_DEPTH,LSD_LCID6),SCALAR_OR_OBJECT(LSD_BSORTOpt,LSDYNA_BSORT,LSD_LCID),LSDYNA_FRCFRQ);
        if(Group_Option == 1)
        {
            ASSIGN(ContactOptionalCards,1,IMPORT);
            //Optional Card B
            FREE_CARD(_existB,"%10lg%10d%10d%10d%10d%10d%10lg%10lg",LSD_PENMAX,LSD_THKOPT,LSD_SHLTHK,LSD_SNLOG,LSD_ISYM,LSD_I2D3D,LSD_SLDTHK,LSD_SLDSTF);
            if(_existB == 1)
            {
                ASSIGN(ContactOptionalCards,2,IMPORT);
                //Optional Card C
                FREE_CARD(_existC,"%10d%10d%10lg%10lg%20s%10lg%10d", CONT_IGAP,CONT_IGNORE,SCALAR_OR_OBJECT(CONT_DPFRAC_chkbox,CONT_DPFRAC_field,CONT_DPFRAC_entity),SCALAR_OR_OBJECT(CONT_DTSIF_chkbox,CONT_DTSIF_field,CONT_DTSIF_entity),_BLANK_,CONT_FLANGL,CONT_CID_RCF);

                if(_existC == 1)
                {
                    ASSIGN(ContactOptionalCards,3,IMPORT);
                    //Optional Card D
                    FREE_CARD(_existD,"%10d%10lg%10lg%10lg%10lg%10d%10d%10d",CONT_Q2TRI,CONT_DTPCHK,CONT_SFNBR,CONT_FNLSCL,CONT_DNLSCL,CONT_TCSO,CONT_TIEDID,CONT_SHLEDG);
                    if(_existD == 1)
                    {
                        ASSIGN(ContactOptionalCards,4,IMPORT);
                        //Optional Card E
                        FREE_CARD(_existE,"%10d", CONT_SHAREC);
                        if(_existE == 1)
                        {
                            ASSIGN(ContactOptionalCards,5,IMPORT);
                        }
                    }
                }
            }
        }
    }
}

FORMAT(Keyword971_R7.1)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    //HEADER
    if(IOFLAG == 0)
    {
        if(mppOpt == 1)
        {
            ASSIGN(_dummy_Exp,_COMBINE(_dummy_Exp, "_MPP"),EXPORT);
        }
        if(LSD_TitleOpt == 1)
        {
            ASSIGN(_dummy_Exp,_COMBINE(_dummy_Exp, "_ID"),EXPORT);
        }
    }

    if(IOFLAG == 0)
    {
        HEADER("*CONTACT_TIEBREAK_NODES_ONLY%-s",_dummy_Exp);

        //Title Card
        COMMENT("$      CIDHEADING                                                               ");
        CARD("%10d%-70s", _ID_,displayname);
    }
    else
    {
        HEADER("*CONTACT_TIEBREAK_NODES_ONLY%80s",_dummy);

        ASSIGN(mppOpt,_FIND(_dummy,"_MPP"),IMPORT);
        ASSIGN(LSD_TitleOpt,_FIND(_dummy,"_ID"),IMPORT);
    }

    //MPP Cards
    if(mppOpt == 1)
    {
        //MPP Card 1
        COMMENT("$   IGNORE      BCKT    LCBCKT    NS2TRK   INITITR    PARMAX              CPARM8");
        CARD("%10d%10d%10d%10d%10d%10lg%10s%10d",TRACKPEN,BUCKET,LCBUCKET,NSEG2TRACK,INITITER,LSD_PARMAX,_BLANK_,LSD_CPARM8);

        CARD_PREREAD("%-1s", card1_opt);
        if(card1_opt == "&")
        {
            ASSIGN(Option1,1,IMPORT);
        }
        else
        {
            ASSIGN(Option1,0,IMPORT);
        }
        //MPP Card 2
        if(Option1 == 1)
        {
            COMMENT("$        &   CHKSEGS     PENSF   GRPABLE");
            CARD("&%9s%10d%10lg%10d",_BLANK_,LSD_CHKSEGS,LSD_PENSF,LSD_GRPABLE);
        }
    }

    //Mandatory Card 1
    COMMENT("$     SSID      MSID     SSTYP     MSTYP    SBOXID    MBOXID       SPR       MPR");
    CARD("%10d%10d%10d%10d%10d%10d%10d%10d",secondaryentityids,mainentityids,SSTYP,MSTYP,ContSecondaryBoxId,ContMainBoxId,LSDYNA_SPR,LSDYNA_MPR);
    if(SSTYP==0)
    {
        ASSIGN(secondaryentityids_type, /SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT);
    }
    else if(SSTYP==1)
    {
        ASSIGN(secondaryentityids_type, /SETS/SET_SHELL_IDPOOL, IMPORT);
    }
    else if(SSTYP==2)
    {
        ASSIGN(secondaryentityids_type, /SETS/SET_PART_IDPOOL, IMPORT);
    }
    else if(SSTYP==3)
    {
        ASSIGN(secondaryentityids_type, /COMPONENT, IMPORT);
    }
    else if(SSTYP==4)
    {
        ASSIGN(secondaryentityids_type, /SETS/SET_NODE_IDPOOL, IMPORT);
    }
    else if(SSTYP==5) /*ALL ?*/
    {
        ASSIGN(secondaryentityids_type, " ", IMPORT);
    }
    else if(SSTYP==6)
    {
        ASSIGN(secondaryentityids_type,/SETS/SET_PART_IDPOOL, IMPORT);
    }
    else if(SSTYP==7) /*TREE_BRANCH ?*/
    {
        ASSIGN(secondaryentityids_type," ", IMPORT);
    }
    if(MSTYP==0)
    {
        ASSIGN(mainentityids_type, /SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT);
    }
    else if(MSTYP==1)
    {
        ASSIGN(mainentityids_type, /SETS/SET_SHELL_IDPOOL, IMPORT);
    }
    else if(MSTYP==2)
    {
        ASSIGN(mainentityids_type, /SETS/SET_PART_IDPOOL, IMPORT);
    }
    else if(MSTYP==3)
    {
        ASSIGN(mainentityids_type, /COMPONENT, IMPORT);
    }
    else if(MSTYP==4)
    {
        ASSIGN(mainentityids_type, /SETS/SET_NODE_IDPOOL, IMPORT);
    }
    else if(MSTYP==5) /*ALL ?*/
    {
        ASSIGN(mainentityids_type, " ", IMPORT);
    }
    else if(MSTYP==6)
    {
        ASSIGN(mainentityids_type,/SETS/SET_PART_IDPOOL, IMPORT);
    }
    else if(MSTYP==7) /*TREE_BRANCH ?*/
    {
        ASSIGN(mainentityids_type," ", IMPORT);
    }
    //Mandatory Card 2
    COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
    CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg", LSDYNA_FS,LSDYNA_FD,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);

    //Mandatory Card 3
    COMMENT("$      SFS       SFM       SST       MST      SFST      SFMT       FSF       VSF");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg", LSDYNA_SFS,LSDYNA_SFM,LSDYNA_SST,LSDYNA_MST,LSDYNA_SFST,LSDYNA_SFMT,LSDYNA_FSF,LSDYNA_VSF);

    //Mandatory Card 4 - Tiebreak
    COMMENT("$     NFLF      SFLF       NEN       MES");
    CARD("%10lg%10lg%10lg%10lg", LSDYNA_NFLF, LSDYNA_SFLF, LSDYNA_NEN, LSDYNA_MES);

    //Optional Cards
    if(IOFLAG == 0 && Group_Option == 1)
    {
        //Optional Card A
        if(ContactOptionalCards >= 1)
        {
            COMMENT("$     SOFT    SOFSCL    LCIDAB    MAXPAR     SBOPT     DEPTH     BSORT    FRCFRQ");
            CARD("%10d%10lg%10d%10lg%10lg%10d%10d%10d", LSDYNA_SOFT,LSDYNA_SOFSCL,LSD_LCID2,LSDYNA_MAXPAR,LSDYNA_PENTOL,SCALAR_OR_OBJECT(LSD_DEPTHOpt,LSDYNA_DEPTH,LSD_LCID6),SCALAR_OR_OBJECT(LSD_BSORTOpt,LSDYNA_BSORT,LSD_LCID),LSDYNA_FRCFRQ);
        }
        //Optional Card B
        if(ContactOptionalCards >= 2)
        {
            COMMENT("$   PENMAX    THKOPT    SHLTHK     SNLOG      ISYM     I2D3D    SLDTHK    SLDSTF");
            CARD("%10lg%10d%10d%10d%10d%10d%10lg%10lg",LSD_PENMAX,LSD_THKOPT,LSD_SHLTHK,LSD_SNLOG,LSD_ISYM,LSD_I2D3D,LSD_SLDTHK,LSD_SLDSTF);
        }
        //Optional Card C
        if(ContactOptionalCards >= 3)
        {
            COMMENT("$     IGAP    IGNORE    DPRFAC    DTSTIF                        FLANGL   CID_RCF");
            CARD("%10d%10d%10lg%10lg%20s%10lg%10d", CONT_IGAP,CONT_IGNORE,SCALAR_OR_OBJECT(CONT_DPFRAC_chkbox,CONT_DPFRAC_field,CONT_DPFRAC_entity),SCALAR_OR_OBJECT(CONT_DTSIF_chkbox,CONT_DTSIF_field,CONT_DTSIF_entity),_BLANK_,CONT_FLANGL,CONT_CID_RCF);
        }
        //OPtional Card D
        if(ContactOptionalCards >= 4)
        {
            COMMENT("$    Q2TRI    DTPCHK     SFNBR    FNLSCL    DNLSCL      TCSO    TIEDID    SHLEDG");
            CARD("%10d%10lg%10lg%10lg%10lg%10d%10d%10d",CONT_Q2TRI,CONT_DTPCHK,CONT_SFNBR,CONT_FNLSCL,CONT_DNLSCL,CONT_TCSO,CONT_TIEDID,CONT_SHLEDG);
        }
        //Optional Card E
        if(ContactOptionalCards >= 5)
        {
            COMMENT("$   SHAREC    CPARM8    IPBACK     SRNDE");
            CARD("%10d%10d%10d%10d", CONT_SHAREC,LSD_CPARM8_E,LSD_IPBACK_E,LSD_SRNDE);
        }
    }
    else //IMPORT
    {
        //Optional Card A
        FREE_CARD(Group_Option,"%10d%10lg%10d%10lg%10lg%10d%10d%10d", LSDYNA_SOFT,LSDYNA_SOFSCL,LSD_LCID2,LSDYNA_MAXPAR,LSDYNA_PENTOL,SCALAR_OR_OBJECT(LSD_DEPTHOpt,LSDYNA_DEPTH,LSD_LCID6),SCALAR_OR_OBJECT(LSD_BSORTOpt,LSDYNA_BSORT,LSD_LCID),LSDYNA_FRCFRQ);
        if(Group_Option == 1)
        {
            ASSIGN(ContactOptionalCards,1,IMPORT);
            //Optional Card B
            FREE_CARD(_existB,"%10lg%10d%10d%10d%10d%10d%10lg%10lg",LSD_PENMAX,LSD_THKOPT,LSD_SHLTHK,LSD_SNLOG,LSD_ISYM,LSD_I2D3D,LSD_SLDTHK,LSD_SLDSTF);
            if(_existB == 1)
            {
                ASSIGN(ContactOptionalCards,2,IMPORT);
                //Optional Card C
                FREE_CARD(_existC,"%10d%10d%10lg%10lg%20s%10lg%10d", CONT_IGAP,CONT_IGNORE,SCALAR_OR_OBJECT(CONT_DPFRAC_chkbox,CONT_DPFRAC_field,CONT_DPFRAC_entity),SCALAR_OR_OBJECT(CONT_DTSIF_chkbox,CONT_DTSIF_field,CONT_DTSIF_entity),_BLANK_,CONT_FLANGL,CONT_CID_RCF);

                if(_existC == 1)
                {
                    ASSIGN(ContactOptionalCards,3,IMPORT);
                    //Optional Card D
                    FREE_CARD(_existD,"%10d%10lg%10lg%10lg%10lg%10d%10d%10d",CONT_Q2TRI,CONT_DTPCHK,CONT_SFNBR,CONT_FNLSCL,CONT_DNLSCL,CONT_TCSO,CONT_TIEDID,CONT_SHLEDG);
                    if(_existD == 1)
                    {
                        ASSIGN(ContactOptionalCards,4,IMPORT);
                        //Optional Card E
                        FREE_CARD(_existE,"%10d%10d%10d%10d", CONT_SHAREC,LSD_CPARM8_E,LSD_IPBACK_E,LSD_SRNDE);
                        if(_existE == 1)
                        {
                            ASSIGN(ContactOptionalCards,5,IMPORT);
                        }
                    }
                }
            }
        }
    }
}

FORMAT(Keyword971_R8.0)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    //HEADER
    if(IOFLAG == 0)
    {
        if(mppOpt == 1)
        {
            ASSIGN(_dummy_Exp,_COMBINE(_dummy_Exp, "_MPP"),EXPORT);
        }
        if(LSD_TitleOpt == 1)
        {
            ASSIGN(_dummy_Exp,_COMBINE(_dummy_Exp, "_ID"),EXPORT);
        }
    }

    if(IOFLAG == 0)
    {
        HEADER("*CONTACT_TIEBREAK_NODES_ONLY%-s",_dummy_Exp);

        //Title Card
        COMMENT("$      CIDHEADING                                                               ");
        CARD("%10d%-70s", _ID_,displayname);
    }
    else
    {
        HEADER("*CONTACT_TIEBREAK_NODES_ONLY%80s",_dummy);

        ASSIGN(mppOpt,_FIND(_dummy,"_MPP"),IMPORT);
        ASSIGN(LSD_TitleOpt,_FIND(_dummy,"_ID"),IMPORT);
    }

    //MPP Cards
    if(mppOpt == 1)
    {
        //MPP Card 1
        COMMENT("$   IGNORE      BCKT    LCBCKT    NS2TRK   INITITR    PARMAX              CPARM8");
        CARD("%10d%10d%10d%10d%10d%10lg%10s%10d",TRACKPEN,BUCKET,LCBUCKET,NSEG2TRACK,INITITER,LSD_PARMAX,_BLANK_,LSD_CPARM8);

        CARD_PREREAD("%-1s", card1_opt);
        if(card1_opt == "&")
        {
            ASSIGN(Option1,1,IMPORT);
        }
        else
        {
            ASSIGN(Option1,0,IMPORT);
        }
        //MPP Card 2
        if(Option1 == 1)
        {
            COMMENT("$        &   CHKSEGS     PENSF   GRPABLE");
            CARD("&%9s%10d%10lg%10d",_BLANK_,LSD_CHKSEGS,LSD_PENSF,LSD_GRPABLE);
        }
    }

    //Mandatory Card 1
    COMMENT("$     SSID      MSID     SSTYP     MSTYP    SBOXID    MBOXID       SPR       MPR");
    CARD("%10d%10d%10d%10d%10d%10d%10d%10d",secondaryentityids,mainentityids,SSTYP,MSTYP,ContSecondaryBoxId,ContMainBoxId,LSDYNA_SPR,LSDYNA_MPR);
    if(SSTYP==0)
    {
        ASSIGN(secondaryentityids_type, /SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT);
    }
    else if(SSTYP==1)
    {
        ASSIGN(secondaryentityids_type, /SETS/SET_SHELL_IDPOOL, IMPORT);
    }
    else if(SSTYP==2)
    {
        ASSIGN(secondaryentityids_type, /SETS/SET_PART_IDPOOL, IMPORT);
    }
    else if(SSTYP==3)
    {
        ASSIGN(secondaryentityids_type, /COMPONENT, IMPORT);
    }
    else if(SSTYP==4)
    {
        ASSIGN(secondaryentityids_type, /SETS/SET_NODE_IDPOOL, IMPORT);
    }
    else if(SSTYP==5) /*ALL ?*/
    {
        ASSIGN(secondaryentityids_type, " ", IMPORT);
    }
    else if(SSTYP==6)
    {
        ASSIGN(secondaryentityids_type,/SETS/SET_PART_IDPOOL, IMPORT);
    }
    else if(SSTYP==7) /*TREE_BRANCH ?*/
    {
        ASSIGN(secondaryentityids_type," ", IMPORT);
    }
    if(MSTYP==0)
    {
        ASSIGN(mainentityids_type, /SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT);
    }
    else if(MSTYP==1)
    {
        ASSIGN(mainentityids_type, /SETS/SET_SHELL_IDPOOL, IMPORT);
    }
    else if(MSTYP==2)
    {
        ASSIGN(mainentityids_type, /SETS/SET_PART_IDPOOL, IMPORT);
    }
    else if(MSTYP==3)
    {
        ASSIGN(mainentityids_type, /COMPONENT, IMPORT);
    }
    else if(MSTYP==4)
    {
        ASSIGN(mainentityids_type, /SETS/SET_NODE_IDPOOL, IMPORT);
    }
    else if(MSTYP==5) /*ALL ?*/
    {
        ASSIGN(mainentityids_type, " ", IMPORT);
    }
    else if(MSTYP==6)
    {
        ASSIGN(mainentityids_type,/SETS/SET_PART_IDPOOL, IMPORT);
    }
    else if(MSTYP==7) /*TREE_BRANCH ?*/
    {
        ASSIGN(mainentityids_type," ", IMPORT);
    }
    //Mandatory Card 2
    COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
    CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg", LSDYNA_FS,LSDYNA_FD,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);

    //Mandatory Card 3
    COMMENT("$      SFS       SFM       SST       MST      SFST      SFMT       FSF       VSF");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg", LSDYNA_SFS,LSDYNA_SFM,LSDYNA_SST,LSDYNA_MST,LSDYNA_SFST,LSDYNA_SFMT,LSDYNA_FSF,LSDYNA_VSF);

    //Mandatory Card 4 - Tiebreak
    COMMENT("$     NFLF      SFLF       NEN       MES");
    CARD("%10lg%10lg%10lg%10lg", LSDYNA_NFLF, LSDYNA_SFLF, LSDYNA_NEN, LSDYNA_MES);

    //Optional Cards
    if(IOFLAG == 0 && Group_Option == 1)
    {
        //Optional Card A
        if(ContactOptionalCards >= 1)
        {
            COMMENT("$     SOFT    SOFSCL    LCIDAB    MAXPAR     SBOPT     DEPTH     BSORT    FRCFRQ");
            CARD("%10d%10lg%10d%10lg%10lg%10d%10d%10d", LSDYNA_SOFT,LSDYNA_SOFSCL,LSD_LCID2,LSDYNA_MAXPAR,LSDYNA_PENTOL,SCALAR_OR_OBJECT(LSD_DEPTHOpt,LSDYNA_DEPTH,LSD_LCID6),SCALAR_OR_OBJECT(LSD_BSORTOpt,LSDYNA_BSORT,LSD_LCID),LSDYNA_FRCFRQ);
        }
        //Optional Card B
        if(ContactOptionalCards >= 2)
        {
            COMMENT("$   PENMAX    THKOPT    SHLTHK     SNLOG      ISYM     I2D3D    SLDTHK    SLDSTF");
            CARD("%10lg%10d%10d%10d%10d%10d%10lg%10lg",LSD_PENMAX,LSD_THKOPT,LSD_SHLTHK,LSD_SNLOG,LSD_ISYM,LSD_I2D3D,LSD_SLDTHK,LSD_SLDSTF);
        }
        //Optional Card C
        if(ContactOptionalCards >= 3)
        {
            COMMENT("$     IGAP    IGNORE    DPRFAC    DTSTIF                        FLANGL   CID_RCF");
            CARD("%10d%10d%10lg%10lg%20s%10lg%10d", CONT_IGAP,CONT_IGNORE,SCALAR_OR_OBJECT(CONT_DPFRAC_chkbox,CONT_DPFRAC_field,CONT_DPFRAC_entity),SCALAR_OR_OBJECT(CONT_DTSIF_chkbox,CONT_DTSIF_field,CONT_DTSIF_entity),_BLANK_,CONT_FLANGL,CONT_CID_RCF);
        }
        //OPtional Card D
        if(ContactOptionalCards >= 4)
        {
            COMMENT("$    Q2TRI    DTPCHK     SFNBR    FNLSCL    DNLSCL      TCSO    TIEDID    SHLEDG");
            CARD("%10d%10lg%10lg%10lg%10lg%10d%10d%10d",CONT_Q2TRI,CONT_DTPCHK,CONT_SFNBR,CONT_FNLSCL,CONT_DNLSCL,CONT_TCSO,CONT_TIEDID,CONT_SHLEDG);
        }
        //Optional Card E
        if(ContactOptionalCards >= 5)
        {
            COMMENT("$   SHAREC    CPARM8    IPBACK     SRNDE                ICOR");
            CARD("%10d%10d%10d%10d%10s%10d", CONT_SHAREC,LSD_CPARM8_E,LSD_IPBACK_E,LSD_SRNDE,_BLANK_,LSD_ICOR);
        }
    }
    else //IMPORT
    {
        //Optional Card A
        FREE_CARD(Group_Option,"%10d%10lg%10d%10lg%10lg%10d%10d%10d", LSDYNA_SOFT,LSDYNA_SOFSCL,LSD_LCID2,LSDYNA_MAXPAR,LSDYNA_PENTOL,SCALAR_OR_OBJECT(LSD_DEPTHOpt,LSDYNA_DEPTH,LSD_LCID6),SCALAR_OR_OBJECT(LSD_BSORTOpt,LSDYNA_BSORT,LSD_LCID),LSDYNA_FRCFRQ);
        if(Group_Option == 1)
        {
            ASSIGN(ContactOptionalCards,1,IMPORT);
            //Optional Card B
            FREE_CARD(_existB,"%10lg%10d%10d%10d%10d%10d%10lg%10lg",LSD_PENMAX,LSD_THKOPT,LSD_SHLTHK,LSD_SNLOG,LSD_ISYM,LSD_I2D3D,LSD_SLDTHK,LSD_SLDSTF);
            if(_existB == 1)
            {
                ASSIGN(ContactOptionalCards,2,IMPORT);
                //Optional Card C
                FREE_CARD(_existC,"%10d%10d%10lg%10lg%20s%10lg%10d", CONT_IGAP,CONT_IGNORE,SCALAR_OR_OBJECT(CONT_DPFRAC_chkbox,CONT_DPFRAC_field,CONT_DPFRAC_entity),SCALAR_OR_OBJECT(CONT_DTSIF_chkbox,CONT_DTSIF_field,CONT_DTSIF_entity),_BLANK_,CONT_FLANGL,CONT_CID_RCF);

                if(_existC == 1)
                {
                    ASSIGN(ContactOptionalCards,3,IMPORT);
                    //Optional Card D
                    FREE_CARD(_existD,"%10d%10lg%10lg%10lg%10lg%10d%10d%10d",CONT_Q2TRI,CONT_DTPCHK,CONT_SFNBR,CONT_FNLSCL,CONT_DNLSCL,CONT_TCSO,CONT_TIEDID,CONT_SHLEDG);
                    if(_existD == 1)
                    {
                        ASSIGN(ContactOptionalCards,4,IMPORT);
                        //Optional Card E
                        FREE_CARD(_existE,"%10d%10d%10d%10d%10s%10d", CONT_SHAREC,LSD_CPARM8_E,LSD_IPBACK_E,LSD_SRNDE,_BLANK_,LSD_ICOR);
                        if(_existE == 1)
                        {
                            ASSIGN(ContactOptionalCards,5,IMPORT);
                        }
                    }
                }
            }
        }
    }
}

FORMAT(Keyword971_R9.3)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    //HEADER
    if(IOFLAG == 0)
    {
        if(mppOpt == 1)
        {
            ASSIGN(_dummy_Exp,_COMBINE(_dummy_Exp, "_MPP"),EXPORT);
        }
        if(LSD_TitleOpt == 1)
        {
            ASSIGN(_dummy_Exp,_COMBINE(_dummy_Exp, "_ID"),EXPORT);
        }
    }

    if(IOFLAG == 0)
    {
        HEADER("*CONTACT_TIEBREAK_NODES_ONLY%-s",_dummy_Exp);

        //Title Card
        COMMENT("$      CIDHEADING                                                               ");
        CARD("%10d%-70s", _ID_,displayname);
    }
    else
    {
        HEADER("*CONTACT_TIEBREAK_NODES_ONLY%80s",_dummy);

        ASSIGN(mppOpt,_FIND(_dummy,"_MPP"),IMPORT);
        ASSIGN(LSD_TitleOpt,_FIND(_dummy,"_ID"),IMPORT);
    }

    //MPP Cards
    if(mppOpt == 1)
    {
        //MPP Card 1
        COMMENT("$   IGNORE      BCKT    LCBCKT    NS2TRK   INITITR    PARMAX              CPARM8");
        CARD("%10d%10d%10d%10d%10d%10lg%10s%10d",TRACKPEN,BUCKET,LCBUCKET,NSEG2TRACK,INITITER,LSD_PARMAX,_BLANK_,LSD_CPARM8);

        CARD_PREREAD("%-1s", card1_opt);
        if(card1_opt == "&")
        {
            ASSIGN(Option1,1,IMPORT);
        }
        else
        {
            ASSIGN(Option1,0,IMPORT);
        }
        //MPP Card 2
        if(Option1 == 1)
        {
            COMMENT("$        &   CHKSEGS     PENSF   GRPABLE");
            CARD("&%9s%10d%10lg%10d",_BLANK_,LSD_CHKSEGS,LSD_PENSF,LSD_GRPABLE);
        }
    }

    //Mandatory Card 1
    COMMENT("$     SSID      MSID     SSTYP     MSTYP    SBOXID    MBOXID       SPR       MPR");
    CARD("%10d%10d%10d%10d%10d%10d%10d%10d",secondaryentityids,mainentityids,SSTYP,MSTYP,ContSecondaryBoxId,ContMainBoxId,LSDYNA_SPR,LSDYNA_MPR);
    if(SSTYP==0)
    {
        ASSIGN(secondaryentityids_type, /SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT);
    }
    else if(SSTYP==1)
    {
        ASSIGN(secondaryentityids_type, /SETS/SET_SHELL_IDPOOL, IMPORT);
    }
    else if(SSTYP==2)
    {
        ASSIGN(secondaryentityids_type, /SETS/SET_PART_IDPOOL, IMPORT);
    }
    else if(SSTYP==3)
    {
        ASSIGN(secondaryentityids_type, /COMPONENT, IMPORT);
    }
    else if(SSTYP==4)
    {
        ASSIGN(secondaryentityids_type, /SETS/SET_NODE_IDPOOL, IMPORT);
    }
    else if(SSTYP==5) /*ALL ?*/
    {
        ASSIGN(secondaryentityids_type, " ", IMPORT);
    }
    else if(SSTYP==6)
    {
        ASSIGN(secondaryentityids_type,/SETS/SET_PART_IDPOOL, IMPORT);
    }
    else if(SSTYP==7) /*TREE_BRANCH ?*/
    {
        ASSIGN(secondaryentityids_type," ", IMPORT);
    }
    if(MSTYP==0)
    {
        ASSIGN(mainentityids_type, /SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT);
    }
    else if(MSTYP==1)
    {
        ASSIGN(mainentityids_type, /SETS/SET_SHELL_IDPOOL, IMPORT);
    }
    else if(MSTYP==2)
    {
        ASSIGN(mainentityids_type, /SETS/SET_PART_IDPOOL, IMPORT);
    }
    else if(MSTYP==3)
    {
        ASSIGN(mainentityids_type, /COMPONENT, IMPORT);
    }
    else if(MSTYP==4)
    {
        ASSIGN(mainentityids_type, /SETS/SET_NODE_IDPOOL, IMPORT);
    }
    else if(MSTYP==5) /*ALL ?*/
    {
        ASSIGN(mainentityids_type, " ", IMPORT);
    }
    else if(MSTYP==6)
    {
        ASSIGN(mainentityids_type,/SETS/SET_PART_IDPOOL, IMPORT);
    }
    else if(MSTYP==7) /*TREE_BRANCH ?*/
    {
        ASSIGN(mainentityids_type," ", IMPORT);
    }
    //Mandatory Card 2
    COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
    CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg", LSDYNA_FS,LSDYNA_FD,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);

    //Mandatory Card 3
    COMMENT("$      SFS       SFM       SST       MST      SFST      SFMT       FSF       VSF");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg", LSDYNA_SFS,LSDYNA_SFM,LSDYNA_SST,LSDYNA_MST,LSDYNA_SFST,LSDYNA_SFMT,LSDYNA_FSF,LSDYNA_VSF);

    //Mandatory Card 4 - Tiebreak
    COMMENT("$     NFLF      SFLF       NEN       MES");
    CARD("%10lg%10lg%10lg%10lg", LSDYNA_NFLF, LSDYNA_SFLF, LSDYNA_NEN, LSDYNA_MES);

    //Optional Cards
    if(IOFLAG == 0 && Group_Option == 1)
    {
        //Optional Card A
        if(ContactOptionalCards >= 1)
        {
            COMMENT("$     SOFT    SOFSCL    LCIDAB    MAXPAR     SBOPT     DEPTH     BSORT    FRCFRQ");
            CARD("%10d%10lg%10d%10lg%10lg%10d%10d%10d", LSDYNA_SOFT,LSDYNA_SOFSCL,LSD_LCID2,LSDYNA_MAXPAR,LSDYNA_PENTOL,SCALAR_OR_OBJECT(LSD_DEPTHOpt,LSDYNA_DEPTH,LSD_LCID6),SCALAR_OR_OBJECT(LSD_BSORTOpt,LSDYNA_BSORT,LSD_LCID),LSDYNA_FRCFRQ);
        }
        //Optional Card B
        if(ContactOptionalCards >= 2)
        {
            COMMENT("$   PENMAX    THKOPT    SHLTHK     SNLOG      ISYM     I2D3D    SLDTHK    SLDSTF");
            CARD("%10lg%10d%10d%10d%10d%10d%10lg%10lg",LSD_PENMAX,LSD_THKOPT,LSD_SHLTHK,LSD_SNLOG,LSD_ISYM,LSD_I2D3D,LSD_SLDTHK,LSD_SLDSTF);
        }
        //Optional Card C
        if(ContactOptionalCards >= 3)
        {
            COMMENT("$     IGAP    IGNORE    DPRFAC    DTSTIF                        FLANGL   CID_RCF");
            CARD("%10d%10d%10lg%10lg%20s%10lg%10d", CONT_IGAP,CONT_IGNORE,SCALAR_OR_OBJECT(CONT_DPFRAC_chkbox,CONT_DPFRAC_field,CONT_DPFRAC_entity),SCALAR_OR_OBJECT(CONT_DTSIF_chkbox,CONT_DTSIF_field,CONT_DTSIF_entity),_BLANK_,CONT_FLANGL,CONT_CID_RCF);
        }
        //OPtional Card D
        if(ContactOptionalCards >= 4)
        {
            COMMENT("$    Q2TRI    DTPCHK     SFNBR    FNLSCL    DNLSCL      TCSO    TIEDID    SHLEDG");
            CARD("%10d%10lg%10lg%10lg%10lg%10d%10d%10d",CONT_Q2TRI,CONT_DTPCHK,CONT_SFNBR,CONT_FNLSCL,CONT_DNLSCL,CONT_TCSO,CONT_TIEDID,CONT_SHLEDG);
        }
        //Optional Card E
        if(ContactOptionalCards >= 5)
        {
            COMMENT("$   SHAREC    CPARM8    IPBACK     SRNDE    FRICSF      ICOR     FTORQ    REGION");
            CARD("%10d%10d%10d%10d%10lg%10d%10d%10d", CONT_SHAREC,LSD_CPARM8_E,LSD_IPBACK_E,LSD_SRNDE,LSD_FRICSF,LSD_ICOR,LSD_FTORQ,LSD_REGION);
        }
        //Optional Card F
        if(ContactOptionalCards >= 6)
        {
            COMMENT("$   PSTIFF   IGNROFF");
            CARD("%10d%10d",CONT_PSTIFF,LSD_IGNROFF);
        }
    }
    else //IMPORT
    {
        //Optional Card A
        FREE_CARD(Group_Option,"%10d%10lg%10d%10lg%10lg%10d%10d%10d", LSDYNA_SOFT,LSDYNA_SOFSCL,LSD_LCID2,LSDYNA_MAXPAR,LSDYNA_PENTOL,SCALAR_OR_OBJECT(LSD_DEPTHOpt,LSDYNA_DEPTH,LSD_LCID6),SCALAR_OR_OBJECT(LSD_BSORTOpt,LSDYNA_BSORT,LSD_LCID),LSDYNA_FRCFRQ);
        if(Group_Option == 1)
        {
            ASSIGN(ContactOptionalCards,1,IMPORT);
            //Optional Card B
            FREE_CARD(_existB,"%10lg%10d%10d%10d%10d%10d%10lg%10lg",LSD_PENMAX,LSD_THKOPT,LSD_SHLTHK,LSD_SNLOG,LSD_ISYM,LSD_I2D3D,LSD_SLDTHK,LSD_SLDSTF);
            if(_existB == 1)
            {
                ASSIGN(ContactOptionalCards,2,IMPORT);
                //Optional Card C
                FREE_CARD(_existC,"%10d%10d%10lg%10lg%20s%10lg%10d", CONT_IGAP,CONT_IGNORE,SCALAR_OR_OBJECT(CONT_DPFRAC_chkbox,CONT_DPFRAC_field,CONT_DPFRAC_entity),SCALAR_OR_OBJECT(CONT_DTSIF_chkbox,CONT_DTSIF_field,CONT_DTSIF_entity),_BLANK_,CONT_FLANGL,CONT_CID_RCF);

                if(_existC == 1)
                {
                    ASSIGN(ContactOptionalCards,3,IMPORT);
                    //Optional Card D
                    FREE_CARD(_existD,"%10d%10lg%10lg%10lg%10lg%10d%10d%10d",CONT_Q2TRI,CONT_DTPCHK,CONT_SFNBR,CONT_FNLSCL,CONT_DNLSCL,CONT_TCSO,CONT_TIEDID,CONT_SHLEDG);
                    if(_existD == 1)
                    {
                        ASSIGN(ContactOptionalCards,4,IMPORT);
                        //Optional Card E
                        FREE_CARD(_existE,"%10d%10d%10d%10d%10lg%10d%10d%10d", CONT_SHAREC,LSD_CPARM8_E,LSD_IPBACK_E,LSD_SRNDE,LSD_FRICSF,LSD_ICOR,LSD_FTORQ,LSD_REGION);
                        if(_existE == 1)
                        {
                            ASSIGN(ContactOptionalCards,5,IMPORT);
                            //Optional Card F
                            FREE_CARD(_existF,"%10d%10d",CONT_PSTIFF,LSD_IGNROFF);
                            if(_existF == 1)
                            {
                                 ASSIGN(ContactOptionalCards,6,IMPORT);
                            }
                        }
                    }
                }
            }
        }
    }
}

FORMAT(Keyword971_R11.1)
{
    ASSIGN(IOFLAG, 0, EXPORT);
    ASSIGN(IOFLAG, 1, IMPORT);

    //HEADER
    if(IOFLAG == 0)
    {
        if(mppOpt == 1)
        {
            ASSIGN(_dummy_Exp,_COMBINE(_dummy_Exp, "_MPP"),EXPORT);
        }
        if(LSD_TitleOpt == 1)
        {
            ASSIGN(_dummy_Exp,_COMBINE(_dummy_Exp, "_ID"),EXPORT);
        }
    }

    if(IOFLAG == 0)
    {
        HEADER("*CONTACT_TIEBREAK_NODES_ONLY%-s",_dummy_Exp);

        //Title Card
        COMMENT("$      CIDHEADING                                                               ");
        CARD("%10d%-70s", _ID_,displayname);
    }
    else
    {
        HEADER("*CONTACT_TIEBREAK_NODES_ONLY%80s",_dummy);

        ASSIGN(mppOpt,_FIND(_dummy,"_MPP"),IMPORT);
        ASSIGN(LSD_TitleOpt,_FIND(_dummy,"_ID"),IMPORT);
    }

    //MPP Cards
    if(mppOpt == 1)
    {
        //MPP Card 1
        COMMENT("$   IGNORE      BCKT    LCBCKT    NS2TRK   INITITR    PARMAX              CPARM8");
        CARD("%10d%10d%10d%10d%10d%10lg%10s%10d",TRACKPEN,BUCKET,LCBUCKET,NSEG2TRACK,INITITER,LSD_PARMAX,_BLANK_,LSD_CPARM8);

        CARD_PREREAD("%-1s", card1_opt);
        if(card1_opt == "&")
        {
            ASSIGN(Option1,1,IMPORT);
        }
        else
        {
            ASSIGN(Option1,0,IMPORT);
        }
        //MPP Card 2
        if(Option1 == 1)
        {
            COMMENT("$        &   CHKSEGS     PENSF   GRPABLE");
            CARD("&%9s%10d%10lg%10d",_BLANK_,LSD_CHKSEGS,LSD_PENSF,LSD_GRPABLE);
        }
    }

    //Mandatory Card 1
    COMMENT("$     SSID      MSID     SSTYP     MSTYP    SBOXID    MBOXID       SPR       MPR");
    CARD("%10d%10d%10d%10d%10d%10d%10d%10d",secondaryentityids,mainentityids,SSTYP,MSTYP,ContSecondaryBoxId,ContMainBoxId,LSDYNA_SPR,LSDYNA_MPR);
    if(SSTYP==0)
    {
        ASSIGN(secondaryentityids_type, /SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT);
    }
    else if(SSTYP==1)
    {
        ASSIGN(secondaryentityids_type, /SETS/SET_SHELL_IDPOOL, IMPORT);
    }
    else if(SSTYP==2)
    {
        ASSIGN(secondaryentityids_type, /SETS/SET_PART_IDPOOL, IMPORT);
    }
    else if(SSTYP==3)
    {
        ASSIGN(secondaryentityids_type, /COMPONENT, IMPORT);
    }
    else if(SSTYP==4)
    {
        ASSIGN(secondaryentityids_type, /SETS/SET_NODE_IDPOOL, IMPORT);
    }
    else if(SSTYP==5) /*ALL ?*/
    {
        ASSIGN(secondaryentityids_type, " ", IMPORT);
    }
    else if(SSTYP==6)
    {
        ASSIGN(secondaryentityids_type,/SETS/SET_PART_IDPOOL, IMPORT);
    }
    else if(SSTYP==7) /*TREE_BRANCH ?*/
    {
        ASSIGN(secondaryentityids_type," ", IMPORT);
    }
    if(MSTYP==0)
    {
        ASSIGN(mainentityids_type, /SETS/SET_SEGMENT_GENERAL_IDPOOL, IMPORT);
    }
    else if(MSTYP==1)
    {
        ASSIGN(mainentityids_type, /SETS/SET_SHELL_IDPOOL, IMPORT);
    }
    else if(MSTYP==2)
    {
        ASSIGN(mainentityids_type, /SETS/SET_PART_IDPOOL, IMPORT);
    }
    else if(MSTYP==3)
    {
        ASSIGN(mainentityids_type, /COMPONENT, IMPORT);
    }
    else if(MSTYP==4)
    {
        ASSIGN(mainentityids_type, /SETS/SET_NODE_IDPOOL, IMPORT);
    }
    else if(MSTYP==5) /*ALL ?*/
    {
        ASSIGN(mainentityids_type, " ", IMPORT);
    }
    else if(MSTYP==6)
    {
        ASSIGN(mainentityids_type,/SETS/SET_PART_IDPOOL, IMPORT);
    }
    else if(MSTYP==7) /*TREE_BRANCH ?*/
    {
        ASSIGN(mainentityids_type," ", IMPORT);
    }
    //Mandatory Card 2
    COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
    CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg", LSDYNA_FS,LSDYNA_FD,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);

    //Mandatory Card 3
    COMMENT("$      SFS       SFM       SST       MST      SFST      SFMT       FSF       VSF");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg", LSDYNA_SFS,LSDYNA_SFM,LSDYNA_SST,LSDYNA_MST,LSDYNA_SFST,LSDYNA_SFMT,LSDYNA_FSF,LSDYNA_VSF);

    //Mandatory Card 4 - Tiebreak
    COMMENT("$     NFLF      SFLF       NEN       MES");
    CARD("%10lg%10lg%10lg%10lg", LSDYNA_NFLF, LSDYNA_SFLF, LSDYNA_NEN, LSDYNA_MES);

    //Optional Cards
    if(IOFLAG == 0 && Group_Option == 1)
    {
        //Optional Card A
        if(ContactOptionalCards >= 1)
        {
            COMMENT("$     SOFT    SOFSCL    LCIDAB    MAXPAR     SBOPT     DEPTH     BSORT    FRCFRQ");
            CARD("%10d%10lg%10d%10lg%10lg%10d%10d%10d", LSDYNA_SOFT,LSDYNA_SOFSCL,LSD_LCID2,LSDYNA_MAXPAR,LSDYNA_PENTOL,SCALAR_OR_OBJECT(LSD_DEPTHOpt,LSDYNA_DEPTH,LSD_LCID6),SCALAR_OR_OBJECT(LSD_BSORTOpt,LSDYNA_BSORT,LSD_LCID),LSDYNA_FRCFRQ);
        }
        //Optional Card B
        if(ContactOptionalCards >= 2)
        {
            COMMENT("$   PENMAX    THKOPT    SHLTHK     SNLOG      ISYM     I2D3D    SLDTHK    SLDSTF");
            CARD("%10lg%10d%10d%10d%10d%10d%10lg%10lg",LSD_PENMAX,LSD_THKOPT,LSD_SHLTHK,LSD_SNLOG,LSD_ISYM,LSD_I2D3D,LSD_SLDTHK,LSD_SLDSTF);
        }
        //Optional Card C
        if(ContactOptionalCards >= 3)
        {
            COMMENT("$     IGAP    IGNORE    DPRFAC    DTSTIF                        FLANGL   CID_RCF");
            CARD("%10d%10d%10lg%10lg%20s%10lg%10d", CONT_IGAP,CONT_IGNORE,SCALAR_OR_OBJECT(CONT_DPFRAC_chkbox,CONT_DPFRAC_field,CONT_DPFRAC_entity),SCALAR_OR_OBJECT(CONT_DTSIF_chkbox,CONT_DTSIF_field,CONT_DTSIF_entity),_BLANK_,CONT_FLANGL,CONT_CID_RCF);
        }
        //OPtional Card D
        if(ContactOptionalCards >= 4)
        {
            COMMENT("$    Q2TRI    DTPCHK     SFNBR    FNLSCL    DNLSCL      TCSO    TIEDID    SHLEDG");
            CARD("%10d%10lg%10lg%10lg%10lg%10d%10d%10d",CONT_Q2TRI,CONT_DTPCHK,CONT_SFNBR,CONT_FNLSCL,CONT_DNLSCL,CONT_TCSO,CONT_TIEDID,CONT_SHLEDG);
        }
        //Optional Card E
        if(ContactOptionalCards >= 5)
        {
            COMMENT("$   SHAREC    CPARM8    IPBACK     SRNDE    FRICSF      ICOR     FTORQ    REGION");
            CARD("%10d%10d%10d%10d%10lg%10d%10d%10d", CONT_SHAREC,LSD_CPARM8_E,LSD_IPBACK_E,LSD_SRNDE,LSD_FRICSF,LSD_ICOR,LSD_FTORQ,LSD_REGION);
        }
        //Optional Card F
        if(ContactOptionalCards >= 6)
        {
            COMMENT("$   PSTIFF   IGNROFF               FSTOL    2DBINR    SSFTYP");
            CARD("%10d%10d%10s%10lg%10d%10d",CONT_PSTIFF,LSD_IGNROFF,_BLANK_,LSD_FSTOL,LSD_2DBINR,LSD_SSFTYP);
        }
    }
    else //IMPORT
    {
        //Optional Card A
        FREE_CARD(Group_Option,"%10d%10lg%10d%10lg%10lg%10d%10d%10d", LSDYNA_SOFT,LSDYNA_SOFSCL,LSD_LCID2,LSDYNA_MAXPAR,LSDYNA_PENTOL,SCALAR_OR_OBJECT(LSD_DEPTHOpt,LSDYNA_DEPTH,LSD_LCID6),SCALAR_OR_OBJECT(LSD_BSORTOpt,LSDYNA_BSORT,LSD_LCID),LSDYNA_FRCFRQ);
        if(Group_Option == 1)
        {
            ASSIGN(ContactOptionalCards,1,IMPORT);
            //Optional Card B
            FREE_CARD(_existB,"%10lg%10d%10d%10d%10d%10d%10lg%10lg",LSD_PENMAX,LSD_THKOPT,LSD_SHLTHK,LSD_SNLOG,LSD_ISYM,LSD_I2D3D,LSD_SLDTHK,LSD_SLDSTF);
            if(_existB == 1)
            {
                ASSIGN(ContactOptionalCards,2,IMPORT);
                //Optional Card C
                FREE_CARD(_existC,"%10d%10d%10lg%10lg%20s%10lg%10d", CONT_IGAP,CONT_IGNORE,SCALAR_OR_OBJECT(CONT_DPFRAC_chkbox,CONT_DPFRAC_field,CONT_DPFRAC_entity),SCALAR_OR_OBJECT(CONT_DTSIF_chkbox,CONT_DTSIF_field,CONT_DTSIF_entity),_BLANK_,CONT_FLANGL,CONT_CID_RCF);

                if(_existC == 1)
                {
                    ASSIGN(ContactOptionalCards,3,IMPORT);
                    //Optional Card D
                    FREE_CARD(_existD,"%10d%10lg%10lg%10lg%10lg%10d%10d%10d",CONT_Q2TRI,CONT_DTPCHK,CONT_SFNBR,CONT_FNLSCL,CONT_DNLSCL,CONT_TCSO,CONT_TIEDID,CONT_SHLEDG);
                    if(_existD == 1)
                    {
                        ASSIGN(ContactOptionalCards,4,IMPORT);
                        //Optional Card E
                        FREE_CARD(_existE,"%10d%10d%10d%10d%10lg%10d%10d%10d", CONT_SHAREC,LSD_CPARM8_E,LSD_IPBACK_E,LSD_SRNDE,LSD_FRICSF,LSD_ICOR,LSD_FTORQ,LSD_REGION);
                        if(_existE == 1)
                        {
                            ASSIGN(ContactOptionalCards,5,IMPORT);
                            //Optional Card F
                            FREE_CARD(_existF,"%10d%10d%10s%10lg%10d%10d",CONT_PSTIFF,LSD_IGNROFF,_BLANK_,LSD_FSTOL,LSD_2DBINR,LSD_SSFTYP);
                            if(_existF == 1)
                            {
                                 ASSIGN(ContactOptionalCards,6,IMPORT);
                            }
                        }
                    }
                }
            }
        }
    }
}