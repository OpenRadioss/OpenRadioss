//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// *CONTACT_AUTOMATIC_SURFACE_TO_SURFACE_OPTIONS
//

ATTRIBUTES(COMMON)
{
    // INPUT ATTRIBUTES
    TITLE                           = VALUE(STRING,"");
    // mppOption
    TRACKPEN                        = VALUE(INT,"By setting this variable to 1, the ignore initial penetrations option is turned on for this contact");
    BUCKET                          = VALUE(INT,"Bucket sort frequency");
    LCBUCKET                        = VALUE(INT,"Load curve for bucket sort frequency");
    NSEG2TRACK                      = VALUE(INT,"Number of potential contacts to track for each slave node");
    INITITER                        = VALUE(INT,"Number of iterations to perform when trying to eliminate initial penetrations");
    LSD_PARMAX                      = VALUE(FLOAT,"The parametric extension distance for contact segments");
    LSD_CPARM8                      = VALUE(INT,"Flag for CONTACT_AUTOMATIC_GENERAL behavior");
    LSD_CHKSEGS                     = VALUE(INT,"If this value is non-zero, then the node to surface and surface to surface contacts will perform a special check at time 0 for elements that are inverted (or nearly so), and remove them from contact");
    LSD_PENSF                       = VALUE(FLOAT,"This option is used together with IGNORE for 3D forging problems. If non-zero, the IGNORED penetration distance is multiplied by this value each cycle, effectively pushing the slave node back out to the surface");
    LSD_GRPABLE                     = VALUE(INT,"Set to 1 to invoke an alternate MPP communication algorithm for various single surface (including AUTOMATIC_GENERAL), nodes_to_surface, and surface_to_surface contacts");
    //Cards
    masterentityids                 = VALUE(MULTIOBJECT,"Master segment set ID, node set ID, part set ID, part ID, or shell element set ID") { SUBTYPES = ( /COMPONENT , /SETS , /ELEMS ) ; }
    slaveentityids                  = VALUE(MULTIOBJECT,"Slave segment set ID, node set ID, part set ID, part ID, or shell element set ID, see *SET_SEGMENT, *SET_NODE_OPTION, *PART, *SET_PART or *SET_SHELL_OPTION") { SUBTYPES = ( /COMPONENT , /SETS , /ELEMS ) ; }
    SSTYP                           = VALUE(INT,"ID type of SSID");
    MSTYP                           = VALUE(INT,"ID type of MSID");
    ContSlaveBoxId                  = VALUE(BLOCK,"Include in contact definition only those slave nodes/segments within box SBOXID (corresponding to BOXID in *DEFINE_BOX), or if SBOXID is negative, only those slave nodes/segments within contact volume |SBOXID|");
    ContMasterBoxId                 = VALUE(BLOCK,"Include in contact definition only those master segments within box MBOXID (corresponding to BOXID in *DEFINE_BOX), or if MBOXID is negative, only those master segments within contact volume |MBOXID|");
    LSDYNA_SPR                      = VALUE(INT,"Include the slave side in the *DATABASE_NCFORC and the *DATABASE_BINARY_INTFOR interface force files, and optionally in the dynain file for wear:");
    LSDYNA_MPR                      = VALUE(INT,"Include the master side in the *DATABASE_NCFORC and the *DATABASE_BINARY_INTFOR interface force files, and optionally in the dynain file for wear");
    LSDYNA_FS                       = VALUE(FLOAT,"Static coefficient of friction");
    LSDYNA_FD_DefineFriction        = VALUE(FUNCT,"Table for function of Coefficient of Friction");
    LSDYNA_FD                       = VALUE(FLOAT,"Dynamic coefficient of friction");
    LSDYNA_TB_DefineFriction        = VALUE(CURVE,"Curve of friction coefficient vs. relative velocity");
    LSDYNA_DC                       = VALUE(FLOAT,"Exponential decay coefficient");
    LSDYNA_VC                       = VALUE(FLOAT,"Coefficient for viscous friction");
    LSDYNA_VDC                      = VALUE(FLOAT,"Viscous damping coefficient in percent of critical or the coefficient of restitution expressed as percentage");
    LSDYNA_PENCHK                   = VALUE(INT,"Small penetration in contact search option");
    LSDYNA_BT                       = VALUE(FLOAT,"Birth time (contact surface becomes active at this time)");
    LSDYNA_DT                       = VALUE(FLOAT,"Death time (contact surface is deactivated at this time)");
    LSDYNA_SFS                      = VALUE(FLOAT,"Scale factor on default slave penalty stiffness when SOFT = 0 or SOFT = 2");
    LSDYNA_SFM                      = VALUE(FLOAT,"Scale factor on default master penalty stiffness when SOFT = 0 or SOFT = 2");
    LSDYNA_SST                      = VALUE(FLOAT,"Optional contact thickness for slave surface");
    LSDYNA_MST                      = VALUE(FLOAT,"Optional contact thickness for master surface");
    LSDYNA_SFST                     = VALUE(FLOAT,"Scale factor applied to contact thickness of slave surface");
    LSDYNA_SFMT                     = VALUE(FLOAT,"Scale factor applied to contact thickness of master surface");
    LSDYNA_FSF                      = VALUE(FLOAT,"Coulomb Friction scale factor");
    LSDYNA_VSF                      = VALUE(FLOAT,"Viscous friction scale factor");
    // Card 4: AUTOMATIC_SURFACE_TIEBREAK
    LSD_RESPONSE                    = VALUE(INT,"Response");
    LSDYNA_NFLS                     = VALUE(FLOAT,"Normal failure stress for OPTION = 2, 3, 4, 6, 7, 8, 9, 10 or 11");
    LSDYNA_SFLS                     = VALUE(FLOAT,"Shear failure stress for OPTION = 2, 3, 6, 7, 8, 9, 10 or 11");
    LSD_PARAM                       = VALUE(FLOAT,"For OPTION = 2, setting PARAM = 1 causes the shell thickness offsets to be ignored. For OPTION = 4, setting PARAM = 1 causes SFLS to be a frictional stress limit. For OPTION = 6 or 8, PARAM is the critical distance, CCRIT, at which the interface failure is complete. For OPTION = 7 or 10 PARAM is the friction angle in degrees. For OPTION = 9 or 11, it is the exponent in the damage model");
    LSD_ERATEN                      = VALUE(FLOAT,"For OPTION = 7, 9, 10, 11 only. Normal energy release rate (stress  length) used in damage calculation, see Lemmen and Meijer [2001]");
    LSD_ERATES                      = VALUE(FLOAT,"For OPTION = 7, 9, 10, 11 only. Shear energy release rate (stress  length) used in damage calculation, see Lemmen and Meijer [2001]");
    LSD_CT2CN                       = VALUE(FLOAT,"The ratio of the tangential stiffness to the normal stiffness for OPTION = 9, 11, 13, and 14");
    LSD_CN                          = VALUE(FLOAT,"Normal stiffness (stress/length) for OPTION = 9, 11, 13, 14, and OPTION = 7 for the MORTAR option only");
    LSD_DMP_1                       = VALUE(FLOAT,"Mode 1 damping force per unit volume per unit area");
    LSD_DMP_2                       = VALUE(FLOAT,"Mode 2 damping force per unit volume per unit area");
    LSD_DMP_3                       = VALUE(FLOAT,"Mode 3 damping force per unit volume per unit area");
    // Options 13/14 Cards
    LSD_MAT240_G1C_0                = VALUE(FLOAT,"GT.0.0: Energy release rate Gic in Mode I. LE.0.0: Lower bound value of rate-dependent Gic");
    LSD_MAT240_G1C_0_CURVEID        = VALUE(CURVE,"Curve ID for THERMAL keyword option");
    LSD_MAT240_G1C_INF              = VALUE(FLOAT,"Upper bound value of rate-dependent Gic");
    LSD_MAT240_EDOT_G1              = VALUE(FLOAT,"Equivalent strain rate at yield initiation to describe the rate dependency of Gic");
    LSD_MAT240_T0                   = VALUE(FLOAT,"GT.0.0: Yield stress in Mode I. LT.0.0: Rate-dependency is considered, Parameter T0");
    LSD_MAT240_T0_CURVEID           = VALUE(CURVE, "Curve ID for Thermal keyword option");
    LSD_MAT240_T1                   = VALUE(FLOAT,"Parameter T1");
    LSD_MAT240_EDOT_T               = VALUE(FLOAT,"Equivalent strain rate at yield initiation to describe the rate dependency of the yield stress in Mode I");
    LSD_MAT240_FG1                  = VALUE(FLOAT,"Parameter fG1 to describe the tri-linear shape of the tractionseparation law in Mode I, see remarks");
    LSD_MAT240_FG1_CURVEID          = VALUE(CURVE,"Curve ID for THERMAL keyword option");
    LSD_MAT240_LCG1C                = VALUE(CURVE,"Load curve ID which defines fracture energy GIC as a function of cohesive element thickness");
    LSD_MAT240_G2C_0                = VALUE(FLOAT,"GT.0.0: Energy release rate GIIC in Mode II. LE.0.0: Lower bound value of rate-dependent GIIC");
    LSD_MAT240_G2C_0_CURVEID        = VALUE(CURVE,"Curve ID for THERMAL keyword option");
    LSD_MAT240_G2C_INF              = VALUE(FLOAT,"Upper bound value of GIIC");
    LSD_MAT240_EDOT_G2              = VALUE(FLOAT,"Equivalent strain rate at yield initiation to describe the rate dependency of GIIC");
    LSD_MAT240_S0                   = VALUE(FLOAT,"GT.0.0: Yield stress in Mode II. LT.0.0: Rate-dependency is considered, Parameter S0");
    LSD_MAT240_S0_CURVEID           = VALUE(CURVE,"Curve ID for Thermal keyword option");
    LSD_MAT240_S1                   = VALUE(FLOAT,"Parameter S1");
    LSD_MAT240_EDOT_S               = VALUE(FLOAT,"Equivalent strain rate at yield initiation to describe the rate dependency of the yield stress in Mode II");
    LSD_MAT240_FG2                  = VALUE(FLOAT,"Parameter fG2 to describe the tri-linear shape of the tractionseparation law in Mode II. Curve ID for THERMAL keyword option");
    LSD_MAT240_FG2_CURVEID          = VALUE(CURVE,  "Parameter to describe the tri-linear shape.Curve ID for Thermal keyword option");
    LSD_MAT240_LCG2C                = VALUE(CURVE,"Load curve ID which defines fracture energy GIIC as a function of cohesive element thickness");
    // Card 4: AUTOMATIC_SURFACE_TO_SURFACE_COMPOSITE
    CONTROL_TFAIL                   = VALUE(FLOAT,"Tensile traction SIGMAf required for failure");
    CONTROL_MODEL                   = VALUE(INT,"Model for shear response");
    CONTROL_CIDTAU                  = VALUE(CURVE,"Curve ID for the coefficient of friction MU(H) as a function of the Hershey number H");
    CONTROL_CIDNU                   = VALUE(CURVE,"Curve ID for the viscosity ETA(T) as a function of temperature T");
    CONTROL_D                       = VALUE(FLOAT,"Composite film thickness");
    // Card 4: AUTOMATIC_SURFACE_TO_SURFACE_TIED_WELD, AUTOMATIC_SURFACE_TO_SURFACE_MORTAR_TIED_WELD
    CONTROL_TEMP                    = VALUE(FLOAT,"Minimum temperature required on both surfaces for tying");
    CONTROL_CLOSE                   = VALUE(FLOAT,"Surfaces closer than CLOSE are tied");
    CONTROL_HCLOSE                  = VALUE(FLOAT,"Thermal contact conductivity for a tied interface, in case of using the option THERMAL in the contact");
    //THERMAL CARD 1
    CF                              = VALUE(FLOAT,"Thermal conductivity of fluid between the contact surfaces");
    FRAD                            = VALUE(FLOAT,"Radiation factor between the contact surfaces");
    HTC                             = VALUE(FLOAT,"Heat transfer conductance for closed gaps");
    GCRIT                           = VALUE(FLOAT,"Minimum gap, l min, use the heat transfer conductance defined (H0) for gap thicknesses less than this value");
    GMAX                            = VALUE(FLOAT,"No thermal contact if gap is greater than this value (l max).");
    CD_FACT                         = VALUE(FLOAT,"Fraction,f, of sliding friction energy partitioned to the slave surface. Energy partitioned to the master surface is (1 - f)");
    LSD_BC_FLAG                     = VALUE(INT,"Thermal boundary condition flag");
    LSD_ALGO                        = VALUE(INT,"Contact algorithm type");
    //THERMAL CARD 2
    LSD_LCFST                       = VALUE(CURVE,"Load curve number for static coefficient of friction as a function of temperature");
    LSD_LCFDT                       = VALUE(CURVE,"Load curve number for dynamic coefficient of friction as a function of temperature");
    //LSD_FORMULA                   = VALUE(INT,"Formula that defines the contact heat conductance as a function of temperature and pressure");
    LSD_FORMULA                     = VALUE(INT, "Formula that defines the contact heat conductance as a function of temperature and pressure");
    LSD_a                           = VALUE(CURVE,"Load curve number for the a coefficient used in the formula");
    LSD_b                           = VALUE(CURVE,"Load curve number for the b coefficient used in the formula");
    LSD_c                           = VALUE(CURVE,"Load curve number for the c coefficient used in the formula");
    LSD_d                           = VALUE(CURVE,"Load curve number for the d coefficient used in the formula");
    LSD_LCH                         = VALUE(CURVE,"Load curve number for h");
    _dummy_FORMULA                  = SIZE("_dummy_FORMULA");
    LSD_UC                          = ARRAY[_dummy_FORMULA](FLOAT,"UC");
    // ORTHO FRICTION Card 1
    LSD_FS1_S                       = VALUE(FLOAT,"Static coefficient of friction in the local n orthotropic direction for the slave (S) surface");
    LSD_FD1_S                       = VALUE(FLOAT,"Dynamic coefficient of friction in the local n orthotropic direction");
    LSD_DC1_S                       = VALUE(FLOAT,"Exponential decay coefficient for the local n direction");
    LSD_VC1_S                       = VALUE(FLOAT,"Coefficient for viscous friction in the local n direction");
    LSD_LC1_S                       = VALUE(CURVE,"The table ID of a two dimensional table, see *DEFINE_TABLE or *DEFINE_TABLE_2D, giving the friction coefficient in the local n direction as a function of the relative velocity and interface pressure");
    LSD_OACS_S                      = VALUE(INT,"If the default value, 0, is active, the frictional forces acting on a node sliding on a segment are based on the local directions of the segment. If OACS is set to unity, 1, the frictional forces acting on a node sliding on a segment are based on the local directions of the sliding node");
    LSD_LCFS                        = VALUE(CURVE,"Optional load curve that gives the coefficient of friction as a function of the direction of relative motion, as measured in degrees from the first orthotropic direction");
    LSD_LCPS                        = VALUE(CURVE,"Optional load curve that gives a scale factor for the friction coefficient as a function of interface pressure");
    // ORTHO FRICTION Card 2
    LSD_FS2_S                       = VALUE(FLOAT,"Static coefficient of friction in the local n orthotropic direction for the slave (S) surface");
    LSD_FD2_S                       = VALUE(FLOAT,"Dynamic coefficient of friction in the local n orthotropic direction");
    LSD_DC2_S                       = VALUE(FLOAT,"Exponential decay coefficient for the local n direction");
    LSD_VC2_S                       = VALUE(FLOAT,"Coefficient for viscous friction in the local n direction");
    LSD_LC2_S                       = VALUE(CURVE,"The table ID of a two dimensional table, see *DEFINE_TABLE or *DEFINE_TABLE_2D, giving the friction coefficient in the local n direction as a function of the relative velocity and interface pressure");
    // ORTHO FRICTION Card 3
    LSD_FS1_M                       = VALUE(FLOAT,"Static coefficient of friction in the local n orthotropic direction for the master (M) surface");
    LSD_FD1_M                       = VALUE(FLOAT,"Dynamic coefficient of friction in the local n orthotropic direction");
    LSD_DC1_M                       = VALUE(FLOAT,"Exponential decay coefficient for the local n direction");
    LSD_VC1_M                       = VALUE(FLOAT,"Coefficient for viscous friction in the local n direction");
    LSD_LC1_M                       = VALUE(CURVE,"The table ID of a two dimensional table, see *DEFINE_TABLE or *DEFINE_TABLE_2D, giving the friction coefficient in the local n direction as a function of the relative velocity and interface pressure");
    LSD_OACS_M                      = VALUE(INT,"If the default value, 0, is active, the frictional forces acting on a node sliding on a segment are based on the local directions of the segment. If OACS is set to unity, 1, the frictional forces acting on a node sliding on a segment are based on the local directions of the sliding node");
    LSD_LCFM                        = VALUE(CURVE,"Optional load curve that gives the coefficient of friction as a function of the direction of relative motion, as measured in degrees from the first orthotropic direction");
    LSD_LCPM                        = VALUE(CURVE,"Optional load curve that gives a scale factor for the friction coefficient as a function of interface pressure");
    // ORTHO FRICTION Card 4
    LSD_FS2_M                       = VALUE(FLOAT,"Static coefficient of friction in the local n orthotropic direction for the master (M) surface");
    LSD_FD2_M                       = VALUE(FLOAT,"Dynamic coefficient of friction in the local n orthotropic direction");
    LSD_DC2_M                       = VALUE(FLOAT,"Exponential decay coefficient for the local n direction");
    LSD_VC2_M                       = VALUE(FLOAT,"Coefficient for viscous friction in the local n direction");
    LSD_LC2_M                       = VALUE(CURVE,"The table ID of a two dimensional table, see *DEFINE_TABLE or *DEFINE_TABLE_2D, giving the friction coefficient in the local n direction as a function of the relative velocity and interface pressure");
    // Additional Cards: Optional Card A
    LSDYNA_SOFT                     = VALUE(INT,"Soft constraint option");
    LSDYNA_SOFSCL                   = VALUE(FLOAT,"Scale factor for constraint forces of soft constraint option");
    LSD_LCID2                       = VALUE(CURVE,"Load curve ID defining airbag thickness as a function of time for type a13 contact (*CONTACT_AIRBAG_SINGLE_SURFACE)");
    LSDYNA_MAXPAR                   = VALUE(FLOAT,"Maximum parametric coordinate in segment search");
    LSDYNA_PENTOL                   = VALUE(FLOAT,"Segment-based contact options");
    LSDYNA_DEPTH                    = VALUE(INT,"Search depth in automatic contact, check for nodal penetration through the closest contact segments");
    LSD_LCID6                       = VALUE(CURVE,"is the load curve ID defining searching depth versus time");
    LSDYNA_BSORT                    = VALUE(INT,"Number of cycles between bucket sorts");
    LSD_LCID                        = VALUE(CURVE, "load curve ID defining bucket sorting frequency versus time");
    LSDYNA_FRCFRQ                   = VALUE(INT,"Number of cycles between contact force updates for penalty contact formulations");
    // Additional Cards: Optional Card B
    LSD_PENMAX                      = VALUE(FLOAT,"Maximum penetration distance");
    LSD_THKOPT                      = VALUE(INT,"Thickness option");
    LSD_SHLTHK                      = VALUE(INT,"Shell thickness option");
    LSD_SNLOG                       = VALUE(INT,"Disable shooting node logic in thickness offset contact");
    LSD_ISYM                        = VALUE(INT,"Symmetry plane option");
    LSD_I2D3D                       = VALUE(INT,"Segment searching option");
    LSD_SLDTHK                      = VALUE(FLOAT,"Optional solid element thickness");
    LSD_SLDSTF                      = VALUE(FLOAT,"Optional solid element stiffness");
    // Additional Cards: Optional Card C
    CONT_IGAP                       = VALUE(INT,"For Mortar contacts, IGAP is used to progressively increase contact stiffness for large penetrations. For other contacts, IGAP can be used to improve implicit convergence");
    CONT_IGNORE                     = VALUE(INT,"Ignore initial penetrations in the *CONTACT_AUTOMATIC options");
    CONT_DPFRAC_field               = VALUE(FLOAT,"Depth of penetration reduction factor");
    CONT_DPFRAC_entity              = VALUE(CURVE,"is the load curve ID defining DPRFAC versus time");
    CONT_DTSIF_field                = VALUE(FLOAT,"Time step used in stiffness calculation for SOFT = 1 and SOFT = 2 contact");
    CONT_DTSIF_entity               = VALUE(CURVE,"is the ID of a curve that defines DTSTIF vs. time");
    CONT_FLANGL                     = VALUE(FLOAT,"Angle tolerance in radians for feature lines option in smooth contact");
    CONT_CID_RCF                    = VALUE(SYSTEM,"Coordinate system ID to output rcforc force resultants and ncforc data in a local system");
    // Additional Cards: Optional Card D
    CONT_Q2TRI                      = VALUE(INT,"Option to split quadrilateral contacts segments into two triangles");
    CONT_DTPCHK                     = VALUE(FLOAT,"Time interval between shell penetration reports");
    CONT_SFNBR                      = VALUE(FLOAT,"Scale factor for neighbor segment contact");
    CONT_FNLSCL                     = VALUE(FLOAT,"Scale factor for nonlinear force scaling");
    CONT_DNLSCL                     = VALUE(FLOAT,"Distance factor for nonlinear force scaling");
    CONT_TCSO                       = VALUE(INT,"Option to consider only contact segments (not all attached elements) when computing the contact thickness for a node or a segment");
    CONT_TIEDID                     = VALUE(INT,"Incremental displacement update for tied contacts");
    CONT_SHLEDG                     = VALUE(INT,"Flag for assuming edge shape for shells when measuring penetration");
    // Additional Cards: Optional Card E
    CONT_SHAREC                     = VALUE(INT,"Shared constraint flag (only available for segment based contact)");
    LSD_CPARM8_E                    = VALUE(INT,"This variable is similar to CPARM8 in *CONTACT_MPP but applies to SMP and not to MPP");
    LSD_IPBACK_E                    = VALUE(INT,"If set to a nonzero value, creates a backup penalty tied contact for this interface. This option applies to constrained tied contacts only");
    LSD_SRNDE                       = VALUE(INT,"Flag for non-extended exterior shell edges");
    LSD_FRICSF                      = VALUE(INT,"Scale factor for frictional stiffness");
    LSD_ICOR                        = VALUE(INT,"If set to a nonzero value, VDC is the coefficient of restitution expressed as a percentage");
    LSD_FTORQ                       = VALUE(INT,"If set to 1, a torsional force is computed in the beam to beam portion of contact type AUTOMATIC_GENERAL, which balances the torque produced due to friction");
    LSD_REGION                      = VALUE(INT,"The ID of a *DEFINE_REGION which will delimit the volume of space where this contact is active");
    // Additional Cards: Optional Card F
    CONT_PSTIFF                     = VALUE(INT,"Flag to choose the method for calculating the penalty stiffness");
    LSD_IGNROFF                     = VALUE(INT,"Flag to ignore the thickness offset for shells in the calculation of the shell contact surface");
    LSD_FSTOL                       = VALUE(FLOAT,"Tolerance used with the_SMOOTH_option for determining which segments are considered flat");
    LSD_2DBINR                      = VALUE(INT,"Flag to indicate that 2d belts initially inside retractors are involved in the contact");
    LSD_SSFTYP                      = VALUE(INT,"Flag to determine how the SSF option on *PART_CONTACT behaves when SOFT = 2 on optional card A");

    // HM INTERNAL
    KEYWORD_STR                     = VALUE(STRING, "Solver Keyword");
    AutoOption                      = VALUE(INT,"Automatic Options");
    ContactOption                   = VALUE(INT,"Options");
    NoneOption                      = VALUE(INT,"Options");
    CAGOption                       = VALUE(INT,"Contac Automatic General Opt");
    ThermalOpt                      = VALUE(INT,"Thermal Options");
    DefineFrictOpt                  = VALUE(INT,"UseFrictionOptions");
    TiebreaksurfOpt                 = VALUE(INT,"Tiebreak Options");
    OrthoFrictionOption             = VALUE(INT,"OrthoFrictionOptions");
    mppOpt                          = VALUE(INT,"mppOption");
    LSD_NEGATIVEOpt                 = VALUE(INT, "Negative_LCH_Option");
    Group_Option                    = VALUE(INT,"AdditionalCards");
    ContactOptionalCards            = VALUE(INT,"Cards");
    LSD_DEPTHOpt                    = VALUE(INT,"Flag for sign DEPTH");
    LSD_BSORTOpt                    = VALUE(INT,"Flag for sign BSORT");
    IGAP_Option_chkbox              = VALUE(INT,"IGAP_Option");
    IGNORE_Option_chkbox            = VALUE(INT,"IGNORE_Option");
    CONT_DPFRAC_chkbox              = VALUE(INT,"Use DPRFAC function");
    CONT_DTSIF_chkbox               = VALUE(INT,"Use DTSTIF function");
    Option1                         = VALUE(INT,"OptionalCard");
    LSD_TitleOpt                    = VALUE(INT, "");

    _HAS_HEADER                     = VALUE(BOOL,"Has Header Card");
    IO_FLAG                         = VALUE(INT,"");
    _opt                            = VALUE(STRING, "");
    _optA                           = VALUE(STRING, "");
    card1_opt                       = VALUE(STRING, "");
    _existB                         = VALUE(INT, "");
    _existC                         = VALUE(INT, "");
    _existD                         = VALUE(INT, "");
    _existE                         = VALUE(INT, "");
    _existF                         = VALUE(INT, "");
    _dummy                          = VALUE(STRING, "");
    _dummy_TIEBREAK                 = VALUE(INT, "");
    _dummy_SMOOTH                   = VALUE(INT, "");
    _dummy_MORTAR_TIED_WELD         = VALUE(INT, "");
    _dummy_MORTAR_TIED              = VALUE(INT, "");
    _dummy_TIED_WELD                = VALUE(INT, "");
    _dummy_MORTAR                   = VALUE(INT, "");
    _dummy_COMPOSITE                = VALUE(INT, "");
    _dummy_DAMPING                  = VALUE(INT, "");
    _dummy_MORTAR2                  = VALUE(INT, "");
    _dummy_THERMAL_FRICTION         = VALUE(INT, "");
    _dummy_THERMAL                  = VALUE(INT, "");
    _dummy_int                      = VALUE(INT, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    //INPUT ATTRIBUTES
    TRACKPEN                        = 4734;
    BUCKET                          = 4735;
    LCBUCKET                        = 4736;
    NSEG2TRACK                      = 4737;
    INITITER                        = 4738;
    LSD_PARMAX                      = 5570;
    LSD_CPARM8                      = 5600;
    //Cards
    ContSlaveBoxId                  = 4154;
    ContMasterBoxId                 = 4155;
    LSDYNA_SPR                      = 3;
    LSDYNA_MPR                      = 4;
    LSDYNA_FS                       = 5;
    LSDYNA_FD_DefineFriction        = 6235;
    LSDYNA_TB_DefineFriction        = 7852;
    LSDYNA_FD                       = 6;
    LSDYNA_DC                       = 7;
    LSDYNA_VC                       = 8;
    LSDYNA_VDC                      = 9;
    LSDYNA_PENCHK                   = 10;
    LSDYNA_BT                       = 11;
    LSDYNA_DT                       = 12;
    LSDYNA_SFS                      = 13;
    LSDYNA_SFM                      = 14;
    LSDYNA_SST                      = 15;
    LSDYNA_MST                      = 16;
    LSDYNA_SFST                     = 18;
    LSDYNA_SFMT                     = 19;
    LSDYNA_FSF                      = 20;
    LSDYNA_VSF                      = 21;
    LSD_RESPONSE                    = 5290;
    LSDYNA_NFLS                     = 43;
    LSDYNA_SFLS                     = 44;
    LSD_PARAM                       = 5291;
    LSD_ERATEN                      = 5594;
    LSD_ERATES                      = 5595;
    LSD_CT2CN                       = 5596;
    LSD_DMP_1                       = 5597;
    LSD_DMP_2                       = 5598;
    LSD_DMP_3                       = 5599;
    LSD_CN                          = 3048;
    //Options 13/14 Cards
    LSD_MAT240_G1C_0                = 1267;
    LSD_MAT240_G1C_0_CURVEID        = 11147;
    LSD_MAT240_G1C_INF              = 1268;
    LSD_MAT240_EDOT_G1              = 1269;
    LSD_MAT240_T0                   = 1270;
    LSD_MAT240_T0_CURVEID           = 11149;
    LSD_MAT240_T1                   = 1271;
    LSD_MAT240_EDOT_T               = 1272;
    LSD_MAT240_LCG1C                = 8341;
    LSD_MAT240_FG1                  = 1273;
    LSD_MAT240_FG1_CURVEID          = 11151;
    LSD_MAT240_G2C_0                = 1274;
    LSD_MAT240_G2C_0_CURVEID        = 11148;
    LSD_MAT240_G2C_INF              = 1275;
    LSD_MAT240_EDOT_G2              = 1276;
    LSD_MAT240_S0                   = 1277;
    LSD_MAT240_S0_CURVEID           = 11150;
    LSD_MAT240_S1                   = 1278;
    LSD_MAT240_EDOT_S               = 1279;
    LSD_MAT240_FG2                  = 1280;
    LSD_MAT240_FG2_CURVEID          = 11152;
    LSD_MAT240_LCG2C                = 8342;
    // Card 4: AUTOMATIC_SURFACE_TO_SURFACE_COMPOSITE
    CONTROL_TFAIL                   = 8345;
    CONTROL_MODEL                   = 8346;
    CONTROL_CIDTAU                  = 8347;
    CONTROL_CIDNU                   = 8348;
    CONTROL_D                       = 8349;
    // Card 4: AUTOMATIC_SURFACE_TO_SURFACE_TIED_WELD, AUTOMATIC_SURFACE_TO_SURFACE_MORTAR_TIED_WELD
    CONTROL_CLOSE                   = 8351;
    CONTROL_HCLOSE                  = 11712;
    //THERMAL CARD 1
    CF                              = 4302;
    FRAD                            = 4303;
    HTC                             = 4304;
    GCRIT                           = 4305;
    GMAX                            = 4306;
    CD_FACT                         = 4307;
    LSD_BC_FLAG                     = 5605;
    LSD_ALGO                        = 5606;
    LSD_LCFST                       = 574;
    LSD_LCFDT                       = 575;
    LSD_FORMULA                     = 576;
    LSD_a                           = 577;
    LSD_b                           = 578;
    LSD_c                           = 579;
    LSD_d                           = 580;
    LSD_NEGATIVEOpt                 = 8122;
    LSD_LCH                         = 581;
    // ORTHO FRICTION Card 1
    LSD_FS1_S                       = 7750;
    LSD_FD1_S                       = 7751;
    LSD_DC1_S                       = 7752;
    LSD_VC1_S                       = 7753;
    LSD_LC1_S                       = 7754;
    LSD_OACS_S                      = 7755;
    LSD_LCFS                        = 7756;
    LSD_LCPS                        = 7757;
    // ORTHO FRICTION Card 2
    LSD_FS2_S                       = 7758;
    LSD_FD2_S                       = 7759;
    LSD_DC2_S                       = 7760;
    LSD_VC2_S                       = 7761;
    LSD_LC2_S                       = 7762;
    // ORTHO FRICTION Card 3
    LSD_FS1_M                       = 7763;
    LSD_FD1_M                       = 7764;
    LSD_DC1_M                       = 7765;
    LSD_VC1_M                       = 7766;
    LSD_LC1_M                       = 7767;
    LSD_OACS_M                      = 7768;
    LSD_LCFM                        = 7769;
    LSD_LCPM                        = 7770;
    // ORTHO FRICTION Card 4
    LSD_FS2_M                       = 7771;
    LSD_FD2_M                       = 7772;
    LSD_DC2_M                       = 7773;
    LSD_VC2_M                       = 7774;
    LSD_LC2_M                       = 7775;
    // Additional Cards: Optional Card A
    LSDYNA_SOFT                     = 22;
    LSDYNA_SOFSCL                   = 23;
    LSD_LCID2                       = 168;
    LSDYNA_MAXPAR                   = 25;
    LSDYNA_PENTOL                   = 26;
    LSDYNA_DEPTH                    = 27;
    LSD_LCID6                       = 199;
    LSD_GRPABLE                     = 5604;
    LSDYNA_BSORT                    = 28;
    LSD_LCID                        = 45;
    LSDYNA_FRCFRQ                   = 29;
    // Additional Cards: Optional Card B
    LSD_PENMAX                      = 91;
    LSD_THKOPT                      = 92;
    LSD_SHLTHK                      = 93;
    LSD_SNLOG                       = 94;
    LSD_ISYM                        = 5878;
    LSD_I2D3D                       = 4461;
    LSD_SLDTHK                      = 4462;
    LSD_SLDSTF                      = 4463;
    // Additional Cards: Optional Card C
    CONT_IGAP                       = 4183;
    CONT_IGNORE                     = 4184;
    CONT_DPFRAC_field               = 5668;
    CONT_DPFRAC_entity              = 5669;
    CONT_DTSIF_field                = 5672;
    CONT_DTSIF_entity               = 5671;
    CONT_FLANGL                     = 5674;
    CONT_CID_RCF                    = 5675;
    // Additional Cards: Optional Card D
    CONT_Q2TRI                      = 5808;
    CONT_DTPCHK                     = 5809;
    CONT_SFNBR                      = 5810;
    CONT_FNLSCL                     = 5811;
    CONT_DNLSCL                     = 5812;
    CONT_TCSO                       = 5813;
    CONT_TIEDID                     = 5814;
    CONT_SHLEDG                     = 4894;
    // Additional Cards: Optional Card E
    CONT_SHAREC                     = 5815;
    LSD_CHKSEGS                     = 5603;
    LSD_PENSF                       = 5602;
    LSD_CPARM8_E                    = 7741;
    LSD_IPBACK_E                    = 7742;
    LSD_SRNDE                       = 7870;
    LSD_FRICSF                      = 8500;
    LSD_ICOR                        = 7780;
    LSD_FTORQ                       = 8501;
    LSD_REGION                      = 8503;
    // Additional Cards: Optional Card F
    CONT_PSTIFF                     = 5839;
    LSD_IGNROFF                     = 8502;
    LSD_FSTOL                       = 8953;
    LSD_2DBINR                      = 8954;
    LSD_SSFTYP                      = 8955;

    //HM INTERNAL
    KEYWORD_STR                     = 9000;
    AutoOption                      = 571;
    ContactOption                   = 97;
    NoneOption                      = 572;
    TiebreaksurfOpt                 = 11727;
    DefineFrictOpt                  = 6234;
    ThermalOpt                      = 4301;
    OrthoFrictionOption             = 7776;
    mppOpt                          = 4733;
    Group_Option                    = 997;
    ContactOptionalCards            = 5895;
    LSD_DEPTHOpt                    = 7739;
    LSD_BSORTOpt                    = 7740;
    IGAP_Option_chkbox              = 11288;
    IGNORE_Option_chkbox            = 11287;
    CONT_DPFRAC_chkbox              = 5670;
    CONT_DTSIF_chkbox               = 5673;
    Option1                         = 686;
    LSD_TitleOpt                    = 90;
    _dummy_FORMULA                  = -1;

    _HAS_HEADER                     = -1;
    TITLE                           = -1;
    IO_FLAG                         = -1;
    _opt                            = -1;
    _optA                           = -1;
    card1_opt                       = -1;
    _existB                         = -1;
    _existC                         = -1;
    _existD                         = -1;
    _existE                         = -1;
    _existF                         = -1;
    _dummy                          = -1;
    _dummy_TIEBREAK                 = -1;
    _dummy_SMOOTH                   = -1;
    _dummy_MORTAR_TIED_WELD         = -1;
    _dummy_MORTAR_TIED              = -1;
    _dummy_TIED_WELD                = -1;
    _dummy_MORTAR                   = -1;
    _dummy_COMPOSITE                = -1;
    _dummy_DAMPING                  = -1;
    _dummy_MORTAR2                  = -1;
    _dummy_THERMAL_FRICTION         = -1;
    _dummy_THERMAL                  = -1;
    _dummy_int                      = -1;
}

DEFAULTS(COMMON)
{
    TRACKPEN                    = 0;
    BUCKET                      = 200;
    NSEG2TRACK                  = 3;
    INITITER                    = 2;
    LSD_PARMAX                  = 1.0005;
    LSD_CPARM8                  = 0;
    LSD_CHKSEGS                 = 0;
    LSD_PENSF                   = 1.0;
    LSD_GRPABLE                 = 0;
    LSDYNA_SPR                  = 0;
    LSDYNA_MPR                  = 0;
    LSDYNA_FS                   = 0.0;
    LSDYNA_FD                   = 0.0;
    LSDYNA_DC                   = 0.0;
    LSDYNA_VC                   = 0.0;
    LSDYNA_VDC                  = 0.0;
    LSDYNA_PENCHK               = 0.0;
    LSDYNA_BT                   = 0.0;
    LSDYNA_DT                   = 1.0E+20;
    LSDYNA_SFS                  = 1.0;
    LSDYNA_SFM                  = 1.0;
    LSDYNA_SFST                 = 1.0;
    LSDYNA_SFMT                 = 1.0;
    LSDYNA_FSF                  = 1.0;
    LSDYNA_VSF                  = 1.0;
    LSD_PARAM                   = 0.0;
    LSD_ERATEN                  = 0.0;
    LSD_ERATES                  = 0.0;
    LSD_CT2CN                   = 1.0;
    LSD_CN                      = 0.0;
    CONTROL_D                   = 0.0;
    CONTROL_CLOSE               = 0.0;
    CONTROL_HCLOSE              = 0.0;
    CD_FACT                     = 0.5;
    LSD_BC_FLAG                 = 0;
    LSD_ALGO                    = 0;
    LSD_FORMULA                 = 0;
    LSD_NEGATIVEOpt             = 0;
    LSD_FS1_S                   = 0.0;
    LSD_FD1_S                   = 0.0;
    LSD_DC1_S                   = 0.0;
    LSD_VC1_S                   = 0.0;
    LSD_OACS_S                  = 0.0;
    LSD_FS2_S                   = 0.0;
    LSD_FD2_S                   = 0.0;
    LSD_DC2_S                   = 0.0;
    LSD_VC2_S                   = 0.0;
    LSD_FS1_M                   = 0.0;
    LSD_FD1_M                   = 0.0;
    LSD_DC1_M                   = 0.0;
    LSD_VC1_M                   = 0.0;
    LSD_OACS_M                  = 0;
    LSD_FS2_M                   = 0.0;
    LSD_FD2_M                   = 0.0;
    LSD_DC2_M                   = 0.0;
    LSD_VC2_M                   = 0.0;
    LSDYNA_SOFT                 = 0;
    LSDYNA_SOFSCL               = 0.1;
    LSDYNA_MAXPAR               = 1.025;
    LSDYNA_PENTOL               = 0.0;
    LSDYNA_DEPTH                = 2;
    LSD_GRPABLE                 = 0;
    LSDYNA_BSORT                = 0;
    LSDYNA_FRCFRQ               = 1;
    LSD_PENMAX                  = 0.0;
    LSD_THKOPT                  = 0;
    LSD_SHLTHK                  = 0;
    LSD_SNLOG                   = 0;
    LSD_ISYM                    = 0;
    LSD_I2D3D                   = 0;
    LSD_SLDTHK                  = 0.0;
    LSD_SLDSTF                  = 0.0;
    CONT_IGAP                   = 1;
    CONT_IGNORE                 = 0;
    IGAP_Option_chkbox          = 0;
    CONT_DPFRAC_field           = 0;
    CONT_DTSIF_field            = 0;
    CONT_FLANGL                 = 0.0;
    CONT_Q2TRI                  = 0;
    CONT_DTPCHK                 = 0.0;
    CONT_SFNBR                  = 0.0;
    CONT_FNLSCL                 = 0.0;
    CONT_DNLSCL                 = 0.0;
    CONT_TCSO                   = 0;
    CONT_TIEDID                 = 0;
    CONT_SHAREC                 = 0;
    LSD_CPARM8_E                = 0;
    LSD_IPBACK_E                = 0;
    LSD_SRNDE                   = 0;
    LSD_FRICSF                  = 0;
    LSD_ICOR                    = 0;
    LSD_FTORQ                   = 0;
    LSD_REGION                  = 0;
    CONT_PSTIFF                 = 0;
    LSD_IGNROFF                 = 0;
    LSD_FSTOL                   = 2.0;
    LSD_2DBINR                  = 0;
    LSD_SSFTYP                  = 0;

    _HAS_HEADER                 = TRUE;

    ThermalOpt                  = 1;
}

GUI(COMMON)
{
    RADIO(ContactOption)
    {
        ADD(1, "None");
        ADD(2, "Automatic");
        ADD(3, "Constraint");
        ADD(4, "Eroding");
        ADD(5, "Tiebreak");
        ADD(6, "Tied");
        ADD(7, "Forming");
    }

    if(ContactOption == 2)
    {
        ASSIGN(KEYWORD_STR, "_AUTOMATIC_SURFACE_TO_SURFACE");

        RADIO(AutoOption)
        {
            ADD(1, "None");
            ADD(2, "Tiebreak");
            ADD(3, "Smooth");
            ADD(4, "Mortar");
            ADD(5, "Mortar_Tied");
            ADD(6, "Composite");
            ADD(7, "Tied_Weld");
            ADD(8, "Mortar_Tied_Weld");
        }
    }
    if((ContactOption == 2) && (AutoOption == 2))
    {
        ASSIGN(KEYWORD_STR, "_TIEBREAK");
    }
    if((ContactOption == 2) && (AutoOption == 3))
    {
        ASSIGN(KEYWORD_STR, "_SMOOTH");
    }
    if((ContactOption == 2) && (AutoOption == 4))
    {
        ASSIGN(KEYWORD_STR, "_MORTAR");
    }
    if((ContactOption == 2) && (AutoOption == 5))
    {
        ASSIGN(KEYWORD_STR, "_MORTAR_TIED");
    }
    if((ContactOption == 2) && (AutoOption == 6))
    {
        ASSIGN(KEYWORD_STR, "_COMPOSITE");
    }
    if((ContactOption == 2) && (AutoOption == 7))
    {
        ASSIGN(KEYWORD_STR, "_TIED_WELD");
    }
    if((ContactOption == 2) && (AutoOption == 7))
    {
        ASSIGN(KEYWORD_STR, "_MORTAR_TIED_WELD");
    }

    if(ContactOption == 0 || ContactOption == 1)
    {
      FLAG(DefineFrictOpt);
    }

    if(AutoOption == 2 && (LSD_RESPONSE == 9 || LSD_RESPONSE == 11))
    {
      RADIO(TiebreaksurfOpt)
      {
          ADD(1,"None");
          ADD(2,"Damping");
          ADD(3,"Mortar");
      }
    }

    RADIO(ThermalOpt)
    {
        ADD(1,"None");
        ADD(2,"Thermal");
        ADD(3,"Thermal Friction");
    }
    if(ThermalOpt == 2)
    {
        ASSIGN(KEYWORD_STR, "_THERMAL");
    }
    if(ThermalOpt == 3)
    {
        ASSIGN(KEYWORD_STR, "_THERMAL_FRICTION");
    }

    FLAG(OrthoFrictionOption);
    if(OrthoFrictionOption == 1)
    {
        ASSIGN(KEYWORD_STR, "_ORTHO_FRICTION");
    }

    FLAG(mppOpt);
    if(mppOpt == 1)
    {
        ASSIGN(KEYWORD_STR, "_MPP");
    }

    ASSIGN(KEYWORD_STR, "_ID");

    if(mppOpt == 1)
    {
        FLAG(Option1);
        SCALAR(TRACKPEN)                    {DIMENSION="DIMENSIONLESS";} //to be checked
        SCALAR(BUCKET)                      {DIMENSION="f";}             //to be checked
        SCALAR(LCBUCKET)                    {DIMENSION="DIMENSIONLESS";} //to be checked
        SCALAR(NSEG2TRACK)                  {DIMENSION="DIMENSIONLESS";}
        SCALAR(INITITER)                    {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_PARMAX)                  {DIMENSION="DIMENSIONLESS";}
        RADIO(LSD_CPARM8)
        {
            ADD(0, "0: Flag is not set");
            ADD(1, "1: Flag is set");
            ADD(2, "2: Flag is set(permitting contact treatment of spot weld beams)");
        }
    }

    if( (Option1 == 1)  && (mppOpt  == 1) )
    {
        SCALAR(LSD_CHKSEGS)                 {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_PENSF)                   {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_GRPABLE)                 {DIMENSION="DIMENSIONLESS";}
    }

    DATA(ContSlaveBoxId);
    DATA(ContMasterBoxId);
    RADIO(LSDYNA_SPR)
    {
        ADD(1,"1: slave side forces included");
        ADD(2,"2: same as EQ.1, but also allows for slave nodes to be written as *INITIAL_CONTACT_WEAR to dynain, see NCYC on *INTERFACE_SPRINGBACK_LSDYNA");
    }

    RADIO(LSDYNA_MPR)
    {
        ADD(1, "1: master side forces included");
        ADD(2, "2: same as EQ.1, but also allows for master nodes to be written as *INITIAL_CONTACT_WEAR to dynain, see NCYC on *INTERFACE_SPRINGBACK_LSDYNA");
    }

    // Card 2
    if(DefineFrictOpt == 0)
    {
        SCALAR(LSDYNA_FS)           { DIMENSION="pressure"; }
        SCALAR(LSDYNA_FD)           { DIMENSION="pressure"; }
    }
    else if(DefineFrictOpt == 1 && LSDYNA_FS == -2)
    {
        RADIO(LSDYNA_FS)
        {
            ADD(0,"-2: If only the one friction table is defined it will be used and there is no need to define parameter FD");
            ADD(1,"-1: If the frictional coefficients defined in the *PART section are to be used, set FS to the negative number, -1.0");
            ADD(2,"2: For contact type ONE_WAY_SURFACE_TO_SURFACE, the dynamic coefficient of friction points to the table, see DEFINE_TABLE (The table ID is given by FD below.), giving the coefficient of friction as a function of the relative velocity and pressure");
        }
        DATA(LSDYNA_FD_DefineFriction);
    }
    else if(DefineFrictOpt == 1 && LSDYNA_FS == -1)
    {
        RADIO(LSDYNA_FS)
        {
            ADD(0,"-2: If only the one friction table is defined it will be used and there is no need to define parameter FD");
            ADD(1,"-1: If the frictional coefficients defined in the *PART section are to be used, set FS to the negative number, -1.0");
            ADD(2,"2: For contact type ONE_WAY_SURFACE_TO_SURFACE, the dynamic coefficient of friction points to the table, see DEFINE_TABLE (The table ID is given by FD below.), giving the coefficient of friction as a function of the relative velocity and pressure");
        }
        SCALAR(LSDYNA_FD);
    }
    else if(DefineFrictOpt == 1 && LSDYNA_FS == 2)
    {
        RADIO(LSDYNA_FS)
        {
            ADD(0,"-2: If only the one friction table is defined it will be used and there is no need to define parameter FD");
            ADD(1,"-1: If the frictional coefficients defined in the *PART section are to be used, set FS to the negative number, -1.0");
            ADD(2,"2: For contact type ONE_WAY_SURFACE_TO_SURFACE, the dynamic coefficient of friction points to the table, see DEFINE_TABLE (The table ID is given by FD below.), giving the coefficient of friction as a function of the relative velocity and pressure");
        }
        DATA(LSDYNA_TB_DefineFriction);
    }

    SCALAR(LSDYNA_DC)                       { DIMENSION="pressure"; }
    SCALAR(LSDYNA_VC)                       { DIMENSION="pressure"; }
    SCALAR(LSDYNA_VDC)                      { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_PENCHK)                   { DIMENSION="DIMENSIONLESS"; }  // to be checked
    SCALAR(LSDYNA_BT)                       { DIMENSION="t"; }
    SCALAR(LSDYNA_DT)                       { DIMENSION="t"; }
    // Card 3
    SCALAR(LSDYNA_SFS)                      { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_SFM)                      { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_SST)                      { DIMENSION="l"; }
    SCALAR(LSDYNA_MST)                      { DIMENSION="l"; }
    SCALAR(LSDYNA_SFST)                     { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_SFMT)                     { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_FSF)                      { DIMENSION="DIMENSIONLESS"; }
    SCALAR(LSDYNA_VSF)                      { DIMENSION="DIMENSIONLESS"; }

    // Card 4: AUTOMATIC_SURFACE_TIEBREAK
    if((ContactOption == 2) && (AutoOption == 2))
    {
        RADIO(LSD_RESPONSE)
        {
            ADD(-3, "-3: see 3, moments are transferred. SMP only");
            ADD(-2, "-2: see 2, moments are transferred. SMP only");
            ADD(-1, "-1: see 1, moments are transferred. SMP only");
            ADD(1, "1: slave nodes in contact and which come into contact will permanently stick");
            ADD(2, "2: tiebreak is active for nodes which are initially in contact");
            ADD(3, "3: as 1 above but with failure after sticking");
            ADD(4, "4: tiebreak is active for nodes which are initially in contact but tangential motion with frictional sliding is permitted");
            ADD(5, "5: tiebreak is active for nodes which are initially in contact");
            ADD(6, "6: This option is for use with solids and thick shells only");
            ADD(7, "7: Dycoss Discrete Crack Model");
            ADD(8, "8: This is similar to OPTION = 6, but it works with offset shell elements");
            ADD(9, "9: Discrete Crack Model with power law and B-K damage models");
            ADD(10, "10: This is similar to OPTION = 7, but it works with offset shell elements");
            ADD(11, "11: This is similar to OPTION = 9, but it works with offset shell elements");
            ADD(13, "13: Elastoplastic, rate-dependent damage model based on *MAT_240");
            ADD(14, "14: This is similar to OPTION = 13, but it works with offset shell elements");
        }
    }
    if(((ContactOption == 2) && (AutoOption == 2)) && (LSD_RESPONSE == 2 || LSD_RESPONSE == 3 || LSD_RESPONSE == 4 || LSD_RESPONSE == 5 || LSD_RESPONSE == 6 || LSD_RESPONSE == 7 || LSD_RESPONSE == 8 || LSD_RESPONSE == 9 || LSD_RESPONSE == 10 || LSD_RESPONSE == 11 ))
    {
        SCALAR(LSDYNA_NFLS);
    }
    if((ContactOption == 2 && AutoOption == 2) && (LSD_RESPONSE == 2 || LSD_RESPONSE == 3 || LSD_RESPONSE == 4 || LSD_RESPONSE == 5 || LSD_RESPONSE == 6 || LSD_RESPONSE == 7 || LSD_RESPONSE == 8 || LSD_RESPONSE == 9 || LSD_RESPONSE == 10 || LSD_RESPONSE == 11))
    {
        SCALAR(LSDYNA_SFLS);
    }
    if(((ContactOption == 2) && (AutoOption == 2)) && (LSD_RESPONSE == 2 || LSD_RESPONSE == 4 || LSD_RESPONSE == 6 || LSD_RESPONSE == 7 || LSD_RESPONSE == 8 || LSD_RESPONSE == 9 || LSD_RESPONSE == 10 || LSD_RESPONSE == 11 || LSD_RESPONSE == 13 || LSD_RESPONSE == 14))
    {
        SCALAR(LSD_PARAM);
    }
    if(((ContactOption == 2) && (AutoOption == 2)) && (LSD_RESPONSE == 7 || LSD_RESPONSE == 9 || LSD_RESPONSE == 10 || LSD_RESPONSE == 11) )
    {
        SCALAR(LSD_ERATEN);
        SCALAR(LSD_ERATES);
    }
    if(((ContactOption == 2) && (AutoOption == 2)) && (LSD_RESPONSE == 9 || LSD_RESPONSE == 11 || LSD_RESPONSE == 13 || LSD_RESPONSE == 14))
    {
        SCALAR(LSD_CT2CN);
    }
    if((ContactOption == 2 && AutoOption == 2) && (LSD_RESPONSE == 9 || LSD_RESPONSE == 11 || LSD_RESPONSE == 13 || LSD_RESPONSE == 14))
    {
        SCALAR(LSD_CN);
    }
    // Damping Card Card 4b
    if(((ContactOption == 2) && (AutoOption == 2)) && (TiebreaksurfOpt == 2) && (LSD_RESPONSE == 9 || LSD_RESPONSE == 11))
    {
        SCALAR(LSD_DMP_1);                // to check dimension
        SCALAR(LSD_DMP_2);                // to check dimension
        SCALAR(LSD_DMP_3);                // to check dimension
    }

    // Options 13/14 Cards
    if((AutoOption == 2) && (LSD_RESPONSE == 13 || LSD_RESPONSE == 14))
    {
      if(ThermalOpt == 2)   //  to check the dimensions of the scalars
      {
        // Card 4c
        DATA(LSD_MAT240_G1C_0_CURVEID);
        SCALAR(LSD_MAT240_G1C_INF);
        SCALAR(LSD_MAT240_EDOT_G1);
        DATA(LSD_MAT240_T0_CURVEID);
        SCALAR(LSD_MAT240_T1);
        SCALAR(LSD_MAT240_EDOT_T);
        DATA(LSD_MAT240_FG1_CURVEID);
        SCALAR(LSD_MAT240_LCG1C);

        // Card 4d
        DATA(LSD_MAT240_G2C_0_CURVEID);
        SCALAR(LSD_MAT240_G2C_INF);
        SCALAR(LSD_MAT240_EDOT_G2);
        DATA(LSD_MAT240_S0_CURVEID);
        SCALAR(LSD_MAT240_S1);
        SCALAR(LSD_MAT240_EDOT_S);
        DATA(LSD_MAT240_FG2_CURVEID);
        SCALAR(LSD_MAT240_LCG2C);
     }
     else
     {
        // Card 4c
        SCALAR(LSD_MAT240_G1C_0);
        SCALAR(LSD_MAT240_G1C_INF);
        SCALAR(LSD_MAT240_EDOT_G1);
        SCALAR(LSD_MAT240_T0)              {DIMENSION="pressure";}
        SCALAR(LSD_MAT240_T1);
        SCALAR(LSD_MAT240_EDOT_T);
        SCALAR(LSD_MAT240_FG1);
        SCALAR(LSD_MAT240_LCG1C);

        // Card 4d
        SCALAR(LSD_MAT240_G2C_0);
        SCALAR(LSD_MAT240_G2C_INF);
        SCALAR(LSD_MAT240_EDOT_G2);
        SCALAR(LSD_MAT240_S0)              {DIMENSION="pressure";}
        SCALAR(LSD_MAT240_S1);
        SCALAR(LSD_MAT240_EDOT_S);
        SCALAR(LSD_MAT240_FG2);
        SCALAR(LSD_MAT240_LCG2C);
     }
    }

    // Card 4: AUTOMATIC_SURFACE_TO_SURFACE_COMPOSITE
    if((ContactOption == 2) && (AutoOption == 6))
    {
      SCALAR(CONTROL_TFAIL);                                          // to check dimension
      RADIO(CONTROL_MODEL)
      {
          ADD(1,"limiting shear stress depends on CIDMU in both tension and compression");
          ADD(2,"limiting shear stress depends on CIDETA in tension and CIDMU in compression");
          ADD(3,"limiting shear stress depends on CIDETA in both tension and compression");
      }
      DATA(CONTROL_CIDTAU);
      DATA(CONTROL_CIDNU);
      SCALAR(CONTROL_D);                                              // to check dimension
    }

    // Card 4: AUTOMATIC_SURFACE_TO_SURFACE_TIED_WELD, AUTOMATIC_SURFACE_TO_SURFACE_MORTAR_TIED_WELD
    if(ContactOption == 2 && (AutoOption == 7 || AutoOption == 8) && ThermalOpt == 2)
    {
      SCALAR(CONTROL_TEMP)                      {DIMENSION="k";}
      SCALAR(CONTROL_CLOSE);                    // to check dimension
      SCALAR(CONTROL_HCLOSE);                   // to check dimension
    }
    else if(ContactOption == 2 && (AutoOption == 7  || AutoOption == 8) && ThermalOpt != 2)
    {
      SCALAR(CONTROL_TEMP);                     // to check dimension
      SCALAR(CONTROL_CLOSE);                    // to check dimension
    }

    // Thermal Card l
    if(ThermalOpt == 2 || ThermalOpt == 3)
    {
        SCALAR(CF)                              {DIMENSION="DIMENSIONLESS";}
        SCALAR(FRAD)                            {DIMENSION="DIMENSIONLESS";}
        SCALAR(HTC)                             {DIMENSION="DIMENSIONLESS";}
        SCALAR(GCRIT)                           {DIMENSION="l";}
        SCALAR(GMAX)                            {DIMENSION="l";}
        SCALAR(CD_FACT)                         {DIMENSION="DIMENSIONLESS";}
        RADIO(LSD_BC_FLAG)
        {
            ADD(0, "0");
            ADD(1, "1");
        }
        RADIO(LSD_ALGO)
        {
            ADD(0, "0");
            ADD(1, "1");
        }
    }

    // THERMAL FRICTION
    if(ThermalOpt == 2)
    {
        DATA(LSD_LCFST);
        DATA(LSD_LCFDT);
        SCALAR(LSD_FORMULA)                     { DIMENSION="DIMENSIONLESS";}
        DATA(LSD_a);
        DATA(LSD_b);
        DATA(LSD_c);
        DATA(LSD_d);
        FLAG(LSD_NEGATIVEOpt);
        DATA(LSD_LCH);
    }

    if(OrthoFrictionOption == 1)
    {
        SCALAR(LSD_FS1_S);                        // to be checked dimension
        SCALAR(LSD_FD1_S);                         // to be checked
        SCALAR(LSD_DC1_S);                          // to be checked
        SCALAR(LSD_VC1_S);                            // to be checked
        SCALAR(LSD_LC1_S);                              // to be checked
        SCALAR(LSD_OACS_S);                            // to be checked
        DATA(LSD_LCFS);
        DATA(LSD_LCPS);
        SCALAR(LSD_FS2_S);                              // to be checked
        SCALAR(LSD_FD2_S);                               // to be checked
        SCALAR(LSD_DC2_S);                               // to be checked
        SCALAR(LSD_VC2_S);                              // to be checked
        DATA(LSD_LC2_S);
        SCALAR(LSD_FS1_M);                               // to be checked
        SCALAR(LSD_FD1_M);                                // to be checked
        SCALAR(LSD_DC1_M);                                 // to be checked
        SCALAR(LSD_VC1_M);                                 // to be checked
        DATA(LSD_LC1_M);
        SCALAR(LSD_OACS_M);                                  // to be checked
        DATA(LSD_LCFM);
        DATA(LSD_LCPM);
        SCALAR(LSD_FS2_M);                                 // to be checked
        SCALAR(LSD_FD2_M);                                  // to be checked
        SCALAR(LSD_DC2_M);                                  // to be checked
        SCALAR(LSD_VC2_M);                                 // to be checked
        DATA(LSD_LC2_M);                                    // to be checked
    }

// Additional cards when FORMULA is a negative number
    if(LSD_FORMULA < 0 && ThermalOpt == 3)
    {
      ASSIGN(_dummy_FORMULA, -1*LSD_FORMULA);
      SIZE(_dummy_FORMULA);
      ARRAY(_dummy_FORMULA,"UC")
      {
        SCALAR(LSD_UC);
      }
    }

    // Optional Cards
    FLAG(Group_Option);
    if(Group_Option == 1)
    {
        RADIO(ContactOptionalCards)
        {
            ADD(1, "A");
            ADD(2, "AB");
            ADD(3, "ABC");
            ADD(4, "ABCD");
            ADD(5, "ABCDE");
            ADD(6, "ABCDEF");
        }

        // fields available for all cards: start Optional Card A
        RADIO(LSDYNA_SOFT)
        {
            ADD(1, "0: penalty Formulation");
            ADD(2, "1: soft Constraint Formulation");
            ADD(3, "2: segment-based Contact");
            ADD(4, "4: constraint approach for FORMING contact option");
            ADD(5, "6: special contact algorithm to handle sheet blank edge (deformable) to gage pin (rigid shell) contact during implicit gravity loading, applies to *CONTACT_ FORMING_NODES_TO_SURFACE only");
        }
        SCALAR(LSDYNA_SOFSCL)           { DIMENSION="DIMENSIONLESS";}
        DATA(LSD_LCID2);
        SCALAR(LSDYNA_MAXPAR)           { DIMENSION="DIMENSIONLESS";}
        RADIO(LSDYNA_PENTOL)
        {
            ADD(1, "0: defaults to 2");
            ADD(2, "1: pinball edge-edge contact(not recommended");
            ADD(3, "2: assume planer segments (defaults)");
            ADD(4, "3: warped segment checking");
            ADD(5, "4: sliding option");
            ADD(6, "5: do option 3 and 4");
        }

        FLAG(LSD_DEPTHOpt);
        if(LSD_DEPTHOpt == 1)
        {
            DATA(LSD_LCID6);
        }
        if(LSD_DEPTHOpt == 0)
        {
            SCALAR(LSDYNA_DEPTH)                { DIMENSION="l";}
        }

        FLAG(LSD_BSORTOpt);
        if(LSD_BSORTOpt == 1)
        {
            DATA(LSD_LCID);
        }
        if(LSD_BSORTOpt == 0)
        {
            SCALAR(LSDYNA_BSORT)                { DIMENSION="DIMENSIONLESS";}
        }

        SCALAR(LSDYNA_FRCFRQ)               { DIMENSION="DIMENSIONLESS";}
        // end Optional Card A

        // start Optional Card B
        if( ContactOptionalCards == 1 || ContactOptionalCards == 2 || ContactOptionalCards == 3 || ContactOptionalCards == 4 || ContactOptionalCards == 5 )
        {
            SCALAR(LSD_PENMAX)                  { DIMENSION="l";} //to be checked
            RADIO(LSD_THKOPT)
            {
                ADD(0, "0: default is taken from control card, *CONTROL_CONTACT");
                ADD(1, "1: thickness offsets are included");
                ADD(2, "2: thickness offsets are not included (old way)");
            }
            RADIO(LSD_SHLTHK)
            {
                ADD(0, "0: thickness is not considered");
                ADD(1, "1: thickness is considered but rigid bodies are excluded");
                ADD(2, "2: thickness is considered including rigid bodies");
            }
            RADIO(LSD_SNLOG)
            {
                ADD(0, "0: logic is enabled (default)");
                ADD(1, "1: logic is skipped");
            }
            RADIO(LSD_ISYM)
            {
                ADD(0, "0: off");
                ADD(1, "1: do not include faces with normal boundary constraints");
            }
            RADIO(LSD_I2D3D)
            {
                ADD(0, "0: search 2D elements (shells) before 3D elements (solids, thick shells) when locating segments");
                ADD(1, "1: search 3D (solids, thick shells) elements before 2D elements (shells) when locating segments");
            }
            SCALAR(LSD_SLDTHK)                      { DIMENSION="l";}
            SCALAR(LSD_SLDSTF)                      { DIMENSION="lineic_force";}
        }
        // end Optional Card B

        // start Optional Card C
        if( ContactOptionalCards == 2 || ContactOptionalCards == 3 || ContactOptionalCards == 4 || ContactOptionalCards == 5 )
        {
            FLAG(IGAP_Option_chkbox);
            if( ContactOptionalCards == 0)
            {
              RADIO(CONT_IGAP)
              {
                  ADD(1, "1: Apply method to improve convergence (default)");
                  ADD(2, "2: Do not apply method");
              }
            }
            if( ContactOptionalCards == 1)
            {
              SCALAR(CONT_IGAP)                { DIMENSION="DIMENSIONLESS";}
            }

            FLAG(IGNORE_Option_chkbox);
            if( IGNORE_Option_chkbox == 0)
            {
              RADIO(CONT_IGNORE)
              {
                  ADD(0, "0: Take the default value from the fourth card of the CONTROL_CONTACT input");
                  ADD(1, "1: Allow initial penetrations to exist by tracking the initial penetrations");
                  ADD(2, "2: Allow initial penetrations to exist by tracking the initial penetrations. However, penetration warning messages are printed with the original coordinates and the recommended coordinates of each slave node given");
                  ADD(3, "3: Applies only to the Mortar contact. With this option initial penetrations are eliminated between time zero and the time specified by MPAR1. Intended for small initial penetrations");
                  ADD(4, "4: Applies only to the Mortar contact. With this option initial penetrations are eliminated between time zero and the time specified by MPAR1. In addition a maximum penetration distance can be given as MPAR2, intended for large initial penetrations");
              }
            }
            if( IGNORE_Option_chkbox == 1)
            {
                SCALAR(CONT_IGNORE)              { DIMENSION="DIMENSIONLESS";}
            }

            FLAG(CONT_DPFRAC_chkbox);
            if( CONT_DPFRAC_chkbox == 1 )
            {
                DATA(CONT_DPFRAC_entity);
            }
            if( CONT_DPFRAC_chkbox == 0 )
            {
                SCALAR(CONT_DPFRAC_field)               {DIMENSION="DIMENSIONLESS";}
            }

            FLAG(CONT_DTSIF_chkbox);
            if( CONT_DTSIF_chkbox == 1 )
            {
                DATA(CONT_DTSIF_entity);
            }
            if(CONT_DTSIF_chkbox == 0)
            {
                SCALAR(CONT_DTSIF_field)                {DIMENSION="DIMENSIONLESS";}
            }

            SCALAR(CONT_FLANGL)                     {DIMENSION="DIMENSIONLESS";}
            DATA(CONT_CID_RCF);
        }
        // end Optional Card C

        // start Optional Card D
        if( ContactOptionalCards == 3 || ContactOptionalCards == 4 || ContactOptionalCards == 5 )
        {
            RADIO(CONT_Q2TRI)
            {
                ADD(0, "0: Off (default)");
                ADD(1, "1: On for all slave shell segments");
                ADD(2, "2: On for all master shell segments");
                ADD(3, "3: On for all shell segments");
                ADD(4, "4: On for all shell segments of material type 34");
            }
            SCALAR(CONT_DTPCHK)         {DIMENSION="DIMENSIONLESS";} //to be checked
            SCALAR(CONT_SFNBR)          {DIMENSION="DIMENSIONLESS";} //to be checked
            SCALAR(CONT_FNLSCL)         {DIMENSION="DIMENSIONLESS";}
            SCALAR(CONT_DNLSCL)         {DIMENSION="l";}
            RADIO(CONT_TCSO)
            {
                ADD(0, "0: Off (default)");
                ADD(1, "1: Only consider segments in the contact definition");
            }
            RADIO(CONT_TIEDID)
            {
                ADD(0, "0: Off (default)");
                ADD(1, "1: On");
            }
            RADIO(CONT_SHLEDG)
            {
                ADD(0, "0: default to SHLEDG on *CONTROL_CONTACT");
                ADD(1, "1: Shell edges are assumed square and are flush with the nodes");
                ADD(2, "2: Shell edges are assumed round with radius equal to � shell thickness");
            }
        }
        // end Optional Card D

        // start Optional Card E
        if(ContactOptionalCards == 4 || ContactOptionalCards == 5)
        {
            RADIO(CONT_SHAREC)
            {
                ADD(0, "0: Segments that share constraints not checked for contact");
                ADD(2, "1: Segments that share constraints are checked for contact");
            }
            RADIO(LSD_CPARM8_E)
            {
                ADD(0, "0: Spot weld (type 9) beams are not considered in the contact even if included on the slave side of the contact");
                ADD(2, "2: Spot weld (type 9) beams are considered in the contact if included on the slave side of the contact");
            }
            SCALAR(LSD_IPBACK_E);                                //to be checked dimension
            RADIO(LSD_SRNDE)
            {
                ADD(0, "0: Exterior shell edges have their usual treatment where the contact surface extends beyond the shell edge");
                ADD(1, "1: The contact surface is rounded at exterior shell edges but does not extend beyond the shell edges");
                ADD(2, "2: The shell edges are square");
            }
            SCALAR(LSD_FRICSF)         {DIMENSION="DIMENSIONLESS";} //to be checked dimension
            SCALAR(LSD_ICOR)           {DIMENSION="DIMENSIONLESS";} //to be checked dimension
            SCALAR(LSD_FTORQ)          {DIMENSION="DIMENSIONLESS";} //to be checked dimension
            SCALAR(LSD_REGION)         {DIMENSION="DIMENSIONLESS";} //to be checked dimension
        }
        // end Optional Card E

        // start Optional Card F
        if(ContactOptionalCards == 4 || ContactOptionalCards == 5)
        {
            RADIO(CONT_PSTIFF)
            {
                ADD(0, "0: Use the default as defined by PSTIFF on *CONTROL_ CONTACT");
                ADD(1, "1: Based on nodal masses");
                ADD(2, "2: Based on material density and segment dimensionss");
            }
            RADIO(LSD_IGNROFF)
            {
                ADD(0, "0: Use default thicknesses");
                ADD(1, "1: Ignore the slave side thickness");
                ADD(2, "2: Ignore the master side thickness");
                ADD(3, "3: Ignore the thickness of both sidess");
            }
            SCALAR(LSD_FSTOL);                                      //to be checked dimension
            RADIO(LSD_2DBINR)
            {
                ADD(0, "0: no 2d belt initially inside a retractor is involved");
                ADD(1, "1: 2d belts initially inside retractors are involved");
            }
            RADIO(LSD_SSFTYP)
            {
                ADD(0, "0: Use SSF from the slave segment part");
                ADD(1, "1: Use the larger of the SSF values");
            }
        }
        // end Optional Card F
    }
}

//File format
FORMAT(Keyword971_R6.1)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if(IO_FLAG == 0)
    {
        //INITIAL KEYWORD_STR
        ASSIGN(KEYWORD_STR,*CONTACT_AUTOMATIC_SURFACE_TO_SURFACE,EXPORT);

        //RADIO: AutoOption
        if(AutoOption == 2)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_TIEBREAK"),EXPORT);
        }
        else if(AutoOption == 3)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_SMOOTH"),EXPORT);
        }
        else if(AutoOption == 4)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_MORTAR"),EXPORT);
        }
        else if(AutoOption == 5)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_MORTAR_TIED"),EXPORT);
        }

        //RADIO: TiebreaksurfOpt
        if(AutoOption == 2)
        {
            if(TiebreaksurfOpt == 2)
            {
                ASSIGN(_dummy,_COMBINE(_dummy,"_DAMPING"),EXPORT);
            }
            else if(TiebreaksurfOpt == 3)
            {
                ASSIGN(_dummy,_COMBINE(_dummy,"_MORTAR"), EXPORT);
            }
        }

        //RADIO: ThermalOpt
        if(ThermalOpt == 2)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_THERMAL"),EXPORT);
        }
        else if(ThermalOpt == 3)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_THERMAL_FRICTION"),EXPORT);
        }

        //FLAG: OrthoFrictionOption
        if(OrthoFrictionOption == 1)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_ORTHO_FRICTION"),EXPORT);
        }

        //FLAG: MPP
        if(mppOpt == 1)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_MPP"),EXPORT);
        }

        //FLAG: LSD_TitleOpt
        if(LSD_TitleOpt == 1)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_ID"),EXPORT);
        }

        //FINAL KEYWORD_STR
        ASSIGN(KEYWORD_STR,_COMBINE(KEYWORD_STR,_dummy),EXPORT);
        CARD("%-s",KEYWORD_STR);
    }
    else   //IMPORT
    {
        HEADER("*CONTACT_AUTOMATIC_SURFACE_TO_SURFACE%80s",_opt);

        //RADIO: AutoOption
        ASSIGN(_dummy_TIEBREAK,_FIND(_opt,"_TIEBREAK"),IMPORT);
        if(_dummy_TIEBREAK == 1)
        {
            ASSIGN(AutoOption, 2, IMPORT);
        }

        ASSIGN(_dummy_SMOOTH,_FIND(_opt,"_SMOOTH"),IMPORT);
        if(_dummy_SMOOTH == 1)
        {
            ASSIGN(AutoOption, 3, IMPORT);
        }

        ASSIGN(_dummy_MORTAR_TIED,_FIND(_opt,"_MORTAR_TIED"),IMPORT);
        if(_dummy_MORTAR_TIED == 1)
        {
            ASSIGN(AutoOption, 5, IMPORT);
        }

        ASSIGN(_dummy_MORTAR,_FIND(_opt,"_MORTAR"),IMPORT);
        if(_dummy_MORTAR == 1 && _dummy_MORTAR_TIED == 0 && AutoOption != 2)
        {
            ASSIGN(AutoOption, 4, IMPORT);
        }

        //RADIO: TiebreaksurfOpt
        if(AutoOption == 2)
        {
            ASSIGN(_dummy_DAMPING,_FIND(_opt,"_DAMPING"),IMPORT);
            if(_dummy_DAMPING == 1)
            {
                ASSIGN(TiebreaksurfOpt, 2, IMPORT);
            }
            ASSIGN(_dummy_MORTAR2,_FIND(_opt,"_MORTAR"),IMPORT);
            if(_dummy_MORTAR2 == 1)
            {
                ASSIGN(TiebreaksurfOpt, 3, IMPORT);
            }
        }

        //RADIO: ThermalOpt
        ASSIGN(_dummy_THERMAL_FRICTION,_FIND(_opt,"_THERMAL_FRICTION"),IMPORT);
        if(_dummy_THERMAL_FRICTION == 1)
        {
            ASSIGN(ThermalOpt, 3, IMPORT);
        }
        ASSIGN(_dummy_THERMAL,_FIND(_opt,"_THERMAL"),IMPORT);
        if(_dummy_THERMAL == 1 && _dummy_THERMAL_FRICTION == 0)
        {
            ASSIGN(ThermalOpt, 2, IMPORT);
        }

        //FLAG: OrthoFrictionOption
        ASSIGN(OrthoFrictionOption,_FIND(_opt,"_ORTHO_FRICTION"),IMPORT);

        //FLAG: MPP
        ASSIGN(mppOpt,_FIND(_opt,"_MPP"),IMPORT);

        //FLAG: ID
        ASSIGN(LSD_TitleOpt,_FIND(_opt,"_ID"),IMPORT);
    }

    if(IO_FLAG == 0 && LSD_TitleOpt == 1)
    {
        //ID Card
        COMMENT("$      CIDHEADING                                                               ");
        CARD("%10d%-70s", _ID_,TITLE);
    }

    // MPP card
    if(IO_FLAG == 0)
    {
        //MPP Cards
        if(mppOpt == 1)
        {
            COMMENT("$   IGNORE      BCKT    LCBCKT    NS2TRK   INITITR    PARMAX              CPARM8");
            CARD("%10d%10d%10d%10d%10d%10lg%10s%10d",TRACKPEN,BUCKET,LCBUCKET,NSEG2TRACK,INITITER,LSD_PARMAX,_BLANK_,LSD_CPARM8);

            // 2nd MPP card (optional)
            if(Option1 == 1)
            {
                COMMENT("$        &   CHKSEGS     PENSF   GRPABLE");
                CARD("&%9s%10d%10lg%10d",_BLANK_,LSD_CHKSEGS,LSD_PENSF,LSD_GRPABLE);
            }
        }
    }
    else
    {
        //MPP Cards
        if(mppOpt == 1)
        {
            //MPP Card 1
            CARD("%10d%10d%10d%10d%10d%10lg%10s%10d",TRACKPEN,BUCKET,LCBUCKET,NSEG2TRACK,INITITER,LSD_PARMAX,_BLANK_,LSD_CPARM8);

            // 2nd MPP card (optional)
            CARD_PREREAD("%-1s", card1_opt);
            if(card1_opt == "&")
            {
                CARD("&%9s%10d%10lg%10d",_BLANK_,LSD_CHKSEGS,LSD_PENSF,LSD_GRPABLE);
                ASSIGN(Option1,1,IMPORT);
            }
            else
            {
                ASSIGN(Option1,0,IMPORT);
            }
        }
    }

    // Mandatory Card 1
    COMMENT("$     SSID      MSID     SSTYP     MSTYP    SBOXID    MBOXID       SPR       MPR");
    CARD("%10d%10d%10d%10d%10d%10d%10d%10d",slaveentityids,masterentityids,SSTYP,MSTYP,ContSlaveBoxId,ContMasterBoxId,LSDYNA_SPR,LSDYNA_MPR);

    if(IO_FLAG == 1)
    {
        CARD_PREREAD("%10lg", LSDYNA_FS);
        if(LSDYNA_FS == -2 || LSDYNA_FS == -1|| LSDYNA_FS == 2)
        {
            ASSIGN(DefineFrictOpt, 1, IMPORT);
        }
        else
        {
            ASSIGN(DefineFrictOpt, 0, IMPORT);
        }
    }

    //Mandatory Card 2
    if(DefineFrictOpt == 0)
    {
        COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
        CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_FS, LSDYNA_FD,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);
    }
    else if (DefineFrictOpt == 1)
    {
        if(LSDYNA_FS == -2)
        {
            COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
            CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_FS, LSDYNA_FD_DefineFriction,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);
        }
        else if(LSDYNA_FS == -1)
        {
            COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
            CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_FS, LSDYNA_FD,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);
        }
        else if(LSDYNA_FS == 2)
        {
            COMMENT("$       FS        TB        DC        VC       VDC    PENCHK        BT        DT");
            CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_FS, LSDYNA_TB_DefineFriction,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);
        }
    }

    // Mandatory Card 3
    COMMENT("$      SFS       SFM       SST       MST      SFST      SFMT       FSF       VSF");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_SFS, LSDYNA_SFM,LSDYNA_SST,LSDYNA_MST,LSDYNA_SFST,LSDYNA_SFMT,LSDYNA_FSF,LSDYNA_VSF);

    // Card 4: AUTOMATIC_SURFACE_TIEBREAK
    if(AutoOption == 2)
    {
        CARD_PREREAD("%10d", LSD_RESPONSE);
        if(LSD_RESPONSE == 9 || LSD_RESPONSE == 11)
        {
            COMMENT("$   OPTION      NFLS      SFLS     PARAM    ERATEN    ERATES     CT2CN        CN");
            CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS,LSD_PARAM,LSD_ERATEN,LSD_ERATES,LSD_CT2CN,LSD_CN);
        }
        else if(LSD_RESPONSE == 10 || (LSD_RESPONSE == 7 && TiebreaksurfOpt != 3))
        {
            COMMENT("$   OPTION      NFLS      SFLS     PARAM    ERATEN    ERATES");
            CARD("%10d%10lg%10lg%10lg%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS,LSD_PARAM,LSD_ERATEN,LSD_ERATES);
        }
        else if(LSD_RESPONSE == 13 || LSD_RESPONSE == 14)
        {
            COMMENT("$   OPTION                         PARAM                         CT2CN        CN");
            CARD("%10d%20s%10lg%20s%10lg%10lg",LSD_RESPONSE,_BLANK_,LSD_PARAM,_BLANK_,LSD_CT2CN,LSD_CN);
        }
        else if  (LSD_RESPONSE == 7 && TiebreaksurfOpt == 3)
        {
            COMMENT("$   OPTION      NFLS      SFLS     PARAM                         CT2CN        CN");
            CARD("%10d%10lg%10lg%10lg%20s%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS,LSD_PARAM,_BLANK_,LSD_CT2CN,LSD_CN);
        }
        else if (LSD_RESPONSE == 2 || LSD_RESPONSE == -2 || LSD_RESPONSE == 4 || LSD_RESPONSE == 6 || LSD_RESPONSE == 8 ) {
            COMMENT("$   OPTION      NFLS      SFLS     PARAM                                        ");
            CARD("%10d%10lg%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS,LSD_PARAM);
        }
        else
        {
            COMMENT("$   OPTION      NFLS      SFLS                                                  ");
            CARD("%10d%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS);
        }
    }

    if(AutoOption == 2 && TiebreaksurfOpt == 2 && LSD_RESPONSE == 9)
    {
      COMMENT("$    DMP_1     DMP_2     DMP_3");
      CARD("%10lg%10lg%10lg",LSD_DMP_1,LSD_DMP_2,LSD_DMP_3);
    }

    //THERMAL CARD 1
    if(ThermalOpt == 2 || ThermalOpt == 3)
    {
        COMMENT("$        K      FRAD        H0      LMIN      LMAX    FTOSLV    BC_FLG      ALGO");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d%10d",CF,FRAD,HTC,GCRIT,GMAX,CD_FACT,LSD_BC_FLAG,LSD_ALGO);
    }

    if(ThermalOpt == 3)
    {
        COMMENT("$    LCFST     LCFDT   FORMULA         A         B         C         D       LCH");
        CARD("%10d%10d%10d%10d%10d%10d%10d%10d",LSD_LCFST,LSD_LCFDT,LSD_FORMULA,LSD_a,LSD_b,LSD_c,LSD_d,LSD_LCH);

        if(LSD_FORMULA < 0)
        {
            ASSIGN(_dummy_FORMULA,-1*LSD_FORMULA);
            COMMENT("$      UC1       UC2       UC3       UC4       UC5       UC6       UC7       UC8");
            CELL_LIST(_dummy_FORMULA,"%10lg",LSD_UC,80);
        }
    }

    if(OrthoFrictionOption == 1)
    {
        COMMENT("$    FS1_S     FD1_S     DC1_S     VC1_S     LC1_S    OACS_S      LCFS      LCPS");
        CARD("%10lg%10lg%10lg%10lg%10d%10d%10d%10d",LSD_FS1_S,LSD_FD1_S,LSD_DC1_S,LSD_VC1_S,LSD_LC1_S,LSD_OACS_S,LSD_LCFS,LSD_LCPS);

        COMMENT("$    FS2_S     FD2_S     DC2_S     VC2_S     LC2_S");
        CARD("%10lg%10lg%10lg%10lg%10d",LSD_FS2_S,LSD_FD2_S,LSD_DC2_S,LSD_VC2_S,LSD_LC2_S);

        COMMENT("$    FS1_M     FD1_M     DC1_M     VC1_M     LC1_M    OACS_M      LCFM      LCPM");
        CARD("%10lg%10lg%10lg%10lg%10d%10d%10d%10d",LSD_FS1_M,LSD_FD1_M,LSD_DC1_M,LSD_VC1_M,LSD_LC1_M,LSD_OACS_M,LSD_LCFM,LSD_LCPM);

        COMMENT("$    FS2_M     FD2_M     DC2_M     VC2_M     LC2_M");
        CARD("%10lg%10lg%10lg%10lg%10d",LSD_FS2_M,LSD_FD2_M,LSD_DC2_M,LSD_VC2_M,LSD_LC2_M);
    }

    //Additional Cards
    if(IO_FLAG == 0 && Group_Option == 1)
    {
        // Optional Card A
        if(ContactOptionalCards >= 1)
        {
            COMMENT("$     SOFT    SOFSCL    LCIDAB    MAXPAR     SBOPT     DEPTH     BSORT    FRCFRQ");
            CARD("%10d%10lg%10d%10lg%10lg%10d%10d%10d",LSDYNA_SOFT,LSDYNA_SOFSCL,LSD_LCID2,LSDYNA_MAXPAR,LSDYNA_PENTOL,SCALAR_OR_OBJECT(LSD_DEPTHOpt, LSDYNA_DEPTH,LSD_LCID6),SCALAR_OR_OBJECT(LSD_BSORTOpt,LSDYNA_BSORT,LSD_LCID),LSDYNA_FRCFRQ);
        }
        // Optional Card B
        if (ContactOptionalCards >= 2)
        {
            COMMENT("$   PENMAX    THKOPT    SHLTHK     SNLOG      ISYM     I2D3D    SLDTHK    SLDSTF");
            CARD("%10lg%10d%10d%10d%10d%10d%10lg%10lg",LSD_PENMAX,LSD_THKOPT,LSD_SHLTHK,LSD_SNLOG,LSD_ISYM,LSD_I2D3D,LSD_SLDTHK,LSD_SLDSTF);
        }
        // Optional Card C
        if(ContactOptionalCards >= 3)
        {
            COMMENT("$     IGAP    IGNORE    DPRFAC    DTSTIF                        FLANGL   CID_RCF");
            CARD("%10d%10d%10lg%10lg%10s%10s%10lg%10d",CONT_IGAP,CONT_IGNORE,SCALAR_OR_OBJECT(CONT_DPFRAC_chkbox,CONT_DPFRAC_field,CONT_DPFRAC_entity),SCALAR_OR_OBJECT(CONT_DTSIF_chkbox,CONT_DTSIF_field,CONT_DTSIF_entity),_BLANK_,_BLANK_,CONT_FLANGL,CONT_CID_RCF);
        }
        // Optional Card D
        if(ContactOptionalCards >= 4)
        {
            COMMENT("$    Q2TRI    DTPCHK     SFNBR    FNLSCL    DNLSCL      TCSO    TIEDID    SHLEDG");
            CARD("%10d%10lg%10lg%10lg%10lg%10d%10d%10d",CONT_Q2TRI,CONT_DTPCHK,CONT_SFNBR,CONT_FNLSCL,CONT_DNLSCL,CONT_TCSO,CONT_TIEDID,CONT_SHLEDG);
        }
        // Optional Card E
        if(ContactOptionalCards == 5)
        {
            COMMENT("$   SHAREC");
            CARD("%10d", CONT_SHAREC);
        }
    }
    if(IO_FLAG == 1)    //IMPORT
    {
        //Optional Cards

        //Optional Card A
        FREE_CARD(Group_Option,"%10d%10lg%10d%10lg%10lg%10d%10d%10d",LSDYNA_SOFT,LSDYNA_SOFSCL,LSD_LCID2,LSDYNA_MAXPAR,LSDYNA_PENTOL,SCALAR_OR_OBJECT(LSD_DEPTHOpt,LSDYNA_DEPTH,LSD_LCID6),SCALAR_OR_OBJECT(LSD_BSORTOpt,LSDYNA_BSORT,LSD_LCID),LSDYNA_FRCFRQ);
        if(Group_Option == 1)
        {
            ASSIGN(ContactOptionalCards,1,IMPORT);

            //Optional Card B
            FREE_CARD(_existB,"%10lg%10d%10d%10d%10d%10d%10lg%10lg",LSD_PENMAX,LSD_THKOPT,LSD_SHLTHK,LSD_SNLOG,LSD_ISYM,LSD_I2D3D,LSD_SLDTHK,LSD_SLDSTF);
            if(_existB == 1)
            {
                ASSIGN(ContactOptionalCards,2,IMPORT);
                //Optional Card C
                FREE_CARD(_existC,"%10d%10d%10lg%10lg%20s%10lg%10d", CONT_IGAP,CONT_IGNORE,SCALAR_OR_OBJECT(CONT_DPFRAC_chkbox,CONT_DPFRAC_field,CONT_DPFRAC_entity),SCALAR_OR_OBJECT(CONT_DTSIF_chkbox,CONT_DTSIF_field,CONT_DTSIF_entity),_BLANK_,CONT_FLANGL,CONT_CID_RCF);
                if(_existC == 1)
                {
                    ASSIGN(ContactOptionalCards,3,IMPORT);
                    //Optional Card D
                    FREE_CARD(_existD,"%10d%10lg%10lg%10lg%10lg%10d%10d%10d",CONT_Q2TRI,CONT_DTPCHK,CONT_SFNBR,CONT_FNLSCL,CONT_DNLSCL,CONT_TCSO,CONT_TIEDID,CONT_SHLEDG);
                    if(_existD  == 1)
                    {
                        ASSIGN(ContactOptionalCards,4,IMPORT);
                        //Optional Card E
                        FREE_CARD(_existE,"%10d", CONT_SHAREC);
                        if(_existE  == 1)
                        {
                            ASSIGN(ContactOptionalCards,5,IMPORT);
                        }
                    }
                }
            }
        }
    }
}
FORMAT(Keyword971_R7.1)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if(IO_FLAG == 0)
    {
        //INITIAL KEYWORD_STR
        ASSIGN(KEYWORD_STR,*CONTACT_AUTOMATIC_SURFACE_TO_SURFACE,EXPORT);

        //RADIO: AutoOption
        if(AutoOption == 2)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_TIEBREAK"),EXPORT);
        }
        else if(AutoOption == 3)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_SMOOTH"),EXPORT);
        }
        else if(AutoOption == 4)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_MORTAR"),EXPORT);
        }
        else if(AutoOption == 5)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_MORTAR_TIED"),EXPORT);
        }
        //RADIO: TiebreaksurfOpt
        if(AutoOption == 2)
        {
            if(TiebreaksurfOpt == 2)
            {
                ASSIGN(_dummy,_COMBINE(_dummy,"_DAMPING"),EXPORT);
            }
            else if(TiebreaksurfOpt == 3)
            {
                ASSIGN(_dummy,_COMBINE(_dummy,"_MORTAR"), EXPORT);
            }
        }

        //RADIO: ThermalOpt
        if(ThermalOpt == 2)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_THERMAL"),EXPORT);
        }
        else if(ThermalOpt == 3)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_THERMAL_FRICTION"),EXPORT);
        }

        //FLAG: OrthoFrictionOption
        if(OrthoFrictionOption == 1)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_ORTHO_FRICTION"),EXPORT);
        }

        //FLAG: MPP
        if(mppOpt == 1)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_MPP"),EXPORT);
        }

        //FLAG: LSD_TitleOpt
        if(LSD_TitleOpt == 1)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_ID"),EXPORT);
        }

        //FINAL KEYWORD_STR
        ASSIGN(KEYWORD_STR,_COMBINE(KEYWORD_STR,_dummy),EXPORT);
        CARD("%-s",KEYWORD_STR);
    }
    else   //IMPORT
    {
        HEADER("*CONTACT_AUTOMATIC_SURFACE_TO_SURFACE%80s",_opt);

        //RADIO: AutoOption
        ASSIGN(_dummy_TIEBREAK,_FIND(_opt,"_TIEBREAK"),IMPORT);
        if(_dummy_TIEBREAK == 1)
        {
            ASSIGN(AutoOption, 2, IMPORT);
        }

        ASSIGN(_dummy_SMOOTH,_FIND(_opt,"_SMOOTH"),IMPORT);
        if(_dummy_SMOOTH == 1)
        {
            ASSIGN(AutoOption, 3, IMPORT);
        }

        ASSIGN(_dummy_MORTAR_TIED,_FIND(_opt,"_MORTAR_TIED"),IMPORT);
        if(_dummy_MORTAR_TIED == 1)
        {
            ASSIGN(AutoOption, 5, IMPORT);
        }
        ASSIGN(_dummy_MORTAR,_FIND(_opt,"_MORTAR"),IMPORT);
        if(_dummy_MORTAR == 1 && _dummy_MORTAR_TIED == 0 && AutoOption != 2)
        {
            ASSIGN(AutoOption, 4, IMPORT);
        }

        //RADIO: TiebreaksurfOpt
        if(AutoOption == 2)
        {
            ASSIGN(_dummy_DAMPING,_FIND(_opt,"_DAMPING"),IMPORT);
            if(_dummy_DAMPING == 1)
            {
                ASSIGN(TiebreaksurfOpt, 2, IMPORT);
            }
            ASSIGN(_dummy_MORTAR2,_FIND(_opt,"_MORTAR"),IMPORT);
            if(_dummy_MORTAR2 == 1)
            {
                ASSIGN(TiebreaksurfOpt, 3, IMPORT);
            }
        }

        //RADIO: ThermalOpt
        ASSIGN(_dummy_THERMAL_FRICTION,_FIND(_opt,"_THERMAL_FRICTION"),IMPORT);
        if(_dummy_THERMAL_FRICTION == 1)
        {
            ASSIGN(ThermalOpt, 3, IMPORT);
        }
        ASSIGN(_dummy_THERMAL,_FIND(_opt,"_THERMAL"),IMPORT);
        if(_dummy_THERMAL == 1 && _dummy_THERMAL_FRICTION == 0)
        {
            ASSIGN(ThermalOpt, 2, IMPORT);
        }

        //FLAG: OrthoFrictionOption
        ASSIGN(OrthoFrictionOption,_FIND(_opt,"_ORTHO_FRICTION"),IMPORT);

        //FLAG: MPP
        ASSIGN(mppOpt,_FIND(_opt,"_MPP"),IMPORT);

        //FLAG: ID
        ASSIGN(LSD_TitleOpt,_FIND(_opt,"_ID"),IMPORT);
    }

    if(IO_FLAG == 0 && LSD_TitleOpt == 1)
    {
        //ID Card
        COMMENT("$      CIDHEADING                                                               ");
        CARD("%10d%-70s", _ID_,TITLE);
    }

    // MPP card
    if(IO_FLAG == 0)
    {
        //MPP Cards
        if(mppOpt == 1)
        {
            COMMENT("$   IGNORE      BCKT    LCBCKT    NS2TRK   INITITR    PARMAX              CPARM8");
            CARD("%10d%10d%10d%10d%10d%10lg%10s%10d",TRACKPEN,BUCKET,LCBUCKET,NSEG2TRACK,INITITER,LSD_PARMAX,_BLANK_,LSD_CPARM8);

            // 2nd MPP card (optional)
            if(Option1 == 1)
            {
                COMMENT("$        &   CHKSEGS     PENSF   GRPABLE");
                CARD("&%9s%10d%10lg%10d",_BLANK_,LSD_CHKSEGS,LSD_PENSF,LSD_GRPABLE);
            }
        }
    }
    else
    {
        //MPP Cards
        if(mppOpt == 1)
        {
            //MPP Card 1
            CARD("%10d%10d%10d%10d%10d%10lg%10s%10d",TRACKPEN,BUCKET,LCBUCKET,NSEG2TRACK,INITITER,LSD_PARMAX,_BLANK_,LSD_CPARM8);

            // 2nd MPP card (optional)
            CARD_PREREAD("%-1s", card1_opt);
            if(card1_opt == "&")
            {
                CARD("&%9s%10d%10lg%10d",_BLANK_,LSD_CHKSEGS,LSD_PENSF,LSD_GRPABLE);
                ASSIGN(Option1,1,IMPORT);
            }
            else
            {
                ASSIGN(Option1,0,IMPORT);
            }
        }
    }

    // Mandatory Card 1
    COMMENT("$     SSID      MSID     SSTYP     MSTYP    SBOXID    MBOXID       SPR       MPR");
    CARD("%10d%10d%10d%10d%10d%10d%10d%10d",slaveentityids,masterentityids,SSTYP,MSTYP,ContSlaveBoxId,ContMasterBoxId,LSDYNA_SPR,LSDYNA_MPR);

    if(IO_FLAG == 1)
    {
        CARD_PREREAD("%10lg", LSDYNA_FS);
        if(LSDYNA_FS == -2 || LSDYNA_FS == -1|| LSDYNA_FS == 2)
        {
            ASSIGN(DefineFrictOpt, 1, IMPORT);
        }
        else
        {
            ASSIGN(DefineFrictOpt, 0, IMPORT);
        }
    }

    //Mandatory Card 2
    if(DefineFrictOpt == 0)
    {
        COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
        CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_FS, LSDYNA_FD,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);
    }
    else if (DefineFrictOpt == 1)
    {
        if(LSDYNA_FS == -2)
        {
            COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
            CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_FS, LSDYNA_FD_DefineFriction,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);
        }
        else if(LSDYNA_FS == -1)
        {
            COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
            CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_FS, LSDYNA_FD,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);
        }
        else if(LSDYNA_FS == 2)
        {
            COMMENT("$       FS        TB        DC        VC       VDC    PENCHK        BT        DT");
            CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_FS, LSDYNA_TB_DefineFriction,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);
        }
    }

    // Mandatory Card 3
    COMMENT("$      SFS       SFM       SST       MST      SFST      SFMT       FSF       VSF");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_SFS, LSDYNA_SFM,LSDYNA_SST,LSDYNA_MST,LSDYNA_SFST,LSDYNA_SFMT,LSDYNA_FSF,LSDYNA_VSF);

    // Card 4: AUTOMATIC_SURFACE_TIEBREAK
    if(AutoOption == 2)
    {
        CARD_PREREAD("%10d", LSD_RESPONSE);
        if(LSD_RESPONSE == 9 || LSD_RESPONSE == 11)
        {
            COMMENT("$   OPTION      NFLS      SFLS     PARAM    ERATEN    ERATES     CT2CN        CN");
            CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS,LSD_PARAM,LSD_ERATEN,LSD_ERATES,LSD_CT2CN,LSD_CN);
        }
        else if(LSD_RESPONSE == 10 || (LSD_RESPONSE == 7 && TiebreaksurfOpt != 3))
        {
            COMMENT("$   OPTION      NFLS      SFLS     PARAM    ERATEN    ERATES");
            CARD("%10d%10lg%10lg%10lg%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS,LSD_PARAM,LSD_ERATEN,LSD_ERATES);
        }
        else if(LSD_RESPONSE == 13 || LSD_RESPONSE == 14)
        {
            COMMENT("$   OPTION                         PARAM                         CT2CN        CN");
            CARD("%10d%20s%10lg%20s%10lg%10lg",LSD_RESPONSE,_BLANK_,LSD_PARAM,_BLANK_,LSD_CT2CN,LSD_CN);
        }
        else if  (LSD_RESPONSE == 7 && TiebreaksurfOpt == 3)
        {
            COMMENT("$   OPTION      NFLS      SFLS     PARAM                         CT2CN        CN");
            CARD("%10d%10lg%10lg%10lg%20s%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS,LSD_PARAM,_BLANK_,LSD_CT2CN,LSD_CN);
        }
        else if (LSD_RESPONSE == 2 || LSD_RESPONSE == -2 || LSD_RESPONSE == 4 || LSD_RESPONSE == 6 || LSD_RESPONSE == 8 ) {
            COMMENT("$   OPTION      NFLS      SFLS     PARAM                                        ");
            CARD("%10d%10lg%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS,LSD_PARAM);
        }
        else
        {
            COMMENT("$   OPTION      NFLS      SFLS                                                  ");
            CARD("%10d%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS);
        }
    }

    if(AutoOption == 2 && TiebreaksurfOpt == 2 && LSD_RESPONSE == 9)
    {
      COMMENT("$    DMP_1     DMP_2     DMP_3");
      CARD("%10lg%10lg%10lg",LSD_DMP_1,LSD_DMP_2,LSD_DMP_3);
    }

    //THERMAL CARD 1
    if(ThermalOpt == 2 || ThermalOpt == 3)
    {
        COMMENT("$        K      FRAD        H0      LMIN      LMAX    FTOSLV    BC_FLG      ALGO");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d%10d",CF,FRAD,HTC,GCRIT,GMAX,CD_FACT,LSD_BC_FLAG,LSD_ALGO);
    }

    if(ThermalOpt == 3)
    {
        COMMENT("$    LCFST     LCFDT   FORMULA         A        Bb         C         D       LCH");
        CARD("%10d%10d%10d%10d%10d%10d%10d%10d",LSD_LCFST,LSD_LCFDT,LSD_FORMULA,LSD_a,LSD_b,LSD_c,LSD_d,LSD_LCH);

        if(LSD_FORMULA < 0)
        {
            ASSIGN(_dummy_FORMULA,-1*LSD_FORMULA);
            COMMENT("$      UC1       UC2       UC3       UC4       UC5       UC6       UC7       UC8");
            CELL_LIST(_dummy_FORMULA,"%10lg",LSD_UC,80);
        }
    }

    if(OrthoFrictionOption == 1)
    {
        COMMENT("$    FS1_S     FD1_S     DC1_S     VC1_S     LC1_S    OACS_S      LCFS      LCPS");
        CARD("%10lg%10lg%10lg%10lg%10d%10d%10d%10d",LSD_FS1_S,LSD_FD1_S,LSD_DC1_S,LSD_VC1_S,LSD_LC1_S,LSD_OACS_S,LSD_LCFS,LSD_LCPS);

        COMMENT("$    FS2_S     FD2_S     DC2_S     VC2_S     LC2_S");
        CARD("%10lg%10lg%10lg%10lg%10d",LSD_FS2_S,LSD_FD2_S,LSD_DC2_S,LSD_VC2_S,LSD_LC2_S);

        COMMENT("$    FS1_M     FD1_M     DC1_M     VC1_M     LC1_M    OACS_M      LCFM      LCPM");
        CARD("%10lg%10lg%10lg%10lg%10d%10d%10d%10d",LSD_FS1_M,LSD_FD1_M,LSD_DC1_M,LSD_VC1_M,LSD_LC1_M,LSD_OACS_M,LSD_LCFM,LSD_LCPM);

        COMMENT("$    FS2_M     FD2_M     DC2_M     VC2_M     LC2_M");
        CARD("%10lg%10lg%10lg%10lg%10d",LSD_FS2_M,LSD_FD2_M,LSD_DC2_M,LSD_VC2_M,LSD_LC2_M);
    }

    //Additional Cards
    if(IO_FLAG == 0 && Group_Option == 1)
    {
        // Optional Card A
        if(ContactOptionalCards >= 1)
        {
            COMMENT("$     SOFT    SOFSCL    LCIDAB    MAXPAR     SBOPT     DEPTH     BSORT    FRCFRQ");
            CARD("%10d%10lg%10d%10lg%10lg%10d%10d%10d",LSDYNA_SOFT,LSDYNA_SOFSCL,LSD_LCID2,LSDYNA_MAXPAR,LSDYNA_PENTOL,SCALAR_OR_OBJECT(LSD_DEPTHOpt, LSDYNA_DEPTH,LSD_LCID6),SCALAR_OR_OBJECT(LSD_BSORTOpt,LSDYNA_BSORT,LSD_LCID),LSDYNA_FRCFRQ);
        }
        // Optional Card B
        if (ContactOptionalCards >= 2)
        {
            COMMENT("$   PENMAX    THKOPT    SHLTHK     SNLOG      ISYM     I2D3D    SLDTHK    SLDSTF");
            CARD("%10lg%10d%10d%10d%10d%10d%10lg%10lg",LSD_PENMAX,LSD_THKOPT,LSD_SHLTHK,LSD_SNLOG,LSD_ISYM,LSD_I2D3D,LSD_SLDTHK,LSD_SLDSTF);
        }
        // Optional Card C
        if(ContactOptionalCards >= 3)
        {
            COMMENT("$     IGAP    IGNORE    DPRFAC    DTSTIF                        FLANGL   CID_RCF");
            CARD("%10d%10d%10lg%10lg%10s%10s%10lg%10d",CONT_IGAP,CONT_IGNORE,SCALAR_OR_OBJECT(CONT_DPFRAC_chkbox,CONT_DPFRAC_field,CONT_DPFRAC_entity),SCALAR_OR_OBJECT(CONT_DTSIF_chkbox,CONT_DTSIF_field,CONT_DTSIF_entity),_BLANK_,_BLANK_,CONT_FLANGL,CONT_CID_RCF);
        }
        // Optional Card D
        if(ContactOptionalCards >= 4)
        {
            COMMENT("$    Q2TRI    DTPCHK     SFNBR    FNLSCL    DNLSCL      TCSO    TIEDID    SHLEDG");
            CARD("%10d%10lg%10lg%10lg%10lg%10d%10d%10d",CONT_Q2TRI,CONT_DTPCHK,CONT_SFNBR,CONT_FNLSCL,CONT_DNLSCL,CONT_TCSO,CONT_TIEDID,CONT_SHLEDG);
        }
        // Optional Card E
        if(ContactOptionalCards == 5)
        {
            COMMENT("$   SHAREC    CPARM8    IPBACK     SRNDE");
            CARD("%10d%10d%10d%10d", CONT_SHAREC,LSD_CPARM8_E,LSD_IPBACK_E,LSD_SRNDE);
        }
    }
    if(IO_FLAG == 1)    //IMPORT
    {
        //Optional Cards

        //Optional Card A
        FREE_CARD(Group_Option,"%10d%10lg%10d%10lg%10lg%10d%10d%10d",LSDYNA_SOFT,LSDYNA_SOFSCL,LSD_LCID2,LSDYNA_MAXPAR,LSDYNA_PENTOL,SCALAR_OR_OBJECT(LSD_DEPTHOpt,LSDYNA_DEPTH,LSD_LCID6),SCALAR_OR_OBJECT(LSD_BSORTOpt,LSDYNA_BSORT,LSD_LCID),LSDYNA_FRCFRQ);
        if(Group_Option == 1)
        {
            ASSIGN(ContactOptionalCards,1,IMPORT);

            //Optional Card B
            FREE_CARD(_existB,"%10lg%10d%10d%10d%10d%10d%10lg%10lg",LSD_PENMAX,LSD_THKOPT,LSD_SHLTHK,LSD_SNLOG,LSD_ISYM,LSD_I2D3D,LSD_SLDTHK,LSD_SLDSTF);
            if(_existB == 1)
            {
                ASSIGN(ContactOptionalCards,2,IMPORT);
                //Optional Card C
                FREE_CARD(_existC,"%10d%10d%10lg%10lg%20s%10lg%10d", CONT_IGAP,CONT_IGNORE,SCALAR_OR_OBJECT(CONT_DPFRAC_chkbox,CONT_DPFRAC_field,CONT_DPFRAC_entity),SCALAR_OR_OBJECT(CONT_DTSIF_chkbox,CONT_DTSIF_field,CONT_DTSIF_entity),_BLANK_,CONT_FLANGL,CONT_CID_RCF);
                if(_existC == 1)
                {
                    ASSIGN(ContactOptionalCards,3,IMPORT);
                    //Optional Card D
                    FREE_CARD(_existD,"%10d%10lg%10lg%10lg%10lg%10d%10d%10d",CONT_Q2TRI,CONT_DTPCHK,CONT_SFNBR,CONT_FNLSCL,CONT_DNLSCL,CONT_TCSO,CONT_TIEDID,CONT_SHLEDG);
                    if(_existD  == 1)
                    {
                        ASSIGN(ContactOptionalCards,4,IMPORT);
                        //Optional Card E
                        FREE_CARD(_existE,"%10d%10d%10d%10d", CONT_SHAREC,LSD_CPARM8_E,LSD_IPBACK_E,LSD_SRNDE);
                        if(_existE  == 1)
                        {
                            ASSIGN(ContactOptionalCards,5,IMPORT);
                        }
                    }
                }
            }
        }
    }
}

FORMAT(Keyword971_R8.0)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if(IO_FLAG == 0)
    {
        //INITIAL KEYWORD_STR
        ASSIGN(KEYWORD_STR,*CONTACT_AUTOMATIC_SURFACE_TO_SURFACE,EXPORT);

        //RADIO: AutoOption
        if(AutoOption == 2)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_TIEBREAK"),EXPORT);
        }
        else if(AutoOption == 3)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_SMOOTH"),EXPORT);
        }
        else if(AutoOption == 4)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_MORTAR"),EXPORT);
        }
        else if(AutoOption == 5)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_MORTAR_TIED"),EXPORT);
        }

        //RADIO: TiebreaksurfOpt
        if(AutoOption == 2)
        {
            if(TiebreaksurfOpt == 2)
            {
                ASSIGN(_dummy,_COMBINE(_dummy,"_DAMPING"),EXPORT);
            }
            else if(TiebreaksurfOpt == 3)
            {
                ASSIGN(_dummy,_COMBINE(_dummy,"_MORTAR"), EXPORT);
            }
        }

        //RADIO: ThermalOpt
        if(ThermalOpt == 2)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_THERMAL"),EXPORT);
        }
        else if(ThermalOpt == 3)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_THERMAL_FRICTION"),EXPORT);
        }

        //FLAG: OrthoFrictionOption
        if(OrthoFrictionOption == 1)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_ORTHO_FRICTION"),EXPORT);
        }

        //FLAG: MPP
        if(mppOpt == 1)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_MPP"),EXPORT);
        }

        //FLAG: LSD_TitleOpt
        if(LSD_TitleOpt == 1)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_ID"),EXPORT);
        }

        //FINAL KEYWORD_STR
        ASSIGN(KEYWORD_STR,_COMBINE(KEYWORD_STR,_dummy),EXPORT);
        CARD("%-s",KEYWORD_STR);
    }
    else   //IMPORT
    {
        HEADER("*CONTACT_AUTOMATIC_SURFACE_TO_SURFACE%80s",_opt);

        //RADIO: AutoOption
        ASSIGN(_dummy_TIEBREAK,_FIND(_opt,"_TIEBREAK"),IMPORT);
        if(_dummy_TIEBREAK == 1)
        {
            ASSIGN(AutoOption, 2, IMPORT);
        }

        ASSIGN(_dummy_SMOOTH,_FIND(_opt,"_SMOOTH"),IMPORT);
        if(_dummy_SMOOTH == 1)
        {
            ASSIGN(AutoOption, 3, IMPORT);
        }

        ASSIGN(_dummy_MORTAR_TIED,_FIND(_opt,"_MORTAR_TIED"),IMPORT);
        if(_dummy_MORTAR_TIED == 1)
        {
            ASSIGN(AutoOption, 5, IMPORT);
        }
        ASSIGN(_dummy_MORTAR,_FIND(_opt,"_MORTAR"),IMPORT);
        if(_dummy_MORTAR == 1 && _dummy_MORTAR_TIED == 0 && AutoOption != 2)
        {
            ASSIGN(AutoOption, 4, IMPORT);
        }

        //RADIO: TiebreaksurfOpt
        if(AutoOption == 2)
        {
            ASSIGN(_dummy_DAMPING,_FIND(_opt,"_DAMPING"),IMPORT);
            if(_dummy_DAMPING == 1)
            {
                ASSIGN(TiebreaksurfOpt, 2, IMPORT);
            }
            ASSIGN(_dummy_MORTAR2,_FIND(_opt,"_MORTAR"),IMPORT);
            if(_dummy_MORTAR2 == 1)
            {
                ASSIGN(TiebreaksurfOpt, 3, IMPORT);
            }
        }

        //RADIO: ThermalOpt
        ASSIGN(_dummy_THERMAL_FRICTION,_FIND(_opt,"_THERMAL_FRICTION"),IMPORT);
        if(_dummy_THERMAL_FRICTION == 1)
        {
            ASSIGN(ThermalOpt, 3, IMPORT);
        }
        ASSIGN(_dummy_THERMAL,_FIND(_opt,"_THERMAL"),IMPORT);
        if(_dummy_THERMAL == 1 && _dummy_THERMAL_FRICTION == 0)
        {
            ASSIGN(ThermalOpt, 2, IMPORT);
        }

        //FLAG: OrthoFrictionOption
        ASSIGN(OrthoFrictionOption,_FIND(_opt,"_ORTHO_FRICTION"),IMPORT);

        //FLAG: MPP
        ASSIGN(mppOpt,_FIND(_opt,"_MPP"),IMPORT);

        //FLAG: ID
        ASSIGN(LSD_TitleOpt,_FIND(_opt,"_ID"),IMPORT);
    }

    if(IO_FLAG == 0 && LSD_TitleOpt == 1)
    {
        //ID Card
        COMMENT("$      CIDHEADING                                                               ");
        CARD("%10d%-70s", _ID_,TITLE);
    }

    // MPP card
    if(IO_FLAG == 0)
    {
        //MPP Cards
        if(mppOpt == 1)
        {
            COMMENT("$   IGNORE      BCKT    LCBCKT    NS2TRK   INITITR    PARMAX              CPARM8");
            CARD("%10d%10d%10d%10d%10d%10lg%10s%10d",TRACKPEN,BUCKET,LCBUCKET,NSEG2TRACK,INITITER,LSD_PARMAX,_BLANK_,LSD_CPARM8);

            // 2nd MPP card (optional)
            if(Option1 == 1)
            {
                COMMENT("$        &   CHKSEGS     PENSF   GRPABLE");
                CARD("&%9s%10d%10lg%10d",_BLANK_,LSD_CHKSEGS,LSD_PENSF,LSD_GRPABLE);
            }
        }
    }
    else
    {
        //MPP Cards
        if(mppOpt == 1)
        {
            //MPP Card 1
            CARD("%10d%10d%10d%10d%10d%10lg%10s%10d",TRACKPEN,BUCKET,LCBUCKET,NSEG2TRACK,INITITER,LSD_PARMAX,_BLANK_,LSD_CPARM8);

            // 2nd MPP card (optional)
            CARD_PREREAD("%-1s", card1_opt);
            if(card1_opt == "&")
            {
                CARD("&%9s%10d%10lg%10d",_BLANK_,LSD_CHKSEGS,LSD_PENSF,LSD_GRPABLE);
                ASSIGN(Option1,1,IMPORT);
            }
            else
            {
                ASSIGN(Option1,0,IMPORT);
            }
        }
    }

    // Mandatory Card 1
    COMMENT("$     SSID      MSID     SSTYP     MSTYP    SBOXID    MBOXID       SPR       MPR");
    CARD("%10d%10d%10d%10d%10d%10d%10d%10d",slaveentityids,masterentityids,SSTYP,MSTYP,ContSlaveBoxId,ContMasterBoxId,LSDYNA_SPR,LSDYNA_MPR);

    if(IO_FLAG == 1)
    {
        CARD_PREREAD("%10lg", LSDYNA_FS);
        if(LSDYNA_FS == -2 || LSDYNA_FS == -1|| LSDYNA_FS == 2)
        {
            ASSIGN(DefineFrictOpt, 1, IMPORT);
        }
        else
        {
            ASSIGN(DefineFrictOpt, 0, IMPORT);
        }
    }

    //Mandatory Card 2
    if(DefineFrictOpt == 0)
    {
        COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
        CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_FS, LSDYNA_FD,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);
    }
    else if (DefineFrictOpt == 1)
    {
        if(LSDYNA_FS == -2)
        {
            COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
            CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_FS, LSDYNA_FD_DefineFriction,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);
        }
        else if(LSDYNA_FS == -1)
        {
            COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
            CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_FS, LSDYNA_FD,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);
        }
        else if(LSDYNA_FS == 2)
        {
            COMMENT("$       FS        TB        DC        VC       VDC    PENCHK        BT        DT");
            CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_FS, LSDYNA_TB_DefineFriction,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);
        }
    }

    // Mandatory Card 3
    COMMENT("$      SFS       SFM       SST       MST      SFST      SFMT       FSF       VSF");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_SFS, LSDYNA_SFM,LSDYNA_SST,LSDYNA_MST,LSDYNA_SFST,LSDYNA_SFMT,LSDYNA_FSF,LSDYNA_VSF);

    // Card 4: AUTOMATIC_SURFACE_TIEBREAK
    if(AutoOption == 2)
    {
        CARD_PREREAD("%10d", LSD_RESPONSE);
        if(LSD_RESPONSE == 9 || LSD_RESPONSE == 11)
        {
            COMMENT("$   OPTION      NFLS      SFLS     PARAM    ERATEN    ERATES     CT2CN        CN");
            CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS,LSD_PARAM,LSD_ERATEN,LSD_ERATES,LSD_CT2CN,LSD_CN);
        }
        else if(LSD_RESPONSE == 10 || (LSD_RESPONSE == 7 && TiebreaksurfOpt != 3))
        {
            COMMENT("$   OPTION      NFLS      SFLS     PARAM    ERATEN    ERATES");
            CARD("%10d%10lg%10lg%10lg%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS,LSD_PARAM,LSD_ERATEN,LSD_ERATES);
        }
        else if(LSD_RESPONSE == 13 || LSD_RESPONSE == 14)
        {
            COMMENT("$   OPTION                         PARAM                         CT2CN        CN");
            CARD("%10d%20s%10lg%20s%10lg%10lg",LSD_RESPONSE,_BLANK_,LSD_PARAM,_BLANK_,LSD_CT2CN,LSD_CN);
        }
        else if  (LSD_RESPONSE == 7 && TiebreaksurfOpt == 3)
        {
            COMMENT("$   OPTION      NFLS      SFLS     PARAM                         CT2CN        CN");
            CARD("%10d%10lg%10lg%10lg%20s%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS,LSD_PARAM,_BLANK_,LSD_CT2CN,LSD_CN);
        }
        else if (LSD_RESPONSE == 2 || LSD_RESPONSE == -2 || LSD_RESPONSE == 4 || LSD_RESPONSE == 6 || LSD_RESPONSE == 8 ) {
            COMMENT("$   OPTION      NFLS      SFLS     PARAM                                        ");
            CARD("%10d%10lg%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS,LSD_PARAM);
        }
        else
        {
            COMMENT("$   OPTION      NFLS      SFLS                                                  ");
            CARD("%10d%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS);
        }
    }

    if((AutoOption == 2) && (TiebreaksurfOpt == 2) && LSD_RESPONSE == 9)
    {
      COMMENT("$    DMP_1     DMP_2     DMP_3");
      CARD("%10lg%10lg%10lg",LSD_DMP_1,LSD_DMP_2,LSD_DMP_3);
    }

    //THERMAL CARD 1
    if(ThermalOpt == 2 || ThermalOpt == 3)
    {
        COMMENT("$        K      FRAD        H0      LMIN      LMAX    FTOSLV    BC_FLG      ALGO");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d%10d",CF,FRAD,HTC,GCRIT,GMAX,CD_FACT,LSD_BC_FLAG,LSD_ALGO);
    }

    if(ThermalOpt == 3)
    {
        COMMENT("$    LCFST     LCFDT   FORMULA         A         B         C         D       LCH");
        CARD("%10d%10d%10d%10d%10d%10d%10d%10d",LSD_LCFST,LSD_LCFDT,LSD_FORMULA,LSD_a,LSD_b,LSD_c,LSD_d,LSD_LCH);

        if(LSD_FORMULA < 0)
        {
            ASSIGN(_dummy_FORMULA,-1*LSD_FORMULA);
            COMMENT("$      UC1       UC2       UC3       UC4       UC5       UC6       UC7       UC8");
            CELL_LIST(_dummy_FORMULA,"%10lg",LSD_UC,80);
        }
    }

    if(OrthoFrictionOption == 1)
    {
        COMMENT("$    FS1_S     FD1_S     DC1_S     VC1_S     LC1_S    OACS_S      LCFS      LCPS");
        CARD("%10lg%10lg%10lg%10lg%10d%10d%10d%10d",LSD_FS1_S,LSD_FD1_S,LSD_DC1_S,LSD_VC1_S,LSD_LC1_S,LSD_OACS_S,LSD_LCFS,LSD_LCPS);

        COMMENT("$    FS2_S     FD2_S     DC2_S     VC2_S     LC2_S");
        CARD("%10lg%10lg%10lg%10lg%10d",LSD_FS2_S,LSD_FD2_S,LSD_DC2_S,LSD_VC2_S,LSD_LC2_S);

        COMMENT("$    FS1_M     FD1_M     DC1_M     VC1_M     LC1_M    OACS_M      LCFM      LCPM");
        CARD("%10lg%10lg%10lg%10lg%10d%10d%10d%10d",LSD_FS1_M,LSD_FD1_M,LSD_DC1_M,LSD_VC1_M,LSD_LC1_M,LSD_OACS_M,LSD_LCFM,LSD_LCPM);

        COMMENT("$    FS2_M     FD2_M     DC2_M     VC2_M     LC2_M");
        CARD("%10lg%10lg%10lg%10lg%10d",LSD_FS2_M,LSD_FD2_M,LSD_DC2_M,LSD_VC2_M,LSD_LC2_M);
    }

    //Additional Cards
    if(IO_FLAG == 0 && Group_Option == 1)
    {
        // Optional Card A
        if(ContactOptionalCards >= 1)
        {
            COMMENT("$     SOFT    SOFSCL    LCIDAB    MAXPAR     SBOPT     DEPTH     BSORT    FRCFRQ");
            CARD("%10d%10lg%10d%10lg%10lg%10d%10d%10d",LSDYNA_SOFT,LSDYNA_SOFSCL,LSD_LCID2,LSDYNA_MAXPAR,LSDYNA_PENTOL,SCALAR_OR_OBJECT(LSD_DEPTHOpt, LSDYNA_DEPTH,LSD_LCID6),SCALAR_OR_OBJECT(LSD_BSORTOpt,LSDYNA_BSORT,LSD_LCID),LSDYNA_FRCFRQ);
        }
        // Optional Card B
        if (ContactOptionalCards >= 2)
        {
            COMMENT("$   PENMAX    THKOPT    SHLTHK     SNLOG      ISYM     I2D3D    SLDTHK    SLDSTF");
            CARD("%10lg%10d%10d%10d%10d%10d%10lg%10lg",LSD_PENMAX,LSD_THKOPT,LSD_SHLTHK,LSD_SNLOG,LSD_ISYM,LSD_I2D3D,LSD_SLDTHK,LSD_SLDSTF);
        }
        // Optional Card C
        if(ContactOptionalCards >= 3)
        {
            COMMENT("$     IGAP    IGNORE    DPRFAC    DTSTIF                        FLANGL   CID_RCF");
            CARD("%10d%10d%10lg%10lg%10s%10s%10lg%10d",CONT_IGAP,CONT_IGNORE,SCALAR_OR_OBJECT(CONT_DPFRAC_chkbox,CONT_DPFRAC_field,CONT_DPFRAC_entity),SCALAR_OR_OBJECT(CONT_DTSIF_chkbox,CONT_DTSIF_field,CONT_DTSIF_entity),_BLANK_,_BLANK_,CONT_FLANGL,CONT_CID_RCF);
        }
        // Optional Card D
        if(ContactOptionalCards >= 4)
        {
            COMMENT("$    Q2TRI    DTPCHK     SFNBR    FNLSCL    DNLSCL      TCSO    TIEDID    SHLEDG");
            CARD("%10d%10lg%10lg%10lg%10lg%10d%10d%10d",CONT_Q2TRI,CONT_DTPCHK,CONT_SFNBR,CONT_FNLSCL,CONT_DNLSCL,CONT_TCSO,CONT_TIEDID,CONT_SHLEDG);
        }
        // Optional Card E
        if(ContactOptionalCards == 5)
        {
            COMMENT("$   SHAREC    CPARM8    IPBACK     SRNDE                ICOR");
            CARD("%10d%10d%10d%10d%10s%10d", CONT_SHAREC,LSD_CPARM8_E,LSD_IPBACK_E,LSD_SRNDE,_BLANK_,LSD_ICOR);
        }
    }
    if(IO_FLAG == 1)    //IMPORT
    {
        //Optional Cards

        //Optional Card A
        FREE_CARD(Group_Option,"%10d%10lg%10d%10lg%10lg%10d%10d%10d",LSDYNA_SOFT,LSDYNA_SOFSCL,LSD_LCID2,LSDYNA_MAXPAR,LSDYNA_PENTOL,SCALAR_OR_OBJECT(LSD_DEPTHOpt,LSDYNA_DEPTH,LSD_LCID6),SCALAR_OR_OBJECT(LSD_BSORTOpt,LSDYNA_BSORT,LSD_LCID),LSDYNA_FRCFRQ);
        if(Group_Option == 1)
        {
            ASSIGN(ContactOptionalCards,1,IMPORT);

            //Optional Card B
            FREE_CARD(_existB,"%10lg%10d%10d%10d%10d%10d%10lg%10lg",LSD_PENMAX,LSD_THKOPT,LSD_SHLTHK,LSD_SNLOG,LSD_ISYM,LSD_I2D3D,LSD_SLDTHK,LSD_SLDSTF);
            if(_existB == 1)
            {
                ASSIGN(ContactOptionalCards,2,IMPORT);
                //Optional Card C
                FREE_CARD(_existC,"%10d%10d%10lg%10lg%20s%10lg%10d", CONT_IGAP,CONT_IGNORE,SCALAR_OR_OBJECT(CONT_DPFRAC_chkbox,CONT_DPFRAC_field,CONT_DPFRAC_entity),SCALAR_OR_OBJECT(CONT_DTSIF_chkbox,CONT_DTSIF_field,CONT_DTSIF_entity),_BLANK_,CONT_FLANGL,CONT_CID_RCF);
                if(_existC == 1)
                {
                    ASSIGN(ContactOptionalCards,3,IMPORT);
                    //Optional Card D
                    FREE_CARD(_existD,"%10d%10lg%10lg%10lg%10lg%10d%10d%10d",CONT_Q2TRI,CONT_DTPCHK,CONT_SFNBR,CONT_FNLSCL,CONT_DNLSCL,CONT_TCSO,CONT_TIEDID,CONT_SHLEDG);
                    if(_existD  == 1)
                    {
                        ASSIGN(ContactOptionalCards,4,IMPORT);
                        //Optional Card E
                        FREE_CARD(_existE,"%10d%10d%10d%10d%10s%10d", CONT_SHAREC,LSD_CPARM8_E,LSD_IPBACK_E,LSD_SRNDE,_BLANK_,LSD_ICOR);
                        if(_existE  == 1)
                        {
                            ASSIGN(ContactOptionalCards,5,IMPORT);
                        }
                    }
                }
            }
        }
    }
}

FORMAT(Keyword971_R9.3)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if(IO_FLAG == 0)
    {
        //INITIAL KEYWORD_STR
        ASSIGN(KEYWORD_STR,*CONTACT_AUTOMATIC_SURFACE_TO_SURFACE,EXPORT);

        //RADIO: AutoOption
        if(AutoOption == 2)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_TIEBREAK"),EXPORT);
        }
        else if(AutoOption == 3)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_SMOOTH"),EXPORT);
        }
        else if(AutoOption == 4)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_MORTAR"),EXPORT);
        }
        else if(AutoOption == 5)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_MORTAR_TIED"),EXPORT);
        }
        else if(AutoOption == 6)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_COMPOSITE"),EXPORT);
        }
        else if(AutoOption == 7)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_TIED_WELD"),EXPORT);
        }
        else if(AutoOption == 8)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_MORTAR_TIED_WELD"),EXPORT);
        }

        //RADIO: TiebreaksurfOpt
        if(AutoOption == 2)
        {
            if(TiebreaksurfOpt == 2)
            {
                ASSIGN(_dummy,_COMBINE(_dummy,"_DAMPING"),EXPORT);
            }
            else if(TiebreaksurfOpt == 3)
            {
                ASSIGN(_dummy,_COMBINE(_dummy,"_MORTAR"), EXPORT);
            }
        }

        //RADIO: ThermalOpt
        if(ThermalOpt == 2)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_THERMAL"),EXPORT);
        }
        else if(ThermalOpt == 3)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_THERMAL_FRICTION"),EXPORT);
        }

        //FLAG: OrthoFrictionOption
        if(OrthoFrictionOption == 1)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_ORTHO_FRICTION"),EXPORT);
        }

        //FLAG: MPP
        if(mppOpt == 1)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_MPP"),EXPORT);
        }

        //FLAG: LSD_TitleOpt
        if(LSD_TitleOpt == 1)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_ID"),EXPORT);
        }

        //FINAL KEYWORD_STR
        ASSIGN(KEYWORD_STR,_COMBINE(KEYWORD_STR,_dummy),EXPORT);
        CARD("%-s",KEYWORD_STR);
    }
    else   //IMPORT
    {
        HEADER("*CONTACT_AUTOMATIC_SURFACE_TO_SURFACE%80s",_opt);

        //RADIO: AutoOption
        ASSIGN(_dummy_TIEBREAK,_FIND(_opt,"_TIEBREAK"),IMPORT);
        if(_dummy_TIEBREAK == 1)
        {
            ASSIGN(AutoOption, 2, IMPORT);
        }

        ASSIGN(_dummy_SMOOTH,_FIND(_opt,"_SMOOTH"),IMPORT);
        if(_dummy_SMOOTH == 1)
        {
            ASSIGN(AutoOption, 3, IMPORT);
        }

        ASSIGN(_dummy_MORTAR_TIED_WELD,_FIND(_opt,"_MORTAR_TIED_WELD"),IMPORT);
        if(_dummy_MORTAR_TIED_WELD == 1)
        {
            ASSIGN(AutoOption, 8, IMPORT);
        }
        ASSIGN(_dummy_MORTAR_TIED,_FIND(_opt,"_MORTAR_TIED"),IMPORT);
        if(_dummy_MORTAR_TIED == 1 && _dummy_MORTAR_TIED_WELD == 0)
        {
            ASSIGN(AutoOption, 5, IMPORT);
        }
        ASSIGN(_dummy_TIED_WELD,_FIND(_opt,"_TIED_WELD"),IMPORT);
        if(_dummy_TIED_WELD == 1 && _dummy_MORTAR_TIED_WELD == 0 && _dummy_MORTAR_TIED == 0)
        {
            ASSIGN(AutoOption, 7, IMPORT);
        }
        ASSIGN(_dummy_MORTAR,_FIND(_opt,"_MORTAR"),IMPORT);
        if(_dummy_MORTAR == 1 && _dummy_MORTAR_TIED == 0 && _dummy_MORTAR_TIED_WELD == 0 && AutoOption != 2)
        {
            ASSIGN(AutoOption, 4, IMPORT);
        }

        ASSIGN(_dummy_COMPOSITE,_FIND(_opt,"_COMPOSITE"),IMPORT);
        if(_dummy_COMPOSITE == 1)
        {
            ASSIGN(AutoOption, 6, IMPORT);
        }

        //RADIO: TiebreaksurfOpt
        if(AutoOption == 2)
        {
            ASSIGN(_dummy_DAMPING,_FIND(_opt,"_DAMPING"),IMPORT);
            if(_dummy_DAMPING == 1)
            {
                ASSIGN(TiebreaksurfOpt, 2, IMPORT);
            }
            ASSIGN(_dummy_MORTAR2,_FIND(_opt,"_MORTAR"),IMPORT);
            if(_dummy_MORTAR2 == 1)
            {
                ASSIGN(TiebreaksurfOpt, 3, IMPORT);
            }
        }

        //RADIO: ThermalOpt
        ASSIGN(_dummy_THERMAL_FRICTION,_FIND(_opt,"_THERMAL_FRICTION"),IMPORT);
        if(_dummy_THERMAL_FRICTION == 1)
        {
            ASSIGN(ThermalOpt, 3, IMPORT);
        }
        ASSIGN(_dummy_THERMAL,_FIND(_opt,"_THERMAL"),IMPORT);
        if(_dummy_THERMAL == 1 && _dummy_THERMAL_FRICTION == 0)
        {
            ASSIGN(ThermalOpt, 2, IMPORT);
        }

        //FLAG: OrthoFrictionOption
        ASSIGN(OrthoFrictionOption,_FIND(_opt,"_ORTHO_FRICTION"),IMPORT);

        //FLAG: MPP
        ASSIGN(mppOpt,_FIND(_opt,"_MPP"),IMPORT);

        //FLAG: ID
        ASSIGN(LSD_TitleOpt,_FIND(_opt,"_ID"),IMPORT);
    }

    if(IO_FLAG == 0 && LSD_TitleOpt == 1)
    {
        //ID Card
        COMMENT("$      CIDHEADING                                                               ");
        CARD("%10d%-70s", _ID_,TITLE);
    }

    // MPP card
    if(IO_FLAG == 0)
    {
        //MPP Cards
        if(mppOpt == 1)
        {
            COMMENT("$   IGNORE      BCKT    LCBCKT    NS2TRK   INITITR    PARMAX              CPARM8");
            CARD("%10d%10d%10d%10d%10d%10lg%10s%10d",TRACKPEN,BUCKET,LCBUCKET,NSEG2TRACK,INITITER,LSD_PARMAX,_BLANK_,LSD_CPARM8);

            // 2nd MPP card (optional)
            if(Option1 == 1)
            {
                COMMENT("$        &   CHKSEGS     PENSF   GRPABLE");
                CARD("&%9s%10d%10lg%10d",_BLANK_,LSD_CHKSEGS,LSD_PENSF,LSD_GRPABLE);
            }
        }
    }
    else
    {
        //MPP Cards
        if(mppOpt == 1)
        {
            //MPP Card 1
            CARD("%10d%10d%10d%10d%10d%10lg%10s%10d",TRACKPEN,BUCKET,LCBUCKET,NSEG2TRACK,INITITER,LSD_PARMAX,_BLANK_,LSD_CPARM8);

            // 2nd MPP card (optional)
            CARD_PREREAD("%-1s", card1_opt);
            if(card1_opt == "&")
            {
                CARD("&%9s%10d%10lg%10d",_BLANK_,LSD_CHKSEGS,LSD_PENSF,LSD_GRPABLE);
                ASSIGN(Option1,1,IMPORT);
            }
            else
            {
                ASSIGN(Option1,0,IMPORT);
            }
        }
    }

    // Mandatory Card 1
    COMMENT("$     SSID      MSID     SSTYP     MSTYP    SBOXID    MBOXID       SPR       MPR");
    CARD("%10d%10d%10d%10d%10d%10d%10d%10d",slaveentityids,masterentityids,SSTYP,MSTYP,ContSlaveBoxId,ContMasterBoxId,LSDYNA_SPR,LSDYNA_MPR);

    if(IO_FLAG == 1)
    {
        CARD_PREREAD("%10lg", LSDYNA_FS);
        if(LSDYNA_FS == -2 || LSDYNA_FS == -1|| LSDYNA_FS == 2)
        {
            ASSIGN(DefineFrictOpt, 1, IMPORT);
        }
        else
        {
            ASSIGN(DefineFrictOpt, 0, IMPORT);
        }
    }

    //Mandatory Card 2
    if(DefineFrictOpt == 0)
    {
        COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
        CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_FS, LSDYNA_FD,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);
    }
    else if (DefineFrictOpt == 1)
    {
        if(LSDYNA_FS == -2)
        {
            COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
            CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_FS, LSDYNA_FD_DefineFriction,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);
        }
        else if(LSDYNA_FS == -1)
        {
            COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
            CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_FS, LSDYNA_FD,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);
        }
        else if(LSDYNA_FS == 2)
        {
            COMMENT("$       FS        TB        DC        VC       VDC    PENCHK        BT        DT");
            CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_FS, LSDYNA_TB_DefineFriction,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);
        }
    }

    // Mandatory Card 3
    COMMENT("$      SFS       SFM       SST       MST      SFST      SFMT       FSF       VSF");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_SFS, LSDYNA_SFM,LSDYNA_SST,LSDYNA_MST,LSDYNA_SFST,LSDYNA_SFMT,LSDYNA_FSF,LSDYNA_VSF);

    // Card 4: AUTOMATIC_SURFACE_TIEBREAK
    if(AutoOption == 2)
    {
        CARD_PREREAD("%10d", LSD_RESPONSE);
        if(LSD_RESPONSE == 9 || LSD_RESPONSE == 11)
        {
            COMMENT("$   OPTION      NFLS      SFLS     PARAM    ERATEN    ERATES     CT2CN        CN");
            CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS,LSD_PARAM,LSD_ERATEN,LSD_ERATES,LSD_CT2CN,LSD_CN);
        }
        else if(LSD_RESPONSE == 10 || (LSD_RESPONSE == 7 && TiebreaksurfOpt != 3))
        {
            COMMENT("$   OPTION      NFLS      SFLS     PARAM    ERATEN    ERATES");
            CARD("%10d%10lg%10lg%10lg%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS,LSD_PARAM,LSD_ERATEN,LSD_ERATES);
        }
        else if(LSD_RESPONSE == 13 || LSD_RESPONSE == 14)
        {
            COMMENT("$   OPTION                         PARAM                         CT2CN        CN");
            CARD("%10d%20s%10lg%20s%10lg%10lg",LSD_RESPONSE,_BLANK_,LSD_PARAM,_BLANK_,LSD_CT2CN,LSD_CN);
        }
        else if  (LSD_RESPONSE == 7 && TiebreaksurfOpt == 3)
        {
            COMMENT("$   OPTION      NFLS      SFLS     PARAM                         CT2CN        CN");
            CARD("%10d%10lg%10lg%10lg%20s%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS,LSD_PARAM,_BLANK_,LSD_CT2CN,LSD_CN);
        }
        else if (LSD_RESPONSE == 2 || LSD_RESPONSE == -2 || LSD_RESPONSE == 4 || LSD_RESPONSE == 6 || LSD_RESPONSE == 8 ) {
            COMMENT("$   OPTION      NFLS      SFLS     PARAM                                        ");
            CARD("%10d%10lg%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS,LSD_PARAM);
        }
        else
        {
            COMMENT("$   OPTION      NFLS      SFLS                                                  ");
            CARD("%10d%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS);
        }
    }

    if((AutoOption == 2) && (TiebreaksurfOpt == 2) && LSD_RESPONSE == 9)
    {
      COMMENT("$    DMP_1     DMP_2     DMP_3");
      CARD("%10lg%10lg%10lg",LSD_DMP_1,LSD_DMP_2,LSD_DMP_3);
    }

    // Card 4: AUTOMATIC_SURFACE_TO_SURFACE_COMPOSITE
    if(AutoOption == 6)
    {
      COMMENT("$    TFAIL     MODEL    CIDTAU     CIDNU         D");
      CARD("%10lg%10d%10d%10d%10lg",CONTROL_TFAIL,CONTROL_MODEL,CONTROL_CIDTAU,CONTROL_CIDNU,CONTROL_D);
    }

    // Card 4: AUTOMATIC_SURFACE_TO_SURFACE_TIED_WELD
    if((AutoOption == 7 || AutoOption == 8) && (ThermalOpt == 2 || ThermalOpt == 3))
    {
      COMMENT("$     TEMP     CLOSE");
      CARD("%10lg%10lg",CONTROL_TEMP,CONTROL_CLOSE);
    }
    else if((AutoOption == 7 || AutoOption == 8) && ThermalOpt == 1)
    {
      COMMENT("$     TEMP     CLOSE");
      CARD("%10lg%10lg",CONTROL_TEMP,CONTROL_CLOSE);
    }

    //THERMAL CARD 1
    if(ThermalOpt == 2 || ThermalOpt == 3)
    {
        COMMENT("$        K      FRAD        H0      LMIN      LMAX    FTOSLV    BC_FLG      ALGO");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d%10d",CF,FRAD,HTC,GCRIT,GMAX,CD_FACT,LSD_BC_FLAG,LSD_ALGO);
    }

    if(ThermalOpt == 3)
    {
        COMMENT("$    LCFST     LCFDT   FORMULA         A         B         C         D       LCH");
        CARD("%10d%10d%10d%10d%10d%10d%10d%10d",LSD_LCFST,LSD_LCFDT,LSD_FORMULA,LSD_a,LSD_b,LSD_c,LSD_d,LSD_LCH);

        if(LSD_FORMULA < 0)
        {
            ASSIGN(_dummy_FORMULA,-1*LSD_FORMULA);
            COMMENT("$      UC1       UC2       UC3       UC4       UC5       UC6       UC7       UC8");
            CELL_LIST(_dummy_FORMULA,"%10lg",LSD_UC,80);
        }
    }

    if(OrthoFrictionOption == 1)
    {
        COMMENT("$    FS1_S     FD1_S     DC1_S     VC1_S     LC1_S    OACS_S      LCFS      LCPS");
        CARD("%10lg%10lg%10lg%10lg%10d%10d%10d%10d",LSD_FS1_S,LSD_FD1_S,LSD_DC1_S,LSD_VC1_S,LSD_LC1_S,LSD_OACS_S,LSD_LCFS,LSD_LCPS);

        COMMENT("$    FS2_S     FD2_S     DC2_S     VC2_S     LC2_S");
        CARD("%10lg%10lg%10lg%10lg%10d",LSD_FS2_S,LSD_FD2_S,LSD_DC2_S,LSD_VC2_S,LSD_LC2_S);

        COMMENT("$    FS1_M     FD1_M     DC1_M     VC1_M     LC1_M    OACS_M      LCFM      LCPM");
        CARD("%10lg%10lg%10lg%10lg%10d%10d%10d%10d",LSD_FS1_M,LSD_FD1_M,LSD_DC1_M,LSD_VC1_M,LSD_LC1_M,LSD_OACS_M,LSD_LCFM,LSD_LCPM);

        COMMENT("$    FS2_M     FD2_M     DC2_M     VC2_M     LC2_M");
        CARD("%10lg%10lg%10lg%10lg%10d",LSD_FS2_M,LSD_FD2_M,LSD_DC2_M,LSD_VC2_M,LSD_LC2_M);
    }

    //Additional Cards
    if(IO_FLAG == 0 && Group_Option == 1)
    {
        // Optional Card A
        if(ContactOptionalCards >= 1)
        {
            COMMENT("$     SOFT    SOFSCL    LCIDAB    MAXPAR     SBOPT     DEPTH     BSORT    FRCFRQ");
            CARD("%10d%10lg%10d%10lg%10lg%10d%10d%10d",LSDYNA_SOFT,LSDYNA_SOFSCL,LSD_LCID2,LSDYNA_MAXPAR,LSDYNA_PENTOL,SCALAR_OR_OBJECT(LSD_DEPTHOpt, LSDYNA_DEPTH,LSD_LCID6),SCALAR_OR_OBJECT(LSD_BSORTOpt,LSDYNA_BSORT,LSD_LCID),LSDYNA_FRCFRQ);
        }
        // Optional Card B
        if (ContactOptionalCards >= 2)
        {
            COMMENT("$   PENMAX    THKOPT    SHLTHK     SNLOG      ISYM     I2D3D    SLDTHK    SLDSTF");
            CARD("%10lg%10d%10d%10d%10d%10d%10lg%10lg",LSD_PENMAX,LSD_THKOPT,LSD_SHLTHK,LSD_SNLOG,LSD_ISYM,LSD_I2D3D,LSD_SLDTHK,LSD_SLDSTF);
        }
        // Optional Card C
        if(ContactOptionalCards >= 3)
        {
            COMMENT("$     IGAP    IGNORE    DPRFAC    DTSTIF                        FLANGL   CID_RCF");
            CARD("%10d%10d%10lg%10lg%10s%10s%10lg%10d",CONT_IGAP,CONT_IGNORE,SCALAR_OR_OBJECT(CONT_DPFRAC_chkbox,CONT_DPFRAC_field,CONT_DPFRAC_entity),SCALAR_OR_OBJECT(CONT_DTSIF_chkbox,CONT_DTSIF_field,CONT_DTSIF_entity),_BLANK_,_BLANK_,CONT_FLANGL,CONT_CID_RCF);
        }
        // Optional Card D
        if(ContactOptionalCards >= 4)
        {
            COMMENT("$    Q2TRI    DTPCHK     SFNBR    FNLSCL    DNLSCL      TCSO    TIEDID    SHLEDG");
            CARD("%10d%10lg%10lg%10lg%10lg%10d%10d%10d",CONT_Q2TRI,CONT_DTPCHK,CONT_SFNBR,CONT_FNLSCL,CONT_DNLSCL,CONT_TCSO,CONT_TIEDID,CONT_SHLEDG);
        }
        // Optional Card E
        if(ContactOptionalCards >= 5)
        {
            if (LSDYNA_SOFT == 2)
            {
                COMMENT("$   SHAREC    CPARM8    IPBACK     SRNDE    FRICSF      ICOR     FTORQ    REGION");
                CARD("%10d%10d%10d%10d%10lg%10d%10d%10d",CONT_SHAREC,LSD_CPARM8_E,LSD_IPBACK_E,LSD_SRNDE,LSD_FRICSF,LSD_ICOR,LSD_FTORQ,LSD_REGION);
            }
            else
            {
                COMMENT("$   SHAREC    CPARM8    IPBACK     SRNDE                ICOR     FTORQ    REGION");
                CARD("%10d%10d%10d%10d%10s%10d%10d%10d",CONT_SHAREC,LSD_CPARM8_E,LSD_IPBACK_E,LSD_SRNDE,_BLANK_,LSD_ICOR,LSD_FTORQ,LSD_REGION);
            }
        }
        // Optional Card F
        if(ContactOptionalCards == 6)
        {
            COMMENT("$   PSTIFF   IGNROFF");
            CARD("%10d%10d",CONT_PSTIFF,LSD_IGNROFF);
        }
    }
    if(IO_FLAG == 1)    //IMPORT
    {
        //Optional Cards

        //Optional Card A
        FREE_CARD(Group_Option,"%10d%10lg%10d%10lg%10lg%10d%10d%10d",LSDYNA_SOFT,LSDYNA_SOFSCL,LSD_LCID2,LSDYNA_MAXPAR,LSDYNA_PENTOL,SCALAR_OR_OBJECT(LSD_DEPTHOpt,LSDYNA_DEPTH,LSD_LCID6),SCALAR_OR_OBJECT(LSD_BSORTOpt,LSDYNA_BSORT,LSD_LCID),LSDYNA_FRCFRQ);
        if(Group_Option == 1)
        {
            ASSIGN(ContactOptionalCards,1,IMPORT);

            //Optional Card B
            FREE_CARD(_existB,"%10lg%10d%10d%10d%10d%10d%10lg%10lg",LSD_PENMAX,LSD_THKOPT,LSD_SHLTHK,LSD_SNLOG,LSD_ISYM,LSD_I2D3D,LSD_SLDTHK,LSD_SLDSTF);
            if(_existB == 1)
            {
                ASSIGN(ContactOptionalCards,2,IMPORT);
                //Optional Card C
                FREE_CARD(_existC,"%10d%10d%10lg%10lg%20s%10lg%10d", CONT_IGAP,CONT_IGNORE,SCALAR_OR_OBJECT(CONT_DPFRAC_chkbox,CONT_DPFRAC_field,CONT_DPFRAC_entity),SCALAR_OR_OBJECT(CONT_DTSIF_chkbox,CONT_DTSIF_field,CONT_DTSIF_entity),_BLANK_,CONT_FLANGL,CONT_CID_RCF);
                if(_existC == 1)
                {
                    ASSIGN(ContactOptionalCards,3,IMPORT);
                    //Optional Card D
                    FREE_CARD(_existD,"%10d%10lg%10lg%10lg%10lg%10d%10d%10d",CONT_Q2TRI,CONT_DTPCHK,CONT_SFNBR,CONT_FNLSCL,CONT_DNLSCL,CONT_TCSO,CONT_TIEDID,CONT_SHLEDG);
                    if(_existD  == 1)
                    {
                        ASSIGN(ContactOptionalCards,4,IMPORT);
                        //Optional Card E
                        FREE_CARD(_existE,"%10d%10d%10d%10d%10lg%10d%10d%10d", CONT_SHAREC,LSD_CPARM8_E,LSD_IPBACK_E,LSD_SRNDE,LSD_FRICSF,LSD_ICOR,LSD_FTORQ,LSD_REGION);
                        if(_existE  == 1)
                        {
                            ASSIGN(ContactOptionalCards,5,IMPORT);
                            //Optional Card F
                            FREE_CARD(_existF,"%10d%10d",CONT_PSTIFF,LSD_IGNROFF);
                            if(_existF  == 1)
                            {
                                ASSIGN(ContactOptionalCards,6,IMPORT);
                            }
                        }
                    }
                }
            }
        }
    }
}

FORMAT(Keyword971_R11.1)
{
    ASSIGN(IO_FLAG,0,EXPORT);
    ASSIGN(IO_FLAG,1,IMPORT);

    if(IO_FLAG == 0)
    {
        //INITIAL KEYWORD_STR
        ASSIGN(KEYWORD_STR,*CONTACT_AUTOMATIC_SURFACE_TO_SURFACE,EXPORT);

        //RADIO: AutoOption
        if(AutoOption == 2)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_TIEBREAK"),EXPORT);
        }
        else if(AutoOption == 3)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_SMOOTH"),EXPORT);
        }
        else if(AutoOption == 4)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_MORTAR"),EXPORT);
        }
        else if(AutoOption == 5)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_MORTAR_TIED"),EXPORT);
        }
        else if(AutoOption == 6)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_COMPOSITE"),EXPORT);
        }
        else if(AutoOption == 7)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_TIED_WELD"),EXPORT);
        }
        else if(AutoOption == 8)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_MORTAR_TIED_WELD"),EXPORT);
        }

        //RADIO: TiebreaksurfOpt
        if(AutoOption == 2)
        {
            if(TiebreaksurfOpt == 2)
            {
                ASSIGN(_dummy,_COMBINE(_dummy,"_DAMPING"),EXPORT);
            }
            else if(TiebreaksurfOpt == 3)
            {
                ASSIGN(_dummy,_COMBINE(_dummy,"_MORTAR"), EXPORT);
            }
        }

        //RADIO: ThermalOpt
        if(ThermalOpt == 2)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_THERMAL"),EXPORT);
        }
        else if(ThermalOpt == 3)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_THERMAL_FRICTION"),EXPORT);
        }

        //FLAG: OrthoFrictionOption
        if(OrthoFrictionOption == 1)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_ORTHO_FRICTION"),EXPORT);
        }

        //FLAG: MPP
        if(mppOpt == 1)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_MPP"),EXPORT);
        }

        //FLAG: LSD_TitleOpt
        if(LSD_TitleOpt == 1)
        {
            ASSIGN(_dummy,_COMBINE(_dummy,"_ID"),EXPORT);
        }

        //FINAL KEYWORD_STR
        ASSIGN(KEYWORD_STR,_COMBINE(KEYWORD_STR,_dummy),EXPORT);
        CARD("%-s",KEYWORD_STR);
    }
    else   //IMPORT
    {
        HEADER("*CONTACT_AUTOMATIC_SURFACE_TO_SURFACE%80s",_opt);

        //RADIO: AutoOption
        ASSIGN(_dummy_TIEBREAK,_FIND(_opt,"_TIEBREAK"),IMPORT);
        if(_dummy_TIEBREAK == 1)
        {
            ASSIGN(AutoOption, 2, IMPORT);
        }

        ASSIGN(_dummy_SMOOTH,_FIND(_opt,"_SMOOTH"),IMPORT);
        if(_dummy_SMOOTH == 1)
        {
            ASSIGN(AutoOption, 3, IMPORT);
        }

        ASSIGN(_dummy_MORTAR_TIED_WELD,_FIND(_opt,"_MORTAR_TIED_WELD"),IMPORT);
        if(_dummy_MORTAR_TIED_WELD == 1)
        {
            ASSIGN(AutoOption, 8, IMPORT);
        }
        ASSIGN(_dummy_MORTAR_TIED,_FIND(_opt,"_MORTAR_TIED"),IMPORT);
        if(_dummy_MORTAR_TIED == 1 && _dummy_MORTAR_TIED_WELD == 0)
        {
            ASSIGN(AutoOption, 5, IMPORT);
        }
        ASSIGN(_dummy_TIED_WELD,_FIND(_opt,"_TIED_WELD"),IMPORT);
        if(_dummy_TIED_WELD == 1 && _dummy_MORTAR_TIED_WELD == 0 && _dummy_MORTAR_TIED == 0)
        {
            ASSIGN(AutoOption, 7, IMPORT);
        }
        ASSIGN(_dummy_MORTAR,_FIND(_opt,"_MORTAR"),IMPORT);
        if(_dummy_MORTAR == 1 && _dummy_MORTAR_TIED == 0 && _dummy_MORTAR_TIED_WELD == 0 && AutoOption != 2)
        {
            ASSIGN(AutoOption, 4, IMPORT);
        }

        ASSIGN(_dummy_COMPOSITE,_FIND(_opt,"_COMPOSITE"),IMPORT);
        if(_dummy_COMPOSITE == 1)
        {
            ASSIGN(AutoOption, 6, IMPORT);
        }

        //RADIO: TiebreaksurfOpt
        if(AutoOption == 2)
        {
            ASSIGN(_dummy_DAMPING,_FIND(_opt,"_DAMPING"),IMPORT);
            if(_dummy_DAMPING == 1)
            {
                ASSIGN(TiebreaksurfOpt, 2, IMPORT);
            }
            ASSIGN(_dummy_MORTAR2,_FIND(_opt,"_MORTAR"),IMPORT);
            if(_dummy_MORTAR2 == 1)
            {
                ASSIGN(TiebreaksurfOpt, 3, IMPORT);
            }
        }

        //RADIO: ThermalOpt
        ASSIGN(_dummy_THERMAL_FRICTION,_FIND(_opt,"_THERMAL_FRICTION"),IMPORT);
        if(_dummy_THERMAL_FRICTION == 1)
        {
            ASSIGN(ThermalOpt, 3, IMPORT);
        }
        ASSIGN(_dummy_THERMAL,_FIND(_opt,"_THERMAL"),IMPORT);
        if(_dummy_THERMAL == 1 && _dummy_THERMAL_FRICTION == 0)
        {
            ASSIGN(ThermalOpt, 2, IMPORT);
        }

        //FLAG: OrthoFrictionOption
        ASSIGN(OrthoFrictionOption,_FIND(_opt,"_ORTHO_FRICTION"),IMPORT);

        //FLAG: MPP
        ASSIGN(mppOpt,_FIND(_opt,"_MPP"),IMPORT);

        //FLAG: ID
        ASSIGN(LSD_TitleOpt,_FIND(_opt,"_ID"),IMPORT);
    }

    if(IO_FLAG == 0 && LSD_TitleOpt == 1)
    {
        //ID Card
        COMMENT("$      CIDHEADING                                                               ");
        CARD("%10d%-70s", _ID_,TITLE);
    }

    // MPP card
    if(IO_FLAG == 0)
    {
        //MPP Cards
        if(mppOpt == 1)
        {
            COMMENT("$   IGNORE      BCKT    LCBCKT    NS2TRK   INITITR    PARMAX              CPARM8");
            CARD("%10d%10d%10d%10d%10d%10lg%10s%10d",TRACKPEN,BUCKET,LCBUCKET,NSEG2TRACK,INITITER,LSD_PARMAX,_BLANK_,LSD_CPARM8);

            // 2nd MPP card (optional)
            if(Option1 == 1)
            {
                COMMENT("$        &   CHKSEGS     PENSF   GRPABLE");
                CARD("&%9s%10d%10lg%10d",_BLANK_,LSD_CHKSEGS,LSD_PENSF,LSD_GRPABLE);
            }
        }
    }
    else
    {
        //MPP Cards
        if(mppOpt == 1)
        {
            //MPP Card 1
            CARD("%10d%10d%10d%10d%10d%10lg%10s%10d",TRACKPEN,BUCKET,LCBUCKET,NSEG2TRACK,INITITER,LSD_PARMAX,_BLANK_,LSD_CPARM8);

            // 2nd MPP card (optional)
            CARD_PREREAD("%-1s", card1_opt);
            if(card1_opt == "&")
            {
                CARD("&%9s%10d%10lg%10d",_BLANK_,LSD_CHKSEGS,LSD_PENSF,LSD_GRPABLE);
                ASSIGN(Option1,1,IMPORT);
            }
            else
            {
                ASSIGN(Option1,0,IMPORT);
            }
        }
    }

    // Mandatory Card 1
    COMMENT("$     SSID      MSID     SSTYP     MSTYP    SBOXID    MBOXID       SPR       MPR");
    CARD("%10d%10d%10d%10d%10d%10d%10d%10d",slaveentityids,masterentityids,SSTYP,MSTYP,ContSlaveBoxId,ContMasterBoxId,LSDYNA_SPR,LSDYNA_MPR);

    if(IO_FLAG == 1)
    {
        CARD_PREREAD("%10lg", LSDYNA_FS);
        if(LSDYNA_FS == -2 || LSDYNA_FS == -1|| LSDYNA_FS == 2)
        {
            ASSIGN(DefineFrictOpt, 1, IMPORT);
        }
        else
        {
            ASSIGN(DefineFrictOpt, 0, IMPORT);
        }
    }

    //Mandatory Card 2
    if(DefineFrictOpt == 0)
    {
        COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
        CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_FS, LSDYNA_FD,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);
    }
    else if (DefineFrictOpt == 1)
    {
        if(LSDYNA_FS == -2)
        {
            COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
            CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_FS, LSDYNA_FD_DefineFriction,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);
        }
        else if(LSDYNA_FS == -1)
        {
            COMMENT("$       FS        FD        DC        VC       VDC    PENCHK        BT        DT");
            CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_FS, LSDYNA_FD,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);
        }
        else if(LSDYNA_FS == 2)
        {
            COMMENT("$       FS        TB        DC        VC       VDC    PENCHK        BT        DT");
            CARD("%10lg%10lg%10lg%10lg%10lg%10d%10lg%10lg",LSDYNA_FS, LSDYNA_TB_DefineFriction,LSDYNA_DC,LSDYNA_VC,LSDYNA_VDC,LSDYNA_PENCHK,LSDYNA_BT,LSDYNA_DT);
        }
    }

    // Mandatory Card 3
    COMMENT("$      SFS       SFM       SST       MST      SFST      SFMT       FSF       VSF");
    CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSDYNA_SFS, LSDYNA_SFM,LSDYNA_SST,LSDYNA_MST,LSDYNA_SFST,LSDYNA_SFMT,LSDYNA_FSF,LSDYNA_VSF);

    // Card 4: AUTOMATIC_SURFACE_TIEBREAK
    if(AutoOption == 2)
    {
        CARD_PREREAD("%10d", LSD_RESPONSE);
        if(LSD_RESPONSE == 9 || LSD_RESPONSE == 11)
        {
            COMMENT("$   OPTION      NFLS      SFLS     PARAM    ERATEN    ERATES     CT2CN        CN");
            CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS,LSD_PARAM,LSD_ERATEN,LSD_ERATES,LSD_CT2CN,LSD_CN);
        }
        else if(LSD_RESPONSE == 10 || (LSD_RESPONSE == 7 && TiebreaksurfOpt != 3))
        {
            COMMENT("$   OPTION      NFLS      SFLS     PARAM    ERATEN    ERATES");
            CARD("%10d%10lg%10lg%10lg%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS,LSD_PARAM,LSD_ERATEN,LSD_ERATES);
        }
        else if(LSD_RESPONSE == 13 || LSD_RESPONSE == 14)
        {
            COMMENT("$   OPTION                         PARAM                         CT2CN        CN");
            CARD("%10d%20s%10lg%20s%10lg%10lg",LSD_RESPONSE,_BLANK_,LSD_PARAM,_BLANK_,LSD_CT2CN,LSD_CN);
        }
        else if  (LSD_RESPONSE == 7 && TiebreaksurfOpt == 3)
        {
            COMMENT("$   OPTION      NFLS      SFLS     PARAM                         CT2CN        CN");
            CARD("%10d%10lg%10lg%10lg%20s%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS,LSD_PARAM,_BLANK_,LSD_CT2CN,LSD_CN);
        }
        else if (LSD_RESPONSE == 2 || LSD_RESPONSE == -2 || LSD_RESPONSE == 4 || LSD_RESPONSE == 6 || LSD_RESPONSE == 8 ) {
            COMMENT("$   OPTION      NFLS      SFLS     PARAM                                        ");
            CARD("%10d%10lg%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS,LSD_PARAM);
        }
        else
        {
            COMMENT("$   OPTION      NFLS      SFLS                                                  ");
            CARD("%10d%10lg%10lg",LSD_RESPONSE,LSDYNA_NFLS,LSDYNA_SFLS);
        }
    }

    if((AutoOption == 2) && (TiebreaksurfOpt == 2) && (LSD_RESPONSE == 9 || LSD_RESPONSE == 11))
    {
      COMMENT("$    DMP_1     DMP_2     DMP_3");
      CARD("%10lg%10lg%10lg",LSD_DMP_1,LSD_DMP_2,LSD_DMP_3);
    }

    // Options 13/14 Cards
    if((AutoOption == 2) && (LSD_RESPONSE == 13 || LSD_RESPONSE == 14))
    {
        COMMENT("$    G1C_0   G1C_INF   EDOT_G1        T0        T1    EDOT_T       FG1     LCG1C");
        if(ThermalOpt == 2)  //CURVEID ATTRIBUTES ARE NOT IMPLEMENTED IN ML
        {
            CARD("%10lg%10lg%10lg%10d%10lg%10lg%10d%10d",LSD_MAT240_G1C_0_CURVEID,LSD_MAT240_G1C_INF,LSD_MAT240_EDOT_G1,LSD_MAT240_T0_CURVEID,LSD_MAT240_T1,LSD_MAT240_EDOT_T,LSD_MAT240_FG1_CURVEID,LSD_MAT240_LCG1C);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10d",LSD_MAT240_G1C_0,LSD_MAT240_G1C_INF,LSD_MAT240_EDOT_G1,LSD_MAT240_T0,LSD_MAT240_T1,LSD_MAT240_EDOT_T,LSD_MAT240_FG1,LSD_MAT240_LCG1C);
        }
        COMMENT("$    G2C_0   G2C_INF   EDOT_G2        S0        S1    EDOT_S       FG2     LCG2C");
        if(ThermalOpt == 2)  //CURVEID ATTRIBUTES ARE NOT IMPLEMENTED IN ML
        {
            CARD("%10d%10lg%10lg%10d%10lg%10lg%10d%10d",LSD_MAT240_G2C_0_CURVEID,LSD_MAT240_G2C_INF,LSD_MAT240_EDOT_G2,LSD_MAT240_S0_CURVEID,LSD_MAT240_S1,LSD_MAT240_EDOT_S,LSD_MAT240_FG2_CURVEID,LSD_MAT240_LCG2C);
        }
        else
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10d",LSD_MAT240_G2C_0,LSD_MAT240_G2C_INF,LSD_MAT240_EDOT_G2,LSD_MAT240_S0,LSD_MAT240_S1,LSD_MAT240_EDOT_S,LSD_MAT240_FG2,LSD_MAT240_LCG2C);
        }
    }

    // Card 4: AUTOMATIC_SURFACE_TO_SURFACE_COMPOSITE
    if(AutoOption == 6)
    {
      COMMENT("$    TFAIL     MODEL     CIDMU    CIDETA         D");
      CARD("%10lg%10d%10d%10d%10lg",CONTROL_TFAIL,CONTROL_MODEL,CONTROL_CIDTAU,CONTROL_CIDNU,CONTROL_D);
    }

    // Card 4: AUTOMATIC_SURFACE_TO_SURFACE_TIED_WELD, AUTOMATIC_SURFACE_TO_SURFACE_MORTAR_TIED_WELD
    if((AutoOption == 7 || AutoOption == 8) && (ThermalOpt == 2 || ThermalOpt == 3))
    {
      COMMENT("$     TEMP     CLOSE    HCLOSE");
      CARD("%10lg%10lg%10lg",CONTROL_TEMP,CONTROL_CLOSE,CONTROL_HCLOSE);
    }
    else if((AutoOption == 7 || AutoOption == 8) && ThermalOpt == 1)
    {
      COMMENT("$     TEMP     CLOSE");
      CARD("%10lg%10lg",CONTROL_TEMP,CONTROL_CLOSE);
    }

    //THERMAL CARD 1
    if(ThermalOpt == 2 || ThermalOpt == 3)
    {
        COMMENT("$        K      FRAD        H0      LMIN      LMAX    FTOSLV    BC_FLG      ALGO");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10d%10d",CF,FRAD,HTC,GCRIT,GMAX,CD_FACT,LSD_BC_FLAG,LSD_ALGO);
    }

    if(ThermalOpt == 3)
    {
        COMMENT("$    LCFST     LCFDT   FORMULA         A         B         C         D       LCH");
        CARD("%10d%10d%10d%10d%10d%10d%10d%10d",LSD_LCFST,LSD_LCFDT,LSD_FORMULA,LSD_a,LSD_b,LSD_c,LSD_d,LSD_LCH);

        if(LSD_FORMULA < 0)
        {
            ASSIGN(_dummy_FORMULA,-1*LSD_FORMULA);
            COMMENT("$      UC1       UC2       UC3       UC4       UC5       UC6       UC7       UC8");
            CELL_LIST(_dummy_FORMULA,"%10lg",LSD_UC,80);
        }
    }

    if(OrthoFrictionOption == 1)
    {
        COMMENT("$    FS1_S     FD1_S     DC1_S     VC1_S     LC1_S    OACS_S      LCFS      LCPS");
        CARD("%10lg%10lg%10lg%10lg%10d%10d%10d%10d",LSD_FS1_S,LSD_FD1_S,LSD_DC1_S,LSD_VC1_S,LSD_LC1_S,LSD_OACS_S,LSD_LCFS,LSD_LCPS);

        COMMENT("$    FS2_S     FD2_S     DC2_S     VC2_S     LC2_S");
        CARD("%10lg%10lg%10lg%10lg%10d",LSD_FS2_S,LSD_FD2_S,LSD_DC2_S,LSD_VC2_S,LSD_LC2_S);

        COMMENT("$    FS1_M     FD1_M     DC1_M     VC1_M     LC1_M    OACS_M      LCFM      LCPM");
        CARD("%10lg%10lg%10lg%10lg%10d%10d%10d%10d",LSD_FS1_M,LSD_FD1_M,LSD_DC1_M,LSD_VC1_M,LSD_LC1_M,LSD_OACS_M,LSD_LCFM,LSD_LCPM);

        COMMENT("$    FS2_M     FD2_M     DC2_M     VC2_M     LC2_M");
        CARD("%10lg%10lg%10lg%10lg%10d",LSD_FS2_M,LSD_FD2_M,LSD_DC2_M,LSD_VC2_M,LSD_LC2_M);
    }

    //Additional Cards
    if(IO_FLAG == 0 && Group_Option == 1)
    {
        // Optional Card A
        if(ContactOptionalCards >= 1)
        {
            COMMENT("$     SOFT    SOFSCL    LCIDAB    MAXPAR     SBOPT     DEPTH     BSORT    FRCFRQ");
            CARD("%10d%10lg%10d%10lg%10lg%10d%10d%10d",LSDYNA_SOFT,LSDYNA_SOFSCL,LSD_LCID2,LSDYNA_MAXPAR,LSDYNA_PENTOL,SCALAR_OR_OBJECT(LSD_DEPTHOpt, LSDYNA_DEPTH,LSD_LCID6),SCALAR_OR_OBJECT(LSD_BSORTOpt,LSDYNA_BSORT,LSD_LCID),LSDYNA_FRCFRQ);
        }
        // Optional Card B
        if (ContactOptionalCards >= 2)
        {
            COMMENT("$   PENMAX    THKOPT    SHLTHK     SNLOG      ISYM     I2D3D    SLDTHK    SLDSTF");
            CARD("%10lg%10d%10d%10d%10d%10d%10lg%10lg",LSD_PENMAX,LSD_THKOPT,LSD_SHLTHK,LSD_SNLOG,LSD_ISYM,LSD_I2D3D,LSD_SLDTHK,LSD_SLDSTF);
        }
        // Optional Card C
        if(ContactOptionalCards >= 3)
        {
            COMMENT("$     IGAP    IGNORE    DPRFAC    DTSTIF                        FLANGL   CID_RCF");
            CARD("%10d%10d%10lg%10lg%10s%10s%10lg%10d",CONT_IGAP,CONT_IGNORE,SCALAR_OR_OBJECT(CONT_DPFRAC_chkbox,CONT_DPFRAC_field,CONT_DPFRAC_entity),SCALAR_OR_OBJECT(CONT_DTSIF_chkbox,CONT_DTSIF_field,CONT_DTSIF_entity),_BLANK_,_BLANK_,CONT_FLANGL,CONT_CID_RCF);
        }
        // Optional Card D
        if(ContactOptionalCards >= 4)
        {
            COMMENT("$    Q2TRI    DTPCHK     SFNBR    FNLSCL    DNLSCL      TCSO    TIEDID    SHLEDG");
            CARD("%10d%10lg%10lg%10lg%10lg%10d%10d%10d",CONT_Q2TRI,CONT_DTPCHK,CONT_SFNBR,CONT_FNLSCL,CONT_DNLSCL,CONT_TCSO,CONT_TIEDID,CONT_SHLEDG);
        }
        // Optional Card E
        if(ContactOptionalCards >= 5)
        {
            if (LSDYNA_SOFT == 2)
            {
                COMMENT("$   SHAREC    CPARM8    IPBACK     SRNDE    FRICSF      ICOR     FTORQ    REGION");
                CARD("%10d%10d%10d%10d%10lg%10d%10d%10d",CONT_SHAREC,LSD_CPARM8_E,LSD_IPBACK_E,LSD_SRNDE,LSD_FRICSF,LSD_ICOR,LSD_FTORQ,LSD_REGION);
            }
            else
            {
                COMMENT("$   SHAREC    CPARM8    IPBACK     SRNDE                ICOR     FTORQ    REGION");
                CARD("%10d%10d%10d%10d%10s%10d%10d%10d",CONT_SHAREC,LSD_CPARM8_E,LSD_IPBACK_E,LSD_SRNDE,_BLANK_,LSD_ICOR,LSD_FTORQ,LSD_REGION);
            }
        }
        // Optional Card F
        if(ContactOptionalCards == 6)
        {
            COMMENT("$   PSTIFF   IGNROFF               FSTOL    2DBINR    SSFTYP");
            CARD("%10d%10d%10s%10lg%10d%10d",CONT_PSTIFF,LSD_IGNROFF,_BLANK_,LSD_FSTOL,LSD_2DBINR,LSD_SSFTYP);
        }
    }
    if(IO_FLAG == 1)    //IMPORT
    {
        //Optional Cards

        //Optional Card A
        FREE_CARD(Group_Option,"%10d%10lg%10d%10lg%10lg%10d%10d%10d",LSDYNA_SOFT,LSDYNA_SOFSCL,LSD_LCID2,LSDYNA_MAXPAR,LSDYNA_PENTOL,SCALAR_OR_OBJECT(LSD_DEPTHOpt,LSDYNA_DEPTH,LSD_LCID6),SCALAR_OR_OBJECT(LSD_BSORTOpt,LSDYNA_BSORT,LSD_LCID),LSDYNA_FRCFRQ);
        if(Group_Option == 1)
        {
            ASSIGN(ContactOptionalCards,1,IMPORT);

            //Optional Card B
            FREE_CARD(_existB,"%10lg%10d%10d%10d%10d%10d%10lg%10lg",LSD_PENMAX,LSD_THKOPT,LSD_SHLTHK,LSD_SNLOG,LSD_ISYM,LSD_I2D3D,LSD_SLDTHK,LSD_SLDSTF);
            if(_existB == 1)
            {
                ASSIGN(ContactOptionalCards,2,IMPORT);
                //Optional Card C
                FREE_CARD(_existC,"%10d%10d%10lg%10lg%20s%10lg%10d", CONT_IGAP,CONT_IGNORE,SCALAR_OR_OBJECT(CONT_DPFRAC_chkbox,CONT_DPFRAC_field,CONT_DPFRAC_entity),SCALAR_OR_OBJECT(CONT_DTSIF_chkbox,CONT_DTSIF_field,CONT_DTSIF_entity),_BLANK_,CONT_FLANGL,CONT_CID_RCF);
                if(_existC == 1)
                {
                    ASSIGN(ContactOptionalCards,3,IMPORT);
                    //Optional Card D
                    FREE_CARD(_existD,"%10d%10lg%10lg%10lg%10lg%10d%10d%10d",CONT_Q2TRI,CONT_DTPCHK,CONT_SFNBR,CONT_FNLSCL,CONT_DNLSCL,CONT_TCSO,CONT_TIEDID,CONT_SHLEDG);
                    if(_existD  == 1)
                    {
                        ASSIGN(ContactOptionalCards,4,IMPORT);
                        //Optional Card E
                        FREE_CARD(_existE,"%10d%10d%10d%10d%10lg%10d%10d%10d", CONT_SHAREC,LSD_CPARM8_E,LSD_IPBACK_E,LSD_SRNDE,LSD_FRICSF,LSD_ICOR,LSD_FTORQ,LSD_REGION);
                        if(_existE  == 1)
                        {
                            ASSIGN(ContactOptionalCards,5,IMPORT);
                            //Optional Card F
                            FREE_CARD(_existF,"%10d%10d%10s%10lg%10d%10d",CONT_PSTIFF,LSD_IGNROFF,_BLANK_,LSD_FSTOL,LSD_2DBINR,LSD_SSFTYP);
                            if(_existF  == 1)
                            {
                                ASSIGN(ContactOptionalCards,6,IMPORT);
                            }
                        }
                    }
                }
            }
        }
    }
}