//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// SECTION_SPH
//

ATTRIBUTES(COMMON)
{
    //INPUT ATTRIBUTES
    LSD_CSLH                                = VALUE(FLOAT,  "Constant applied to the smoothing length of the particles");
    LSD_HMIN                                = VALUE(FLOAT,  "Scale factor for the minimum smoothing length");
    LSD_HMAX                                = VALUE(FLOAT,  "Scale factor for the maximum smoothing length");
    LSD_SPHINI                              = VALUE(FLOAT,  "Optional initial smoothing length");
    LSD_TDEATH                              = VALUE(FLOAT,  "Time imposed SPH approximation is stopped");
    LSD_TSTART                              = VALUE(FLOAT,  "Time imposed SPH approximation is activated");
    LSD_SPHKERN                             = VALUE(INT, "Option for SPH kernel functions (smoothing functions)");
    //Card
    LSD_HXCSLH                              = VALUE(FLOAT,  "Constant applied for the smoothing length in the X direction for the tensor case");
    LSD_HYCSLH                              = VALUE(FLOAT,  "Constant applied for the smoothing length in the Y direction for the tensor case");
    LSD_HZCSLH                              = VALUE(FLOAT,  "Constant applied for the smoothing length in the Z direction for the tensor case");
    LSD_HXINI                               = VALUE(FLOAT,  "Optional initial smoothing length in the X direction for the tensor case");
    LSD_HYINI                               = VALUE(FLOAT,  "Optional initial smoothing length in the Y direction for the tensor case");
    LSD_HZINI                               = VALUE(FLOAT,  "Optional initial smoothing length in the Z direction for the tensor case");

    //HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    sphOption                               = VALUE(INT, "sphOption");
    IOFLAG                                  = VALUE(INT, "");
    _opt                                    = VALUE(STRING, "");
    _dummy                                  = VALUE(INT, "");
    TITLE                                   = VALUE(STRING, "TITLE");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    LSD_CSLH                                = 4886;
    LSD_HMIN                                = 4551;
    LSD_HMAX                                = 4552;
    LSD_SPHINI                              = 4887;
    LSD_TDEATH                              = 2239;
    LSD_TSTART                              = 4481;
    LSD_SPHKERN                             = -1;  //New ID. Must be Added
    //Tensor Card
    LSD_HXCSLH                              = 1151;
    LSD_HYCSLH                              = 1152;
    LSD_HZCSLH                              = 1153;
    LSD_HXINI                               = 1154;
    LSD_HYINI                               = 1155;
    LSD_HZINI                               = 1156;

    KEYWORD_STR                             = 9000;
    LSD_TitleOpt                            = 90;
    sphOption                               = 1157;
    IOFLAG                                  = -1;
    _opt                                    = -1;
    _dummy                                  = -1;
    TITLE                                   = -1;
}

DEFAULTS(COMMON)
{
    LSD_CSLH                                = 1.2;
    LSD_HMIN                                = 0.2;
    LSD_HMAX                                = 2.0;
    LSD_TDEATH                              = 1.0e20;
}

// DRAWABLES(COMMON) 
// {
//  public:
//     CONSTANT_APPLIED_TO_THE_SMOOTHING_LENGTH_OF_THE_PARTICLES=SCALAR(LSD_CSLH);
//     SCALE_FACTOR_FOR_THE_MINIMUM_SMOOTHING_LENGTH=SCALAR(LSD_HMIN);
//     SCALE_FACTOR_FOR_THE_MAXIMUM_SMOOTHING_LENGTH=SCALAR(LSD_HMAX);
//     INITIAL_SMOOTHING_LENGTH=SCALAR(LSD_SPHINI);
//     TIME_IMPOSED_SPH_APPROXIMATION_IS_STOPPED=SCALAR(LSD_TDEATH);
//     TIME_IMPOSED_SPH_APPROXIMATION_IS_ACTIVATED=SCALAR(LSD_TSTART);
// }

// GUI(COMMON)
// {

//     ASSIGN(KEYWORD_STR, "*SECTION_SPH");
//     RADIO(sphOption)
//     {
//        ADD(1, "NONE");
//        ADD(2, "TENSOR");
//        ADD(3, "USER");
//     }
//     if(sphOption == 2)
//     {
//         ASSIGN(KEYWORD_STR, "_TENSOR");
//     }
//     if(sphOption == 3)
//     {
//         ASSIGN(KEYWORD_STR, "_USER");
//     }
//     FLAG(LSD_TitleOpt);
//     if(LSD_TitleOpt == TRUE)
//     {
//         ASSIGN(KEYWORD_STR, "_TITLE");
//     }
//     SCALAR(LSD_CSLH)                    {DIMENSION="DIMENSIONLESS";}
//     SCALAR(LSD_HMIN)                    {DIMENSION="DIMENSIONLESS";}
//     SCALAR(LSD_HMAX)                    {DIMENSION="DIMENSIONLESS";}
//     SCALAR(LSD_SPHINI)                  {DIMENSION="LENGTH";}
//     SCALAR(LSD_TDEATH)                  {DIMENSION="TIME";}
//     SCALAR(LSD_TSTART)                  {DIMENSION="TIME";}
//     if(sphOption == 2)
//     {
//        SCALAR(LSD_HXCSLH);
//        SCALAR(LSD_HYCSLH);
//        SCALAR(LSD_HZCSLH);
//        SCALAR(LSD_HXINI)                {DIMENSION="LENGTH";}
//        SCALAR(LSD_HYINI)                {DIMENSION="LENGTH";}
//        SCALAR(LSD_HZINI)                {DIMENSION="LENGTH";}
//     }
/*
    graphical SUPPORT("Part(s) to which property is applied") {
      OBJECTS=(/COMPONENT/SPHCEL);
      ADD(COMPONENT,"Parts");
    }

}
*/

// File format
FORMAT(Keyword971) 
{
    ASSIGN(IOFLAG,0,EXPORT);
    ASSIGN(IOFLAG,1,IMPORT);

    if(IOFLAG == 0)
    {       
        if(sphOption == 1 && LSD_TitleOpt == 0)
        {
            HEADER("*SECTION_SPH");
        }
        else if(sphOption == 1 && LSD_TitleOpt == 1)
        {
            HEADER("*SECTION_SPH_TITLE");
        }
        else if(sphOption == 2 && LSD_TitleOpt == 0)
        {
            HEADER("*SECTION_SPH_TENSOR");
        }
        else if(sphOption == 2 && LSD_TitleOpt == 1)
        {
            HEADER("*SECTION_SPH_TENSOR_TITLE");
        }
        else if(sphOption == 3 && LSD_TitleOpt == 0)
        {
            HEADER("*SECTION_SPH_USER");
        }
        else if(sphOption == 3 && LSD_TitleOpt == 1)
        {
            HEADER("*SECTION_SPH_USER_TITLE");
        }

        if(LSD_TitleOpt == 1)
        {
            CARD("%-80s",TITLE);
        }

        //Card 1
        COMMENT("$    SECID      CSLH      HMIN      HMAX    SPHINI     DEATH     START");
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,LSD_CSLH,LSD_HMIN,LSD_HMAX,LSD_SPHINI,LSD_TDEATH,LSD_TSTART);

        if(sphOption == 2)
        {
            COMMENT("$   HXCSLH    HYCSLH    HZCSLH     HXINI     HYINI     HZINI");
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_HXCSLH,LSD_HYCSLH,LSD_HZCSLH,LSD_HXINI,LSD_HYINI,LSD_HZINI);
        }
    }
    else
    {
        HEADER("*SECTION_SPH%s", _opt);

        ASSIGN(LSD_TitleOpt,_FIND(_opt,"_TITLE"),IMPORT);

        if(_opt == "" || _opt == "_TITLE")
        {
            ASSIGN(sphOption,1,IMPORT);
        }

        ASSIGN(_dummy,_FIND(_opt,"_TENSOR"),IMPORT);
        if(_dummy != 0)
        {
            ASSIGN(sphOption,2,IMPORT);
        }

        ASSIGN(_dummy,_FIND(_opt,"_USER"),IMPORT);
        if(_dummy != 0)
        {
            ASSIGN(sphOption,3,IMPORT);
        }

        //Card 1
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,LSD_CSLH,LSD_HMIN,LSD_HMAX,LSD_SPHINI,LSD_TDEATH,LSD_TSTART);

        //Tensor Card
        if(sphOption == 2)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_HXCSLH,LSD_HYCSLH,LSD_HZCSLH,LSD_HXINI,LSD_HYINI,LSD_HZINI);
        }
        
    }
}


// File format
FORMAT(Keyword971_R8.0) 
{
    ASSIGN(IOFLAG,0,EXPORT);
    ASSIGN(IOFLAG,1,IMPORT);

    if(IOFLAG == 0)
    {       
        if(sphOption == 1 && LSD_TitleOpt == 0)
        {
            HEADER("*SECTION_SPH");
        }
        else if(sphOption == 1 && LSD_TitleOpt == 1)
        {
            HEADER("*SECTION_SPH_TITLE");
        }
        else if(sphOption == 2 && LSD_TitleOpt == 0)
        {
            HEADER("*SECTION_SPH_ELLIPSE");
        }
        else if(sphOption == 2 && LSD_TitleOpt == 1)
        {
            HEADER("*SECTION_SPH_ELLIPSE_TITLE");
        }
        else if(sphOption == 3 && LSD_TitleOpt == 0)
        {
            HEADER("*SECTION_SPH_INTERACTION");
        }
        else if(sphOption == 3 && LSD_TitleOpt == 1)
        {
            HEADER("*SECTION_SPH_INTERACTION_TITLE");
        }
        else if(sphOption == 4 && LSD_TitleOpt == 0)
        {
            HEADER("*SECTION_SPH_USER");
        }
        else if(sphOption == 4 && LSD_TitleOpt == 1)
        {
            HEADER("*SECTION_SPH_USER_TITLE");
        }

        if(LSD_TitleOpt == 1)
        {
            CARD("%-80s",TITLE);
        }

        //Card 1
        COMMENT("$    SECID      CSLH      HMIN      HMAX    SPHINI     DEATH     START");
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,LSD_CSLH,LSD_HMIN,LSD_HMAX,LSD_SPHINI,LSD_TDEATH,LSD_TSTART);

        if(sphOption == 2)
        {
            COMMENT("$   HXCSLH    HYCSLH    HZCSLH     HXINI     HYINI     HZINI");
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_HXCSLH,LSD_HYCSLH,LSD_HZCSLH,LSD_HXINI,LSD_HYINI,LSD_HZINI);
        }
    }
    else
    {
        HEADER("*SECTION_SPH%s", _opt);

        ASSIGN(LSD_TitleOpt,_FIND(_opt,"_TITLE"),IMPORT);

        if(_opt == "" || _opt == "_TITLE")
        {
            ASSIGN(sphOption,1,IMPORT);
        }

        ASSIGN(_dummy,_FIND(_opt,"_ELLIPSE"),IMPORT);
        if(_dummy != 0)
        {
            ASSIGN(sphOption,2,IMPORT);
        }

        ASSIGN(_dummy,_FIND(_opt,"_INTERACTION"),IMPORT);
        if(_dummy != 0)
        {
            ASSIGN(sphOption,3,IMPORT);
        }
        
        ASSIGN(_dummy,_FIND(_opt,"_USER"),IMPORT);
        if(_dummy != 0)
        {
            ASSIGN(sphOption,4,IMPORT);
        }

        //Card 1
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,LSD_CSLH,LSD_HMIN,LSD_HMAX,LSD_SPHINI,LSD_TDEATH,LSD_TSTART);

        //INTERACTION Card
        if(sphOption == 2)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_HXCSLH,LSD_HYCSLH,LSD_HZCSLH,LSD_HXINI,LSD_HYINI,LSD_HZINI);
        }
        
    }
}


// File format
FORMAT(Keyword971_R11.1) 
{
    ASSIGN(IOFLAG,0,EXPORT);
    ASSIGN(IOFLAG,1,IMPORT);

    if(IOFLAG == 0)
    {       
        if(sphOption == 1 && LSD_TitleOpt == 0)
        {
            HEADER("*SECTION_SPH");
        }
        else if(sphOption == 1 && LSD_TitleOpt == 1)
        {
            HEADER("*SECTION_SPH_TITLE");
        }
        else if(sphOption == 2 && LSD_TitleOpt == 0)
        {
            HEADER("*SECTION_SPH_ELLIPSE");
        }
        else if(sphOption == 2 && LSD_TitleOpt == 1)
        {
            HEADER("*SECTION_SPH_ELLIPSE_TITLE");
        }
        else if(sphOption == 3 && LSD_TitleOpt == 0)
        {
            HEADER("*SECTION_SPH_INTERACTION");
        }
        else if(sphOption == 3 && LSD_TitleOpt == 1)
        {
            HEADER("*SECTION_SPH_INTERACTION_TITLE");
        }
        else if(sphOption == 4 && LSD_TitleOpt == 0)
        {
            HEADER("*SECTION_SPH_USER");
        }
        else if(sphOption == 4 && LSD_TitleOpt == 1)
        {
            HEADER("*SECTION_SPH_USER_TITLE");
        }

        if(LSD_TitleOpt == 1)
        {
            CARD("%-80s",TITLE);
        }

        //Card 1
        COMMENT("$    SECID      CSLH      HMIN      HMAX    SPHINI     DEATH     START   SPHKERN");
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10d",_ID_,LSD_CSLH,LSD_HMIN,LSD_HMAX,LSD_SPHINI,LSD_TDEATH,LSD_TSTART,LSD_SPHKERN);

        if(sphOption == 2)
        {
            COMMENT("$   HXCSLH    HYCSLH    HZCSLH     HXINI     HYINI     HZINI");
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_HXCSLH,LSD_HYCSLH,LSD_HZCSLH,LSD_HXINI,LSD_HYINI,LSD_HZINI);
        }
    }
    else
    {
        HEADER("*SECTION_SPH%s", _opt);

        ASSIGN(LSD_TitleOpt,_FIND(_opt,"_TITLE"),IMPORT);

        if(_opt == "" || _opt == "_TITLE")
        {
            ASSIGN(sphOption,1,IMPORT);
        }

        ASSIGN(_dummy,_FIND(_opt,"_ELLIPSE"),IMPORT);
        if(_dummy != 0)
        {
            ASSIGN(sphOption,2,IMPORT);
        }

        ASSIGN(_dummy,_FIND(_opt,"_INTERACTION"),IMPORT);
        if(_dummy != 0)
        {
            ASSIGN(sphOption,3,IMPORT);
        }
        
        ASSIGN(_dummy,_FIND(_opt,"_USER"),IMPORT);
        if(_dummy != 0)
        {
            ASSIGN(sphOption,4,IMPORT);
        }

        //Card 1
        CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,LSD_CSLH,LSD_HMIN,LSD_HMAX,LSD_SPHINI,LSD_TDEATH,LSD_TSTART);

        //INTERACTION Card
        if(sphOption == 2)
        {
            CARD("%10lg%10lg%10lg%10lg%10lg%10lg",LSD_HXCSLH,LSD_HYCSLH,LSD_HZCSLH,LSD_HXINI,LSD_HYINI,LSD_HZINI);
        }
        
    }
}
