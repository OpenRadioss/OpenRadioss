//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//Material law 264 (MAT_TABULATED_JOHNSON_COOK_ORTHO_PLASTICITY) Setup File
//


ATTRIBUTES(COMMON)
{
    KEYWORD_STR         = VALUE(STRING, "Solver Keyword");
    LSD_TitleOpt        = VALUE(INT, "Title");
    CommentEnumField    = VALUE(INT, "User Comments");
    Num_Comments        = SIZE("No. of comment lines");
    Comments            = ARRAY[Num_Comments](STRING, "Entity Comments");

    //Card1 of LS-Dyna manual
    Rho                                     = VALUE(FLOAT, "Mass density");
    E                                       = VALUE(FLOAT, "Young modulus");
    Nu                                      = VALUE(FLOAT, "Poisson ratio");
    LSDYNA_CP                               = VALUE(FLOAT,"Specific heat");
    LSD_MAT_TR                              = VALUE(FLOAT,"Room temperature");
    LSD_MAT_BETA1                           = VALUE(FLOAT,"Fraction of plastic work converted into heat");
    MATL123_NUMINT                          = VALUE(FLOAT,"Number of integration points which must fail before the element is deleted");

    //Card2 of LS-Dyna manual
    LSD_MAT_LCT00R                          = VALUE(CURVE,"Table ID defining for each plastic strain rate value a load curve ID giving the (isothermal) tensile yield stress versus plastic strain for that rate in the 00 degree direction.");
    LSD_MAT_LCT00T                          = VALUE(CURVE,"Table ID defining for each temperature value a load curve ID giving the (quasi-static) tensile yield stress versus plastic strain for that temperature in the 00 degree direction");
    LSD_MAT_LCF                             = VALUE(CURVE,"Load curve ID or Table ID. The load curve ID defines plastic failure strain as a function of triaxiality");
    LSD_MAT_LCG                             = VALUE(CURVE,"Load curve ID defining plastic failure strain as a function of plastic strain rate");
    LSD_MAT_LCH                             = VALUE(CURVE,"Load curve ID defining plastic failure strain as a function of temperature");
    LSD_MAT_LCI                             = VALUE(CURVE,"Load curve ID or Table ID. The load curve ID defines plastic failure strain as a function of element size");

    //Card3 of LS-Dyna manual
    LSD_MAT_LCC00R                          = VALUE(CURVE,"Table ID. The curves in this table define compressive yield stress as a function of plastic strain");
    LSD_MAT_LCC00T                          = VALUE(CURVE,"Table ID defining for each temperature value a load curve ID giving the (quasi-static) compressive yield stress versus strain for that temperature");
    LSD_MAT_LCS45R                          = VALUE(CURVE, "Table ID. The load curves define shear yield stress in function of plastic strain.");
    LSD_MAT_LCS45T                          = VALUE(CURVE, "Table ID defining for each temperature value a load curve ID giving the (quasi-static) shear yield stress versus strain for that temperature");
    LSD_MAT_SFIEPM                          = VALUE(FLOAT, "Scale factor on the initial estimate of the plastic multiplier");
    LSD_MAT_NITER                           = VALUE(INT, "Maximum number of iterations for the plasticity algorithm");
    axisOptFlag                             = VALUE(INT,  "Material axes option");
    LSD_SYSTEM                              = VALUE(SYSTEM,  "coordinate system ID number");

    //Card4 of LS-Dyna manual
    LSD_MAT_LCT90R                          = VALUE(CURVE, "Table ID defining for each plastic strain rate value a load curve ID giving the (isothermal) tensile yield stress versus plastic strain for that rate in the 90 degree direction");
    LSD_MAT_LCT45R                          = VALUE(CURVE, "Table ID defining for each plastic strain rate value a load curve ID giving the (isothermal) tensile yield stress versus plastic strain for that rate in the 45 degree direction");
    LSD_MAT_LCTTHR                          = VALUE(CURVE, "Table ID defining for each plastic strain rate value a load curve ID giving the (isothermal) tensile yield stress versus plastic strain for that rate in the thickness degree direction");
    LSD_MAT_LCC90R                          = VALUE(CURVE, "Table ID defining for each plastic strain rate value a load curve ID giving the (isothermal) compressive yield stress versus plastic strain for that rate in the 90 degree direction");
    LSD_MAT_LCC45R                          = VALUE(CURVE, "Table ID defining for each plastic strain rate value a load curve ID giving the (isothermal) compressive yield stress versus plastic strain for that rate in the 45 degree direction");
    LSD_MAT_LCCTHR                          = VALUE(CURVE, "Table ID defining for each plastic strain rate value a load curve ID giving the (isothermal) compressive yield stress versus plastic strain for that rate in the thickness degree direction");

    //Card5 of LS-Dyna manual
    LSD_MAT_LCT90T                          = VALUE(CURVE, "Table ID defining for each temperature value a load curve ID giving the (quasistatic) tensile yield stress versus plastic strain for that rate in the 90 degree direction");
    LSD_MAT_LCT45T                          = VALUE(CURVE, "Table ID defining for each temperature value a load curve ID giving the (quasistatic) tensile yield stress versus plastic strain for that rate in the 45 degree direction");
    LSD_MAT_LCTTHT                          = VALUE(CURVE, "Table ID defining for each temperature value a load curve ID giving the (quasistatic) tensile yield stress versus plastic strain for that rate in the thickness degree direction");
    LSD_MAT_LCC90T                          = VALUE(CURVE, "Table ID defining for each temperature value a load curve ID giving the (quasistatic) compressive yield stress versus plastic strain for that rate in the 90 degree direction");
    LSD_MAT_LCC45T                          = VALUE(CURVE, "Table ID defining for each temperature value a load curve ID giving the (quasistatic) compressive yield stress versus plastic strain for that rate in the 45 degree direction");
    LSD_MAT_LCCTHT                          = VALUE(CURVE, "Table ID defining for each temperature value a load curve ID giving the (quasistatic) compressive yield stress versus plastic strain for that rate in the thickness degree direction");

    //Card6,7 of LS-Dyna manual
    LSDYNA_A1                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A2                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_A3                               = VALUE(FLOAT, "Components of vector a");
    LSDYNA_D1                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D2                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_D3                               = VALUE(FLOAT,  "Components of vector d");
    LSDYNA_V1                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V2                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_V3                               = VALUE(FLOAT,  "Components of vector v");
    LSDYNA_XP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSDYNA_YP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSDYNA_ZP                               = VALUE(FLOAT,  "Coordinates of point p");
    LSD_NODE1                               = VALUE(NODE,  "Node");
    LSD_NODE3                               = VALUE(NODE,  "Node1");
    LSD_NODE4                               = VALUE(NODE,  "Node2");
    LSD_NODE5                               = VALUE(NODE,  "Node1");
    LSD_NODE6                               = VALUE(NODE,  "Node2");
    LSD_NODE7                               = VALUE(NODE,  "Node1");
    LSD_NODE8                               = VALUE(NODE,  "Node2");
    MAT221_MACF                             = VALUE(INT, "Material axes change flag for brick elements");
    LSD_MAT_BETA                            = VALUE(FLOAT, "Material angle in degrees for AOPT = 0 and 3");

    IO_FLAG                                 = VALUE(INT, "io flag");
    AOPT_SKEW_FLAG                          = VALUE(INT,  "Flag for defining coordinate system ID number");
    LOC_AOPT                                = VALUE(FLOAT, "");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR         = 9000;
    CommentEnumField    = 3220;
    Num_Comments        = 3101;
    LSD_TitleOpt        = 90;
    Comments            = 3100;

    Rho                 = 118;
    E                   = 119;
    Nu                  = 120;
    LSDYNA_CP                          = 125;
    LSD_MAT_TR                          = 316;
    LSD_MAT_BETA1                          = 6038;
    MATL123_NUMINT                          = 4254;
    LSD_MAT_LCT00R                          = 6018;
    LSD_MAT_LCT00T                          = 6019;
    LSD_MAT_LCF                             = 5882;
    LSD_MAT_LCG                             = 5883;
    LSD_MAT_LCH                             = 5884;
    LSD_MAT_LCI                             = 5885;
    LSD_MAT_LCC00R                          = 6020;
    LSD_MAT_LCC00T                          = 6021;
    LSD_MAT_LCS45R                          = 6022;
    LSD_MAT_LCS45T                          = 6023;
    LSD_MAT_SFIEPM                          = 6024;
    LSD_MAT_NITER                           = 6025;
    axisOptFlag                             = 4946;
    LSD_SYSTEM                              = 184;
    LSD_MAT_LCT90R                          = 6026;
    LSD_MAT_LCT45R                          = 6027;
    LSD_MAT_LCTTHR                          = 6028;
    LSD_MAT_LCC90R                          = 6029;
    LSD_MAT_LCC45R                          = 6030;
    LSD_MAT_LCCTHR                          = 6031;
    LSD_MAT_LCT90T                          = 6032;
    LSD_MAT_LCT45T                          = 6033;
    LSD_MAT_LCTTHT                          = 6034;
    LSD_MAT_LCC90T                          = 6035;
    LSD_MAT_LCC45T                          = 6036;
    LSD_MAT_LCCTHT                          = 6037;
    LSDYNA_A1                               = 139; 
    LSDYNA_A2                               = 140;
    LSDYNA_A3                               = 141;
    LSDYNA_D1                               = 145;
    LSDYNA_D2                               = 146;
    LSDYNA_D3                               = 147;
    LSDYNA_V1                               = 142;
    LSDYNA_V2                               = 143;
    LSDYNA_V3                               = 144;
    LSDYNA_XP                               = 136;
    LSDYNA_YP                               = 137;
    LSDYNA_ZP                               = 138;
    LSD_NODE1                               = 86;
    LSD_NODE3                               = 2802;
    LSD_NODE4                               = 2803;
    LSD_NODE5                               = 5078;
    LSD_NODE6                               = 5079;
    LSD_NODE7                               = 5080;
    LSD_NODE8                               = 5081;
    MAT221_MACF                             = 1451;
    LSD_MAT_BETA                            = 306;

    AOPT_SKEW_FLAG                          = -1;
    LOC_AOPT                                = -1;
    IO_FLAG                                 = -1;
    //empty_string                       = -1;
}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY=SCALAR(Rho);
    YOUNG_MODULUS = SCALAR(E);
    POISSON_RATIO = SCALAR(Nu);
      //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

DEFAULTS(COMMON)
{
    LSD_MAT_BETA1                       = 1.0;
    MATL123_NUMINT                      = 1.0;
    LSD_MAT_SFIEPM                      = 1.0;
    LSD_MAT_NITER                       = 100;

}

GUI(COMMON){
    ASSIGN(KEYWORD_STR, "*MAT_TABULATED_JOHNSON_COOK_ORTHO_PLASTICITY");
    RADIO(CommentEnumField)
    {
        ADD(1, "Hide in Menu/Export");
        ADD(2, "Show in Menu/Export");
        ADD(3, "Do not export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
    {
        SCALAR(Comments);
    }
    }     
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
        ASSIGN(KEYWORD_STR, "_TITLE");
    }
  mandatory:
    SCALAR(Rho)                 {DIMENSION="density";}
  optional:
    SCALAR(E)                   {DIMENSION="DIMENSIONLESS";}
    SCALAR(Nu)                  {DIMENSION="k";}
    SCALAR(LSDYNA_CP)           {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_TR)          {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_BETA1)       {DIMENSION="DIMENSIONLESS";}
    SCALAR(MATL123_NUMINT)      {DIMENSION="DIMENSIONLESS";}
    DATA(LSD_MAT_LCT00R);
    DATA(LSD_MAT_LCT00T);
    DATA(LSD_MAT_LCF);
    DATA(LSD_MAT_LCG);
    DATA(LSD_MAT_LCH);
    DATA(LSD_MAT_LCI);
    DATA(LSD_MAT_LCC00R);
    DATA(LSD_MAT_LCC00T);
    DATA(LSD_MAT_LCS45R);
    DATA(LSD_MAT_LCS45T);
    SCALAR(LSD_MAT_SFIEPM)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_MAT_NITER)       {DIMENSION="DIMENSIONLESS";}
    RADIO(axisOptFlag)
    {
       ADD(1, "0.0: locally orthotropic with material axes determined by nodes 1,2 and 4");
       ADD(2, "1.0: A-direction given by a point and global location of element centre");
       ADD(3, "2.0: Axis given by vectors");
       ADD(4, "3.0: Axis given by rotating the material axes by an angle BETA");
       ADD(5, "By system");
    }
    DATA(LSD_MAT_LCT90R);
    DATA(LSD_MAT_LCT45R);
    DATA(LSD_MAT_LCTTHR);
    DATA(LSD_MAT_LCC90R);
    DATA(LSD_MAT_LCC45R);
    DATA(LSD_MAT_LCCTHR);
    DATA(LSD_MAT_LCT90T);
    DATA(LSD_MAT_LCT45T);
    DATA(LSD_MAT_LCTTHT);
    DATA(LSD_MAT_LCC90T);
    DATA(LSD_MAT_LCC45T);
    DATA(LSD_MAT_LCCTHT);
    if(axisOptFlag == 2)
    {
        DATA(LSD_NODE1);
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],FALSE);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],FALSE);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],FALSE);
    }
    if(axisOptFlag == 3)
    {
        DATA(LSD_NODE3);
        DATA(LSD_NODE4);
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],FALSE);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],FALSE);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],FALSE);
    }
    RADIO(MAT221_MACF)
    {
        ADD(1, "1: No Change");
        ADD(2, "2: Switch material axes a and b");
        ADD(3, "3: Switch material axes a and c");
        ADD(4, "4: Switch material axes b and c");
    }
    if( axisOptFlag == 1)
    {
       SCALAR(LSD_MAT_BETA)     {DIMENSION="DIMENSIONLESS";}
    }
    if(axisOptFlag == 3)
    {
        DATA(LSD_NODE7);
        DATA(LSD_NODE8);
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],FALSE);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],FALSE);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],FALSE);
    }
    if(axisOptFlag == 4)
    {
        DATA(LSD_NODE5);
        DATA(LSD_NODE6);
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],FALSE);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],FALSE);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],FALSE);
        SCALAR(LSD_MAT_BETA)     {DIMENSION="DIMENSIONLESS";}
    }
    if(axisOptFlag == 5)
    {
        DATA(LSD_SYSTEM);
    }
}

FORMAT(Keyword971_R10.1)
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);

    //Card1
    COMMENT("$      MID        RO         E        PR        CP        TR      BETA    NUMINT");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,LSDYNA_CP,LSD_MAT_TR,LSD_MAT_BETA1,MATL123_NUMINT);

    //Card2
    COMMENT("$   LCT00R    LCT00T       LCF       LCG       LCH       LCI");
    CARD("%10d%10d%10d%10d%10d%10d",LSD_MAT_LCT00R,LSD_MAT_LCT00T,LSD_MAT_LCF,LSD_MAT_LCG,LSD_MAT_LCH,LSD_MAT_LCI);

    //Import handling
    CARD_PREREAD("%10s%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,4,IMPORT);
    }
    else if(IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,5,IMPORT);
    }
    //Export handling
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 5 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,4.0,EXPORT);
    }

    //Card3
    COMMENT("$   LCC00R    LCC00T    LCS45R    LCS45T              SFIEPM     NITER      AOPT");
    if(axisOptFlag == 5)
    {
        CARD("%10d%10d%10d%10d%10s%10lg%10d%10lg",LSD_MAT_LCC00R,LSD_MAT_LCC00T,LSD_MAT_LCS45R,LSD_MAT_LCS45T,_BLANK_,LSD_MAT_SFIEPM,LSD_MAT_NITER,SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM));
    }
    else
    {
        CARD("%10d%10d%10d%10d%10s%10lg%10d%10lg",LSD_MAT_LCC00R,LSD_MAT_LCC00T,LSD_MAT_LCS45R,LSD_MAT_LCS45T,_BLANK_,LSD_MAT_SFIEPM,LSD_MAT_NITER,LOC_AOPT);
    }

    //Card4
    COMMENT("$   LCT90R    LCT45R    LCTTHR    LCC90R    LCC45R    LCCTHR");
    CARD("%10d%10d%10d%10d%10d%10d",LSD_MAT_LCT90R,LSD_MAT_LCT45R,LSD_MAT_LCTTHR,LSD_MAT_LCC90R,LSD_MAT_LCC45R,LSD_MAT_LCCTHR);

    //Card5
    COMMENT("$   LCT90T    LCT45T    LCTTHT    LCC90T    LCC45T    LCCTHT");
    CARD("%10d%10d%10d%10d%10d%10d",LSD_MAT_LCT90T,LSD_MAT_LCT45T,LSD_MAT_LCTTHT,LSD_MAT_LCC90T,LSD_MAT_LCC45T,LSD_MAT_LCCTHT);

    //Handling of card 6 and 7
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    if(LSD_NODE8 != NONE && LSD_NODE7 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }

    //Card6,7
    COMMENT("$       XP        YP        ZP        A1        A2        A3      MACF");
    if(axisOptFlag == 1) // AOPT == 0.0
    {
        CARD("%10s%10s%10s%10s%10s%10s%10d",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,MAT221_MACF);

        COMMENT("$       V1        V2        V3        D1        D2        D3      BETA");
        CARD("%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_MAT_BETA);
    }
    if(axisOptFlag == 2) // AOPT == 1.0
    {
        CARD("%10lg%10lg%10lg%10s%10s%10s%10d",LSDYNA_A1,LSDYNA_A2,LSDYNA_A3,_BLANK_,_BLANK_,_BLANK_,MAT221_MACF);

        COMMENT("$       V1        V2        V3        D1        D2        D3      BETA");
        BLANK;
    }
    if(axisOptFlag == 3) // AOPT == 2.0
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg%10d",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3,MAT221_MACF);

        COMMENT("$       V1        V2        V3        D1        D2        D3      BETA");
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
    }
    else if(axisOptFlag == 4) // AOPT == 3.0
    {
        CARD("%10s%10s%10s%10s%10s%10s%10d",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,MAT221_MACF);

        COMMENT("$       V1        V2        V3        D1        D2        D3      BETA");
        CARD("%10lg%10lg%10lg%10s%10s%10s%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,LSD_MAT_BETA);
    }
    else if(axisOptFlag == 5) // AOPT == 4.0
    {
        CARD("%10s%10s%10s%10s%10s%10s%10d",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,MAT221_MACF);

        COMMENT("$       V1        V2        V3        D1        D2        D3      BETA");
        BLANK;
    }
}

FORMAT(Keyword971_R11.1)
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, IMPORT);
    ASSIGN(AOPT_SKEW_FLAG, 1, EXPORT);

    //Card1
    COMMENT("$      MID        RO         E        PR        CP        TR      BETA    NUMINT");
    CARD("%10d%10lg%10lg%10lg%10lg%10lg%10lg%10lg",_ID_,Rho,E,Nu,LSDYNA_CP,LSD_MAT_TR,LSD_MAT_BETA1,MATL123_NUMINT);

    //Card2
    COMMENT("$   LCT00R    LCT00T       LCF       LCG       LCH       LCI");
    CARD("%10d%10d%10d%10d%10d%10d",LSD_MAT_LCT00R,LSD_MAT_LCT00T,LSD_MAT_LCF,LSD_MAT_LCG,LSD_MAT_LCH,LSD_MAT_LCI);

    //Import handling
    CARD_PREREAD("%10s%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LOC_AOPT);
    if(LOC_AOPT == 0.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,1,IMPORT);
    }
    else if(LOC_AOPT == 1.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,2,IMPORT);
    }
    else if(LOC_AOPT == 2.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,3,IMPORT);
    }
    else if(LOC_AOPT == 3.0 && IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,4,IMPORT);
    }
    else if(IO_FLAG == 1)
    {
        ASSIGN(axisOptFlag,5,IMPORT);
    }
    //Export handling
    if(axisOptFlag == 1 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,0.0,EXPORT);
    }
    else if(axisOptFlag == 2 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,1.0,EXPORT);
    }
    else if(axisOptFlag == 3 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,2.0,EXPORT);
    }
    else if(axisOptFlag == 4 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,3.0,EXPORT);
    }
    else if(axisOptFlag == 5 && IO_FLAG == 2)
    {
        ASSIGN(LOC_AOPT,4.0,EXPORT);
    }

    //Card3
    COMMENT("$   LCC00R    LCC00T    LCS45R    LCS45T              SFIEPM     NITER      AOPT");
    if(axisOptFlag == 5)
    {
        CARD("%10d%10d%10d%10d%10s%10lg%10d%10lg",LSD_MAT_LCC00R,LSD_MAT_LCC00T,LSD_MAT_LCS45R,LSD_MAT_LCS45T,_BLANK_,LSD_MAT_SFIEPM,LSD_MAT_NITER,SCALAR_OR_OBJECT(AOPT_SKEW_FLAG,axisOptFlag,LSD_SYSTEM));
    }
    else
    {
        CARD("%10d%10d%10d%10d%10s%10lg%10d%10lg",LSD_MAT_LCC00R,LSD_MAT_LCC00T,LSD_MAT_LCS45R,LSD_MAT_LCS45T,_BLANK_,LSD_MAT_SFIEPM,LSD_MAT_NITER,LOC_AOPT);
    }

    //Card4
    COMMENT("$   LCT90R    LCT45R    LCTTHR    LCC90R    LCC45R    LCCTHR");
    CARD("%10d%10d%10d%10d%10d%10d",LSD_MAT_LCT90R,LSD_MAT_LCT45R,LSD_MAT_LCTTHR,LSD_MAT_LCC90R,LSD_MAT_LCC45R,LSD_MAT_LCCTHR);

    //Card5
    COMMENT("$   LCT90T    LCT45T    LCTTHT    LCC90T    LCC45T    LCCTHT");
    CARD("%10d%10d%10d%10d%10d%10d",LSD_MAT_LCT90T,LSD_MAT_LCT45T,LSD_MAT_LCTTHT,LSD_MAT_LCC90T,LSD_MAT_LCC45T,LSD_MAT_LCCTHT);

    //Handling of card 6 and 7
    if(LSD_NODE1 != NONE)
    {
        ASSIGN(LSDYNA_XP,[@getentityvalue(nodes,$LSD_NODE1,x)],EXPORT);
        ASSIGN(LSDYNA_YP,[@getentityvalue(nodes,$LSD_NODE1,y)],EXPORT);
        ASSIGN(LSDYNA_ZP,[@getentityvalue(nodes,$LSD_NODE1,z)],EXPORT);
    }
    if(LSD_NODE4 != NONE && LSD_NODE3 != NONE)
    {
        ASSIGN(LSDYNA_A1,[@getentityvalue(nodes,$LSD_NODE4,x) - @getentityvalue(nodes,$LSD_NODE3,x)],EXPORT);
        ASSIGN(LSDYNA_A2,[@getentityvalue(nodes,$LSD_NODE4,y) - @getentityvalue(nodes,$LSD_NODE3,y)],EXPORT);
        ASSIGN(LSDYNA_A3,[@getentityvalue(nodes,$LSD_NODE4,z) - @getentityvalue(nodes,$LSD_NODE3,z)],EXPORT);
    }
    if(LSD_NODE6 != NONE && LSD_NODE5 != NONE)
    {
        ASSIGN(LSDYNA_V1,[@getentityvalue(nodes,$LSD_NODE6,x) - @getentityvalue(nodes,$LSD_NODE5,x)],EXPORT);
        ASSIGN(LSDYNA_V2,[@getentityvalue(nodes,$LSD_NODE6,y) - @getentityvalue(nodes,$LSD_NODE5,y)],EXPORT);
        ASSIGN(LSDYNA_V3,[@getentityvalue(nodes,$LSD_NODE6,z) - @getentityvalue(nodes,$LSD_NODE5,z)],EXPORT);
    }
    if(LSD_NODE8 != NONE && LSD_NODE7 != NONE)
    {
        ASSIGN(LSDYNA_D1,[@getentityvalue(nodes,$LSD_NODE8,x) - @getentityvalue(nodes,$LSD_NODE7,x)],EXPORT);
        ASSIGN(LSDYNA_D2,[@getentityvalue(nodes,$LSD_NODE8,y) - @getentityvalue(nodes,$LSD_NODE7,y)],EXPORT);
        ASSIGN(LSDYNA_D3,[@getentityvalue(nodes,$LSD_NODE8,z) - @getentityvalue(nodes,$LSD_NODE7,z)],EXPORT);
    }

    //Card6,7
    COMMENT("$       XP        YP        ZP        A1        A2        A3      MACF");
    if(axisOptFlag == 1) // AOPT == 0.0
    {
        CARD("%10s%10s%10s%10s%10s%10s%10d",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,MAT221_MACF);

        COMMENT("$       V1        V2        V3        D1        D2        D3    MANGLE");
        CARD("%10s%10s%10s%10s%10s%10s%10lg",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,LSD_MAT_BETA);
    }
    if(axisOptFlag == 2) // AOPT == 1.0
    {
        CARD("%10lg%10lg%10lg%10s%10s%10s%10d",LSDYNA_A1,LSDYNA_A2,LSDYNA_A3,_BLANK_,_BLANK_,_BLANK_,MAT221_MACF);

        COMMENT("$       V1        V2        V3        D1        D2        D3    MANGLE");
        BLANK;
    }
    if(axisOptFlag == 3) // AOPT == 2.0
    {
        CARD("%10s%10s%10s%10lg%10lg%10lg%10d",_BLANK_,_BLANK_,_BLANK_,LSDYNA_A1,LSDYNA_A2,LSDYNA_A3,MAT221_MACF);

        COMMENT("$       V1        V2        V3        D1        D2        D3    MANGLE");
        CARD("%10s%10s%10s%10lg%10lg%10lg",_BLANK_,_BLANK_,_BLANK_,LSDYNA_D1,LSDYNA_D2,LSDYNA_D3);
    }
    else if(axisOptFlag == 4) // AOPT == 3.0
    {
        CARD("%10s%10s%10s%10s%10s%10s%10d",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,MAT221_MACF);

        COMMENT("$       V1        V2        V3        D1        D2        D3    MANGLE");
        CARD("%10lg%10lg%10lg%10s%10s%10s%10lg",LSDYNA_V1,LSDYNA_V2,LSDYNA_V3,_BLANK_,_BLANK_,_BLANK_,LSD_MAT_BETA);
    }
    else if(axisOptFlag == 5) // AOPT == 4.0
    {
        CARD("%10s%10s%10s%10s%10s%10s%10d",_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,_BLANK_,MAT221_MACF);

        COMMENT("$       V1        V2        V3        D1        D2        D3    MANGLE");
        BLANK;
    }
}