//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// Material law 254
//

ATTRIBUTES(COMMON)
{
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    CommentEnumField                        = VALUE(INT,  "User Comments");
    Num_Comments                            = SIZE("No. of comment lines");
    Comments                                = ARRAY[Num_Comments](STRING,  "Entity_Comments");
    EncTypeEnumField                        = VALUE(INT,  "Type");
    RegTypeEnumField                        = VALUE(INT,  "Type");
    E                                       = VALUE(FLOAT,  "Youngs modulus");
    LSD_CTE                                 = VALUE(INT,  "Coefficient of thermal extension");
    LSD_CTECurve                            = VALUE(INT,  "Coefficient of thermal extension");
    LSD_DTEMP                               = VALUE(FLOAT,  "Max. temp. variation");
    LSD_GRAIN                               = VALUE(FLOAT,  "GRAIN");
    LSD_LCID                                = VALUE(FUNCT,  "Temperature dependent Young's modulus");
    LSD_LCID10                              = VALUE(FUNCT,  "scalar-valued phase transformation parameter");
    LSD_LCID11                              = VALUE(FUNCT,  "scalar-valued phase transformation parameter");
    LSD_LCID12                              = VALUE(FUNCT,  "scalar-valued phase transformation parameter");
    LSD_LCID13                              = VALUE(FUNCT,  "scalar-valued phase transformation parameter");
    LSD_LCID14                              = VALUE(FUNCT,  "phase transformation parameter");
    LSD_LCID15                              = VALUE(FUNCT,  "phase transformation parameter");
    LSD_LCID16                              = VALUE(FUNCT,  "phase transformation parameter");
    LSD_LCID17                              = VALUE(FUNCT,  "phase transformation parameter");
    LSD_LCID18                              = VALUE(FUNCT,  "phase transformation parameter");
    LSD_LCID19                              = VALUE(FUNCT,  "transformation induced strains");
    LSD_LCID2                               = VALUE(FUNCT,  "Temperature dependent Posson's ratio");
    LSD_LCID20                              = VALUE(FUNCT,  "transformation induced heat generation");
    LSD_LCID3                               = VALUE(FUNCT,  "Load curve with initial phase concentrations");
    LSD_LCID4                               = VALUE(FUNCT,  "LCID for mixture rule");
    LSD_LCID5                               = VALUE(FUNCT,  "Temperature dependent CTE");
    LSD_LCID6                               = VALUE(FUNCT,  "phase transf. model as func. of source and target phase");
    LSD_LCID7                               = VALUE(FUNCT,  "Table ID with start temperatures");
    LSD_LCID8                               = VALUE(FUNCT,  "Table ID with end temperatures");
    LSD_LCID9                               = VALUE(FUNCT,  "scalar-valued phase transformation parameter");
    LSD_N                                   = SIZE("Number of phases");
    LSD_MAT254_SIGY                         = ARRAY[LSD_N](INT,  "SIGY");
    LSD_PRCurve                             = VALUE(INT,  "Poisson's modulus");
    LSD_PTLAWNeg                            = VALUE(INT,  "phase transf. model as func. of source and target phase");
    LSD_PTRIP                               = VALUE(FLOAT,  "Flag for transformation induced plasticity");
    LSD_TIME                                = VALUE(FLOAT,  "time units per hour");
    LSD_TitleOpt                            = VALUE(INT,  "Title");
    LSD_YMCurve                             = VALUE(INT,  "YoungsModulusCurve");
    MATL270_TAEND                           = VALUE(FLOAT,  "Annealing temperature end");
    MATL270_TASTART                         = VALUE(FLOAT,  "Annealing temperature start");
    Nu                                      = VALUE(FLOAT,  "Poisson's modulus");
    Rho                                     = VALUE(FLOAT,  "Mass density");
    IO_FLAG                                 = VALUE(INT, "io flag");
    _HMCOMMENTSFLAG                         = VALUE(INT, "Write HM Comments");
    TITLE                                   = VALUE(STRING, "Title");
    LOC_PTLAW                               = VALUE(INT, "");
    LSD_NUSHIS                              = VALUE(INT, "Number of additional user defined history variables");
    LSD_T1PHAS                              = VALUE(FLOAT, "Lower temperature limit for cooling rate evaluation");
    LSD_T2PHAS                              = VALUE(FLOAT, "Upper temperature limit for cooling rate evaluation");
    LSD_LCID21                              = VALUE(FUNCT,"Function ID 1 for user defined history variables");
    LSD_LCID22                              = VALUE(FUNCT,"Function ID 2 for user defined history variables");
    LSD_LCID23                              = VALUE(FUNCT,"Function ID 3 for user defined history variables");
    LSD_LCID24                              = VALUE(FUNCT,"Function ID 4 for user defined history variables");
    LSD_LCID25                              = VALUE(FUNCT,"Function ID 5 for user defined history variables");
    LSD_LCID26                              = VALUE(FUNCT,"Function ID 6 for user defined history variables");
    LSD_LCID27                              = VALUE(FUNCT,"Function ID 7 for user defined history variables");
    LSD_LCID28                              = VALUE(FUNCT,"Function ID 8 for user defined history variables");
    //empty_string                       = VALUE(STRING, "Used as a local variable for free format case");
}

SKEYWORDS_IDENTIFIER(COMMON)
{

    KEYWORD_STR                             = 9000;
    CommentEnumField                        = 3220;
    Num_Comments                            = 3101;
    Comments                                = 3100;
    E                                       = 119;
    LSD_CTE                                 = 8217;
    LSD_CTECurve                            = 8218;
    LSD_DTEMP                               = 4286;
    LSD_GRAIN                               = 7635;
    LSD_LCID                                = 45;
    LSD_LCID10                              = 1142;
    LSD_LCID11                              = 1175;
    LSD_LCID12                              = 1176;
    LSD_LCID13                              = 1189;
    LSD_LCID14                              = 4602;
    LSD_LCID15                              = 4603;
    LSD_LCID16                              = 4604;
    LSD_LCID17                              = 4605;
    LSD_LCID18                              = 4606;
    LSD_LCID19                              = 4607;
    LSD_LCID2                               = 168;
    LSD_LCID20                              = 4608;
    LSD_LCID3                               = 170;
    LSD_LCID4                               = 171;
    LSD_LCID5                               = 172;
    LSD_LCID6                               = 199;
    LSD_LCID7                               = 200;
    LSD_LCID8                               = 224;
    LSD_LCID9                               = 1141;
    LSD_MAT254_SIGY                         = 8249;
    LSD_N                                   = 2003;
    LSD_PRCurve                             = 8216;
    LSD_PTLAWNeg                            = 8250;
    LSD_PTRIP                               = 8248;
    LSD_TIME                                = 2229;
    LSD_TitleOpt                            = 90;
    LSD_YMCurve                             = 8215;
    MATL270_TAEND                           = 7958;
    MATL270_TASTART                         = 7957;
    Nu                                      = 120;
    Rho                                     = 118;
    IO_FLAG                                 = -1;
    EncTypeEnumField                        = 5828;
    RegTypeEnumField                        = 5827;
    LSD_NUSHIS                              = 11707;
    LSD_T1PHAS                              = 11708;
    LSD_T2PHAS                              = 11709;
    LSD_LCID21                              = 4609;
    LSD_LCID22                              = 4610;
    LSD_LCID23                              = 4611;
    LSD_LCID24                              = 4612;
    LSD_LCID25                              = 11519;
    LSD_LCID26                              = 11521;
    LSD_LCID27                              = 11523;
    LSD_LCID28                              = 11525;
    LOC_PTLAW                               = -1;
    //empty_string                       = -1;
}

DRAWABLES(COMMON) {
public:
    MASS_DENSITY=SCALAR(Rho);
    YOUNG_MODULUS = SCALAR(E);
    POISSON_RATIO = SCALAR(Nu);
      //SOUND_SPEED is speed for ISDO = 0 and 1
  SOUND_SPEED       = EVAL((YOUNG_MODULUS/(MASS_DENSITY*(1-POISSON_RATIO*POISSON_RATIO)))^0.5);
  SOUND_SPEED_ISDO_2      = EVAL((YOUNG_MODULUS/MASS_DENSITY)^0.5);
 private:
  G                 = EVAL(YOUNG_MODULUS/(2*(1+POISSON_RATIO)));
  C1                = EVAL(YOUNG_MODULUS/(3*(1-2*POISSON_RATIO)));
 public:
  SOUND_SPEED_SOLID = EVAL(((4*G/3+C1)/MASS_DENSITY)^0.5);
}

CHECK(COMMON)
{

    LSD_N                                     >=0;
    LSD_N                                     <=80;
}

DEFAULTS(COMMON)
{
}

GUI(COMMON)
{
    ASSIGN(KEYWORD_STR, "*MAT_GENERALIZED_PHASE_CHANGE");
    RADIO(CommentEnumField)
    {
         ADD(1, "Hide in Menu/Export");
         ADD(2, "Show in Menu/Export");
         ADD(3, "Do not export");
    }
    if(CommentEnumField == 2)
    {  
        SIZE(Num_Comments);
        ARRAY(Num_Comments,"")
        {
           SCALAR(Comments);
        }
    }     
    FLAG(LSD_TitleOpt);
    if(LSD_TitleOpt == TRUE)
    {
         ASSIGN(KEYWORD_STR, "_TITLE");
    } 
mandatory:
    SCALAR(Rho);
optional:
    SIZE(LSD_N);
    FLAG( LSD_YMCurve);
    if(LSD_YMCurve == FALSE)
    {
        SCALAR(E);
    }
    else
    {
        DATA(LSD_LCID);
    }
    FLAG( LSD_PRCurve);
    if(LSD_PRCurve == FALSE)
    {
        SCALAR(Nu);
    }
    else
    {
        DATA(LSD_LCID2);
    }
    DATA(LSD_LCID3);
    DATA(LSD_LCID4);
    SCALAR(MATL270_TASTART);
    SCALAR(MATL270_TAEND);
    FLAG( LSD_CTECurve);
    if(LSD_CTECurve == FALSE)
    {
        SCALAR(LSD_CTE);
    }
    else
    {
        DATA(LSD_LCID5);
    }
    SCALAR(LSD_DTEMP);
    SCALAR(LSD_TIME);
    FLAG( LSD_PTLAWNeg);
    if(LSD_PTLAWNeg == FALSE)
    {
        DATA(LSD_LCID6);
    }
    else
    {
        DATA(LSD_LCID6);
    }
    DATA(LSD_LCID7);
    DATA(LSD_LCID8);
    DATA(LSD_LCID9);
    DATA(LSD_LCID10);
    DATA(LSD_LCID11);
    DATA(LSD_LCID12);
    DATA(LSD_LCID13);
    DATA(LSD_LCID14);
    DATA(LSD_LCID15);
    DATA(LSD_LCID16);
    DATA(LSD_LCID17);
    DATA(LSD_LCID18);
    DATA(LSD_LCID19);
    DATA(LSD_LCID20);
    SCALAR(LSD_PTRIP);
    SCALAR(LSD_NUSHIS);
    SCALAR(LSD_T1PHAS);
    SCALAR(LSD_T2PHAS);
    SCALAR(LSD_GRAIN);
    if(LSD_NUSHIS > 0) 
    {
        DATA(LSD_LCID21);
        DATA(LSD_LCID22);
        DATA(LSD_LCID23);
        DATA(LSD_LCID24);
        DATA(LSD_LCID25);
        DATA(LSD_LCID26);
        DATA(LSD_LCID27);
        DATA(LSD_LCID28);
    }
    ARRAY(LSD_N,"")
    {
       SCALAR(LSD_MAT254_SIGY);
    }

}

// File format
FORMAT(Keyword971_R9.0) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    //
    COMMENT("$      MID        RO         N        YM        PR       MIX      MIXR");
    CARD("%10d%10lg%10d%10lg%10lg%10d%10d",_ID_,Rho,LSD_N,SCALAR_OR_OBJECT(LSD_YMCurve,E,LSD_LCID),SCALAR_OR_OBJECT(LSD_PRCurve,Nu,LSD_LCID2),LSD_LCID3,LSD_LCID4);
    //
    COMMENT("$   TASTRT     TAEND    TABCTE                                   DTEMP      TIME");
    CARD("%10lg%10lg%10lg%10s%10s%10s%10lg%10lg",MATL270_TASTART,MATL270_TAEND,SCALAR_OR_OBJECT(LSD_CTECurve,LSD_CTE,LSD_LCID5),_BLANK_,_BLANK_,_BLANK_,LSD_DTEMP,LSD_TIME);
    //
    COMMENT("$    PTLAW     PTSTR     PTEND      PTX1      PTX2      PTX3      PTX4      PTX5");
    CARD("%10d%10d%10d%10d%10d%10d%10d%10d",FLAGGED_OBJECT(LSD_LCID6,LSD_PTLAWNeg),LSD_LCID7,LSD_LCID8,LSD_LCID9,LSD_LCID10,LSD_LCID11,LSD_LCID12,LSD_LCID13);
    //
    COMMENT("$   PTTAB1    PTTAB2    PTTAB3    PTTAB4    PTTAB5");
    CARD("%10d%10d%10d%10d%10d",LSD_LCID14,LSD_LCID15,LSD_LCID16,LSD_LCID17,LSD_LCID18);
    //
    COMMENT("$    PTEPS     PTRIP                                   GRAIN");
    CARD("%10d%10lg%10s%10s%10s%10lg",LSD_LCID19,LSD_PTRIP,_BLANK_,_BLANK_,_BLANK_,LSD_GRAIN);
    //
    if(LSD_N>=1)
    {
        COMMENT("$    SIGY1     SIGY2     SIGY3     SIGY4     SIGY5     SIGY6     SIGY7     SIGY8");
        CELL_LIST(LSD_N,"%10d",LSD_MAT254_SIGY);
    }
}

// File format
FORMAT(Keyword971_R11.1) 
{
    ASSIGN(IO_FLAG, 1, IMPORT);
    ASSIGN(IO_FLAG, 2, EXPORT);
    //
    COMMENT("$      MID        RO         N        YM        PR       MIX      MIXR");
    CARD("%10d%10lg%10d%10lg%10lg%10d%10d",_ID_,Rho,LSD_N,SCALAR_OR_OBJECT(LSD_YMCurve,E,LSD_LCID),SCALAR_OR_OBJECT(LSD_PRCurve,Nu,LSD_LCID2),LSD_LCID3,LSD_LCID4);
    //
    COMMENT("$   TASTRT     TAEND    TABCTE                                   DTEMP");
    CARD("%10lg%10lg%10lg%10s%10s%10s%10lg",MATL270_TASTART,MATL270_TAEND,SCALAR_OR_OBJECT(LSD_CTECurve,LSD_CTE,LSD_LCID5),_BLANK_,_BLANK_,_BLANK_,LSD_DTEMP);
    //
    COMMENT("$    PTLAW     PTSTR     PTEND      PTX1      PTX2      PTX3      PTX4      PTX5");
    CARD("%10d%10d%10d%10d%10d%10d%10d%10d",FLAGGED_OBJECT(LSD_LCID6,LSD_PTLAWNeg),LSD_LCID7,LSD_LCID8,LSD_LCID9,LSD_LCID10,LSD_LCID11,LSD_LCID12,LSD_LCID13);
    //
    COMMENT("$   PTTAB1    PTTAB2    PTTAB3    PTTAB4    PTTAB5");
    CARD("%10d%10d%10d%10d%10d",LSD_LCID14,LSD_LCID15,LSD_LCID16,LSD_LCID17,LSD_LCID18);
    //
    COMMENT("$    PTEPS     PTRIP     PTLAT              NUSHIS     GRAIN    T1PHAS    T2PHAS");
    CARD("%10d%10lg%10d%10s%10d%10lg%10lg%10lg",LSD_LCID19,LSD_PTRIP,LSD_LCID20,_BLANK_,LSD_NUSHIS,LSD_GRAIN,LSD_T1PHAS,LSD_T2PHAS);
    
    if(LSD_NUSHIS > 0)
    {
        COMMENT("$   FUSHI1    FUSHI2    FUSHI3    FUSHI4    FUSHI5    FUSHI6    FUSHI7    FUSHI8");
        CARD("%10d%10d%10d%10d%10d%10d%10d%10d",LSD_LCID21,LSD_LCID22,LSD_LCID23,LSD_LCID24,LSD_LCID25,LSD_LCID26,LSD_LCID27,LSD_LCID28);
    }
    //
    if(LSD_N>=1)
    {
        COMMENT("$    SIGY1     SIGY2     SIGY3     SIGY4     SIGY5     SIGY6     SIGY7     SIGY8");
        CELL_LIST(LSD_N,"%10d",LSD_MAT254_SIGY);
    }
}
