//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//CONTROL_IMPLICIT_AUTO
//

ATTRIBUTES(COMMON)
{
    // INPUT ATTRIBUTES
    LSD_IAUTO        = VALUE(INT,"Automatic time step control flag");
    LSD_LCID9        = VALUE(CURVE,"Curve ID gives time step size as a function of time");
    LSD_ITEOPT       = VALUE(INT,"Optimum equilibrium iteration count per time step");
    LSD_ITEWIN       = VALUE(INT,"Range of allowable iteration window");
    LSD_DTMIN1       = VALUE(FLOAT,"Minimum allowable time step size");
    LSD_DTMAX        = VALUE(FLOAT,"Maximum allowable time step size");
    LSD_LCID10       = VALUE(CURVE,"Curve ID gives max step size as a function of time");
    LSD_DTEXP        = VALUE(FLOAT,"Time interval to run in explicit mode before returning to implicit mode");
    LSD_LCID8        = VALUE(CURVE,"Curve ID gives the time interval as a function of time");
    LSD_KFAIL        = VALUE(INT,"Number of failed attempts to converge implicitly for the current time step before automatically switching to explicit time integration");
    LSD_KCYCLE       = VALUE(INT,"Number of explicit cycles to run in explicit mode before returning to the implicit mode");
    LSD_HCMIN        = VALUE(FLOAT,"Mid-point relative Euclidean residual norm min tolerance");
    LSD_HCMAX        = VALUE(FLOAT,"Mid-point relative Euclidean residual norm min tolerance");
    LSD_HMMIN        = VALUE(FLOAT,"Mid-point relative maximum residual norm min tolerance");
    LSD_HMMAX        = VALUE(FLOAT,"Mid-point relative maximum residual norm min tolerance");
    LSD_HNTMAX       = VALUE(FLOAT,"Mid-point absolute Nodal Translational norm tolerance");
    LSD_HNRMAX       = VALUE(FLOAT,"Mid-point absolute Nodal Rotational norm tolerance");
    LSD_HRTMAX       = VALUE(FLOAT,"Mid-point absolute Rigid body Translational norm tolerance");
    LSD_HRRMAX       = VALUE(FLOAT,"Mid-point absolute Rigid body Rotational norm tolerance");
    // HM INTERNAL
    KEYWORD_STR        = VALUE(STRING,"Solver Keyword");
    Option1            = VALUE(INT,"");
    LSD_LCIDOpt        = VALUE(INT,"");
    Option2            = VALUE(INT,"");
    LSD_CiaOpt         = VALUE(INT,"Options");
    IO_FLAG            = VALUE(INT,"");
    option             = VALUE(STRING,"");

}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR          = 9000;
    LSD_IAUTO            = 3143;
    LSD_LCID9            = 1141;
    LSD_ITEOPT           = 3144;
    LSD_ITEWIN           = 3145;
    LSD_DTMIN1           = 3173;
    Option1              = 686;
    LSD_LCIDOpt          = 5091;
    LSD_DTMAX            = 3029;
    LSD_LCID10           = 1142;
    Option2              = 687;
    LSD_DTEXP            = 4468;
    LSD_LCID8            = 224;
    LSD_KFAIL            = 594;
    LSD_KCYCLE           = 595;
    LSD_CiaOpt           = 2050;
    LSD_HCMIN            = 2042;
    LSD_HCMAX            = 2043;
    LSD_HMMIN            = 2044;
    LSD_HMMAX            = 2045;
    LSD_HNTMAX           = 2046;
    LSD_HNRMAX           = 2047;
    LSD_HRTMAX           = 2048;
    LSD_HRRMAX           = 2049;
       
    IO_FLAG              = -1;
    option               = -1;
}

DEFAULTS(COMMON)
{
    LSD_ITEOPT           = 11;
    LSD_ITEWIN           = 5;
}

CHECK(COMMON)
{
    LSD_DTMAX >= 0.0;
    LSD_DTEXP >= 0.0;
}

GUI(COMMON)
{
    mandatory:
    RADIO(LSD_CiaOpt)
    {
        ADD(1,"BLANK");
        ADD(2,"DYN");
        ADD(3,"SPR");
    }

    if(LSD_CiaOpt == 2)
    {
        ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_AUTO_DYN");
    }
    else if(LSD_CiaOpt == 3)
    {
        ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_AUTO_SPR");
    }
    else
    {
        ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_AUTO");
    }
    optional:
    FLAG(Option1);
    if (Option1 != FALSE)
    {
        DATA(LSD_LCID9);
    }
    else
    {
        RADIO(LSD_IAUTO)
        {
            ADD(0,"0: Constant time step size");
            ADD(1,"1: Automatically adjusted time step size");
            ADD(2,"2: Automatically adjust time step size and synchronize with thermal mechanical time step");
            ADD(3,"3: Same as 1, but accounting for mid step residual values");
        }
    }
    SCALAR(LSD_ITEOPT)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_ITEWIN)      {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_DTMIN1)      {DIMENSION="t";}

    FLAG(LSD_LCIDOpt);
    if (LSD_LCIDOpt != FALSE)
    {
        DATA(LSD_LCID10);
    }
    else
    {
        SCALAR(LSD_DTMAX)  {DIMENSION="DIMENSIONLESS";}
    }

    FLAG(Option2);
    if (Option2 != FALSE)
    {
        DATA(LSD_LCID8);
    }
    else
    {
        SCALAR(LSD_DTEXP)       {DIMENSION="t";}
    }

    SCALAR(LSD_KFAIL)     {DIMENSION="DIMENSIONLESS";}
    SCALAR(LSD_KCYCLE)    {DIMENSION="DIMENSIONLESS";}
    if (LSD_IAUTO == 3 && Option1 != TRUE)
    {
        SCALAR(LSD_HCMIN)     {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_HCMAX)     {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_HMMIN)     {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_HMMAX )    {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_HNTMAX)    {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_HNRMAX)    {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_HRTMAX)    {DIMENSION="DIMENSIONLESS";}
        SCALAR(LSD_HRRMAX)    {DIMENSION="DIMENSIONLESS";}
    }
}

//File format
FORMAT(Keyword971_R11.1)
{
    ASSIGN(IO_FLAG,0,IMPORT);
    ASSIGN(IO_FLAG,1,EXPORT);

    if(IO_FLAG == 0)
    {
        HEADER("*CONTROL_IMPLICIT_AUTO%s",option);
    } 
    else if(IO_FLAG == 1 && LSD_CiaOpt == 2)
    {
        HEADER("*CONTROL_IMPLICIT_AUTO_DYN");
    }
    else if(IO_FLAG == 1 && LSD_CiaOpt == 3)
    {
        HEADER("*CONTROL_IMPLICIT_AUTO_SPR");
    }
    else
    {
        HEADER("*CONTROL_IMPLICIT_AUTO"); 
    }

    if( IO_FLAG == 0 && option == "")
    {
      ASSIGN(LSD_CiaOpt,1);
    }
    else if( IO_FLAG == 0 && option == "_DYN")
    {
      ASSIGN(LSD_CiaOpt,2);
    }
    else if( IO_FLAG == 0 && option == "_SPR")
    {
      ASSIGN(LSD_CiaOpt,3);
    }
    COMMENT("$    IAUTO    ITEOPT    ITEWIN     DTMIN     DTMAX     DTEXP     KFAIL    KCYCLE");
    CARD("%10d%10d%10d%10lg%10lg%10lg%10d%10d",SCALAR_OR_OBJECT(Option1,LSD_IAUTO,LSD_LCID9),LSD_ITEOPT,LSD_ITEWIN,LSD_DTMIN1,SCALAR_OR_OBJECT(LSD_LCIDOpt,LSD_DTMAX,LSD_LCID10),SCALAR_OR_OBJECT(Option2,LSD_DTEXP,LSD_LCID8),LSD_KFAIL,LSD_KCYCLE);
    if( LSD_IAUTO == 3 && Option1 != TRUE)
    {
        COMMENT("$    HCMIN     HCMAX     HMMIN     HMMAX    HNTMAX    HNRMAX    HRTMAX    HRRMAX");
        CARD("%10lg%10lg%10lg%10lg%10lg%10lg%10lg%10lg",LSD_HCMIN,LSD_HCMAX,LSD_HMMIN,LSD_HMMAX,LSD_HNTMAX,LSD_HNRMAX,LSD_HRTMAX,LSD_HRRMAX);
    }
}

FORMAT(Keyword971_R7.1)
{
    ASSIGN(IO_FLAG,0,IMPORT);
    ASSIGN(IO_FLAG,1,EXPORT);

    if(IO_FLAG == 0)
    {
        HEADER("*CONTROL_IMPLICIT_AUTO%s",option);
    } 
    else if(IO_FLAG == 1 && LSD_CiaOpt == 2)
    {
        HEADER("*CONTROL_IMPLICIT_AUTO_DYN");
    }
    else if(IO_FLAG == 1 && LSD_CiaOpt == 3)
    {
        HEADER("*CONTROL_IMPLICIT_AUTO_SPR");
    }
    else
    {
        HEADER("*CONTROL_IMPLICIT_AUTO");
    }

    if( IO_FLAG == 0 && option == "")
    {
      ASSIGN(LSD_CiaOpt,1);
    }
    else if( IO_FLAG == 0 && option == "_DYN")
    {
      ASSIGN(LSD_CiaOpt,2);
    }
    else if( IO_FLAG == 0 && option == "_SPR")
    {
      ASSIGN(LSD_CiaOpt,3);
    }
    COMMENT("$    IAUTO    ITEOPT    ITEWIN     DTMIN     DTMAX     DTEXP     KFAIL    KCYCLE");
    CARD("%10d%10d%10d%10lg%10lg%10lg%10d%10d",SCALAR_OR_OBJECT(Option1,LSD_IAUTO,LSD_LCID9),LSD_ITEOPT,LSD_ITEWIN,LSD_DTMIN1,SCALAR_OR_OBJECT(LSD_LCIDOpt,LSD_DTMAX,LSD_LCID10),SCALAR_OR_OBJECT(Option2,LSD_DTEXP,LSD_LCID8),LSD_KFAIL,LSD_KCYCLE);
}

FORMAT(Keyword971_R6.1)
{
    HEADER("*CONTROL_IMPLICIT_AUTO");
    COMMENT("$    IAUTO    ITEOPT    ITEWIN     DTMIN     DTMAX     DTEXP     KFAIL    KCYCLE");
    CARD("%10d%10d%10d%10lg%10lg%10lg%10d%10d",SCALAR_OR_OBJECT(Option1,LSD_IAUTO,LSD_LCID9),LSD_ITEOPT,LSD_ITEWIN,LSD_DTMIN1,SCALAR_OR_OBJECT(LSD_LCIDOpt,LSD_DTMAX,LSD_LCID10),SCALAR_OR_OBJECT(Option2,LSD_DTEXP,LSD_LCID8),LSD_KFAIL,LSD_KCYCLE);
}
