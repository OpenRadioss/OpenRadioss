//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2024 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
// CONTROL_IMPLICIT_MODAL_DYNAMIC
//

ATTRIBUTES(COMMON)
{
// INPUT ATTRIBUTES
    LSD_MDFLAG                              = VALUE(INT,    "Modal Dynamic flag");
    LSD_IMP_ZETA                            = VALUE(FLOAT,  "Modal Dynamic damping constant");
    ImpModDynamic_filename_option           = VALUE(INT,    "FileName_Option");
    LSD_CIMD_FileName                       = VALUE(STRING, "If specified the eigenmodes are read from the specified file");
    LSD_MD_STRS                             = VALUE(INT,    "Modal dynamic stress flag");
    LSD_DTOUT                               = VALUE(FLOAT,  "Modal dynamics output interval");
    LSD_INTEG                               = VALUE(INT,    "Integration method");
    LSD_NSID                                = VALUE(SETS,   "The node set ID of the nodes in the modal model that are subjected to loads") { SUBTYPES = (/SETS/SET_NODE_IDPOOL); }
    LSD_CIMD_FileName2                      = VALUE(STRING, "If specified, constraint modes are read from the specified file");

// HM INTERNAL
    KEYWORD_STR                             = VALUE(STRING, "Solver Keyword");
    IO_FLAG                                 = VALUE(INT,    "Import/Export flag");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
// INPUT ATTRIBUTES
    LSD_MDFLAG                              = 8109;
    LSD_IMP_ZETA                            = 8110;
    ImpModDynamic_filename_option           = 8112;
    LSD_CIMD_FileName                       = 8111;
    LSD_MD_STRS                             = 1691;
    LSD_DTOUT                               = 1692;
    LSD_INTEG                               = 1693;
    LSD_NSID                                = 745;
    LSD_CIMD_FileName2                      = 1695;

// HM INTERNAL
    KEYWORD_STR                             = 9000;
    IO_FLAG                                 = -1;
}

DEFAULTS(COMMON)
{
    LSD_MDFLAG                              = 0;
    LSD_IMP_ZETA                            = 0.0;
    ImpModDynamic_filename_option           = 0;
    LSD_MD_STRS                             = 0;
    LSD_DTOUT                               = 0.0;
    LSD_INTEG                               = 1;
  //LSD_NSID                                = {all}; //Object, NO default value
}

GUI(COMMON)
{
  ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_MODAL_DYNAMIC");

  RADIO(LSD_MDFLAG)
  {
      ADD(0, "0: no modal dynamic analysis");
      ADD(1, "1: perform modal dynamic analysis");
      ADD(2, "2: perform modal dynamic analysis with prescribed motion constraints on the constraint modes input with Card 3");
  }
  SCALAR(LSD_IMP_ZETA) {DIMENSION="DIMENSIONLESS";}
  SCALAR(LSD_MD_STRS)  {DIMENSION="DIMENSIONLESS";}
  SCALAR(LSD_DTOUT)  {DIMENSION="DIMENSIONLESS";}
  RADIO(LSD_INTEG)
  {
      ADD(0, "0: defaults to 1");
      ADD(1, "1: perform modal dynamic analysis with explicit time integration");
      ADD(2, "2: perform modal dynamic analysis with implicit time integration");
  }
  DATA(LSD_NSID) { SUBTYPES = (/SETS/SET_NODE_IDPOOL); }

  if (LSD_MDFLAG == 1) {
    FLAG(ImpModDynamic_filename_option,"FileName_Option");
  }
  
  if (LSD_MDFLAG == 1 && ImpModDynamic_filename_option == 1) {
      SCALAR(LSD_CIMD_FileName) {DIMENSION="DIMENSIONLESS";}
  }

  if (LSD_MDFLAG == 2) {
      SCALAR(LSD_CIMD_FileName) {DIMENSION="DIMENSIONLESS";}
      SCALAR(LSD_CIMD_FileName2) {DIMENSION="DIMENSIONLESS";}
  }
}

// File format
FORMAT(Keyword971_R7.1)
{
  ASSIGN(IO_FLAG,0,EXPORT);
  ASSIGN(IO_FLAG,1,IMPORT);

  HEADER("*CONTROL_IMPLICIT_MODAL_DYNAMIC");
  
  COMMENT("$   MDFLAG      ZETA");
  CARD("%10d%10lg",LSD_MDFLAG,LSD_IMP_ZETA);

  if (IO_FLAG == 1) {
      CARD_PREREAD("%-80s",LSD_CIMD_FileName);
      if (LSD_CIMD_FileName != "") {
          COMMENT("$ FILENAME");
          FREE_CARD(ImpModDynamic_filename_option,"%-80s",LSD_CIMD_FileName);
      }
  } else if (ImpModDynamic_filename_option == 1) {
      // EXPORT
      COMMENT("$ FILENAME");
      CARD("%-80s",LSD_CIMD_FileName);
  }
}

FORMAT(Keyword971_R11.1)
{
  ASSIGN(IO_FLAG,0,EXPORT);
  ASSIGN(IO_FLAG,1,IMPORT);

  HEADER("*CONTROL_IMPLICIT_MODAL_DYNAMIC");
  
  COMMENT("$   MDFLAG      ZETA   MD_STRS     DTOUT     INTEG      NSID");
  if (LSD_NSID == NONE) {
      ASSIGN(LSD_NSID,0,EXPORT);
  }
  CARD("%10d%10lg%10d%10lg%10d%10d",LSD_MDFLAG,LSD_IMP_ZETA,LSD_MD_STRS,LSD_DTOUT,LSD_INTEG,LSD_NSID);
  
  if (IO_FLAG == 1) {
      if (LSD_MDFLAG == 1) {
          CARD_PREREAD("%-80s",LSD_CIMD_FileName);
          if (LSD_CIMD_FileName != "") {
              COMMENT("$FILENAME                                                                       ");
              FREE_CARD(ImpModDynamic_filename_option,"%-80s",LSD_CIMD_FileName);
          }
      } else if (LSD_MDFLAG == 2) {
          COMMENT("$FILENAME                                                                       ");
          CARD("%-80s",LSD_CIMD_FileName);
          COMMENT("$FILENAME2                                                                      ");
          CARD("%-80s",LSD_CIMD_FileName2);
      }
  } else {
      // EXPORT
      if (LSD_MDFLAG == 1 && ImpModDynamic_filename_option == 1) {
          COMMENT("$FILENAME                                                                       ");
          CARD("%-80s",LSD_CIMD_FileName);
      } else if (LSD_MDFLAG == 2) {
          COMMENT("$FILENAME                                                                       ");
          CARD("%-80s",LSD_CIMD_FileName);
          COMMENT("$FILENAME2                                                                      ");
          CARD("%-80s",LSD_CIMD_FileName2);
      }      
  }
}
