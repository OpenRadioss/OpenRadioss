//Copyright>    CFG Files and Library ("CFG")
//Copyright>    Copyright (C) 1986-2025 Altair Engineering Inc.
//Copyright>
//Copyright>    Altair Engineering Inc. grants to third parties limited permission to
//Copyright>    use and modify CFG solely in connection with OpenRadioss software, provided
//Copyright>    that any modification to CFG by a third party must be provided back to
//Copyright>    Altair Engineering Inc. and shall be deemed a Contribution under and therefore
//Copyright>    subject to the CONTRIBUTOR LICENSE AGREEMENT for OpenRadioss software.
//Copyright>
//Copyright>    CFG IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//Copyright>    INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//Copyright>    A PARTICULAR PURPOSE, AND NONINFRINGEMENT.  IN NO EVENT SHALL ALTAIR ENGINEERING
//Copyright>    INC. OR ITS AFFILIATES BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY,
//Copyright>    WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR
//Copyright>    IN CONNECTION WITH CFG OR THE USE OR OTHER DEALINGS IN CFG.
//
//CONTROL_IMPLICIT_MODES
//

ATTRIBUTES(COMMON)
{
// INPUT ATTRIBUTES
    BINARY_OPT                                = VALUE(INT, "BinaryOption");
    LSD_NSID                                  = VALUE(SETS, "Node set ID for constraint modes ") { SUBTYPES = (/SETS/SET_NODE_IDPOOL) ; }
    LSD_NSIDEX                                = VALUE(SETS, "Node set ID for attachment modes") { SUBTYPES = (/SETS/SET_NODE_IDPOOL) ; }
    LSD_NEIG                                  = VALUE(INT, "Number of eigenmodes");
    LSD_IBASE                                 = VALUE(INT, "Offset for numbering of the generalized internal degrees of freedom for the superelement");
    LSD_SE_MASS                               = VALUE(STRING, "Name of the superelement mass matrix");
    LSD_SE_DAMP                               = VALUE(STRING, "Name of the superelement damping matrix");
    LSD_SE_STIFF                              = VALUE(STRING, "Name of the superelement stiffness matrix");
    LSD_SE_INERT                              = VALUE(STRING, "Name of the superelement inertia matrix, required for gravity loading applications of the superelement");
    LSD_SE_FILENAME                           = VALUE(STRING, "If any of SE_MASS, SE_DAMP, SE_STIFF, or SE_INERT is blank then the second line is required and contains the file name for the superelement");
    Option1                                   = VALUE(INT, "OptionalCard2");
    LSD_IRESVEC                               = VALUE(INT, "Converting the attachment modes to residual vectors flag");

// HM INTERNAL
    KEYWORD_STR                               = VALUE(STRING, "Solver Keyword");
    IO_FLAG                                   = VALUE(INT, "");
    option                                    = VALUE(STRING, "");
}

SKEYWORDS_IDENTIFIER(COMMON)
{
    KEYWORD_STR                               = 9000;
    BINARY_OPT                                = 7749;
    LSD_NSID                                  = 745;
    LSD_NSIDEX                                = 31;
    LSD_NEIG                                  = 3146;
    LSD_IBASE                                 = 6305;
    LSD_SE_MASS                               = 6306;
    LSD_SE_DAMP                               = 6307;
    LSD_SE_STIFF                              = 6308;
    LSD_SE_INERT                              = 6309;
    LSD_SE_FILENAME                           = 6310;
    Option1                                   = 686;
    LSD_IRESVEC                               = 1696;

    IO_FLAG                                   = -1;
    option                                    = -1;
}

CHECK(COMMON)
{

}


DEFAULTS(COMMON)
{
    LSD_IRESVEC                               = 0;
}

GUI(COMMON)
{
  FLAG(BINARY_OPT);
  if(BINARY_OPT == 0)
  {
    ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_MODES");
  }
  else
  {
    ASSIGN(KEYWORD_STR, "*CONTROL_IMPLICIT_MODES_BINARY");
  }

  DATA(LSD_NSID);
  DATA(LSD_NSIDEX);

  SCALAR(LSD_NEIG)     {DIMENSION="DIMENSIONLESS";}
  SCALAR(LSD_IBASE)    {DIMENSION="DIMENSIONLESS";}
  SCALAR(LSD_SE_MASS)  {DIMENSION="DIMENSIONLESS";}
  SCALAR(LSD_SE_DAMP)  {DIMENSION="DIMENSIONLESS";}
  SCALAR(LSD_SE_STIFF) {DIMENSION="DIMENSIONLESS";}
  SCALAR(LSD_SE_INERT) {DIMENSION="DIMENSIONLESS";}
  SCALAR(LSD_SE_FILENAME) {DIMENSION="DIMENSIONLESS";}

  //Optional card 
  FLAG(Option1);
  optional:

  if(Option1 != FALSE)
  {
    SEPARATOR("Optional Cards 1");
    RADIO(LSD_IRESVEC)
    {
      ADD(0,"0: No conversion");
      ADD(1,"1: Conversion by orthogonalizing them to the eigenvectors");
    }
  }
}

//File format
FORMAT(Keyword971)
{
  ASSIGN(IO_FLAG,0,IMPORT);
  ASSIGN(IO_FLAG,1,EXPORT);

  if(IO_FLAG == 0)
  {
    HEADER("*CONTROL_IMPLICIT_MODES%s",option);
  } 
  if(IO_FLAG == 1 && BINARY_OPT == 1)
  {
     HEADER("*CONTROL_IMPLICIT_MODES_BINARY");
  }
  else
  {
     HEADER("*CONTROL_IMPLICIT_MODES"); 
  }

  if(IO_FLAG == 0)
  {
    if(option == "")
    {
      ASSIGN(BINARY_OPT,0);
    }
    else
    {
      ASSIGN(BINARY_OPT,1);
    }
  }

  COMMENT("$    NSIDC     NSIDA      NEIG     IBASE   SE_MASS   SE_DAMP  SE_STIFF  SE_INERT");
    CARD("%10d%10d%10d%10d%10s%10s%10s%10s",LSD_NSID,LSD_NSIDEX,LSD_NEIG,LSD_IBASE,LSD_SE_MASS,LSD_SE_DAMP,LSD_SE_STIFF,LSD_SE_INERT);

  COMMENT("$SE_FILENAME                                                                    ");
  CARD("%-80s",LSD_SE_FILENAME);
}

FORMAT(Keyword971_R11.1)
{
  ASSIGN(IO_FLAG,0,IMPORT);
  ASSIGN(IO_FLAG,1,EXPORT);

  if(IO_FLAG == 0)
  {
    HEADER("*CONTROL_IMPLICIT_MODES%s",option);
  } 
  if(IO_FLAG == 1 && BINARY_OPT == 1)
  {
     HEADER("*CONTROL_IMPLICIT_MODES_BINARY");
  }
  else
  {
     HEADER("*CONTROL_IMPLICIT_MODES"); 
  }

  if(IO_FLAG == 0)
  {
    if(option == "")
    {
      ASSIGN(BINARY_OPT,0);
    }
    else
    {
      ASSIGN(BINARY_OPT,1);
    }
  }

  COMMENT("$    NSIDC     NSIDA      NEIG     IBASE   SE_MASS   SE_DAMP  SE_STIFF  SE_INERT");
    CARD("%10d%10d%10d%10d%10s%10s%10s%10s",LSD_NSID,LSD_NSIDEX,LSD_NEIG,LSD_IBASE,LSD_SE_MASS,LSD_SE_DAMP,LSD_SE_STIFF,LSD_SE_INERT);

  COMMENT("$SE_FILENAME                                                                    ");
  CARD("%-80s",LSD_SE_FILENAME);

  if(Option1 != FALSE)
    COMMENT("$  IRESVEC");
  FREE_CARD(Option1,"%10d",LSD_IRESVEC);
}