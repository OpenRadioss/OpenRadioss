# Compiler predefinition
# Simplify usage for target compilation
#########################################

# Build Option
set(BUILD_SHARED_LIBS FALSE)

# Executable name
# ---------------

set ( RELNAME ${arch}  )


# General machine flag setting
set ( cppmach "-DCPP_mach=CPP_p4win64" )
set ( cpprel  "-DCPP_rel=00" )


# Third party libraries
# ---------------------

#hm_reader
set ( reader_lib "${source_directory}/../extlib/hm_reader/win64/hm_reader_win64.lib")

#metis
set (metis_lib "${source_directory}/../extlib/metis/win64/libmetis_win64_i2018_1_vs2015.lib")

#MKL
set (MKL_Inc "-DMKL")
set (MKL_Lib "mkl_intel_lp64_dll.lib mkl_intel_thread_dll.lib mkl_core_dll.lib")

# Zlib
set (zlib_inc "-I${source_directory}/../extlib/zlib/win64_mt/include")
set (zlib_lib "  ${source_directory}/../extlib/zlib/win64_mt/zlib1.lib")

#
# compiler Flags
# --------------

set (CMAKE_Fortran_FLAGS " " )
set (CMAKE_C_FLAGS " " )
set (CMAKE_CPP_FLAGS " " )
set (CMAKE_CXX_FLAGS " " )

set (CMAKE_Fortran_FLAGS_DEBUG " " )
set (CMAKE_Fortran_FLAGS_RELEASE " " )

set (CMAKE_C_FLAGS_DEBUG " " )
set (CMAKE_C_FLAGS_RELEASE " " )

set (CMAKE_CPP_FLAGS_DEBUG " " )
set (CMAKE_CPP_FLAGS_RELEASE " " )

set (CMAKE_CXX_FLAGS_DEBUG " " )
set (CMAKE_CXX_FLAGS_RELEASE " " )

# Single / Double Precision
# -------------------------
if (precision STREQUAL "sp")
  set (precision_flag "-DMYREAL4")
else (precision STREQUAL "sp")
  set (precision_flag "-DMYREAL8")
endif (precision STREQUAL "sp")

# Modules directory
set(CMAKE_Fortran_MODULE_DIRECTORY ${CMAKE_BINARY_DIR}/CMakeFiles/{EXEC_NAME}/modules )
set(CMAKE_Fortran_MODDIR_FLAG "/module:" )

message (STATUS "modules: ${CMAKE_Fortran_MODULE_DIRECTORY}")

#Generic Compilation flags
###########################
message (STATUS "CMake Generators:${CMAKE_GENERATOR} ")

if ( CMAKE_GENERATOR STREQUAL "Ninja" )
   # /fpp has issues with longer file path.
   # Ninja has already preprocessed the files and CMAKES hardcode /fpp in the beginning.
   # set /nofpp invalidates hardcoded /fpp
   set(FPP_FLAG "/nofpp")
else()
   set(FPP_FLAG "/fpp")
endif()

set(VECT_OPT "/nologo /Qaxsse3 /O2 /fp:precise /Qftz /Qopenmp")
set(Fortran "${FPP_FLAG}  /extend-source /assume:buffered_io")
# 
if ( debug STREQUAL "1" )
 
# Fortran
set_source_files_properties( ${source_files}  PROPERTIES COMPILE_FLAGS " ${precision_flag} -DMETIS5 ${cppmach} ${cpprel} -DCPP_comp=f90 ${FPP_FLAG} /Od /debug:all /Qftz /extend-source /assume:buffered_io /Qopenmp  ${ADF} /traceback" )

# C source files
set_source_files_properties(${c_source_files} PROPERTIES COMPILE_FLAGS " ${precision_flag} -DMETIS5 ${cppmach} ${cpprel} /nologo /Od /debug:all /Qftz  /Qopenmp /traceback ${zlib_inc}" )

# CXX source files
set_source_files_properties(${cpp_source_files} PROPERTIES COMPILE_FLAGS " ${precision_flag} -DMETIS5 ${cppmach} ${cpprel} /nologo /Od /debug:all /Qftz  /Qopenmp /traceback ${zlib_inc}" )


elseif ( debug STREQUAL "chkb" )
 
# Fortran
set_source_files_properties( ${source_files}  PROPERTIES COMPILE_FLAGS "/nologo ${precision_flag} -DMETIS5 ${cppmach} ${cpprel} -DCPP_comp=f90 /fpp /Od /debug:all /check:bounds /check:uninit /Qftz /extend-source /assume:buffered_io /Qopenmp  ${ADF} /traceback" )

# C source files
set_source_files_properties(${c_source_files} PROPERTIES COMPILE_FLAGS "/nologo ${precision_flag} -DMETIS5 ${cppmach} ${cpprel} /nologo /Od /debug:all  /Qftz  /Qopenmp /traceback  ${zlib_inc}" )

# CXX source files
set_source_files_properties(${cpp_source_files} PROPERTIES COMPILE_FLAGS "/nologo ${precision_flag} -DMETIS5 ${cppmach} ${cpprel} /nologo /Od /debug:all /Qftz  /Qopenmp /traceback  ${zlib_inc}" )

else ()

# Fortran
set_source_files_properties( ${source_files}  PROPERTIES COMPILE_FLAGS " ${precision_flag} -DMETIS5 ${cppmach} ${cpprel} -DCPP_comp=f90 ${VECT_OPT} ${Fortran} ${ADF}" )

# C source files
set_source_files_properties(${c_source_files} PROPERTIES COMPILE_FLAGS " ${precision_flag} ${Tet_mesher_inc} -DMETIS5 ${cppmach} ${cpprel} ${VECT_OPT}  ${zlib_inc}" )

# CXX source files
set_source_files_properties(${cpp_source_files} PROPERTIES COMPILE_FLAGS " ${precision_flag} ${Tet_mesher_inc} -DMETIS5 ${cppmach} ${cpprel} ${VECT_OPT}  ${zlib_inc}" )

endif()

# Linking flags
set (CMAKE_EXE_LINKER_FLAGS "/F1500000000 /STACK:1500000000 ${reader_lib} ${MKL_Lib}  ${metis_lib}  ${zlib_lib} svml_dispmd.lib")

#Libraries
set (LINK "advapi32.lib")


# -------------------------------------------------------------------------------------------------------------------------------------------
# Specific set of compilation flag

set (F_O1_compiler_flags " ${precision_flag} -DMETIS5 ${cppmach} ${cpprel} /extend-source /O1 /fp:precise /Qopenmp /Qftz")
set (F_O1_compiler_flags_no_omp " ${precision_flag} -DMETIS5 ${cppmach} ${cpprel} /extend-source /O1 /Qopenmp /fp:precise /Qftz")
set (F_O2_compiler_flags_no_omp " ${precision_flag} -DMETIS5 ${cppmach} ${cpprel} /extend-source /O2 /Qopenmp /fp:precise /Qftz")

if ( debug STREQUAL "0" )
  set_source_files_properties( ${source_directory}/source/starter/lectur.F PROPERTIES COMPILE_FLAGS ${F_O1_compiler_flags} )
  set_source_files_properties( ${source_directory}/source/tools/sect/prelecsec.F PROPERTIES COMPILE_FLAGS ${F_O2_compiler_flags_no_omp} )
  set_source_files_properties( ${source_directory}/source/elements/sph/nbsph.F PROPERTIES COMPILE_FLAGS ${F_O1_compiler_flags_no_omp} )
else()
endif()

if( no_python STREQUAL "1") 
get_source_file_property( existing_flags ${source_directory}/../common_source/modules/cpp_python_funct.cpp COMPILE_FLAGS)
set_source_files_properties( ${source_directory}/../common_source/modules/cpp_python_funct.cpp PROPERTIES COMPILE_FLAGS  "${existing_flags} -DPYTHON_DISABLED " )
endif()
