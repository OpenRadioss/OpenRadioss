# Compiler predefinition
# Simplify usage for target compilation
#########################################


# Executable name
# ---------------

set ( RELNAME ${arch}  )


# General machine flag setting
set ( cppmach "-DCPP_mach=CPP_p4linux964" )
set ( cpprel  "-DCPP_rel=70" )


# Third party libraries
# ---------------------

#hm_reader
set ( reader_lib "-L${source_directory}/../extlib/hm_reader/linuxa64/ -lhm_reader_linuxa64 -lapr-1" )


#Lapack
set (lapack_lib "${source_directory}/../extlib/lapack-3.10.0/lib_linux64_gf/liblapack.a ${source_directory}/../extlib/lapack-3.10.0/lib_linux64_gf/librefblas.a  ${source_directory}/../extlib/lapack-3.10.0/lib_linux64_gf/libtmglib.a")

#metis
set (metis_lib "${source_directory}/../extlib/metis/linuxa64/libmetis_linuxa64.a ")

#
# compiler Flags
# --------------
set (CMAKE_Fortran_FLAGS_DEBUG " " )
set (CMAKE_Fortran_FLAGS_RELEASE " " )

set (CMAKE_C_FLAGS_DEBUG " " )
set (CMAKE_C_FLAGS_RELEASE " " )

set (CMAKE_CPP_FLAGS_DEBUG " " )
set (CMAKE_CPP_FLAGS_RELEASE " " )

# Single / Double Precision
# -------------------------
if (precision STREQUAL "sp")
  set (precision_flag "-DMYREAL4")
else (precision STREQUAL "sp")
  set (precision_flag "-DMYREAL8")
endif (precision STREQUAL "sp")

# Modules directory
set(CMAKE_Fortran_MODULE_DIRECTORY ${CMAKE_BINARY_DIR}/CMakeFiles/modules )
set(CMAKE_Fortran_MODDIR_FLAG "-module " )

message (STATUS "modules: ${CMAKE_Fortran_MODULE_DIRECTORY}")

#Generic Compilation flags
###########################
set(ARCH_OPT "-O2 -march=armv8-a  -DCOMP_ARMFLANG=1 -DARCH_CPU=ARM  -nofma -fopenmp")
set(FLAG_PRECISE "-ffp-contract=off -fno-unsafe-math-optimizations -fno-fast-math")
set(Fortran "-DCPP_comp=f90 -ffixed-line-length-none -fno-backslash ")

if ( debug STREQUAL "1" )
 
# Fortran
set_source_files_properties( ${source_files}  PROPERTIES COMPILE_FLAGS " ${precision_flag} ${Tet_mesher_inc} -DMETIS5 ${cppmach} ${cpprel} -g -O0 -ffp-contract=off -fno-unsafe-math-optimizations -fno-fast-math -fopenmp -fno-backslash -ffixed-line-length-none  -march=armv8-a -nofma -D COMP_ARMFLANG=1 -D ARCH_CPU=ARM ${ADF} " )

# C source files
set_source_files_properties(${c_source_files} PROPERTIES COMPILE_FLAGS "${precision_flag} ${Tet_mesher_inc} -DMETIS5 ${cppmach} ${cpprel} -O0 -g -march=armv8-a -nofma -D COMP_ARMFLANG=1 -D ARCH_CPU=ARM -ffp-contract=off -fno-unsafe-math-optimizations -fno -fast-math " )

# CXX source files
set_source_files_properties(${cpp_source_files} PROPERTIES COMPILE_FLAGS "${precision_flag} ${Tet_mesher_inc} -DMETIS5 ${cppmach} ${cpprel}  -O0 -g -march=armv8-a -nofma -D COMP_ARMFLANG=1 -D ARCH_CPU=ARM -ffp-contract=off -fno-unsafe-math-optimizations -fno-fast-math " )

else ()

# Fortran
set_source_files_properties( ${source_files}  PROPERTIES COMPILE_FLAGS " ${precision_flag} ${Tet_mesher_inc} -DMETIS5 ${cppmach} ${cpprel} ${ARCH_OPT} ${FLAG_PRECISE} ${Fortran}  ${ADF} " )

# C source files
set_source_files_properties(${c_source_files} PROPERTIES COMPILE_FLAGS "${precision_flag} ${Tet_mesher_inc} -DMETIS5 ${cppmach} ${cpprel} ${ARCH_OPT}  " )

# CXX source files
set_source_files_properties(${cpp_source_files} PROPERTIES COMPILE_FLAGS "${precision_flag} ${Tet_mesher_inc} -DMETIS5 ${cppmach} ${cpprel} -O2 -march=armv8-a -nofma -D COMP_ARMFLANG=1 -D ARCH_CPU=ARM -fopenmp " )

endif()

# Linking flags
set (CMAKE_EXE_LINKER_FLAGS " -march=armv8-a -nofma -D COMP_ARMFLANG=1  -ffp-contract=off -fno-unsafe-math-optimizations -fno-fast-math -O2  -fopenmp  -ffixed-line-length-none -fno-backslash      -rdynamic -armpl     -armpl   " )

#Libraries
set (LINK "dl ${metis_lib} ${xml_lib} ${flexpipe_lib} ${reader_lib} ${flexpipe} ${Tet_mesher_lib}  -lrt  -lm -lstdc++")


# -------------------------------------------------------------------------------------------------------------------------------------------
# Specific set of compilation flag

set (C_O0_compiler_flags " ${precision_flag} -DMETIS5 ${cppmach} ${cpprel} -O0  ")


#triangle.c
set_source_files_properties( ${source_directory}/com/fvmbag/tiangle.c PROPERTIES COMPILE_FLAGS ${C_O0_compiler_flags} )





