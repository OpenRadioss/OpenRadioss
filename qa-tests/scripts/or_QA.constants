# 
# Valid lines in QA.constants file:
#
#    Diff_Tolerance {decimal number}
#    Zero_Tolerance {decimal number}
#    setenv {variable} {value}   <- you can set ANY variable like this.
#    unsetenv {variable}         <- you can unset ANY variable like this.

#
# Other optional lines in QA.constants file:
#  Relative_Int_Tolerance  {number}
#  Int_Tolerance           {int}
#  Max_Integer             {int}    
#  global    .....
Max_Integer	9999999999
#  extension               tcl  <<< specific for PHLEX run mode
#  use_reset_tolerances         <<< specific for PHLEX run mode
#  --version
#  --args="...."

#BB +1 (! ne pas y toucher)
use_reset_tolerances

# Following ones can be repeated multiple times:
# These need to be preserved for each failure (regular expression)
#  save                    [.]phx$
# These need to be cleaned during --cleanup (regular expression)
#  delete                  [.](mvw|hm|out.*)$
# These will not trigger 'new file' message (solver specific, regular expression)
#  expectfile    ^filename$
#  expectfile    [.](extension|extension)$
#  expectfileext extension|extension

# When 'extract' command is missing for any example, then extract 
# files by default are located in the same location as input file
# but following can specify additional (possibly relative) path
#extract_path folder_path

# Default name of extract generated by exec
extract_name RD-qa.extract

# Run solver script instead of directly executable
exec_script or_radioss.pl
sandbox last_qa_files
echo-radioss
echo-radioss-tolerances


# Run each example with input file renamed to it. Use 'NONE' to disable.
rename_input NONE

# Lines which will be skipped from extract when --use_cqa is set
# or when use_skip_lines is used in QA.constants
#  (internal) - regexp  ## useful for expanding qa-print utility
# skip_lines ^(variable_001|VariaBle|bogus)$
# use_skip_lines

#  prevent copying executable to the local folder
exec_in_place

##BB+4 : necessary to compare with the maximal Energy value 
# Old variables no more used
# Scaled_Zero_Threshold 1.0e-6
# if module == dbef Scaled_Zero_Threshold 7.5e-6
# if precision == sp Scaled_Zero_Threshold 2.5e-5

# New variables
# Used to check if reference < Scale_Factor_Emax * Emax => Check with Scale_Factor_Delta_Vs_Emax
Scale_Factor_Emax 0.02
# Used to check if abs(max-min) < Scale_Factor_Delta_Vs_Emax * Emax => Ignore Diff
Scale_Factor_Delta_Vs_Emax 0.03


#Warn_Tolerance

# After failure or if --save_out_files is set, then run output will be
# saved in following 4 folders (no spaces in names)
#   save_location Screen_Output Output_files Extracted_data Saved_files
# 4 names must be given (not necessarily different) or a single name
# When there is single name then output will go to subfolder with that
# name in the same location where input file for 'go' came in
# occurrences of string 'DATE' in this command are replaced with 6
# digit string built out of date: YYMMDD, 'TIME' with HHMM
# occurrences of string 'HOST' are replaced with 'hostname'
# save_location Screen_DATE Ooutput_DATE Extract_DATE Save_DATE
# save_location DATE-TIME-HOST DATE-TIME-HOST DATE-TIME-HOST DATE-TIME-HOST 

##############################################
# DISBABLED FOR THE MOMENT => we set the DO_QA in the QA.files_14 so the DO_QA is not known here
# This actually activates QA output (depends on your solver)
# ifenv ENABLE_QAPRINT == 1 setenv DO_QA ON
#######################################################################

#BB+++
#General tolerances
#Diff_Tolerance 0.000001
Diff_Tolerance 0.00066
Relative_Int_Tolerance 0.0001
Zero_Tolerance 5.0e-8
global ELTID Int_Tolerance 5000000000

## QAPRINT
# DISABLED FOR THE MOMENT => we set the DO_QA in the QA.files_14 so the DO_QA is not known here
# We don't use QAPRINT for engine non reg for the moment
# If QAPRINT is enabled we don't read value from a file but we have real values with 
# precision error, so we use some tolerance to have same behaviour as before, seen with Tad
# ifenv DO_QA == ON and strict != 1 then
#     # F5.1 => 5%
#     # G11.4 => 0.01 %
#     global ERROR Zero_Tolerance 0.05
#     global IENERGY Diff_Tolerance 0.0001
#     global KENERGYT Diff_Tolerance 0.0001
#     global EXTWORK Diff_Tolerance 0.0001
#     global MASERR Diff_Tolerance 0.0001
#     global TIME Diff_Tolerance 0.0001
#     global TSTEP Diff_Tolerance 0.0001
# endif

#Win Tolerances :
#le hostname utilise par le qa script est : $hostname = substr ( $hostname, 0, 8 )

#Debug executable Tolerances :
if module == dbef Diff_Tolerance 0.005
if module == dbef Relative_Int_Tolerance 0.005
if module == dbef Zero_Tolerance 7.5e-7

#Single precision Tolerances :
if precision == sp Diff_Tolerance 0.005
if precision == sp Relative_Int_Tolerance 0.005
if precision == sp Zero_Tolerance 7.5e-7
#BB---

# Strict option decrease base tolerances
# Use --strict2 to use NO tolerances (ELTID is not ignored in this case)
if strict == 1 Diff_Tolerance 1e-9
if strict == 1 Zero_Tolerance 7.5e-9
    
# For integer, the tolerance (Deltai_Ref) is computed from : Relative_Int_Tolerance*(max(ref value,new value))
# While treating XXXXXX we figured out that there was not specific Relative_Int_Tolerance when using stric
# So for an important number of CYCLE (e.g. 50000) a difference of 2 or 3 cycles is not seen ...
# We decided to increase this strict specific tolerance to 1e-9*(max(ref value,new value))
if strict == 1 Relative_Int_Tolerance 0.000000001

save  [.](out|stat|rad)$

#save_location DATE-TIME-HOST DATE-TIME-HOST DATE-TIME-HOST DATE-TIME-HOST

delete  ^(core.*)$
delete  [.](h3d|rst)$
delete  .*\.gz
delete  T0[0-9]$
delete  [.](his_dat|spcf|prop|vec|hmf|html|igs|log|oslog|hma|grid|sh)$
delete  [.](nas|op2|fat|rs~|extract.*| )$
delete  [.](sum|fem|parm|his|scratch|qoi|extdata|)$
delete  [.](sty|sta|rst|abf|tmp|thy)

##BB## "%" designe ci-dessous le rootname
cleanup_files %.gz %T[0-9][0-9] %_[0-9][0-9][0-9][0-9]_[0-9][0-9][0-9][0-9].rst %A[0-9][0-9][0-9] %A[0-9][0-9][0-9].gz %Y[0-9][0-9][0-9] %T0[0-9] %SC[0-9][0-9] %_[0-9][0-9][0-9][0-9].abf %_[0-9][0-9][0-9][0-9].sty  screen_save screen_save_errors screen_xtra_infos ref.outp.txt %_[0-9][0-9][0-9][0-9].sta %Y[0-9][0-9][0-9]_reord outp.txt %_[0-9][0-9][0-9][0-9]_[0-9][0-9][0-9][0-9]_[IJK].rst  screen_save_[0-9][0-9]
##BB##%SC0[0-9] %_[0-9][0-9][0-9][0-9].abf

expectfile (test.pch|hwsolver.mesg|MIO_STATS|qaruns.summary)
expectfileext (.stat|.out)

# This is used for MPI runs for OptiStruct
skip_lines dirfrqrsp_case_001|realdisp@dof_001|imagdisp@dof_001|Complexdisp@dof_001|Complexdisp@dof_001<i>|NonlinIterations

# add any more here if needed
################################

# use absolute value for buckling eigenvalues

global Buckl Use_Abs_Values
global Rec_Mem_ Relative_Int_Tolerance 0.01
global ..._Mem_ Int_Tolerance 1
global IntTrace_ Match

#if flags = r global .*Lenvec Int_Tolerance 2.5
if flags = r global ..._Mem_ Relative_Int_Tolerance 0.5
if flags = r global ..._Mem_ Int_Tolerance 10
#

#################################
# Run MIO enabled tests on allowed platforms.
if env == USE_OS_MIO setenv GEMM_ALTLIB esslsmp/print/
if env == USE_OS_MIO setenv TKIO_ALTLIBX *[libMIO.a(get_MIO_ptrs_64.so)/print/abort]
if env == USE_OS_MIO setenv TKIO_ALTLIB    libmio.a(get_mio_ptrs_64.so)/print/abort
if env == USE_OS_MIO setenv MIO_FILES    *info*:*data:scratch*:generic_*:*.scr:*_scr*[ pf/vcache=100gb/cache_size=2048mb ]
if env == USE_OS_MIO setenv MIO_DEFAULTS pf/norelease/stats/mbytes/async/direct/global=0/pref=4/page_size=12mb

###################################
# Environment variables for Dilip's Acoustics runs.

if env == DO_AMLS_QA setenv AMLSD_LICENSE_FILE 27000\@murphy

#FAST FRS

